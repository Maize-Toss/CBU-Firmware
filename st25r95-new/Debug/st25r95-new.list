
st25r95-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004724  08004724  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800472c  0800472c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000020  08004754  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08004754  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4ec  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  0002d53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002fc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022707  00000000  00000000  00030750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d179  00000000  00000000  00052e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1eb0  00000000  00000000  0005ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131e80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  00131ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046c0 	.word	0x080046c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080046c0 	.word	0x080046c0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <reader_irq_pulse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(READER_IRQ_IN_PORT, READER_IRQ_IN_PIN, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <reader_irq_pulse+0x28>)
 80004e2:	f001 faf5 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 f842 	bl	8001570 <HAL_Delay>
  HAL_GPIO_WritePin(READER_IRQ_IN_PORT, READER_IRQ_IN_PIN, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2140      	movs	r1, #64	; 0x40
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <reader_irq_pulse+0x28>)
 80004f2:	f001 faed 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_Delay(8);
 80004f6:	2008      	movs	r0, #8
 80004f8:	f001 f83a 	bl	8001570 <HAL_Delay>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	48000400 	.word	0x48000400

08000504 <reader_nss>:

void reader_nss(uint8_t enable) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI2_CS_PORT, SPI2_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2db      	uxtb	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f001 fad4 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	b29a      	uxth	r2, r3
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <reader_tx+0x28>)
 8000546:	f002 fd90 	bl	800306a <HAL_SPI_Transmit>
 800054a:	4603      	mov	r3, r0
 800054c:	60fb      	str	r3, [r7, #12]
  return ret;
 800054e:	68fb      	ldr	r3, [r7, #12]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000003c 	.word	0x2000003c

0800055c <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi2, data, len, HAL_MAX_DELAY);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b29a      	uxth	r2, r3
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <reader_rx+0x28>)
 8000572:	f002 fee8 	bl	8003346 <HAL_SPI_Receive>
 8000576:	4603      	mov	r3, r0
 8000578:	60fb      	str	r3, [r7, #12]
  return ret;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000003c 	.word	0x2000003c

08000588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
  if (pin == READER_IRQ_OUT_PIN) {
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000598:	d102      	bne.n	80005a0 <HAL_GPIO_EXTI_Callback+0x18>
    reader_handler.irq_flag = 1;
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_GPIO_EXTI_Callback+0x24>)
 800059c:	2201      	movs	r2, #1
 800059e:	745a      	strb	r2, [r3, #17]
  }
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	20000124 	.word	0x20000124

080005b0 <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(uid[0]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ffd7 	bl	8001570 <HAL_Delay>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 ff52 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f840 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8fe 	bl	80007d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005dc:	f000 f88e 	bl	80006fc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f8ca 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_14443A;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <main+0x74>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <main+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <main+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <main+0x74>)
 80005f8:	2258      	movs	r2, #88	; 0x58
 80005fa:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <main+0x74>)
 80005fe:	22d1      	movs	r2, #209	; 0xd1
 8000600:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <main+0x74>)
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <main+0x78>)
 800060c:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0x74>)
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <main+0x7c>)
 8000612:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x74>)
 8000616:	4a0d      	ldr	r2, [pc, #52]	; (800064c <main+0x80>)
 8000618:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <main+0x74>)
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <main+0x84>)
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <main+0x74>)
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <main+0x88>)
 8000624:	615a      	str	r2, [r3, #20]

  st25r95_init(&reader_handler);
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x74>)
 8000628:	f000 fa26 	bl	8000a78 <st25r95_init>
  st25r95_calibrate(&reader_handler);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x74>)
 800062e:	f000 fd11 	bl	8001054 <st25r95_calibrate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  st25r95_idle(&reader_handler);
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <main+0x74>)
 8000634:	f000 fcb8 	bl	8000fa8 <st25r95_idle>
  while (1) {
    st25r95_service(&reader_handler);
 8000638:	4801      	ldr	r0, [pc, #4]	; (8000640 <main+0x74>)
 800063a:	f000 f9b7 	bl	80009ac <st25r95_service>
 800063e:	e7fb      	b.n	8000638 <main+0x6c>
 8000640:	20000124 	.word	0x20000124
 8000644:	08000505 	.word	0x08000505
 8000648:	08000531 	.word	0x08000531
 800064c:	0800055d 	.word	0x0800055d
 8000650:	080004d9 	.word	0x080004d9
 8000654:	080005b1 	.word	0x080005b1

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	; 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f822 	bl	80046b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067e:	f001 fa65 	bl	8001b4c <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f95c 	bl	8000944 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a6:	230a      	movs	r3, #10
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa9c 	bl	8001bf8 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c6:	f000 f93d 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	2104      	movs	r1, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fe9c 	bl	8002420 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ee:	f000 f929 	bl	8000944 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3758      	adds	r7, #88	; 0x58
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI2_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI2_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI2_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI2_Init+0x74>)
 8000716:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800071a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI2_Init+0x74>)
 800072a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI2_Init+0x74>)
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI2_Init+0x74>)
 800074a:	2207      	movs	r2, #7
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_SPI2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI2_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_SPI2_Init+0x74>)
 800075c:	f002 fbe2 	bl	8002f24 <HAL_SPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8ed 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000003c 	.word	0x2000003c
 8000774:	40003800 	.word	0x40003800

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	f003 fac2 	bl	8003d44 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8bd 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b52      	ldr	r3, [pc, #328]	; (8000938 <MX_GPIO_Init+0x160>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a51      	ldr	r2, [pc, #324]	; (8000938 <MX_GPIO_Init+0x160>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <MX_GPIO_Init+0x160>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <MX_GPIO_Init+0x160>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <MX_GPIO_Init+0x160>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b49      	ldr	r3, [pc, #292]	; (8000938 <MX_GPIO_Init+0x160>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <MX_GPIO_Init+0x160>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a45      	ldr	r2, [pc, #276]	; (8000938 <MX_GPIO_Init+0x160>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <MX_GPIO_Init+0x160>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_GPIO_Init+0x160>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <MX_GPIO_Init+0x160>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_GPIO_Init+0x160>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	21b0      	movs	r1, #176	; 0xb0
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f001 f93b 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f001 f934 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_IRQ_IN_GPIO_Port, RFID_IRQ_IN_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	4833      	ldr	r0, [pc, #204]	; (800093c <MX_GPIO_Init+0x164>)
 800086e:	f001 f92f 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	482d      	ldr	r0, [pc, #180]	; (8000940 <MX_GPIO_Init+0x168>)
 800088a:	f000 ffa7 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800088e:	23b0      	movs	r3, #176	; 0xb0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f000 ff98 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 ff8b 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80008c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 ff7b 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_OUT_Pin;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 ff6c 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_IN_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_IN_Pin;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090c:	2301      	movs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RFID_IRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_GPIO_Init+0x164>)
 800091c:	f000 ff5e 	bl	80017dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f000 ff22 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f000 ff3b 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	48000400 	.word	0x48000400
 8000940:	48000800 	.word	0x48000800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <st25r95_spi_tx+0x24>)
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	4611      	mov	r1, r2
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <st25r95_spi_tx+0x28>)
 8000964:	4798      	blx	r3
  tx_len = 0;
 8000966:	4b03      	ldr	r3, [pc, #12]	; (8000974 <st25r95_spi_tx+0x24>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000024c 	.word	0x2000024c
 8000978:	2000014c 	.word	0x2000014c

0800097c <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <st25r95_spi_byte+0x28>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 800098e:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <st25r95_spi_byte+0x2c>)
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffdb 	bl	8000950 <st25r95_spi_tx>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000024c 	.word	0x2000024c
 80009a8:	2000014c 	.word	0x2000014c

080009ac <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7c5b      	ldrb	r3, [r3, #17]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d118      	bne.n	80009f0 <st25r95_service+0x44>
    handler->irq_flag = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	745a      	strb	r2, [r3, #17]
    if (handler->state == ST25_STATE_IDLE) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d111      	bne.n	80009f0 <st25r95_service+0x44>
      st25r95_init(handler);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f853 	bl	8000a78 <st25r95_init>
      if (st25r95_14443A_detect(handler)) {
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f96c 	bl	8000cb0 <st25r95_14443A_detect>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d005      	beq.n	80009ea <st25r95_service+0x3e>
        handler->callback(handler->uid);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	3207      	adds	r2, #7
 80009e6:	4610      	mov	r0, r2
 80009e8:	4798      	blx	r3
      }
      st25r95_idle(handler);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 fadc 	bl	8000fa8 <st25r95_idle>
    }
  }
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8000a00:	bf00      	nop
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7c5b      	ldrb	r3, [r3, #17]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0fa      	beq.n	8000a02 <st25r95_response+0xa>
  handler->irq_flag = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	2001      	movs	r0, #1
 8000a18:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ffad 	bl	800097c <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	2101      	movs	r1, #1
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <st25r95_response+0x74>)
 8000a2a:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <st25r95_response+0x74>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b55      	cmp	r3, #85	; 0x55
 8000a32:	d105      	bne.n	8000a40 <st25r95_response+0x48>
    handler->nss(0);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4798      	blx	r3
    return rx_data;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <st25r95_response+0x74>)
 8000a3e:	e011      	b.n	8000a64 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <st25r95_response+0x78>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	4610      	mov	r0, r2
 8000a4a:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <st25r95_response+0x7c>)
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <st25r95_response+0x74>)
 8000a54:	7852      	ldrb	r2, [r2, #1]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4798      	blx	r3
  handler->nss(0);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	2000      	movs	r0, #0
 8000a60:	4798      	blx	r3
  return rx_data;
 8000a62:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <st25r95_response+0x74>)
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000250 	.word	0x20000250
 8000a70:	20000251 	.word	0x20000251
 8000a74:	20000252 	.word	0x20000252

08000a78 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f823 	bl	8000acc <st25r95_reset>
  handler->irq_pulse();
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d110      	bne.n	8000abc <st25r95_init+0x44>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f85a 	bl	8000b54 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f890 	bl	8000bcc <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	799b      	ldrb	r3, [r3, #6]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f8c1 	bl	8000c3c <st25r95_write_ARC>
      break;
 8000aba:	e003      	b.n	8000ac4 <st25r95_init+0x4c>
    default:
      st25r95_off(handler);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f819 	bl	8000af4 <st25r95_off>
      break;
 8000ac2:	bf00      	nop
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	2001      	movs	r0, #1
 8000ada:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8000adc:	2101      	movs	r1, #1
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff4c 	bl	800097c <st25r95_spi_byte>
  handler->nss(0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	2000      	movs	r0, #0
 8000aea:	4798      	blx	r3
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <st25r95_off+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <st25r95_off+0x58>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <st25r95_off+0x58>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <st25r95_off+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <st25r95_off+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <st25r95_off+0x5c>)
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	2001      	movs	r0, #1
 8000b26:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff11 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	2000      	movs	r0, #0
 8000b34:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff5e 	bl	80009f8 <st25r95_response>
 8000b3c:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000014c 	.word	0x2000014c
 8000b50:	2000024c 	.word	0x2000024c

08000b54 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <st25r95_14443A+0x70>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <st25r95_14443A+0x70>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <st25r95_14443A+0x70>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <st25r95_14443A+0x70>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	b25a      	sxtb	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	791b      	ldrb	r3, [r3, #4]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <st25r95_14443A+0x70>)
 8000b8c:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <st25r95_14443A+0x74>)
 8000b90:	2205      	movs	r2, #5
 8000b92:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fed7 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2202      	movs	r2, #2
 8000bae:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff21 	bl	80009f8 <st25r95_response>
 8000bb6:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000014c 	.word	0x2000014c
 8000bc8:	2000024c 	.word	0x2000024c

08000bcc <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000be0:	2209      	movs	r2, #9
 8000be2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000bec:	223a      	movs	r2, #58	; 0x3a
 8000bee:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <st25r95_write_timerw+0x68>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <st25r95_write_timerw+0x6c>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fe9d 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff feea 	bl	80009f8 <st25r95_response>
 8000c24:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	781b      	ldrb	r3, [r3, #0]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000014c 	.word	0x2000014c
 8000c38:	2000024c 	.word	0x2000024c

08000c3c <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c54:	2209      	movs	r2, #9
 8000c56:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c60:	2268      	movs	r2, #104	; 0x68
 8000c62:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <st25r95_write_ARC+0x6c>)
 8000c72:	78bb      	ldrb	r3, [r7, #2]
 8000c74:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <st25r95_write_ARC+0x70>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	2001      	movs	r0, #1
 8000c82:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fe63 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2000      	movs	r0, #0
 8000c90:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff feb0 	bl	80009f8 <st25r95_response>
 8000c98:	60f8      	str	r0, [r7, #12]
  return res[0];
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000014c 	.word	0x2000014c
 8000cac:	2000024c 	.word	0x2000024c

08000cb0 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 8000cb8:	23ff      	movs	r3, #255	; 0xff
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f883 	bl	8000dd8 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 8000cd2:	7d3b      	ldrb	r3, [r7, #20]
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d101      	bne.n	8000cdc <st25r95_14443A_detect+0x2c>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e078      	b.n	8000dce <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 8000cdc:	7d3b      	ldrb	r3, [r7, #20]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <st25r95_14443A_detect+0x3a>
    return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e071      	b.n	8000dce <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8000cea:	7d3b      	ldrb	r3, [r7, #20]
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	77fb      	strb	r3, [r7, #31]
 8000cf4:	e053      	b.n	8000d9e <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 8000cf6:	23ff      	movs	r3, #255	; 0xff
 8000cf8:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8000cfa:	f107 0214 	add.w	r2, r7, #20
 8000cfe:	7ffb      	ldrb	r3, [r7, #31]
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f8a4 	bl	8000e50 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8000d08:	7d3b      	ldrb	r3, [r7, #20]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d101      	bne.n	8000d12 <st25r95_14443A_detect+0x62>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e05d      	b.n	8000dce <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 8000d12:	7d3a      	ldrb	r2, [r7, #20]
 8000d14:	7d7b      	ldrb	r3, [r7, #21]
 8000d16:	4053      	eors	r3, r2
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	7dbb      	ldrb	r3, [r7, #22]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	4053      	eors	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	7e3b      	ldrb	r3, [r7, #24]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d001      	beq.n	8000d30 <st25r95_14443A_detect+0x80>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e04e      	b.n	8000dce <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8000d30:	7ffb      	ldrb	r3, [r7, #31]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	7d3a      	ldrb	r2, [r7, #20]
 8000d36:	3320      	adds	r3, #32
 8000d38:	443b      	add	r3, r7
 8000d3a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8000d3e:	7ffb      	ldrb	r3, [r7, #31]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	3301      	adds	r3, #1
 8000d44:	7d7a      	ldrb	r2, [r7, #21]
 8000d46:	3320      	adds	r3, #32
 8000d48:	443b      	add	r3, r7
 8000d4a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	7dba      	ldrb	r2, [r7, #22]
 8000d56:	3320      	adds	r3, #32
 8000d58:	443b      	add	r3, r7
 8000d5a:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	3303      	adds	r3, #3
 8000d64:	7dfa      	ldrb	r2, [r7, #23]
 8000d66:	3320      	adds	r3, #32
 8000d68:	443b      	add	r3, r7
 8000d6a:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 8000d6e:	7d3d      	ldrb	r5, [r7, #20]
 8000d70:	7d7b      	ldrb	r3, [r7, #21]
 8000d72:	7dba      	ldrb	r2, [r7, #22]
 8000d74:	7df9      	ldrb	r1, [r7, #23]
 8000d76:	f107 0414 	add.w	r4, r7, #20
 8000d7a:	7ff8      	ldrb	r0, [r7, #31]
 8000d7c:	9102      	str	r1, [sp, #8]
 8000d7e:	9201      	str	r2, [sp, #4]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	462b      	mov	r3, r5
 8000d84:	4622      	mov	r2, r4
 8000d86:	4601      	mov	r1, r0
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f8a7 	bl	8000edc <st25r95_14443A_select>
    if (data[0] & 0x4)
 8000d8e:	7d3b      	ldrb	r3, [r7, #20]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8000d98:	7ffb      	ldrb	r3, [r7, #31]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	77fb      	strb	r3, [r7, #31]
 8000d9e:	7fba      	ldrb	r2, [r7, #30]
 8000da0:	7ffb      	ldrb	r3, [r7, #31]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d2a7      	bcs.n	8000cf6 <st25r95_14443A_detect+0x46>
 8000da6:	e000      	b.n	8000daa <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 8000da8:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3307      	adds	r3, #7
 8000dae:	220a      	movs	r2, #10
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fc7c 	bl	80046b0 <memset>
  memcpy(handler->uid, UID, 10);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3307      	adds	r3, #7
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	cb03      	ldmia	r3!, {r0, r1}
 8000dc4:	6010      	str	r0, [r2, #0]
 8000dc6:	6051      	str	r1, [r2, #4]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	8113      	strh	r3, [r2, #8]
  return 1;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000dd8 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <st25r95_14443A_REQA+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <st25r95_14443A_REQA+0x70>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <st25r95_14443A_REQA+0x70>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <st25r95_14443A_REQA+0x70>)
 8000df6:	2226      	movs	r2, #38	; 0x26
 8000df8:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <st25r95_14443A_REQA+0x70>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <st25r95_14443A_REQA+0x74>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fd9e 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2000      	movs	r0, #0
 8000e1a:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fdeb 	bl	80009f8 <st25r95_response>
 8000e22:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b80      	cmp	r3, #128	; 0x80
 8000e2a:	d109      	bne.n	8000e40 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1c99      	adds	r1, r3, #2
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f003 fc2b 	bl	8004694 <memcpy>
 8000e3e:	e000      	b.n	8000e42 <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000e40:	bf00      	nop

}
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000014c 	.word	0x2000014c
 8000e4c:	2000024c 	.word	0x2000024c

08000e50 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000e70:	7afb      	ldrb	r3, [r7, #11]
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <st25r95_14443A_ANTICOLLISION+0x84>)
 8000e74:	5cd2      	ldrb	r2, [r2, r3]
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e78:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <st25r95_14443A_ANTICOLLISION+0x80>)
 8000e82:	2208      	movs	r2, #8
 8000e84:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <st25r95_14443A_ANTICOLLISION+0x88>)
 8000e88:	2206      	movs	r2, #6
 8000e8a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	2001      	movs	r0, #1
 8000e92:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff fd5b 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fda8 	bl	80009f8 <st25r95_response>
 8000ea8:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b80      	cmp	r3, #128	; 0x80
 8000eb0:	d109      	bne.n	8000ec6 <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	1c99      	adds	r1, r3, #2
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f003 fbe8 	bl	8004694 <memcpy>
 8000ec4:	e000      	b.n	8000ec8 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000ec6:	bf00      	nop
}
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000014c 	.word	0x2000014c
 8000ed4:	080046d8 	.word	0x080046d8
 8000ed8:	2000024c 	.word	0x2000024c

08000edc <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	72fb      	strb	r3, [r7, #11]
 8000eec:	4613      	mov	r3, r2
 8000eee:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <st25r95_14443A_select+0xc4>)
 8000f06:	5cd2      	ldrb	r2, [r2, r3]
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f0a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f0e:	2270      	movs	r2, #112	; 0x70
 8000f10:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f14:	7abb      	ldrb	r3, [r7, #10]
 8000f16:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f1e:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8000f20:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f26:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f2e:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8000f30:	7aba      	ldrb	r2, [r7, #10]
 8000f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f36:	4053      	eors	r3, r2
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f3e:	4053      	eors	r3, r2
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f46:	4053      	eors	r3, r2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f4c:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <st25r95_14443A_select+0xc0>)
 8000f50:	2228      	movs	r2, #40	; 0x28
 8000f52:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <st25r95_14443A_select+0xc8>)
 8000f56:	220b      	movs	r2, #11
 8000f58:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2001      	movs	r0, #1
 8000f60:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff fcf4 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fd41 	bl	80009f8 <st25r95_response>
 8000f76:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b80      	cmp	r3, #128	; 0x80
 8000f7e:	d109      	bne.n	8000f94 <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	1c99      	adds	r1, r3, #2
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f003 fb81 	bl	8004694 <memcpy>
 8000f92:	e000      	b.n	8000f96 <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 8000f94:	bf00      	nop
}
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000014c 	.word	0x2000014c
 8000fa0:	080046d8 	.word	0x080046d8
 8000fa4:	2000024c 	.word	0x2000024c

08000fa8 <st25r95_idle>:

void st25r95_idle(st25r95_handle *handler) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <st25r95_idle+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <st25r95_idle+0xa4>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <st25r95_idle+0xa4>)
 8000fbe:	220e      	movs	r2, #14
 8000fc0:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_WU_SRC_TagDetection;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <st25r95_idle+0xa4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <st25r95_idle+0xa4>)
 8000fca:	2221      	movs	r2, #33	; 0x21
 8000fcc:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <st25r95_idle+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <st25r95_idle+0xa4>)
 8000fd6:	2279      	movs	r2, #121	; 0x79
 8000fd8:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <st25r95_idle+0xa4>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <st25r95_idle+0xa4>)
 8000fe2:	2218      	movs	r2, #24
 8000fe4:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <st25r95_idle+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <st25r95_idle+0xa4>)
 8000fee:	2220      	movs	r2, #32
 8000ff0:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <st25r95_idle+0xa4>)
 8000ff4:	2260      	movs	r2, #96	; 0x60
 8000ff6:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <st25r95_idle+0xa4>)
 8000ffa:	2260      	movs	r2, #96	; 0x60
 8000ffc:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	789b      	ldrb	r3, [r3, #2]
 8001002:	3b08      	subs	r3, #8
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <st25r95_idle+0xa4>)
 8001008:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	789b      	ldrb	r3, [r3, #2]
 800100e:	3308      	adds	r3, #8
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <st25r95_idle+0xa4>)
 8001014:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <st25r95_idle+0xa4>)
 8001018:	223f      	movs	r2, #63	; 0x3f
 800101a:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <st25r95_idle+0xa4>)
 800101e:	2201      	movs	r2, #1
 8001020:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <st25r95_idle+0xa8>)
 8001024:	2211      	movs	r2, #17
 8001026:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2001      	movs	r0, #1
 800102e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fc8d 	bl	8000950 <st25r95_spi_tx>
  handler->nss(0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2000      	movs	r0, #0
 800103c:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000014c 	.word	0x2000014c
 8001050:	2000024c 	.word	0x2000024c

08001054 <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e0bf      	b.n	80011e2 <st25r95_calibrate+0x18e>
    tx_len = 17;
 8001062:	4b66      	ldr	r3, [pc, #408]	; (80011fc <st25r95_calibrate+0x1a8>)
 8001064:	2211      	movs	r2, #17
 8001066:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8001068:	4a65      	ldr	r2, [pc, #404]	; (8001200 <st25r95_calibrate+0x1ac>)
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <st25r95_calibrate+0x1b0>)
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2001      	movs	r0, #1
 800107e:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fc65 	bl	8000950 <st25r95_spi_tx>
    handler->nss(0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2000      	movs	r0, #0
 800108c:	4798      	blx	r3

    res = st25r95_response(handler);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fcb2 	bl	80009f8 <st25r95_response>
 8001094:	4603      	mov	r3, r0
 8001096:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <st25r95_calibrate+0x1b4>)
 8001098:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <st25r95_calibrate+0x1b4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 809a 	bne.w	80011da <st25r95_calibrate+0x186>
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <st25r95_calibrate+0x1b4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	f040 8093 	bne.w	80011da <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <st25r95_calibrate+0x1b4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d13e      	bne.n	800113e <st25r95_calibrate+0xea>
        switch (i - 1) {
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	f200 8089 	bhi.w	80011dc <st25r95_calibrate+0x188>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <st25r95_calibrate+0x7c>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080010f1 	.word	0x080010f1
 80010d4:	080011dd 	.word	0x080011dd
 80010d8:	080010f9 	.word	0x080010f9
 80010dc:	08001107 	.word	0x08001107
 80010e0:	08001115 	.word	0x08001115
 80010e4:	08001123 	.word	0x08001123
 80010e8:	08001131 	.word	0x08001131
 80010ec:	080011dd 	.word	0x080011dd
          case 0:
            calibrate_data[14] = 0xFC;
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <st25r95_calibrate+0x1b0>)
 80010f2:	22fc      	movs	r2, #252	; 0xfc
 80010f4:	739a      	strb	r2, [r3, #14]
            break;
 80010f6:	e071      	b.n	80011dc <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <st25r95_calibrate+0x1b0>)
 80010fa:	7b9b      	ldrb	r3, [r3, #14]
 80010fc:	3340      	adds	r3, #64	; 0x40
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001102:	739a      	strb	r2, [r3, #14]
            break;
 8001104:	e06a      	b.n	80011dc <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001108:	7b9b      	ldrb	r3, [r3, #14]
 800110a:	3320      	adds	r3, #32
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001110:	739a      	strb	r2, [r3, #14]
            break;
 8001112:	e063      	b.n	80011dc <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001116:	7b9b      	ldrb	r3, [r3, #14]
 8001118:	3310      	adds	r3, #16
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b39      	ldr	r3, [pc, #228]	; (8001204 <st25r95_calibrate+0x1b0>)
 800111e:	739a      	strb	r2, [r3, #14]
            break;
 8001120:	e05c      	b.n	80011dc <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001124:	7b9b      	ldrb	r3, [r3, #14]
 8001126:	3308      	adds	r3, #8
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <st25r95_calibrate+0x1b0>)
 800112c:	739a      	strb	r2, [r3, #14]
            break;
 800112e:	e055      	b.n	80011dc <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001132:	7b9b      	ldrb	r3, [r3, #14]
 8001134:	3304      	adds	r3, #4
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <st25r95_calibrate+0x1b0>)
 800113a:	739a      	strb	r2, [r3, #14]
            break;
 800113c:	e04e      	b.n	80011dc <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <st25r95_calibrate+0x1b4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3302      	adds	r3, #2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d147      	bne.n	80011da <st25r95_calibrate+0x186>
        switch (i - 1) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3b01      	subs	r3, #1
 800114e:	2b07      	cmp	r3, #7
 8001150:	d844      	bhi.n	80011dc <st25r95_calibrate+0x188>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <st25r95_calibrate+0x104>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011dd 	.word	0x080011dd
 800115c:	08001179 	.word	0x08001179
 8001160:	08001187 	.word	0x08001187
 8001164:	08001195 	.word	0x08001195
 8001168:	080011a3 	.word	0x080011a3
 800116c:	080011b1 	.word	0x080011b1
 8001170:	080011bf 	.word	0x080011bf
 8001174:	080011cd 	.word	0x080011cd
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <st25r95_calibrate+0x1b0>)
 800117a:	7b9b      	ldrb	r3, [r3, #14]
 800117c:	3b80      	subs	r3, #128	; 0x80
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001182:	739a      	strb	r2, [r3, #14]
            break;
 8001184:	e02a      	b.n	80011dc <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001188:	7b9b      	ldrb	r3, [r3, #14]
 800118a:	3b40      	subs	r3, #64	; 0x40
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001190:	739a      	strb	r2, [r3, #14]
            break;
 8001192:	e023      	b.n	80011dc <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <st25r95_calibrate+0x1b0>)
 8001196:	7b9b      	ldrb	r3, [r3, #14]
 8001198:	3b20      	subs	r3, #32
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <st25r95_calibrate+0x1b0>)
 800119e:	739a      	strb	r2, [r3, #14]
            break;
 80011a0:	e01c      	b.n	80011dc <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011a4:	7b9b      	ldrb	r3, [r3, #14]
 80011a6:	3b10      	subs	r3, #16
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011ac:	739a      	strb	r2, [r3, #14]
            break;
 80011ae:	e015      	b.n	80011dc <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011b2:	7b9b      	ldrb	r3, [r3, #14]
 80011b4:	3b08      	subs	r3, #8
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011ba:	739a      	strb	r2, [r3, #14]
            break;
 80011bc:	e00e      	b.n	80011dc <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011c0:	7b9b      	ldrb	r3, [r3, #14]
 80011c2:	3b04      	subs	r3, #4
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011c8:	739a      	strb	r2, [r3, #14]
            break;
 80011ca:	e007      	b.n	80011dc <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011ce:	7b9b      	ldrb	r3, [r3, #14]
 80011d0:	3b04      	subs	r3, #4
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011d6:	739a      	strb	r2, [r3, #14]
            break;
 80011d8:	e000      	b.n	80011dc <st25r95_calibrate+0x188>
        }
      }
 80011da:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	3301      	adds	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	f67f af3c 	bls.w	8001062 <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <st25r95_calibrate+0x1b0>)
 80011ec:	7b9a      	ldrb	r2, [r3, #14]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	709a      	strb	r2, [r3, #2]
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000024c 	.word	0x2000024c
 8001200:	2000014c 	.word	0x2000014c
 8001204:	20000000 	.word	0x20000000
 8001208:	20000350 	.word	0x20000350

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_MspInit+0x44>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x44>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x44>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x44>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_SPI_MspInit+0x7c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d128      	bne.n	80012c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_SPI_MspInit+0x80>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b8:	2305      	movs	r3, #5
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_SPI_MspInit+0x84>)
 80012c4:	f000 fa8a 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40003800 	.word	0x40003800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000400 	.word	0x48000400

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0a4      	sub	sp, #144	; 0x90
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2268      	movs	r2, #104	; 0x68
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f9d7 	bl	80046b0 <memset>
  if(huart->Instance==USART2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_UART_MspInit+0xb0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d13a      	bne.n	8001382 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4618      	mov	r0, r3
 800131a:	f001 faa5 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001324:	f7ff fb0e 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800132e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001332:	6593      	str	r3, [r2, #88]	; 0x58
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001358:	230c      	movs	r3, #12
 800135a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136e:	2307      	movs	r3, #7
 8001370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f000 fa2d 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3790      	adds	r7, #144	; 0x90
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004400 	.word	0x40004400
 8001390:	40021000 	.word	0x40021000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f8a6 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFID_IRQ_OUT_Pin);
 80013ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013f0:	f000 fb86 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f8:	f000 fb82 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f003 f8fb 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff f8b9 	bl	80005cc <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800145c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001468:	08004734 	.word	0x08004734
  ldr r2, =_sbss
 800146c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001470:	20000358 	.word	0x20000358

08001474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_IRQHandler>
	...

08001478 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_Init+0x3c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_Init+0x3c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f962 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f80f 	bl	80014b8 <HAL_InitTick>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	e001      	b.n	80014aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a6:	f7ff feb1 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_InitTick+0x6c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_InitTick+0x70>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_InitTick+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f96d 	bl	80017c2 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10f      	bne.n	800150e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d809      	bhi.n	8001508 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f937 	bl	800176e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_InitTick+0x74>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e007      	b.n	8001518 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e004      	b.n	8001518 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e001      	b.n	8001518 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000001c 	.word	0x2000001c
 8001528:	20000014 	.word	0x20000014
 800152c:	20000018 	.word	0x20000018

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000001c 	.word	0x2000001c
 8001554:	20000354 	.word	0x20000354

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000354 	.word	0x20000354

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000001c 	.word	0x2000001c

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff3e 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff31 	bl	800161c <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa2 	bl	8001714 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e154      	b.n	8001a96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8146 	beq.w	8001a90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d017      	beq.n	80018ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d123      	bne.n	800190e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80a0 	beq.w	8001a90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6613      	str	r3, [r2, #96]	; 0x60
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_GPIO_Init+0x2dc>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1ec>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_GPIO_Init+0x2e0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1e8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2e4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1e4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_GPIO_Init+0x2e8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <HAL_GPIO_Init+0x2ec>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1dc>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019b8:	2307      	movs	r3, #7
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_GPIO_Init+0x2dc>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0c:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a60:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f aea3 	bne.w	80017ec <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd32 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40007000 	.word	0x40007000

08001b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5a:	d130      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b68:	d038      	beq.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b72:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2232      	movs	r2, #50	; 0x32
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b90:	e002      	b.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d102      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f2      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb8:	d110      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e00f      	b.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d007      	beq.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	431bde83 	.word	0x431bde83

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f000 bc02 	b.w	8002410 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0c:	4b96      	ldr	r3, [pc, #600]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c16:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80e4 	beq.w	8001df6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4c>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	f040 808b 	bne.w	8001d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f040 8087 	bne.w	8001d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c44:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_OscConfig+0x64>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e3d9      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1a      	ldr	r2, [r3, #32]
 8001c60:	4b81      	ldr	r3, [pc, #516]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_RCC_OscConfig+0x7e>
 8001c6c:	4b7e      	ldr	r3, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c74:	e005      	b.n	8001c82 <HAL_RCC_OscConfig+0x8a>
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d223      	bcs.n	8001cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fd8c 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e3ba      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a72      	ldr	r2, [pc, #456]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	496d      	ldr	r1, [pc, #436]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	4968      	ldr	r1, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
 8001ccc:	e025      	b.n	8001d1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cce:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4960      	ldr	r1, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	495b      	ldr	r1, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fd4c 	bl	80027a8 <RCC_SetFlashLatencyFromMSIRange>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e37a      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1a:	f000 fc81 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4950      	ldr	r1, [pc, #320]	; (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_RCC_OscConfig+0x278>)
 8001d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	; (8001e74 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fbba 	bl	80014b8 <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d052      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	e35e      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d032      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a42      	ldr	r2, [pc, #264]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fbf7 	bl	8001558 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fbf3 	bl	8001558 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e347      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4930      	ldr	r1, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	492b      	ldr	r1, [pc, #172]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
 8001dbe:	e01a      	b.n	8001df6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fbc4 	bl	8001558 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fbc0 	bl	8001558 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e314      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1dc>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d073      	beq.n	8001eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x21c>
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d10e      	bne.n	8001e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d10b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d063      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2f0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d15f      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e2f1      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_OscConfig+0x24c>
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e025      	b.n	8001e90 <HAL_RCC_OscConfig+0x298>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d114      	bne.n	8001e78 <HAL_RCC_OscConfig+0x280>
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a02      	ldr	r2, [pc, #8]	; (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x298>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080046dc 	.word	0x080046dc
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000018 	.word	0x20000018
 8001e78:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a9f      	ldr	r2, [pc, #636]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b9d      	ldr	r3, [pc, #628]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a9c      	ldr	r2, [pc, #624]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff fb5e 	bl	8001558 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fb5a 	bl	8001558 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e2ae      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb2:	4b92      	ldr	r3, [pc, #584]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2a8>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb4a 	bl	8001558 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fb46 	bl	8001558 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e29a      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2d0>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d060      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x310>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d116      	bne.n	8001f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x328>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e277      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4973      	ldr	r1, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	e040      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d023      	beq.n	8001f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3e:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fb05 	bl	8001558 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f52:	f7ff fb01 	bl	8001558 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e255      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f64:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b62      	ldr	r3, [pc, #392]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	495f      	ldr	r1, [pc, #380]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e018      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff fae1 	bl	8001558 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fadd 	bl	8001558 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e231      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d03c      	beq.n	800203e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01c      	beq.n	8002006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fabc 	bl	8001558 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fab8 	bl	8001558 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e20c      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ef      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x3ec>
 8002004:	e01b      	b.n	800203e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8002008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200c:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff fa9f 	bl	8001558 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff fa9b 	bl	8001558 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1ef      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ef      	bne.n	800201e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80a6 	beq.w	8002198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204c:	2300      	movs	r3, #0
 800204e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	4a26      	ldr	r2, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	6593      	str	r3, [r2, #88]	; 0x58
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002074:	2301      	movs	r3, #1
 8002076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x508>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d118      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x508>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x508>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002090:	f7ff fa62 	bl	8001558 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7ff fa5e 	bl	8001558 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1b2      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x508>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4d8>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ce:	e029      	b.n	8002124 <HAL_RCC_OscConfig+0x52c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d115      	bne.n	8002104 <HAL_RCC_OscConfig+0x50c>
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_RCC_OscConfig+0x504>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	e014      	b.n	8002124 <HAL_RCC_OscConfig+0x52c>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	4b9a      	ldr	r3, [pc, #616]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a99      	ldr	r2, [pc, #612]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002114:	4b96      	ldr	r3, [pc, #600]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a95      	ldr	r2, [pc, #596]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d016      	beq.n	800215a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff fa14 	bl	8001558 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7ff fa10 	bl	8001558 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e162      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ed      	beq.n	8002134 <HAL_RCC_OscConfig+0x53c>
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7ff f9fd 	bl	8001558 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f9f9 	bl	8001558 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e14b      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002178:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ed      	bne.n	8002162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002186:	7ffb      	ldrb	r3, [r7, #31]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03c      	beq.n	800221e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021ac:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80021ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b2:	4a6f      	ldr	r2, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9cc 	bl	8001558 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7ff f9c8 	bl	8001558 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e11c      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d6:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80021d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ef      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5cc>
 80021e4:	e01b      	b.n	800221e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021e6:	4b62      	ldr	r3, [pc, #392]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80021e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ec:	4a60      	ldr	r2, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7ff f9af 	bl	8001558 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fe:	f7ff f9ab 	bl	8001558 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0ff      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002210:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ef      	bne.n	80021fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80f3 	beq.w	800240e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	2b02      	cmp	r3, #2
 800222e:	f040 80c9 	bne.w	80023c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	429a      	cmp	r2, r3
 8002244:	d12c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	3b01      	subs	r3, #1
 8002252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d123      	bne.n	80022a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d11b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d113      	bne.n	80022a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	3b01      	subs	r3, #1
 8002286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d06b      	beq.n	8002378 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d062      	beq.n	800236c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0ac      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c2:	f7ff f949 	bl	8001558 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff f945 	bl	8001558 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e099      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x77c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f8:	3a01      	subs	r2, #1
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002302:	0212      	lsls	r2, r2, #8
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	3a01      	subs	r2, #1
 800230e:	0552      	lsls	r2, r2, #21
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002316:	0852      	lsrs	r2, r2, #1
 8002318:	3a01      	subs	r2, #1
 800231a:	0652      	lsls	r2, r2, #25
 800231c:	4311      	orrs	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002322:	06d2      	lsls	r2, r2, #27
 8002324:	430a      	orrs	r2, r1
 8002326:	4912      	ldr	r1, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002344:	f7ff f908 	bl	8001558 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7ff f904 	bl	8001558 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e058      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_OscConfig+0x778>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236a:	e050      	b.n	800240e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04f      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
 8002370:	40021000 	.word	0x40021000
 8002374:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d144      	bne.n	800240e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800239c:	f7ff f8dc 	bl	8001558 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff f8d8 	bl	8001558 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e02c      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x7ac>
 80023c2:	e024      	b.n	800240e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d01f      	beq.n	800240a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7ff f8bf 	bl	8001558 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff f8bb 	bl	8001558 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4905      	ldr	r1, [pc, #20]	; (8002418 <HAL_RCC_OscConfig+0x820>)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x824>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e001      	b.n	800240e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	feeefffc 	.word	0xfeeefffc

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0e7      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4970      	ldr	r1, [pc, #448]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cf      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247c:	429a      	cmp	r2, r3
 800247e:	d908      	bls.n	8002492 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4960      	ldr	r1, [pc, #384]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04c      	beq.n	8002538 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d121      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0a6      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	4b54      	ldr	r3, [pc, #336]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e09a      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d6:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e08e      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e086      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4943      	ldr	r1, [pc, #268]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7ff f826 	bl	8001558 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff f822 	bl	8001558 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e06e      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002550:	429a      	cmp	r2, r3
 8002552:	d208      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	492b      	ldr	r1, [pc, #172]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d210      	bcs.n	8002596 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 0207 	bic.w	r2, r3, #7
 800257c:	4923      	ldr	r1, [pc, #140]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCC_ClockConfig+0x1ec>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e036      	b.n	8002604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4918      	ldr	r1, [pc, #96]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4910      	ldr	r1, [pc, #64]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d4:	f000 f824 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	490b      	ldr	r1, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1f4>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1fc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe ff5d 	bl	80014b8 <HAL_InitTick>
 80025fe:	4603      	mov	r3, r0
 8002600:	72fb      	strb	r3, [r7, #11]

  return status;
 8002602:	7afb      	ldrb	r3, [r7, #11]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
 8002614:	080046dc 	.word	0x080046dc
 8002618:	20000014 	.word	0x20000014
 800261c:	20000018 	.word	0x20000018

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d121      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d11e      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002654:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e005      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <HAL_RCC_GetSysClockFreq+0x10c>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d102      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_GetSysClockFreq+0x110>)
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e004      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <HAL_RCC_GetSysClockFreq+0x114>)
 80026a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d134      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d003      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0xac>
 80026c4:	e005      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c8:	617b      	str	r3, [r7, #20]
      break;
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ce:	617b      	str	r3, [r7, #20]
      break;
 80026d0:	e002      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	617b      	str	r3, [r7, #20]
      break;
 80026d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	3301      	adds	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	fb03 f202 	mul.w	r2, r3, r2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0e5b      	lsrs	r3, r3, #25
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	3301      	adds	r3, #1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002718:	69bb      	ldr	r3, [r7, #24]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	080046f4 	.word	0x080046f4
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000014 	.word	0x20000014

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	080046ec 	.word	0x080046ec

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002780:	f7ff ffda 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4904      	ldr	r1, [pc, #16]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	080046ec 	.word	0x080046ec

080027a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f9b6 	bl	8001b30 <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
 80027c6:	e014      	b.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a24      	ldr	r2, [pc, #144]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e0:	f7ff f9a6 	bl	8001b30 <HAL_PWREx_GetVoltageRange>
 80027e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	d10b      	bne.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d919      	bls.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2ba0      	cmp	r3, #160	; 0xa0
 8002804:	d902      	bls.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002806:	2302      	movs	r3, #2
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e013      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e010      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d902      	bls.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002818:	2303      	movs	r3, #3
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e00a      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d102      	bne.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002824:	2302      	movs	r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e004      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d101      	bne.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 0207 	bic.w	r2, r3, #7
 800283c:	4909      	ldr	r1, [pc, #36]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	40022000 	.word	0x40022000

08002868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002870:	2300      	movs	r3, #0
 8002872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002874:	2300      	movs	r3, #0
 8002876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002880:	2b00      	cmp	r3, #0
 8002882:	d031      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800288c:	d01a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800288e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002892:	d814      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800289c:	d10f      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800289e:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa44 	bl	8002d40 <RCCEx_PLLSAI1_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	74fb      	strb	r3, [r7, #19]
      break;
 80028c2:	e000      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80028c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028cc:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	494e      	ldr	r1, [pc, #312]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 809e 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002928:	2301      	movs	r3, #1
 800292a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a39      	ldr	r2, [pc, #228]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002938:	f7fe fe0e 	bl	8001558 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800293e:	e009      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fe0a 	bl	8001558 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d902      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	74fb      	strb	r3, [r7, #19]
        break;
 8002952:	e005      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d15a      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01e      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d019      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fdca 	bl	8001558 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c6:	e00b      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe fdc6 	bl	8001558 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d902      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	74fb      	strb	r3, [r7, #19]
            break;
 80029de:	e006      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ec      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a02:	4904      	ldr	r1, [pc, #16]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a0a:	e009      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
 8002a10:	e006      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a20:	7c7b      	ldrb	r3, [r7, #17]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b9e      	ldr	r3, [pc, #632]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a9d      	ldr	r2, [pc, #628]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a3e:	4b98      	ldr	r3, [pc, #608]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 0203 	bic.w	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4994      	ldr	r1, [pc, #592]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a60:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 020c 	bic.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	498c      	ldr	r1, [pc, #560]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a82:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	4983      	ldr	r1, [pc, #524]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	497b      	ldr	r1, [pc, #492]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac6:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4972      	ldr	r1, [pc, #456]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae8:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	496a      	ldr	r1, [pc, #424]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	4961      	ldr	r1, [pc, #388]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	4959      	ldr	r1, [pc, #356]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b4e:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	4950      	ldr	r1, [pc, #320]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	4948      	ldr	r1, [pc, #288]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b98:	f023 0203 	bic.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	493f      	ldr	r1, [pc, #252]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d028      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	4937      	ldr	r1, [pc, #220]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
 8002be0:	e011      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f8a4 	bl	8002d40 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	491f      	ldr	r1, [pc, #124]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f875 	bl	8002d40 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d02b      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f843 	bl	8002d40 <RCCEx_PLLSAI1_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	4916      	ldr	r1, [pc, #88]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f820 	bl	8002d40 <RCCEx_PLLSAI1_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	4904      	ldr	r1, [pc, #16]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d30:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d4e:	4b74      	ldr	r3, [pc, #464]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d5a:	4b71      	ldr	r3, [pc, #452]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d10d      	bne.n	8002d86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d72:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
       ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d047      	beq.n	8002e16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e044      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d018      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0x86>
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d825      	bhi.n	8002de4 <RCCEx_PLLSAI1_Config+0xa4>
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d002      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0x62>
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d009      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x74>
 8002da0:	e020      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db2:	e01a      	b.n	8002dea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e013      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc6:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de2:	e006      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      break;
 8002de8:	e004      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	4943      	ldr	r1, [pc, #268]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d17c      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fe fb96 	bl	8001558 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2e:	e009      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e30:	f7fe fb92 	bl	8001558 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	73fb      	strb	r3, [r7, #15]
        break;
 8002e42:	e005      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ef      	bne.n	8002e30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d15f      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d110      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	0211      	lsls	r1, r2, #8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	06d2      	lsls	r2, r2, #27
 8002e74:	430a      	orrs	r2, r1
 8002e76:	492a      	ldr	r1, [pc, #168]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	610b      	str	r3, [r1, #16]
 8002e7c:	e027      	b.n	8002ece <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d112      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6912      	ldr	r2, [r2, #16]
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0552      	lsls	r2, r2, #21
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	491f      	ldr	r1, [pc, #124]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
 8002ea8:	e011      	b.n	8002ece <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	0211      	lsls	r1, r2, #8
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6952      	ldr	r2, [r2, #20]
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	0652      	lsls	r2, r2, #25
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	4915      	ldr	r1, [pc, #84]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe fb3d 	bl	8001558 <HAL_GetTick>
 8002ede:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee0:	e009      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee2:	f7fe fb39 	bl	8001558 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d902      	bls.n	8002ef6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef4:	e005      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ef      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e095      	b.n	8003062 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f46:	d009      	beq.n	8002f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe f96c 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9c:	d902      	bls.n	8002fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e002      	b.n	8002faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	f003 0204 	and.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_Transmit+0x22>
 8003088:	2302      	movs	r3, #2
 800308a:	e158      	b.n	800333e <HAL_SPI_Transmit+0x2d4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe fa60 	bl	8001558 <HAL_GetTick>
 8003098:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ae:	e13d      	b.n	800332c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_Transmit+0x52>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030c0:	e134      	b.n	800332c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310c:	d10f      	bne.n	800312e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d007      	beq.n	800314c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003154:	d94b      	bls.n	80031ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_SPI_Transmit+0xfa>
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d13e      	bne.n	80031e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003188:	e02b      	b.n	80031e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d112      	bne.n	80031be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031bc:	e011      	b.n	80031e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031be:	f7fe f9cb 	bl	8001558 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d803      	bhi.n	80031d6 <HAL_SPI_Transmit+0x16c>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d102      	bne.n	80031dc <HAL_SPI_Transmit+0x172>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031e0:	e0a4      	b.n	800332c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ce      	bne.n	800318a <HAL_SPI_Transmit+0x120>
 80031ec:	e07c      	b.n	80032e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0x192>
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d170      	bne.n	80032de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d912      	bls.n	800322c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b02      	subs	r3, #2
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800322a:	e058      	b.n	80032de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003252:	e044      	b.n	80032de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d12b      	bne.n	80032ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d912      	bls.n	8003292 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	1c9a      	adds	r2, r3, #2
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b02      	subs	r3, #2
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003290:	e025      	b.n	80032de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b8:	e011      	b.n	80032de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ba:	f7fe f94d 	bl	8001558 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d803      	bhi.n	80032d2 <HAL_SPI_Transmit+0x268>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d102      	bne.n	80032d8 <HAL_SPI_Transmit+0x26e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032dc:	e026      	b.n	800332c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1b5      	bne.n	8003254 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fce3 	bl	8003cb8 <SPI_EndRxTxTransaction>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e000      	b.n	800332c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800332a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800333c:	7ffb      	ldrb	r3, [r7, #31]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b088      	sub	sp, #32
 800334a:	af02      	add	r7, sp, #8
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003362:	d112      	bne.n	800338a <HAL_SPI_Receive+0x44>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10e      	bne.n	800338a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2204      	movs	r2, #4
 8003370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f910 	bl	80035a6 <HAL_SPI_TransmitReceive>
 8003386:	4603      	mov	r3, r0
 8003388:	e109      	b.n	800359e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_SPI_Receive+0x52>
 8003394:	2302      	movs	r3, #2
 8003396:	e102      	b.n	800359e <HAL_SPI_Receive+0x258>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a0:	f7fe f8da 	bl	8001558 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033b6:	e0e9      	b.n	800358c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_Receive+0x7e>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033c8:	e0e0      	b.n	800358c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2204      	movs	r2, #4
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003414:	d908      	bls.n	8003428 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e007      	b.n	8003438 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	d10f      	bne.n	8003462 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d007      	beq.n	8003480 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003488:	d867      	bhi.n	800355a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800348a:	e030      	b.n	80034ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d117      	bne.n	80034ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f103 020c 	add.w	r2, r3, #12
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034c8:	e011      	b.n	80034ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ca:	f7fe f845 	bl	8001558 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d803      	bhi.n	80034e2 <HAL_SPI_Receive+0x19c>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d102      	bne.n	80034e8 <HAL_SPI_Receive+0x1a2>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034ec:	e04e      	b.n	800358c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1c8      	bne.n	800348c <HAL_SPI_Receive+0x146>
 80034fa:	e034      	b.n	8003566 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d115      	bne.n	8003536 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	b292      	uxth	r2, r2
 8003516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003534:	e011      	b.n	800355a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003536:	f7fe f80f 	bl	8001558 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d803      	bhi.n	800354e <HAL_SPI_Receive+0x208>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d102      	bne.n	8003554 <HAL_SPI_Receive+0x20e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003558:	e018      	b.n	800358c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1ca      	bne.n	80034fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fb4c 	bl	8003c08 <SPI_EndRxTransaction>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
 8003588:	e000      	b.n	800358c <HAL_SPI_Receive+0x246>
  }

error :
 800358a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b08a      	sub	sp, #40	; 0x28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035b4:	2301      	movs	r3, #1
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x26>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e1fb      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x41e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d4:	f7fd ffc0 	bl	8001558 <HAL_GetTick>
 80035d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035f0:	7efb      	ldrb	r3, [r7, #27]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00e      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x6e>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fc:	d106      	bne.n	800360c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_SPI_TransmitReceive+0x66>
 8003606:	7efb      	ldrb	r3, [r7, #27]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d003      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800360c:	2302      	movs	r3, #2
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003612:	e1cd      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_SPI_TransmitReceive+0x80>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_TransmitReceive+0x80>
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800362c:	e1c0      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b04      	cmp	r3, #4
 8003638:	d003      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2205      	movs	r2, #5
 800363e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	887a      	ldrh	r2, [r7, #2]
 8003652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	887a      	ldrh	r2, [r7, #2]
 800365a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003684:	d802      	bhi.n	800368c <HAL_SPI_TransmitReceive+0xe6>
 8003686:	8a3b      	ldrh	r3, [r7, #16]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d908      	bls.n	800369e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	e007      	b.n	80036ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d007      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036d4:	d97c      	bls.n	80037d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x13e>
 80036de:	8a7b      	ldrh	r3, [r7, #18]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d169      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003708:	e056      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d11b      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x1aa>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x1aa>
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2b01      	cmp	r3, #1
 8003726:	d113      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	1c9a      	adds	r2, r3, #2
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d11c      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x1f2>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	b292      	uxth	r2, r2
 8003776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003794:	2301      	movs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003798:	f7fd fede 	bl	8001558 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d807      	bhi.n	80037b8 <HAL_SPI_TransmitReceive+0x212>
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d003      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037b6:	e0fb      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1a3      	bne.n	800370a <HAL_SPI_TransmitReceive+0x164>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d19d      	bne.n	800370a <HAL_SPI_TransmitReceive+0x164>
 80037ce:	e0df      	b.n	8003990 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x23a>
 80037d8:	8a7b      	ldrh	r3, [r7, #18]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80cb 	bne.w	8003976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d912      	bls.n	8003810 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	1c9a      	adds	r2, r3, #2
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b02      	subs	r3, #2
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800380e:	e0b2      	b.n	8003976 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003836:	e09e      	b.n	8003976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d134      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x30a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02f      	beq.n	80038b0 <HAL_SPI_TransmitReceive+0x30a>
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	2b01      	cmp	r3, #1
 8003854:	d12c      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d912      	bls.n	8003886 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b02      	subs	r3, #2
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003884:	e012      	b.n	80038ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d148      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x3aa>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d042      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d923      	bls.n	800391e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	b292      	uxth	r2, r2
 80038e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b02      	subs	r3, #2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d81f      	bhi.n	800394c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	e016      	b.n	800394c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f103 020c 	add.w	r2, r3, #12
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003950:	f7fd fe02 	bl	8001558 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395c:	429a      	cmp	r2, r3
 800395e:	d803      	bhi.n	8003968 <HAL_SPI_TransmitReceive+0x3c2>
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d102      	bne.n	800396e <HAL_SPI_TransmitReceive+0x3c8>
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003974:	e01c      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af5b 	bne.w	8003838 <HAL_SPI_TransmitReceive+0x292>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f af54 	bne.w	8003838 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f98f 	bl	8003cb8 <SPI_EndRxTxTransaction>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
 80039ac:	e000      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039dc:	f7fd fdbc 	bl	8001558 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039ec:	f7fd fdb4 	bl	8001558 <HAL_GetTick>
 80039f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	015b      	lsls	r3, r3, #5
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a02:	e054      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	d050      	beq.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a0c:	f7fd fda4 	bl	8001558 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d902      	bls.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d13d      	bne.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3a:	d111      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a44:	d004      	beq.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d107      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d10f      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e017      	b.n	8003ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d19b      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000014 	.word	0x20000014

08003adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aee:	f7fd fd33 	bl	8001558 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003afe:	f7fd fd2b 	bl	8001558 <HAL_GetTick>
 8003b02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00da      	lsls	r2, r3, #3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	0d1b      	lsrs	r3, r3, #20
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b24:	e060      	b.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b2c:	d107      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d050      	beq.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b46:	f7fd fd07 	bl	8001558 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d902      	bls.n	8003b5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13d      	bne.n	8003bd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b74:	d111      	bne.n	8003b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d004      	beq.n	8003b8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b88:	d107      	bne.n	8003b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba2:	d10f      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e010      	b.n	8003bfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d196      	bne.n	8003b26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000014 	.word	0x20000014

08003c08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1c:	d111      	bne.n	8003c42 <SPI_EndRxTransaction+0x3a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d004      	beq.n	8003c32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d107      	bne.n	8003c42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff febd 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e023      	b.n	8003cb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c70:	d11d      	bne.n	8003cae <SPI_EndRxTransaction+0xa6>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7a:	d004      	beq.n	8003c86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d113      	bne.n	8003cae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff22 	bl	8003adc <SPI_WaitFifoStateUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e000      	b.n	8003cb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff ff03 	bl	8003adc <SPI_WaitFifoStateUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e027      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff fe68 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e014      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fedc 	bl	8003adc <SPI_WaitFifoStateUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e000      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e040      	b.n	8003dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fab8 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f82c 	bl	8003de0 <UART_SetConfig>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e022      	b.n	8003dd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 faa6 	bl	80042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb2d 	bl	8004430 <UART_CheckIdleState>
 8003dd6:	4603      	mov	r3, r0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b08a      	sub	sp, #40	; 0x28
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4ba5      	ldr	r3, [pc, #660]	; (80040a4 <UART_SetConfig+0x2c4>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a9a      	ldr	r2, [pc, #616]	; (80040a8 <UART_SetConfig+0x2c8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a91      	ldr	r2, [pc, #580]	; (80040ac <UART_SetConfig+0x2cc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d126      	bne.n	8003eb8 <UART_SetConfig+0xd8>
 8003e6a:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d81b      	bhi.n	8003eb0 <UART_SetConfig+0xd0>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0xa0>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003ea1 	.word	0x08003ea1
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e0d6      	b.n	8004046 <UART_SetConfig+0x266>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e0d2      	b.n	8004046 <UART_SetConfig+0x266>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e0ce      	b.n	8004046 <UART_SetConfig+0x266>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e0ca      	b.n	8004046 <UART_SetConfig+0x266>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e0c6      	b.n	8004046 <UART_SetConfig+0x266>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a7d      	ldr	r2, [pc, #500]	; (80040b4 <UART_SetConfig+0x2d4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d138      	bne.n	8003f34 <UART_SetConfig+0x154>
 8003ec2:	4b7b      	ldr	r3, [pc, #492]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d82d      	bhi.n	8003f2c <UART_SetConfig+0x14c>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0xf8>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f2d 	.word	0x08003f2d
 8003ee0:	08003f2d 	.word	0x08003f2d
 8003ee4:	08003f2d 	.word	0x08003f2d
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f2d 	.word	0x08003f2d
 8003ef0:	08003f2d 	.word	0x08003f2d
 8003ef4:	08003f2d 	.word	0x08003f2d
 8003ef8:	08003f15 	.word	0x08003f15
 8003efc:	08003f2d 	.word	0x08003f2d
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f25 	.word	0x08003f25
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e098      	b.n	8004046 <UART_SetConfig+0x266>
 8003f14:	2302      	movs	r3, #2
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e094      	b.n	8004046 <UART_SetConfig+0x266>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e090      	b.n	8004046 <UART_SetConfig+0x266>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e08c      	b.n	8004046 <UART_SetConfig+0x266>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e088      	b.n	8004046 <UART_SetConfig+0x266>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5f      	ldr	r2, [pc, #380]	; (80040b8 <UART_SetConfig+0x2d8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d125      	bne.n	8003f8a <UART_SetConfig+0x1aa>
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f48:	2b30      	cmp	r3, #48	; 0x30
 8003f4a:	d016      	beq.n	8003f7a <UART_SetConfig+0x19a>
 8003f4c:	2b30      	cmp	r3, #48	; 0x30
 8003f4e:	d818      	bhi.n	8003f82 <UART_SetConfig+0x1a2>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d00a      	beq.n	8003f6a <UART_SetConfig+0x18a>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d814      	bhi.n	8003f82 <UART_SetConfig+0x1a2>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <UART_SetConfig+0x182>
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d008      	beq.n	8003f72 <UART_SetConfig+0x192>
 8003f60:	e00f      	b.n	8003f82 <UART_SetConfig+0x1a2>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f68:	e06d      	b.n	8004046 <UART_SetConfig+0x266>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f70:	e069      	b.n	8004046 <UART_SetConfig+0x266>
 8003f72:	2304      	movs	r3, #4
 8003f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f78:	e065      	b.n	8004046 <UART_SetConfig+0x266>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f80:	e061      	b.n	8004046 <UART_SetConfig+0x266>
 8003f82:	2310      	movs	r3, #16
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f88:	e05d      	b.n	8004046 <UART_SetConfig+0x266>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <UART_SetConfig+0x2dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d125      	bne.n	8003fe0 <UART_SetConfig+0x200>
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa0:	d016      	beq.n	8003fd0 <UART_SetConfig+0x1f0>
 8003fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa4:	d818      	bhi.n	8003fd8 <UART_SetConfig+0x1f8>
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d00a      	beq.n	8003fc0 <UART_SetConfig+0x1e0>
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d814      	bhi.n	8003fd8 <UART_SetConfig+0x1f8>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <UART_SetConfig+0x1d8>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d008      	beq.n	8003fc8 <UART_SetConfig+0x1e8>
 8003fb6:	e00f      	b.n	8003fd8 <UART_SetConfig+0x1f8>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e042      	b.n	8004046 <UART_SetConfig+0x266>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e03e      	b.n	8004046 <UART_SetConfig+0x266>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e03a      	b.n	8004046 <UART_SetConfig+0x266>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e036      	b.n	8004046 <UART_SetConfig+0x266>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e032      	b.n	8004046 <UART_SetConfig+0x266>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <UART_SetConfig+0x2c8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d12a      	bne.n	8004040 <UART_SetConfig+0x260>
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <UART_SetConfig+0x2d0>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff8:	d01a      	beq.n	8004030 <UART_SetConfig+0x250>
 8003ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffe:	d81b      	bhi.n	8004038 <UART_SetConfig+0x258>
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004004:	d00c      	beq.n	8004020 <UART_SetConfig+0x240>
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400a:	d815      	bhi.n	8004038 <UART_SetConfig+0x258>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <UART_SetConfig+0x238>
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d008      	beq.n	8004028 <UART_SetConfig+0x248>
 8004016:	e00f      	b.n	8004038 <UART_SetConfig+0x258>
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e012      	b.n	8004046 <UART_SetConfig+0x266>
 8004020:	2302      	movs	r3, #2
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e00e      	b.n	8004046 <UART_SetConfig+0x266>
 8004028:	2304      	movs	r3, #4
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e00a      	b.n	8004046 <UART_SetConfig+0x266>
 8004030:	2308      	movs	r3, #8
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e006      	b.n	8004046 <UART_SetConfig+0x266>
 8004038:	2310      	movs	r3, #16
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e002      	b.n	8004046 <UART_SetConfig+0x266>
 8004040:	2310      	movs	r3, #16
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <UART_SetConfig+0x2c8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f040 808b 	bne.w	8004168 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004056:	2b08      	cmp	r3, #8
 8004058:	d834      	bhi.n	80040c4 <UART_SetConfig+0x2e4>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x280>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004085 	.word	0x08004085
 8004064:	080040c5 	.word	0x080040c5
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040c5 	.word	0x080040c5
 8004070:	08004093 	.word	0x08004093
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040c5 	.word	0x080040c5
 800407c:	080040c5 	.word	0x080040c5
 8004080:	0800409b 	.word	0x0800409b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fe fb64 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004088:	61f8      	str	r0, [r7, #28]
        break;
 800408a:	e021      	b.n	80040d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <UART_SetConfig+0x2e0>)
 800408e:	61fb      	str	r3, [r7, #28]
        break;
 8004090:	e01e      	b.n	80040d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe fac5 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8004096:	61f8      	str	r0, [r7, #28]
        break;
 8004098:	e01a      	b.n	80040d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409e:	61fb      	str	r3, [r7, #28]
        break;
 80040a0:	e016      	b.n	80040d0 <UART_SetConfig+0x2f0>
 80040a2:	bf00      	nop
 80040a4:	efff69f3 	.word	0xefff69f3
 80040a8:	40008000 	.word	0x40008000
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40004400 	.word	0x40004400
 80040b8:	40004800 	.word	0x40004800
 80040bc:	40004c00 	.word	0x40004c00
 80040c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80fa 	beq.w	80042cc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d305      	bcc.n	80040f4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d903      	bls.n	80040fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040fa:	e0e7      	b.n	80042cc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2200      	movs	r2, #0
 8004100:	461c      	mov	r4, r3
 8004102:	4615      	mov	r5, r2
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	022b      	lsls	r3, r5, #8
 800410e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004112:	0222      	lsls	r2, r4, #8
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	6849      	ldr	r1, [r1, #4]
 8004118:	0849      	lsrs	r1, r1, #1
 800411a:	2000      	movs	r0, #0
 800411c:	4688      	mov	r8, r1
 800411e:	4681      	mov	r9, r0
 8004120:	eb12 0a08 	adds.w	sl, r2, r8
 8004124:	eb43 0b09 	adc.w	fp, r3, r9
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004136:	4650      	mov	r0, sl
 8004138:	4659      	mov	r1, fp
 800413a:	f7fc f84b 	bl	80001d4 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d308      	bcc.n	8004160 <UART_SetConfig+0x380>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004154:	d204      	bcs.n	8004160 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e0b5      	b.n	80042cc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004166:	e0b1      	b.n	80042cc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004170:	d15d      	bne.n	800422e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004176:	2b08      	cmp	r3, #8
 8004178:	d827      	bhi.n	80041ca <UART_SetConfig+0x3ea>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0x3a0>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b5 	.word	0x080041b5
 800418c:	080041cb 	.word	0x080041cb
 8004190:	080041bb 	.word	0x080041bb
 8004194:	080041cb 	.word	0x080041cb
 8004198:	080041cb 	.word	0x080041cb
 800419c:	080041cb 	.word	0x080041cb
 80041a0:	080041c3 	.word	0x080041c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a4:	f7fe fad4 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80041a8:	61f8      	str	r0, [r7, #28]
        break;
 80041aa:	e014      	b.n	80041d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7fe fae6 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80041b0:	61f8      	str	r0, [r7, #28]
        break;
 80041b2:	e010      	b.n	80041d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b4c      	ldr	r3, [pc, #304]	; (80042e8 <UART_SetConfig+0x508>)
 80041b6:	61fb      	str	r3, [r7, #28]
        break;
 80041b8:	e00d      	b.n	80041d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7fe fa31 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80041be:	61f8      	str	r0, [r7, #28]
        break;
 80041c0:	e009      	b.n	80041d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	61fb      	str	r3, [r7, #28]
        break;
 80041c8:	e005      	b.n	80041d6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d077      	beq.n	80042cc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005a      	lsls	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d916      	bls.n	8004226 <UART_SetConfig+0x446>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d212      	bcs.n	8004226 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f023 030f 	bic.w	r3, r3, #15
 8004208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	b29a      	uxth	r2, r3
 8004216:	8afb      	ldrh	r3, [r7, #22]
 8004218:	4313      	orrs	r3, r2
 800421a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	8afa      	ldrh	r2, [r7, #22]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e052      	b.n	80042cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800422c:	e04e      	b.n	80042cc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800422e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004232:	2b08      	cmp	r3, #8
 8004234:	d827      	bhi.n	8004286 <UART_SetConfig+0x4a6>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0x45c>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004261 	.word	0x08004261
 8004240:	08004269 	.word	0x08004269
 8004244:	08004271 	.word	0x08004271
 8004248:	08004287 	.word	0x08004287
 800424c:	08004277 	.word	0x08004277
 8004250:	08004287 	.word	0x08004287
 8004254:	08004287 	.word	0x08004287
 8004258:	08004287 	.word	0x08004287
 800425c:	0800427f 	.word	0x0800427f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fa76 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8004264:	61f8      	str	r0, [r7, #28]
        break;
 8004266:	e014      	b.n	8004292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fa88 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 800426c:	61f8      	str	r0, [r7, #28]
        break;
 800426e:	e010      	b.n	8004292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <UART_SetConfig+0x508>)
 8004272:	61fb      	str	r3, [r7, #28]
        break;
 8004274:	e00d      	b.n	8004292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe f9d3 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800427a:	61f8      	str	r0, [r7, #28]
        break;
 800427c:	e009      	b.n	8004292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004282:	61fb      	str	r3, [r7, #28]
        break;
 8004284:	e005      	b.n	8004292 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004290:	bf00      	nop
    }

    if (pclk != 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d019      	beq.n	80042cc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	085a      	lsrs	r2, r3, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d909      	bls.n	80042c6 <UART_SetConfig+0x4e6>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b8:	d205      	bcs.n	80042c6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
 80042c4:	e002      	b.n	80042cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3728      	adds	r7, #40	; 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	00f42400 	.word	0x00f42400

080042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01a      	beq.n	8004402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ea:	d10a      	bne.n	8004402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004440:	f7fd f88a 	bl	8001558 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10e      	bne.n	8004472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f82d 	bl	80044c2 <UART_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e023      	b.n	80044ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d10e      	bne.n	800449e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f817 	bl	80044c2 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00d      	b.n	80044ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b09c      	sub	sp, #112	; 0x70
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	e0a5      	b.n	8004620 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	f000 80a1 	beq.w	8004620 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fd f83b 	bl	8001558 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80044ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d13e      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004508:	667b      	str	r3, [r7, #100]	; 0x64
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004514:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004546:	64ba      	str	r2, [r7, #72]	; 0x48
 8004548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800454c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e067      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d04f      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	d147      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004598:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e6      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	613b      	str	r3, [r7, #16]
   return(result);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045ec:	623a      	str	r2, [r7, #32]
 80045ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	69f9      	ldr	r1, [r7, #28]
 80045f2:	6a3a      	ldr	r2, [r7, #32]
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e010      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	429a      	cmp	r2, r3
 800463c:	f43f af4a 	beq.w	80044d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3770      	adds	r7, #112	; 0x70
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4d0d      	ldr	r5, [pc, #52]	; (8004684 <__libc_init_array+0x38>)
 8004650:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	2600      	movs	r6, #0
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	4d0b      	ldr	r5, [pc, #44]	; (800468c <__libc_init_array+0x40>)
 800465e:	4c0c      	ldr	r4, [pc, #48]	; (8004690 <__libc_init_array+0x44>)
 8004660:	f000 f82e 	bl	80046c0 <_init>
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	2600      	movs	r6, #0
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	0800472c 	.word	0x0800472c
 8004688:	0800472c 	.word	0x0800472c
 800468c:	0800472c 	.word	0x0800472c
 8004690:	08004730 	.word	0x08004730

08004694 <memcpy>:
 8004694:	440a      	add	r2, r1
 8004696:	4291      	cmp	r1, r2
 8004698:	f100 33ff 	add.w	r3, r0, #4294967295
 800469c:	d100      	bne.n	80046a0 <memcpy+0xc>
 800469e:	4770      	bx	lr
 80046a0:	b510      	push	{r4, lr}
 80046a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046aa:	4291      	cmp	r1, r2
 80046ac:	d1f9      	bne.n	80046a2 <memcpy+0xe>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <memset>:
 80046b0:	4402      	add	r2, r0
 80046b2:	4603      	mov	r3, r0
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d100      	bne.n	80046ba <memset+0xa>
 80046b8:	4770      	bx	lr
 80046ba:	f803 1b01 	strb.w	r1, [r3], #1
 80046be:	e7f9      	b.n	80046b4 <memset+0x4>

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
