
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08010f38  08010f38  00020f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011600  08011600  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011600  08011600  00021600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011608  08011608  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011608  08011608  00021608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801160c  0801160c  0002160c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011610  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a20  20000208  08011818  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c28  08011818  00032c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d77  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045af  00000000  00000000  00052faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00057560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  000592a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006300  00000000  00000000  0005aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1d4  00000000  00000000  000611d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2809  00000000  00000000  000803a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000931c  00000000  00000000  00172c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010f1c 	.word	0x08010f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08010f1c 	.word	0x08010f1c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <case_insensitive_strcmp+0x16>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e056      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d10d      	bne.n	8001066 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e050      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e04a      	b.n	80010f0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d103      	bne.n	8001086 <case_insensitive_strcmp+0x5e>
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f103 0220 	add.w	r2, r3, #32
 8001084:	e000      	b.n	8001088 <case_insensitive_strcmp+0x60>
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73bb      	strb	r3, [r7, #14]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	3301      	adds	r3, #1
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <case_insensitive_strcmp+0xd4>)
 8001094:	440b      	add	r3, r1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <case_insensitive_strcmp+0x7e>
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	3320      	adds	r3, #32
 80010a4:	e000      	b.n	80010a8 <case_insensitive_strcmp+0x80>
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0d0      	beq.n	800104e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	737b      	strb	r3, [r7, #13]
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d103      	bne.n	80010cc <case_insensitive_strcmp+0xa4>
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	f103 0220 	add.w	r2, r3, #32
 80010ca:	e000      	b.n	80010ce <case_insensitive_strcmp+0xa6>
 80010cc:	7b7a      	ldrb	r2, [r7, #13]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	733b      	strb	r3, [r7, #12]
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4908      	ldr	r1, [pc, #32]	; (80010fc <case_insensitive_strcmp+0xd4>)
 80010da:	440b      	add	r3, r1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <case_insensitive_strcmp+0xc4>
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	3320      	adds	r3, #32
 80010ea:	e000      	b.n	80010ee <case_insensitive_strcmp+0xc6>
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	1ad3      	subs	r3, r2, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	080111b4 	.word	0x080111b4

08001100 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <cJSON_strdup+0x1c>
    {
        return NULL;
 8001118:	2300      	movs	r3, #0
 800111a:	e015      	b.n	8001148 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f869 	bl	80001f4 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	4798      	blx	r3
 8001130:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <cJSON_strdup+0x3c>
    {
        return NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	e005      	b.n	8001148 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f00c fa27 	bl	800d594 <memcpy>

    return copy;
 8001146:	68bb      	ldr	r3, [r7, #8]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2028      	movs	r0, #40	; 0x28
 800115e:	4798      	blx	r3
 8001160:	60f8      	str	r0, [r7, #12]
    if (node)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001168:	2228      	movs	r2, #40	; 0x28
 800116a:	2100      	movs	r1, #0
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f00c fa1f 	bl	800d5b0 <memset>
    }

    return node;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001188:	e037      	b.n	80011fa <cJSON_Delete+0x7e>
    {
        next = item->next;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <cJSON_Delete+0x32>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffe7 	bl	800117c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <cJSON_Delete+0x52>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <cJSON_Delete+0x90>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6912      	ldr	r2, [r2, #16]
 80011ca:	4610      	mov	r0, r2
 80011cc:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <cJSON_Delete+0x72>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <cJSON_Delete+0x90>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6a12      	ldr	r2, [r2, #32]
 80011ea:	4610      	mov	r0, r2
 80011ec:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <cJSON_Delete+0x90>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
        item = next;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1c4      	bne.n	800118a <cJSON_Delete+0xe>
    }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001214:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b098      	sub	sp, #96	; 0x60
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    double number = 0;
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001236:	2300      	movs	r3, #0
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800123a:	f7ff ffe9 	bl	8001210 <get_decimal_point>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <parse_number+0x36>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <parse_number+0x3a>
    {
        return false;
 8001256:	2300      	movs	r3, #0
 8001258:	e0c6      	b.n	80013e8 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800125e:	e063      	b.n	8001328 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6899      	ldr	r1, [r3, #8]
 8001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126a:	440b      	add	r3, r1
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b45      	cmp	r3, #69	; 0x45
 8001272:	dc3d      	bgt.n	80012f0 <parse_number+0xd0>
 8001274:	2b2b      	cmp	r3, #43	; 0x2b
 8001276:	db66      	blt.n	8001346 <parse_number+0x126>
 8001278:	3b2b      	subs	r3, #43	; 0x2b
 800127a:	2b1a      	cmp	r3, #26
 800127c:	d863      	bhi.n	8001346 <parse_number+0x126>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <parse_number+0x64>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012f5 	.word	0x080012f5
 8001288:	08001347 	.word	0x08001347
 800128c:	080012f5 	.word	0x080012f5
 8001290:	08001313 	.word	0x08001313
 8001294:	08001347 	.word	0x08001347
 8001298:	080012f5 	.word	0x080012f5
 800129c:	080012f5 	.word	0x080012f5
 80012a0:	080012f5 	.word	0x080012f5
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	080012f5 	.word	0x080012f5
 80012ac:	080012f5 	.word	0x080012f5
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	080012f5 	.word	0x080012f5
 80012b8:	080012f5 	.word	0x080012f5
 80012bc:	080012f5 	.word	0x080012f5
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	08001347 	.word	0x08001347
 80012e0:	08001347 	.word	0x08001347
 80012e4:	08001347 	.word	0x08001347
 80012e8:	08001347 	.word	0x08001347
 80012ec:	080012f5 	.word	0x080012f5
 80012f0:	2b65      	cmp	r3, #101	; 0x65
 80012f2:	d128      	bne.n	8001346 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fe:	440b      	add	r3, r1
 8001300:	4413      	add	r3, r2
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	f107 0208 	add.w	r2, r7, #8
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	4413      	add	r3, r2
 800130c:	460a      	mov	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
                break;
 8001310:	e007      	b.n	8001322 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	4413      	add	r3, r2
 800131a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800131e:	701a      	strb	r2, [r3, #0]
                break;
 8001320:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001324:	3301      	adds	r3, #1
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	2b3e      	cmp	r3, #62	; 0x3e
 800132c:	d80d      	bhi.n	800134a <parse_number+0x12a>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <parse_number+0x12a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	441a      	add	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d38d      	bcc.n	8001260 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001344:	e001      	b.n	800134a <parse_number+0x12a>
                goto loop_end;
 8001346:	bf00      	nop
 8001348:	e000      	b.n	800134c <parse_number+0x12c>
loop_end:
 800134a:	bf00      	nop
    number_c_string[i] = '\0';
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001358:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f00d f95e 	bl	800e624 <strtod>
 8001368:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800136c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001376:	2300      	movs	r3, #0
 8001378:	e036      	b.n	80013e8 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001380:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001384:	a31b      	add	r3, pc, #108	; (adr r3, 80013f4 <parse_number+0x1d4>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800138e:	f7ff fbd1 	bl	8000b34 <__aeabi_dcmpge>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	e015      	b.n	80013ce <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <parse_number+0x1d0>)
 80013a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013ac:	f7ff fbb8 	bl	8000b20 <__aeabi_dcmple>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	e006      	b.n	80013ce <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80013c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013c4:	f7ff fbe0 	bl	8000b88 <__aeabi_d2iz>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2208      	movs	r2, #8
 80013d2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	1a8a      	subs	r2, r1, r2
 80013e0:	441a      	add	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	609a      	str	r2, [r3, #8]
    return true;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3760      	adds	r7, #96	; 0x60
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	c1e00000 	.word	0xc1e00000
 80013f4:	ffc00000 	.word	0xffc00000
 80013f8:	41dfffff 	.word	0x41dfffff

080013fc <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <ensure+0x20>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <ensure+0x24>
    {
        return NULL;
 800141c:	2300      	movs	r3, #0
 800141e:	e083      	b.n	8001528 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <ensure+0x3c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d301      	bcc.n	8001438 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	e077      	b.n	8001528 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da01      	bge.n	8001442 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800143e:	2300      	movs	r3, #0
 8001440:	e072      	b.n	8001528 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	3301      	adds	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d805      	bhi.n	8001464 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4413      	add	r3, r2
 8001462:	e061      	b.n	8001528 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <ensure+0x74>
        return NULL;
 800146c:	2300      	movs	r3, #0
 800146e:	e05b      	b.n	8001528 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001476:	d308      	bcc.n	800148a <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db03      	blt.n	8001486 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800147e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	e004      	b.n	8001490 <ensure+0x94>
        }
        else
        {
            return NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	e04e      	b.n	8001528 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d018      	beq.n	80014ca <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	4610      	mov	r0, r2
 80014a4:	4798      	blx	r3
 80014a6:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d132      	bne.n	8001514 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4610      	mov	r0, r2
 80014b8:	4798      	blx	r3
            p->length = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

            return NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e02e      	b.n	8001528 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	4798      	blx	r3
 80014d2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4610      	mov	r0, r2
 80014e4:	4798      	blx	r3
            p->length = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

            return NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e018      	b.n	8001528 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	3301      	adds	r3, #1
 8001500:	461a      	mov	r2, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f00c f846 	bl	800d594 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	4610      	mov	r0, r2
 8001512:	4798      	blx	r3
    }
    p->length = newsize;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d013      	beq.n	800156a <update_offset+0x3a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00f      	beq.n	800156a <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689c      	ldr	r4, [r3, #8]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7fe fe4a 	bl	80001f4 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	18e2      	adds	r2, r4, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e000      	b.n	800156c <update_offset+0x3c>
        return;
 800156a:	bf00      	nop
}
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
	...

08001574 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001580:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	68fe      	ldr	r6, [r7, #12]
 8001588:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	687e      	ldr	r6, [r7, #4]
 8001590:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001594:	f7ff fad8 	bl	8000b48 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <compare_double+0x34>
 800159e:	68bc      	ldr	r4, [r7, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015a6:	e003      	b.n	80015b0 <compare_double+0x3c>
 80015a8:	683c      	ldr	r4, [r7, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015b0:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80015b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015bc:	f7fe fe7c 	bl	80002b8 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4690      	mov	r8, r2
 80015c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <compare_double+0x8c>)
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	f7ff f828 	bl	8000628 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	2101      	movs	r1, #1
 80015de:	460c      	mov	r4, r1
 80015e0:	4640      	mov	r0, r8
 80015e2:	4649      	mov	r1, r9
 80015e4:	f7ff fa9c 	bl	8000b20 <__aeabi_dcmple>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <compare_double+0x7e>
 80015ee:	2300      	movs	r3, #0
 80015f0:	461c      	mov	r4, r3
 80015f2:	b2e3      	uxtb	r3, r4
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	bf00      	nop
 8001600:	3cb00000 	.word	0x3cb00000

08001604 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b093      	sub	sp, #76	; 0x4c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800160e:	2300      	movs	r3, #0
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001618:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800163a:	f7ff fde9 	bl	8001210 <get_decimal_point>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <print_number+0x56>
    {
        return false;
 8001656:	2300      	movs	r3, #0
 8001658:	e0b4      	b.n	80017c4 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800165a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800165e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001662:	f7ff fa7b 	bl	8000b5c <__aeabi_dcmpun>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <print_number+0xac>
 800166c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001674:	2301      	movs	r3, #1
 8001676:	461e      	mov	r6, r3
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <print_number+0x1c8>)
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7ff fa6b 	bl	8000b5c <__aeabi_dcmpun>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <print_number+0xa0>
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <print_number+0x1c8>)
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7ff fa43 	bl	8000b20 <__aeabi_dcmple>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <print_number+0xa0>
 80016a0:	2300      	movs	r3, #0
 80016a2:	461e      	mov	r6, r3
 80016a4:	b2f3      	uxtb	r3, r6
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4946      	ldr	r1, [pc, #280]	; (80017d0 <print_number+0x1cc>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00c f8e4 	bl	800d884 <siprintf>
 80016bc:	6478      	str	r0, [r7, #68]	; 0x44
 80016be:	e03f      	b.n	8001740 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff45 	bl	8000554 <__aeabi_i2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016d2:	f7ff fa11 	bl	8000af8 <__aeabi_dcmpeq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	493b      	ldr	r1, [pc, #236]	; (80017d4 <print_number+0x1d0>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00c f8cc 	bl	800d884 <siprintf>
 80016ec:	6478      	str	r0, [r7, #68]	; 0x44
 80016ee:	e027      	b.n	8001740 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016f0:	f107 0014 	add.w	r0, r7, #20
 80016f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <print_number+0x1d4>)
 80016fa:	f00c f8c3 	bl	800d884 <siprintf>
 80016fe:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001700:	f107 0208 	add.w	r2, r7, #8
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4934      	ldr	r1, [pc, #208]	; (80017dc <print_number+0x1d8>)
 800170a:	4618      	mov	r0, r3
 800170c:	f00c f8da 	bl	800d8c4 <siscanf>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10c      	bne.n	8001730 <print_number+0x12c>
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	f7ff ff25 	bl	8001574 <compare_double>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001730:	f107 0014 	add.w	r0, r7, #20
 8001734:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001738:	4929      	ldr	r1, [pc, #164]	; (80017e0 <print_number+0x1dc>)
 800173a:	f00c f8a3 	bl	800d884 <siprintf>
 800173e:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001742:	2b00      	cmp	r3, #0
 8001744:	db02      	blt.n	800174c <print_number+0x148>
 8001746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001748:	2b19      	cmp	r3, #25
 800174a:	dd01      	ble.n	8001750 <print_number+0x14c>
    {
        return false;
 800174c:	2300      	movs	r3, #0
 800174e:	e039      	b.n	80017c4 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	3301      	adds	r3, #1
 8001754:	4619      	mov	r1, r3
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f7ff fe50 	bl	80013fc <ensure>
 800175c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <print_number+0x164>
    {
        return false;
 8001764:	2300      	movs	r3, #0
 8001766:	e02d      	b.n	80017c4 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
 800176c:	e01a      	b.n	80017a4 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800176e:	f107 0214 	add.w	r2, r7, #20
 8001772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800177c:	429a      	cmp	r2, r3
 800177e:	d105      	bne.n	800178c <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001784:	4413      	add	r3, r2
 8001786:	222e      	movs	r2, #46	; 0x2e
 8001788:	701a      	strb	r2, [r3, #0]
            continue;
 800178a:	e008      	b.n	800179e <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 800178c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800178e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001790:	4413      	add	r3, r2
 8001792:	f107 0114 	add.w	r1, r7, #20
 8001796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001798:	440a      	add	r2, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800179e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a0:	3301      	adds	r3, #1
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
 80017a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d3e0      	bcc.n	800176e <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80017ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b0:	4413      	add	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017bc:	441a      	add	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	609a      	str	r2, [r3, #8]

    return true;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	374c      	adds	r7, #76	; 0x4c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017cc:	7fefffff 	.word	0x7fefffff
 80017d0:	08010f44 	.word	0x08010f44
 80017d4:	08010f4c 	.word	0x08010f4c
 80017d8:	08010f50 	.word	0x08010f50
 80017dc:	08010f58 	.word	0x08010f58
 80017e0:	08010f5c 	.word	0x08010f5c

080017e4 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	e04c      	b.n	8001894 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b2f      	cmp	r3, #47	; 0x2f
 8001804:	d90f      	bls.n	8001826 <parse_hex4+0x42>
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b39      	cmp	r3, #57	; 0x39
 8001810:	d809      	bhi.n	8001826 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	3b30      	subs	r3, #48	; 0x30
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e02d      	b.n	8001882 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d90f      	bls.n	8001852 <parse_hex4+0x6e>
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b46      	cmp	r3, #70	; 0x46
 800183c:	d809      	bhi.n	8001852 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	3b37      	subs	r3, #55	; 0x37
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e017      	b.n	8001882 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b60      	cmp	r3, #96	; 0x60
 800185c:	d90f      	bls.n	800187e <parse_hex4+0x9a>
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b66      	cmp	r3, #102	; 0x66
 8001868:	d809      	bhi.n	800187e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	3b57      	subs	r3, #87	; 0x57
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e001      	b.n	8001882 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800187e:	2300      	movs	r3, #0
 8001880:	e00c      	b.n	800189c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d802      	bhi.n	800188e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9af      	bls.n	80017fa <parse_hex4+0x16>
        }
    }

    return h;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b05      	cmp	r3, #5
 80018e0:	f340 80b7 	ble.w	8001a52 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3302      	adds	r3, #2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff7b 	bl	80017e4 <parse_hex4>
 80018ee:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018f6:	d304      	bcc.n	8001902 <utf16_literal_to_utf8+0x5a>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018fe:	f0c0 80aa 	bcc.w	8001a56 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001908:	d337      	bcc.n	800197a <utf16_literal_to_utf8+0xd2>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001910:	d233      	bcs.n	800197a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3306      	adds	r3, #6
 8001916:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800191c:	230c      	movs	r3, #12
 800191e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	f340 8096 	ble.w	8001a5a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b5c      	cmp	r3, #92	; 0x5c
 8001934:	f040 8093 	bne.w	8001a5e <utf16_literal_to_utf8+0x1b6>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b75      	cmp	r3, #117	; 0x75
 8001940:	f040 808d 	bne.w	8001a5e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3302      	adds	r3, #2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff4b 	bl	80017e4 <parse_hex4>
 800194e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001956:	f0c0 8084 	bcc.w	8001a62 <utf16_literal_to_utf8+0x1ba>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001960:	d27f      	bcs.n	8001a62 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	029a      	lsls	r2, r3, #10
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <utf16_literal_to_utf8+0x1cc>)
 8001968:	4013      	ands	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001970:	4313      	orrs	r3, r2
 8001972:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001978:	e004      	b.n	8001984 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800197a:	2306      	movs	r3, #6
 800197c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	2b7f      	cmp	r3, #127	; 0x7f
 8001988:	d803      	bhi.n	8001992 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001990:	e01f      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001998:	d206      	bcs.n	80019a8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800199a:	2302      	movs	r3, #2
 800199c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	f887 3020 	strb.w	r3, [r7, #32]
 80019a6:	e014      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d206      	bcs.n	80019be <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80019b6:	23e0      	movs	r3, #224	; 0xe0
 80019b8:	f887 3020 	strb.w	r3, [r7, #32]
 80019bc:	e009      	b.n	80019d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019c4:	d24f      	bcs.n	8001a66 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019c6:	2304      	movs	r3, #4
 80019c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019cc:	23f0      	movs	r3, #240	; 0xf0
 80019ce:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019dc:	e015      	b.n	8001a0a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019f0:	440b      	add	r3, r1
 80019f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001a00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a04:	3b01      	subs	r3, #1
 8001a06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e5      	bne.n	80019de <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d909      	bls.n	8001a2e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	b2d9      	uxtb	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e007      	b.n	8001a3e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a46:	441a      	add	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a50:	e00b      	b.n	8001a6a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a52:	bf00      	nop
 8001a54:	e008      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a56:	bf00      	nop
 8001a58:	e006      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a5a:	bf00      	nop
 8001a5c:	e004      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a66:	bf00      	nop

fail:
    return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	000ffc00 	.word	0x000ffc00

08001a78 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b22      	cmp	r3, #34	; 0x22
 8001ab4:	f040 8102 	bne.w	8001cbc <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ac0:	e017      	b.n	8001af2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b5c      	cmp	r3, #92	; 0x5c
 8001ac8:	d110      	bne.n	8001aec <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	f080 80f0 	bcs.w	8001cc0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3301      	adds	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a3a      	ldr	r2, [r7, #32]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d203      	bcs.n	8001b0c <parse_string+0x94>
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b22      	cmp	r3, #34	; 0x22
 8001b0a:	d1da      	bne.n	8001ac2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f080 80d2 	bcs.w	8001cc4 <parse_string+0x24c>
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b22      	cmp	r3, #34	; 0x22
 8001b26:	f040 80cd 	bne.w	8001cc4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	6a3a      	ldr	r2, [r7, #32]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	3201      	adds	r2, #1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4798      	blx	r3
 8001b4c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b9 	beq.w	8001cc8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b5a:	e093      	b.n	8001c84 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b5c      	cmp	r3, #92	; 0x5c
 8001b62:	d008      	beq.n	8001b76 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	1c53      	adds	r3, r2, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1c59      	adds	r1, r3, #1
 8001b6e:	60f9      	str	r1, [r7, #12]
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e086      	b.n	8001c84 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b7a:	6a3a      	ldr	r2, [r7, #32]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f340 80a3 	ble.w	8001ccc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b75      	cmp	r3, #117	; 0x75
 8001b8e:	f300 809f 	bgt.w	8001cd0 <parse_string+0x258>
 8001b92:	2b5c      	cmp	r3, #92	; 0x5c
 8001b94:	da04      	bge.n	8001ba0 <parse_string+0x128>
 8001b96:	2b22      	cmp	r3, #34	; 0x22
 8001b98:	d05c      	beq.n	8001c54 <parse_string+0x1dc>
 8001b9a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b9c:	d05a      	beq.n	8001c54 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b9e:	e097      	b.n	8001cd0 <parse_string+0x258>
            switch (input_pointer[1])
 8001ba0:	3b5c      	subs	r3, #92	; 0x5c
 8001ba2:	2b19      	cmp	r3, #25
 8001ba4:	f200 8094 	bhi.w	8001cd0 <parse_string+0x258>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <parse_string+0x138>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001c55 	.word	0x08001c55
 8001bb4:	08001cd1 	.word	0x08001cd1
 8001bb8:	08001cd1 	.word	0x08001cd1
 8001bbc:	08001cd1 	.word	0x08001cd1
 8001bc0:	08001cd1 	.word	0x08001cd1
 8001bc4:	08001cd1 	.word	0x08001cd1
 8001bc8:	08001c19 	.word	0x08001c19
 8001bcc:	08001cd1 	.word	0x08001cd1
 8001bd0:	08001cd1 	.word	0x08001cd1
 8001bd4:	08001cd1 	.word	0x08001cd1
 8001bd8:	08001c25 	.word	0x08001c25
 8001bdc:	08001cd1 	.word	0x08001cd1
 8001be0:	08001cd1 	.word	0x08001cd1
 8001be4:	08001cd1 	.word	0x08001cd1
 8001be8:	08001cd1 	.word	0x08001cd1
 8001bec:	08001cd1 	.word	0x08001cd1
 8001bf0:	08001cd1 	.word	0x08001cd1
 8001bf4:	08001cd1 	.word	0x08001cd1
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001cd1 	.word	0x08001cd1
 8001c00:	08001cd1 	.word	0x08001cd1
 8001c04:	08001cd1 	.word	0x08001cd1
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001cd1 	.word	0x08001cd1
 8001c10:	08001c49 	.word	0x08001c49
 8001c14:	08001c63 	.word	0x08001c63
                    *output_pointer++ = '\b';
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60fa      	str	r2, [r7, #12]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	701a      	strb	r2, [r3, #0]
                    break;
 8001c22:	e02b      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60fa      	str	r2, [r7, #12]
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2e:	e025      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60fa      	str	r2, [r7, #12]
 8001c36:	220a      	movs	r2, #10
 8001c38:	701a      	strb	r2, [r3, #0]
                    break;
 8001c3a:	e01f      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60fa      	str	r2, [r7, #12]
 8001c42:	220d      	movs	r2, #13
 8001c44:	701a      	strb	r2, [r3, #0]
                    break;
 8001c46:	e019      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60fa      	str	r2, [r7, #12]
 8001c4e:	2209      	movs	r2, #9
 8001c50:	701a      	strb	r2, [r3, #0]
                    break;
 8001c52:	e013      	b.n	8001c7c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60fa      	str	r2, [r7, #12]
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	7852      	ldrb	r2, [r2, #1]
 8001c5e:	701a      	strb	r2, [r3, #0]
                    break;
 8001c60:	e00c      	b.n	8001c7c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	461a      	mov	r2, r3
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c6c:	f7ff fe1c 	bl	80018a8 <utf16_literal_to_utf8>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02c      	beq.n	8001cd4 <parse_string+0x25c>
                    break;
 8001c7a:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	4413      	add	r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f4ff af67 	bcc.w	8001b5c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2210      	movs	r2, #16
 8001c98:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	609a      	str	r2, [r3, #8]

    return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01e      	b.n	8001cfa <parse_string+0x282>
        goto fail;
 8001cbc:	bf00      	nop
 8001cbe:	e00a      	b.n	8001cd6 <parse_string+0x25e>
                    goto fail;
 8001cc0:	bf00      	nop
 8001cc2:	e008      	b.n	8001cd6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001cc4:	bf00      	nop
 8001cc6:	e006      	b.n	8001cd6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001cc8:	bf00      	nop
 8001cca:	e004      	b.n	8001cd6 <parse_string+0x25e>
                goto fail;
 8001ccc:	bf00      	nop
 8001cce:	e002      	b.n	8001cd6 <parse_string+0x25e>
                    goto fail;
 8001cd0:	bf00      	nop
 8001cd2:	e000      	b.n	8001cd6 <parse_string+0x25e>
                        goto fail;
 8001cd4:	bf00      	nop

fail:
    if (output != NULL)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	69f8      	ldr	r0, [r7, #28]
 8001ce2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop

08001d04 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <print_string_ptr+0x28>
    {
        return false;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e110      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d111      	bne.n	8001d56 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d32:	2103      	movs	r1, #3
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff fb61 	bl	80013fc <ensure>
 8001d3a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <print_string_ptr+0x42>
        {
            return false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e103      	b.n	8001f4e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4a83      	ldr	r2, [pc, #524]	; (8001f58 <print_string_ptr+0x254>)
 8001d4a:	8811      	ldrh	r1, [r2, #0]
 8001d4c:	7892      	ldrb	r2, [r2, #2]
 8001d4e:	8019      	strh	r1, [r3, #0]
 8001d50:	709a      	strb	r2, [r3, #2]

        return true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0fb      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e023      	b.n	8001da4 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b22      	cmp	r3, #34	; 0x22
 8001d62:	dc0e      	bgt.n	8001d82 <print_string_ptr+0x7e>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	db12      	blt.n	8001d8e <print_string_ptr+0x8a>
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <print_string_ptr+0x258>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <print_string_ptr+0x82>
 8001d80:	e005      	b.n	8001d8e <print_string_ptr+0x8a>
 8001d82:	2b5c      	cmp	r3, #92	; 0x5c
 8001d84:	d103      	bne.n	8001d8e <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
                break;
 8001d8c:	e007      	b.n	8001d9e <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b1f      	cmp	r3, #31
 8001d94:	d802      	bhi.n	8001d9c <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3305      	adds	r3, #5
 8001d9a:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d9c:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1d7      	bne.n	8001d5c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f7ff fb1b 	bl	80013fc <ensure>
 8001dc6:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <print_string_ptr+0xce>
    {
        return false;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e0bd      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d117      	bne.n	8001e08 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2222      	movs	r2, #34	; 0x22
 8001ddc:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3301      	adds	r3, #1
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00b fbd4 	bl	800d594 <memcpy>
        output[output_length + 1] = '\"';
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	2222      	movs	r2, #34	; 0x22
 8001df6:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

        return true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0a2      	b.n	8001f4e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2222      	movs	r2, #34	; 0x22
 8001e0c:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	e087      	b.n	8001f2a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b1f      	cmp	r3, #31
 8001e20:	d90c      	bls.n	8001e3c <print_string_ptr+0x138>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b22      	cmp	r3, #34	; 0x22
 8001e28:	d008      	beq.n	8001e3c <print_string_ptr+0x138>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b5c      	cmp	r3, #92	; 0x5c
 8001e30:	d004      	beq.n	8001e3c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e070      	b.n	8001f1e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	61ba      	str	r2, [r7, #24]
 8001e42:	225c      	movs	r2, #92	; 0x5c
 8001e44:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b22      	cmp	r3, #34	; 0x22
 8001e4c:	dc3e      	bgt.n	8001ecc <print_string_ptr+0x1c8>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	db5a      	blt.n	8001f08 <print_string_ptr+0x204>
 8001e52:	3b08      	subs	r3, #8
 8001e54:	2b1a      	cmp	r3, #26
 8001e56:	d857      	bhi.n	8001f08 <print_string_ptr+0x204>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <print_string_ptr+0x15c>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001ee1 	.word	0x08001ee1
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001ef1 	.word	0x08001ef1
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001ef9 	.word	0x08001ef9
 8001e78:	08001f09 	.word	0x08001f09
 8001e7c:	08001f09 	.word	0x08001f09
 8001e80:	08001f09 	.word	0x08001f09
 8001e84:	08001f09 	.word	0x08001f09
 8001e88:	08001f09 	.word	0x08001f09
 8001e8c:	08001f09 	.word	0x08001f09
 8001e90:	08001f09 	.word	0x08001f09
 8001e94:	08001f09 	.word	0x08001f09
 8001e98:	08001f09 	.word	0x08001f09
 8001e9c:	08001f09 	.word	0x08001f09
 8001ea0:	08001f09 	.word	0x08001f09
 8001ea4:	08001f09 	.word	0x08001f09
 8001ea8:	08001f09 	.word	0x08001f09
 8001eac:	08001f09 	.word	0x08001f09
 8001eb0:	08001f09 	.word	0x08001f09
 8001eb4:	08001f09 	.word	0x08001f09
 8001eb8:	08001f09 	.word	0x08001f09
 8001ebc:	08001f09 	.word	0x08001f09
 8001ec0:	08001f09 	.word	0x08001f09
 8001ec4:	08001f09 	.word	0x08001f09
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	2b5c      	cmp	r3, #92	; 0x5c
 8001ece:	d11b      	bne.n	8001f08 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	225c      	movs	r2, #92	; 0x5c
 8001ed4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed6:	e022      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2222      	movs	r2, #34	; 0x22
 8001edc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ede:	e01e      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2262      	movs	r2, #98	; 0x62
 8001ee4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee6:	e01a      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2266      	movs	r2, #102	; 0x66
 8001eec:	701a      	strb	r2, [r3, #0]
                    break;
 8001eee:	e016      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	226e      	movs	r2, #110	; 0x6e
 8001ef4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ef6:	e012      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2272      	movs	r2, #114	; 0x72
 8001efc:	701a      	strb	r2, [r3, #0]
                    break;
 8001efe:	e00e      	b.n	8001f1e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2274      	movs	r2, #116	; 0x74
 8001f04:	701a      	strb	r2, [r3, #0]
                    break;
 8001f06:	e00a      	b.n	8001f1e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	; (8001f60 <print_string_ptr+0x25c>)
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f00b fcb7 	bl	800d884 <siprintf>
                    output_pointer += 4;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	61bb      	str	r3, [r7, #24]
                    break;
 8001f1c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f47f af73 	bne.w	8001e1a <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2222      	movs	r2, #34	; 0x22
 8001f3e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3302      	adds	r3, #2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

    return true;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08010f64 	.word	0x08010f64
 8001f5c:	04000037 	.word	0x04000037
 8001f60:	08010f68 	.word	0x08010f68

08001f64 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fec5 	bl	8001d04 <print_string_ptr>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <buffer_skip_whitespace+0x16>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e02c      	b.n	8001ff8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <buffer_skip_whitespace+0x2c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d306      	bcc.n	8001fbe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	e021      	b.n	8001ff8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <buffer_skip_whitespace+0x5c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <buffer_skip_whitespace+0x5c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d9e9      	bls.n	8001fb4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d104      	bne.n	8001ff6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <skip_utf8_bom+0x1e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <skip_utf8_bom+0x1e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	e01c      	b.n	8002060 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <skip_utf8_bom+0x5a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	1d1a      	adds	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d211      	bcs.n	800205e <skip_utf8_bom+0x5a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4413      	add	r3, r2
 8002044:	2203      	movs	r2, #3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <skip_utf8_bom+0x64>)
 8002048:	4618      	mov	r0, r3
 800204a:	f00b fcb4 	bl	800d9b6 <strncmp>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d104      	bne.n	800205e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	1cda      	adds	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08010f70 	.word	0x08010f70

0800206c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	e00c      	b.n	800209c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe f8b6 	bl	80001f4 <strlen>
 8002088:	4603      	mov	r3, r0
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f805 	bl	80020a4 <cJSON_ParseWithLengthOpts>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	615a      	str	r2, [r3, #20]
 80020c4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d042      	beq.n	8002162 <cJSON_ParseWithLengthOpts+0xbe>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03f      	beq.n	8002162 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020ee:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <cJSON_ParseWithLengthOpts+0x130>)
 80020f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020fa:	4836      	ldr	r0, [pc, #216]	; (80021d4 <cJSON_ParseWithLengthOpts+0x130>)
 80020fc:	f7ff f828 	bl	8001150 <cJSON_New_Item>
 8002100:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02e      	beq.n	8002166 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff79 	bl	8002004 <skip_utf8_bom>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <buffer_skip_whitespace>
 800211a:	4603      	mov	r3, r0
 800211c:	4619      	mov	r1, r3
 800211e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002120:	f000 f8fc 	bl	800231c <parse_value>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01f      	beq.n	800216a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff25 	bl	8001f84 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800213a:	6a3a      	ldr	r2, [r7, #32]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	429a      	cmp	r2, r3
 8002140:	d215      	bcs.n	800216e <cJSON_ParseWithLengthOpts+0xca>
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	e031      	b.n	80021c6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002162:	bf00      	nop
 8002164:	e004      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800216e:	bf00      	nop

fail:
    if (item != NULL)
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002178:	f7ff f800 	bl	800117c <cJSON_Delete>
    }

    if (value != NULL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	429a      	cmp	r2, r3
 8002190:	d202      	bcs.n	8002198 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e005      	b.n	80021a4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <cJSON_ParseWithLengthOpts+0x12c>)
 80021b6:	461a      	mov	r2, r3
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021c0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3738      	adds	r7, #56	; 0x38
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000224 	.word	0x20000224
 80021d4:	20000000 	.word	0x20000000

080021d8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff41 	bl	800206c <cJSON_ParseWithOpts>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2224      	movs	r2, #36	; 0x24
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00b f9cf 	bl	800d5b0 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <print+0x104>)
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4610      	mov	r0, r2
 800221c:	4798      	blx	r3
 800221e:	4603      	mov	r3, r0
 8002220:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <print+0x104>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002232:	ca07      	ldmia	r2, {r0, r1, r2}
 8002234:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4619      	mov	r1, r3
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f955 	bl	80024f4 <print_value>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d039      	beq.n	80022c4 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f96b 	bl	8001530 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	6938      	ldr	r0, [r7, #16]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	3201      	adds	r2, #1
 800226c:	4611      	mov	r1, r2
 800226e:	4798      	blx	r3
 8002270:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	2b00      	cmp	r3, #0
 8002276:	d027      	beq.n	80022c8 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e01e      	b.n	80022bc <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	3201      	adds	r2, #1
 8002286:	4610      	mov	r0, r2
 8002288:	4798      	blx	r3
 800228a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4293      	cmp	r3, r2
 800229c:	bf28      	it	cs
 800229e:	4613      	movcs	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022a4:	f00b f976 	bl	800d594 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ac:	4413      	add	r3, r2
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
    }

    return printed;
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	e016      	b.n	80022ee <print+0xfa>
        goto fail;
 80022c0:	bf00      	nop
 80022c2:	e004      	b.n	80022ce <print+0xda>
        goto fail;
 80022c4:	bf00      	nop
 80022c6:	e002      	b.n	80022ce <print+0xda>
            goto fail;
 80022c8:	bf00      	nop
 80022ca:	e000      	b.n	80022ce <print+0xda>
            goto fail;
 80022cc:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4610      	mov	r0, r2
 80022dc:	4798      	blx	r3
    }

    if (printed != NULL)
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <print+0xf8>
    {
        hooks->deallocate(printed);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022ea:	4798      	blx	r3
    }

    return NULL;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3738      	adds	r7, #56	; 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	0801107c 	.word	0x0801107c

080022fc <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <cJSON_PrintUnformatted+0x1c>)
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff73 	bl	80021f4 <print>
 800230e:	4603      	mov	r3, r0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000000 	.word	0x20000000

0800231c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <parse_value+0x18>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <parse_value+0x1c>
    {
        return false; /* no input */
 8002334:	2300      	movs	r3, #0
 8002336:	e0d2      	b.n	80024de <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01d      	beq.n	800237a <parse_value+0x5e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d816      	bhi.n	800237a <parse_value+0x5e>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4413      	add	r3, r2
 8002356:	2204      	movs	r2, #4
 8002358:	4963      	ldr	r1, [pc, #396]	; (80024e8 <parse_value+0x1cc>)
 800235a:	4618      	mov	r0, r3
 800235c:	f00b fb2b 	bl	800d9b6 <strncmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	1d1a      	adds	r2, r3, #4
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	609a      	str	r2, [r3, #8]
        return true;
 8002376:	2301      	movs	r3, #1
 8002378:	e0b1      	b.n	80024de <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01d      	beq.n	80023bc <parse_value+0xa0>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	1d5a      	adds	r2, r3, #5
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d816      	bhi.n	80023bc <parse_value+0xa0>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4413      	add	r3, r2
 8002398:	2205      	movs	r2, #5
 800239a:	4954      	ldr	r1, [pc, #336]	; (80024ec <parse_value+0x1d0>)
 800239c:	4618      	mov	r0, r3
 800239e:	f00b fb0a 	bl	800d9b6 <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	1d5a      	adds	r2, r3, #5
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	609a      	str	r2, [r3, #8]
        return true;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e090      	b.n	80024de <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d020      	beq.n	8002404 <parse_value+0xe8>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d819      	bhi.n	8002404 <parse_value+0xe8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	2204      	movs	r2, #4
 80023dc:	4944      	ldr	r1, [pc, #272]	; (80024f0 <parse_value+0x1d4>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f00b fae9 	bl	800d9b6 <strncmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]
        return true;
 8002400:	2301      	movs	r3, #1
 8002402:	e06c      	b.n	80024de <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d013      	beq.n	8002432 <parse_value+0x116>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20d      	bcs.n	8002432 <parse_value+0x116>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b22      	cmp	r3, #34	; 0x22
 8002424:	d105      	bne.n	8002432 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fb25 	bl	8001a78 <parse_string>
 800242e:	4603      	mov	r3, r0
 8002430:	e055      	b.n	80024de <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <parse_value+0x164>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d21d      	bcs.n	8002480 <parse_value+0x164>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b2d      	cmp	r3, #45	; 0x2d
 8002452:	d00f      	beq.n	8002474 <parse_value+0x158>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b2f      	cmp	r3, #47	; 0x2f
 8002462:	d90d      	bls.n	8002480 <parse_value+0x164>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b39      	cmp	r3, #57	; 0x39
 8002472:	d805      	bhi.n	8002480 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fed2 	bl	8001220 <parse_number>
 800247c:	4603      	mov	r3, r0
 800247e:	e02e      	b.n	80024de <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d013      	beq.n	80024ae <parse_value+0x192>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20d      	bcs.n	80024ae <parse_value+0x192>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b5b      	cmp	r3, #91	; 0x5b
 80024a0:	d105      	bne.n	80024ae <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f909 	bl	80026bc <parse_array>
 80024aa:	4603      	mov	r3, r0
 80024ac:	e017      	b.n	80024de <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <parse_value+0x1c0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d20d      	bcs.n	80024dc <parse_value+0x1c0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b7b      	cmp	r3, #123	; 0x7b
 80024ce:	d105      	bne.n	80024dc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa3c 	bl	8002950 <parse_object>
 80024d8:	4603      	mov	r3, r0
 80024da:	e000      	b.n	80024de <parse_value+0x1c2>
    }

    return false;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08010f44 	.word	0x08010f44
 80024ec:	08010f74 	.word	0x08010f74
 80024f0:	08010f7c 	.word	0x08010f7c

080024f4 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <print_value+0x1a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <print_value+0x1e>
    {
        return false;
 800250e:	2300      	movs	r3, #0
 8002510:	e0c9      	b.n	80026a6 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	f000 808e 	beq.w	800263a <print_value+0x146>
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	f300 80c0 	bgt.w	80026a4 <print_value+0x1b0>
 8002524:	2b20      	cmp	r3, #32
 8002526:	dc49      	bgt.n	80025bc <print_value+0xc8>
 8002528:	2b00      	cmp	r3, #0
 800252a:	f340 80bb 	ble.w	80026a4 <print_value+0x1b0>
 800252e:	3b01      	subs	r3, #1
 8002530:	2b1f      	cmp	r3, #31
 8002532:	f200 80b7 	bhi.w	80026a4 <print_value+0x1b0>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <print_value+0x48>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	080025e7 	.word	0x080025e7
 8002540:	0800260b 	.word	0x0800260b
 8002544:	080026a5 	.word	0x080026a5
 8002548:	080025c3 	.word	0x080025c3
 800254c:	080026a5 	.word	0x080026a5
 8002550:	080026a5 	.word	0x080026a5
 8002554:	080026a5 	.word	0x080026a5
 8002558:	0800262f 	.word	0x0800262f
 800255c:	080026a5 	.word	0x080026a5
 8002560:	080026a5 	.word	0x080026a5
 8002564:	080026a5 	.word	0x080026a5
 8002568:	080026a5 	.word	0x080026a5
 800256c:	080026a5 	.word	0x080026a5
 8002570:	080026a5 	.word	0x080026a5
 8002574:	080026a5 	.word	0x080026a5
 8002578:	08002681 	.word	0x08002681
 800257c:	080026a5 	.word	0x080026a5
 8002580:	080026a5 	.word	0x080026a5
 8002584:	080026a5 	.word	0x080026a5
 8002588:	080026a5 	.word	0x080026a5
 800258c:	080026a5 	.word	0x080026a5
 8002590:	080026a5 	.word	0x080026a5
 8002594:	080026a5 	.word	0x080026a5
 8002598:	080026a5 	.word	0x080026a5
 800259c:	080026a5 	.word	0x080026a5
 80025a0:	080026a5 	.word	0x080026a5
 80025a4:	080026a5 	.word	0x080026a5
 80025a8:	080026a5 	.word	0x080026a5
 80025ac:	080026a5 	.word	0x080026a5
 80025b0:	080026a5 	.word	0x080026a5
 80025b4:	080026a5 	.word	0x080026a5
 80025b8:	0800268d 	.word	0x0800268d
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d06b      	beq.n	8002698 <print_value+0x1a4>
 80025c0:	e070      	b.n	80026a4 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025c2:	2105      	movs	r1, #5
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f7fe ff19 	bl	80013fc <ensure>
 80025ca:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <print_value+0xe2>
            {
                return false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e067      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <print_value+0x1bc>)
 80025da:	6810      	ldr	r0, [r2, #0]
 80025dc:	6018      	str	r0, [r3, #0]
 80025de:	7912      	ldrb	r2, [r2, #4]
 80025e0:	711a      	strb	r2, [r3, #4]
            return true;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e05f      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80025e6:	2106      	movs	r1, #6
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f7fe ff07 	bl	80013fc <ensure>
 80025ee:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <print_value+0x106>
            {
                return false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e055      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <print_value+0x1c0>)
 80025fe:	6810      	ldr	r0, [r2, #0]
 8002600:	6018      	str	r0, [r3, #0]
 8002602:	8892      	ldrh	r2, [r2, #4]
 8002604:	809a      	strh	r2, [r3, #4]
            return true;
 8002606:	2301      	movs	r3, #1
 8002608:	e04d      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800260a:	2105      	movs	r1, #5
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f7fe fef5 	bl	80013fc <ensure>
 8002612:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <print_value+0x12a>
            {
                return false;
 800261a:	2300      	movs	r3, #0
 800261c:	e043      	b.n	80026a6 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <print_value+0x1c4>)
 8002622:	6810      	ldr	r0, [r2, #0]
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	7912      	ldrb	r2, [r2, #4]
 8002628:	711a      	strb	r2, [r3, #4]
            return true;
 800262a:	2301      	movs	r3, #1
 800262c:	e03b      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe ffe7 	bl	8001604 <print_number>
 8002636:	4603      	mov	r3, r0
 8002638:	e035      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <print_value+0x156>
            {
                return false;
 8002646:	2300      	movs	r3, #0
 8002648:	e02d      	b.n	80026a6 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fdd0 	bl	80001f4 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	3301      	adds	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7fe fecd 	bl	80013fc <ensure>
 8002662:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <print_value+0x17a>
            {
                return false;
 800266a:	2300      	movs	r3, #0
 800266c:	e01b      	b.n	80026a6 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	4619      	mov	r1, r3
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f00a ff8c 	bl	800d594 <memcpy>
            return true;
 800267c:	2301      	movs	r3, #1
 800267e:	e012      	b.n	80026a6 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fc6e 	bl	8001f64 <print_string>
 8002688:	4603      	mov	r3, r0
 800268a:	e00c      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8d8 	bl	8002844 <print_array>
 8002694:	4603      	mov	r3, r0
 8002696:	e006      	b.n	80026a6 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa57 	bl	8002b4e <print_object>
 80026a0:	4603      	mov	r3, r0
 80026a2:	e000      	b.n	80026a6 <print_value+0x1b2>

        default:
            return false;
 80026a4:	2300      	movs	r3, #0
    }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08010f44 	.word	0x08010f44
 80026b4:	08010f74 	.word	0x08010f74
 80026b8:	08010f7c 	.word	0x08010f7c

080026bc <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d301      	bcc.n	80026dc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026d8:	2300      	movs	r3, #0
 80026da:	e0af      	b.n	800283c <parse_array+0x180>
    }
    input_buffer->depth++;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b5b      	cmp	r3, #91	; 0x5b
 80026f4:	f040 8094 	bne.w	8002820 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7ff fc3e 	bl	8001f84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <parse_array+0x6e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d207      	bcs.n	800272a <parse_array+0x6e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b5d      	cmp	r3, #93	; 0x5d
 8002728:	d061      	beq.n	80027ee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <parse_array+0x80>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d305      	bcc.n	8002748 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	609a      	str	r2, [r3, #8]
        goto fail;
 8002746:	e072      	b.n	800282e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3310      	adds	r3, #16
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fcfa 	bl	8001150 <cJSON_New_Item>
 800275c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05f      	beq.n	8002824 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e007      	b.n	8002784 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7ff fbf8 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	6938      	ldr	r0, [r7, #16]
 8002798:	f7ff fdc0 	bl	800231c <parse_value>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d042      	beq.n	8002828 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f7ff fbee 	bl	8001f84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00d      	beq.n	80027ca <parse_array+0x10e>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d207      	bcs.n	80027ca <parse_array+0x10e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b2c      	cmp	r3, #44	; 0x2c
 80027c8:	d0c3      	beq.n	8002752 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02d      	beq.n	800282c <parse_array+0x170>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d227      	bcs.n	800282c <parse_array+0x170>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b5d      	cmp	r3, #93	; 0x5d
 80027ea:	d11f      	bne.n	800282c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027ec:	e000      	b.n	80027f0 <parse_array+0x134>
        goto success;
 80027ee:	bf00      	nop
    input_buffer->depth--;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <parse_array+0x14a>
        head->prev = current_item;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]

    return true;
 800281c:	2301      	movs	r3, #1
 800281e:	e00d      	b.n	800283c <parse_array+0x180>
        goto fail;
 8002820:	bf00      	nop
 8002822:	e004      	b.n	800282e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002824:	bf00      	nop
 8002826:	e002      	b.n	800282e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <parse_array+0x172>
        goto fail; /* expected end of array */
 800282c:	bf00      	nop

fail:
    if (head != NULL)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7fe fca1 	bl	800117c <cJSON_Delete>
    }

    return false;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <print_array+0x22>
    {
        return false;
 8002862:	2300      	movs	r3, #0
 8002864:	e070      	b.n	8002948 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002866:	2101      	movs	r1, #1
 8002868:	6838      	ldr	r0, [r7, #0]
 800286a:	f7fe fdc7 	bl	80013fc <ensure>
 800286e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <print_array+0x36>
    {
        return false;
 8002876:	2300      	movs	r3, #0
 8002878:	e066      	b.n	8002948 <print_array+0x104>
    }

    *output_pointer = '[';
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	225b      	movs	r2, #91	; 0x5b
 800287e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002894:	e03d      	b.n	8002912 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f7ff fe2b 	bl	80024f4 <print_value>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <print_array+0x64>
        {
            return false;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e04f      	b.n	8002948 <print_array+0x104>
        }
        update_offset(output_buffer);
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f7fe fe41 	bl	8001530 <update_offset>
        if (current_element->next)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02a      	beq.n	800290c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <print_array+0x7e>
 80028be:	2302      	movs	r3, #2
 80028c0:	e000      	b.n	80028c4 <print_array+0x80>
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4619      	mov	r1, r3
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7fe fd95 	bl	80013fc <ensure>
 80028d2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <print_array+0x9a>
            {
                return false;
 80028da:	2300      	movs	r3, #0
 80028dc:	e034      	b.n	8002948 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	617a      	str	r2, [r7, #20]
 80028e4:	222c      	movs	r2, #44	; 0x2c
 80028e6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	617a      	str	r2, [r7, #20]
 80028f6:	2220      	movs	r2, #32
 80028f8:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	441a      	add	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1be      	bne.n	8002896 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002918:	2102      	movs	r1, #2
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f7fe fd6e 	bl	80013fc <ensure>
 8002920:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <print_array+0xe8>
    {
        return false;
 8002928:	2300      	movs	r3, #0
 800292a:	e00d      	b.n	8002948 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	617a      	str	r2, [r7, #20]
 8002932:	225d      	movs	r2, #93	; 0x5d
 8002934:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60da      	str	r2, [r3, #12]

    return true;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296a:	d301      	bcc.n	8002970 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800296c:	2300      	movs	r3, #0
 800296e:	e0ea      	b.n	8002b46 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80d0 	beq.w	8002b22 <parse_object+0x1d2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	f080 80c9 	bcs.w	8002b22 <parse_object+0x1d2>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b7b      	cmp	r3, #123	; 0x7b
 800299e:	f040 80c0 	bne.w	8002b22 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f7ff fae9 	bl	8001f84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00e      	beq.n	80029d6 <parse_object+0x86>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d208      	bcs.n	80029d6 <parse_object+0x86>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4413      	add	r3, r2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b7d      	cmp	r3, #125	; 0x7d
 80029d2:	f000 808d 	beq.w	8002af0 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <parse_object+0x98>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d305      	bcc.n	80029f4 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	609a      	str	r2, [r3, #8]
        goto fail;
 80029f2:	e0a1      	b.n	8002b38 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3310      	adds	r3, #16
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fba4 	bl	8001150 <cJSON_New_Item>
 8002a08:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808a 	beq.w	8002b26 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	e007      	b.n	8002a32 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a3c:	6838      	ldr	r0, [r7, #0]
 8002a3e:	f7ff faa1 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	6938      	ldr	r0, [r7, #16]
 8002a46:	f7ff f817 	bl	8001a78 <parse_string>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d06c      	beq.n	8002b2a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f7ff fa97 	bl	8001f84 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d061      	beq.n	8002b2e <parse_object+0x1de>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d25b      	bcs.n	8002b2e <parse_object+0x1de>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b3a      	cmp	r3, #58	; 0x3a
 8002a84:	d153      	bne.n	8002b2e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a90:	6838      	ldr	r0, [r7, #0]
 8002a92:	f7ff fa77 	bl	8001f84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	6938      	ldr	r0, [r7, #16]
 8002a9a:	f7ff fc3f 	bl	800231c <parse_value>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d046      	beq.n	8002b32 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f7ff fa6d 	bl	8001f84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <parse_object+0x17c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <parse_object+0x17c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b2c      	cmp	r3, #44	; 0x2c
 8002aca:	d098      	beq.n	80029fe <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d031      	beq.n	8002b36 <parse_object+0x1e6>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d22b      	bcs.n	8002b36 <parse_object+0x1e6>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b7d      	cmp	r3, #125	; 0x7d
 8002aec:	d123      	bne.n	8002b36 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002aee:	e000      	b.n	8002af2 <parse_object+0x1a2>
        goto success; /* empty object */
 8002af0:	bf00      	nop
    input_buffer->depth--;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <parse_object+0x1b8>
        head->prev = current_item;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	609a      	str	r2, [r3, #8]
    return true;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e011      	b.n	8002b46 <parse_object+0x1f6>
        goto fail; /* not an object */
 8002b22:	bf00      	nop
 8002b24:	e008      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002b26:	bf00      	nop
 8002b28:	e006      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002b36:	bf00      	nop

fail:
    if (head != NULL)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7fe fb1c 	bl	800117c <cJSON_Delete>
    }

    return false;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <print_object+0x22>
    {
        return false;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e108      	b.n	8002d82 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <print_object+0x2e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e000      	b.n	8002b7e <print_object+0x30>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4619      	mov	r1, r3
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f7fe fc38 	bl	80013fc <ensure>
 8002b8c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <print_object+0x4a>
    {
        return false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e0f4      	b.n	8002d82 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	227b      	movs	r2, #123	; 0x7b
 8002ba0:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	220a      	movs	r2, #10
 8002bbc:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bca:	e0a0      	b.n	8002d0e <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d022      	beq.n	8002c1a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f7fe fc0e 	bl	80013fc <ensure>
 8002be0:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <print_object+0x9e>
            {
                return false;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e0ca      	b.n	8002d82 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e007      	b.n	8002c02 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	61fa      	str	r2, [r7, #28]
 8002bf8:	2209      	movs	r2, #9
 8002bfa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3f2      	bcc.n	8002bf2 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	441a      	add	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f86f 	bl	8001d04 <print_string_ptr>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <print_object+0xe2>
        {
            return false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e0a8      	b.n	8002d82 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f7fe fc7d 	bl	8001530 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <print_object+0xf4>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e000      	b.n	8002c44 <print_object+0xf6>
 8002c42:	2301      	movs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f7fe fbd7 	bl	80013fc <ensure>
 8002c4e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <print_object+0x10c>
        {
            return false;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e093      	b.n	8002d82 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	223a      	movs	r2, #58	; 0x3a
 8002c62:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	61fa      	str	r2, [r7, #28]
 8002c72:	2209      	movs	r2, #9
 8002c74:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	69b8      	ldr	r0, [r7, #24]
 8002c86:	f7ff fc35 	bl	80024f4 <print_value>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <print_object+0x146>
        {
            return false;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e076      	b.n	8002d82 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c94:	6838      	ldr	r0, [r7, #0]
 8002c96:	f7fe fc4b 	bl	8001530 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <print_object+0x158>
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	e000      	b.n	8002ca8 <print_object+0x15a>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <print_object+0x166>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <print_object+0x168>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7fe fb9b 	bl	80013fc <ensure>
 8002cc6:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <print_object+0x184>
        {
            return false;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e057      	b.n	8002d82 <print_object+0x234>
        }
        if (current_item->next)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	222c      	movs	r2, #44	; 0x2c
 8002ce2:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	61fa      	str	r2, [r7, #28]
 8002cf2:	220a      	movs	r2, #10
 8002cf4:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	441a      	add	r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af5b 	bne.w	8002bcc <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <print_object+0x1d8>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	e000      	b.n	8002d28 <print_object+0x1da>
 8002d26:	2302      	movs	r3, #2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	f7fe fb66 	bl	80013fc <ensure>
 8002d30:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <print_object+0x1ee>
    {
        return false;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e022      	b.n	8002d82 <print_object+0x234>
    }
    if (output_buffer->format)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e007      	b.n	8002d5a <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	61fa      	str	r2, [r7, #28]
 8002d50:	2209      	movs	r2, #9
 8002d52:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	3301      	adds	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3f1      	bcc.n	8002d4a <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	61fa      	str	r2, [r7, #28]
 8002d6c:	227d      	movs	r2, #125	; 0x7d
 8002d6e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	60da      	str	r2, [r3, #12]

    return true;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <get_object_item+0x1c>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <get_object_item+0x20>
    {
        return NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e033      	b.n	8002e12 <get_object_item+0x88>
    }

    current_element = object->child;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002db6:	e002      	b.n	8002dbe <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01c      	beq.n	8002dfe <get_object_item+0x74>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <get_object_item+0x74>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68b8      	ldr	r0, [r7, #8]
 8002dd4:	f7fd fa04 	bl	80001e0 <strcmp>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ec      	bne.n	8002db8 <get_object_item+0x2e>
 8002dde:	e00e      	b.n	8002dfe <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <get_object_item+0x74>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68b8      	ldr	r0, [r7, #8]
 8002df4:	f7fe f918 	bl	8001028 <case_insensitive_strcmp>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <get_object_item+0x82>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <get_object_item+0x86>
        return NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <get_object_item+0x88>
    }

    return current_element;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002e24:	2200      	movs	r2, #0
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffae 	bl	8002d8a <get_object_item>
 8002e2e:	4603      	mov	r3, r0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <add_item_to_array+0x22>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <add_item_to_array+0x22>
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d101      	bne.n	8002e80 <add_item_to_array+0x26>
    {
        return false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e01e      	b.n	8002ebe <add_item_to_array+0x64>
    }

    child = array->child;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e00d      	b.n	8002ebc <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ffc2 	bl	8002e38 <suffix_object>
            array->child->prev = item;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002ece:	687b      	ldr	r3, [r7, #4]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <add_item_to_object+0x30>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <add_item_to_object+0x30>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <add_item_to_object+0x30>
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d101      	bne.n	8002f10 <add_item_to_object+0x34>
    {
        return false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e036      	b.n	8002f7e <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f7ff ffd5 	bl	8002ec6 <cast_away_const>
 8002f1c:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00e      	b.n	8002f48 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	68b8      	ldr	r0, [r7, #8]
 8002f2e:	f7fe f8e7 	bl	8001100 <cJSON_strdup>
 8002f32:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <add_item_to_object+0x62>
        {
            return false;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e01f      	b.n	8002f7e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f46:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <add_item_to_object+0x8c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a12      	ldr	r2, [r2, #32]
 8002f64:	4610      	mov	r0, r2
 8002f66:	4798      	blx	r3
    }

    item->string = new_key;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ff6f 	bl	8002e5a <add_item_to_array>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002f96:	ed97 0b00 	vldr	d0, [r7]
 8002f9a:	f000 f819 	bl	8002fd0 <cJSON_CreateNumber>
 8002f9e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <cJSON_AddNumberToObject+0x44>)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff96 	bl	8002edc <add_item_to_object>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e003      	b.n	8002fc2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7fe f8de 	bl	800117c <cJSON_Delete>
    return NULL;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002fda:	481f      	ldr	r0, [pc, #124]	; (8003058 <cJSON_CreateNumber+0x88>)
 8002fdc:	f7fe f8b8 	bl	8001150 <cJSON_New_Item>
 8002fe0:	60f8      	str	r0, [r7, #12]
    if(item)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02c      	beq.n	8003042 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2208      	movs	r2, #8
 8002fec:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002ff8:	a315      	add	r3, pc, #84	; (adr r3, 8003050 <cJSON_CreateNumber+0x80>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003002:	f7fd fd97 	bl	8000b34 <__aeabi_dcmpge>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	e015      	b.n	8003042 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <cJSON_CreateNumber+0x8c>)
 800301c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003020:	f7fd fd7e 	bl	8000b20 <__aeabi_dcmple>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	e006      	b.n	8003042 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8003034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003038:	f7fd fda6 	bl	8000b88 <__aeabi_d2iz>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	f3af 8000 	nop.w
 8003050:	ffc00000 	.word	0xffc00000
 8003054:	41dfffff 	.word	0x41dfffff
 8003058:	20000000 	.word	0x20000000
 800305c:	c1e00000 	.word	0xc1e00000

08003060 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <cJSON_CreateObject+0x24>)
 8003068:	f7fe f872 	bl	8001150 <cJSON_New_Item>
 800306c:	6078      	str	r0, [r7, #4]
    if (item)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	60da      	str	r2, [r3, #12]
    }

    return item;
 800307a:	687b      	ldr	r3, [r7, #4]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000000 	.word	0x20000000

08003088 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <cJSON_IsBool+0x12>
    {
        return false;
 8003096:	2300      	movs	r3, #0
 8003098:	e008      	b.n	80030ac <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <cJSON_IsNumber+0x12>
    {
        return false;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e007      	b.n	80030da <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <cJSON_IsObject+0x12>
    {
        return false;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e007      	b.n	8003108 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <deserializeJSON>:
 * This function takes a JSON string and fills a GameInfo struct with the deserialized information.
 *
 * @param json_data The JSON data to be deserialized.
 * @param info Pointer to the GameInfo struct to store the deserialized information.
 */
void deserializeJSON(const char* json_data, struct GameInfo* info) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_data);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff f85a 	bl	80021d8 <cJSON_Parse>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24

    // Who is JSON?

    if (root == NULL) {
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d079      	beq.n	8003220 <deserializeJSON+0x10c>
        // Handle the error here, e.g., set default values or return.
        return;
    }

    cJSON *red_json = cJSON_GetObjectItem(root, "team1");
 800312c:	493e      	ldr	r1, [pc, #248]	; (8003228 <deserializeJSON+0x114>)
 800312e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003130:	f7ff fe73 	bl	8002e1a <cJSON_GetObjectItem>
 8003134:	6238      	str	r0, [r7, #32]
    cJSON *blue_json = cJSON_GetObjectItem(root, "team2");
 8003136:	493d      	ldr	r1, [pc, #244]	; (800322c <deserializeJSON+0x118>)
 8003138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313a:	f7ff fe6e 	bl	8002e1a <cJSON_GetObjectItem>
 800313e:	61f8      	str	r0, [r7, #28]
    cJSON *end_of_round_json = cJSON_GetObjectItem(root, "end_of_round");
 8003140:	493b      	ldr	r1, [pc, #236]	; (8003230 <deserializeJSON+0x11c>)
 8003142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003144:	f7ff fe69 	bl	8002e1a <cJSON_GetObjectItem>
 8003148:	61b8      	str	r0, [r7, #24]

    if (red_json && cJSON_IsObject(red_json)) {
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d029      	beq.n	80031a4 <deserializeJSON+0x90>
 8003150:	6a38      	ldr	r0, [r7, #32]
 8003152:	f7ff ffc8 	bl	80030e6 <cJSON_IsObject>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <deserializeJSON+0x90>
        cJSON *score_json = cJSON_GetObjectItem(red_json, "score");
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <deserializeJSON+0x120>)
 800315e:	6a38      	ldr	r0, [r7, #32]
 8003160:	f7ff fe5b 	bl	8002e1a <cJSON_GetObjectItem>
 8003164:	6178      	str	r0, [r7, #20]
        cJSON *state_json = cJSON_GetObjectItem(red_json, "state");
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <deserializeJSON+0x124>)
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f7ff fe56 	bl	8002e1a <cJSON_GetObjectItem>
 800316e:	6138      	str	r0, [r7, #16]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <deserializeJSON+0x76>
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff9e 	bl	80030b8 <cJSON_IsNumber>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <deserializeJSON+0x76>
            info->red.score = score_json->valueint;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <deserializeJSON+0x90>
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	f7ff ff91 	bl	80030b8 <cJSON_IsNumber>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <deserializeJSON+0x90>
            info->red.state = state_json->valueint;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	605a      	str	r2, [r3, #4]
        }
    }

    if (blue_json && cJSON_IsObject(blue_json)) {
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d029      	beq.n	80031fe <deserializeJSON+0xea>
 80031aa:	69f8      	ldr	r0, [r7, #28]
 80031ac:	f7ff ff9b 	bl	80030e6 <cJSON_IsObject>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <deserializeJSON+0xea>
        cJSON *score_json = cJSON_GetObjectItem(blue_json, "score");
 80031b6:	491f      	ldr	r1, [pc, #124]	; (8003234 <deserializeJSON+0x120>)
 80031b8:	69f8      	ldr	r0, [r7, #28]
 80031ba:	f7ff fe2e 	bl	8002e1a <cJSON_GetObjectItem>
 80031be:	60f8      	str	r0, [r7, #12]
        cJSON *state_json = cJSON_GetObjectItem(blue_json, "state");
 80031c0:	491d      	ldr	r1, [pc, #116]	; (8003238 <deserializeJSON+0x124>)
 80031c2:	69f8      	ldr	r0, [r7, #28]
 80031c4:	f7ff fe29 	bl	8002e1a <cJSON_GetObjectItem>
 80031c8:	60b8      	str	r0, [r7, #8]

        if (score_json && cJSON_IsNumber(score_json)) {
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <deserializeJSON+0xd0>
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff ff71 	bl	80030b8 <cJSON_IsNumber>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <deserializeJSON+0xd0>
            info->blue.score = score_json->valueint;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	609a      	str	r2, [r3, #8]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <deserializeJSON+0xea>
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f7ff ff64 	bl	80030b8 <cJSON_IsNumber>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <deserializeJSON+0xea>
            info->blue.state = state_json->valueint;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        }
    }
    if (end_of_round_json && cJSON_IsBool(end_of_round_json)) {
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <deserializeJSON+0x104>
 8003204:	69b8      	ldr	r0, [r7, #24]
 8003206:	f7ff ff3f 	bl	8003088 <cJSON_IsBool>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <deserializeJSON+0x104>
        info->end_of_round = end_of_round_json->valueint;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	611a      	str	r2, [r3, #16]
    }

    cJSON_Delete(root);
 8003218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321a:	f7fd ffaf 	bl	800117c <cJSON_Delete>
 800321e:	e000      	b.n	8003222 <deserializeJSON+0x10e>
        return;
 8003220:	bf00      	nop
}
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	08010f84 	.word	0x08010f84
 800322c:	08010f8c 	.word	0x08010f8c
 8003230:	08010f94 	.word	0x08010f94
 8003234:	08010fa4 	.word	0x08010fa4
 8003238:	08010fac 	.word	0x08010fac

0800323c <serializeJSON>:
 * This function takes a broadcast packet and serializes it into a JSON and stores it in a char array.
 *
 * @param packet Pointer to he JSON data to be seralized.
 * @param data Pointer to the string storing the serialized JSON information.
 */
void* serializeJSON(BroadcastPacket* data, char* dst ){
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]

	 cJSON* json = cJSON_CreateObject();
 8003246:	f7ff ff0b 	bl	8003060 <cJSON_CreateObject>
 800324a:	60f8      	str	r0, [r7, #12]

	    if (json == NULL) {
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <serializeJSON+0x1a>
//	        fprintf(stderr, "Failed to create JSON object.\n");
	        return NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	e03e      	b.n	80032d4 <serializeJSON+0x98>
	    }

	    cJSON_AddNumberToObject(json, "battery", data->batteryVoltage); // battery voltage
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f96a 	bl	8000534 <__aeabi_ui2d>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	ec43 2b10 	vmov	d0, r2, r3
 8003268:	491c      	ldr	r1, [pc, #112]	; (80032dc <serializeJSON+0xa0>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff fe8c 	bl	8002f88 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team1d", data->redDeltaScore);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f95d 	bl	8000534 <__aeabi_ui2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	ec43 2b10 	vmov	d0, r2, r3
 8003282:	4917      	ldr	r1, [pc, #92]	; (80032e0 <serializeJSON+0xa4>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fe7f 	bl	8002f88 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team2d", data->blueDeltaScore);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f950 	bl	8000534 <__aeabi_ui2d>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	ec43 2b10 	vmov	d0, r2, r3
 800329c:	4911      	ldr	r1, [pc, #68]	; (80032e4 <serializeJSON+0xa8>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fe72 	bl	8002f88 <cJSON_AddNumberToObject>

	    char* temp = cJSON_PrintUnformatted(json);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff f829 	bl	80022fc <cJSON_PrintUnformatted>
 80032aa:	60b8      	str	r0, [r7, #8]
	    strncat (temp, "\n", 2);
 80032ac:	68b8      	ldr	r0, [r7, #8]
 80032ae:	f7fc ffa1 	bl	80001f4 <strlen>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	490b      	ldr	r1, [pc, #44]	; (80032e8 <serializeJSON+0xac>)
 80032bc:	461a      	mov	r2, r3
 80032be:	460b      	mov	r3, r1
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	8013      	strh	r3, [r2, #0]
	    strcpy(dst, temp);
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	f00a fb6d 	bl	800d9a6 <strcpy>
	    cJSON_Delete(json);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7fd ff55 	bl	800117c <cJSON_Delete>

	    return dst;
 80032d2:	683b      	ldr	r3, [r7, #0]


}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	08010fb4 	.word	0x08010fb4
 80032e0:	08010fbc 	.word	0x08010fbc
 80032e4:	08010fc4 	.word	0x08010fc4
 80032e8:	08010fcc 	.word	0x08010fcc

080032ec <select_rfid_channel>:
/* USER CODE BEGIN 0 */

/**
 * channel index is 1 indexed, 1-12
 */
uint8_t select_rfid_channel(uint8_t channel_index) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]

	if (channel_index < 1 || channel_index > 12) {
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <select_rfid_channel+0x16>
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d901      	bls.n	8003306 <select_rfid_channel+0x1a>
		return 1;  // Invalid switch index
 8003302:	2301      	movs	r3, #1
 8003304:	e0d1      	b.n	80034aa <select_rfid_channel+0x1be>
	}

	// Set U2.4
	uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
	if (channel_index <= 4) {
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d80e      	bhi.n	800332e <select_rfid_channel+0x42>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003316:	4867      	ldr	r0, [pc, #412]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003318:	f003 fd96 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003322:	4864      	ldr	r0, [pc, #400]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003324:	f003 fd90 	bl	8006e48 <HAL_GPIO_WritePin>
		switch_refdes = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e01f      	b.n	800336e <select_rfid_channel+0x82>
	} else if (channel_index <= 8) {
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d80e      	bhi.n	8003352 <select_rfid_channel+0x66>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003334:	2201      	movs	r2, #1
 8003336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800333a:	485e      	ldr	r0, [pc, #376]	; (80034b4 <select_rfid_channel+0x1c8>)
 800333c:	f003 fd84 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 8003340:	2201      	movs	r2, #1
 8003342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003346:	485b      	ldr	r0, [pc, #364]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003348:	f003 fd7e 	bl	8006e48 <HAL_GPIO_WritePin>
		switch_refdes = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e00d      	b.n	800336e <select_rfid_channel+0x82>
	} else { // if channel_index <= 12
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003358:	4856      	ldr	r0, [pc, #344]	; (80034b4 <select_rfid_channel+0x1c8>)
 800335a:	f003 fd75 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003364:	4853      	ldr	r0, [pc, #332]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003366:	f003 fd6f 	bl	8006e48 <HAL_GPIO_WritePin>
		switch_refdes = 3;
 800336a:	2303      	movs	r3, #3
 800336c:	73fb      	strb	r3, [r7, #15]
	}

	// The pattern on each 2nd layer switch is the same, use multiplexing
	uint8_t V0 = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	73bb      	strb	r3, [r7, #14]
	uint8_t V1 = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	737b      	strb	r3, [r7, #13]
	if (channel_index % 4 == 0) {  // 4, 8, 12
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <select_rfid_channel+0xa0>
		V0 = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	737b      	strb	r3, [r7, #13]
 800338a:	e019      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 1) {  // 1, 5, 9
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d104      	bne.n	80033a2 <select_rfid_channel+0xb6>
		V0 = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	737b      	strb	r3, [r7, #13]
 80033a0:	e00e      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 2) {  // 2, 6, 10
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d104      	bne.n	80033b8 <select_rfid_channel+0xcc>
		V0 = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	737b      	strb	r3, [r7, #13]
 80033b6:	e003      	b.n	80033c0 <select_rfid_channel+0xd4>
	} else {  // if channel_index % 4 == 3  // 3, 7, 11
		V0 = 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033bc:	2301      	movs	r3, #1
 80033be:	737b      	strb	r3, [r7, #13]
	}

	// The other switches' V0/V1 are don't care, but set them to 0 anyways
	switch (switch_refdes) {
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d04c      	beq.n	8003460 <select_rfid_channel+0x174>
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	dc6d      	bgt.n	80034a6 <select_rfid_channel+0x1ba>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <select_rfid_channel+0xe8>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d023      	beq.n	800341a <select_rfid_channel+0x12e>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
		break;
	default:
		break;
 80033d2:	e068      	b.n	80034a6 <select_rfid_channel+0x1ba>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	461a      	mov	r2, r3
 80033d8:	2104      	movs	r1, #4
 80033da:	4837      	ldr	r0, [pc, #220]	; (80034b8 <select_rfid_channel+0x1cc>)
 80033dc:	f003 fd34 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 80033e0:	7b7b      	ldrb	r3, [r7, #13]
 80033e2:	461a      	mov	r2, r3
 80033e4:	2102      	movs	r1, #2
 80033e6:	4834      	ldr	r0, [pc, #208]	; (80034b8 <select_rfid_channel+0x1cc>)
 80033e8:	f003 fd2e 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f2:	4830      	ldr	r0, [pc, #192]	; (80034b4 <select_rfid_channel+0x1c8>)
 80033f4:	f003 fd28 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fe:	482d      	ldr	r0, [pc, #180]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003400:	f003 fd22 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	482b      	ldr	r0, [pc, #172]	; (80034b8 <select_rfid_channel+0x1cc>)
 800340a:	f003 fd1d 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4829      	ldr	r0, [pc, #164]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003414:	f003 fd18 	bl	8006e48 <HAL_GPIO_WritePin>
		break;
 8003418:	e046      	b.n	80034a8 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2104      	movs	r1, #4
 800341e:	4826      	ldr	r0, [pc, #152]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003420:	f003 fd12 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2102      	movs	r1, #2
 8003428:	4823      	ldr	r0, [pc, #140]	; (80034b8 <select_rfid_channel+0x1cc>)
 800342a:	f003 fd0d 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	461a      	mov	r2, r3
 8003432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003436:	481f      	ldr	r0, [pc, #124]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003438:	f003 fd06 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003444:	481b      	ldr	r0, [pc, #108]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003446:	f003 fcff 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	481a      	ldr	r0, [pc, #104]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003450:	f003 fcfa 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	4817      	ldr	r0, [pc, #92]	; (80034b8 <select_rfid_channel+0x1cc>)
 800345a:	f003 fcf5 	bl	8006e48 <HAL_GPIO_WritePin>
		break;
 800345e:	e023      	b.n	80034a8 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2104      	movs	r1, #4
 8003464:	4814      	ldr	r0, [pc, #80]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003466:	f003 fcef 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2102      	movs	r1, #2
 800346e:	4812      	ldr	r0, [pc, #72]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003470:	f003 fcea 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800347a:	480e      	ldr	r0, [pc, #56]	; (80034b4 <select_rfid_channel+0x1c8>)
 800347c:	f003 fce4 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003486:	480b      	ldr	r0, [pc, #44]	; (80034b4 <select_rfid_channel+0x1c8>)
 8003488:	f003 fcde 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	461a      	mov	r2, r3
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	4809      	ldr	r0, [pc, #36]	; (80034b8 <select_rfid_channel+0x1cc>)
 8003494:	f003 fcd8 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8003498:	7b7b      	ldrb	r3, [r7, #13]
 800349a:	461a      	mov	r2, r3
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4806      	ldr	r0, [pc, #24]	; (80034b8 <select_rfid_channel+0x1cc>)
 80034a0:	f003 fcd2 	bl	8006e48 <HAL_GPIO_WritePin>
		break;
 80034a4:	e000      	b.n	80034a8 <select_rfid_channel+0x1bc>
		break;
 80034a6:	bf00      	nop
	}

	return 0;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	48000400 	.word	0x48000400
 80034b8:	48000800 	.word	0x48000800

080034bc <reader_irq_pulse>:

// UPDATE ALL THESE TO INCLUDE DELAYUNTIL or OSDELAY
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2110      	movs	r1, #16
 80034c4:	480b      	ldr	r0, [pc, #44]	; (80034f4 <reader_irq_pulse+0x38>)
 80034c6:	f003 fcbf 	bl	8006e48 <HAL_GPIO_WritePin>
	vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(1)); // delay 1 ms
 80034ca:	f008 fa79 	bl	800b9c0 <xTaskGetTickCount>
 80034ce:	4603      	mov	r3, r0
 80034d0:	3301      	adds	r3, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f008 f924 	bl	800b720 <vTaskDelay>
	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	2110      	movs	r1, #16
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <reader_irq_pulse+0x38>)
 80034de:	f003 fcb3 	bl	8006e48 <HAL_GPIO_WritePin>
	vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(100)); // delay 100 ms
 80034e2:	f008 fa6d 	bl	800b9c0 <xTaskGetTickCount>
 80034e6:	4603      	mov	r3, r0
 80034e8:	3364      	adds	r3, #100	; 0x64
 80034ea:	4618      	mov	r0, r3
 80034ec:	f008 f918 	bl	800b720 <vTaskDelay>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	48000800 	.word	0x48000800

080034f8 <reader_nss>:

void reader_nss(uint8_t enable) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN,
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	2110      	movs	r1, #16
 8003512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003516:	f003 fc97 	bl	8006e48 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4804      	ldr	r0, [pc, #16]	; (800354c <reader_tx+0x28>)
 800353a:	f004 ff52 	bl	80083e2 <HAL_SPI_Transmit>
 800353e:	4603      	mov	r3, r0
 8003540:	60fb      	str	r3, [r7, #12]
	return ret;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200002dc 	.word	0x200002dc

08003550 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b29a      	uxth	r2, r3
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <reader_rx+0x28>)
 8003566:	f005 f8aa 	bl	80086be <HAL_SPI_Receive>
 800356a:	4603      	mov	r3, r0
 800356c:	60fb      	str	r3, [r7, #12]
	return ret;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200002dc 	.word	0x200002dc

0800357c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
	if (pin == RFID_NIRQ_OUT_PIN) {
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d102      	bne.n	8003594 <HAL_GPIO_EXTI_Callback+0x18>
		reader_handler.irq_flag = 1;
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_GPIO_EXTI_Callback+0x24>)
 8003590:	2201      	movs	r2, #1
 8003592:	745a      	strb	r2, [r3, #17]
	}
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	200006fc 	.word	0x200006fc

080035a4 <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(uid[0])); // delay uid[0]
 80035ac:	f008 fa08 	bl	800b9c0 <xTaskGetTickCount>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4905      	ldr	r1, [pc, #20]	; (80035d8 <st25_card_callback+0x34>)
 80035c2:	fba1 1303 	umull	r1, r3, r1, r3
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	4413      	add	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f008 f8a8 	bl	800b720 <vTaskDelay>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	10624dd3 	.word	0x10624dd3

080035dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035e0:	f001 fd2a 	bl	8005038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e4:	f000 f8ba 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035e8:	f000 fa2e 	bl	8003a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80035ec:	f000 fa0e 	bl	8003a0c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035f0:	f000 f9dc 	bl	80039ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80035f4:	f000 f9aa 	bl	800394c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80035f8:	f000 f902 	bl	8003800 <MX_ADC1_Init>
  MX_SPI1_Init();
 80035fc:	f000 f968 	bl	80038d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_15693;
 8003600:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <main+0x118>)
 8003602:	2201      	movs	r2, #1
 8003604:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <main+0x118>)
 8003608:	2200      	movs	r2, #0
 800360a:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <main+0x118>)
 800360e:	2200      	movs	r2, #0
 8003610:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 8003612:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <main+0x118>)
 8003614:	2258      	movs	r2, #88	; 0x58
 8003616:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <main+0x118>)
 800361a:	22d1      	movs	r2, #209	; 0xd1
 800361c:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 800361e:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <main+0x118>)
 8003620:	2200      	movs	r2, #0
 8003622:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 8003624:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <main+0x118>)
 8003626:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <main+0x11c>)
 8003628:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 800362a:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <main+0x118>)
 800362c:	4a33      	ldr	r2, [pc, #204]	; (80036fc <main+0x120>)
 800362e:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 8003630:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <main+0x118>)
 8003632:	4a33      	ldr	r2, [pc, #204]	; (8003700 <main+0x124>)
 8003634:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <main+0x118>)
 8003638:	4a32      	ldr	r2, [pc, #200]	; (8003704 <main+0x128>)
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 800363c:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <main+0x118>)
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <main+0x12c>)
 8003640:	615a      	str	r2, [r3, #20]

  BeanBag_setup();
 8003642:	f000 fc6f 	bl	8003f24 <BeanBag_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003646:	f006 fc13 	bl	8009e70 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BluetoothRX */
  BluetoothRXHandle = osSemaphoreNew(1, 1, &BluetoothRX_attributes);
 800364a:	4a30      	ldr	r2, [pc, #192]	; (800370c <main+0x130>)
 800364c:	2101      	movs	r1, #1
 800364e:	2001      	movs	r0, #1
 8003650:	f006 fcea 	bl	800a028 <osSemaphoreNew>
 8003654:	4603      	mov	r3, r0
 8003656:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <main+0x134>)
 8003658:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800365a:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <main+0x138>)
 800365c:	2100      	movs	r1, #0
 800365e:	482e      	ldr	r0, [pc, #184]	; (8003718 <main+0x13c>)
 8003660:	f006 fc50 	bl	8009f04 <osThreadNew>
 8003664:	4603      	mov	r3, r0
 8003666:	4a2d      	ldr	r2, [pc, #180]	; (800371c <main+0x140>)
 8003668:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <main+0x144>)
 800366c:	2100      	movs	r1, #0
 800366e:	482d      	ldr	r0, [pc, #180]	; (8003724 <main+0x148>)
 8003670:	f006 fc48 	bl	8009f04 <osThreadNew>
 8003674:	4603      	mov	r3, r0
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <main+0x14c>)
 8003678:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothRXTask */
  BluetoothRXTaskHandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothRXTask_attributes);
 800367a:	4a2c      	ldr	r2, [pc, #176]	; (800372c <main+0x150>)
 800367c:	2100      	movs	r1, #0
 800367e:	482c      	ldr	r0, [pc, #176]	; (8003730 <main+0x154>)
 8003680:	f006 fc40 	bl	8009f04 <osThreadNew>
 8003684:	4603      	mov	r3, r0
 8003686:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <main+0x158>)
 8003688:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <main+0x15c>)
 800368c:	2100      	movs	r1, #0
 800368e:	482b      	ldr	r0, [pc, #172]	; (800373c <main+0x160>)
 8003690:	f006 fc38 	bl	8009f04 <osThreadNew>
 8003694:	4603      	mov	r3, r0
 8003696:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <main+0x164>)
 8003698:	6013      	str	r3, [r2, #0]

  /* creation of broadcastTask */
  broadcastTaskHandle = osThreadNew(StartBroadcastTask, NULL, &broadcastTask_attributes);
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <main+0x168>)
 800369c:	2100      	movs	r1, #0
 800369e:	482a      	ldr	r0, [pc, #168]	; (8003748 <main+0x16c>)
 80036a0:	f006 fc30 	bl	8009f04 <osThreadNew>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <main+0x170>)
 80036a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */

	if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 80036aa:	2102      	movs	r1, #2
 80036ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b0:	f003 fbb2 	bl	8006e18 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d103      	bne.n	80036c2 <main+0xe6>
		CBU_ID[3] = '1';
 80036ba:	4b25      	ldr	r3, [pc, #148]	; (8003750 <main+0x174>)
 80036bc:	2231      	movs	r2, #49	; 0x31
 80036be:	70da      	strb	r2, [r3, #3]
 80036c0:	e002      	b.n	80036c8 <main+0xec>
	} else {
		CBU_ID[3] = '0';
 80036c2:	4b23      	ldr	r3, [pc, #140]	; (8003750 <main+0x174>)
 80036c4:	2230      	movs	r2, #48	; 0x30
 80036c6:	70da      	strb	r2, [r3, #3]
	}

	ble.huart = &huart1;
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <main+0x178>)
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <main+0x17c>)
 80036cc:	601a      	str	r2, [r3, #0]
	ble.cs_base = BLE_CS_PORT;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <main+0x178>)
 80036d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80036d4:	605a      	str	r2, [r3, #4]
	ble.cs_pin = BLE_CS_PIN;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <main+0x178>)
 80036d8:	2201      	movs	r2, #1
 80036da:	811a      	strh	r2, [r3, #8]
	ble.name = CBU_ID;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <main+0x178>)
 80036de:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <main+0x174>)
 80036e0:	60da      	str	r2, [r3, #12]
	ble.mutex = &BluetoothRXHandle;
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <main+0x178>)
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <main+0x134>)
 80036e6:	611a      	str	r2, [r3, #16]
//	st25r95_calibrate(&reader_handler);

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80036e8:	f006 fbe6 	bl	8009eb8 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		RFID_readArray(&reader_handler);
 80036ec:	4801      	ldr	r0, [pc, #4]	; (80036f4 <main+0x118>)
 80036ee:	f000 fbb3 	bl	8003e58 <RFID_readArray>
 80036f2:	e7fb      	b.n	80036ec <main+0x110>
 80036f4:	200006fc 	.word	0x200006fc
 80036f8:	080034f9 	.word	0x080034f9
 80036fc:	08003525 	.word	0x08003525
 8003700:	08003551 	.word	0x08003551
 8003704:	080034bd 	.word	0x080034bd
 8003708:	080035a5 	.word	0x080035a5
 800370c:	08011134 	.word	0x08011134
 8003710:	200004bc 	.word	0x200004bc
 8003714:	08011080 	.word	0x08011080
 8003718:	08003b99 	.word	0x08003b99
 800371c:	200004a8 	.word	0x200004a8
 8003720:	080110a4 	.word	0x080110a4
 8003724:	08003c35 	.word	0x08003c35
 8003728:	200004ac 	.word	0x200004ac
 800372c:	080110c8 	.word	0x080110c8
 8003730:	08003ca5 	.word	0x08003ca5
 8003734:	200004b0 	.word	0x200004b0
 8003738:	080110ec 	.word	0x080110ec
 800373c:	08003cf9 	.word	0x08003cf9
 8003740:	200004b4 	.word	0x200004b4
 8003744:	08011110 	.word	0x08011110
 8003748:	08003dbd 	.word	0x08003dbd
 800374c:	200004b8 	.word	0x200004b8
 8003750:	2000000c 	.word	0x2000000c
 8003754:	200004cc 	.word	0x200004cc
 8003758:	20000340 	.word	0x20000340

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b096      	sub	sp, #88	; 0x58
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	2244      	movs	r2, #68	; 0x44
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f009 ff20 	bl	800d5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003770:	463b      	mov	r3, r7
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800377e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003782:	f003 fb9f 	bl	8006ec4 <HAL_PWREx_ControlVoltageScaling>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800378c:	f000 fb30 	bl	8003df0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003790:	2302      	movs	r3, #2
 8003792:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379e:	2302      	movs	r3, #2
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037a2:	2302      	movs	r3, #2
 80037a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80037aa:	230a      	movs	r3, #10
 80037ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037ae:	2307      	movs	r3, #7
 80037b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037b6:	2302      	movs	r3, #2
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fbd6 	bl	8006f70 <HAL_RCC_OscConfig>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80037ca:	f000 fb11 	bl	8003df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ce:	230f      	movs	r3, #15
 80037d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d2:	2303      	movs	r3, #3
 80037d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	2104      	movs	r1, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 ffd6 	bl	8007798 <HAL_RCC_ClockConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037f2:	f000 fafd 	bl	8003df0 <Error_Handler>
  }
}
 80037f6:	bf00      	nop
 80037f8:	3758      	adds	r7, #88	; 0x58
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003806:	463b      	mov	r3, r7
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
 8003814:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <MX_ADC1_Init+0xc8>)
 800381a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800381e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8003822:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800382c:	2200      	movs	r2, #0
 800382e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003838:	2204      	movs	r2, #4
 800383a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800383e:	2200      	movs	r2, #0
 8003840:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003844:	2201      	movs	r2, #1
 8003846:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800384a:	2201      	movs	r2, #1
 800384c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003858:	2200      	movs	r2, #0
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800385e:	2200      	movs	r2, #0
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800386c:	2200      	movs	r2, #0
 800386e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <MX_ADC1_Init+0xc4>)
 800387a:	2204      	movs	r2, #4
 800387c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800387e:	4811      	ldr	r0, [pc, #68]	; (80038c4 <MX_ADC1_Init+0xc4>)
 8003880:	f001 fe56 	bl	8005530 <HAL_ADC_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800388a:	f000 fab1 	bl	8003df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_ADC1_Init+0xcc>)
 8003890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003892:	2306      	movs	r3, #6
 8003894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800389a:	237f      	movs	r3, #127	; 0x7f
 800389c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800389e:	2304      	movs	r3, #4
 80038a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a6:	463b      	mov	r3, r7
 80038a8:	4619      	mov	r1, r3
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <MX_ADC1_Init+0xc4>)
 80038ac:	f002 f82e 	bl	800590c <HAL_ADC_ConfigChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80038b6:	f000 fa9b 	bl	8003df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000022c 	.word	0x2000022c
 80038c8:	50040000 	.word	0x50040000
 80038cc:	cb840000 	.word	0xcb840000

080038d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <MX_SPI1_Init+0x74>)
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <MX_SPI1_Init+0x78>)
 80038d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_SPI1_Init+0x74>)
 80038dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <MX_SPI1_Init+0x74>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <MX_SPI1_Init+0x74>)
 80038ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <MX_SPI1_Init+0x74>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <MX_SPI1_Init+0x74>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <MX_SPI1_Init+0x74>)
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <MX_SPI1_Init+0x74>)
 8003906:	2230      	movs	r2, #48	; 0x30
 8003908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800390a:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <MX_SPI1_Init+0x74>)
 800390c:	2200      	movs	r2, #0
 800390e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <MX_SPI1_Init+0x74>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <MX_SPI1_Init+0x74>)
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <MX_SPI1_Init+0x74>)
 800391e:	2207      	movs	r2, #7
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <MX_SPI1_Init+0x74>)
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <MX_SPI1_Init+0x74>)
 800392a:	2208      	movs	r2, #8
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800392e:	4805      	ldr	r0, [pc, #20]	; (8003944 <MX_SPI1_Init+0x74>)
 8003930:	f004 fcb4 	bl	800829c <HAL_SPI_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800393a:	f000 fa59 	bl	8003df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200002dc 	.word	0x200002dc
 8003948:	40013000 	.word	0x40013000

0800394c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <MX_USART1_UART_Init+0x5c>)
 8003954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800395c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003966:	2200      	movs	r2, #0
 8003968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003972:	220c      	movs	r2, #12
 8003974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003984:	2200      	movs	r2, #0
 8003986:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800398e:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_USART1_UART_Init+0x58>)
 8003990:	f005 fb94 	bl	80090bc <HAL_UART_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800399a:	f000 fa29 	bl	8003df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000340 	.word	0x20000340
 80039a8:	40013800 	.word	0x40013800

080039ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <MX_USART2_UART_Init+0x5c>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039f0:	f005 fb64 	bl	80090bc <HAL_UART_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039fa:	f000 f9f9 	bl	8003df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200003f4 	.word	0x200003f4
 8003a08:	40004400 	.word	0x40004400

08003a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <MX_DMA_Init+0x38>)
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <MX_DMA_Init+0x38>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6493      	str	r3, [r2, #72]	; 0x48
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <MX_DMA_Init+0x38>)
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2105      	movs	r1, #5
 8003a2e:	200b      	movs	r0, #11
 8003a30:	f002 fe49 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a34:	200b      	movs	r0, #11
 8003a36:	f002 fe62 	bl	80066fe <HAL_NVIC_EnableIRQ>

}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000

08003a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a82:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	4a3e      	ldr	r2, [pc, #248]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <MX_GPIO_Init+0x144>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	21d6      	movs	r1, #214	; 0xd6
 8003aaa:	4839      	ldr	r0, [pc, #228]	; (8003b90 <MX_GPIO_Init+0x148>)
 8003aac:	f003 f9cc 	bl	8006e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2110      	movs	r1, #16
 8003ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab8:	f003 f9c6 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003abc:	2200      	movs	r2, #0
 8003abe:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8003ac2:	4834      	ldr	r0, [pc, #208]	; (8003b94 <MX_GPIO_Init+0x14c>)
 8003ac4:	f003 f9c0 	bl	8006e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ace:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	4619      	mov	r1, r3
 8003ade:	482c      	ldr	r0, [pc, #176]	; (8003b90 <MX_GPIO_Init+0x148>)
 8003ae0:	f003 f820 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8003ae4:	23c6      	movs	r3, #198	; 0xc6
 8003ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af4:	f107 030c 	add.w	r3, r7, #12
 8003af8:	4619      	mov	r1, r3
 8003afa:	4825      	ldr	r0, [pc, #148]	; (8003b90 <MX_GPIO_Init+0x148>)
 8003afc:	f003 f812 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 8003b00:	2310      	movs	r3, #16
 8003b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1a:	f003 f803 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 8003b1e:	2310      	movs	r3, #16
 8003b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b22:	2301      	movs	r3, #1
 8003b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b26:	2301      	movs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	4619      	mov	r1, r3
 8003b34:	4816      	ldr	r0, [pc, #88]	; (8003b90 <MX_GPIO_Init+0x148>)
 8003b36:	f002 fff5 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b3a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003b3e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b40:	2301      	movs	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	4619      	mov	r1, r3
 8003b52:	4810      	ldr	r0, [pc, #64]	; (8003b94 <MX_GPIO_Init+0x14c>)
 8003b54:	f002 ffe6 	bl	8006b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8003b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b64:	2301      	movs	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4809      	ldr	r0, [pc, #36]	; (8003b94 <MX_GPIO_Init+0x14c>)
 8003b70:	f002 ffd8 	bl	8006b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2105      	movs	r1, #5
 8003b78:	2028      	movs	r0, #40	; 0x28
 8003b7a:	f002 fda4 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b7e:	2028      	movs	r0, #40	; 0x28
 8003b80:	f002 fdbd 	bl	80066fe <HAL_NVIC_EnableIRQ>

}
 8003b84:	bf00      	nop
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	48000800 	.word	0x48000800
 8003b94:	48000400 	.word	0x48000400

08003b98 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba4:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003ba6:	f007 ff0b 	bl	800b9c0 <xTaskGetTickCount>
 8003baa:	4603      	mov	r3, r0
 8003bac:	60fb      	str	r3, [r7, #12]

	int ret;
	int count = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
	memset(rx_buffer, 0, RX_BUFF_SIZE);
 8003bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4818      	ldr	r0, [pc, #96]	; (8003c1c <StartDefaultTask+0x84>)
 8003bba:	f009 fcf9 	bl	800d5b0 <memset>
	char *json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <StartDefaultTask+0x88>)
 8003bc0:	617b      	str	r3, [r7, #20]

	for (;;) {
//		ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 5000); // Sending in normal mode
		ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 500); // Sending in normal mode
 8003bc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bca:	4914      	ldr	r1, [pc, #80]	; (8003c1c <StartDefaultTask+0x84>)
 8003bcc:	4815      	ldr	r0, [pc, #84]	; (8003c24 <StartDefaultTask+0x8c>)
 8003bce:	f005 fb67 	bl	80092a0 <HAL_UART_Receive>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	613b      	str	r3, [r7, #16]

		if (ret == HAL_OK) {
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d118      	bne.n	8003c0e <StartDefaultTask+0x76>
			// deserialize packet
			deserializeJSON((char*) rx_buffer, &gameInfo);
 8003bdc:	4912      	ldr	r1, [pc, #72]	; (8003c28 <StartDefaultTask+0x90>)
 8003bde:	480f      	ldr	r0, [pc, #60]	; (8003c1c <StartDefaultTask+0x84>)
 8003be0:	f7ff fa98 	bl	8003114 <deserializeJSON>
			// send reply packet
			broadcastPacket.redDeltaScore = 2;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <StartDefaultTask+0x94>)
 8003be6:	2202      	movs	r2, #2
 8003be8:	605a      	str	r2, [r3, #4]
			broadcastPacket.blueDeltaScore = 2;
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <StartDefaultTask+0x94>)
 8003bec:	2202      	movs	r2, #2
 8003bee:	609a      	str	r2, [r3, #8]
			serializeJSON(&broadcastPacket, (char*) tx_buffer);
 8003bf0:	490f      	ldr	r1, [pc, #60]	; (8003c30 <StartDefaultTask+0x98>)
 8003bf2:	480e      	ldr	r0, [pc, #56]	; (8003c2c <StartDefaultTask+0x94>)
 8003bf4:	f7ff fb22 	bl	800323c <serializeJSON>
			HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer, strlen(tx_buffer),
 8003bf8:	480d      	ldr	r0, [pc, #52]	; (8003c30 <StartDefaultTask+0x98>)
 8003bfa:	f7fc fafb 	bl	80001f4 <strlen>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <StartDefaultTask+0x98>)
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <StartDefaultTask+0x8c>)
 8003c0a:	f005 fab5 	bl	8009178 <HAL_UART_Transmit>
					5000);
		}
		vTaskDelayUntil(&xLastWakeTime, period);
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f007 fd05 	bl	800b624 <vTaskDelayUntil>
		ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 500); // Sending in normal mode
 8003c1a:	e7d2      	b.n	8003bc2 <StartDefaultTask+0x2a>
 8003c1c:	200004e8 	.word	0x200004e8
 8003c20:	08011028 	.word	0x08011028
 8003c24:	20000340 	.word	0x20000340
 8003c28:	200006e8 	.word	0x200006e8
 8003c2c:	200004c0 	.word	0x200004c0
 8003c30:	200005e8 	.word	0x200005e8

08003c34 <StartRFIDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */
	st25r95_init((st25r95_handle *)&reader_handler);
 8003c3c:	4817      	ldr	r0, [pc, #92]	; (8003c9c <StartRFIDTask+0x68>)
 8003c3e:	f000 faef 	bl	8004220 <st25r95_init>
	st25r95_calibrate((st25r95_handle *)&reader_handler);
 8003c42:	4816      	ldr	r0, [pc, #88]	; (8003c9c <StartRFIDTask+0x68>)
 8003c44:	f000 fe62 	bl	800490c <st25r95_calibrate>

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 8003c48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c4c:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8003c4e:	f007 feb7 	bl	800b9c0 <xTaskGetTickCount>
 8003c52:	4603      	mov	r3, r0
 8003c54:	613b      	str	r3, [r7, #16]

	uint8_t redRawScore = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
	uint8_t blueRawScore = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73bb      	strb	r3, [r7, #14]

	/* Infinite loop */
	for (;;)
	// osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
			{
		RFID_readArray(&reader_handler);
 8003c5e:	480f      	ldr	r0, [pc, #60]	; (8003c9c <StartRFIDTask+0x68>)
 8003c60:	f000 f8fa 	bl	8003e58 <RFID_readArray>

		calculateRawScore(&redRawScore, false);
 8003c64:	f107 030f 	add.w	r3, r7, #15
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f8c6 	bl	8003dfc <calculateRawScore>
		calculateRawScore(&blueRawScore, true); // true to move BagStatus pointer to the Blue section
 8003c70:	f107 030e 	add.w	r3, r7, #14
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f8c0 	bl	8003dfc <calculateRawScore>

		broadcastPacket.redDeltaScore = redRawScore;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <StartRFIDTask+0x6c>)
 8003c82:	605a      	str	r2, [r3, #4]
		broadcastPacket.blueDeltaScore = blueRawScore;
 8003c84:	7bbb      	ldrb	r3, [r7, #14]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <StartRFIDTask+0x6c>)
 8003c8a:	609a      	str	r2, [r3, #8]

//		broadcast(tx_buf, (uint32_t) 2, &ble);

		vTaskDelayUntil(&xLastWakeTime, period);
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f007 fcc6 	bl	800b624 <vTaskDelayUntil>
		RFID_readArray(&reader_handler);
 8003c98:	e7e1      	b.n	8003c5e <StartRFIDTask+0x2a>
 8003c9a:	bf00      	nop
 8003c9c:	200006fc 	.word	0x200006fc
 8003ca0:	200004c0 	.word	0x200004c0

08003ca4 <StartBluetoothTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBluetoothTask */

	uint32_t size = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <StartBluetoothTask+0x40>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f006 fa3f 	bl	800a13c <osSemaphoreAcquire>

		if (gameInfo.end_of_round) { //TODO: verify we only want to send at end of round
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <StartBluetoothTask+0x44>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f4      	beq.n	8003cb0 <StartBluetoothTask+0xc>
			// Alternatively, we could have an extra element in the JSON like a boolean so whenever it isnt set, we know only to care about the battery voltage
			for (uint32_t i = 0; i < 300; i++) {
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e006      	b.n	8003cda <StartBluetoothTask+0x36>
				serializeJSON(&broadcastPacket, tx_buffer);
 8003ccc:	4907      	ldr	r1, [pc, #28]	; (8003cec <StartBluetoothTask+0x48>)
 8003cce:	4808      	ldr	r0, [pc, #32]	; (8003cf0 <StartBluetoothTask+0x4c>)
 8003cd0:	f7ff fab4 	bl	800323c <serializeJSON>
			for (uint32_t i = 0; i < 300; i++) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003ce0:	d3f4      	bcc.n	8003ccc <StartBluetoothTask+0x28>
		osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003ce2:	e7e5      	b.n	8003cb0 <StartBluetoothTask+0xc>
 8003ce4:	200004bc 	.word	0x200004bc
 8003ce8:	200006e8 	.word	0x200006e8
 8003cec:	200005e8 	.word	0x200005e8
 8003cf0:	200004c0 	.word	0x200004c0
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <StartBatteryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8003d00:	f247 5330 	movw	r3, #30000	; 0x7530
 8003d04:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003d06:	f007 fe5b 	bl	800b9c0 <xTaskGetTickCount>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	617b      	str	r3, [r7, #20]

	uint32_t rawVBat = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
	float VBat = 0.0;
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
	uint32_t VBat_conv = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003d1c:	217f      	movs	r1, #127	; 0x7f
 8003d1e:	4824      	ldr	r0, [pc, #144]	; (8003db0 <StartBatteryTask+0xb8>)
 8003d20:	f002 fb96 	bl	8006450 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &rawVBat, 1);
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4820      	ldr	r0, [pc, #128]	; (8003db0 <StartBatteryTask+0xb8>)
 8003d2e:	f001 fd4b 	bl	80057c8 <HAL_ADC_Start_DMA>
	uint8_t tx_buf[4];

	/* Infinite loop */
	for (;;) {

		VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d44:	ee17 0a90 	vmov	r0, s15
 8003d48:	f7fc fc16 	bl	8000578 <__aeabi_f2d>
 8003d4c:	a316      	add	r3, pc, #88	; (adr r3, 8003da8 <StartBatteryTask+0xb0>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fc69 	bl	8000628 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <StartBatteryTask+0xbc>)
 8003d64:	f7fc fd8a 	bl	800087c <__aeabi_ddiv>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7fc ff52 	bl	8000c18 <__aeabi_d2f>
 8003d74:	4603      	mov	r3, r0
 8003d76:	60fb      	str	r3, [r7, #12]
		VBat_conv = *((uint32_t*) &VBat);
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
		tx_buf[0] = VBat_conv & 0xFF000000;
 8003d80:	2300      	movs	r3, #0
 8003d82:	723b      	strb	r3, [r7, #8]
		tx_buf[1] = VBat_conv & 0x00FF0000;
 8003d84:	2300      	movs	r3, #0
 8003d86:	727b      	strb	r3, [r7, #9]
		tx_buf[2] = VBat_conv & 0x0000FF00;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	72bb      	strb	r3, [r7, #10]
		tx_buf[3] = VBat_conv & 0x000000FF;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	72fb      	strb	r3, [r7, #11]

		broadcastPacket.batteryVoltage = tx_buf;
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <StartBatteryTask+0xc0>)
 8003d98:	6013      	str	r3, [r2, #0]
//	  broadcast(tx_buf, (uint32_t) 4, &ble);

		vTaskDelayUntil(&xLastWakeTime, period);
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	69f9      	ldr	r1, [r7, #28]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f007 fc3f 	bl	800b624 <vTaskDelayUntil>
		VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003da6:	e7c4      	b.n	8003d32 <StartBatteryTask+0x3a>
 8003da8:	66666666 	.word	0x66666666
 8003dac:	400a6666 	.word	0x400a6666
 8003db0:	2000022c 	.word	0x2000022c
 8003db4:	40b00000 	.word	0x40b00000
 8003db8:	200004c0 	.word	0x200004c0

08003dbc <StartBroadcastTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBroadcastTask */
void StartBroadcastTask(void *argument)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBroadcastTask */
	/* Infinite loop */
	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc8:	617b      	str	r3, [r7, #20]

	memset(rx_buffer, 0, RX_BUFF_SIZE);
 8003dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4805      	ldr	r0, [pc, #20]	; (8003de8 <StartBroadcastTask+0x2c>)
 8003dd2:	f009 fbed 	bl	800d5b0 <memset>
	char *json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <StartBroadcastTask+0x30>)
 8003dd8:	613b      	str	r3, [r7, #16]

	//  char* json_string = "ICE SPICE";
	for (;;) {

//		HAL_UART_Transmit(&huart1,(uint8_t*)json_string, strlen(json_string),5000);
		vTaskDelayUntil(&xLastWakeTime, period);
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f007 fc1f 	bl	800b624 <vTaskDelayUntil>
 8003de6:	e7f8      	b.n	8003dda <StartBroadcastTask+0x1e>
 8003de8:	200004e8 	.word	0x200004e8
 8003dec:	08011028 	.word	0x08011028

08003df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003df4:	b672      	cpsid	i
}
 8003df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003df8:	e7fe      	b.n	8003df8 <Error_Handler+0x8>
	...

08003dfc <calculateRawScore>:

extern uint8_t select_rfid_channel(uint8_t channel_index);

static const uint8_t UID_ZERO_CMP[UID_SIZE]; // auto-initialized to zero TODO test lol

void calculateRawScore(uint8_t* teamRawScore, bool isBlue) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <calculateRawScore+0x58>)
 8003e0a:	60fb      	str	r3, [r7, #12]

	// Shift pointer to blue section of array
	if (isBlue) bag_p += 4;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <calculateRawScore+0x1c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3304      	adds	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]

	// Score count routine
	for (int i = 0; i < 4; ++i) {
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	e00c      	b.n	8003e3e <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	440b      	add	r3, r1
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	ddef      	ble.n	8003e24 <calculateRawScore+0x28>
	}

}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000868 	.word	0x20000868

08003e58 <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(st25r95_handle *handler) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

	BeanBag_clearDetected();
 8003e60:	f000 f866 	bl	8003f30 <BeanBag_clearDetected>

	for(uint8_t ant_number = 1; ant_number < 12; ant_number++){
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
 8003e68:	e04b      	b.n	8003f02 <RFID_readArray+0xaa>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	4a29      	ldr	r2, [pc, #164]	; (8003f14 <RFID_readArray+0xbc>)
 8003e70:	5cd3      	ldrb	r3, [r2, r3]
 8003e72:	f083 0301 	eor.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d13e      	bne.n	8003efa <RFID_readArray+0xa2>

//		st25r95_off(handler);
		select_rfid_channel(ant_number);
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fa34 	bl	80032ec <select_rfid_channel>

		TickType_t startTick = xTaskGetTickCount();
 8003e84:	f007 fd9c 	bl	800b9c0 <xTaskGetTickCount>
 8003e88:	6138      	str	r0, [r7, #16]

		st25r95_idle(handler);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fce8 	bl	8004860 <st25r95_idle>
		while ( xTaskGetTickCount() < startTick + pdMS_TO_TICKS(READ_LENGTH) ) {
 8003e90:	e02a      	b.n	8003ee8 <RFID_readArray+0x90>
			memset(handler->uid, 0, sizeof(handler->uid)); // clear uid
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3307      	adds	r3, #7
 8003e96:	220a      	movs	r2, #10
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f009 fb88 	bl	800d5b0 <memset>
			st25r95_service(handler);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f919 	bl	80040d8 <st25r95_service>

			if ( memcmp(handler->uid, UID_ZERO_CMP, sizeof(handler->uid)) ) { // non-zero uid
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	220a      	movs	r2, #10
 8003eac:	491a      	ldr	r1, [pc, #104]	; (8003f18 <RFID_readArray+0xc0>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f009 fb60 	bl	800d574 <memcmp>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <RFID_readArray+0x90>
				int bag_number = BeanBag_findIDinArray(handler);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f858 	bl	8003f70 <BeanBag_findIDinArray>
 8003ec0:	60f8      	str	r0, [r7, #12]

				if (bag_number == -1) continue; // UID not found
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d100      	bne.n	8003ecc <RFID_readArray+0x74>
 8003eca:	e00d      	b.n	8003ee8 <RFID_readArray+0x90>
				else if (bag_number == -2) continue; // Bag already scanned
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f113 0f02 	cmn.w	r3, #2
 8003ed2:	d100      	bne.n	8003ed6 <RFID_readArray+0x7e>
 8003ed4:	e008      	b.n	8003ee8 <RFID_readArray+0x90>

				BagStatus[bag_number] = ANT_POINTS_MAP[ant_number - 1];
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <RFID_readArray+0xc4>)
 8003edc:	5cd1      	ldrb	r1, [r2, r3]
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <RFID_readArray+0xc8>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	701a      	strb	r2, [r3, #0]
		while ( xTaskGetTickCount() < startTick + pdMS_TO_TICKS(READ_LENGTH) ) {
 8003ee8:	f007 fd6a 	bl	800b9c0 <xTaskGetTickCount>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3cc      	bcc.n	8003e92 <RFID_readArray+0x3a>
 8003ef8:	e000      	b.n	8003efc <RFID_readArray+0xa4>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003efa:	bf00      	nop
	for(uint8_t ant_number = 1; ant_number < 12; ant_number++){
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	3301      	adds	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b0b      	cmp	r3, #11
 8003f06:	d9b0      	bls.n	8003e6a <RFID_readArray+0x12>
			}
		}
	}
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	08011144 	.word	0x08011144
 8003f18:	0801115c 	.word	0x0801115c
 8003f1c:	08011150 	.word	0x08011150
 8003f20:	20000868 	.word	0x20000868

08003f24 <BeanBag_setup>:

void BeanBag_setup(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0

	BeanBag_clearDetected();
 8003f28:	f000 f802 	bl	8003f30 <BeanBag_clearDetected>

}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <BeanBag_clearDetected>:

void BeanBag_clearDetected(void) {
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_BAGS; ++i) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e00c      	b.n	8003f56 <BeanBag_clearDetected+0x26>
		BagInfo[i].detected = false;
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <BeanBag_clearDetected+0x3c>)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	3320      	adds	r3, #32
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BAGS; ++i) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3301      	adds	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b07      	cmp	r3, #7
 8003f5a:	ddef      	ble.n	8003f3c <BeanBag_clearDetected+0xc>
	}
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000728 	.word	0x20000728

08003f70 <BeanBag_findIDinArray>:

int BeanBag_findIDinArray(st25r95_handle *handler) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

	uint64_t uid = 0;
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memcpy(&uid, handler->uid, 8);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1dd9      	adds	r1, r3, #7
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f009 fb00 	bl	800d594 <memcpy>

	int bag_number = -1;
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295
 8003f98:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < NUM_BAGS; ++i) {
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e044      	b.n	800402a <BeanBag_findIDinArray+0xba>
		if (uid == BagInfo[i].uid1 || uid == BagInfo[i].uid2 || uid == BagInfo[i].uid3 || uid == BagInfo[i].uid4) {
 8003fa0:	4935      	ldr	r1, [pc, #212]	; (8004078 <BeanBag_findIDinArray+0x108>)
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	bf08      	it	eq
 8003fba:	4290      	cmpeq	r0, r2
 8003fbc:	d02f      	beq.n	800401e <BeanBag_findIDinArray+0xae>
 8003fbe:	492e      	ldr	r1, [pc, #184]	; (8004078 <BeanBag_findIDinArray+0x108>)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3308      	adds	r3, #8
 8003fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	bf08      	it	eq
 8003fda:	4290      	cmpeq	r0, r2
 8003fdc:	d01f      	beq.n	800401e <BeanBag_findIDinArray+0xae>
 8003fde:	4926      	ldr	r1, [pc, #152]	; (8004078 <BeanBag_findIDinArray+0x108>)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	3310      	adds	r3, #16
 8003fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	bf08      	it	eq
 8003ffa:	4290      	cmpeq	r0, r2
 8003ffc:	d00f      	beq.n	800401e <BeanBag_findIDinArray+0xae>
 8003ffe:	491e      	ldr	r1, [pc, #120]	; (8004078 <BeanBag_findIDinArray+0x108>)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	3318      	adds	r3, #24
 800400e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004016:	4299      	cmp	r1, r3
 8004018:	bf08      	it	eq
 800401a:	4290      	cmpeq	r0, r2
 800401c:	d102      	bne.n	8004024 <BeanBag_findIDinArray+0xb4>
			bag_number = i;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	617b      	str	r3, [r7, #20]
			break;
 8004022:	e005      	b.n	8004030 <BeanBag_findIDinArray+0xc0>
	for (int i = 0; i < NUM_BAGS; ++i) {
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3301      	adds	r3, #1
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b07      	cmp	r3, #7
 800402e:	ddb7      	ble.n	8003fa0 <BeanBag_findIDinArray+0x30>
		}
	}

	if (bag_number == -1) { // UID not mapped to a bag
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d102      	bne.n	800403e <BeanBag_findIDinArray+0xce>
		return -1;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	e018      	b.n	8004070 <BeanBag_findIDinArray+0x100>

	} else if (BagInfo[bag_number].detected) { // return bag already detected status code
 800403e:	490e      	ldr	r1, [pc, #56]	; (8004078 <BeanBag_findIDinArray+0x108>)
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	440b      	add	r3, r1
 800404c:	3320      	adds	r3, #32
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <BeanBag_findIDinArray+0xea>
		return -2;
 8004054:	f06f 0301 	mvn.w	r3, #1
 8004058:	e00a      	b.n	8004070 <BeanBag_findIDinArray+0x100>

	} else { // valid UID, not already detected
		BagInfo[bag_number].detected = true;
 800405a:	4907      	ldr	r1, [pc, #28]	; (8004078 <BeanBag_findIDinArray+0x108>)
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	3320      	adds	r3, #32
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
		return bag_number;
 800406e:	697b      	ldr	r3, [r7, #20]
	}

}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000728 	.word	0x20000728

0800407c <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <st25r95_spi_tx+0x24>)
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	4611      	mov	r1, r2
 800408e:	4805      	ldr	r0, [pc, #20]	; (80040a4 <st25r95_spi_tx+0x28>)
 8004090:	4798      	blx	r3
  tx_len = 0;
 8004092:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <st25r95_spi_tx+0x24>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000970 	.word	0x20000970
 80040a4:	20000870 	.word	0x20000870

080040a8 <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <st25r95_spi_byte+0x28>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80040ba:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <st25r95_spi_byte+0x2c>)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ffdb 	bl	800407c <st25r95_spi_tx>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000970 	.word	0x20000970
 80040d4:	20000870 	.word	0x20000870

080040d8 <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7c5b      	ldrb	r3, [r3, #17]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d153      	bne.n	8004192 <st25r95_service+0xba>
    handler->irq_flag = 0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	745a      	strb	r2, [r3, #17]
    if (handler->state == ST25_STATE_IDLE) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d14c      	bne.n	8004192 <st25r95_service+0xba>
      st25r95_init(handler);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f891 	bl	8004220 <st25r95_init>
      if (handler->protocol == ST25_PROTOCOL_14443A
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d11c      	bne.n	8004140 <st25r95_service+0x68>
    		  && st25r95_14443A_detect(handler)) {
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9e6 	bl	80044d8 <st25r95_14443A_detect>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <st25r95_service+0x68>
        handler->callback(handler->uid);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	3207      	adds	r2, #7
 800411a:	4610      	mov	r0, r2
 800411c:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 800411e:	2201      	movs	r2, #1
 8004120:	2110      	movs	r1, #16
 8004122:	481e      	ldr	r0, [pc, #120]	; (800419c <st25r95_service+0xc4>)
 8004124:	f002 fe90 	bl	8006e48 <HAL_GPIO_WritePin>
        for(volatile i=0;i<10000; ++i);
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e002      	b.n	8004134 <st25r95_service+0x5c>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f242 720f 	movw	r2, #9999	; 0x270f
 800413a:	4293      	cmp	r3, r2
 800413c:	ddf7      	ble.n	800412e <st25r95_service+0x56>
    		  && st25r95_14443A_detect(handler)) {
 800413e:	e025      	b.n	800418c <st25r95_service+0xb4>
      }
      else if (handler->protocol == ST25_PROTOCOL_15693
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11c      	bne.n	8004182 <st25r95_service+0xaa>
    		  && st25r95_15693_inventory1(handler)) {
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb41 	bl	80047d0 <st25r95_15693_inventory1>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <st25r95_service+0xaa>
        handler->callback(handler->uid);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	3207      	adds	r2, #7
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 8004160:	2201      	movs	r2, #1
 8004162:	2110      	movs	r1, #16
 8004164:	480d      	ldr	r0, [pc, #52]	; (800419c <st25r95_service+0xc4>)
 8004166:	f002 fe6f 	bl	8006e48 <HAL_GPIO_WritePin>
        for(volatile i=0;i<10000; ++i);
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	e002      	b.n	8004176 <st25r95_service+0x9e>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f242 720f 	movw	r2, #9999	; 0x270f
 800417c:	4293      	cmp	r3, r2
 800417e:	ddf7      	ble.n	8004170 <st25r95_service+0x98>
    		  && st25r95_15693_inventory1(handler)) {
 8004180:	e004      	b.n	800418c <st25r95_service+0xb4>
      } else {
    	HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
 8004182:	2200      	movs	r2, #0
 8004184:	2110      	movs	r1, #16
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <st25r95_service+0xc4>)
 8004188:	f002 fe5e 	bl	8006e48 <HAL_GPIO_WritePin>
      }
      st25r95_idle(handler);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fb67 	bl	8004860 <st25r95_idle>
    }
  }
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	48000400 	.word	0x48000400

080041a0 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 80041a8:	bf00      	nop
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7c5b      	ldrb	r3, [r3, #17]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0fa      	beq.n	80041aa <st25r95_response+0xa>
  handler->irq_flag = 0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2001      	movs	r0, #1
 80041c0:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 80041c2:	2102      	movs	r1, #2
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff6f 	bl	80040a8 <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2101      	movs	r1, #1
 80041d0:	4810      	ldr	r0, [pc, #64]	; (8004214 <st25r95_response+0x74>)
 80041d2:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO)
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <st25r95_response+0x74>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b55      	cmp	r3, #85	; 0x55
 80041da:	d105      	bne.n	80041e8 <st25r95_response+0x48>
  {
    handler->nss(0);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2000      	movs	r0, #0
 80041e2:	4798      	blx	r3
    return rx_data;
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <st25r95_response+0x74>)
 80041e6:	e011      	b.n	800420c <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <st25r95_response+0x78>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <st25r95_response+0x7c>)
 80041fa:	4a06      	ldr	r2, [pc, #24]	; (8004214 <st25r95_response+0x74>)
 80041fc:	7852      	ldrb	r2, [r2, #1]
 80041fe:	4611      	mov	r1, r2
 8004200:	4798      	blx	r3
  handler->nss(0);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2000      	movs	r0, #0
 8004208:	4798      	blx	r3
  return rx_data;
 800420a:	4b02      	ldr	r3, [pc, #8]	; (8004214 <st25r95_response+0x74>)
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000974 	.word	0x20000974
 8004218:	20000975 	.word	0x20000975
 800421c:	20000976 	.word	0x20000976

08004220 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f829 	bl	8004280 <st25r95_reset>
  handler->irq_pulse();
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d012      	beq.n	8004268 <st25r95_init+0x48>
 8004242:	2b02      	cmp	r3, #2
 8004244:	d114      	bne.n	8004270 <st25r95_init+0x50>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f85e 	bl	8004308 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	795b      	ldrb	r3, [r3, #5]
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8ce 	bl	80043f4 <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	799b      	ldrb	r3, [r3, #6]
 800425c:	461a      	mov	r2, r3
 800425e:	2101      	movs	r1, #1
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8ff 	bl	8004464 <st25r95_write_ARC>
      break;
 8004266:	e007      	b.n	8004278 <st25r95_init+0x58>
    case ST25_PROTOCOL_15693:
      st25r95_15693(handler);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f889 	bl	8004380 <st25r95_15693>
	  break;
 800426e:	e003      	b.n	8004278 <st25r95_init+0x58>
    default:
      st25r95_off(handler);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f819 	bl	80042a8 <st25r95_off>
      break;
 8004276:	bf00      	nop
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2001      	movs	r0, #1
 800428e:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8004290:	2101      	movs	r1, #1
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff08 	bl	80040a8 <st25r95_spi_byte>
  handler->nss(0);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2000      	movs	r0, #0
 800429e:	4798      	blx	r3
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <st25r95_off+0x58>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <st25r95_off+0x58>)
 80042b8:	2202      	movs	r2, #2
 80042ba:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <st25r95_off+0x58>)
 80042be:	2202      	movs	r2, #2
 80042c0:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <st25r95_off+0x58>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <st25r95_off+0x58>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <st25r95_off+0x5c>)
 80042d0:	2205      	movs	r2, #5
 80042d2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2001      	movs	r0, #1
 80042da:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fecd 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2000      	movs	r0, #0
 80042e8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff58 	bl	80041a0 <st25r95_response>
 80042f0:	60f8      	str	r0, [r7, #12]
  return res[0];
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	781b      	ldrb	r3, [r3, #0]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000870 	.word	0x20000870
 8004304:	20000970 	.word	0x20000970

08004308 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <st25r95_14443A+0x70>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <st25r95_14443A+0x70>)
 8004318:	2202      	movs	r2, #2
 800431a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <st25r95_14443A+0x70>)
 800431e:	2202      	movs	r2, #2
 8004320:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <st25r95_14443A+0x70>)
 8004324:	2202      	movs	r2, #2
 8004326:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	78db      	ldrb	r3, [r3, #3]
 800432c:	019b      	lsls	r3, r3, #6
 800432e:	b25a      	sxtb	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	791b      	ldrb	r3, [r3, #4]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	b25b      	sxtb	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b25b      	sxtb	r3, r3
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <st25r95_14443A+0x70>)
 8004340:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <st25r95_14443A+0x74>)
 8004344:	2205      	movs	r2, #5
 8004346:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2001      	movs	r0, #1
 800434e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe93 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2000      	movs	r0, #0
 800435c:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff ff1b 	bl	80041a0 <st25r95_response>
 800436a:	60f8      	str	r0, [r7, #12]
  return res[0];
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	781b      	ldrb	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000870 	.word	0x20000870
 800437c:	20000970 	.word	0x20000970

08004380 <st25r95_15693>:

st25r95_status_t st25r95_15693(st25r95_handle *handler) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <st25r95_15693+0x6c>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <st25r95_15693+0x6c>)
 8004390:	2202      	movs	r2, #2
 8004392:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8004394:	4b15      	ldr	r3, [pc, #84]	; (80043ec <st25r95_15693+0x6c>)
 8004396:	2202      	movs	r2, #2
 8004398:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_15693;
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <st25r95_15693+0x6c>)
 800439c:	2201      	movs	r2, #1
 800439e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	78db      	ldrb	r3, [r3, #3]
  	  	  	  	  | 0 << 2 | 0 << 1 | 1 << 0;
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	b2da      	uxtb	r2, r3
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <st25r95_15693+0x6c>)
 80043b2:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <st25r95_15693+0x70>)
 80043b6:	2205      	movs	r2, #5
 80043b8:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2001      	movs	r0, #1
 80043c0:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fe5a 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2000      	movs	r0, #0
 80043ce:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_15693;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fee2 	bl	80041a0 <st25r95_response>
 80043dc:	60f8      	str	r0, [r7, #12]
  return res[0];
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	781b      	ldrb	r3, [r3, #0]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000870 	.word	0x20000870
 80043f0:	20000970 	.word	0x20000970

080043f4 <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8004400:	4b16      	ldr	r3, [pc, #88]	; (800445c <st25r95_write_timerw+0x68>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <st25r95_write_timerw+0x68>)
 8004408:	2209      	movs	r2, #9
 800440a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <st25r95_write_timerw+0x68>)
 800440e:	2204      	movs	r2, #4
 8004410:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <st25r95_write_timerw+0x68>)
 8004414:	223a      	movs	r2, #58	; 0x3a
 8004416:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <st25r95_write_timerw+0x68>)
 800441a:	2200      	movs	r2, #0
 800441c:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <st25r95_write_timerw+0x68>)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <st25r95_write_timerw+0x68>)
 8004426:	2204      	movs	r2, #4
 8004428:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <st25r95_write_timerw+0x6c>)
 800442c:	2207      	movs	r2, #7
 800442e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2001      	movs	r0, #1
 8004436:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fe1f 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2000      	movs	r0, #0
 8004444:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff feaa 	bl	80041a0 <st25r95_response>
 800444c:	60f8      	str	r0, [r7, #12]
  return res[0];
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	781b      	ldrb	r3, [r3, #0]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000870 	.word	0x20000870
 8004460:	20000970 	.word	0x20000970

08004464 <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
 8004470:	4613      	mov	r3, r2
 8004472:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <st25r95_write_ARC+0x6c>)
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <st25r95_write_ARC+0x6c>)
 800447c:	2209      	movs	r2, #9
 800447e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <st25r95_write_ARC+0x6c>)
 8004482:	2204      	movs	r2, #4
 8004484:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <st25r95_write_ARC+0x6c>)
 8004488:	2268      	movs	r2, #104	; 0x68
 800448a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <st25r95_write_ARC+0x6c>)
 800448e:	2201      	movs	r2, #1
 8004490:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <st25r95_write_ARC+0x6c>)
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8004498:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <st25r95_write_ARC+0x6c>)
 800449a:	78bb      	ldrb	r3, [r7, #2]
 800449c:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <st25r95_write_ARC+0x70>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2001      	movs	r0, #1
 80044aa:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fde5 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2000      	movs	r0, #0
 80044b8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fe70 	bl	80041a0 <st25r95_response>
 80044c0:	60f8      	str	r0, [r7, #12]
  return res[0];
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	781b      	ldrb	r3, [r3, #0]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000870 	.word	0x20000870
 80044d4:	20000970 	.word	0x20000970

080044d8 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 80044d8:	b5b0      	push	{r4, r5, r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af04      	add	r7, sp, #16
 80044de:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 80044e0:	23ff      	movs	r3, #255	; 0xff
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f883 	bl	8004600 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 80044fa:	7d3b      	ldrb	r3, [r7, #20]
 80044fc:	2bff      	cmp	r3, #255	; 0xff
 80044fe:	d101      	bne.n	8004504 <st25r95_14443A_detect+0x2c>
 8004500:	2300      	movs	r3, #0
 8004502:	e078      	b.n	80045f6 <st25r95_14443A_detect+0x11e>
  if (data[0] & 0b00100000) {
 8004504:	7d3b      	ldrb	r3, [r7, #20]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <st25r95_14443A_detect+0x3a>
    return 0;
 800450e:	2300      	movs	r3, #0
 8004510:	e071      	b.n	80045f6 <st25r95_14443A_detect+0x11e>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8004512:	7d3b      	ldrb	r3, [r7, #20]
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e053      	b.n	80045c6 <st25r95_14443A_detect+0xee>
    data[0] = 0xff;
 800451e:	23ff      	movs	r3, #255	; 0xff
 8004520:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8004522:	f107 0214 	add.w	r2, r7, #20
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8a4 	bl	8004678 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8004530:	7d3b      	ldrb	r3, [r7, #20]
 8004532:	2bff      	cmp	r3, #255	; 0xff
 8004534:	d101      	bne.n	800453a <st25r95_14443A_detect+0x62>
 8004536:	2300      	movs	r3, #0
 8004538:	e05d      	b.n	80045f6 <st25r95_14443A_detect+0x11e>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 800453a:	7d3a      	ldrb	r2, [r7, #20]
 800453c:	7d7b      	ldrb	r3, [r7, #21]
 800453e:	4053      	eors	r3, r2
 8004540:	b2da      	uxtb	r2, r3
 8004542:	7dbb      	ldrb	r3, [r7, #22]
 8004544:	4053      	eors	r3, r2
 8004546:	b2da      	uxtb	r2, r3
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	4053      	eors	r3, r2
 800454c:	b2da      	uxtb	r2, r3
 800454e:	7e3b      	ldrb	r3, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <st25r95_14443A_detect+0x80>
 8004554:	2300      	movs	r3, #0
 8004556:	e04e      	b.n	80045f6 <st25r95_14443A_detect+0x11e>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	7d3a      	ldrb	r2, [r7, #20]
 800455e:	3320      	adds	r3, #32
 8004560:	443b      	add	r3, r7
 8004562:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8004566:	7ffb      	ldrb	r3, [r7, #31]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3301      	adds	r3, #1
 800456c:	7d7a      	ldrb	r2, [r7, #21]
 800456e:	3320      	adds	r3, #32
 8004570:	443b      	add	r3, r7
 8004572:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	3302      	adds	r3, #2
 800457c:	7dba      	ldrb	r2, [r7, #22]
 800457e:	3320      	adds	r3, #32
 8004580:	443b      	add	r3, r7
 8004582:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	3303      	adds	r3, #3
 800458c:	7dfa      	ldrb	r2, [r7, #23]
 800458e:	3320      	adds	r3, #32
 8004590:	443b      	add	r3, r7
 8004592:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 8004596:	7d3d      	ldrb	r5, [r7, #20]
 8004598:	7d7b      	ldrb	r3, [r7, #21]
 800459a:	7dba      	ldrb	r2, [r7, #22]
 800459c:	7df9      	ldrb	r1, [r7, #23]
 800459e:	f107 0414 	add.w	r4, r7, #20
 80045a2:	7ff8      	ldrb	r0, [r7, #31]
 80045a4:	9102      	str	r1, [sp, #8]
 80045a6:	9201      	str	r2, [sp, #4]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	462b      	mov	r3, r5
 80045ac:	4622      	mov	r2, r4
 80045ae:	4601      	mov	r1, r0
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8a7 	bl	8004704 <st25r95_14443A_select>
    if (data[0] & 0x4)
 80045b6:	7d3b      	ldrb	r3, [r7, #20]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <st25r95_14443A_detect+0xf8>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 80045c0:	7ffb      	ldrb	r3, [r7, #31]
 80045c2:	3301      	adds	r3, #1
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	7fba      	ldrb	r2, [r7, #30]
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d2a7      	bcs.n	800451e <st25r95_14443A_detect+0x46>
 80045ce:	e000      	b.n	80045d2 <st25r95_14443A_detect+0xfa>
      continue;
    else
      break;
 80045d0:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3307      	adds	r3, #7
 80045d6:	220a      	movs	r2, #10
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f008 ffe8 	bl	800d5b0 <memset>
  memcpy(handler->uid, UID, 10);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3307      	adds	r3, #7
 80045e4:	461a      	mov	r2, r3
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	cb03      	ldmia	r3!, {r0, r1}
 80045ec:	6010      	str	r0, [r2, #0]
 80045ee:	6051      	str	r1, [r2, #4]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	8113      	strh	r3, [r2, #8]
  return 1;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004600 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <st25r95_14443A_REQA+0x70>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <st25r95_14443A_REQA+0x70>)
 8004612:	2204      	movs	r2, #4
 8004614:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <st25r95_14443A_REQA+0x70>)
 8004618:	2202      	movs	r2, #2
 800461a:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <st25r95_14443A_REQA+0x70>)
 800461e:	2226      	movs	r2, #38	; 0x26
 8004620:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <st25r95_14443A_REQA+0x70>)
 8004624:	2207      	movs	r2, #7
 8004626:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <st25r95_14443A_REQA+0x74>)
 800462a:	2205      	movs	r2, #5
 800462c:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2001      	movs	r0, #1
 8004634:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fd20 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2000      	movs	r0, #0
 8004642:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fdab 	bl	80041a0 <st25r95_response>
 800464a:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d109      	bne.n	8004668 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1c99      	adds	r1, r3, #2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	6838      	ldr	r0, [r7, #0]
 8004662:	f008 ff97 	bl	800d594 <memcpy>
 8004666:	e000      	b.n	800466a <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8004668:	bf00      	nop

}
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000870 	.word	0x20000870
 8004674:	20000970 	.word	0x20000970

08004678 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	460b      	mov	r3, r1
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 8004686:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 800468e:	2204      	movs	r2, #4
 8004690:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 8004694:	2203      	movs	r2, #3
 8004696:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 8004698:	7afb      	ldrb	r3, [r7, #11]
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <st25r95_14443A_ANTICOLLISION+0x84>)
 800469c:	5cd2      	ldrb	r2, [r2, r3]
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046a0:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046a4:	2220      	movs	r2, #32
 80046a6:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046aa:	2208      	movs	r2, #8
 80046ac:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <st25r95_14443A_ANTICOLLISION+0x88>)
 80046b0:	2206      	movs	r2, #6
 80046b2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2001      	movs	r0, #1
 80046ba:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fcdd 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2000      	movs	r0, #0
 80046c8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fd68 	bl	80041a0 <st25r95_response>
 80046d0:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d109      	bne.n	80046ee <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1c99      	adds	r1, r3, #2
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f008 ff54 	bl	800d594 <memcpy>
 80046ec:	e000      	b.n	80046f0 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 80046ee:	bf00      	nop
}
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000870 	.word	0x20000870
 80046fc:	08011168 	.word	0x08011168
 8004700:	20000970 	.word	0x20000970

08004704 <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	461a      	mov	r2, r3
 8004710:	460b      	mov	r3, r1
 8004712:	72fb      	strb	r3, [r7, #11]
 8004714:	4613      	mov	r3, r2
 8004716:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8004718:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <st25r95_14443A_select+0xc0>)
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004720:	2204      	movs	r2, #4
 8004722:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8004724:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004726:	2208      	movs	r2, #8
 8004728:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <st25r95_14443A_select+0xc4>)
 800472e:	5cd2      	ldrb	r2, [r2, r3]
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004732:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004736:	2270      	movs	r2, #112	; 0x70
 8004738:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 800473a:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <st25r95_14443A_select+0xc0>)
 800473c:	7abb      	ldrb	r3, [r7, #10]
 800473e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004742:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004746:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8004748:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <st25r95_14443A_select+0xc0>)
 800474a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800474e:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004752:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004756:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8004758:	7aba      	ldrb	r2, [r7, #10]
 800475a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800475e:	4053      	eors	r3, r2
 8004760:	b2da      	uxtb	r2, r3
 8004762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004766:	4053      	eors	r3, r2
 8004768:	b2da      	uxtb	r2, r3
 800476a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800476e:	4053      	eors	r3, r2
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004774:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <st25r95_14443A_select+0xc0>)
 8004778:	2228      	movs	r2, #40	; 0x28
 800477a:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <st25r95_14443A_select+0xc8>)
 800477e:	220b      	movs	r2, #11
 8004780:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2001      	movs	r0, #1
 8004788:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fc76 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2000      	movs	r0, #0
 8004796:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fd01 	bl	80041a0 <st25r95_response>
 800479e:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d109      	bne.n	80047bc <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1c99      	adds	r1, r3, #2
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	3301      	adds	r3, #1
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f008 feed 	bl	800d594 <memcpy>
 80047ba:	e000      	b.n	80047be <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 80047bc:	bf00      	nop
}
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000870 	.word	0x20000870
 80047c8:	08011168 	.word	0x08011168
 80047cc:	20000970 	.word	0x20000970

080047d0 <st25r95_15693_inventory1>:

uint8_t st25r95_15693_inventory1(st25r95_handle *handler)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80047d8:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047e0:	2204      	movs	r2, #4
 80047e2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x3; // length of 15693 command frame
 80047e4:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047e6:	2203      	movs	r2, #3
 80047e8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x26; // flags
 80047ea:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047ec:	2226      	movs	r2, #38	; 0x26
 80047ee:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x01; // command code
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x00; // non-addressed & no mask
 80047f6:	4b18      	ldr	r3, [pc, #96]	; (8004858 <st25r95_15693_inventory1+0x88>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	715a      	strb	r2, [r3, #5]
  // CRC automatically appended by 15693 protocol select
  tx_len = 6;
 80047fc:	4b17      	ldr	r3, [pc, #92]	; (800485c <st25r95_15693_inventory1+0x8c>)
 80047fe:	2206      	movs	r2, #6
 8004800:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2001      	movs	r0, #1
 8004808:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fc36 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2000      	movs	r0, #0
 8004816:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fcc1 	bl	80041a0 <st25r95_response>
 800481e:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return 0;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d001      	beq.n	800482c <st25r95_15693_inventory1+0x5c>
 8004828:	2300      	movs	r3, #0
 800482a:	e010      	b.n	800484e <st25r95_15693_inventory1+0x7e>

  memset(handler->uid, 0, 8);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3307      	adds	r3, #7
 8004830:	2208      	movs	r2, #8
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f008 febb 	bl	800d5b0 <memset>
  memcpy(handler->uid, res[4], 8);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	1dd8      	adds	r0, r3, #7
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2208      	movs	r2, #8
 8004846:	4619      	mov	r1, r3
 8004848:	f008 fea4 	bl	800d594 <memcpy>
  return 1;
 800484c:	2301      	movs	r3, #1
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000870 	.word	0x20000870
 800485c:	20000970 	.word	0x20000970

08004860 <st25r95_idle>:
  memset(handler->uid, 0, 8);
  memcpy(handler->uid, res[4], 8);
  return 1;
}

void st25r95_idle(st25r95_handle *handler) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004868:	4b26      	ldr	r3, [pc, #152]	; (8004904 <st25r95_idle+0xa4>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 800486e:	4b25      	ldr	r3, [pc, #148]	; (8004904 <st25r95_idle+0xa4>)
 8004870:	2207      	movs	r2, #7
 8004872:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <st25r95_idle+0xa4>)
 8004876:	220e      	movs	r2, #14
 8004878:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0b00001011;
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <st25r95_idle+0xa4>)
 800487c:	220b      	movs	r2, #11
 800487e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8004880:	4b20      	ldr	r3, [pc, #128]	; (8004904 <st25r95_idle+0xa4>)
 8004882:	2221      	movs	r2, #33	; 0x21
 8004884:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8004886:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <st25r95_idle+0xa4>)
 8004888:	2200      	movs	r2, #0
 800488a:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <st25r95_idle+0xa4>)
 800488e:	2279      	movs	r2, #121	; 0x79
 8004890:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8004892:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <st25r95_idle+0xa4>)
 8004894:	2201      	movs	r2, #1
 8004896:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <st25r95_idle+0xa4>)
 800489a:	2218      	movs	r2, #24
 800489c:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <st25r95_idle+0xa4>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 80048a4:	4b17      	ldr	r3, [pc, #92]	; (8004904 <st25r95_idle+0xa4>)
 80048a6:	2220      	movs	r2, #32
 80048a8:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <st25r95_idle+0xa4>)
 80048ac:	2260      	movs	r2, #96	; 0x60
 80048ae:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 80048b0:	4b14      	ldr	r3, [pc, #80]	; (8004904 <st25r95_idle+0xa4>)
 80048b2:	2260      	movs	r2, #96	; 0x60
 80048b4:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	789b      	ldrb	r3, [r3, #2]
 80048ba:	3b08      	subs	r3, #8
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <st25r95_idle+0xa4>)
 80048c0:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	789b      	ldrb	r3, [r3, #2]
 80048c6:	3308      	adds	r3, #8
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <st25r95_idle+0xa4>)
 80048cc:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <st25r95_idle+0xa4>)
 80048d0:	223f      	movs	r2, #63	; 0x3f
 80048d2:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <st25r95_idle+0xa4>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <st25r95_idle+0xa8>)
 80048dc:	2211      	movs	r2, #17
 80048de:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2001      	movs	r0, #1
 80048e6:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fbc7 	bl	800407c <st25r95_spi_tx>
  handler->nss(0);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2000      	movs	r0, #0
 80048f4:	4798      	blx	r3

  handler->state = ST25_STATE_IDLE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000870 	.word	0x20000870
 8004908:	20000970 	.word	0x20000970

0800490c <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e0bf      	b.n	8004a9a <st25r95_calibrate+0x18e>
    tx_len = 17;
 800491a:	4b66      	ldr	r3, [pc, #408]	; (8004ab4 <st25r95_calibrate+0x1a8>)
 800491c:	2211      	movs	r2, #17
 800491e:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8004920:	4a65      	ldr	r2, [pc, #404]	; (8004ab8 <st25r95_calibrate+0x1ac>)
 8004922:	4b66      	ldr	r3, [pc, #408]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004924:	4614      	mov	r4, r2
 8004926:	461d      	mov	r5, r3
 8004928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2001      	movs	r0, #1
 8004936:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fb9f 	bl	800407c <st25r95_spi_tx>
    handler->nss(0);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2000      	movs	r0, #0
 8004944:	4798      	blx	r3

    res = st25r95_response(handler);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fc2a 	bl	80041a0 <st25r95_response>
 800494c:	4603      	mov	r3, r0
 800494e:	4a5c      	ldr	r2, [pc, #368]	; (8004ac0 <st25r95_calibrate+0x1b4>)
 8004950:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8004952:	4b5b      	ldr	r3, [pc, #364]	; (8004ac0 <st25r95_calibrate+0x1b4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 809a 	bne.w	8004a92 <st25r95_calibrate+0x186>
 800495e:	4b58      	ldr	r3, [pc, #352]	; (8004ac0 <st25r95_calibrate+0x1b4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	f040 8093 	bne.w	8004a92 <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 800496c:	4b54      	ldr	r3, [pc, #336]	; (8004ac0 <st25r95_calibrate+0x1b4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3302      	adds	r3, #2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d13e      	bne.n	80049f6 <st25r95_calibrate+0xea>
        switch (i - 1) {
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	3b01      	subs	r3, #1
 800497c:	2b07      	cmp	r3, #7
 800497e:	f200 8089 	bhi.w	8004a94 <st25r95_calibrate+0x188>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <st25r95_calibrate+0x7c>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049a9 	.word	0x080049a9
 800498c:	08004a95 	.word	0x08004a95
 8004990:	080049b1 	.word	0x080049b1
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049db 	.word	0x080049db
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	08004a95 	.word	0x08004a95
          case 0:
            calibrate_data[14] = 0xFC;
 80049a8:	4b44      	ldr	r3, [pc, #272]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049aa:	22fc      	movs	r2, #252	; 0xfc
 80049ac:	739a      	strb	r2, [r3, #14]
            break;
 80049ae:	e071      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80049b0:	4b42      	ldr	r3, [pc, #264]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049b2:	7b9b      	ldrb	r3, [r3, #14]
 80049b4:	3340      	adds	r3, #64	; 0x40
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b40      	ldr	r3, [pc, #256]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049ba:	739a      	strb	r2, [r3, #14]
            break;
 80049bc:	e06a      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049c0:	7b9b      	ldrb	r3, [r3, #14]
 80049c2:	3320      	adds	r3, #32
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049c8:	739a      	strb	r2, [r3, #14]
            break;
 80049ca:	e063      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049ce:	7b9b      	ldrb	r3, [r3, #14]
 80049d0:	3310      	adds	r3, #16
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049d6:	739a      	strb	r2, [r3, #14]
            break;
 80049d8:	e05c      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049dc:	7b9b      	ldrb	r3, [r3, #14]
 80049de:	3308      	adds	r3, #8
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4b36      	ldr	r3, [pc, #216]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049e4:	739a      	strb	r2, [r3, #14]
            break;
 80049e6:	e055      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 80049e8:	4b34      	ldr	r3, [pc, #208]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049ea:	7b9b      	ldrb	r3, [r3, #14]
 80049ec:	3304      	adds	r3, #4
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <st25r95_calibrate+0x1b0>)
 80049f2:	739a      	strb	r2, [r3, #14]
            break;
 80049f4:	e04e      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 80049f6:	4b32      	ldr	r3, [pc, #200]	; (8004ac0 <st25r95_calibrate+0x1b4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3302      	adds	r3, #2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d147      	bne.n	8004a92 <st25r95_calibrate+0x186>
        switch (i - 1) {
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	2b07      	cmp	r3, #7
 8004a08:	d844      	bhi.n	8004a94 <st25r95_calibrate+0x188>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <st25r95_calibrate+0x104>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a95 	.word	0x08004a95
 8004a14:	08004a31 	.word	0x08004a31
 8004a18:	08004a3f 	.word	0x08004a3f
 8004a1c:	08004a4d 	.word	0x08004a4d
 8004a20:	08004a5b 	.word	0x08004a5b
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a77 	.word	0x08004a77
 8004a2c:	08004a85 	.word	0x08004a85
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a32:	7b9b      	ldrb	r3, [r3, #14]
 8004a34:	3b80      	subs	r3, #128	; 0x80
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a3a:	739a      	strb	r2, [r3, #14]
            break;
 8004a3c:	e02a      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a40:	7b9b      	ldrb	r3, [r3, #14]
 8004a42:	3b40      	subs	r3, #64	; 0x40
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a48:	739a      	strb	r2, [r3, #14]
            break;
 8004a4a:	e023      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a4e:	7b9b      	ldrb	r3, [r3, #14]
 8004a50:	3b20      	subs	r3, #32
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a56:	739a      	strb	r2, [r3, #14]
            break;
 8004a58:	e01c      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a5c:	7b9b      	ldrb	r3, [r3, #14]
 8004a5e:	3b10      	subs	r3, #16
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	4b16      	ldr	r3, [pc, #88]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a64:	739a      	strb	r2, [r3, #14]
            break;
 8004a66:	e015      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a6a:	7b9b      	ldrb	r3, [r3, #14]
 8004a6c:	3b08      	subs	r3, #8
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a72:	739a      	strb	r2, [r3, #14]
            break;
 8004a74:	e00e      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a78:	7b9b      	ldrb	r3, [r3, #14]
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a80:	739a      	strb	r2, [r3, #14]
            break;
 8004a82:	e007      	b.n	8004a94 <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a86:	7b9b      	ldrb	r3, [r3, #14]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004a8e:	739a      	strb	r2, [r3, #14]
            break;
 8004a90:	e000      	b.n	8004a94 <st25r95_calibrate+0x188>
        }
      }
 8004a92:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	f67f af3c 	bls.w	800491a <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <st25r95_calibrate+0x1b0>)
 8004aa4:	7b9a      	ldrb	r2, [r3, #14]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	709a      	strb	r2, [r3, #2]
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000970 	.word	0x20000970
 8004ab8:	20000870 	.word	0x20000870
 8004abc:	20000010 	.word	0x20000010
 8004ac0:	20000a74 	.word	0x20000a74

08004ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_MspInit+0x4c>)
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <HAL_MspInit+0x4c>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_MspInit+0x4c>)
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_MspInit+0x4c>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_MspInit+0x4c>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <HAL_MspInit+0x4c>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	210f      	movs	r1, #15
 8004afe:	f06f 0001 	mvn.w	r0, #1
 8004b02:	f001 fde0 	bl	80066c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000

08004b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b09e      	sub	sp, #120	; 0x78
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b1c:	f107 0310 	add.w	r3, r7, #16
 8004b20:	2268      	movs	r2, #104	; 0x68
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f008 fd43 	bl	800d5b0 <memset>
  if(hadc->Instance==ADC1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_ADC_MspInit+0xd4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d155      	bne.n	8004be0 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004b40:	2302      	movs	r3, #2
 8004b42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004b48:	2308      	movs	r3, #8
 8004b4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b4c:	2307      	movs	r3, #7
 8004b4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b50:	2302      	movs	r3, #2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b54:	2302      	movs	r3, #2
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b5e:	f107 0310 	add.w	r3, r7, #16
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 f83c 	bl	8007be0 <HAL_RCCEx_PeriphCLKConfig>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8004b6e:	f7ff f93f 	bl	8003df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <HAL_ADC_MspInit+0xd8>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_ADC_MspInit+0xd8>)
 8004b78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_ADC_MspInit+0xd8>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_ADC_MspInit+0xe0>)
 8004b8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b96:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bba:	2220      	movs	r2, #32
 8004bbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bc4:	480a      	ldr	r0, [pc, #40]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bc6:	f001 fdb5 	bl	8006734 <HAL_DMA_Init>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004bd0:	f7ff f90e 	bl	8003df0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bd8:	651a      	str	r2, [r3, #80]	; 0x50
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <HAL_ADC_MspInit+0xdc>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004be0:	bf00      	nop
 8004be2:	3778      	adds	r7, #120	; 0x78
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	50040000 	.word	0x50040000
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	20000294 	.word	0x20000294
 8004bf4:	40020008 	.word	0x40020008

08004bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_SPI_MspInit+0x7c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d128      	bne.n	8004c6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c24:	6613      	str	r3, [r2, #96]	; 0x60
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004c4a:	23c2      	movs	r3, #194	; 0xc2
 8004c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c56:	2303      	movs	r3, #3
 8004c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c5a:	2305      	movs	r3, #5
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c68:	f001 ff5c 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c6c:	bf00      	nop
 8004c6e:	3728      	adds	r7, #40	; 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40013000 	.word	0x40013000
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b0a6      	sub	sp, #152	; 0x98
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c94:	f107 031c 	add.w	r3, r7, #28
 8004c98:	2268      	movs	r2, #104	; 0x68
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f008 fc87 	bl	800d5b0 <memset>
  if(huart->Instance==USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a43      	ldr	r2, [pc, #268]	; (8004db4 <HAL_UART_MspInit+0x138>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d13d      	bne.n	8004d28 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cac:	2301      	movs	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cb4:	f107 031c 	add.w	r3, r7, #28
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f002 ff91 	bl	8007be0 <HAL_RCCEx_PeriphCLKConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004cc4:	f7ff f894 	bl	8003df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8004cd4:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce0:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	4a34      	ldr	r2, [pc, #208]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004cf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d00:	2302      	movs	r3, #2
 8004d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d12:	2307      	movs	r3, #7
 8004d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d22:	f001 feff 	bl	8006b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d26:	e040      	b.n	8004daa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_UART_MspInit+0x140>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d13b      	bne.n	8004daa <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d32:	2302      	movs	r3, #2
 8004d34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d36:	2300      	movs	r3, #0
 8004d38:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d3a:	f107 031c 	add.w	r3, r7, #28
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 ff4e 	bl	8007be0 <HAL_RCCEx_PeriphCLKConfig>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004d4a:	f7ff f851 	bl	8003df0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d58:	6593      	str	r3, [r2, #88]	; 0x58
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_UART_MspInit+0x13c>)
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d7e:	230c      	movs	r3, #12
 8004d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	2302      	movs	r3, #2
 8004d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d90:	2303      	movs	r3, #3
 8004d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d96:	2307      	movs	r3, #7
 8004d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004da0:	4619      	mov	r1, r3
 8004da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da6:	f001 febd 	bl	8006b24 <HAL_GPIO_Init>
}
 8004daa:	bf00      	nop
 8004dac:	3798      	adds	r7, #152	; 0x98
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40004400 	.word	0x40004400

08004dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dc4:	e7fe      	b.n	8004dc4 <NMI_Handler+0x4>

08004dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dca:	e7fe      	b.n	8004dca <HardFault_Handler+0x4>

08004dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dd0:	e7fe      	b.n	8004dd0 <MemManage_Handler+0x4>

08004dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd6:	e7fe      	b.n	8004dd6 <BusFault_Handler+0x4>

08004dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ddc:	e7fe      	b.n	8004ddc <UsageFault_Handler+0x4>

08004dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004df0:	f000 f97e 	bl	80050f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004df4:	f007 f924 	bl	800c040 <xTaskGetSchedulerState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004dfe:	f008 f80b 	bl	800ce18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <DMA1_Channel1_IRQHandler+0x10>)
 8004e0e:	f001 fda9 	bl	8006964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000294 	.word	0x20000294

08004e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8004e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e24:	f002 f828 	bl	8006e78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004e28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e2c:	f002 f824 	bl	8006e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e30:	bf00      	nop
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return 1;
 8004e38:	2301      	movs	r3, #1
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <_kill>:

int _kill(int pid, int sig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e4e:	f008 fa5d 	bl	800d30c <__errno>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2216      	movs	r2, #22
 8004e56:	601a      	str	r2, [r3, #0]
  return -1;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_exit>:

void _exit (int status)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ffe7 	bl	8004e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e76:	e7fe      	b.n	8004e76 <_exit+0x12>

08004e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e00a      	b.n	8004ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e8a:	f3af 8000 	nop.w
 8004e8e:	4601      	mov	r1, r0
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	60ba      	str	r2, [r7, #8]
 8004e96:	b2ca      	uxtb	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	dbf0      	blt.n	8004e8a <_read+0x12>
  }

  return len;
 8004ea8:	687b      	ldr	r3, [r7, #4]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e009      	b.n	8004ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	60ba      	str	r2, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	dbf1      	blt.n	8004ec4 <_write+0x12>
  }
  return len;
 8004ee0:	687b      	ldr	r3, [r7, #4]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_close>:

int _close(int file)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f12:	605a      	str	r2, [r3, #4]
  return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <_isatty>:

int _isatty(int file)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f2a:	2301      	movs	r3, #1
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <_sbrk+0x5c>)
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <_sbrk+0x60>)
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <_sbrk+0x64>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <_sbrk+0x64>)
 8004f72:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <_sbrk+0x68>)
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <_sbrk+0x64>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d207      	bcs.n	8004f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f84:	f008 f9c2 	bl	800d30c <__errno>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	220c      	movs	r2, #12
 8004f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	e009      	b.n	8004fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <_sbrk+0x64>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <_sbrk+0x64>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4a05      	ldr	r2, [pc, #20]	; (8004fb8 <_sbrk+0x64>)
 8004fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20028000 	.word	0x20028000
 8004fb4:	00000400 	.word	0x00000400
 8004fb8:	20000a78 	.word	0x20000a78
 8004fbc:	20002c28 	.word	0x20002c28

08004fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <SystemInit+0x20>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	4a05      	ldr	r2, [pc, #20]	; (8004fe0 <SystemInit+0x20>)
 8004fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800501c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fe8:	f7ff ffea 	bl	8004fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <LoopForever+0x6>)
  ldr r1, =_edata
 8004fee:	490d      	ldr	r1, [pc, #52]	; (8005024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <LoopForever+0xe>)
  movs r3, #0
 8004ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ff4:	e002      	b.n	8004ffc <LoopCopyDataInit>

08004ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ffa:	3304      	adds	r3, #4

08004ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005000:	d3f9      	bcc.n	8004ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005004:	4c0a      	ldr	r4, [pc, #40]	; (8005030 <LoopForever+0x16>)
  movs r3, #0
 8005006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005008:	e001      	b.n	800500e <LoopFillZerobss>

0800500a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800500a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800500c:	3204      	adds	r2, #4

0800500e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800500e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005010:	d3fb      	bcc.n	800500a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005012:	f008 fa77 	bl	800d504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005016:	f7fe fae1 	bl	80035dc <main>

0800501a <LoopForever>:

LoopForever:
    b LoopForever
 800501a:	e7fe      	b.n	800501a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800501c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8005020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005024:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005028:	08011610 	.word	0x08011610
  ldr r2, =_sbss
 800502c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005030:	20002c28 	.word	0x20002c28

08005034 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005034:	e7fe      	b.n	8005034 <ADC1_IRQHandler>
	...

08005038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_Init+0x3c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a0b      	ldr	r2, [pc, #44]	; (8005074 <HAL_Init+0x3c>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800504e:	2003      	movs	r0, #3
 8005050:	f001 fb2e 	bl	80066b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005054:	200f      	movs	r0, #15
 8005056:	f000 f80f 	bl	8005078 <HAL_InitTick>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	71fb      	strb	r3, [r7, #7]
 8005064:	e001      	b.n	800506a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005066:	f7ff fd2d 	bl	8004ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800506a:	79fb      	ldrb	r3, [r7, #7]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40022000 	.word	0x40022000

08005078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005084:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <HAL_InitTick+0x6c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d023      	beq.n	80050d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800508c:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <HAL_InitTick+0x70>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <HAL_InitTick+0x6c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800509a:	fbb3 f3f1 	udiv	r3, r3, r1
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fb39 	bl	800671a <HAL_SYSTICK_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10f      	bne.n	80050ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d809      	bhi.n	80050c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b4:	2200      	movs	r2, #0
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	f001 fb03 	bl	80066c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <HAL_InitTick+0x74>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e007      	b.n	80050d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
 80050cc:	e004      	b.n	80050d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
 80050d2:	e001      	b.n	80050d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000002c 	.word	0x2000002c
 80050e8:	20000024 	.word	0x20000024
 80050ec:	20000028 	.word	0x20000028

080050f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <HAL_IncTick+0x20>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_IncTick+0x24>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4413      	add	r3, r2
 8005100:	4a04      	ldr	r2, [pc, #16]	; (8005114 <HAL_IncTick+0x24>)
 8005102:	6013      	str	r3, [r2, #0]
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	2000002c 	.word	0x2000002c
 8005114:	20000a7c 	.word	0x20000a7c

08005118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return uwTick;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_GetTick+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000a7c 	.word	0x20000a7c

08005130 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	609a      	str	r2, [r3, #8]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3360      	adds	r3, #96	; 0x60
 80051aa:	461a      	mov	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <LL_ADC_SetOffset+0x44>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	03fff000 	.word	0x03fff000

080051e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3360      	adds	r3, #96	; 0x60
 80051ee:	461a      	mov	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3360      	adds	r3, #96	; 0x60
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	431a      	orrs	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	615a      	str	r2, [r3, #20]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3330      	adds	r3, #48	; 0x30
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	4413      	add	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	211f      	movs	r1, #31
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	401a      	ands	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0e9b      	lsrs	r3, r3, #26
 80052c6:	f003 011f 	and.w	r1, r3, #31
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3314      	adds	r3, #20
 80052f6:	461a      	mov	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	0e5b      	lsrs	r3, r3, #25
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	4413      	add	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	0d1b      	lsrs	r3, r3, #20
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2107      	movs	r1, #7
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0d1b      	lsrs	r3, r3, #20
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	431a      	orrs	r2, r3
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0318 	and.w	r3, r3, #24
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005360:	40d9      	lsrs	r1, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	400b      	ands	r3, r1
 8005366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	0007ffff 	.word	0x0007ffff

08005384 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6093      	str	r3, [r2, #8]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053bc:	d101      	bne.n	80053c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80053e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540c:	d101      	bne.n	8005412 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800545c:	f043 0202 	orr.w	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <LL_ADC_IsEnabled+0x18>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_ADC_IsEnabled+0x1a>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d101      	bne.n	80054ae <LL_ADC_IsDisableOngoing+0x18>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <LL_ADC_IsDisableOngoing+0x1a>
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054d0:	f043 0204 	orr.w	r2, r3, #4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d101      	bne.n	80054fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b08      	cmp	r3, #8
 800551c:	d101      	bne.n	8005522 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e12f      	b.n	80057aa <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fadb 	bl	8004b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff19 	bl	80053a8 <LL_ADC_IsDeepPowerDownEnabled>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff feff 	bl	8005384 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff34 	bl	80053f8 <LL_ADC_IsInternalRegulatorEnabled>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d115      	bne.n	80055c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ff18 	bl	80053d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055a0:	4b84      	ldr	r3, [pc, #528]	; (80057b4 <HAL_ADC_Init+0x284>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	099b      	lsrs	r3, r3, #6
 80055a6:	4a84      	ldr	r2, [pc, #528]	; (80057b8 <HAL_ADC_Init+0x288>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	3301      	adds	r3, #1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80055b4:	e002      	b.n	80055bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f9      	bne.n	80055b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff ff16 	bl	80053f8 <LL_ADC_IsInternalRegulatorEnabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	f043 0210 	orr.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff ff76 	bl	80054e4 <LL_ADC_REG_IsConversionOngoing>
 80055f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80c8 	bne.w	8005798 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 80c4 	bne.w	8005798 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005618:	f043 0202 	orr.w	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ff23 	bl	8005470 <LL_ADC_IsEnabled>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005630:	4862      	ldr	r0, [pc, #392]	; (80057bc <HAL_ADC_Init+0x28c>)
 8005632:	f7ff ff1d 	bl	8005470 <LL_ADC_IsEnabled>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	485f      	ldr	r0, [pc, #380]	; (80057c0 <HAL_ADC_Init+0x290>)
 8005644:	f7ff fd74 	bl	8005130 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7e5b      	ldrb	r3, [r3, #25]
 800564c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005652:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005658:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800565e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005666:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d106      	bne.n	8005684 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	3b01      	subs	r3, #1
 800567c:	045b      	lsls	r3, r3, #17
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	4b47      	ldr	r3, [pc, #284]	; (80057c4 <HAL_ADC_Init+0x294>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	69b9      	ldr	r1, [r7, #24]
 80056b0:	430b      	orrs	r3, r1
 80056b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff13 	bl	80054e4 <LL_ADC_REG_IsConversionOngoing>
 80056be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff20 	bl	800550a <LL_ADC_INJ_IsConversionOngoing>
 80056ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d140      	bne.n	8005754 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13d      	bne.n	8005754 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7e1b      	ldrb	r3, [r3, #24]
 80056e0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80056e2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056fa:	f023 0306 	bic.w	r3, r3, #6
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	430b      	orrs	r3, r1
 8005706:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800570e:	2b01      	cmp	r3, #1
 8005710:	d118      	bne.n	8005744 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800571c:	f023 0304 	bic.w	r3, r3, #4
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005728:	4311      	orrs	r1, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800572e:	4311      	orrs	r1, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005734:	430a      	orrs	r2, r1
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	611a      	str	r2, [r3, #16]
 8005742:	e007      	b.n	8005754 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10c      	bne.n	8005776 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f023 010f 	bic.w	r1, r3, #15
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
 8005774:	e007      	b.n	8005786 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 020f 	bic.w	r2, r2, #15
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	; 0x58
 8005796:	e007      	b.n	80057a8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	f043 0210 	orr.w	r2, r3, #16
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000024 	.word	0x20000024
 80057b8:	053e2d63 	.word	0x053e2d63
 80057bc:	50040000 	.word	0x50040000
 80057c0:	50040300 	.word	0x50040300
 80057c4:	fff0c007 	.word	0xfff0c007

080057c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fe83 	bl	80054e4 <LL_ADC_REG_IsConversionOngoing>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d167      	bne.n	80058b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_ADC_Start_DMA+0x2a>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e063      	b.n	80058ba <HAL_ADC_Start_DMA+0xf2>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fc82 	bl	8006104 <ADC_Enable>
 8005800:	4603      	mov	r3, r0
 8005802:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d14f      	bne.n	80058aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	f023 0206 	bic.w	r2, r3, #6
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	65da      	str	r2, [r3, #92]	; 0x5c
 8005836:	e002      	b.n	800583e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005842:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_ADC_Start_DMA+0xfc>)
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_ADC_Start_DMA+0x100>)
 800584c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_ADC_Start_DMA+0x104>)
 8005854:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	221c      	movs	r2, #28
 800585c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0210 	orr.w	r2, r2, #16
 8005874:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3340      	adds	r3, #64	; 0x40
 8005890:	4619      	mov	r1, r3
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f001 f805 	bl	80068a4 <HAL_DMA_Start_IT>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fe0a 	bl	80054bc <LL_ADC_REG_StartConversion>
 80058a8:	e006      	b.n	80058b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80058b2:	e001      	b.n	80058b8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
 80058b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	080062cf 	.word	0x080062cf
 80058c8:	080063a7 	.word	0x080063a7
 80058cc:	080063c3 	.word	0x080063c3

080058d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b0b6      	sub	sp, #216	; 0xd8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_ADC_ConfigChannel+0x22>
 800592a:	2302      	movs	r3, #2
 800592c:	e3d5      	b.n	80060da <HAL_ADC_ConfigChannel+0x7ce>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fdd2 	bl	80054e4 <LL_ADC_REG_IsConversionOngoing>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 83ba 	bne.w	80060bc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b05      	cmp	r3, #5
 800594e:	d824      	bhi.n	800599a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	3b02      	subs	r3, #2
 8005956:	2b03      	cmp	r3, #3
 8005958:	d81b      	bhi.n	8005992 <HAL_ADC_ConfigChannel+0x86>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <HAL_ADC_ConfigChannel+0x54>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005971 	.word	0x08005971
 8005964:	08005979 	.word	0x08005979
 8005968:	08005981 	.word	0x08005981
 800596c:	08005989 	.word	0x08005989
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	220c      	movs	r2, #12
 8005974:	605a      	str	r2, [r3, #4]
          break;
 8005976:	e011      	b.n	800599c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2212      	movs	r2, #18
 800597c:	605a      	str	r2, [r3, #4]
          break;
 800597e:	e00d      	b.n	800599c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2218      	movs	r2, #24
 8005984:	605a      	str	r2, [r3, #4]
          break;
 8005986:	e009      	b.n	800599c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800598e:	605a      	str	r2, [r3, #4]
          break;
 8005990:	e004      	b.n	800599c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2206      	movs	r2, #6
 8005996:	605a      	str	r2, [r3, #4]
          break;
 8005998:	e000      	b.n	800599c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800599a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	f7ff fc70 	bl	800528e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fd96 	bl	80054e4 <LL_ADC_REG_IsConversionOngoing>
 80059b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fda2 	bl	800550a <LL_ADC_INJ_IsConversionOngoing>
 80059c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 81c1 	bne.w	8005d56 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f040 81bc 	bne.w	8005d56 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e6:	d10f      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	4619      	mov	r1, r3
 80059f4:	f7ff fc77 	bl	80052e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fc1e 	bl	8005242 <LL_ADC_SetSamplingTimeCommonConfig>
 8005a06:	e00e      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f7ff fc66 	bl	80052e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fc0e 	bl	8005242 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	08db      	lsrs	r3, r3, #3
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d00a      	beq.n	8005a5e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6919      	ldr	r1, [r3, #16]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a58:	f7ff fb9e 	bl	8005198 <LL_ADC_SetOffset>
 8005a5c:	e17b      	b.n	8005d56 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fbbb 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x17e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fbb0 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005a80:	4603      	mov	r3, r0
 8005a82:	0e9b      	lsrs	r3, r3, #26
 8005a84:	f003 021f 	and.w	r2, r3, #31
 8005a88:	e01e      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x1bc>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fba5 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	e004      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0x1d4>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	0e9b      	lsrs	r3, r3, #26
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	e018      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x206>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005aec:	fa93 f3a3 	rbit	r3, r3
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005b04:	2320      	movs	r3, #32
 8005b06:	e004      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d106      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fb74 	bl	800520c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fb58 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x244>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fb4d 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005b46:	4603      	mov	r3, r0
 8005b48:	0e9b      	lsrs	r3, r3, #26
 8005b4a:	f003 021f 	and.w	r2, r3, #31
 8005b4e:	e01e      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x282>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fb42 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b66:	fa93 f3a3 	rbit	r3, r3
 8005b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005b7e:	2320      	movs	r3, #32
 8005b80:	e004      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8005b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b86:	fab3 f383 	clz	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_ADC_ConfigChannel+0x29a>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	0e9b      	lsrs	r3, r3, #26
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	e018      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x2cc>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb2:	fa93 f3a3 	rbit	r3, r3
 8005bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005bc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005bca:	2320      	movs	r3, #32
 8005bcc:	e004      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d106      	bne.n	8005bea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fb11 	bl	800520c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2102      	movs	r1, #2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff faf5 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x30a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2102      	movs	r1, #2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff faea 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	0e9b      	lsrs	r3, r3, #26
 8005c10:	f003 021f 	and.w	r2, r3, #31
 8005c14:	e01e      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x348>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fadf 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c2c:	fa93 f3a3 	rbit	r3, r3
 8005c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005c44:	2320      	movs	r3, #32
 8005c46:	e004      	b.n	8005c52 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c4c:	fab3 f383 	clz	r3, r3
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x360>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	0e9b      	lsrs	r3, r3, #26
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	e016      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x38e>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c78:	fa93 f3a3 	rbit	r3, r3
 8005c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005c7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	e004      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d106      	bne.n	8005cac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fab0 	bl	800520c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2103      	movs	r1, #3
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fa94 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x3cc>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fa89 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	0e9b      	lsrs	r3, r3, #26
 8005cd2:	f003 021f 	and.w	r2, r3, #31
 8005cd6:	e017      	b.n	8005d08 <HAL_ADC_ConfigChannel+0x3fc>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2103      	movs	r1, #3
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fa7e 	bl	80051e0 <LL_ADC_GetOffsetChannel>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cea:	fa93 f3a3 	rbit	r3, r3
 8005cee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cf2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005cfa:	2320      	movs	r3, #32
 8005cfc:	e003      	b.n	8005d06 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d00:	fab3 f383 	clz	r3, r3
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x414>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	0e9b      	lsrs	r3, r3, #26
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	e011      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x438>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d28:	fa93 f3a3 	rbit	r3, r3
 8005d2c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005d38:	2320      	movs	r3, #32
 8005d3a:	e003      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3e:	fab3 f383 	clz	r3, r3
 8005d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d106      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2103      	movs	r1, #3
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fa5b 	bl	800520c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fb88 	bl	8005470 <LL_ADC_IsEnabled>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8140 	bne.w	8005fe8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f7ff fae1 	bl	800533c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	4a8f      	ldr	r2, [pc, #572]	; (8005fbc <HAL_ADC_ConfigChannel+0x6b0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f040 8131 	bne.w	8005fe8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x4a2>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0e9b      	lsrs	r3, r3, #26
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	bf94      	ite	ls
 8005da6:	2301      	movls	r3, #1
 8005da8:	2300      	movhi	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e019      	b.n	8005de2 <HAL_ADC_ConfigChannel+0x4d6>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db6:	fa93 f3a3 	rbit	r3, r3
 8005dba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dbe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	e003      	b.n	8005dd2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dcc:	fab3 f383 	clz	r3, r3
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	bf94      	ite	ls
 8005ddc:	2301      	movls	r3, #1
 8005dde:	2300      	movhi	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d079      	beq.n	8005eda <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d107      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x4f6>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	0e9b      	lsrs	r3, r3, #26
 8005df8:	3301      	adds	r3, #1
 8005dfa:	069b      	lsls	r3, r3, #26
 8005dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e00:	e015      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x522>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	e003      	b.n	8005e26 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e20:	fab3 f383 	clz	r3, r3
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	069b      	lsls	r3, r3, #26
 8005e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x542>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	0e9b      	lsrs	r3, r3, #26
 8005e40:	3301      	adds	r3, #1
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2101      	movs	r1, #1
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	e017      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x572>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e56:	fa93 f3a3 	rbit	r3, r3
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8005e66:	2320      	movs	r3, #32
 8005e68:	e003      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	ea42 0103 	orr.w	r1, r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <HAL_ADC_ConfigChannel+0x598>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	0e9b      	lsrs	r3, r3, #26
 8005e94:	3301      	adds	r3, #1
 8005e96:	f003 021f 	and.w	r2, r3, #31
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	051b      	lsls	r3, r3, #20
 8005ea2:	e018      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x5ca>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	fa93 f3a3 	rbit	r3, r3
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	e003      	b.n	8005ec8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	f003 021f 	and.w	r2, r3, #31
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	e081      	b.n	8005fde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x5ea>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	0e9b      	lsrs	r3, r3, #26
 8005eec:	3301      	adds	r3, #1
 8005eee:	069b      	lsls	r3, r3, #26
 8005ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ef4:	e015      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x616>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	fa93 f3a3 	rbit	r3, r3
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005f0e:	2320      	movs	r3, #32
 8005f10:	e003      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	fab3 f383 	clz	r3, r3
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	069b      	lsls	r3, r3, #26
 8005f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x636>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	0e9b      	lsrs	r3, r3, #26
 8005f34:	3301      	adds	r3, #1
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	e017      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x666>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	fa93 f3a3 	rbit	r3, r3
 8005f4e:	61fb      	str	r3, [r7, #28]
  return result;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	e003      	b.n	8005f66 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	fab3 f383 	clz	r3, r3
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	3301      	adds	r3, #1
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	ea42 0103 	orr.w	r1, r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <HAL_ADC_ConfigChannel+0x692>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	0e9b      	lsrs	r3, r3, #26
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f003 021f 	and.w	r2, r3, #31
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	3b1e      	subs	r3, #30
 8005f96:	051b      	lsls	r3, r3, #20
 8005f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	e01e      	b.n	8005fdc <HAL_ADC_ConfigChannel+0x6d0>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	fa93 f3a3 	rbit	r3, r3
 8005faa:	613b      	str	r3, [r7, #16]
  return result;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d104      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005fb6:	2320      	movs	r3, #32
 8005fb8:	e006      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x6bc>
 8005fba:	bf00      	nop
 8005fbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f003 021f 	and.w	r2, r3, #31
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3b1e      	subs	r3, #30
 8005fd6:	051b      	lsls	r3, r3, #20
 8005fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	6892      	ldr	r2, [r2, #8]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f7ff f97f 	bl	80052e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <HAL_ADC_ConfigChannel+0x7d8>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d06c      	beq.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ff4:	483c      	ldr	r0, [pc, #240]	; (80060e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8005ff6:	f7ff f8c1 	bl	800517c <LL_ADC_GetCommonPathInternalCh>
 8005ffa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a3a      	ldr	r2, [pc, #232]	; (80060ec <HAL_ADC_ConfigChannel+0x7e0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d127      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800600c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d121      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a35      	ldr	r2, [pc, #212]	; (80060f0 <HAL_ADC_ConfigChannel+0x7e4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d157      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800601e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006026:	4619      	mov	r1, r3
 8006028:	482f      	ldr	r0, [pc, #188]	; (80060e8 <HAL_ADC_ConfigChannel+0x7dc>)
 800602a:	f7ff f894 	bl	8005156 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_ADC_ConfigChannel+0x7e8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	4a30      	ldr	r2, [pc, #192]	; (80060f8 <HAL_ADC_ConfigChannel+0x7ec>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	4613      	mov	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006048:	e002      	b.n	8006050 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3b01      	subs	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f9      	bne.n	800604a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006056:	e03a      	b.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <HAL_ADC_ConfigChannel+0x7f0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <HAL_ADC_ConfigChannel+0x77e>
 8006062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <HAL_ADC_ConfigChannel+0x7e4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d12a      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800607c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006080:	4619      	mov	r1, r3
 8006082:	4819      	ldr	r0, [pc, #100]	; (80060e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006084:	f7ff f867 	bl	8005156 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006088:	e021      	b.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <HAL_ADC_ConfigChannel+0x7f4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d11c      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d116      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <HAL_ADC_ConfigChannel+0x7e4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d111      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060b2:	4619      	mov	r1, r3
 80060b4:	480c      	ldr	r0, [pc, #48]	; (80060e8 <HAL_ADC_ConfigChannel+0x7dc>)
 80060b6:	f7ff f84e 	bl	8005156 <LL_ADC_SetCommonPathInternalCh>
 80060ba:	e008      	b.n	80060ce <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80060d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80060da:	4618      	mov	r0, r3
 80060dc:	37d8      	adds	r7, #216	; 0xd8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	80080000 	.word	0x80080000
 80060e8:	50040300 	.word	0x50040300
 80060ec:	c7520000 	.word	0xc7520000
 80060f0:	50040000 	.word	0x50040000
 80060f4:	20000024 	.word	0x20000024
 80060f8:	053e2d63 	.word	0x053e2d63
 80060fc:	cb840000 	.word	0xcb840000
 8006100:	80000001 	.word	0x80000001

08006104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f9ab 	bl	8005470 <LL_ADC_IsEnabled>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d169      	bne.n	80061f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	4b36      	ldr	r3, [pc, #216]	; (8006200 <ADC_Enable+0xfc>)
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	f043 0201 	orr.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e055      	b.n	80061f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f966 	bl	8005420 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006154:	482b      	ldr	r0, [pc, #172]	; (8006204 <ADC_Enable+0x100>)
 8006156:	f7ff f811 	bl	800517c <LL_ADC_GetCommonPathInternalCh>
 800615a:	4603      	mov	r3, r0
 800615c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006164:	4b28      	ldr	r3, [pc, #160]	; (8006208 <ADC_Enable+0x104>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	099b      	lsrs	r3, r3, #6
 800616a:	4a28      	ldr	r2, [pc, #160]	; (800620c <ADC_Enable+0x108>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	099b      	lsrs	r3, r3, #6
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	4613      	mov	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800617e:	e002      	b.n	8006186 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3b01      	subs	r3, #1
 8006184:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f9      	bne.n	8006180 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800618c:	f7fe ffc4 	bl	8005118 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006192:	e028      	b.n	80061e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff f969 	bl	8005470 <LL_ADC_IsEnabled>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff f939 	bl	8005420 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061ae:	f7fe ffb3 	bl	8005118 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d914      	bls.n	80061e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d00d      	beq.n	80061e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f043 0210 	orr.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	f043 0201 	orr.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e007      	b.n	80061f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d1cf      	bne.n	8006194 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	8000003f 	.word	0x8000003f
 8006204:	50040300 	.word	0x50040300
 8006208:	20000024 	.word	0x20000024
 800620c:	053e2d63 	.word	0x053e2d63

08006210 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff f93a 	bl	8005496 <LL_ADC_IsDisableOngoing>
 8006222:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff f921 	bl	8005470 <LL_ADC_IsEnabled>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d047      	beq.n	80062c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d144      	bne.n	80062c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 030d 	and.w	r3, r3, #13
 8006244:	2b01      	cmp	r3, #1
 8006246:	d10c      	bne.n	8006262 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff f8fb 	bl	8005448 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2203      	movs	r2, #3
 8006258:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800625a:	f7fe ff5d 	bl	8005118 <HAL_GetTick>
 800625e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006260:	e029      	b.n	80062b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006266:	f043 0210 	orr.w	r2, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e023      	b.n	80062c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800627e:	f7fe ff4b 	bl	8005118 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d914      	bls.n	80062b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	f043 0210 	orr.w	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e007      	b.n	80062c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1dc      	bne.n	800627e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d14b      	bne.n	8006380 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d021      	beq.n	8006346 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe ffae 	bl	8005268 <LL_ADC_REG_IsTriggerSourceSWStart>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d032      	beq.n	8006378 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d12b      	bne.n	8006378 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d11f      	bne.n	8006378 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f043 0201 	orr.w	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
 8006344:	e018      	b.n	8006378 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	f043 0201 	orr.w	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff faa9 	bl	80058d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800637e:	e00e      	b.n	800639e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fab3 	bl	80058f8 <HAL_ADC_ErrorCallback>
}
 8006392:	e004      	b.n	800639e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fa95 	bl	80058e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e0:	f043 0204 	orr.w	r2, r3, #4
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fa85 	bl	80058f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <LL_ADC_StartCalibration>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006412:	4313      	orrs	r3, r2
 8006414:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_IsCalibrationOnGoing>:
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800643c:	d101      	bne.n	8006442 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_ADCEx_Calibration_Start+0x1c>
 8006468:	2302      	movs	r3, #2
 800646a:	e04d      	b.n	8006508 <HAL_ADCEx_Calibration_Start+0xb8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fecb 	bl	8006210 <ADC_Disable>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d136      	bne.n	80064f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006488:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800648c:	f023 0302 	bic.w	r3, r3, #2
 8006490:	f043 0202 	orr.w	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff ffa9 	bl	80063f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80064a4:	e014      	b.n	80064d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80064b2:	d30d      	bcc.n	80064d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	f023 0312 	bic.w	r3, r3, #18
 80064bc:	f043 0210 	orr.w	r2, r3, #16
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e01b      	b.n	8006508 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ffa7 	bl	8006428 <LL_ADC_IsCalibrationOnGoing>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e2      	bne.n	80064a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e4:	f023 0303 	bic.w	r3, r3, #3
 80064e8:	f043 0201 	orr.w	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	659a      	str	r2, [r3, #88]	; 0x58
 80064f0:	e005      	b.n	80064fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f043 0210 	orr.w	r2, r3, #16
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006520:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <__NVIC_SetPriorityGrouping+0x44>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800652c:	4013      	ands	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800653c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006542:	4a04      	ldr	r2, [pc, #16]	; (8006554 <__NVIC_SetPriorityGrouping+0x44>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	60d3      	str	r3, [r2, #12]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	e000ed00 	.word	0xe000ed00

08006558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800655c:	4b04      	ldr	r3, [pc, #16]	; (8006570 <__NVIC_GetPriorityGrouping+0x18>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	f003 0307 	and.w	r3, r3, #7
}
 8006566:	4618      	mov	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	e000ed00 	.word	0xe000ed00

08006574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	db0b      	blt.n	800659e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	4907      	ldr	r1, [pc, #28]	; (80065ac <__NVIC_EnableIRQ+0x38>)
 800658e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2001      	movs	r0, #1
 8006596:	fa00 f202 	lsl.w	r2, r0, r2
 800659a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000e100 	.word	0xe000e100

080065b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	db0a      	blt.n	80065da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	490c      	ldr	r1, [pc, #48]	; (80065fc <__NVIC_SetPriority+0x4c>)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	0112      	lsls	r2, r2, #4
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	440b      	add	r3, r1
 80065d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065d8:	e00a      	b.n	80065f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4908      	ldr	r1, [pc, #32]	; (8006600 <__NVIC_SetPriority+0x50>)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	3b04      	subs	r3, #4
 80065e8:	0112      	lsls	r2, r2, #4
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	440b      	add	r3, r1
 80065ee:	761a      	strb	r2, [r3, #24]
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	e000e100 	.word	0xe000e100
 8006600:	e000ed00 	.word	0xe000ed00

08006604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006604:	b480      	push	{r7}
 8006606:	b089      	sub	sp, #36	; 0x24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	bf28      	it	cs
 8006622:	2304      	movcs	r3, #4
 8006624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3304      	adds	r3, #4
 800662a:	2b06      	cmp	r3, #6
 800662c:	d902      	bls.n	8006634 <NVIC_EncodePriority+0x30>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3b03      	subs	r3, #3
 8006632:	e000      	b.n	8006636 <NVIC_EncodePriority+0x32>
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006638:	f04f 32ff 	mov.w	r2, #4294967295
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43da      	mvns	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	401a      	ands	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800664c:	f04f 31ff 	mov.w	r1, #4294967295
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	43d9      	mvns	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800665c:	4313      	orrs	r3, r2
         );
}
 800665e:	4618      	mov	r0, r3
 8006660:	3724      	adds	r7, #36	; 0x24
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800667c:	d301      	bcc.n	8006682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800667e:	2301      	movs	r3, #1
 8006680:	e00f      	b.n	80066a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <SysTick_Config+0x40>)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3b01      	subs	r3, #1
 8006688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800668a:	210f      	movs	r1, #15
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	f7ff ff8e 	bl	80065b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <SysTick_Config+0x40>)
 8006696:	2200      	movs	r2, #0
 8006698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800669a:	4b04      	ldr	r3, [pc, #16]	; (80066ac <SysTick_Config+0x40>)
 800669c:	2207      	movs	r2, #7
 800669e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	e000e010 	.word	0xe000e010

080066b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff29 	bl	8006510 <__NVIC_SetPriorityGrouping>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	4603      	mov	r3, r0
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066d8:	f7ff ff3e 	bl	8006558 <__NVIC_GetPriorityGrouping>
 80066dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff8e 	bl	8006604 <NVIC_EncodePriority>
 80066e8:	4602      	mov	r2, r0
 80066ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff5d 	bl	80065b0 <__NVIC_SetPriority>
}
 80066f6:	bf00      	nop
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	4603      	mov	r3, r0
 8006706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff31 	bl	8006574 <__NVIC_EnableIRQ>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff ffa2 	bl	800666c <SysTick_Config>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e098      	b.n	8006878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	4b4d      	ldr	r3, [pc, #308]	; (8006884 <HAL_DMA_Init+0x150>)
 800674e:	429a      	cmp	r2, r3
 8006750:	d80f      	bhi.n	8006772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <HAL_DMA_Init+0x154>)
 800675a:	4413      	add	r3, r2
 800675c:	4a4b      	ldr	r2, [pc, #300]	; (800688c <HAL_DMA_Init+0x158>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	091b      	lsrs	r3, r3, #4
 8006764:	009a      	lsls	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a48      	ldr	r2, [pc, #288]	; (8006890 <HAL_DMA_Init+0x15c>)
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
 8006770:	e00e      	b.n	8006790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	4b46      	ldr	r3, [pc, #280]	; (8006894 <HAL_DMA_Init+0x160>)
 800677a:	4413      	add	r3, r2
 800677c:	4a43      	ldr	r2, [pc, #268]	; (800688c <HAL_DMA_Init+0x158>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	009a      	lsls	r2, r3, #2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a42      	ldr	r2, [pc, #264]	; (8006898 <HAL_DMA_Init+0x164>)
 800678e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80067b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ea:	d039      	beq.n	8006860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	4a27      	ldr	r2, [pc, #156]	; (8006890 <HAL_DMA_Init+0x15c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d11a      	bne.n	800682c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80067f6:	4b29      	ldr	r3, [pc, #164]	; (800689c <HAL_DMA_Init+0x168>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f003 031c 	and.w	r3, r3, #28
 8006802:	210f      	movs	r1, #15
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	4924      	ldr	r1, [pc, #144]	; (800689c <HAL_DMA_Init+0x168>)
 800680c:	4013      	ands	r3, r2
 800680e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006810:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_DMA_Init+0x168>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	f003 031c 	and.w	r3, r3, #28
 8006820:	fa01 f303 	lsl.w	r3, r1, r3
 8006824:	491d      	ldr	r1, [pc, #116]	; (800689c <HAL_DMA_Init+0x168>)
 8006826:	4313      	orrs	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	e019      	b.n	8006860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800682c:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <HAL_DMA_Init+0x16c>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f003 031c 	and.w	r3, r3, #28
 8006838:	210f      	movs	r1, #15
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	4917      	ldr	r1, [pc, #92]	; (80068a0 <HAL_DMA_Init+0x16c>)
 8006842:	4013      	ands	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <HAL_DMA_Init+0x16c>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	f003 031c 	and.w	r3, r3, #28
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	4911      	ldr	r1, [pc, #68]	; (80068a0 <HAL_DMA_Init+0x16c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	40020407 	.word	0x40020407
 8006888:	bffdfff8 	.word	0xbffdfff8
 800688c:	cccccccd 	.word	0xcccccccd
 8006890:	40020000 	.word	0x40020000
 8006894:	bffdfbf8 	.word	0xbffdfbf8
 8006898:	40020400 	.word	0x40020400
 800689c:	400200a8 	.word	0x400200a8
 80068a0:	400204a8 	.word	0x400204a8

080068a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_DMA_Start_IT+0x20>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e04b      	b.n	800695c <HAL_DMA_Start_IT+0xb8>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d13a      	bne.n	800694e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f8e0 	bl	8006ac2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 020e 	orr.w	r2, r2, #14
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e00f      	b.n	800693c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0204 	bic.w	r2, r2, #4
 800692a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 020a 	orr.w	r2, r2, #10
 800693a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e005      	b.n	800695a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006956:	2302      	movs	r3, #2
 8006958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	f003 031c 	and.w	r3, r3, #28
 8006984:	2204      	movs	r2, #4
 8006986:	409a      	lsls	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d026      	beq.n	80069de <HAL_DMA_IRQHandler+0x7a>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d021      	beq.n	80069de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	f003 021c 	and.w	r2, r3, #28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	2104      	movs	r1, #4
 80069c6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d071      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80069dc:	e06c      	b.n	8006ab8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	f003 031c 	and.w	r3, r3, #28
 80069e6:	2202      	movs	r2, #2
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02e      	beq.n	8006a50 <HAL_DMA_IRQHandler+0xec>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d029      	beq.n	8006a50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 020a 	bic.w	r2, r2, #10
 8006a18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f003 021c 	and.w	r2, r3, #28
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2102      	movs	r1, #2
 8006a30:	fa01 f202 	lsl.w	r2, r1, r2
 8006a34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d038      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a4e:	e033      	b.n	8006ab8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	f003 031c 	and.w	r3, r3, #28
 8006a58:	2208      	movs	r2, #8
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02a      	beq.n	8006aba <HAL_DMA_IRQHandler+0x156>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d025      	beq.n	8006aba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 020e 	bic.w	r2, r2, #14
 8006a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	f003 021c 	and.w	r2, r3, #28
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
}
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad4:	f003 021c 	and.w	r2, r3, #28
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d108      	bne.n	8006b06 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b04:	e007      	b.n	8006b16 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]
}
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b32:	e154      	b.n	8006dde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	4013      	ands	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8146 	beq.w	8006dd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d005      	beq.n	8006b64 <HAL_GPIO_Init+0x40>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d130      	bne.n	8006bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	f003 0201 	and.w	r2, r3, #1
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d017      	beq.n	8006c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	2203      	movs	r2, #3
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43db      	mvns	r3, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d123      	bne.n	8006c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	08da      	lsrs	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3208      	adds	r2, #8
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	220f      	movs	r2, #15
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	08da      	lsrs	r2, r3, #3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3208      	adds	r2, #8
 8006c50:	6939      	ldr	r1, [r7, #16]
 8006c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	2203      	movs	r2, #3
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	43db      	mvns	r3, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f003 0203 	and.w	r2, r3, #3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80a0 	beq.w	8006dd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c98:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <HAL_GPIO_Init+0x2d8>)
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	4a57      	ldr	r2, [pc, #348]	; (8006dfc <HAL_GPIO_Init+0x2d8>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8006ca4:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <HAL_GPIO_Init+0x2d8>)
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006cb0:	4a53      	ldr	r2, [pc, #332]	; (8006e00 <HAL_GPIO_Init+0x2dc>)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	220f      	movs	r2, #15
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cda:	d019      	beq.n	8006d10 <HAL_GPIO_Init+0x1ec>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a49      	ldr	r2, [pc, #292]	; (8006e04 <HAL_GPIO_Init+0x2e0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_GPIO_Init+0x1e8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a48      	ldr	r2, [pc, #288]	; (8006e08 <HAL_GPIO_Init+0x2e4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00d      	beq.n	8006d08 <HAL_GPIO_Init+0x1e4>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a47      	ldr	r2, [pc, #284]	; (8006e0c <HAL_GPIO_Init+0x2e8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <HAL_GPIO_Init+0x1e0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a46      	ldr	r2, [pc, #280]	; (8006e10 <HAL_GPIO_Init+0x2ec>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d101      	bne.n	8006d00 <HAL_GPIO_Init+0x1dc>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	e008      	b.n	8006d12 <HAL_GPIO_Init+0x1ee>
 8006d00:	2307      	movs	r3, #7
 8006d02:	e006      	b.n	8006d12 <HAL_GPIO_Init+0x1ee>
 8006d04:	2303      	movs	r3, #3
 8006d06:	e004      	b.n	8006d12 <HAL_GPIO_Init+0x1ee>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e002      	b.n	8006d12 <HAL_GPIO_Init+0x1ee>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <HAL_GPIO_Init+0x1ee>
 8006d10:	2300      	movs	r3, #0
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	f002 0203 	and.w	r2, r2, #3
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	4093      	lsls	r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d22:	4937      	ldr	r1, [pc, #220]	; (8006e00 <HAL_GPIO_Init+0x2dc>)
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	089b      	lsrs	r3, r3, #2
 8006d28:	3302      	adds	r3, #2
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d30:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d54:	4a2f      	ldr	r2, [pc, #188]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d5a:	4b2e      	ldr	r3, [pc, #184]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4013      	ands	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006d84:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4013      	ands	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006da8:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006dae:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	43db      	mvns	r3, r3
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <HAL_GPIO_Init+0x2f0>)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f aea3 	bne.w	8006b34 <HAL_GPIO_Init+0x10>
  }
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	40010000 	.word	0x40010000
 8006e04:	48000400 	.word	0x48000400
 8006e08:	48000800 	.word	0x48000800
 8006e0c:	48000c00 	.word	0x48000c00
 8006e10:	48001000 	.word	0x48001000
 8006e14:	40010400 	.word	0x40010400

08006e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e001      	b.n	8006e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
 8006e54:	4613      	mov	r3, r2
 8006e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e58:	787b      	ldrb	r3, [r7, #1]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e5e:	887a      	ldrh	r2, [r7, #2]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e64:	e002      	b.n	8006e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e66:	887a      	ldrh	r2, [r7, #2]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d006      	beq.n	8006e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e8e:	4a05      	ldr	r2, [pc, #20]	; (8006ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fc fb70 	bl	800357c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40010400 	.word	0x40010400

08006ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40007000 	.word	0x40007000

08006ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed2:	d130      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ed4:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d038      	beq.n	8006f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eea:	4a1e      	ldr	r2, [pc, #120]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ef0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2232      	movs	r2, #50	; 0x32
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	4a1b      	ldr	r2, [pc, #108]	; (8006f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	0c9b      	lsrs	r3, r3, #18
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f08:	e002      	b.n	8006f10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f10:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d102      	bne.n	8006f24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f2      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f30:	d110      	bne.n	8006f54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e00f      	b.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d007      	beq.n	8006f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f44:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f4c:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40007000 	.word	0x40007000
 8006f68:	20000024 	.word	0x20000024
 8006f6c:	431bde83 	.word	0x431bde83

08006f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f000 bc02 	b.w	8007788 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f84:	4b96      	ldr	r3, [pc, #600]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 030c 	and.w	r3, r3, #12
 8006f8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f8e:	4b94      	ldr	r3, [pc, #592]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80e4 	beq.w	800716e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <HAL_RCC_OscConfig+0x4c>
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b0c      	cmp	r3, #12
 8006fb0:	f040 808b 	bne.w	80070ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	f040 8087 	bne.w	80070ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fbc:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x64>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e3d9      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	4b81      	ldr	r3, [pc, #516]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCC_OscConfig+0x7e>
 8006fe4:	4b7e      	ldr	r3, [pc, #504]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fec:	e005      	b.n	8006ffa <HAL_RCC_OscConfig+0x8a>
 8006fee:	4b7c      	ldr	r3, [pc, #496]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d223      	bcs.n	8007046 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fd8c 	bl	8007b20 <RCC_SetFlashLatencyFromMSIRange>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e3ba      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007012:	4b73      	ldr	r3, [pc, #460]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a72      	ldr	r2, [pc, #456]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007018:	f043 0308 	orr.w	r3, r3, #8
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	4b70      	ldr	r3, [pc, #448]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	496d      	ldr	r1, [pc, #436]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800702c:	4313      	orrs	r3, r2
 800702e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007030:	4b6b      	ldr	r3, [pc, #428]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	4968      	ldr	r1, [pc, #416]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007040:	4313      	orrs	r3, r2
 8007042:	604b      	str	r3, [r1, #4]
 8007044:	e025      	b.n	8007092 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007046:	4b66      	ldr	r3, [pc, #408]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a65      	ldr	r2, [pc, #404]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800704c:	f043 0308 	orr.w	r3, r3, #8
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	4960      	ldr	r1, [pc, #384]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007064:	4b5e      	ldr	r3, [pc, #376]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	495b      	ldr	r1, [pc, #364]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007074:	4313      	orrs	r3, r2
 8007076:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fd4c 	bl	8007b20 <RCC_SetFlashLatencyFromMSIRange>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e37a      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007092:	f000 fc81 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 8007096:	4602      	mov	r2, r0
 8007098:	4b51      	ldr	r3, [pc, #324]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	4950      	ldr	r1, [pc, #320]	; (80071e4 <HAL_RCC_OscConfig+0x274>)
 80070a4:	5ccb      	ldrb	r3, [r1, r3]
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	4a4e      	ldr	r2, [pc, #312]	; (80071e8 <HAL_RCC_OscConfig+0x278>)
 80070b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070b2:	4b4e      	ldr	r3, [pc, #312]	; (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd ffde 	bl	8005078 <HAL_InitTick>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d052      	beq.n	800716c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	e35e      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d032      	beq.n	8007138 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070d2:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070de:	f7fe f81b 	bl	8005118 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070e6:	f7fe f817 	bl	8005118 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e347      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070f8:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007104:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800710a:	f043 0308 	orr.w	r3, r3, #8
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	4b33      	ldr	r3, [pc, #204]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	4930      	ldr	r1, [pc, #192]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007122:	4b2f      	ldr	r3, [pc, #188]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	492b      	ldr	r1, [pc, #172]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007132:	4313      	orrs	r3, r2
 8007134:	604b      	str	r3, [r1, #4]
 8007136:	e01a      	b.n	800716e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007138:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007144:	f7fd ffe8 	bl	8005118 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800714c:	f7fd ffe4 	bl	8005118 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e314      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800715e:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0x1dc>
 800716a:	e000      	b.n	800716e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800716c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d073      	beq.n	8007262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d005      	beq.n	800718c <HAL_RCC_OscConfig+0x21c>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d10e      	bne.n	80071a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d10b      	bne.n	80071a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800718c:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d063      	beq.n	8007260 <HAL_RCC_OscConfig+0x2f0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d15f      	bne.n	8007260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e2f1      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d106      	bne.n	80071bc <HAL_RCC_OscConfig+0x24c>
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a0b      	ldr	r2, [pc, #44]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e025      	b.n	8007208 <HAL_RCC_OscConfig+0x298>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c4:	d114      	bne.n	80071f0 <HAL_RCC_OscConfig+0x280>
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a05      	ldr	r2, [pc, #20]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a02      	ldr	r2, [pc, #8]	; (80071e0 <HAL_RCC_OscConfig+0x270>)
 80071d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	e013      	b.n	8007208 <HAL_RCC_OscConfig+0x298>
 80071e0:	40021000 	.word	0x40021000
 80071e4:	0801116c 	.word	0x0801116c
 80071e8:	20000024 	.word	0x20000024
 80071ec:	20000028 	.word	0x20000028
 80071f0:	4ba0      	ldr	r3, [pc, #640]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a9f      	ldr	r2, [pc, #636]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80071f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	4b9d      	ldr	r3, [pc, #628]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a9c      	ldr	r2, [pc, #624]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d013      	beq.n	8007238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fd ff82 	bl	8005118 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007218:	f7fd ff7e 	bl	8005118 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	; 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e2ae      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722a:	4b92      	ldr	r3, [pc, #584]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x2a8>
 8007236:	e014      	b.n	8007262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fd ff6e 	bl	8005118 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007240:	f7fd ff6a 	bl	8005118 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e29a      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x2d0>
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d060      	beq.n	8007330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d005      	beq.n	8007280 <HAL_RCC_OscConfig+0x310>
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	2b0c      	cmp	r3, #12
 8007278:	d119      	bne.n	80072ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d116      	bne.n	80072ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007280:	4b7c      	ldr	r3, [pc, #496]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_OscConfig+0x328>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e277      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007298:	4b76      	ldr	r3, [pc, #472]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	4973      	ldr	r1, [pc, #460]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072ac:	e040      	b.n	8007330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d023      	beq.n	80072fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072b6:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6e      	ldr	r2, [pc, #440]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c2:	f7fd ff29 	bl	8005118 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ca:	f7fd ff25 	bl	8005118 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e255      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072dc:	4b65      	ldr	r3, [pc, #404]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e8:	4b62      	ldr	r3, [pc, #392]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	495f      	ldr	r1, [pc, #380]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	604b      	str	r3, [r1, #4]
 80072fc:	e018      	b.n	8007330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072fe:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a5c      	ldr	r2, [pc, #368]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fd ff05 	bl	8005118 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007312:	f7fd ff01 	bl	8005118 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e231      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007324:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f0      	bne.n	8007312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d03c      	beq.n	80073b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734a:	4a4a      	ldr	r2, [pc, #296]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007354:	f7fd fee0 	bl	8005118 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800735c:	f7fd fedc 	bl	8005118 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e20c      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800736e:	4b41      	ldr	r3, [pc, #260]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0ef      	beq.n	800735c <HAL_RCC_OscConfig+0x3ec>
 800737c:	e01b      	b.n	80073b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800737e:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007384:	4a3b      	ldr	r2, [pc, #236]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738e:	f7fd fec3 	bl	8005118 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007396:	f7fd febf 	bl	8005118 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e1ef      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073a8:	4b32      	ldr	r3, [pc, #200]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80073aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1ef      	bne.n	8007396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80a6 	beq.w	8007510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c4:	2300      	movs	r3, #0
 80073c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073c8:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d4:	4b27      	ldr	r3, [pc, #156]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80073d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d8:	4a26      	ldr	r2, [pc, #152]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073de:	6593      	str	r3, [r2, #88]	; 0x58
 80073e0:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ec:	2301      	movs	r3, #1
 80073ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f0:	4b21      	ldr	r3, [pc, #132]	; (8007478 <HAL_RCC_OscConfig+0x508>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d118      	bne.n	800742e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073fc:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <HAL_RCC_OscConfig+0x508>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1d      	ldr	r2, [pc, #116]	; (8007478 <HAL_RCC_OscConfig+0x508>)
 8007402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007408:	f7fd fe86 	bl	8005118 <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007410:	f7fd fe82 	bl	8005118 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e1b2      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <HAL_RCC_OscConfig+0x508>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f0      	beq.n	8007410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d108      	bne.n	8007448 <HAL_RCC_OscConfig+0x4d8>
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743c:	4a0d      	ldr	r2, [pc, #52]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007446:	e029      	b.n	800749c <HAL_RCC_OscConfig+0x52c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b05      	cmp	r3, #5
 800744e:	d115      	bne.n	800747c <HAL_RCC_OscConfig+0x50c>
 8007450:	4b08      	ldr	r3, [pc, #32]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007456:	4a07      	ldr	r2, [pc, #28]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007458:	f043 0304 	orr.w	r3, r3, #4
 800745c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	4a03      	ldr	r2, [pc, #12]	; (8007474 <HAL_RCC_OscConfig+0x504>)
 8007468:	f043 0301 	orr.w	r3, r3, #1
 800746c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007470:	e014      	b.n	800749c <HAL_RCC_OscConfig+0x52c>
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000
 8007478:	40007000 	.word	0x40007000
 800747c:	4b9a      	ldr	r3, [pc, #616]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	4a99      	ldr	r2, [pc, #612]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800748c:	4b96      	ldr	r3, [pc, #600]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	4a95      	ldr	r2, [pc, #596]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007494:	f023 0304 	bic.w	r3, r3, #4
 8007498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d016      	beq.n	80074d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fd fe38 	bl	8005118 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ac:	f7fd fe34 	bl	8005118 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e162      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074c2:	4b89      	ldr	r3, [pc, #548]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ed      	beq.n	80074ac <HAL_RCC_OscConfig+0x53c>
 80074d0:	e015      	b.n	80074fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d2:	f7fd fe21 	bl	8005118 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074d8:	e00a      	b.n	80074f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074da:	f7fd fe1d 	bl	8005118 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e14b      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074f0:	4b7d      	ldr	r3, [pc, #500]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1ed      	bne.n	80074da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d105      	bne.n	8007510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007504:	4b78      	ldr	r3, [pc, #480]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007508:	4a77      	ldr	r2, [pc, #476]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 800750a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d03c      	beq.n	8007596 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01c      	beq.n	800755e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007524:	4b70      	ldr	r3, [pc, #448]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800752a:	4a6f      	ldr	r2, [pc, #444]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007534:	f7fd fdf0 	bl	8005118 <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800753c:	f7fd fdec 	bl	8005118 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e11c      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800754e:	4b66      	ldr	r3, [pc, #408]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0ef      	beq.n	800753c <HAL_RCC_OscConfig+0x5cc>
 800755c:	e01b      	b.n	8007596 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800755e:	4b62      	ldr	r3, [pc, #392]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007564:	4a60      	ldr	r2, [pc, #384]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756e:	f7fd fdd3 	bl	8005118 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007576:	f7fd fdcf 	bl	8005118 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0ff      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007588:	4b57      	ldr	r3, [pc, #348]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 800758a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1ef      	bne.n	8007576 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80f3 	beq.w	8007786 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	f040 80c9 	bne.w	800773c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075aa:	4b4f      	ldr	r3, [pc, #316]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f003 0203 	and.w	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d12c      	bne.n	8007618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	3b01      	subs	r3, #1
 80075ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d123      	bne.n	8007618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d11b      	bne.n	8007618 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d113      	bne.n	8007618 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	3b01      	subs	r3, #1
 80075fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007600:	429a      	cmp	r2, r3
 8007602:	d109      	bne.n	8007618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	3b01      	subs	r3, #1
 8007612:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d06b      	beq.n	80076f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	2b0c      	cmp	r3, #12
 800761c:	d062      	beq.n	80076e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800761e:	4b32      	ldr	r3, [pc, #200]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e0ac      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800762e:	4b2e      	ldr	r3, [pc, #184]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2d      	ldr	r2, [pc, #180]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007638:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800763a:	f7fd fd6d 	bl	8005118 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007642:	f7fd fd69 	bl	8005118 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e099      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007654:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007660:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	4b21      	ldr	r3, [pc, #132]	; (80076ec <HAL_RCC_OscConfig+0x77c>)
 8007666:	4013      	ands	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007670:	3a01      	subs	r2, #1
 8007672:	0112      	lsls	r2, r2, #4
 8007674:	4311      	orrs	r1, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800767a:	0212      	lsls	r2, r2, #8
 800767c:	4311      	orrs	r1, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007682:	0852      	lsrs	r2, r2, #1
 8007684:	3a01      	subs	r2, #1
 8007686:	0552      	lsls	r2, r2, #21
 8007688:	4311      	orrs	r1, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800768e:	0852      	lsrs	r2, r2, #1
 8007690:	3a01      	subs	r2, #1
 8007692:	0652      	lsls	r2, r2, #25
 8007694:	4311      	orrs	r1, r2
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800769a:	06d2      	lsls	r2, r2, #27
 800769c:	430a      	orrs	r2, r1
 800769e:	4912      	ldr	r1, [pc, #72]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076a4:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a0f      	ldr	r2, [pc, #60]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076bc:	f7fd fd2c 	bl	8005118 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c4:	f7fd fd28 	bl	8005118 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e058      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076d6:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <HAL_RCC_OscConfig+0x778>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076e2:	e050      	b.n	8007786 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e04f      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
 80076e8:	40021000 	.word	0x40021000
 80076ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f0:	4b27      	ldr	r3, [pc, #156]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d144      	bne.n	8007786 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80076fc:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 8007702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a20      	ldr	r2, [pc, #128]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 800770e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007714:	f7fd fd00 	bl	8005118 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800771c:	f7fd fcfc 	bl	8005118 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e02c      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772e:	4b18      	ldr	r3, [pc, #96]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x7ac>
 800773a:	e024      	b.n	8007786 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b0c      	cmp	r3, #12
 8007740:	d01f      	beq.n	8007782 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 8007748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774e:	f7fd fce3 	bl	8005118 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007756:	f7fd fcdf 	bl	8005118 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f0      	bne.n	8007756 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	4905      	ldr	r1, [pc, #20]	; (8007790 <HAL_RCC_OscConfig+0x820>)
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <HAL_RCC_OscConfig+0x824>)
 800777c:	4013      	ands	r3, r2
 800777e:	60cb      	str	r3, [r1, #12]
 8007780:	e001      	b.n	8007786 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40021000 	.word	0x40021000
 8007794:	feeefffc 	.word	0xfeeefffc

08007798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0e7      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077ac:	4b75      	ldr	r3, [pc, #468]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d910      	bls.n	80077dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ba:	4b72      	ldr	r3, [pc, #456]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f023 0207 	bic.w	r2, r3, #7
 80077c2:	4970      	ldr	r1, [pc, #448]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ca:	4b6e      	ldr	r3, [pc, #440]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d001      	beq.n	80077dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0cf      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d010      	beq.n	800780a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	4b66      	ldr	r3, [pc, #408]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d908      	bls.n	800780a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f8:	4b63      	ldr	r3, [pc, #396]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4960      	ldr	r1, [pc, #384]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007806:	4313      	orrs	r3, r2
 8007808:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d04c      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d107      	bne.n	800782e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800781e:	4b5a      	ldr	r3, [pc, #360]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d121      	bne.n	800786e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e0a6      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d107      	bne.n	8007846 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007836:	4b54      	ldr	r3, [pc, #336]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d115      	bne.n	800786e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e09a      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d107      	bne.n	800785e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800784e:	4b4e      	ldr	r3, [pc, #312]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e08e      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800785e:	4b4a      	ldr	r3, [pc, #296]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e086      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800786e:	4b46      	ldr	r3, [pc, #280]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 0203 	bic.w	r2, r3, #3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4943      	ldr	r1, [pc, #268]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 800787c:	4313      	orrs	r3, r2
 800787e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007880:	f7fd fc4a 	bl	8005118 <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007886:	e00a      	b.n	800789e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007888:	f7fd fc46 	bl	8005118 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	f241 3288 	movw	r2, #5000	; 0x1388
 8007896:	4293      	cmp	r3, r2
 8007898:	d901      	bls.n	800789e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e06e      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	4b3a      	ldr	r3, [pc, #232]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 020c 	and.w	r2, r3, #12
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d1eb      	bne.n	8007888 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	4b31      	ldr	r3, [pc, #196]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d208      	bcs.n	80078de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078cc:	4b2e      	ldr	r3, [pc, #184]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	492b      	ldr	r1, [pc, #172]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078de:	4b29      	ldr	r3, [pc, #164]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d210      	bcs.n	800790e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ec:	4b25      	ldr	r3, [pc, #148]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f023 0207 	bic.w	r2, r3, #7
 80078f4:	4923      	ldr	r1, [pc, #140]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fc:	4b21      	ldr	r3, [pc, #132]	; (8007984 <HAL_RCC_ClockConfig+0x1ec>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d001      	beq.n	800790e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e036      	b.n	800797c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	4918      	ldr	r1, [pc, #96]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007928:	4313      	orrs	r3, r2
 800792a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007938:	4b13      	ldr	r3, [pc, #76]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4910      	ldr	r1, [pc, #64]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007948:	4313      	orrs	r3, r2
 800794a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800794c:	f000 f824 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <HAL_RCC_ClockConfig+0x1f0>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	490b      	ldr	r1, [pc, #44]	; (800798c <HAL_RCC_ClockConfig+0x1f4>)
 800795e:	5ccb      	ldrb	r3, [r1, r3]
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <HAL_RCC_ClockConfig+0x1f8>)
 800796a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_ClockConfig+0x1fc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f7fd fb81 	bl	8005078 <HAL_InitTick>
 8007976:	4603      	mov	r3, r0
 8007978:	72fb      	strb	r3, [r7, #11]

  return status;
 800797a:	7afb      	ldrb	r3, [r7, #11]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40022000 	.word	0x40022000
 8007988:	40021000 	.word	0x40021000
 800798c:	0801116c 	.word	0x0801116c
 8007990:	20000024 	.word	0x20000024
 8007994:	20000028 	.word	0x20000028

08007998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a6:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079b0:	4b3b      	ldr	r3, [pc, #236]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x34>
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	d121      	bne.n	8007a0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d11e      	bne.n	8007a0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80079cc:	4b34      	ldr	r3, [pc, #208]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d107      	bne.n	80079e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80079d8:	4b31      	ldr	r3, [pc, #196]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80079da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	e005      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80079e8:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80079f4:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a08:	e00a      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d102      	bne.n	8007a16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	e004      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a1c:	4b23      	ldr	r3, [pc, #140]	; (8007aac <HAL_RCC_GetSysClockFreq+0x114>)
 8007a1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b0c      	cmp	r3, #12
 8007a24:	d134      	bne.n	8007a90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d003      	beq.n	8007a3e <HAL_RCC_GetSysClockFreq+0xa6>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d003      	beq.n	8007a44 <HAL_RCC_GetSysClockFreq+0xac>
 8007a3c:	e005      	b.n	8007a4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007a40:	617b      	str	r3, [r7, #20]
      break;
 8007a42:	e005      	b.n	8007a50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007a44:	4b19      	ldr	r3, [pc, #100]	; (8007aac <HAL_RCC_GetSysClockFreq+0x114>)
 8007a46:	617b      	str	r3, [r7, #20]
      break;
 8007a48:	e002      	b.n	8007a50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	617b      	str	r3, [r7, #20]
      break;
 8007a4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a50:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a5e:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	fb03 f202 	mul.w	r2, r3, r2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	0e5b      	lsrs	r3, r3, #25
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	3301      	adds	r3, #1
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a90:	69bb      	ldr	r3, [r7, #24]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	; 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	08011184 	.word	0x08011184
 8007aa8:	00f42400 	.word	0x00f42400
 8007aac:	007a1200 	.word	0x007a1200

08007ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000024 	.word	0x20000024

08007ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007acc:	f7ff fff0 	bl	8007ab0 <HAL_RCC_GetHCLKFreq>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	4904      	ldr	r1, [pc, #16]	; (8007af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ade:	5ccb      	ldrb	r3, [r1, r3]
 8007ae0:	f003 031f 	and.w	r3, r3, #31
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40021000 	.word	0x40021000
 8007af0:	0801117c 	.word	0x0801117c

08007af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007af8:	f7ff ffda 	bl	8007ab0 <HAL_RCC_GetHCLKFreq>
 8007afc:	4602      	mov	r2, r0
 8007afe:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	0adb      	lsrs	r3, r3, #11
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b0a:	5ccb      	ldrb	r3, [r1, r3]
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40021000 	.word	0x40021000
 8007b1c:	0801117c 	.word	0x0801117c

08007b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b38:	f7ff f9b6 	bl	8006ea8 <HAL_PWREx_GetVoltageRange>
 8007b3c:	6178      	str	r0, [r7, #20]
 8007b3e:	e014      	b.n	8007b6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b40:	4b25      	ldr	r3, [pc, #148]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b44:	4a24      	ldr	r2, [pc, #144]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007b4c:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b58:	f7ff f9a6 	bl	8006ea8 <HAL_PWREx_GetVoltageRange>
 8007b5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b62:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b70:	d10b      	bne.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d919      	bls.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2ba0      	cmp	r3, #160	; 0xa0
 8007b7c:	d902      	bls.n	8007b84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b7e:	2302      	movs	r3, #2
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	e013      	b.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b84:	2301      	movs	r3, #1
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	e010      	b.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d902      	bls.n	8007b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007b90:	2303      	movs	r3, #3
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	e00a      	b.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d102      	bne.n	8007ba2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e004      	b.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b70      	cmp	r3, #112	; 0x70
 8007ba6:	d101      	bne.n	8007bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ba8:	2301      	movs	r3, #1
 8007baa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f023 0207 	bic.w	r2, r3, #7
 8007bb4:	4909      	ldr	r1, [pc, #36]	; (8007bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007bbc:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d001      	beq.n	8007bce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40022000 	.word	0x40022000

08007be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007be8:	2300      	movs	r3, #0
 8007bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bec:	2300      	movs	r3, #0
 8007bee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d031      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c04:	d01a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007c06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c0a:	d814      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c14:	d10f      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007c16:	4b5d      	ldr	r3, [pc, #372]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4a5c      	ldr	r2, [pc, #368]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c22:	e00c      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fa44 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	74fb      	strb	r3, [r7, #19]
      break;
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3e:	7cfb      	ldrb	r3, [r7, #19]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c44:	4b51      	ldr	r3, [pc, #324]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	494e      	ldr	r1, [pc, #312]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c5a:	e001      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	7cfb      	ldrb	r3, [r7, #19]
 8007c5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 809e 	beq.w	8007daa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c72:	4b46      	ldr	r3, [pc, #280]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c88:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8c:	4a3f      	ldr	r2, [pc, #252]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c92:	6593      	str	r3, [r2, #88]	; 0x58
 8007c94:	4b3d      	ldr	r3, [pc, #244]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ca4:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a39      	ldr	r2, [pc, #228]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cb0:	f7fd fa32 	bl	8005118 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007cb6:	e009      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb8:	f7fd fa2e 	bl	8005118 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d902      	bls.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	74fb      	strb	r3, [r7, #19]
        break;
 8007cca:	e005      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ccc:	4b30      	ldr	r3, [pc, #192]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0ef      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d15a      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cde:	4b2b      	ldr	r3, [pc, #172]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01e      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d019      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cfa:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d06:	4b21      	ldr	r3, [pc, #132]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d16:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d26:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d016      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d38:	f7fd f9ee 	bl	8005118 <HAL_GetTick>
 8007d3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d3e:	e00b      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d40:	f7fd f9ea 	bl	8005118 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d902      	bls.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	74fb      	strb	r3, [r7, #19]
            break;
 8007d56:	e006      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0ec      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007d66:	7cfb      	ldrb	r3, [r7, #19]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d6c:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7a:	4904      	ldr	r1, [pc, #16]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d82:	e009      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d84:	7cfb      	ldrb	r3, [r7, #19]
 8007d86:	74bb      	strb	r3, [r7, #18]
 8007d88:	e006      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000
 8007d90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d98:	7c7b      	ldrb	r3, [r7, #17]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d105      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d9e:	4b9e      	ldr	r3, [pc, #632]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da2:	4a9d      	ldr	r2, [pc, #628]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007db6:	4b98      	ldr	r3, [pc, #608]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbc:	f023 0203 	bic.w	r2, r3, #3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	4994      	ldr	r1, [pc, #592]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dd8:	4b8f      	ldr	r3, [pc, #572]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	f023 020c 	bic.w	r2, r3, #12
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	498c      	ldr	r1, [pc, #560]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dfa:	4b87      	ldr	r3, [pc, #540]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	4983      	ldr	r1, [pc, #524]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e1c:	4b7e      	ldr	r3, [pc, #504]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	497b      	ldr	r1, [pc, #492]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e3e:	4b76      	ldr	r3, [pc, #472]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	4972      	ldr	r1, [pc, #456]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e60:	4b6d      	ldr	r3, [pc, #436]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e66:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	496a      	ldr	r1, [pc, #424]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e82:	4b65      	ldr	r3, [pc, #404]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e90:	4961      	ldr	r1, [pc, #388]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ea4:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb2:	4959      	ldr	r1, [pc, #356]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ec6:	4b54      	ldr	r3, [pc, #336]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	4950      	ldr	r1, [pc, #320]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	4948      	ldr	r1, [pc, #288]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f0a:	4b43      	ldr	r3, [pc, #268]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f10:	f023 0203 	bic.w	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	493f      	ldr	r1, [pc, #252]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d028      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f2c:	4b3a      	ldr	r3, [pc, #232]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3a:	4937      	ldr	r1, [pc, #220]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4a:	d106      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f4c:	4b32      	ldr	r3, [pc, #200]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4a31      	ldr	r2, [pc, #196]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f56:	60d3      	str	r3, [r2, #12]
 8007f58:	e011      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f62:	d10c      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f8a4 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007f74:	7cfb      	ldrb	r3, [r7, #19]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d028      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f8a:	4b23      	ldr	r3, [pc, #140]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f98:	491f      	ldr	r1, [pc, #124]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fb4:	60d3      	str	r3, [r2, #12]
 8007fb6:	e011      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc0:	d10c      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f875 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fd2:	7cfb      	ldrb	r3, [r7, #19]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007fd8:	7cfb      	ldrb	r3, [r7, #19]
 8007fda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02b      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	4908      	ldr	r1, [pc, #32]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008006:	d109      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008008:	4b03      	ldr	r3, [pc, #12]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a02      	ldr	r2, [pc, #8]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800800e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008012:	60d3      	str	r3, [r2, #12]
 8008014:	e014      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8008016:	bf00      	nop
 8008018:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008024:	d10c      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3304      	adds	r3, #4
 800802a:	2101      	movs	r1, #1
 800802c:	4618      	mov	r0, r3
 800802e:	f000 f843 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008036:	7cfb      	ldrb	r3, [r7, #19]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800803c:	7cfb      	ldrb	r3, [r7, #19]
 800803e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01c      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	4916      	ldr	r1, [pc, #88]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800805c:	4313      	orrs	r3, r2
 800805e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800806a:	d10c      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	2102      	movs	r1, #2
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f820 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800807c:	7cfb      	ldrb	r3, [r7, #19]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8008082:	7cfb      	ldrb	r3, [r7, #19]
 8008084:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40021000 	.word	0x40021000

080080b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080c6:	4b74      	ldr	r3, [pc, #464]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080d2:	4b71      	ldr	r3, [pc, #452]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0203 	and.w	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10d      	bne.n	80080fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
       ||
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80080ea:	4b6b      	ldr	r3, [pc, #428]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
       ||
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d047      	beq.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
 8008102:	e044      	b.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d018      	beq.n	800813e <RCCEx_PLLSAI1_Config+0x86>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d825      	bhi.n	800815c <RCCEx_PLLSAI1_Config+0xa4>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d002      	beq.n	800811a <RCCEx_PLLSAI1_Config+0x62>
 8008114:	2b02      	cmp	r3, #2
 8008116:	d009      	beq.n	800812c <RCCEx_PLLSAI1_Config+0x74>
 8008118:	e020      	b.n	800815c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800811a:	4b5f      	ldr	r3, [pc, #380]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d11d      	bne.n	8008162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800812a:	e01a      	b.n	8008162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800812c:	4b5a      	ldr	r3, [pc, #360]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008134:	2b00      	cmp	r3, #0
 8008136:	d116      	bne.n	8008166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813c:	e013      	b.n	8008166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800813e:	4b56      	ldr	r3, [pc, #344]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800814a:	4b53      	ldr	r3, [pc, #332]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800815a:	e006      	b.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e004      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800816a:	bf00      	nop
    }

    if(status == HAL_OK)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008172:	4b49      	ldr	r3, [pc, #292]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	3b01      	subs	r3, #1
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	430b      	orrs	r3, r1
 8008188:	4943      	ldr	r1, [pc, #268]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800818a:	4313      	orrs	r3, r2
 800818c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d17c      	bne.n	800828e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008194:	4b40      	ldr	r3, [pc, #256]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a3f      	ldr	r2, [pc, #252]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800819a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800819e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a0:	f7fc ffba 	bl	8005118 <HAL_GetTick>
 80081a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081a6:	e009      	b.n	80081bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081a8:	f7fc ffb6 	bl	8005118 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d902      	bls.n	80081bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	73fb      	strb	r3, [r7, #15]
        break;
 80081ba:	e005      	b.n	80081c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081bc:	4b36      	ldr	r3, [pc, #216]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ef      	bne.n	80081a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d15f      	bne.n	800828e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d110      	bne.n	80081f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081d4:	4b30      	ldr	r3, [pc, #192]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80081dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6892      	ldr	r2, [r2, #8]
 80081e4:	0211      	lsls	r1, r2, #8
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68d2      	ldr	r2, [r2, #12]
 80081ea:	06d2      	lsls	r2, r2, #27
 80081ec:	430a      	orrs	r2, r1
 80081ee:	492a      	ldr	r1, [pc, #168]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	610b      	str	r3, [r1, #16]
 80081f4:	e027      	b.n	8008246 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d112      	bne.n	8008222 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081fc:	4b26      	ldr	r3, [pc, #152]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6892      	ldr	r2, [r2, #8]
 800820c:	0211      	lsls	r1, r2, #8
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6912      	ldr	r2, [r2, #16]
 8008212:	0852      	lsrs	r2, r2, #1
 8008214:	3a01      	subs	r2, #1
 8008216:	0552      	lsls	r2, r2, #21
 8008218:	430a      	orrs	r2, r1
 800821a:	491f      	ldr	r1, [pc, #124]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800821c:	4313      	orrs	r3, r2
 800821e:	610b      	str	r3, [r1, #16]
 8008220:	e011      	b.n	8008246 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008222:	4b1d      	ldr	r3, [pc, #116]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800822a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6892      	ldr	r2, [r2, #8]
 8008232:	0211      	lsls	r1, r2, #8
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6952      	ldr	r2, [r2, #20]
 8008238:	0852      	lsrs	r2, r2, #1
 800823a:	3a01      	subs	r2, #1
 800823c:	0652      	lsls	r2, r2, #25
 800823e:	430a      	orrs	r2, r1
 8008240:	4915      	ldr	r1, [pc, #84]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008242:	4313      	orrs	r3, r2
 8008244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a13      	ldr	r2, [pc, #76]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800824c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008252:	f7fc ff61 	bl	8005118 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008258:	e009      	b.n	800826e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800825a:	f7fc ff5d 	bl	8005118 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d902      	bls.n	800826e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	73fb      	strb	r3, [r7, #15]
          break;
 800826c:	e005      	b.n	800827a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800826e:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0ef      	beq.n	800825a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	4903      	ldr	r1, [pc, #12]	; (8008298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800828a:	4313      	orrs	r3, r2
 800828c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40021000 	.word	0x40021000

0800829c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e095      	b.n	80083da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d108      	bne.n	80082c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082be:	d009      	beq.n	80082d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	61da      	str	r2, [r3, #28]
 80082c6:	e005      	b.n	80082d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fc fc82 	bl	8004bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008314:	d902      	bls.n	800831c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	e002      	b.n	8008322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800831c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800832a:	d007      	beq.n	800833c <HAL_SPI_Init+0xa0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008334:	d002      	beq.n	800833c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	ea42 0103 	orr.w	r1, r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	0c1b      	lsrs	r3, r3, #16
 8008398:	f003 0204 	and.w	r2, r3, #4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083b8:	ea42 0103 	orr.w	r1, r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b088      	sub	sp, #32
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_SPI_Transmit+0x22>
 8008400:	2302      	movs	r3, #2
 8008402:	e158      	b.n	80086b6 <HAL_SPI_Transmit+0x2d4>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800840c:	f7fc fe84 	bl	8005118 <HAL_GetTick>
 8008410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b01      	cmp	r3, #1
 8008420:	d002      	beq.n	8008428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008422:	2302      	movs	r3, #2
 8008424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008426:	e13d      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_SPI_Transmit+0x52>
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008438:	e134      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2203      	movs	r2, #3
 800843e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008484:	d10f      	bne.n	80084a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084cc:	d94b      	bls.n	8008566 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_Transmit+0xfa>
 80084d6:	8afb      	ldrh	r3, [r7, #22]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d13e      	bne.n	800855a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008500:	e02b      	b.n	800855a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d112      	bne.n	8008536 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008534:	e011      	b.n	800855a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008536:	f7fc fdef 	bl	8005118 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d803      	bhi.n	800854e <HAL_SPI_Transmit+0x16c>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d102      	bne.n	8008554 <HAL_SPI_Transmit+0x172>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008558:	e0a4      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1ce      	bne.n	8008502 <HAL_SPI_Transmit+0x120>
 8008564:	e07c      	b.n	8008660 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_SPI_Transmit+0x192>
 800856e:	8afb      	ldrh	r3, [r7, #22]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d170      	bne.n	8008656 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b01      	cmp	r3, #1
 800857c:	d912      	bls.n	80085a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	1c9a      	adds	r2, r3, #2
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b02      	subs	r3, #2
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085a2:	e058      	b.n	8008656 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80085ca:	e044      	b.n	8008656 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d12b      	bne.n	8008632 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d912      	bls.n	800860a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	881a      	ldrh	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b02      	subs	r3, #2
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008608:	e025      	b.n	8008656 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008630:	e011      	b.n	8008656 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008632:	f7fc fd71 	bl	8005118 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d803      	bhi.n	800864a <HAL_SPI_Transmit+0x268>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d102      	bne.n	8008650 <HAL_SPI_Transmit+0x26e>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008654:	e026      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1b5      	bne.n	80085cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fce3 	bl	8009030 <SPI_EndRxTxTransaction>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800867e:	2300      	movs	r3, #0
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	77fb      	strb	r3, [r7, #31]
 80086a0:	e000      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80086a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b088      	sub	sp, #32
 80086c2:	af02      	add	r7, sp, #8
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086da:	d112      	bne.n	8008702 <HAL_SPI_Receive+0x44>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10e      	bne.n	8008702 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2204      	movs	r2, #4
 80086e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f910 	bl	800891e <HAL_SPI_TransmitReceive>
 80086fe:	4603      	mov	r3, r0
 8008700:	e109      	b.n	8008916 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_SPI_Receive+0x52>
 800870c:	2302      	movs	r3, #2
 800870e:	e102      	b.n	8008916 <HAL_SPI_Receive+0x258>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008718:	f7fc fcfe 	bl	8005118 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	d002      	beq.n	8008730 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800872a:	2302      	movs	r3, #2
 800872c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800872e:	e0e9      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_SPI_Receive+0x7e>
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008740:	e0e0      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2204      	movs	r2, #4
 8008746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800878c:	d908      	bls.n	80087a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	e007      	b.n	80087b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b8:	d10f      	bne.n	80087da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d007      	beq.n	80087f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008800:	d867      	bhi.n	80088d2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008802:	e030      	b.n	8008866 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b01      	cmp	r3, #1
 8008810:	d117      	bne.n	8008842 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f103 020c 	add.w	r2, r3, #12
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008840:	e011      	b.n	8008866 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008842:	f7fc fc69 	bl	8005118 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d803      	bhi.n	800885a <HAL_SPI_Receive+0x19c>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d102      	bne.n	8008860 <HAL_SPI_Receive+0x1a2>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008864:	e04e      	b.n	8008904 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1c8      	bne.n	8008804 <HAL_SPI_Receive+0x146>
 8008872:	e034      	b.n	80088de <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b01      	cmp	r3, #1
 8008880:	d115      	bne.n	80088ae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	b292      	uxth	r2, r2
 800888e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80088ac:	e011      	b.n	80088d2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ae:	f7fc fc33 	bl	8005118 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d803      	bhi.n	80088c6 <HAL_SPI_Receive+0x208>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d102      	bne.n	80088cc <HAL_SPI_Receive+0x20e>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088d0:	e018      	b.n	8008904 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ca      	bne.n	8008874 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fb4c 	bl	8008f80 <SPI_EndRxTransaction>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
 8008900:	e000      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

error :
 8008902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b08a      	sub	sp, #40	; 0x28
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x26>
 8008940:	2302      	movs	r3, #2
 8008942:	e1fb      	b.n	8008d3c <HAL_SPI_TransmitReceive+0x41e>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800894c:	f7fc fbe4 	bl	8005118 <HAL_GetTick>
 8008950:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008958:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008968:	7efb      	ldrb	r3, [r7, #27]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d00e      	beq.n	800898c <HAL_SPI_TransmitReceive+0x6e>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008974:	d106      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x66>
 800897e:	7efb      	ldrb	r3, [r7, #27]
 8008980:	2b04      	cmp	r3, #4
 8008982:	d003      	beq.n	800898c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008984:	2302      	movs	r3, #2
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800898a:	e1cd      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <HAL_SPI_TransmitReceive+0x80>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_SPI_TransmitReceive+0x80>
 8008998:	887b      	ldrh	r3, [r7, #2]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80089a4:	e1c0      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d003      	beq.n	80089ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2205      	movs	r2, #5
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	887a      	ldrh	r2, [r7, #2]
 80089ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	887a      	ldrh	r2, [r7, #2]
 80089d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	887a      	ldrh	r2, [r7, #2]
 80089e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	887a      	ldrh	r2, [r7, #2]
 80089e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089fc:	d802      	bhi.n	8008a04 <HAL_SPI_TransmitReceive+0xe6>
 80089fe:	8a3b      	ldrh	r3, [r7, #16]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d908      	bls.n	8008a16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a12:	605a      	str	r2, [r3, #4]
 8008a14:	e007      	b.n	8008a26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d007      	beq.n	8008a44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a4c:	d97c      	bls.n	8008b48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x13e>
 8008a56:	8a7b      	ldrh	r3, [r7, #18]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d169      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	881a      	ldrh	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	1c9a      	adds	r2, r3, #2
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a80:	e056      	b.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d11b      	bne.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d113      	bne.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	881a      	ldrh	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	1c9a      	adds	r2, r3, #2
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d11c      	bne.n	8008b10 <HAL_SPI_TransmitReceive+0x1f2>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	b292      	uxth	r2, r2
 8008aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	1c9a      	adds	r2, r3, #2
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b10:	f7fc fb02 	bl	8005118 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d807      	bhi.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d003      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008b2e:	e0fb      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1a3      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x164>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d19d      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x164>
 8008b46:	e0df      	b.n	8008d08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_SPI_TransmitReceive+0x23a>
 8008b50:	8a7b      	ldrh	r3, [r7, #18]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	f040 80cb 	bne.w	8008cee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d912      	bls.n	8008b88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	881a      	ldrh	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	1c9a      	adds	r2, r3, #2
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b02      	subs	r3, #2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b86:	e0b2      	b.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330c      	adds	r3, #12
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bae:	e09e      	b.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d134      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02f      	beq.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d12c      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d912      	bls.n	8008bfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	881a      	ldrh	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	1c9a      	adds	r2, r3, #2
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b02      	subs	r3, #2
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bfc:	e012      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	330c      	adds	r3, #12
 8008c08:	7812      	ldrb	r2, [r2, #0]
 8008c0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d148      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x3aa>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d042      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d923      	bls.n	8008c96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	b292      	uxth	r2, r2
 8008c5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	1c9a      	adds	r2, r3, #2
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b02      	subs	r3, #2
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d81f      	bhi.n	8008cc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c92:	605a      	str	r2, [r3, #4]
 8008c94:	e016      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f103 020c 	add.w	r2, r3, #12
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cc8:	f7fc fa26 	bl	8005118 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d803      	bhi.n	8008ce0 <HAL_SPI_TransmitReceive+0x3c2>
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_TransmitReceive+0x3c8>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008cec:	e01c      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f af5b 	bne.w	8008bb0 <HAL_SPI_TransmitReceive+0x292>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f47f af54 	bne.w	8008bb0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f98f 	bl	8009030 <SPI_EndRxTxTransaction>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2220      	movs	r2, #32
 8008d22:	661a      	str	r2, [r3, #96]	; 0x60
 8008d24:	e000      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3728      	adds	r7, #40	; 0x28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	4613      	mov	r3, r2
 8008d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d54:	f7fc f9e0 	bl	8005118 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d64:	f7fc f9d8 	bl	8005118 <HAL_GetTick>
 8008d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d6a:	4b39      	ldr	r3, [pc, #228]	; (8008e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	015b      	lsls	r3, r3, #5
 8008d70:	0d1b      	lsrs	r3, r3, #20
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d7a:	e054      	b.n	8008e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d050      	beq.n	8008e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d84:	f7fc f9c8 	bl	8005118 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d902      	bls.n	8008d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d13d      	bne.n	8008e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db2:	d111      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbc:	d004      	beq.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc6:	d107      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de0:	d10f      	bne.n	8008e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e017      	b.n	8008e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d19b      	bne.n	8008d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000024 	.word	0x20000024

08008e54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e66:	f7fc f957 	bl	8005118 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	4413      	add	r3, r2
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e76:	f7fc f94f 	bl	8005118 <HAL_GetTick>
 8008e7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e84:	4b3d      	ldr	r3, [pc, #244]	; (8008f7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	00da      	lsls	r2, r3, #3
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	0d1b      	lsrs	r3, r3, #20
 8008e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e9c:	e060      	b.n	8008f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ea4:	d107      	bne.n	8008eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d050      	beq.n	8008f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ebe:	f7fc f92b 	bl	8005118 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d902      	bls.n	8008ed4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d13d      	bne.n	8008f50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ee2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eec:	d111      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef6:	d004      	beq.n	8008f02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f00:	d107      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1a:	d10f      	bne.n	8008f3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e010      	b.n	8008f72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d196      	bne.n	8008e9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000024 	.word	0x20000024

08008f80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f94:	d111      	bne.n	8008fba <SPI_EndRxTransaction+0x3a>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9e:	d004      	beq.n	8008faa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa8:	d107      	bne.n	8008fba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2180      	movs	r1, #128	; 0x80
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff febd 	bl	8008d44 <SPI_WaitFlagStateUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd4:	f043 0220 	orr.w	r2, r3, #32
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e023      	b.n	8009028 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fe8:	d11d      	bne.n	8009026 <SPI_EndRxTransaction+0xa6>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff2:	d004      	beq.n	8008ffe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffc:	d113      	bne.n	8009026 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff ff22 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d007      	beq.n	8009026 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901a:	f043 0220 	orr.w	r2, r3, #32
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e000      	b.n	8009028 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff ff03 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e027      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	2180      	movs	r1, #128	; 0x80
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff fe68 	bl	8008d44 <SPI_WaitFlagStateUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d007      	beq.n	800908a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907e:	f043 0220 	orr.w	r2, r3, #32
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e014      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2200      	movs	r2, #0
 8009092:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff fedc 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	f043 0220 	orr.w	r2, r3, #32
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e000      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e04e      	b.n	800916c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d114      	bne.n	8009100 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa0c 	bl	80094fc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d103      	bne.n	80090f6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a20      	ldr	r2, [pc, #128]	; (8009174 <HAL_UART_Init+0xb8>)
 80090f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2224      	movs	r2, #36	; 0x24
 8009104:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0201 	bic.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa36 	bl	8009588 <UART_SetConfig>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e022      	b.n	800916c <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fcb0 	bl	8009a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fd37 	bl	8009bd8 <UART_CheckIdleState>
 800916a:	4603      	mov	r3, r0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	08004c7d 	.word	0x08004c7d

08009178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	; 0x28
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800918c:	2b20      	cmp	r3, #32
 800918e:	f040 8082 	bne.w	8009296 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <HAL_UART_Transmit+0x26>
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e07a      	b.n	8009298 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_UART_Transmit+0x38>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e073      	b.n	8009298 <HAL_UART_Transmit+0x120>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2221      	movs	r2, #33	; 0x21
 80091c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091c6:	f7fb ffa7 	bl	8005118 <HAL_GetTick>
 80091ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	88fa      	ldrh	r2, [r7, #6]
 80091d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e4:	d108      	bne.n	80091f8 <HAL_UART_Transmit+0x80>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d104      	bne.n	80091f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	e003      	b.n	8009200 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009208:	e02d      	b.n	8009266 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2200      	movs	r2, #0
 8009212:	2180      	movs	r1, #128	; 0x80
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fd28 	bl	8009c6a <UART_WaitOnFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e039      	b.n	8009298 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	881a      	ldrh	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009236:	b292      	uxth	r2, r2
 8009238:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	3302      	adds	r3, #2
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e008      	b.n	8009254 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	b292      	uxth	r2, r2
 800924c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	3301      	adds	r3, #1
 8009252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1cb      	bne.n	800920a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	2140      	movs	r1, #64	; 0x40
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fcf4 	bl	8009c6a <UART_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e005      	b.n	8009298 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2220      	movs	r2, #32
 8009290:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	e000      	b.n	8009298 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009296:	2302      	movs	r3, #2
  }
}
 8009298:	4618      	mov	r0, r3
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	f040 80bf 	bne.w	8009438 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <HAL_UART_Receive+0x26>
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e0b7      	b.n	800943a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <HAL_UART_Receive+0x38>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e0b0      	b.n	800943a <HAL_UART_Receive+0x19a>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2222      	movs	r2, #34	; 0x22
 80092ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092f4:	f7fb ff10 	bl	8005118 <HAL_GetTick>
 80092f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009312:	d10e      	bne.n	8009332 <HAL_UART_Receive+0x92>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d105      	bne.n	8009328 <HAL_UART_Receive+0x88>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009326:	e02d      	b.n	8009384 <HAL_UART_Receive+0xe4>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	22ff      	movs	r2, #255	; 0xff
 800932c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009330:	e028      	b.n	8009384 <HAL_UART_Receive+0xe4>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10d      	bne.n	8009356 <HAL_UART_Receive+0xb6>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <HAL_UART_Receive+0xac>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	22ff      	movs	r2, #255	; 0xff
 8009346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800934a:	e01b      	b.n	8009384 <HAL_UART_Receive+0xe4>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	227f      	movs	r2, #127	; 0x7f
 8009350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009354:	e016      	b.n	8009384 <HAL_UART_Receive+0xe4>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800935e:	d10d      	bne.n	800937c <HAL_UART_Receive+0xdc>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <HAL_UART_Receive+0xd2>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	227f      	movs	r2, #127	; 0x7f
 800936c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009370:	e008      	b.n	8009384 <HAL_UART_Receive+0xe4>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	223f      	movs	r2, #63	; 0x3f
 8009376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800937a:	e003      	b.n	8009384 <HAL_UART_Receive+0xe4>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800938a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009394:	d108      	bne.n	80093a8 <HAL_UART_Receive+0x108>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d104      	bne.n	80093a8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	e003      	b.n	80093b0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80093b8:	e033      	b.n	8009422 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2200      	movs	r2, #0
 80093c2:	2120      	movs	r1, #32
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fc50 	bl	8009c6a <UART_WaitOnFlagUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e032      	b.n	800943a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10c      	bne.n	80093f4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	8a7b      	ldrh	r3, [r7, #18]
 80093e4:	4013      	ands	r3, r2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	3302      	adds	r3, #2
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	e00d      	b.n	8009410 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	8a7b      	ldrh	r3, [r7, #18]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4013      	ands	r3, r2
 8009404:	b2da      	uxtb	r2, r3
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1c5      	bne.n	80093ba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e000      	b.n	800943a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8009438:	2302      	movs	r3, #2
  }
}
 800943a:	4618      	mov	r0, r3
 800943c:	3720      	adds	r7, #32
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a16      	ldr	r2, [pc, #88]	; (8009560 <UART_InitCallbacksToDefault+0x64>)
 8009508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a15      	ldr	r2, [pc, #84]	; (8009564 <UART_InitCallbacksToDefault+0x68>)
 8009510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a14      	ldr	r2, [pc, #80]	; (8009568 <UART_InitCallbacksToDefault+0x6c>)
 8009518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a13      	ldr	r2, [pc, #76]	; (800956c <UART_InitCallbacksToDefault+0x70>)
 8009520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a12      	ldr	r2, [pc, #72]	; (8009570 <UART_InitCallbacksToDefault+0x74>)
 8009528:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a11      	ldr	r2, [pc, #68]	; (8009574 <UART_InitCallbacksToDefault+0x78>)
 8009530:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a10      	ldr	r2, [pc, #64]	; (8009578 <UART_InitCallbacksToDefault+0x7c>)
 8009538:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a0f      	ldr	r2, [pc, #60]	; (800957c <UART_InitCallbacksToDefault+0x80>)
 8009540:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a0e      	ldr	r2, [pc, #56]	; (8009580 <UART_InitCallbacksToDefault+0x84>)
 8009548:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a0d      	ldr	r2, [pc, #52]	; (8009584 <UART_InitCallbacksToDefault+0x88>)
 8009550:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	08009457 	.word	0x08009457
 8009564:	08009443 	.word	0x08009443
 8009568:	0800947f 	.word	0x0800947f
 800956c:	0800946b 	.word	0x0800946b
 8009570:	08009493 	.word	0x08009493
 8009574:	080094a7 	.word	0x080094a7
 8009578:	080094bb 	.word	0x080094bb
 800957c:	080094cf 	.word	0x080094cf
 8009580:	08009df3 	.word	0x08009df3
 8009584:	080094e3 	.word	0x080094e3

08009588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800958c:	b08a      	sub	sp, #40	; 0x28
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4ba5      	ldr	r3, [pc, #660]	; (800984c <UART_SetConfig+0x2c4>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095c0:	430b      	orrs	r3, r1
 80095c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a9a      	ldr	r2, [pc, #616]	; (8009850 <UART_SetConfig+0x2c8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d004      	beq.n	80095f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f0:	4313      	orrs	r3, r2
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009604:	430a      	orrs	r2, r1
 8009606:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a91      	ldr	r2, [pc, #580]	; (8009854 <UART_SetConfig+0x2cc>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d126      	bne.n	8009660 <UART_SetConfig+0xd8>
 8009612:	4b91      	ldr	r3, [pc, #580]	; (8009858 <UART_SetConfig+0x2d0>)
 8009614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	2b03      	cmp	r3, #3
 800961e:	d81b      	bhi.n	8009658 <UART_SetConfig+0xd0>
 8009620:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <UART_SetConfig+0xa0>)
 8009622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009626:	bf00      	nop
 8009628:	08009639 	.word	0x08009639
 800962c:	08009649 	.word	0x08009649
 8009630:	08009641 	.word	0x08009641
 8009634:	08009651 	.word	0x08009651
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800963e:	e0d6      	b.n	80097ee <UART_SetConfig+0x266>
 8009640:	2302      	movs	r3, #2
 8009642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009646:	e0d2      	b.n	80097ee <UART_SetConfig+0x266>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800964e:	e0ce      	b.n	80097ee <UART_SetConfig+0x266>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009656:	e0ca      	b.n	80097ee <UART_SetConfig+0x266>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800965e:	e0c6      	b.n	80097ee <UART_SetConfig+0x266>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a7d      	ldr	r2, [pc, #500]	; (800985c <UART_SetConfig+0x2d4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d138      	bne.n	80096dc <UART_SetConfig+0x154>
 800966a:	4b7b      	ldr	r3, [pc, #492]	; (8009858 <UART_SetConfig+0x2d0>)
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	f003 030c 	and.w	r3, r3, #12
 8009674:	2b0c      	cmp	r3, #12
 8009676:	d82d      	bhi.n	80096d4 <UART_SetConfig+0x14c>
 8009678:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <UART_SetConfig+0xf8>)
 800967a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967e:	bf00      	nop
 8009680:	080096b5 	.word	0x080096b5
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096d5 	.word	0x080096d5
 800968c:	080096d5 	.word	0x080096d5
 8009690:	080096c5 	.word	0x080096c5
 8009694:	080096d5 	.word	0x080096d5
 8009698:	080096d5 	.word	0x080096d5
 800969c:	080096d5 	.word	0x080096d5
 80096a0:	080096bd 	.word	0x080096bd
 80096a4:	080096d5 	.word	0x080096d5
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096d5 	.word	0x080096d5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	2300      	movs	r3, #0
 80096b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ba:	e098      	b.n	80097ee <UART_SetConfig+0x266>
 80096bc:	2302      	movs	r3, #2
 80096be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096c2:	e094      	b.n	80097ee <UART_SetConfig+0x266>
 80096c4:	2304      	movs	r3, #4
 80096c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ca:	e090      	b.n	80097ee <UART_SetConfig+0x266>
 80096cc:	2308      	movs	r3, #8
 80096ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096d2:	e08c      	b.n	80097ee <UART_SetConfig+0x266>
 80096d4:	2310      	movs	r3, #16
 80096d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096da:	e088      	b.n	80097ee <UART_SetConfig+0x266>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a5f      	ldr	r2, [pc, #380]	; (8009860 <UART_SetConfig+0x2d8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d125      	bne.n	8009732 <UART_SetConfig+0x1aa>
 80096e6:	4b5c      	ldr	r3, [pc, #368]	; (8009858 <UART_SetConfig+0x2d0>)
 80096e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096f0:	2b30      	cmp	r3, #48	; 0x30
 80096f2:	d016      	beq.n	8009722 <UART_SetConfig+0x19a>
 80096f4:	2b30      	cmp	r3, #48	; 0x30
 80096f6:	d818      	bhi.n	800972a <UART_SetConfig+0x1a2>
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	d00a      	beq.n	8009712 <UART_SetConfig+0x18a>
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	d814      	bhi.n	800972a <UART_SetConfig+0x1a2>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <UART_SetConfig+0x182>
 8009704:	2b10      	cmp	r3, #16
 8009706:	d008      	beq.n	800971a <UART_SetConfig+0x192>
 8009708:	e00f      	b.n	800972a <UART_SetConfig+0x1a2>
 800970a:	2300      	movs	r3, #0
 800970c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009710:	e06d      	b.n	80097ee <UART_SetConfig+0x266>
 8009712:	2302      	movs	r3, #2
 8009714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009718:	e069      	b.n	80097ee <UART_SetConfig+0x266>
 800971a:	2304      	movs	r3, #4
 800971c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009720:	e065      	b.n	80097ee <UART_SetConfig+0x266>
 8009722:	2308      	movs	r3, #8
 8009724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009728:	e061      	b.n	80097ee <UART_SetConfig+0x266>
 800972a:	2310      	movs	r3, #16
 800972c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009730:	e05d      	b.n	80097ee <UART_SetConfig+0x266>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a4b      	ldr	r2, [pc, #300]	; (8009864 <UART_SetConfig+0x2dc>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d125      	bne.n	8009788 <UART_SetConfig+0x200>
 800973c:	4b46      	ldr	r3, [pc, #280]	; (8009858 <UART_SetConfig+0x2d0>)
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009746:	2bc0      	cmp	r3, #192	; 0xc0
 8009748:	d016      	beq.n	8009778 <UART_SetConfig+0x1f0>
 800974a:	2bc0      	cmp	r3, #192	; 0xc0
 800974c:	d818      	bhi.n	8009780 <UART_SetConfig+0x1f8>
 800974e:	2b80      	cmp	r3, #128	; 0x80
 8009750:	d00a      	beq.n	8009768 <UART_SetConfig+0x1e0>
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d814      	bhi.n	8009780 <UART_SetConfig+0x1f8>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <UART_SetConfig+0x1d8>
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d008      	beq.n	8009770 <UART_SetConfig+0x1e8>
 800975e:	e00f      	b.n	8009780 <UART_SetConfig+0x1f8>
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009766:	e042      	b.n	80097ee <UART_SetConfig+0x266>
 8009768:	2302      	movs	r3, #2
 800976a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800976e:	e03e      	b.n	80097ee <UART_SetConfig+0x266>
 8009770:	2304      	movs	r3, #4
 8009772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009776:	e03a      	b.n	80097ee <UART_SetConfig+0x266>
 8009778:	2308      	movs	r3, #8
 800977a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800977e:	e036      	b.n	80097ee <UART_SetConfig+0x266>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009786:	e032      	b.n	80097ee <UART_SetConfig+0x266>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a30      	ldr	r2, [pc, #192]	; (8009850 <UART_SetConfig+0x2c8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d12a      	bne.n	80097e8 <UART_SetConfig+0x260>
 8009792:	4b31      	ldr	r3, [pc, #196]	; (8009858 <UART_SetConfig+0x2d0>)
 8009794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800979c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097a0:	d01a      	beq.n	80097d8 <UART_SetConfig+0x250>
 80097a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097a6:	d81b      	bhi.n	80097e0 <UART_SetConfig+0x258>
 80097a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ac:	d00c      	beq.n	80097c8 <UART_SetConfig+0x240>
 80097ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b2:	d815      	bhi.n	80097e0 <UART_SetConfig+0x258>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <UART_SetConfig+0x238>
 80097b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097bc:	d008      	beq.n	80097d0 <UART_SetConfig+0x248>
 80097be:	e00f      	b.n	80097e0 <UART_SetConfig+0x258>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c6:	e012      	b.n	80097ee <UART_SetConfig+0x266>
 80097c8:	2302      	movs	r3, #2
 80097ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ce:	e00e      	b.n	80097ee <UART_SetConfig+0x266>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097d6:	e00a      	b.n	80097ee <UART_SetConfig+0x266>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097de:	e006      	b.n	80097ee <UART_SetConfig+0x266>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097e6:	e002      	b.n	80097ee <UART_SetConfig+0x266>
 80097e8:	2310      	movs	r3, #16
 80097ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a17      	ldr	r2, [pc, #92]	; (8009850 <UART_SetConfig+0x2c8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	f040 808b 	bne.w	8009910 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d834      	bhi.n	800986c <UART_SetConfig+0x2e4>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <UART_SetConfig+0x280>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	0800982d 	.word	0x0800982d
 800980c:	0800986d 	.word	0x0800986d
 8009810:	08009835 	.word	0x08009835
 8009814:	0800986d 	.word	0x0800986d
 8009818:	0800983b 	.word	0x0800983b
 800981c:	0800986d 	.word	0x0800986d
 8009820:	0800986d 	.word	0x0800986d
 8009824:	0800986d 	.word	0x0800986d
 8009828:	08009843 	.word	0x08009843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fe f94c 	bl	8007ac8 <HAL_RCC_GetPCLK1Freq>
 8009830:	61f8      	str	r0, [r7, #28]
        break;
 8009832:	e021      	b.n	8009878 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <UART_SetConfig+0x2e0>)
 8009836:	61fb      	str	r3, [r7, #28]
        break;
 8009838:	e01e      	b.n	8009878 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800983a:	f7fe f8ad 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 800983e:	61f8      	str	r0, [r7, #28]
        break;
 8009840:	e01a      	b.n	8009878 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009846:	61fb      	str	r3, [r7, #28]
        break;
 8009848:	e016      	b.n	8009878 <UART_SetConfig+0x2f0>
 800984a:	bf00      	nop
 800984c:	efff69f3 	.word	0xefff69f3
 8009850:	40008000 	.word	0x40008000
 8009854:	40013800 	.word	0x40013800
 8009858:	40021000 	.word	0x40021000
 800985c:	40004400 	.word	0x40004400
 8009860:	40004800 	.word	0x40004800
 8009864:	40004c00 	.word	0x40004c00
 8009868:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009876:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80fa 	beq.w	8009a74 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	429a      	cmp	r2, r3
 800988e:	d305      	bcc.n	800989c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009896:	69fa      	ldr	r2, [r7, #28]
 8009898:	429a      	cmp	r2, r3
 800989a:	d903      	bls.n	80098a4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098a2:	e0e7      	b.n	8009a74 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	2200      	movs	r2, #0
 80098a8:	461c      	mov	r4, r3
 80098aa:	4615      	mov	r5, r2
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	022b      	lsls	r3, r5, #8
 80098b6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80098ba:	0222      	lsls	r2, r4, #8
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	6849      	ldr	r1, [r1, #4]
 80098c0:	0849      	lsrs	r1, r1, #1
 80098c2:	2000      	movs	r0, #0
 80098c4:	4688      	mov	r8, r1
 80098c6:	4681      	mov	r9, r0
 80098c8:	eb12 0a08 	adds.w	sl, r2, r8
 80098cc:	eb43 0b09 	adc.w	fp, r3, r9
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	607a      	str	r2, [r7, #4]
 80098da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098de:	4650      	mov	r0, sl
 80098e0:	4659      	mov	r1, fp
 80098e2:	f7f7 f9e9 	bl	8000cb8 <__aeabi_uldivmod>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4613      	mov	r3, r2
 80098ec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098f4:	d308      	bcc.n	8009908 <UART_SetConfig+0x380>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098fc:	d204      	bcs.n	8009908 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	e0b5      	b.n	8009a74 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800990e:	e0b1      	b.n	8009a74 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009918:	d15d      	bne.n	80099d6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800991a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800991e:	2b08      	cmp	r3, #8
 8009920:	d827      	bhi.n	8009972 <UART_SetConfig+0x3ea>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <UART_SetConfig+0x3a0>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	0800994d 	.word	0x0800994d
 800992c:	08009955 	.word	0x08009955
 8009930:	0800995d 	.word	0x0800995d
 8009934:	08009973 	.word	0x08009973
 8009938:	08009963 	.word	0x08009963
 800993c:	08009973 	.word	0x08009973
 8009940:	08009973 	.word	0x08009973
 8009944:	08009973 	.word	0x08009973
 8009948:	0800996b 	.word	0x0800996b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800994c:	f7fe f8bc 	bl	8007ac8 <HAL_RCC_GetPCLK1Freq>
 8009950:	61f8      	str	r0, [r7, #28]
        break;
 8009952:	e014      	b.n	800997e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009954:	f7fe f8ce 	bl	8007af4 <HAL_RCC_GetPCLK2Freq>
 8009958:	61f8      	str	r0, [r7, #28]
        break;
 800995a:	e010      	b.n	800997e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800995c:	4b4c      	ldr	r3, [pc, #304]	; (8009a90 <UART_SetConfig+0x508>)
 800995e:	61fb      	str	r3, [r7, #28]
        break;
 8009960:	e00d      	b.n	800997e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009962:	f7fe f819 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 8009966:	61f8      	str	r0, [r7, #28]
        break;
 8009968:	e009      	b.n	800997e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800996a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996e:	61fb      	str	r3, [r7, #28]
        break;
 8009970:	e005      	b.n	800997e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800997c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d077      	beq.n	8009a74 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	005a      	lsls	r2, r3, #1
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	085b      	lsrs	r3, r3, #1
 800998e:	441a      	add	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b0f      	cmp	r3, #15
 800999e:	d916      	bls.n	80099ce <UART_SetConfig+0x446>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a6:	d212      	bcs.n	80099ce <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f023 030f 	bic.w	r3, r3, #15
 80099b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	b29a      	uxth	r2, r3
 80099be:	8afb      	ldrh	r3, [r7, #22]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	8afa      	ldrh	r2, [r7, #22]
 80099ca:	60da      	str	r2, [r3, #12]
 80099cc:	e052      	b.n	8009a74 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80099d4:	e04e      	b.n	8009a74 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099da:	2b08      	cmp	r3, #8
 80099dc:	d827      	bhi.n	8009a2e <UART_SetConfig+0x4a6>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <UART_SetConfig+0x45c>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a09 	.word	0x08009a09
 80099e8:	08009a11 	.word	0x08009a11
 80099ec:	08009a19 	.word	0x08009a19
 80099f0:	08009a2f 	.word	0x08009a2f
 80099f4:	08009a1f 	.word	0x08009a1f
 80099f8:	08009a2f 	.word	0x08009a2f
 80099fc:	08009a2f 	.word	0x08009a2f
 8009a00:	08009a2f 	.word	0x08009a2f
 8009a04:	08009a27 	.word	0x08009a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a08:	f7fe f85e 	bl	8007ac8 <HAL_RCC_GetPCLK1Freq>
 8009a0c:	61f8      	str	r0, [r7, #28]
        break;
 8009a0e:	e014      	b.n	8009a3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a10:	f7fe f870 	bl	8007af4 <HAL_RCC_GetPCLK2Freq>
 8009a14:	61f8      	str	r0, [r7, #28]
        break;
 8009a16:	e010      	b.n	8009a3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a18:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <UART_SetConfig+0x508>)
 8009a1a:	61fb      	str	r3, [r7, #28]
        break;
 8009a1c:	e00d      	b.n	8009a3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a1e:	f7fd ffbb 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 8009a22:	61f8      	str	r0, [r7, #28]
        break;
 8009a24:	e009      	b.n	8009a3a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a2a:	61fb      	str	r3, [r7, #28]
        break;
 8009a2c:	e005      	b.n	8009a3a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a38:	bf00      	nop
    }

    if (pclk != 0U)
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d019      	beq.n	8009a74 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	085a      	lsrs	r2, r3, #1
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d909      	bls.n	8009a6e <UART_SetConfig+0x4e6>
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a60:	d205      	bcs.n	8009a6e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	e002      	b.n	8009a74 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3728      	adds	r7, #40	; 0x28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a8e:	bf00      	nop
 8009a90:	00f42400 	.word	0x00f42400

08009a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	f003 0308 	and.w	r3, r3, #8
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	f003 0310 	and.w	r3, r3, #16
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01a      	beq.n	8009baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b92:	d10a      	bne.n	8009baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]
  }
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009be8:	f7fb fa96 	bl	8005118 <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0308 	and.w	r3, r3, #8
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10e      	bne.n	8009c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f82d 	bl	8009c6a <UART_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e023      	b.n	8009c62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d10e      	bne.n	8009c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f817 	bl	8009c6a <UART_WaitOnFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e00d      	b.n	8009c62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b09c      	sub	sp, #112	; 0x70
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	603b      	str	r3, [r7, #0]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c7a:	e0a5      	b.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	f000 80a1 	beq.w	8009dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fb fa47 	bl	8005118 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8009c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d13e      	bne.n	8009d1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e6      	bne.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	f023 0301 	bic.w	r3, r3, #1
 8009ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8009cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e5      	bne.n	8009cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2220      	movs	r2, #32
 8009d06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e067      	b.n	8009dea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d04f      	beq.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d36:	d147      	bne.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
 8009d62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d68:	e841 2300 	strex	r3, r2, [r1]
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e6      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	613b      	str	r3, [r7, #16]
   return(result);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f023 0301 	bic.w	r3, r3, #1
 8009d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3308      	adds	r3, #8
 8009d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d94:	623a      	str	r2, [r7, #32]
 8009d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	69f9      	ldr	r1, [r7, #28]
 8009d9a:	6a3a      	ldr	r2, [r7, #32]
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e5      	bne.n	8009d74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2220      	movs	r2, #32
 8009db2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e010      	b.n	8009dea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69da      	ldr	r2, [r3, #28]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f43f af4a 	beq.w	8009c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3770      	adds	r7, #112	; 0x70
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
	...

08009e08 <__NVIC_SetPriority>:
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	db0a      	blt.n	8009e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	490c      	ldr	r1, [pc, #48]	; (8009e54 <__NVIC_SetPriority+0x4c>)
 8009e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e26:	0112      	lsls	r2, r2, #4
 8009e28:	b2d2      	uxtb	r2, r2
 8009e2a:	440b      	add	r3, r1
 8009e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e30:	e00a      	b.n	8009e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	4908      	ldr	r1, [pc, #32]	; (8009e58 <__NVIC_SetPriority+0x50>)
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	f003 030f 	and.w	r3, r3, #15
 8009e3e:	3b04      	subs	r3, #4
 8009e40:	0112      	lsls	r2, r2, #4
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	440b      	add	r3, r1
 8009e46:	761a      	strb	r2, [r3, #24]
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	e000e100 	.word	0xe000e100
 8009e58:	e000ed00 	.word	0xe000ed00

08009e5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e60:	2100      	movs	r1, #0
 8009e62:	f06f 0004 	mvn.w	r0, #4
 8009e66:	f7ff ffcf 	bl	8009e08 <__NVIC_SetPriority>
#endif
}
 8009e6a:	bf00      	nop
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e76:	f3ef 8305 	mrs	r3, IPSR
 8009e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e82:	f06f 0305 	mvn.w	r3, #5
 8009e86:	607b      	str	r3, [r7, #4]
 8009e88:	e00c      	b.n	8009ea4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <osKernelInitialize+0x44>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d105      	bne.n	8009e9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <osKernelInitialize+0x44>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	607b      	str	r3, [r7, #4]
 8009e9c:	e002      	b.n	8009ea4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ea4:	687b      	ldr	r3, [r7, #4]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000a80 	.word	0x20000a80

08009eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ebe:	f3ef 8305 	mrs	r3, IPSR
 8009ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009eca:	f06f 0305 	mvn.w	r3, #5
 8009ece:	607b      	str	r3, [r7, #4]
 8009ed0:	e010      	b.n	8009ef4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <osKernelStart+0x48>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d109      	bne.n	8009eee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009eda:	f7ff ffbf 	bl	8009e5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ede:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <osKernelStart+0x48>)
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ee4:	f001 fc50 	bl	800b788 <vTaskStartScheduler>
      stat = osOK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	607b      	str	r3, [r7, #4]
 8009eec:	e002      	b.n	8009ef4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009eee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ef4:	687b      	ldr	r3, [r7, #4]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000a80 	.word	0x20000a80

08009f04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08e      	sub	sp, #56	; 0x38
 8009f08:	af04      	add	r7, sp, #16
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f14:	f3ef 8305 	mrs	r3, IPSR
 8009f18:	617b      	str	r3, [r7, #20]
  return(result);
 8009f1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d17e      	bne.n	800a01e <osThreadNew+0x11a>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d07b      	beq.n	800a01e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f26:	2380      	movs	r3, #128	; 0x80
 8009f28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f2a:	2318      	movs	r3, #24
 8009f2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009f32:	f04f 33ff 	mov.w	r3, #4294967295
 8009f36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d045      	beq.n	8009fca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <osThreadNew+0x48>
        name = attr->name;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d008      	beq.n	8009f72 <osThreadNew+0x6e>
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	2b38      	cmp	r3, #56	; 0x38
 8009f64:	d805      	bhi.n	8009f72 <osThreadNew+0x6e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <osThreadNew+0x72>
        return (NULL);
 8009f72:	2300      	movs	r3, #0
 8009f74:	e054      	b.n	800a020 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	089b      	lsrs	r3, r3, #2
 8009f84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <osThreadNew+0xa8>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	2bbb      	cmp	r3, #187	; 0xbb
 8009f94:	d90a      	bls.n	8009fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d006      	beq.n	8009fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <osThreadNew+0xa8>
        mem = 1;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	e010      	b.n	8009fce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10c      	bne.n	8009fce <osThreadNew+0xca>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d108      	bne.n	8009fce <osThreadNew+0xca>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <osThreadNew+0xca>
          mem = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e001      	b.n	8009fce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d110      	bne.n	8009ff6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fdc:	9202      	str	r2, [sp, #8]
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	6a3a      	ldr	r2, [r7, #32]
 8009fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f001 f962 	bl	800b2b4 <xTaskCreateStatic>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	e013      	b.n	800a01e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d110      	bne.n	800a01e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	f107 0310 	add.w	r3, r7, #16
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f001 f9ad 	bl	800b36e <xTaskCreate>
 800a014:	4603      	mov	r3, r0
 800a016:	2b01      	cmp	r3, #1
 800a018:	d001      	beq.n	800a01e <osThreadNew+0x11a>
            hTask = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a01e:	693b      	ldr	r3, [r7, #16]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3728      	adds	r7, #40	; 0x28
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a038:	f3ef 8305 	mrs	r3, IPSR
 800a03c:	613b      	str	r3, [r7, #16]
  return(result);
 800a03e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a040:	2b00      	cmp	r3, #0
 800a042:	d175      	bne.n	800a130 <osSemaphoreNew+0x108>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d072      	beq.n	800a130 <osSemaphoreNew+0x108>
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d86e      	bhi.n	800a130 <osSemaphoreNew+0x108>
    mem = -1;
 800a052:	f04f 33ff 	mov.w	r3, #4294967295
 800a056:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d015      	beq.n	800a08a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <osSemaphoreNew+0x4c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b4f      	cmp	r3, #79	; 0x4f
 800a06c:	d902      	bls.n	800a074 <osSemaphoreNew+0x4c>
        mem = 1;
 800a06e:	2301      	movs	r3, #1
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	e00c      	b.n	800a08e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <osSemaphoreNew+0x66>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <osSemaphoreNew+0x66>
          mem = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	61bb      	str	r3, [r7, #24]
 800a088:	e001      	b.n	800a08e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d04c      	beq.n	800a130 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d128      	bne.n	800a0ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d10a      	bne.n	800a0b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	2203      	movs	r2, #3
 800a0a8:	9200      	str	r2, [sp, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f000 f9e6 	bl	800a480 <xQueueGenericCreateStatic>
 800a0b4:	61f8      	str	r0, [r7, #28]
 800a0b6:	e005      	b.n	800a0c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f000 fa57 	bl	800a570 <xQueueGenericCreate>
 800a0c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d022      	beq.n	800a110 <osSemaphoreNew+0xe8>
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01f      	beq.n	800a110 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	69f8      	ldr	r0, [r7, #28]
 800a0d8:	f000 fb12 	bl	800a700 <xQueueGenericSend>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d016      	beq.n	800a110 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a0e2:	69f8      	ldr	r0, [r7, #28]
 800a0e4:	f000 ff12 	bl	800af0c <vQueueDelete>
            hSemaphore = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61fb      	str	r3, [r7, #28]
 800a0ec:	e010      	b.n	800a110 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d108      	bne.n	800a106 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	68b9      	ldr	r1, [r7, #8]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fa94 	bl	800a62a <xQueueCreateCountingSemaphoreStatic>
 800a102:	61f8      	str	r0, [r7, #28]
 800a104:	e004      	b.n	800a110 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fac5 	bl	800a698 <xQueueCreateCountingSemaphore>
 800a10e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00c      	beq.n	800a130 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e001      	b.n	800a128 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a128:	6979      	ldr	r1, [r7, #20]
 800a12a:	69f8      	ldr	r0, [r7, #28]
 800a12c:	f001 f83a 	bl	800b1a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a130:	69fb      	ldr	r3, [r7, #28]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a154:	f06f 0303 	mvn.w	r3, #3
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	e039      	b.n	800a1d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15c:	f3ef 8305 	mrs	r3, IPSR
 800a160:	60fb      	str	r3, [r7, #12]
  return(result);
 800a162:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a164:	2b00      	cmp	r3, #0
 800a166:	d022      	beq.n	800a1ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a16e:	f06f 0303 	mvn.w	r3, #3
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e02c      	b.n	800a1d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a17a:	f107 0308 	add.w	r3, r7, #8
 800a17e:	461a      	mov	r2, r3
 800a180:	2100      	movs	r1, #0
 800a182:	6938      	ldr	r0, [r7, #16]
 800a184:	f000 fe42 	bl	800ae0c <xQueueReceiveFromISR>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d003      	beq.n	800a196 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a18e:	f06f 0302 	mvn.w	r3, #2
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e01c      	b.n	800a1d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d019      	beq.n	800a1d0 <osSemaphoreAcquire+0x94>
 800a19c:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <osSemaphoreAcquire+0xa0>)
 800a19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	e010      	b.n	800a1d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6938      	ldr	r0, [r7, #16]
 800a1b2:	f000 fd1f 	bl	800abf4 <xQueueSemaphoreTake>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d009      	beq.n	800a1d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a1c2:	f06f 0301 	mvn.w	r3, #1
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	e002      	b.n	800a1d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a1ca:	f06f 0302 	mvn.w	r3, #2
 800a1ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a1d0:	697b      	ldr	r3, [r7, #20]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <vApplicationGetIdleTaskMemory+0x2c>)
 800a1f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vApplicationGetIdleTaskMemory+0x30>)
 800a1f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2280      	movs	r2, #128	; 0x80
 800a1fc:	601a      	str	r2, [r3, #0]
}
 800a1fe:	bf00      	nop
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	20000a84 	.word	0x20000a84
 800a210:	20000b40 	.word	0x20000b40

0800a214 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4a07      	ldr	r2, [pc, #28]	; (800a240 <vApplicationGetTimerTaskMemory+0x2c>)
 800a224:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4a06      	ldr	r2, [pc, #24]	; (800a244 <vApplicationGetTimerTaskMemory+0x30>)
 800a22a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20000d40 	.word	0x20000d40
 800a244:	20000dfc 	.word	0x20000dfc

0800a248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f103 0208 	add.w	r2, r3, #8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f04f 32ff 	mov.w	r2, #4294967295
 800a260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f103 0208 	add.w	r2, r3, #8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f103 0208 	add.w	r2, r3, #8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a296:	bf00      	nop
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d103      	bne.n	800a30a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	e00c      	b.n	800a324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3308      	adds	r3, #8
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e002      	b.n	800a318 <vListInsert+0x2e>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	429a      	cmp	r2, r3
 800a322:	d2f6      	bcs.n	800a312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	601a      	str	r2, [r3, #0]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6892      	ldr	r2, [r2, #8]
 800a372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	6852      	ldr	r2, [r2, #4]
 800a37c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d103      	bne.n	800a390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3da:	f002 fc8b 	bl	800ccf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e6:	68f9      	ldr	r1, [r7, #12]
 800a3e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3ea:	fb01 f303 	mul.w	r3, r1, r3
 800a3ee:	441a      	add	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40a:	3b01      	subs	r3, #1
 800a40c:	68f9      	ldr	r1, [r7, #12]
 800a40e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a410:	fb01 f303 	mul.w	r3, r1, r3
 800a414:	441a      	add	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	22ff      	movs	r2, #255	; 0xff
 800a41e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	22ff      	movs	r2, #255	; 0xff
 800a426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d114      	bne.n	800a45a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01a      	beq.n	800a46e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3310      	adds	r3, #16
 800a43c:	4618      	mov	r0, r3
 800a43e:	f001 fc3d 	bl	800bcbc <xTaskRemoveFromEventList>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d012      	beq.n	800a46e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a448:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <xQueueGenericReset+0xcc>)
 800a44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	e009      	b.n	800a46e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3310      	adds	r3, #16
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fef2 	bl	800a248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3324      	adds	r3, #36	; 0x24
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff feed 	bl	800a248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a46e:	f002 fc71 	bl	800cd54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a472:	2301      	movs	r3, #1
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08e      	sub	sp, #56	; 0x38
 800a484:	af02      	add	r7, sp, #8
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <xQueueGenericCreateStatic+0x52>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <xQueueGenericCreateStatic+0x56>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <xQueueGenericCreateStatic+0x58>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	623b      	str	r3, [r7, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <xQueueGenericCreateStatic+0x7e>
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <xQueueGenericCreateStatic+0x82>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <xQueueGenericCreateStatic+0x84>
 800a502:	2300      	movs	r3, #0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	61fb      	str	r3, [r7, #28]
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a51e:	2350      	movs	r3, #80	; 0x50
 800a520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b50      	cmp	r3, #80	; 0x50
 800a526:	d00a      	beq.n	800a53e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	61bb      	str	r3, [r7, #24]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a53e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a552:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 f83f 	bl	800a5e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a568:	4618      	mov	r0, r3
 800a56a:	3730      	adds	r7, #48	; 0x30
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08a      	sub	sp, #40	; 0x28
 800a574:	af02      	add	r7, sp, #8
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	613b      	str	r3, [r7, #16]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
 800a5a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3350      	adds	r3, #80	; 0x50
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f002 fcc5 	bl	800cf38 <pvPortMalloc>
 800a5ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d011      	beq.n	800a5da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	3350      	adds	r3, #80	; 0x50
 800a5be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5c8:	79fa      	ldrb	r2, [r7, #7]
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f805 	bl	800a5e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5da:	69bb      	ldr	r3, [r7, #24]
	}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e002      	b.n	800a606 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a612:	2101      	movs	r1, #1
 800a614:	69b8      	ldr	r0, [r7, #24]
 800a616:	f7ff fecb 	bl	800a3b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	78fa      	ldrb	r2, [r7, #3]
 800a61e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b08a      	sub	sp, #40	; 0x28
 800a62e:	af02      	add	r7, sp, #8
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	61bb      	str	r3, [r7, #24]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	429a      	cmp	r2, r3
 800a658:	d90a      	bls.n	800a670 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	617b      	str	r3, [r7, #20]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a670:	2302      	movs	r3, #2
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff ff00 	bl	800a480 <xQueueGenericCreateStatic>
 800a680:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a68e:	69fb      	ldr	r3, [r7, #28]
	}
 800a690:	4618      	mov	r0, r3
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	613b      	str	r3, [r7, #16]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d90a      	bls.n	800a6dc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a6dc:	2202      	movs	r2, #2
 800a6de:	2100      	movs	r1, #0
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff ff45 	bl	800a570 <xQueueGenericCreate>
 800a6e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a6f4:	697b      	ldr	r3, [r7, #20]
	}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericSend+0x32>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <xQueueGenericSend+0x40>
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <xQueueGenericSend+0x44>
 800a740:	2301      	movs	r3, #1
 800a742:	e000      	b.n	800a746 <xQueueGenericSend+0x46>
 800a744:	2300      	movs	r3, #0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <xQueueGenericSend+0x60>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d103      	bne.n	800a76e <xQueueGenericSend+0x6e>
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <xQueueGenericSend+0x72>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <xQueueGenericSend+0x74>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueGenericSend+0x8e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	623b      	str	r3, [r7, #32]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a78e:	f001 fc57 	bl	800c040 <xTaskGetSchedulerState>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xQueueGenericSend+0x9e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <xQueueGenericSend+0xa2>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <xQueueGenericSend+0xa4>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xQueueGenericSend+0xbe>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61fb      	str	r3, [r7, #28]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7be:	f002 fa99 	bl	800ccf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <xQueueGenericSend+0xd4>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d129      	bne.n	800a828 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7da:	f000 fbd2 	bl	800af82 <prvCopyDataToQueue>
 800a7de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d010      	beq.n	800a80a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f001 fa65 	bl	800bcbc <xTaskRemoveFromEventList>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d013      	beq.n	800a820 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7f8:	4b3f      	ldr	r3, [pc, #252]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	e00a      	b.n	800a820 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a810:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a820:	f002 fa98 	bl	800cd54 <vPortExitCritical>
				return pdPASS;
 800a824:	2301      	movs	r3, #1
 800a826:	e063      	b.n	800a8f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a82e:	f002 fa91 	bl	800cd54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a832:	2300      	movs	r3, #0
 800a834:	e05c      	b.n	800a8f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83c:	f107 0314 	add.w	r3, r7, #20
 800a840:	4618      	mov	r0, r3
 800a842:	f001 fa9f 	bl	800bd84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a84a:	f002 fa83 	bl	800cd54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84e:	f001 f80b 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a852:	f002 fa4f 	bl	800ccf4 <vPortEnterCritical>
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a85c:	b25b      	sxtb	r3, r3
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a862:	d103      	bne.n	800a86c <xQueueGenericSend+0x16c>
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a872:	b25b      	sxtb	r3, r3
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a878:	d103      	bne.n	800a882 <xQueueGenericSend+0x182>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a882:	f002 fa67 	bl	800cd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a886:	1d3a      	adds	r2, r7, #4
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 fa8e 	bl	800bdb0 <xTaskCheckForTimeOut>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d124      	bne.n	800a8e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a89a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89c:	f000 fc69 	bl	800b172 <prvIsQueueFull>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d018      	beq.n	800a8d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	3310      	adds	r3, #16
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 f9b4 	bl	800bc1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8b6:	f000 fbf4 	bl	800b0a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ba:	f000 ffe3 	bl	800b884 <xTaskResumeAll>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f47f af7c 	bne.w	800a7be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	e772      	b.n	800a7be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8da:	f000 fbe2 	bl	800b0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8de:	f000 ffd1 	bl	800b884 <xTaskResumeAll>
 800a8e2:	e76c      	b.n	800a7be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e6:	f000 fbdc 	bl	800b0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8ea:	f000 ffcb 	bl	800b884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3738      	adds	r7, #56	; 0x38
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b090      	sub	sp, #64	; 0x40
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <xQueueGenericSendFromISR+0x3c>
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <xQueueGenericSendFromISR+0x40>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <xQueueGenericSendFromISR+0x42>
 800a93c:	2300      	movs	r3, #0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d103      	bne.n	800a966 <xQueueGenericSendFromISR+0x6a>
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <xQueueGenericSendFromISR+0x6e>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <xQueueGenericSendFromISR+0x70>
 800a96a:	2300      	movs	r3, #0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	623b      	str	r3, [r7, #32]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a986:	f002 fa97 	bl	800ceb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a98a:	f3ef 8211 	mrs	r2, BASEPRI
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	61fa      	str	r2, [r7, #28]
 800a9a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d302      	bcc.n	800a9b8 <xQueueGenericSendFromISR+0xbc>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d12f      	bne.n	800aa18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9ce:	f000 fad8 	bl	800af82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d112      	bne.n	800aa02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d016      	beq.n	800aa12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	3324      	adds	r3, #36	; 0x24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f001 f967 	bl	800bcbc <xTaskRemoveFromEventList>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00e      	beq.n	800aa12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00b      	beq.n	800aa12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e007      	b.n	800aa12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa06:	3301      	adds	r3, #1
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	b25a      	sxtb	r2, r3
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa12:	2301      	movs	r3, #1
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa16:	e001      	b.n	800aa1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3740      	adds	r7, #64	; 0x40
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08c      	sub	sp, #48	; 0x30
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10a      	bne.n	800aa64 <xQueueReceive+0x30>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	623b      	str	r3, [r7, #32]
}
 800aa60:	bf00      	nop
 800aa62:	e7fe      	b.n	800aa62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d103      	bne.n	800aa72 <xQueueReceive+0x3e>
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <xQueueReceive+0x42>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e000      	b.n	800aa78 <xQueueReceive+0x44>
 800aa76:	2300      	movs	r3, #0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <xQueueReceive+0x5e>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	61fb      	str	r3, [r7, #28]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa92:	f001 fad5 	bl	800c040 <xTaskGetSchedulerState>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <xQueueReceive+0x6e>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <xQueueReceive+0x72>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <xQueueReceive+0x74>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <xQueueReceive+0x8e>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	61bb      	str	r3, [r7, #24]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aac2:	f002 f917 	bl	800ccf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01f      	beq.n	800ab12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad6:	f000 fabe 	bl	800b056 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	1e5a      	subs	r2, r3, #1
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00f      	beq.n	800ab0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	3310      	adds	r3, #16
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 f8e4 	bl	800bcbc <xTaskRemoveFromEventList>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aafa:	4b3d      	ldr	r3, [pc, #244]	; (800abf0 <xQueueReceive+0x1bc>)
 800aafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab0a:	f002 f923 	bl	800cd54 <vPortExitCritical>
				return pdPASS;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e069      	b.n	800abe6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d103      	bne.n	800ab20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab18:	f002 f91c 	bl	800cd54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e062      	b.n	800abe6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d106      	bne.n	800ab34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab26:	f107 0310 	add.w	r3, r7, #16
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 f92a 	bl	800bd84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab30:	2301      	movs	r3, #1
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab34:	f002 f90e 	bl	800cd54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab38:	f000 fe96 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab3c:	f002 f8da 	bl	800ccf4 <vPortEnterCritical>
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab46:	b25b      	sxtb	r3, r3
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d103      	bne.n	800ab56 <xQueueReceive+0x122>
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab5c:	b25b      	sxtb	r3, r3
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d103      	bne.n	800ab6c <xQueueReceive+0x138>
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab6c:	f002 f8f2 	bl	800cd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab70:	1d3a      	adds	r2, r7, #4
 800ab72:	f107 0310 	add.w	r3, r7, #16
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f919 	bl	800bdb0 <xTaskCheckForTimeOut>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d123      	bne.n	800abcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab86:	f000 fade 	bl	800b146 <prvIsQueueEmpty>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	4611      	mov	r1, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f001 f83f 	bl	800bc1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aba0:	f000 fa7f 	bl	800b0a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aba4:	f000 fe6e 	bl	800b884 <xTaskResumeAll>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d189      	bne.n	800aac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abae:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <xQueueReceive+0x1bc>)
 800abb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	e780      	b.n	800aac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc2:	f000 fa6e 	bl	800b0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abc6:	f000 fe5d 	bl	800b884 <xTaskResumeAll>
 800abca:	e77a      	b.n	800aac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abce:	f000 fa68 	bl	800b0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abd2:	f000 fe57 	bl	800b884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd8:	f000 fab5 	bl	800b146 <prvIsQueueEmpty>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f43f af6f 	beq.w	800aac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3730      	adds	r7, #48	; 0x30
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	e000ed04 	.word	0xe000ed04

0800abf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08e      	sub	sp, #56	; 0x38
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61fb      	str	r3, [r7, #28]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac44:	f001 f9fc 	bl	800c040 <xTaskGetSchedulerState>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <xQueueSemaphoreTake+0x60>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <xQueueSemaphoreTake+0x64>
 800ac54:	2301      	movs	r3, #1
 800ac56:	e000      	b.n	800ac5a <xQueueSemaphoreTake+0x66>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61bb      	str	r3, [r7, #24]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac74:	f002 f83e 	bl	800ccf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d024      	beq.n	800acce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	1e5a      	subs	r2, r3, #1
 800ac88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac94:	f001 fb4a 	bl	800c32c <pvTaskIncrementMutexHeldCount>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00f      	beq.n	800acc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	3310      	adds	r3, #16
 800acaa:	4618      	mov	r0, r3
 800acac:	f001 f806 	bl	800bcbc <xTaskRemoveFromEventList>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acb6:	4b54      	ldr	r3, [pc, #336]	; (800ae08 <xQueueSemaphoreTake+0x214>)
 800acb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acc6:	f002 f845 	bl	800cd54 <vPortExitCritical>
				return pdPASS;
 800acca:	2301      	movs	r3, #1
 800accc:	e097      	b.n	800adfe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d111      	bne.n	800acf8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	617b      	str	r3, [r7, #20]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acf0:	f002 f830 	bl	800cd54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e082      	b.n	800adfe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acfe:	f107 030c 	add.w	r3, r7, #12
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f83e 	bl	800bd84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad0c:	f002 f822 	bl	800cd54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad10:	f000 fdaa 	bl	800b868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad14:	f001 ffee 	bl	800ccf4 <vPortEnterCritical>
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d103      	bne.n	800ad2e <xQueueSemaphoreTake+0x13a>
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d103      	bne.n	800ad44 <xQueueSemaphoreTake+0x150>
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad44:	f002 f806 	bl	800cd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad48:	463a      	mov	r2, r7
 800ad4a:	f107 030c 	add.w	r3, r7, #12
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 f82d 	bl	800bdb0 <xTaskCheckForTimeOut>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d132      	bne.n	800adc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad5e:	f000 f9f2 	bl	800b146 <prvIsQueueEmpty>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d026      	beq.n	800adb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ad70:	f001 ffc0 	bl	800ccf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f001 f97f 	bl	800c07c <xTaskPriorityInherit>
 800ad7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad80:	f001 ffe8 	bl	800cd54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	3324      	adds	r3, #36	; 0x24
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 ff45 	bl	800bc1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad94:	f000 f985 	bl	800b0a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad98:	f000 fd74 	bl	800b884 <xTaskResumeAll>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f47f af68 	bne.w	800ac74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ada4:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <xQueueSemaphoreTake+0x214>)
 800ada6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	e75e      	b.n	800ac74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800adb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adb8:	f000 f973 	bl	800b0a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adbc:	f000 fd62 	bl	800b884 <xTaskResumeAll>
 800adc0:	e758      	b.n	800ac74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adc4:	f000 f96d 	bl	800b0a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adc8:	f000 fd5c 	bl	800b884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adce:	f000 f9ba 	bl	800b146 <prvIsQueueEmpty>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	f43f af4d 	beq.w	800ac74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00d      	beq.n	800adfc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ade0:	f001 ff88 	bl	800ccf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ade4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade6:	f000 f8b4 	bl	800af52 <prvGetDisinheritPriorityAfterTimeout>
 800adea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adf2:	4618      	mov	r0, r3
 800adf4:	f001 fa18 	bl	800c228 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adf8:	f001 ffac 	bl	800cd54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3738      	adds	r7, #56	; 0x38
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08e      	sub	sp, #56	; 0x38
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10a      	bne.n	800ae38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	623b      	str	r3, [r7, #32]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d103      	bne.n	800ae46 <xQueueReceiveFromISR+0x3a>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <xQueueReceiveFromISR+0x3e>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xQueueReceiveFromISR+0x40>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	61fb      	str	r3, [r7, #28]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae66:	f002 f827 	bl	800ceb8 <vPortValidateInterruptPriority>
	__asm volatile
 800ae6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	61ba      	str	r2, [r7, #24]
 800ae80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d02f      	beq.n	800aef2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae9c:	68b9      	ldr	r1, [r7, #8]
 800ae9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea0:	f000 f8d9 	bl	800b056 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	1e5a      	subs	r2, r3, #1
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aeac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d112      	bne.n	800aedc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d016      	beq.n	800aeec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	3310      	adds	r3, #16
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fefa 	bl	800bcbc <xTaskRemoveFromEventList>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00e      	beq.n	800aeec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e007      	b.n	800aeec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aee0:	3301      	adds	r3, #1
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	b25a      	sxtb	r2, r3
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aeec:	2301      	movs	r3, #1
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
 800aef0:	e001      	b.n	800aef6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f383 8811 	msr	BASEPRI, r3
}
 800af00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af04:	4618      	mov	r0, r3
 800af06:	3738      	adds	r7, #56	; 0x38
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10a      	bne.n	800af34 <vQueueDelete+0x28>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60bb      	str	r3, [r7, #8]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 f95f 	bl	800b1f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f002 f8c3 	bl	800d0d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af52:	b480      	push	{r7}
 800af54:	b085      	sub	sp, #20
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d006      	beq.n	800af70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af6c:	60fb      	str	r3, [r7, #12]
 800af6e:	e001      	b.n	800af74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af74:	68fb      	ldr	r3, [r7, #12]
	}
 800af76:	4618      	mov	r0, r3
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b086      	sub	sp, #24
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10d      	bne.n	800afbc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d14d      	bne.n	800b044 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f001 f8cd 	bl	800c14c <xTaskPriorityDisinherit>
 800afb2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	609a      	str	r2, [r3, #8]
 800afba:	e043      	b.n	800b044 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d119      	bne.n	800aff6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6858      	ldr	r0, [r3, #4]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	461a      	mov	r2, r3
 800afcc:	68b9      	ldr	r1, [r7, #8]
 800afce:	f002 fae1 	bl	800d594 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	441a      	add	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d32b      	bcc.n	800b044 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	605a      	str	r2, [r3, #4]
 800aff4:	e026      	b.n	800b044 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	68d8      	ldr	r0, [r3, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	461a      	mov	r2, r3
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	f002 fac7 	bl	800d594 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00e:	425b      	negs	r3, r3
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d207      	bcs.n	800b032 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689a      	ldr	r2, [r3, #8]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	425b      	negs	r3, r3
 800b02c:	441a      	add	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b02      	cmp	r3, #2
 800b036:	d105      	bne.n	800b044 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	3b01      	subs	r3, #1
 800b042:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b04c:	697b      	ldr	r3, [r7, #20]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	d018      	beq.n	800b09a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b070:	441a      	add	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d303      	bcc.n	800b08a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68d9      	ldr	r1, [r3, #12]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	461a      	mov	r2, r3
 800b094:	6838      	ldr	r0, [r7, #0]
 800b096:	f002 fa7d 	bl	800d594 <memcpy>
	}
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0aa:	f001 fe23 	bl	800ccf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0b6:	e011      	b.n	800b0dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d012      	beq.n	800b0e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3324      	adds	r3, #36	; 0x24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fdf9 	bl	800bcbc <xTaskRemoveFromEventList>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0d0:	f000 fed0 	bl	800be74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dce9      	bgt.n	800b0b8 <prvUnlockQueue+0x16>
 800b0e4:	e000      	b.n	800b0e8 <prvUnlockQueue+0x46>
					break;
 800b0e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	22ff      	movs	r2, #255	; 0xff
 800b0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0f0:	f001 fe30 	bl	800cd54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0f4:	f001 fdfe 	bl	800ccf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b100:	e011      	b.n	800b126 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d012      	beq.n	800b130 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3310      	adds	r3, #16
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fdd4 	bl	800bcbc <xTaskRemoveFromEventList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b11a:	f000 feab 	bl	800be74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	3b01      	subs	r3, #1
 800b122:	b2db      	uxtb	r3, r3
 800b124:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dce9      	bgt.n	800b102 <prvUnlockQueue+0x60>
 800b12e:	e000      	b.n	800b132 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b130:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	22ff      	movs	r2, #255	; 0xff
 800b136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b13a:	f001 fe0b 	bl	800cd54 <vPortExitCritical>
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b14e:	f001 fdd1 	bl	800ccf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	2b00      	cmp	r3, #0
 800b158:	d102      	bne.n	800b160 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b15a:	2301      	movs	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e001      	b.n	800b164 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b164:	f001 fdf6 	bl	800cd54 <vPortExitCritical>

	return xReturn;
 800b168:	68fb      	ldr	r3, [r7, #12]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b17a:	f001 fdbb 	bl	800ccf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b186:	429a      	cmp	r2, r3
 800b188:	d102      	bne.n	800b190 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b18a:	2301      	movs	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e001      	b.n	800b194 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b194:	f001 fdde 	bl	800cd54 <vPortExitCritical>

	return xReturn;
 800b198:	68fb      	ldr	r3, [r7, #12]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e014      	b.n	800b1de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1b4:	4a0f      	ldr	r2, [pc, #60]	; (800b1f4 <vQueueAddToRegistry+0x50>)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10b      	bne.n	800b1d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1c0:	490c      	ldr	r1, [pc, #48]	; (800b1f4 <vQueueAddToRegistry+0x50>)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1ca:	4a0a      	ldr	r2, [pc, #40]	; (800b1f4 <vQueueAddToRegistry+0x50>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1d6:	e006      	b.n	800b1e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b07      	cmp	r3, #7
 800b1e2:	d9e7      	bls.n	800b1b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	200011fc 	.word	0x200011fc

0800b1f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	e016      	b.n	800b234 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b206:	4a10      	ldr	r2, [pc, #64]	; (800b248 <vQueueUnregisterQueue+0x50>)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	4413      	add	r3, r2
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	429a      	cmp	r2, r3
 800b214:	d10b      	bne.n	800b22e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b216:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <vQueueUnregisterQueue+0x50>)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2100      	movs	r1, #0
 800b21c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b220:	4a09      	ldr	r2, [pc, #36]	; (800b248 <vQueueUnregisterQueue+0x50>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	4413      	add	r3, r2
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
				break;
 800b22c:	e006      	b.n	800b23c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b07      	cmp	r3, #7
 800b238:	d9e5      	bls.n	800b206 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	200011fc 	.word	0x200011fc

0800b24c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b25c:	f001 fd4a 	bl	800ccf4 <vPortEnterCritical>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b266:	b25b      	sxtb	r3, r3
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d103      	bne.n	800b276 <vQueueWaitForMessageRestricted+0x2a>
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27c:	b25b      	sxtb	r3, r3
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d103      	bne.n	800b28c <vQueueWaitForMessageRestricted+0x40>
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b28c:	f001 fd62 	bl	800cd54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	3324      	adds	r3, #36	; 0x24
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fcdf 	bl	800bc64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2a6:	6978      	ldr	r0, [r7, #20]
 800b2a8:	f7ff fefb 	bl	800b0a2 <prvUnlockQueue>
	}
 800b2ac:	bf00      	nop
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08e      	sub	sp, #56	; 0x38
 800b2b8:	af04      	add	r7, sp, #16
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10a      	bne.n	800b2de <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	623b      	str	r3, [r7, #32]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xTaskCreateStatic+0x46>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2fa:	23bc      	movs	r3, #188	; 0xbc
 800b2fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2bbc      	cmp	r3, #188	; 0xbc
 800b302:	d00a      	beq.n	800b31a <xTaskCreateStatic+0x66>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	61bb      	str	r3, [r7, #24]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b31a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d01e      	beq.n	800b360 <xTaskCreateStatic+0xac>
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01b      	beq.n	800b360 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	2202      	movs	r2, #2
 800b336:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b33a:	2300      	movs	r3, #0
 800b33c:	9303      	str	r3, [sp, #12]
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	9302      	str	r3, [sp, #8]
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 f850 	bl	800b3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b35a:	f000 f8f3 	bl	800b544 <prvAddNewTaskToReadyList>
 800b35e:	e001      	b.n	800b364 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b364:	697b      	ldr	r3, [r7, #20]
	}
 800b366:	4618      	mov	r0, r3
 800b368:	3728      	adds	r7, #40	; 0x28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b08c      	sub	sp, #48	; 0x30
 800b372:	af04      	add	r7, sp, #16
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4613      	mov	r3, r2
 800b37c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fdd8 	bl	800cf38 <pvPortMalloc>
 800b388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b390:	20bc      	movs	r0, #188	; 0xbc
 800b392:	f001 fdd1 	bl	800cf38 <pvPortMalloc>
 800b396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3a4:	e005      	b.n	800b3b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3a6:	6978      	ldr	r0, [r7, #20]
 800b3a8:	f001 fe92 	bl	800d0d0 <vPortFree>
 800b3ac:	e001      	b.n	800b3b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d017      	beq.n	800b3e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3c0:	88fa      	ldrh	r2, [r7, #6]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9303      	str	r3, [sp, #12]
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	9302      	str	r3, [sp, #8]
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 f80e 	bl	800b3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3dc:	69f8      	ldr	r0, [r7, #28]
 800b3de:	f000 f8b1 	bl	800b544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	e002      	b.n	800b3ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	461a      	mov	r2, r3
 800b410:	21a5      	movs	r1, #165	; 0xa5
 800b412:	f002 f8cd 	bl	800d5b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b420:	3b01      	subs	r3, #1
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	f023 0307 	bic.w	r3, r3, #7
 800b42e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	617b      	str	r3, [r7, #20]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01f      	beq.n	800b496 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b456:	2300      	movs	r3, #0
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	e012      	b.n	800b482 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4413      	add	r3, r2
 800b462:	7819      	ldrb	r1, [r3, #0]
 800b464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	3334      	adds	r3, #52	; 0x34
 800b46c:	460a      	mov	r2, r1
 800b46e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d006      	beq.n	800b48a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	3301      	adds	r3, #1
 800b480:	61fb      	str	r3, [r7, #28]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	2b0f      	cmp	r3, #15
 800b486:	d9e9      	bls.n	800b45c <prvInitialiseNewTask+0x64>
 800b488:	e000      	b.n	800b48c <prvInitialiseNewTask+0x94>
			{
				break;
 800b48a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b494:	e003      	b.n	800b49e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	2b37      	cmp	r3, #55	; 0x37
 800b4a2:	d901      	bls.n	800b4a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4a4:	2337      	movs	r3, #55	; 0x37
 800b4a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fee2 	bl	800a288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fedd 	bl	800a288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	3354      	adds	r3, #84	; 0x54
 800b4f8:	2260      	movs	r2, #96	; 0x60
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f002 f857 	bl	800d5b0 <memset>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	4a0c      	ldr	r2, [pc, #48]	; (800b538 <prvInitialiseNewTask+0x140>)
 800b506:	659a      	str	r2, [r3, #88]	; 0x58
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	4a0c      	ldr	r2, [pc, #48]	; (800b53c <prvInitialiseNewTask+0x144>)
 800b50c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	4a0b      	ldr	r2, [pc, #44]	; (800b540 <prvInitialiseNewTask+0x148>)
 800b512:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68f9      	ldr	r1, [r7, #12]
 800b518:	69b8      	ldr	r0, [r7, #24]
 800b51a:	f001 fabd 	bl	800ca98 <pxPortInitialiseStack>
 800b51e:	4602      	mov	r2, r0
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b530:	bf00      	nop
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	080112d8 	.word	0x080112d8
 800b53c:	080112f8 	.word	0x080112f8
 800b540:	080112b8 	.word	0x080112b8

0800b544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b54c:	f001 fbd2 	bl	800ccf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b550:	4b2d      	ldr	r3, [pc, #180]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a2c      	ldr	r2, [pc, #176]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b55a:	4b2c      	ldr	r3, [pc, #176]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d109      	bne.n	800b576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b562:	4a2a      	ldr	r2, [pc, #168]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b568:	4b27      	ldr	r3, [pc, #156]	; (800b608 <prvAddNewTaskToReadyList+0xc4>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d110      	bne.n	800b592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b570:	f000 fca4 	bl	800bebc <prvInitialiseTaskLists>
 800b574:	e00d      	b.n	800b592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <prvAddNewTaskToReadyList+0xcc>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b57e:	4b23      	ldr	r3, [pc, #140]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	429a      	cmp	r2, r3
 800b58a:	d802      	bhi.n	800b592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b58c:	4a1f      	ldr	r2, [pc, #124]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b592:	4b20      	ldr	r3, [pc, #128]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3301      	adds	r3, #1
 800b598:	4a1e      	ldr	r2, [pc, #120]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b59a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b59c:	4b1d      	ldr	r3, [pc, #116]	; (800b614 <prvAddNewTaskToReadyList+0xd0>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a8:	4b1b      	ldr	r3, [pc, #108]	; (800b618 <prvAddNewTaskToReadyList+0xd4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d903      	bls.n	800b5b8 <prvAddNewTaskToReadyList+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	4a18      	ldr	r2, [pc, #96]	; (800b618 <prvAddNewTaskToReadyList+0xd4>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4a15      	ldr	r2, [pc, #84]	; (800b61c <prvAddNewTaskToReadyList+0xd8>)
 800b5c6:	441a      	add	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7fe fe67 	bl	800a2a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5d4:	f001 fbbe 	bl	800cd54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5d8:	4b0d      	ldr	r3, [pc, #52]	; (800b610 <prvAddNewTaskToReadyList+0xcc>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <prvAddNewTaskToReadyList+0xc8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d207      	bcs.n	800b5fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5ee:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <prvAddNewTaskToReadyList+0xdc>)
 800b5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20001710 	.word	0x20001710
 800b60c:	2000123c 	.word	0x2000123c
 800b610:	2000171c 	.word	0x2000171c
 800b614:	2000172c 	.word	0x2000172c
 800b618:	20001718 	.word	0x20001718
 800b61c:	20001240 	.word	0x20001240
 800b620:	e000ed04 	.word	0xe000ed04

0800b624 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <vTaskDelayUntil+0x2a>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	617b      	str	r3, [r7, #20]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <vTaskDelayUntil+0x46>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	613b      	str	r3, [r7, #16]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b66a:	4b2a      	ldr	r3, [pc, #168]	; (800b714 <vTaskDelayUntil+0xf0>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <vTaskDelayUntil+0x64>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	60fb      	str	r3, [r7, #12]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b688:	f000 f8ee 	bl	800b868 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b68c:	4b22      	ldr	r3, [pc, #136]	; (800b718 <vTaskDelayUntil+0xf4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4413      	add	r3, r2
 800b69a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6a3a      	ldr	r2, [r7, #32]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d20b      	bcs.n	800b6be <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d211      	bcs.n	800b6d4 <vTaskDelayUntil+0xb0>
 800b6b0:	69fa      	ldr	r2, [r7, #28]
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d90d      	bls.n	800b6d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b6bc:	e00a      	b.n	800b6d4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d303      	bcc.n	800b6d0 <vTaskDelayUntil+0xac>
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d901      	bls.n	800b6d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d006      	beq.n	800b6ee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fe33 	bl	800c354 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b6ee:	f000 f8c9 	bl	800b884 <xTaskResumeAll>
 800b6f2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d107      	bne.n	800b70a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b6fa:	4b08      	ldr	r3, [pc, #32]	; (800b71c <vTaskDelayUntil+0xf8>)
 800b6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b70a:	bf00      	nop
 800b70c:	3728      	adds	r7, #40	; 0x28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20001738 	.word	0x20001738
 800b718:	20001714 	.word	0x20001714
 800b71c:	e000ed04 	.word	0xe000ed04

0800b720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d017      	beq.n	800b762 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b732:	4b13      	ldr	r3, [pc, #76]	; (800b780 <vTaskDelay+0x60>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <vTaskDelay+0x30>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	60bb      	str	r3, [r7, #8]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b750:	f000 f88a 	bl	800b868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b754:	2100      	movs	r1, #0
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fdfc 	bl	800c354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b75c:	f000 f892 	bl	800b884 <xTaskResumeAll>
 800b760:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d107      	bne.n	800b778 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <vTaskDelay+0x64>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20001738 	.word	0x20001738
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b796:	463a      	mov	r2, r7
 800b798:	1d39      	adds	r1, r7, #4
 800b79a:	f107 0308 	add.w	r3, r7, #8
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd1e 	bl	800a1e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	9202      	str	r2, [sp, #8]
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	460a      	mov	r2, r1
 800b7b6:	4924      	ldr	r1, [pc, #144]	; (800b848 <vTaskStartScheduler+0xc0>)
 800b7b8:	4824      	ldr	r0, [pc, #144]	; (800b84c <vTaskStartScheduler+0xc4>)
 800b7ba:	f7ff fd7b 	bl	800b2b4 <xTaskCreateStatic>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4a23      	ldr	r2, [pc, #140]	; (800b850 <vTaskStartScheduler+0xc8>)
 800b7c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7c4:	4b22      	ldr	r3, [pc, #136]	; (800b850 <vTaskStartScheduler+0xc8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e001      	b.n	800b7d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d102      	bne.n	800b7e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b7dc:	f000 fe0e 	bl	800c3fc <xTimerCreateTimerTask>
 800b7e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d11b      	bne.n	800b820 <vTaskStartScheduler+0x98>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	613b      	str	r3, [r7, #16]
}
 800b7fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7fc:	4b15      	ldr	r3, [pc, #84]	; (800b854 <vTaskStartScheduler+0xcc>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3354      	adds	r3, #84	; 0x54
 800b802:	4a15      	ldr	r2, [pc, #84]	; (800b858 <vTaskStartScheduler+0xd0>)
 800b804:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b806:	4b15      	ldr	r3, [pc, #84]	; (800b85c <vTaskStartScheduler+0xd4>)
 800b808:	f04f 32ff 	mov.w	r2, #4294967295
 800b80c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b80e:	4b14      	ldr	r3, [pc, #80]	; (800b860 <vTaskStartScheduler+0xd8>)
 800b810:	2201      	movs	r2, #1
 800b812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b814:	4b13      	ldr	r3, [pc, #76]	; (800b864 <vTaskStartScheduler+0xdc>)
 800b816:	2200      	movs	r2, #0
 800b818:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b81a:	f001 f9c9 	bl	800cbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b81e:	e00e      	b.n	800b83e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b826:	d10a      	bne.n	800b83e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	60fb      	str	r3, [r7, #12]
}
 800b83a:	bf00      	nop
 800b83c:	e7fe      	b.n	800b83c <vTaskStartScheduler+0xb4>
}
 800b83e:	bf00      	nop
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	08011058 	.word	0x08011058
 800b84c:	0800be8d 	.word	0x0800be8d
 800b850:	20001734 	.word	0x20001734
 800b854:	2000123c 	.word	0x2000123c
 800b858:	20000034 	.word	0x20000034
 800b85c:	20001730 	.word	0x20001730
 800b860:	2000171c 	.word	0x2000171c
 800b864:	20001714 	.word	0x20001714

0800b868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b86c:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vTaskSuspendAll+0x18>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	4a03      	ldr	r2, [pc, #12]	; (800b880 <vTaskSuspendAll+0x18>)
 800b874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b876:	bf00      	nop
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	20001738 	.word	0x20001738

0800b884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b892:	4b42      	ldr	r3, [pc, #264]	; (800b99c <xTaskResumeAll+0x118>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	603b      	str	r3, [r7, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8b0:	f001 fa20 	bl	800ccf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8b4:	4b39      	ldr	r3, [pc, #228]	; (800b99c <xTaskResumeAll+0x118>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	4a38      	ldr	r2, [pc, #224]	; (800b99c <xTaskResumeAll+0x118>)
 800b8bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8be:	4b37      	ldr	r3, [pc, #220]	; (800b99c <xTaskResumeAll+0x118>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d162      	bne.n	800b98c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8c6:	4b36      	ldr	r3, [pc, #216]	; (800b9a0 <xTaskResumeAll+0x11c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d05e      	beq.n	800b98c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ce:	e02f      	b.n	800b930 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d0:	4b34      	ldr	r3, [pc, #208]	; (800b9a4 <xTaskResumeAll+0x120>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3318      	adds	r3, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fd3d 	bl	800a35c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fd38 	bl	800a35c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f0:	4b2d      	ldr	r3, [pc, #180]	; (800b9a8 <xTaskResumeAll+0x124>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d903      	bls.n	800b900 <xTaskResumeAll+0x7c>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <xTaskResumeAll+0x124>)
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4a27      	ldr	r2, [pc, #156]	; (800b9ac <xTaskResumeAll+0x128>)
 800b90e:	441a      	add	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3304      	adds	r3, #4
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7fe fcc3 	bl	800a2a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4b23      	ldr	r3, [pc, #140]	; (800b9b0 <xTaskResumeAll+0x12c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	429a      	cmp	r2, r3
 800b928:	d302      	bcc.n	800b930 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b92a:	4b22      	ldr	r3, [pc, #136]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b92c:	2201      	movs	r2, #1
 800b92e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <xTaskResumeAll+0x120>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1cb      	bne.n	800b8d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b93e:	f000 fb5f 	bl	800c000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b942:	4b1d      	ldr	r3, [pc, #116]	; (800b9b8 <xTaskResumeAll+0x134>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d010      	beq.n	800b970 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b94e:	f000 f847 	bl	800b9e0 <xTaskIncrementTick>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b958:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f1      	bne.n	800b94e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <xTaskResumeAll+0x134>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b970:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <xTaskResumeAll+0x130>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b978:	2301      	movs	r3, #1
 800b97a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <xTaskResumeAll+0x138>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b98c:	f001 f9e2 	bl	800cd54 <vPortExitCritical>

	return xAlreadyYielded;
 800b990:	68bb      	ldr	r3, [r7, #8]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20001738 	.word	0x20001738
 800b9a0:	20001710 	.word	0x20001710
 800b9a4:	200016d0 	.word	0x200016d0
 800b9a8:	20001718 	.word	0x20001718
 800b9ac:	20001240 	.word	0x20001240
 800b9b0:	2000123c 	.word	0x2000123c
 800b9b4:	20001724 	.word	0x20001724
 800b9b8:	20001720 	.word	0x20001720
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <xTaskGetTickCount+0x1c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9cc:	687b      	ldr	r3, [r7, #4]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20001714 	.word	0x20001714

0800b9e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ea:	4b4f      	ldr	r3, [pc, #316]	; (800bb28 <xTaskIncrementTick+0x148>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f040 808f 	bne.w	800bb12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9f4:	4b4d      	ldr	r3, [pc, #308]	; (800bb2c <xTaskIncrementTick+0x14c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9fc:	4a4b      	ldr	r2, [pc, #300]	; (800bb2c <xTaskIncrementTick+0x14c>)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d120      	bne.n	800ba4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba08:	4b49      	ldr	r3, [pc, #292]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	603b      	str	r3, [r7, #0]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <xTaskIncrementTick+0x46>
 800ba28:	4b41      	ldr	r3, [pc, #260]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]
 800ba2e:	4b41      	ldr	r3, [pc, #260]	; (800bb34 <xTaskIncrementTick+0x154>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a3f      	ldr	r2, [pc, #252]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	4a3f      	ldr	r2, [pc, #252]	; (800bb34 <xTaskIncrementTick+0x154>)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	4b3e      	ldr	r3, [pc, #248]	; (800bb38 <xTaskIncrementTick+0x158>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	4a3d      	ldr	r2, [pc, #244]	; (800bb38 <xTaskIncrementTick+0x158>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	f000 fadb 	bl	800c000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba4a:	4b3c      	ldr	r3, [pc, #240]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d349      	bcc.n	800bae8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba54:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d104      	bne.n	800ba68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
 800ba64:	601a      	str	r2, [r3, #0]
					break;
 800ba66:	e03f      	b.n	800bae8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba68:	4b31      	ldr	r3, [pc, #196]	; (800bb30 <xTaskIncrementTick+0x150>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d203      	bcs.n	800ba88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba80:	4a2e      	ldr	r2, [pc, #184]	; (800bb3c <xTaskIncrementTick+0x15c>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba86:	e02f      	b.n	800bae8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fe fc65 	bl	800a35c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	3318      	adds	r3, #24
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe fc5c 	bl	800a35c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <xTaskIncrementTick+0x160>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d903      	bls.n	800bab8 <xTaskIncrementTick+0xd8>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <xTaskIncrementTick+0x160>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <xTaskIncrementTick+0x164>)
 800bac6:	441a      	add	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fbe7 	bl	800a2a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <xTaskIncrementTick+0x168>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	429a      	cmp	r2, r3
 800bae0:	d3b8      	bcc.n	800ba54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bae6:	e7b5      	b.n	800ba54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bae8:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <xTaskIncrementTick+0x168>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4915      	ldr	r1, [pc, #84]	; (800bb44 <xTaskIncrementTick+0x164>)
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	440b      	add	r3, r1
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d901      	bls.n	800bb04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb04:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <xTaskIncrementTick+0x16c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d007      	beq.n	800bb1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	e004      	b.n	800bb1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <xTaskIncrementTick+0x170>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	4a0d      	ldr	r2, [pc, #52]	; (800bb50 <xTaskIncrementTick+0x170>)
 800bb1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb1c:	697b      	ldr	r3, [r7, #20]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20001738 	.word	0x20001738
 800bb2c:	20001714 	.word	0x20001714
 800bb30:	200016c8 	.word	0x200016c8
 800bb34:	200016cc 	.word	0x200016cc
 800bb38:	20001728 	.word	0x20001728
 800bb3c:	20001730 	.word	0x20001730
 800bb40:	20001718 	.word	0x20001718
 800bb44:	20001240 	.word	0x20001240
 800bb48:	2000123c 	.word	0x2000123c
 800bb4c:	20001724 	.word	0x20001724
 800bb50:	20001720 	.word	0x20001720

0800bb54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb5a:	4b2a      	ldr	r3, [pc, #168]	; (800bc04 <vTaskSwitchContext+0xb0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb62:	4b29      	ldr	r3, [pc, #164]	; (800bc08 <vTaskSwitchContext+0xb4>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb68:	e046      	b.n	800bbf8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <vTaskSwitchContext+0xb4>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb70:	4b26      	ldr	r3, [pc, #152]	; (800bc0c <vTaskSwitchContext+0xb8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	60fb      	str	r3, [r7, #12]
 800bb76:	e010      	b.n	800bb9a <vTaskSwitchContext+0x46>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <vTaskSwitchContext+0x40>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	607b      	str	r3, [r7, #4]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <vTaskSwitchContext+0x3e>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	491d      	ldr	r1, [pc, #116]	; (800bc10 <vTaskSwitchContext+0xbc>)
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	440b      	add	r3, r1
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0e4      	beq.n	800bb78 <vTaskSwitchContext+0x24>
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4a15      	ldr	r2, [pc, #84]	; (800bc10 <vTaskSwitchContext+0xbc>)
 800bbba:	4413      	add	r3, r2
 800bbbc:	60bb      	str	r3, [r7, #8]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	605a      	str	r2, [r3, #4]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d104      	bne.n	800bbde <vTaskSwitchContext+0x8a>
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	4a0b      	ldr	r2, [pc, #44]	; (800bc14 <vTaskSwitchContext+0xc0>)
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	4a08      	ldr	r2, [pc, #32]	; (800bc0c <vTaskSwitchContext+0xb8>)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbee:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <vTaskSwitchContext+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3354      	adds	r3, #84	; 0x54
 800bbf4:	4a08      	ldr	r2, [pc, #32]	; (800bc18 <vTaskSwitchContext+0xc4>)
 800bbf6:	6013      	str	r3, [r2, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20001738 	.word	0x20001738
 800bc08:	20001724 	.word	0x20001724
 800bc0c:	20001718 	.word	0x20001718
 800bc10:	20001240 	.word	0x20001240
 800bc14:	2000123c 	.word	0x2000123c
 800bc18:	20000034 	.word	0x20000034

0800bc1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	60fb      	str	r3, [r7, #12]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <vTaskPlaceOnEventList+0x44>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3318      	adds	r3, #24
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fb4d 	bl	800a2ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc50:	2101      	movs	r1, #1
 800bc52:	6838      	ldr	r0, [r7, #0]
 800bc54:	f000 fb7e 	bl	800c354 <prvAddCurrentTaskToDelayedList>
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	2000123c 	.word	0x2000123c

0800bc64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	617b      	str	r3, [r7, #20]
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3318      	adds	r3, #24
 800bc92:	4619      	mov	r1, r3
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f7fe fb04 	bl	800a2a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	68b8      	ldr	r0, [r7, #8]
 800bcaa:	f000 fb53 	bl	800c354 <prvAddCurrentTaskToDelayedList>
	}
 800bcae:	bf00      	nop
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	2000123c 	.word	0x2000123c

0800bcbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60fb      	str	r3, [r7, #12]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	3318      	adds	r3, #24
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe fb35 	bl	800a35c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf2:	4b1e      	ldr	r3, [pc, #120]	; (800bd6c <xTaskRemoveFromEventList+0xb0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d11d      	bne.n	800bd36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe fb2c 	bl	800a35c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd08:	4b19      	ldr	r3, [pc, #100]	; (800bd70 <xTaskRemoveFromEventList+0xb4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d903      	bls.n	800bd18 <xTaskRemoveFromEventList+0x5c>
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd14:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <xTaskRemoveFromEventList+0xb4>)
 800bd16:	6013      	str	r3, [r2, #0]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4a13      	ldr	r2, [pc, #76]	; (800bd74 <xTaskRemoveFromEventList+0xb8>)
 800bd26:	441a      	add	r2, r3
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	4610      	mov	r0, r2
 800bd30:	f7fe fab7 	bl	800a2a2 <vListInsertEnd>
 800bd34:	e005      	b.n	800bd42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3318      	adds	r3, #24
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	480e      	ldr	r0, [pc, #56]	; (800bd78 <xTaskRemoveFromEventList+0xbc>)
 800bd3e:	f7fe fab0 	bl	800a2a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd46:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <xTaskRemoveFromEventList+0xc0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d905      	bls.n	800bd5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd54:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <xTaskRemoveFromEventList+0xc4>)
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e001      	b.n	800bd60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd60:	697b      	ldr	r3, [r7, #20]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20001738 	.word	0x20001738
 800bd70:	20001718 	.word	0x20001718
 800bd74:	20001240 	.word	0x20001240
 800bd78:	200016d0 	.word	0x200016d0
 800bd7c:	2000123c 	.word	0x2000123c
 800bd80:	20001724 	.word	0x20001724

0800bd84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <vTaskInternalSetTimeOutState+0x24>)
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd94:	4b05      	ldr	r3, [pc, #20]	; (800bdac <vTaskInternalSetTimeOutState+0x28>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	605a      	str	r2, [r3, #4]
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	20001728 	.word	0x20001728
 800bdac:	20001714 	.word	0x20001714

0800bdb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdf2:	f000 ff7f 	bl	800ccf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdf6:	4b1d      	ldr	r3, [pc, #116]	; (800be6c <xTaskCheckForTimeOut+0xbc>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d102      	bne.n	800be16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	e023      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	4b15      	ldr	r3, [pc, #84]	; (800be70 <xTaskCheckForTimeOut+0xc0>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d007      	beq.n	800be32 <xTaskCheckForTimeOut+0x82>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d302      	bcc.n	800be32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be2c:	2301      	movs	r3, #1
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	e015      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d20b      	bcs.n	800be54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	1ad2      	subs	r2, r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff ff9b 	bl	800bd84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be4e:	2300      	movs	r3, #0
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	e004      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be5e:	f000 ff79 	bl	800cd54 <vPortExitCritical>

	return xReturn;
 800be62:	69fb      	ldr	r3, [r7, #28]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20001714 	.word	0x20001714
 800be70:	20001728 	.word	0x20001728

0800be74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be78:	4b03      	ldr	r3, [pc, #12]	; (800be88 <vTaskMissedYield+0x14>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	601a      	str	r2, [r3, #0]
}
 800be7e:	bf00      	nop
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	20001724 	.word	0x20001724

0800be8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be94:	f000 f852 	bl	800bf3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be98:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <prvIdleTask+0x28>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d9f9      	bls.n	800be94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <prvIdleTask+0x2c>)
 800bea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800beb0:	e7f0      	b.n	800be94 <prvIdleTask+0x8>
 800beb2:	bf00      	nop
 800beb4:	20001240 	.word	0x20001240
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bec2:	2300      	movs	r3, #0
 800bec4:	607b      	str	r3, [r7, #4]
 800bec6:	e00c      	b.n	800bee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4a12      	ldr	r2, [pc, #72]	; (800bf1c <prvInitialiseTaskLists+0x60>)
 800bed4:	4413      	add	r3, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe f9b6 	bl	800a248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b37      	cmp	r3, #55	; 0x37
 800bee6:	d9ef      	bls.n	800bec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bee8:	480d      	ldr	r0, [pc, #52]	; (800bf20 <prvInitialiseTaskLists+0x64>)
 800beea:	f7fe f9ad 	bl	800a248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beee:	480d      	ldr	r0, [pc, #52]	; (800bf24 <prvInitialiseTaskLists+0x68>)
 800bef0:	f7fe f9aa 	bl	800a248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bef4:	480c      	ldr	r0, [pc, #48]	; (800bf28 <prvInitialiseTaskLists+0x6c>)
 800bef6:	f7fe f9a7 	bl	800a248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800befa:	480c      	ldr	r0, [pc, #48]	; (800bf2c <prvInitialiseTaskLists+0x70>)
 800befc:	f7fe f9a4 	bl	800a248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf00:	480b      	ldr	r0, [pc, #44]	; (800bf30 <prvInitialiseTaskLists+0x74>)
 800bf02:	f7fe f9a1 	bl	800a248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <prvInitialiseTaskLists+0x78>)
 800bf08:	4a05      	ldr	r2, [pc, #20]	; (800bf20 <prvInitialiseTaskLists+0x64>)
 800bf0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <prvInitialiseTaskLists+0x7c>)
 800bf0e:	4a05      	ldr	r2, [pc, #20]	; (800bf24 <prvInitialiseTaskLists+0x68>)
 800bf10:	601a      	str	r2, [r3, #0]
}
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20001240 	.word	0x20001240
 800bf20:	200016a0 	.word	0x200016a0
 800bf24:	200016b4 	.word	0x200016b4
 800bf28:	200016d0 	.word	0x200016d0
 800bf2c:	200016e4 	.word	0x200016e4
 800bf30:	200016fc 	.word	0x200016fc
 800bf34:	200016c8 	.word	0x200016c8
 800bf38:	200016cc 	.word	0x200016cc

0800bf3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf42:	e019      	b.n	800bf78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf44:	f000 fed6 	bl	800ccf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf48:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <prvCheckTasksWaitingTermination+0x50>)
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fa01 	bl	800a35c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <prvCheckTasksWaitingTermination+0x54>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <prvCheckTasksWaitingTermination+0x54>)
 800bf62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf64:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	4a0a      	ldr	r2, [pc, #40]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf6e:	f000 fef1 	bl	800cd54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f810 	bl	800bf98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf78:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1e1      	bne.n	800bf44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200016e4 	.word	0x200016e4
 800bf90:	20001710 	.word	0x20001710
 800bf94:	200016f8 	.word	0x200016f8

0800bf98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3354      	adds	r3, #84	; 0x54
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 fc01 	bl	800d7ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d108      	bne.n	800bfc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 f889 	bl	800d0d0 <vPortFree>
				vPortFree( pxTCB );
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 f886 	bl	800d0d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfc4:	e018      	b.n	800bff8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d103      	bne.n	800bfd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f001 f87d 	bl	800d0d0 <vPortFree>
	}
 800bfd6:	e00f      	b.n	800bff8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d00a      	beq.n	800bff8 <prvDeleteTCB+0x60>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	60fb      	str	r3, [r7, #12]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <prvDeleteTCB+0x5e>
	}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <prvResetNextTaskUnblockTime+0x38>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d104      	bne.n	800c01a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <prvResetNextTaskUnblockTime+0x3c>)
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c018:	e008      	b.n	800c02c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <prvResetNextTaskUnblockTime+0x38>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	4a04      	ldr	r2, [pc, #16]	; (800c03c <prvResetNextTaskUnblockTime+0x3c>)
 800c02a:	6013      	str	r3, [r2, #0]
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	200016c8 	.word	0x200016c8
 800c03c:	20001730 	.word	0x20001730

0800c040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <xTaskGetSchedulerState+0x34>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c04e:	2301      	movs	r3, #1
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	e008      	b.n	800c066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c054:	4b08      	ldr	r3, [pc, #32]	; (800c078 <xTaskGetSchedulerState+0x38>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c05c:	2302      	movs	r3, #2
 800c05e:	607b      	str	r3, [r7, #4]
 800c060:	e001      	b.n	800c066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c062:	2300      	movs	r3, #0
 800c064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c066:	687b      	ldr	r3, [r7, #4]
	}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	2000171c 	.word	0x2000171c
 800c078:	20001738 	.word	0x20001738

0800c07c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d051      	beq.n	800c136 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c096:	4b2a      	ldr	r3, [pc, #168]	; (800c140 <xTaskPriorityInherit+0xc4>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d241      	bcs.n	800c124 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	db06      	blt.n	800c0b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0a8:	4b25      	ldr	r3, [pc, #148]	; (800c140 <xTaskPriorityInherit+0xc4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	6959      	ldr	r1, [r3, #20]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4a1f      	ldr	r2, [pc, #124]	; (800c144 <xTaskPriorityInherit+0xc8>)
 800c0c8:	4413      	add	r3, r2
 800c0ca:	4299      	cmp	r1, r3
 800c0cc:	d122      	bne.n	800c114 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe f942 	bl	800a35c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0d8:	4b19      	ldr	r3, [pc, #100]	; (800c140 <xTaskPriorityInherit+0xc4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e6:	4b18      	ldr	r3, [pc, #96]	; (800c148 <xTaskPriorityInherit+0xcc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d903      	bls.n	800c0f6 <xTaskPriorityInherit+0x7a>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <xTaskPriorityInherit+0xcc>)
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a10      	ldr	r2, [pc, #64]	; (800c144 <xTaskPriorityInherit+0xc8>)
 800c104:	441a      	add	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	3304      	adds	r3, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7fe f8c8 	bl	800a2a2 <vListInsertEnd>
 800c112:	e004      	b.n	800c11e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c114:	4b0a      	ldr	r3, [pc, #40]	; (800c140 <xTaskPriorityInherit+0xc4>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c11e:	2301      	movs	r3, #1
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	e008      	b.n	800c136 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c128:	4b05      	ldr	r3, [pc, #20]	; (800c140 <xTaskPriorityInherit+0xc4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d201      	bcs.n	800c136 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c132:	2301      	movs	r3, #1
 800c134:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c136:	68fb      	ldr	r3, [r7, #12]
	}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	2000123c 	.word	0x2000123c
 800c144:	20001240 	.word	0x20001240
 800c148:	20001718 	.word	0x20001718

0800c14c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c158:	2300      	movs	r3, #0
 800c15a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d056      	beq.n	800c210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c162:	4b2e      	ldr	r3, [pc, #184]	; (800c21c <xTaskPriorityDisinherit+0xd0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d00a      	beq.n	800c182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60fb      	str	r3, [r7, #12]
}
 800c17e:	bf00      	nop
 800c180:	e7fe      	b.n	800c180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	60bb      	str	r3, [r7, #8]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a4:	1e5a      	subs	r2, r3, #1
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d02c      	beq.n	800c210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d128      	bne.n	800c210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe f8ca 	bl	800a35c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e0:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <xTaskPriorityDisinherit+0xd4>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d903      	bls.n	800c1f0 <xTaskPriorityDisinherit+0xa4>
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ec:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <xTaskPriorityDisinherit+0xd4>)
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4a09      	ldr	r2, [pc, #36]	; (800c224 <xTaskPriorityDisinherit+0xd8>)
 800c1fe:	441a      	add	r2, r3
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	3304      	adds	r3, #4
 800c204:	4619      	mov	r1, r3
 800c206:	4610      	mov	r0, r2
 800c208:	f7fe f84b 	bl	800a2a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c20c:	2301      	movs	r3, #1
 800c20e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c210:	697b      	ldr	r3, [r7, #20]
	}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	2000123c 	.word	0x2000123c
 800c220:	20001718 	.word	0x20001718
 800c224:	20001240 	.word	0x20001240

0800c228 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c236:	2301      	movs	r3, #1
 800c238:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d06a      	beq.n	800c316 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10a      	bne.n	800c25e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	60fb      	str	r3, [r7, #12]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d902      	bls.n	800c26e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	61fb      	str	r3, [r7, #28]
 800c26c:	e002      	b.n	800c274 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c272:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	69fa      	ldr	r2, [r7, #28]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d04b      	beq.n	800c316 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	429a      	cmp	r2, r3
 800c286:	d146      	bne.n	800c316 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c288:	4b25      	ldr	r3, [pc, #148]	; (800c320 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d10a      	bne.n	800c2a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	60bb      	str	r3, [r7, #8]
}
 800c2a4:	bf00      	nop
 800c2a6:	e7fe      	b.n	800c2a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	69fa      	ldr	r2, [r7, #28]
 800c2b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db04      	blt.n	800c2c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	6959      	ldr	r1, [r3, #20]
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4a13      	ldr	r2, [pc, #76]	; (800c324 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2d6:	4413      	add	r3, r2
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	d11c      	bne.n	800c316 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe f83b 	bl	800a35c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ea:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d903      	bls.n	800c2fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	4a0c      	ldr	r2, [pc, #48]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4a07      	ldr	r2, [pc, #28]	; (800c324 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c308:	441a      	add	r2, r3
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	3304      	adds	r3, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7fd ffc6 	bl	800a2a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c316:	bf00      	nop
 800c318:	3720      	adds	r7, #32
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	2000123c 	.word	0x2000123c
 800c324:	20001240 	.word	0x20001240
 800c328:	20001718 	.word	0x20001718

0800c32c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c32c:	b480      	push	{r7}
 800c32e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c33e:	3201      	adds	r2, #1
 800c340:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c342:	4b03      	ldr	r3, [pc, #12]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c344:	681b      	ldr	r3, [r3, #0]
	}
 800c346:	4618      	mov	r0, r3
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	2000123c 	.word	0x2000123c

0800c354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c35e:	4b21      	ldr	r3, [pc, #132]	; (800c3e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c364:	4b20      	ldr	r3, [pc, #128]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3304      	adds	r3, #4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fd fff6 	bl	800a35c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d10a      	bne.n	800c38e <prvAddCurrentTaskToDelayedList+0x3a>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d007      	beq.n	800c38e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c37e:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3304      	adds	r3, #4
 800c384:	4619      	mov	r1, r3
 800c386:	4819      	ldr	r0, [pc, #100]	; (800c3ec <prvAddCurrentTaskToDelayedList+0x98>)
 800c388:	f7fd ff8b 	bl	800a2a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c38c:	e026      	b.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4413      	add	r3, r2
 800c394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c396:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d209      	bcs.n	800c3ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a6:	4b12      	ldr	r3, [pc, #72]	; (800c3f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f7fd ff99 	bl	800a2ea <vListInsert>
}
 800c3b8:	e010      	b.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7fd ff8f 	bl	800a2ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d202      	bcs.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3d6:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	6013      	str	r3, [r2, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20001714 	.word	0x20001714
 800c3e8:	2000123c 	.word	0x2000123c
 800c3ec:	200016fc 	.word	0x200016fc
 800c3f0:	200016cc 	.word	0x200016cc
 800c3f4:	200016c8 	.word	0x200016c8
 800c3f8:	20001730 	.word	0x20001730

0800c3fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	; 0x28
 800c400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c406:	f000 fb07 	bl	800ca18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c40a:	4b1c      	ldr	r3, [pc, #112]	; (800c47c <xTimerCreateTimerTask+0x80>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d021      	beq.n	800c456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c41a:	1d3a      	adds	r2, r7, #4
 800c41c:	f107 0108 	add.w	r1, r7, #8
 800c420:	f107 030c 	add.w	r3, r7, #12
 800c424:	4618      	mov	r0, r3
 800c426:	f7fd fef5 	bl	800a214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	9202      	str	r2, [sp, #8]
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	2302      	movs	r3, #2
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	2300      	movs	r3, #0
 800c43a:	460a      	mov	r2, r1
 800c43c:	4910      	ldr	r1, [pc, #64]	; (800c480 <xTimerCreateTimerTask+0x84>)
 800c43e:	4811      	ldr	r0, [pc, #68]	; (800c484 <xTimerCreateTimerTask+0x88>)
 800c440:	f7fe ff38 	bl	800b2b4 <xTaskCreateStatic>
 800c444:	4603      	mov	r3, r0
 800c446:	4a10      	ldr	r2, [pc, #64]	; (800c488 <xTimerCreateTimerTask+0x8c>)
 800c448:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <xTimerCreateTimerTask+0x8c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c452:	2301      	movs	r3, #1
 800c454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	613b      	str	r3, [r7, #16]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c472:	697b      	ldr	r3, [r7, #20]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000176c 	.word	0x2000176c
 800c480:	08011060 	.word	0x08011060
 800c484:	0800c5c1 	.word	0x0800c5c1
 800c488:	20001770 	.word	0x20001770

0800c48c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08a      	sub	sp, #40	; 0x28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4ba:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d02a      	beq.n	800c518 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2b05      	cmp	r3, #5
 800c4d2:	dc18      	bgt.n	800c506 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4d4:	f7ff fdb4 	bl	800c040 <xTaskGetSchedulerState>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d109      	bne.n	800c4f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f107 0110 	add.w	r1, r7, #16
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ea:	f7fe f909 	bl	800a700 <xQueueGenericSend>
 800c4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c4f0:	e012      	b.n	800c518 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4f2:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	f107 0110 	add.w	r1, r7, #16
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f7fe f8ff 	bl	800a700 <xQueueGenericSend>
 800c502:	6278      	str	r0, [r7, #36]	; 0x24
 800c504:	e008      	b.n	800c518 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c506:	4b07      	ldr	r3, [pc, #28]	; (800c524 <xTimerGenericCommand+0x98>)
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f107 0110 	add.w	r1, r7, #16
 800c50e:	2300      	movs	r3, #0
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	f7fe f9f3 	bl	800a8fc <xQueueGenericSendFromISR>
 800c516:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3728      	adds	r7, #40	; 0x28
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	2000176c 	.word	0x2000176c

0800c528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b088      	sub	sp, #32
 800c52c:	af02      	add	r7, sp, #8
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c532:	4b22      	ldr	r3, [pc, #136]	; (800c5bc <prvProcessExpiredTimer+0x94>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	3304      	adds	r3, #4
 800c540:	4618      	mov	r0, r3
 800c542:	f7fd ff0b 	bl	800a35c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d022      	beq.n	800c59a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	699a      	ldr	r2, [r3, #24]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	18d1      	adds	r1, r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	6978      	ldr	r0, [r7, #20]
 800c562:	f000 f8d1 	bl	800c708 <prvInsertTimerInActiveList>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d01f      	beq.n	800c5ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c56c:	2300      	movs	r3, #0
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	2300      	movs	r3, #0
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	2100      	movs	r1, #0
 800c576:	6978      	ldr	r0, [r7, #20]
 800c578:	f7ff ff88 	bl	800c48c <xTimerGenericCommand>
 800c57c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d113      	bne.n	800c5ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	60fb      	str	r3, [r7, #12]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a0:	f023 0301 	bic.w	r3, r3, #1
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	6a1b      	ldr	r3, [r3, #32]
 800c5b0:	6978      	ldr	r0, [r7, #20]
 800c5b2:	4798      	blx	r3
}
 800c5b4:	bf00      	nop
 800c5b6:	3718      	adds	r7, #24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20001764 	.word	0x20001764

0800c5c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5c8:	f107 0308 	add.w	r3, r7, #8
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 f857 	bl	800c680 <prvGetNextExpireTime>
 800c5d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f000 f803 	bl	800c5e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5de:	f000 f8d5 	bl	800c78c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5e2:	e7f1      	b.n	800c5c8 <prvTimerTask+0x8>

0800c5e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5ee:	f7ff f93b 	bl	800b868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5f2:	f107 0308 	add.w	r3, r7, #8
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 f866 	bl	800c6c8 <prvSampleTimeNow>
 800c5fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d130      	bne.n	800c666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10a      	bne.n	800c620 <prvProcessTimerOrBlockTask+0x3c>
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d806      	bhi.n	800c620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c612:	f7ff f937 	bl	800b884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c616:	68f9      	ldr	r1, [r7, #12]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff ff85 	bl	800c528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c61e:	e024      	b.n	800c66a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d008      	beq.n	800c638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c626:	4b13      	ldr	r3, [pc, #76]	; (800c674 <prvProcessTimerOrBlockTask+0x90>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <prvProcessTimerOrBlockTask+0x50>
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <prvProcessTimerOrBlockTask+0x52>
 800c634:	2300      	movs	r3, #0
 800c636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c638:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <prvProcessTimerOrBlockTask+0x94>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	4619      	mov	r1, r3
 800c646:	f7fe fe01 	bl	800b24c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c64a:	f7ff f91b 	bl	800b884 <xTaskResumeAll>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <prvProcessTimerOrBlockTask+0x98>)
 800c656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	f3bf 8f6f 	isb	sy
}
 800c664:	e001      	b.n	800c66a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c666:	f7ff f90d 	bl	800b884 <xTaskResumeAll>
}
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20001768 	.word	0x20001768
 800c678:	2000176c 	.word	0x2000176c
 800c67c:	e000ed04 	.word	0xe000ed04

0800c680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c688:	4b0e      	ldr	r3, [pc, #56]	; (800c6c4 <prvGetNextExpireTime+0x44>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <prvGetNextExpireTime+0x16>
 800c692:	2201      	movs	r2, #1
 800c694:	e000      	b.n	800c698 <prvGetNextExpireTime+0x18>
 800c696:	2200      	movs	r2, #0
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d105      	bne.n	800c6b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6a4:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <prvGetNextExpireTime+0x44>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e001      	b.n	800c6b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20001764 	.word	0x20001764

0800c6c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6d0:	f7ff f976 	bl	800b9c0 <xTaskGetTickCount>
 800c6d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	; (800c704 <prvSampleTimeNow+0x3c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d205      	bcs.n	800c6ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6e0:	f000 f936 	bl	800c950 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	e002      	b.n	800c6f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6f2:	4a04      	ldr	r2, [pc, #16]	; (800c704 <prvSampleTimeNow+0x3c>)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20001774 	.word	0x20001774

0800c708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d812      	bhi.n	800c754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	1ad2      	subs	r2, r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d302      	bcc.n	800c742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e01b      	b.n	800c77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c742:	4b10      	ldr	r3, [pc, #64]	; (800c784 <prvInsertTimerInActiveList+0x7c>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3304      	adds	r3, #4
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f7fd fdcc 	bl	800a2ea <vListInsert>
 800c752:	e012      	b.n	800c77a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d206      	bcs.n	800c76a <prvInsertTimerInActiveList+0x62>
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d302      	bcc.n	800c76a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c764:	2301      	movs	r3, #1
 800c766:	617b      	str	r3, [r7, #20]
 800c768:	e007      	b.n	800c77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c76a:	4b07      	ldr	r3, [pc, #28]	; (800c788 <prvInsertTimerInActiveList+0x80>)
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3304      	adds	r3, #4
 800c772:	4619      	mov	r1, r3
 800c774:	4610      	mov	r0, r2
 800c776:	f7fd fdb8 	bl	800a2ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c77a:	697b      	ldr	r3, [r7, #20]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3718      	adds	r7, #24
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20001768 	.word	0x20001768
 800c788:	20001764 	.word	0x20001764

0800c78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08e      	sub	sp, #56	; 0x38
 800c790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c792:	e0ca      	b.n	800c92a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	da18      	bge.n	800c7cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c79a:	1d3b      	adds	r3, r7, #4
 800c79c:	3304      	adds	r3, #4
 800c79e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	61fb      	str	r3, [r7, #28]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c2:	6850      	ldr	r0, [r2, #4]
 800c7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c6:	6892      	ldr	r2, [r2, #8]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f2c0 80aa 	blt.w	800c928 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd fdb9 	bl	800a35c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ea:	463b      	mov	r3, r7
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff ff6b 	bl	800c6c8 <prvSampleTimeNow>
 800c7f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	f200 8097 	bhi.w	800c92a <prvProcessReceivedCommands+0x19e>
 800c7fc:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <prvProcessReceivedCommands+0x78>)
 800c7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c802:	bf00      	nop
 800c804:	0800c82d 	.word	0x0800c82d
 800c808:	0800c82d 	.word	0x0800c82d
 800c80c:	0800c82d 	.word	0x0800c82d
 800c810:	0800c8a1 	.word	0x0800c8a1
 800c814:	0800c8b5 	.word	0x0800c8b5
 800c818:	0800c8ff 	.word	0x0800c8ff
 800c81c:	0800c82d 	.word	0x0800c82d
 800c820:	0800c82d 	.word	0x0800c82d
 800c824:	0800c8a1 	.word	0x0800c8a1
 800c828:	0800c8b5 	.word	0x0800c8b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c832:	f043 0301 	orr.w	r3, r3, #1
 800c836:	b2da      	uxtb	r2, r3
 800c838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	18d1      	adds	r1, r2, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84c:	f7ff ff5c 	bl	800c708 <prvInsertTimerInActiveList>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d069      	beq.n	800c92a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c864:	f003 0304 	and.w	r3, r3, #4
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d05e      	beq.n	800c92a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	441a      	add	r2, r3
 800c874:	2300      	movs	r3, #0
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	2300      	movs	r3, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c87e:	f7ff fe05 	bl	800c48c <xTimerGenericCommand>
 800c882:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d14f      	bne.n	800c92a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	61bb      	str	r3, [r7, #24]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a6:	f023 0301 	bic.w	r3, r3, #1
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c8b2:	e03a      	b.n	800c92a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ba:	f043 0301 	orr.w	r3, r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	617b      	str	r3, [r7, #20]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	699a      	ldr	r2, [r3, #24]
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	18d1      	adds	r1, r2, r3
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f8:	f7ff ff06 	bl	800c708 <prvInsertTimerInActiveList>
					break;
 800c8fc:	e015      	b.n	800c92a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c904:	f003 0302 	and.w	r3, r3, #2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d103      	bne.n	800c914 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c90e:	f000 fbdf 	bl	800d0d0 <vPortFree>
 800c912:	e00a      	b.n	800c92a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c91a:	f023 0301 	bic.w	r3, r3, #1
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c926:	e000      	b.n	800c92a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c928:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c92a:	4b08      	ldr	r3, [pc, #32]	; (800c94c <prvProcessReceivedCommands+0x1c0>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	1d39      	adds	r1, r7, #4
 800c930:	2200      	movs	r2, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe f87e 	bl	800aa34 <xQueueReceive>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f47f af2a 	bne.w	800c794 <prvProcessReceivedCommands+0x8>
	}
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	3730      	adds	r7, #48	; 0x30
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	2000176c 	.word	0x2000176c

0800c950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b088      	sub	sp, #32
 800c954:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c956:	e048      	b.n	800c9ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c958:	4b2d      	ldr	r3, [pc, #180]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c962:	4b2b      	ldr	r3, [pc, #172]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3304      	adds	r3, #4
 800c970:	4618      	mov	r0, r3
 800c972:	f7fd fcf3 	bl	800a35c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c984:	f003 0304 	and.w	r3, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d02e      	beq.n	800c9ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	4413      	add	r3, r2
 800c994:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d90e      	bls.n	800c9bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9aa:	4b19      	ldr	r3, [pc, #100]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	f7fd fc98 	bl	800a2ea <vListInsert>
 800c9ba:	e016      	b.n	800c9ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff fd60 	bl	800c48c <xTimerGenericCommand>
 800c9cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	603b      	str	r3, [r7, #0]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1b1      	bne.n	800c958 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9f4:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9fa:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <prvSwitchTimerLists+0xc4>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a04      	ldr	r2, [pc, #16]	; (800ca10 <prvSwitchTimerLists+0xc0>)
 800ca00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca02:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <prvSwitchTimerLists+0xc4>)
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	6013      	str	r3, [r2, #0]
}
 800ca08:	bf00      	nop
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20001764 	.word	0x20001764
 800ca14:	20001768 	.word	0x20001768

0800ca18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca1e:	f000 f969 	bl	800ccf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca22:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <prvCheckForValidListAndQueue+0x60>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d120      	bne.n	800ca6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca2a:	4814      	ldr	r0, [pc, #80]	; (800ca7c <prvCheckForValidListAndQueue+0x64>)
 800ca2c:	f7fd fc0c 	bl	800a248 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca30:	4813      	ldr	r0, [pc, #76]	; (800ca80 <prvCheckForValidListAndQueue+0x68>)
 800ca32:	f7fd fc09 	bl	800a248 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <prvCheckForValidListAndQueue+0x6c>)
 800ca38:	4a10      	ldr	r2, [pc, #64]	; (800ca7c <prvCheckForValidListAndQueue+0x64>)
 800ca3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca3c:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <prvCheckForValidListAndQueue+0x70>)
 800ca3e:	4a10      	ldr	r2, [pc, #64]	; (800ca80 <prvCheckForValidListAndQueue+0x68>)
 800ca40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca42:	2300      	movs	r3, #0
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <prvCheckForValidListAndQueue+0x74>)
 800ca48:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <prvCheckForValidListAndQueue+0x78>)
 800ca4a:	2110      	movs	r1, #16
 800ca4c:	200a      	movs	r0, #10
 800ca4e:	f7fd fd17 	bl	800a480 <xQueueGenericCreateStatic>
 800ca52:	4603      	mov	r3, r0
 800ca54:	4a08      	ldr	r2, [pc, #32]	; (800ca78 <prvCheckForValidListAndQueue+0x60>)
 800ca56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca58:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <prvCheckForValidListAndQueue+0x60>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d005      	beq.n	800ca6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca60:	4b05      	ldr	r3, [pc, #20]	; (800ca78 <prvCheckForValidListAndQueue+0x60>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	490b      	ldr	r1, [pc, #44]	; (800ca94 <prvCheckForValidListAndQueue+0x7c>)
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe fb9c 	bl	800b1a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca6c:	f000 f972 	bl	800cd54 <vPortExitCritical>
}
 800ca70:	bf00      	nop
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	2000176c 	.word	0x2000176c
 800ca7c:	2000173c 	.word	0x2000173c
 800ca80:	20001750 	.word	0x20001750
 800ca84:	20001764 	.word	0x20001764
 800ca88:	20001768 	.word	0x20001768
 800ca8c:	20001818 	.word	0x20001818
 800ca90:	20001778 	.word	0x20001778
 800ca94:	08011068 	.word	0x08011068

0800ca98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3b04      	subs	r3, #4
 800caa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f023 0201 	bic.w	r2, r3, #1
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3b04      	subs	r3, #4
 800cac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cac8:	4a0c      	ldr	r2, [pc, #48]	; (800cafc <pxPortInitialiseStack+0x64>)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3b14      	subs	r3, #20
 800cad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3b04      	subs	r3, #4
 800cade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f06f 0202 	mvn.w	r2, #2
 800cae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3b20      	subs	r3, #32
 800caec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caee:	68fb      	ldr	r3, [r7, #12]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	0800cb01 	.word	0x0800cb01

0800cb00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb0a:	4b12      	ldr	r3, [pc, #72]	; (800cb54 <prvTaskExitError+0x54>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d00a      	beq.n	800cb2a <prvTaskExitError+0x2a>
	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	60fb      	str	r3, [r7, #12]
}
 800cb26:	bf00      	nop
 800cb28:	e7fe      	b.n	800cb28 <prvTaskExitError+0x28>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	60bb      	str	r3, [r7, #8]
}
 800cb3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb3e:	bf00      	nop
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0fc      	beq.n	800cb40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	20000030 	.word	0x20000030
	...

0800cb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb60:	4b07      	ldr	r3, [pc, #28]	; (800cb80 <pxCurrentTCBConst2>)
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6a:	f380 8809 	msr	PSP, r0
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f04f 0000 	mov.w	r0, #0
 800cb76:	f380 8811 	msr	BASEPRI, r0
 800cb7a:	4770      	bx	lr
 800cb7c:	f3af 8000 	nop.w

0800cb80 <pxCurrentTCBConst2>:
 800cb80:	2000123c 	.word	0x2000123c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb88:	4808      	ldr	r0, [pc, #32]	; (800cbac <prvPortStartFirstTask+0x24>)
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	f380 8808 	msr	MSP, r0
 800cb92:	f04f 0000 	mov.w	r0, #0
 800cb96:	f380 8814 	msr	CONTROL, r0
 800cb9a:	b662      	cpsie	i
 800cb9c:	b661      	cpsie	f
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	df00      	svc	0
 800cba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbaa:	bf00      	nop
 800cbac:	e000ed08 	.word	0xe000ed08

0800cbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbb6:	4b46      	ldr	r3, [pc, #280]	; (800ccd0 <xPortStartScheduler+0x120>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a46      	ldr	r2, [pc, #280]	; (800ccd4 <xPortStartScheduler+0x124>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d10a      	bne.n	800cbd6 <xPortStartScheduler+0x26>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	613b      	str	r3, [r7, #16]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cbd6:	4b3e      	ldr	r3, [pc, #248]	; (800ccd0 <xPortStartScheduler+0x120>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a3f      	ldr	r2, [pc, #252]	; (800ccd8 <xPortStartScheduler+0x128>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d10a      	bne.n	800cbf6 <xPortStartScheduler+0x46>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbf6:	4b39      	ldr	r3, [pc, #228]	; (800ccdc <xPortStartScheduler+0x12c>)
 800cbf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	22ff      	movs	r2, #255	; 0xff
 800cc06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	4b31      	ldr	r3, [pc, #196]	; (800cce0 <xPortStartScheduler+0x130>)
 800cc1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc1e:	4b31      	ldr	r3, [pc, #196]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc20:	2207      	movs	r2, #7
 800cc22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc24:	e009      	b.n	800cc3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc26:	4b2f      	ldr	r3, [pc, #188]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	4a2d      	ldr	r2, [pc, #180]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc42:	2b80      	cmp	r3, #128	; 0x80
 800cc44:	d0ef      	beq.n	800cc26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc46:	4b27      	ldr	r3, [pc, #156]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f1c3 0307 	rsb	r3, r3, #7
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d00a      	beq.n	800cc68 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	60bb      	str	r3, [r7, #8]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc68:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	021b      	lsls	r3, r3, #8
 800cc6e:	4a1d      	ldr	r2, [pc, #116]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc72:	4b1c      	ldr	r3, [pc, #112]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc7a:	4a1a      	ldr	r2, [pc, #104]	; (800cce4 <xPortStartScheduler+0x134>)
 800cc7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc86:	4b18      	ldr	r3, [pc, #96]	; (800cce8 <xPortStartScheduler+0x138>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a17      	ldr	r2, [pc, #92]	; (800cce8 <xPortStartScheduler+0x138>)
 800cc8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc92:	4b15      	ldr	r3, [pc, #84]	; (800cce8 <xPortStartScheduler+0x138>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a14      	ldr	r2, [pc, #80]	; (800cce8 <xPortStartScheduler+0x138>)
 800cc98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc9e:	f000 f8dd 	bl	800ce5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cca2:	4b12      	ldr	r3, [pc, #72]	; (800ccec <xPortStartScheduler+0x13c>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cca8:	f000 f8fc 	bl	800cea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccac:	4b10      	ldr	r3, [pc, #64]	; (800ccf0 <xPortStartScheduler+0x140>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a0f      	ldr	r2, [pc, #60]	; (800ccf0 <xPortStartScheduler+0x140>)
 800ccb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ccb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ccb8:	f7ff ff66 	bl	800cb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccbc:	f7fe ff4a 	bl	800bb54 <vTaskSwitchContext>
	prvTaskExitError();
 800ccc0:	f7ff ff1e 	bl	800cb00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	e000ed00 	.word	0xe000ed00
 800ccd4:	410fc271 	.word	0x410fc271
 800ccd8:	410fc270 	.word	0x410fc270
 800ccdc:	e000e400 	.word	0xe000e400
 800cce0:	20001868 	.word	0x20001868
 800cce4:	2000186c 	.word	0x2000186c
 800cce8:	e000ed20 	.word	0xe000ed20
 800ccec:	20000030 	.word	0x20000030
 800ccf0:	e000ef34 	.word	0xe000ef34

0800ccf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	607b      	str	r3, [r7, #4]
}
 800cd0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd0e:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <vPortEnterCritical+0x58>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3301      	adds	r3, #1
 800cd14:	4a0d      	ldr	r2, [pc, #52]	; (800cd4c <vPortEnterCritical+0x58>)
 800cd16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <vPortEnterCritical+0x58>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d10f      	bne.n	800cd40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd20:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <vPortEnterCritical+0x5c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	603b      	str	r3, [r7, #0]
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <vPortEnterCritical+0x4a>
	}
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	20000030 	.word	0x20000030
 800cd50:	e000ed04 	.word	0xe000ed04

0800cd54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd5a:	4b12      	ldr	r3, [pc, #72]	; (800cda4 <vPortExitCritical+0x50>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <vPortExitCritical+0x24>
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	607b      	str	r3, [r7, #4]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd78:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <vPortExitCritical+0x50>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	4a09      	ldr	r2, [pc, #36]	; (800cda4 <vPortExitCritical+0x50>)
 800cd80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd82:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <vPortExitCritical+0x50>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <vPortExitCritical+0x42>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	f383 8811 	msr	BASEPRI, r3
}
 800cd94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000030 	.word	0x20000030
	...

0800cdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdb0:	f3ef 8009 	mrs	r0, PSP
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <pxCurrentTCBConst>)
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	f01e 0f10 	tst.w	lr, #16
 800cdc0:	bf08      	it	eq
 800cdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdca:	6010      	str	r0, [r2, #0]
 800cdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cdd4:	f380 8811 	msr	BASEPRI, r0
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f7fe feb8 	bl	800bb54 <vTaskSwitchContext>
 800cde4:	f04f 0000 	mov.w	r0, #0
 800cde8:	f380 8811 	msr	BASEPRI, r0
 800cdec:	bc09      	pop	{r0, r3}
 800cdee:	6819      	ldr	r1, [r3, #0]
 800cdf0:	6808      	ldr	r0, [r1, #0]
 800cdf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf6:	f01e 0f10 	tst.w	lr, #16
 800cdfa:	bf08      	it	eq
 800cdfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce00:	f380 8809 	msr	PSP, r0
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	f3af 8000 	nop.w

0800ce10 <pxCurrentTCBConst>:
 800ce10:	2000123c 	.word	0x2000123c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop

0800ce18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	607b      	str	r3, [r7, #4]
}
 800ce30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce32:	f7fe fdd5 	bl	800b9e0 <xTaskIncrementTick>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d003      	beq.n	800ce44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce3c:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <xPortSysTickHandler+0x40>)
 800ce3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	2300      	movs	r3, #0
 800ce46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	f383 8811 	msr	BASEPRI, r3
}
 800ce4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	e000ed04 	.word	0xe000ed04

0800ce5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce60:	4b0b      	ldr	r3, [pc, #44]	; (800ce90 <vPortSetupTimerInterrupt+0x34>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce66:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <vPortSetupTimerInterrupt+0x38>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce6c:	4b0a      	ldr	r3, [pc, #40]	; (800ce98 <vPortSetupTimerInterrupt+0x3c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a0a      	ldr	r2, [pc, #40]	; (800ce9c <vPortSetupTimerInterrupt+0x40>)
 800ce72:	fba2 2303 	umull	r2, r3, r2, r3
 800ce76:	099b      	lsrs	r3, r3, #6
 800ce78:	4a09      	ldr	r2, [pc, #36]	; (800cea0 <vPortSetupTimerInterrupt+0x44>)
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce7e:	4b04      	ldr	r3, [pc, #16]	; (800ce90 <vPortSetupTimerInterrupt+0x34>)
 800ce80:	2207      	movs	r2, #7
 800ce82:	601a      	str	r2, [r3, #0]
}
 800ce84:	bf00      	nop
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	e000e010 	.word	0xe000e010
 800ce94:	e000e018 	.word	0xe000e018
 800ce98:	20000024 	.word	0x20000024
 800ce9c:	10624dd3 	.word	0x10624dd3
 800cea0:	e000e014 	.word	0xe000e014

0800cea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ceb4 <vPortEnableVFP+0x10>
 800cea8:	6801      	ldr	r1, [r0, #0]
 800ceaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ceae:	6001      	str	r1, [r0, #0]
 800ceb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ceb2:	bf00      	nop
 800ceb4:	e000ed88 	.word	0xe000ed88

0800ceb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cebe:	f3ef 8305 	mrs	r3, IPSR
 800cec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b0f      	cmp	r3, #15
 800cec8:	d914      	bls.n	800cef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ceca:	4a17      	ldr	r2, [pc, #92]	; (800cf28 <vPortValidateInterruptPriority+0x70>)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4413      	add	r3, r2
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ced4:	4b15      	ldr	r3, [pc, #84]	; (800cf2c <vPortValidateInterruptPriority+0x74>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	7afa      	ldrb	r2, [r7, #11]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d20a      	bcs.n	800cef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	607b      	str	r3, [r7, #4]
}
 800cef0:	bf00      	nop
 800cef2:	e7fe      	b.n	800cef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cef4:	4b0e      	ldr	r3, [pc, #56]	; (800cf30 <vPortValidateInterruptPriority+0x78>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cefc:	4b0d      	ldr	r3, [pc, #52]	; (800cf34 <vPortValidateInterruptPriority+0x7c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d90a      	bls.n	800cf1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	603b      	str	r3, [r7, #0]
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <vPortValidateInterruptPriority+0x60>
	}
 800cf1a:	bf00      	nop
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	e000e3f0 	.word	0xe000e3f0
 800cf2c:	20001868 	.word	0x20001868
 800cf30:	e000ed0c 	.word	0xe000ed0c
 800cf34:	2000186c 	.word	0x2000186c

0800cf38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08a      	sub	sp, #40	; 0x28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf44:	f7fe fc90 	bl	800b868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf48:	4b5b      	ldr	r3, [pc, #364]	; (800d0b8 <pvPortMalloc+0x180>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf50:	f000 f920 	bl	800d194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf54:	4b59      	ldr	r3, [pc, #356]	; (800d0bc <pvPortMalloc+0x184>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f040 8093 	bne.w	800d088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01d      	beq.n	800cfa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf68:	2208      	movs	r2, #8
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f003 0307 	and.w	r3, r3, #7
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d014      	beq.n	800cfa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f023 0307 	bic.w	r3, r3, #7
 800cf80:	3308      	adds	r3, #8
 800cf82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f003 0307 	and.w	r3, r3, #7
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00a      	beq.n	800cfa4 <pvPortMalloc+0x6c>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	617b      	str	r3, [r7, #20]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d06e      	beq.n	800d088 <pvPortMalloc+0x150>
 800cfaa:	4b45      	ldr	r3, [pc, #276]	; (800d0c0 <pvPortMalloc+0x188>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d869      	bhi.n	800d088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfb4:	4b43      	ldr	r3, [pc, #268]	; (800d0c4 <pvPortMalloc+0x18c>)
 800cfb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfb8:	4b42      	ldr	r3, [pc, #264]	; (800d0c4 <pvPortMalloc+0x18c>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfbe:	e004      	b.n	800cfca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d903      	bls.n	800cfdc <pvPortMalloc+0xa4>
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1f1      	bne.n	800cfc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cfdc:	4b36      	ldr	r3, [pc, #216]	; (800d0b8 <pvPortMalloc+0x180>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d050      	beq.n	800d088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2208      	movs	r2, #8
 800cfec:	4413      	add	r3, r2
 800cfee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	2308      	movs	r3, #8
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	429a      	cmp	r2, r3
 800d006:	d91f      	bls.n	800d048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00a      	beq.n	800d030 <pvPortMalloc+0xf8>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	613b      	str	r3, [r7, #16]
}
 800d02c:	bf00      	nop
 800d02e:	e7fe      	b.n	800d02e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	1ad2      	subs	r2, r2, r3
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d042:	69b8      	ldr	r0, [r7, #24]
 800d044:	f000 f908 	bl	800d258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d048:	4b1d      	ldr	r3, [pc, #116]	; (800d0c0 <pvPortMalloc+0x188>)
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	4a1b      	ldr	r2, [pc, #108]	; (800d0c0 <pvPortMalloc+0x188>)
 800d054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d056:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <pvPortMalloc+0x188>)
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	4b1b      	ldr	r3, [pc, #108]	; (800d0c8 <pvPortMalloc+0x190>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d203      	bcs.n	800d06a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d062:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <pvPortMalloc+0x188>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a18      	ldr	r2, [pc, #96]	; (800d0c8 <pvPortMalloc+0x190>)
 800d068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	4b13      	ldr	r3, [pc, #76]	; (800d0bc <pvPortMalloc+0x184>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	431a      	orrs	r2, r3
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	2200      	movs	r2, #0
 800d07c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d07e:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <pvPortMalloc+0x194>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	4a11      	ldr	r2, [pc, #68]	; (800d0cc <pvPortMalloc+0x194>)
 800d086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d088:	f7fe fbfc 	bl	800b884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	f003 0307 	and.w	r3, r3, #7
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00a      	beq.n	800d0ac <pvPortMalloc+0x174>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	60fb      	str	r3, [r7, #12]
}
 800d0a8:	bf00      	nop
 800d0aa:	e7fe      	b.n	800d0aa <pvPortMalloc+0x172>
	return pvReturn;
 800d0ac:	69fb      	ldr	r3, [r7, #28]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3728      	adds	r7, #40	; 0x28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20002c00 	.word	0x20002c00
 800d0bc:	20002c14 	.word	0x20002c14
 800d0c0:	20002c04 	.word	0x20002c04
 800d0c4:	20002bf8 	.word	0x20002bf8
 800d0c8:	20002c08 	.word	0x20002c08
 800d0cc:	20002c0c 	.word	0x20002c0c

0800d0d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d04d      	beq.n	800d17e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0e2:	2308      	movs	r3, #8
 800d0e4:	425b      	negs	r3, r3
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	4b24      	ldr	r3, [pc, #144]	; (800d188 <vPortFree+0xb8>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10a      	bne.n	800d114 <vPortFree+0x44>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	60fb      	str	r3, [r7, #12]
}
 800d110:	bf00      	nop
 800d112:	e7fe      	b.n	800d112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <vPortFree+0x62>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	60bb      	str	r3, [r7, #8]
}
 800d12e:	bf00      	nop
 800d130:	e7fe      	b.n	800d130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	4b14      	ldr	r3, [pc, #80]	; (800d188 <vPortFree+0xb8>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4013      	ands	r3, r2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01e      	beq.n	800d17e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d11a      	bne.n	800d17e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <vPortFree+0xb8>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	43db      	mvns	r3, r3
 800d152:	401a      	ands	r2, r3
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d158:	f7fe fb86 	bl	800b868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <vPortFree+0xbc>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4413      	add	r3, r2
 800d166:	4a09      	ldr	r2, [pc, #36]	; (800d18c <vPortFree+0xbc>)
 800d168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f000 f874 	bl	800d258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d170:	4b07      	ldr	r3, [pc, #28]	; (800d190 <vPortFree+0xc0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3301      	adds	r3, #1
 800d176:	4a06      	ldr	r2, [pc, #24]	; (800d190 <vPortFree+0xc0>)
 800d178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d17a:	f7fe fb83 	bl	800b884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d17e:	bf00      	nop
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	20002c14 	.word	0x20002c14
 800d18c:	20002c04 	.word	0x20002c04
 800d190:	20002c10 	.word	0x20002c10

0800d194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d19a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d19e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1a0:	4b27      	ldr	r3, [pc, #156]	; (800d240 <prvHeapInit+0xac>)
 800d1a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00c      	beq.n	800d1c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3307      	adds	r3, #7
 800d1b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f023 0307 	bic.w	r3, r3, #7
 800d1ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	4a1f      	ldr	r2, [pc, #124]	; (800d240 <prvHeapInit+0xac>)
 800d1c4:	4413      	add	r3, r2
 800d1c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1cc:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <prvHeapInit+0xb0>)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <prvHeapInit+0xb0>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	4413      	add	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1e0:	2208      	movs	r2, #8
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	1a9b      	subs	r3, r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0307 	bic.w	r3, r3, #7
 800d1ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4a15      	ldr	r2, [pc, #84]	; (800d248 <prvHeapInit+0xb4>)
 800d1f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1f6:	4b14      	ldr	r3, [pc, #80]	; (800d248 <prvHeapInit+0xb4>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1fe:	4b12      	ldr	r3, [pc, #72]	; (800d248 <prvHeapInit+0xb4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2200      	movs	r2, #0
 800d204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	1ad2      	subs	r2, r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d214:	4b0c      	ldr	r3, [pc, #48]	; (800d248 <prvHeapInit+0xb4>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4a0a      	ldr	r2, [pc, #40]	; (800d24c <prvHeapInit+0xb8>)
 800d222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	4a09      	ldr	r2, [pc, #36]	; (800d250 <prvHeapInit+0xbc>)
 800d22a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d22c:	4b09      	ldr	r3, [pc, #36]	; (800d254 <prvHeapInit+0xc0>)
 800d22e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d232:	601a      	str	r2, [r3, #0]
}
 800d234:	bf00      	nop
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	20001870 	.word	0x20001870
 800d244:	20002bf8 	.word	0x20002bf8
 800d248:	20002c00 	.word	0x20002c00
 800d24c:	20002c08 	.word	0x20002c08
 800d250:	20002c04 	.word	0x20002c04
 800d254:	20002c14 	.word	0x20002c14

0800d258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d260:	4b28      	ldr	r3, [pc, #160]	; (800d304 <prvInsertBlockIntoFreeList+0xac>)
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	e002      	b.n	800d26c <prvInsertBlockIntoFreeList+0x14>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	429a      	cmp	r2, r3
 800d274:	d8f7      	bhi.n	800d266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	429a      	cmp	r2, r3
 800d286:	d108      	bne.n	800d29a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	441a      	add	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d118      	bne.n	800d2e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	4b15      	ldr	r3, [pc, #84]	; (800d308 <prvInsertBlockIntoFreeList+0xb0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d00d      	beq.n	800d2d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	441a      	add	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	e008      	b.n	800d2e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	; (800d308 <prvInsertBlockIntoFreeList+0xb0>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	e003      	b.n	800d2e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d002      	beq.n	800d2f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20002bf8 	.word	0x20002bf8
 800d308:	20002c00 	.word	0x20002c00

0800d30c <__errno>:
 800d30c:	4b01      	ldr	r3, [pc, #4]	; (800d314 <__errno+0x8>)
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000034 	.word	0x20000034

0800d318 <std>:
 800d318:	2300      	movs	r3, #0
 800d31a:	b510      	push	{r4, lr}
 800d31c:	4604      	mov	r4, r0
 800d31e:	e9c0 3300 	strd	r3, r3, [r0]
 800d322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d326:	6083      	str	r3, [r0, #8]
 800d328:	8181      	strh	r1, [r0, #12]
 800d32a:	6643      	str	r3, [r0, #100]	; 0x64
 800d32c:	81c2      	strh	r2, [r0, #14]
 800d32e:	6183      	str	r3, [r0, #24]
 800d330:	4619      	mov	r1, r3
 800d332:	2208      	movs	r2, #8
 800d334:	305c      	adds	r0, #92	; 0x5c
 800d336:	f000 f93b 	bl	800d5b0 <memset>
 800d33a:	4b05      	ldr	r3, [pc, #20]	; (800d350 <std+0x38>)
 800d33c:	6263      	str	r3, [r4, #36]	; 0x24
 800d33e:	4b05      	ldr	r3, [pc, #20]	; (800d354 <std+0x3c>)
 800d340:	62a3      	str	r3, [r4, #40]	; 0x28
 800d342:	4b05      	ldr	r3, [pc, #20]	; (800d358 <std+0x40>)
 800d344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <std+0x44>)
 800d348:	6224      	str	r4, [r4, #32]
 800d34a:	6323      	str	r3, [r4, #48]	; 0x30
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	bf00      	nop
 800d350:	0800d91d 	.word	0x0800d91d
 800d354:	0800d943 	.word	0x0800d943
 800d358:	0800d97b 	.word	0x0800d97b
 800d35c:	0800d99f 	.word	0x0800d99f

0800d360 <_cleanup_r>:
 800d360:	4901      	ldr	r1, [pc, #4]	; (800d368 <_cleanup_r+0x8>)
 800d362:	f000 b8af 	b.w	800d4c4 <_fwalk_reent>
 800d366:	bf00      	nop
 800d368:	0800e78d 	.word	0x0800e78d

0800d36c <__sfmoreglue>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	2268      	movs	r2, #104	; 0x68
 800d370:	1e4d      	subs	r5, r1, #1
 800d372:	4355      	muls	r5, r2
 800d374:	460e      	mov	r6, r1
 800d376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d37a:	f000 f98d 	bl	800d698 <_malloc_r>
 800d37e:	4604      	mov	r4, r0
 800d380:	b140      	cbz	r0, 800d394 <__sfmoreglue+0x28>
 800d382:	2100      	movs	r1, #0
 800d384:	e9c0 1600 	strd	r1, r6, [r0]
 800d388:	300c      	adds	r0, #12
 800d38a:	60a0      	str	r0, [r4, #8]
 800d38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d390:	f000 f90e 	bl	800d5b0 <memset>
 800d394:	4620      	mov	r0, r4
 800d396:	bd70      	pop	{r4, r5, r6, pc}

0800d398 <__sfp_lock_acquire>:
 800d398:	4801      	ldr	r0, [pc, #4]	; (800d3a0 <__sfp_lock_acquire+0x8>)
 800d39a:	f000 b8d8 	b.w	800d54e <__retarget_lock_acquire_recursive>
 800d39e:	bf00      	nop
 800d3a0:	20002c19 	.word	0x20002c19

0800d3a4 <__sfp_lock_release>:
 800d3a4:	4801      	ldr	r0, [pc, #4]	; (800d3ac <__sfp_lock_release+0x8>)
 800d3a6:	f000 b8d3 	b.w	800d550 <__retarget_lock_release_recursive>
 800d3aa:	bf00      	nop
 800d3ac:	20002c19 	.word	0x20002c19

0800d3b0 <__sinit_lock_acquire>:
 800d3b0:	4801      	ldr	r0, [pc, #4]	; (800d3b8 <__sinit_lock_acquire+0x8>)
 800d3b2:	f000 b8cc 	b.w	800d54e <__retarget_lock_acquire_recursive>
 800d3b6:	bf00      	nop
 800d3b8:	20002c1a 	.word	0x20002c1a

0800d3bc <__sinit_lock_release>:
 800d3bc:	4801      	ldr	r0, [pc, #4]	; (800d3c4 <__sinit_lock_release+0x8>)
 800d3be:	f000 b8c7 	b.w	800d550 <__retarget_lock_release_recursive>
 800d3c2:	bf00      	nop
 800d3c4:	20002c1a 	.word	0x20002c1a

0800d3c8 <__sinit>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	f7ff fff0 	bl	800d3b0 <__sinit_lock_acquire>
 800d3d0:	69a3      	ldr	r3, [r4, #24]
 800d3d2:	b11b      	cbz	r3, 800d3dc <__sinit+0x14>
 800d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d8:	f7ff bff0 	b.w	800d3bc <__sinit_lock_release>
 800d3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800d3e2:	4b13      	ldr	r3, [pc, #76]	; (800d430 <__sinit+0x68>)
 800d3e4:	4a13      	ldr	r2, [pc, #76]	; (800d434 <__sinit+0x6c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ea:	42a3      	cmp	r3, r4
 800d3ec:	bf04      	itt	eq
 800d3ee:	2301      	moveq	r3, #1
 800d3f0:	61a3      	streq	r3, [r4, #24]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 f820 	bl	800d438 <__sfp>
 800d3f8:	6060      	str	r0, [r4, #4]
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f000 f81c 	bl	800d438 <__sfp>
 800d400:	60a0      	str	r0, [r4, #8]
 800d402:	4620      	mov	r0, r4
 800d404:	f000 f818 	bl	800d438 <__sfp>
 800d408:	2200      	movs	r2, #0
 800d40a:	60e0      	str	r0, [r4, #12]
 800d40c:	2104      	movs	r1, #4
 800d40e:	6860      	ldr	r0, [r4, #4]
 800d410:	f7ff ff82 	bl	800d318 <std>
 800d414:	68a0      	ldr	r0, [r4, #8]
 800d416:	2201      	movs	r2, #1
 800d418:	2109      	movs	r1, #9
 800d41a:	f7ff ff7d 	bl	800d318 <std>
 800d41e:	68e0      	ldr	r0, [r4, #12]
 800d420:	2202      	movs	r2, #2
 800d422:	2112      	movs	r1, #18
 800d424:	f7ff ff78 	bl	800d318 <std>
 800d428:	2301      	movs	r3, #1
 800d42a:	61a3      	str	r3, [r4, #24]
 800d42c:	e7d2      	b.n	800d3d4 <__sinit+0xc>
 800d42e:	bf00      	nop
 800d430:	08011318 	.word	0x08011318
 800d434:	0800d361 	.word	0x0800d361

0800d438 <__sfp>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	4607      	mov	r7, r0
 800d43c:	f7ff ffac 	bl	800d398 <__sfp_lock_acquire>
 800d440:	4b1e      	ldr	r3, [pc, #120]	; (800d4bc <__sfp+0x84>)
 800d442:	681e      	ldr	r6, [r3, #0]
 800d444:	69b3      	ldr	r3, [r6, #24]
 800d446:	b913      	cbnz	r3, 800d44e <__sfp+0x16>
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff ffbd 	bl	800d3c8 <__sinit>
 800d44e:	3648      	adds	r6, #72	; 0x48
 800d450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d454:	3b01      	subs	r3, #1
 800d456:	d503      	bpl.n	800d460 <__sfp+0x28>
 800d458:	6833      	ldr	r3, [r6, #0]
 800d45a:	b30b      	cbz	r3, 800d4a0 <__sfp+0x68>
 800d45c:	6836      	ldr	r6, [r6, #0]
 800d45e:	e7f7      	b.n	800d450 <__sfp+0x18>
 800d460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d464:	b9d5      	cbnz	r5, 800d49c <__sfp+0x64>
 800d466:	4b16      	ldr	r3, [pc, #88]	; (800d4c0 <__sfp+0x88>)
 800d468:	60e3      	str	r3, [r4, #12]
 800d46a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d46e:	6665      	str	r5, [r4, #100]	; 0x64
 800d470:	f000 f86c 	bl	800d54c <__retarget_lock_init_recursive>
 800d474:	f7ff ff96 	bl	800d3a4 <__sfp_lock_release>
 800d478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d47c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d480:	6025      	str	r5, [r4, #0]
 800d482:	61a5      	str	r5, [r4, #24]
 800d484:	2208      	movs	r2, #8
 800d486:	4629      	mov	r1, r5
 800d488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d48c:	f000 f890 	bl	800d5b0 <memset>
 800d490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d498:	4620      	mov	r0, r4
 800d49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49c:	3468      	adds	r4, #104	; 0x68
 800d49e:	e7d9      	b.n	800d454 <__sfp+0x1c>
 800d4a0:	2104      	movs	r1, #4
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	f7ff ff62 	bl	800d36c <__sfmoreglue>
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	6030      	str	r0, [r6, #0]
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d1d5      	bne.n	800d45c <__sfp+0x24>
 800d4b0:	f7ff ff78 	bl	800d3a4 <__sfp_lock_release>
 800d4b4:	230c      	movs	r3, #12
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	e7ee      	b.n	800d498 <__sfp+0x60>
 800d4ba:	bf00      	nop
 800d4bc:	08011318 	.word	0x08011318
 800d4c0:	ffff0001 	.word	0xffff0001

0800d4c4 <_fwalk_reent>:
 800d4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	4688      	mov	r8, r1
 800d4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4d0:	2700      	movs	r7, #0
 800d4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800d4da:	d505      	bpl.n	800d4e8 <_fwalk_reent+0x24>
 800d4dc:	6824      	ldr	r4, [r4, #0]
 800d4de:	2c00      	cmp	r4, #0
 800d4e0:	d1f7      	bne.n	800d4d2 <_fwalk_reent+0xe>
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e8:	89ab      	ldrh	r3, [r5, #12]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d907      	bls.n	800d4fe <_fwalk_reent+0x3a>
 800d4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	d003      	beq.n	800d4fe <_fwalk_reent+0x3a>
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	47c0      	blx	r8
 800d4fc:	4307      	orrs	r7, r0
 800d4fe:	3568      	adds	r5, #104	; 0x68
 800d500:	e7e9      	b.n	800d4d6 <_fwalk_reent+0x12>
	...

0800d504 <__libc_init_array>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	4d0d      	ldr	r5, [pc, #52]	; (800d53c <__libc_init_array+0x38>)
 800d508:	4c0d      	ldr	r4, [pc, #52]	; (800d540 <__libc_init_array+0x3c>)
 800d50a:	1b64      	subs	r4, r4, r5
 800d50c:	10a4      	asrs	r4, r4, #2
 800d50e:	2600      	movs	r6, #0
 800d510:	42a6      	cmp	r6, r4
 800d512:	d109      	bne.n	800d528 <__libc_init_array+0x24>
 800d514:	4d0b      	ldr	r5, [pc, #44]	; (800d544 <__libc_init_array+0x40>)
 800d516:	4c0c      	ldr	r4, [pc, #48]	; (800d548 <__libc_init_array+0x44>)
 800d518:	f003 fd00 	bl	8010f1c <_init>
 800d51c:	1b64      	subs	r4, r4, r5
 800d51e:	10a4      	asrs	r4, r4, #2
 800d520:	2600      	movs	r6, #0
 800d522:	42a6      	cmp	r6, r4
 800d524:	d105      	bne.n	800d532 <__libc_init_array+0x2e>
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52c:	4798      	blx	r3
 800d52e:	3601      	adds	r6, #1
 800d530:	e7ee      	b.n	800d510 <__libc_init_array+0xc>
 800d532:	f855 3b04 	ldr.w	r3, [r5], #4
 800d536:	4798      	blx	r3
 800d538:	3601      	adds	r6, #1
 800d53a:	e7f2      	b.n	800d522 <__libc_init_array+0x1e>
 800d53c:	08011608 	.word	0x08011608
 800d540:	08011608 	.word	0x08011608
 800d544:	08011608 	.word	0x08011608
 800d548:	0801160c 	.word	0x0801160c

0800d54c <__retarget_lock_init_recursive>:
 800d54c:	4770      	bx	lr

0800d54e <__retarget_lock_acquire_recursive>:
 800d54e:	4770      	bx	lr

0800d550 <__retarget_lock_release_recursive>:
 800d550:	4770      	bx	lr
	...

0800d554 <malloc>:
 800d554:	4b02      	ldr	r3, [pc, #8]	; (800d560 <malloc+0xc>)
 800d556:	4601      	mov	r1, r0
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	f000 b89d 	b.w	800d698 <_malloc_r>
 800d55e:	bf00      	nop
 800d560:	20000034 	.word	0x20000034

0800d564 <free>:
 800d564:	4b02      	ldr	r3, [pc, #8]	; (800d570 <free+0xc>)
 800d566:	4601      	mov	r1, r0
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	f000 b829 	b.w	800d5c0 <_free_r>
 800d56e:	bf00      	nop
 800d570:	20000034 	.word	0x20000034

0800d574 <memcmp>:
 800d574:	b510      	push	{r4, lr}
 800d576:	3901      	subs	r1, #1
 800d578:	4402      	add	r2, r0
 800d57a:	4290      	cmp	r0, r2
 800d57c:	d101      	bne.n	800d582 <memcmp+0xe>
 800d57e:	2000      	movs	r0, #0
 800d580:	e005      	b.n	800d58e <memcmp+0x1a>
 800d582:	7803      	ldrb	r3, [r0, #0]
 800d584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d588:	42a3      	cmp	r3, r4
 800d58a:	d001      	beq.n	800d590 <memcmp+0x1c>
 800d58c:	1b18      	subs	r0, r3, r4
 800d58e:	bd10      	pop	{r4, pc}
 800d590:	3001      	adds	r0, #1
 800d592:	e7f2      	b.n	800d57a <memcmp+0x6>

0800d594 <memcpy>:
 800d594:	440a      	add	r2, r1
 800d596:	4291      	cmp	r1, r2
 800d598:	f100 33ff 	add.w	r3, r0, #4294967295
 800d59c:	d100      	bne.n	800d5a0 <memcpy+0xc>
 800d59e:	4770      	bx	lr
 800d5a0:	b510      	push	{r4, lr}
 800d5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5aa:	4291      	cmp	r1, r2
 800d5ac:	d1f9      	bne.n	800d5a2 <memcpy+0xe>
 800d5ae:	bd10      	pop	{r4, pc}

0800d5b0 <memset>:
 800d5b0:	4402      	add	r2, r0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d100      	bne.n	800d5ba <memset+0xa>
 800d5b8:	4770      	bx	lr
 800d5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d5be:	e7f9      	b.n	800d5b4 <memset+0x4>

0800d5c0 <_free_r>:
 800d5c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5c2:	2900      	cmp	r1, #0
 800d5c4:	d044      	beq.n	800d650 <_free_r+0x90>
 800d5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5ca:	9001      	str	r0, [sp, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d5d2:	bfb8      	it	lt
 800d5d4:	18e4      	addlt	r4, r4, r3
 800d5d6:	f001 fca9 	bl	800ef2c <__malloc_lock>
 800d5da:	4a1e      	ldr	r2, [pc, #120]	; (800d654 <_free_r+0x94>)
 800d5dc:	9801      	ldr	r0, [sp, #4]
 800d5de:	6813      	ldr	r3, [r2, #0]
 800d5e0:	b933      	cbnz	r3, 800d5f0 <_free_r+0x30>
 800d5e2:	6063      	str	r3, [r4, #4]
 800d5e4:	6014      	str	r4, [r2, #0]
 800d5e6:	b003      	add	sp, #12
 800d5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5ec:	f001 bca4 	b.w	800ef38 <__malloc_unlock>
 800d5f0:	42a3      	cmp	r3, r4
 800d5f2:	d908      	bls.n	800d606 <_free_r+0x46>
 800d5f4:	6825      	ldr	r5, [r4, #0]
 800d5f6:	1961      	adds	r1, r4, r5
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	bf01      	itttt	eq
 800d5fc:	6819      	ldreq	r1, [r3, #0]
 800d5fe:	685b      	ldreq	r3, [r3, #4]
 800d600:	1949      	addeq	r1, r1, r5
 800d602:	6021      	streq	r1, [r4, #0]
 800d604:	e7ed      	b.n	800d5e2 <_free_r+0x22>
 800d606:	461a      	mov	r2, r3
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	b10b      	cbz	r3, 800d610 <_free_r+0x50>
 800d60c:	42a3      	cmp	r3, r4
 800d60e:	d9fa      	bls.n	800d606 <_free_r+0x46>
 800d610:	6811      	ldr	r1, [r2, #0]
 800d612:	1855      	adds	r5, r2, r1
 800d614:	42a5      	cmp	r5, r4
 800d616:	d10b      	bne.n	800d630 <_free_r+0x70>
 800d618:	6824      	ldr	r4, [r4, #0]
 800d61a:	4421      	add	r1, r4
 800d61c:	1854      	adds	r4, r2, r1
 800d61e:	42a3      	cmp	r3, r4
 800d620:	6011      	str	r1, [r2, #0]
 800d622:	d1e0      	bne.n	800d5e6 <_free_r+0x26>
 800d624:	681c      	ldr	r4, [r3, #0]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	6053      	str	r3, [r2, #4]
 800d62a:	4421      	add	r1, r4
 800d62c:	6011      	str	r1, [r2, #0]
 800d62e:	e7da      	b.n	800d5e6 <_free_r+0x26>
 800d630:	d902      	bls.n	800d638 <_free_r+0x78>
 800d632:	230c      	movs	r3, #12
 800d634:	6003      	str	r3, [r0, #0]
 800d636:	e7d6      	b.n	800d5e6 <_free_r+0x26>
 800d638:	6825      	ldr	r5, [r4, #0]
 800d63a:	1961      	adds	r1, r4, r5
 800d63c:	428b      	cmp	r3, r1
 800d63e:	bf04      	itt	eq
 800d640:	6819      	ldreq	r1, [r3, #0]
 800d642:	685b      	ldreq	r3, [r3, #4]
 800d644:	6063      	str	r3, [r4, #4]
 800d646:	bf04      	itt	eq
 800d648:	1949      	addeq	r1, r1, r5
 800d64a:	6021      	streq	r1, [r4, #0]
 800d64c:	6054      	str	r4, [r2, #4]
 800d64e:	e7ca      	b.n	800d5e6 <_free_r+0x26>
 800d650:	b003      	add	sp, #12
 800d652:	bd30      	pop	{r4, r5, pc}
 800d654:	20002c1c 	.word	0x20002c1c

0800d658 <sbrk_aligned>:
 800d658:	b570      	push	{r4, r5, r6, lr}
 800d65a:	4e0e      	ldr	r6, [pc, #56]	; (800d694 <sbrk_aligned+0x3c>)
 800d65c:	460c      	mov	r4, r1
 800d65e:	6831      	ldr	r1, [r6, #0]
 800d660:	4605      	mov	r5, r0
 800d662:	b911      	cbnz	r1, 800d66a <sbrk_aligned+0x12>
 800d664:	f000 f8fe 	bl	800d864 <_sbrk_r>
 800d668:	6030      	str	r0, [r6, #0]
 800d66a:	4621      	mov	r1, r4
 800d66c:	4628      	mov	r0, r5
 800d66e:	f000 f8f9 	bl	800d864 <_sbrk_r>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d00a      	beq.n	800d68c <sbrk_aligned+0x34>
 800d676:	1cc4      	adds	r4, r0, #3
 800d678:	f024 0403 	bic.w	r4, r4, #3
 800d67c:	42a0      	cmp	r0, r4
 800d67e:	d007      	beq.n	800d690 <sbrk_aligned+0x38>
 800d680:	1a21      	subs	r1, r4, r0
 800d682:	4628      	mov	r0, r5
 800d684:	f000 f8ee 	bl	800d864 <_sbrk_r>
 800d688:	3001      	adds	r0, #1
 800d68a:	d101      	bne.n	800d690 <sbrk_aligned+0x38>
 800d68c:	f04f 34ff 	mov.w	r4, #4294967295
 800d690:	4620      	mov	r0, r4
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	20002c20 	.word	0x20002c20

0800d698 <_malloc_r>:
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	1ccd      	adds	r5, r1, #3
 800d69e:	f025 0503 	bic.w	r5, r5, #3
 800d6a2:	3508      	adds	r5, #8
 800d6a4:	2d0c      	cmp	r5, #12
 800d6a6:	bf38      	it	cc
 800d6a8:	250c      	movcc	r5, #12
 800d6aa:	2d00      	cmp	r5, #0
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	db01      	blt.n	800d6b4 <_malloc_r+0x1c>
 800d6b0:	42a9      	cmp	r1, r5
 800d6b2:	d905      	bls.n	800d6c0 <_malloc_r+0x28>
 800d6b4:	230c      	movs	r3, #12
 800d6b6:	603b      	str	r3, [r7, #0]
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	4e2e      	ldr	r6, [pc, #184]	; (800d77c <_malloc_r+0xe4>)
 800d6c2:	f001 fc33 	bl	800ef2c <__malloc_lock>
 800d6c6:	6833      	ldr	r3, [r6, #0]
 800d6c8:	461c      	mov	r4, r3
 800d6ca:	bb34      	cbnz	r4, 800d71a <_malloc_r+0x82>
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7ff ffc2 	bl	800d658 <sbrk_aligned>
 800d6d4:	1c43      	adds	r3, r0, #1
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	d14d      	bne.n	800d776 <_malloc_r+0xde>
 800d6da:	6834      	ldr	r4, [r6, #0]
 800d6dc:	4626      	mov	r6, r4
 800d6de:	2e00      	cmp	r6, #0
 800d6e0:	d140      	bne.n	800d764 <_malloc_r+0xcc>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	eb04 0803 	add.w	r8, r4, r3
 800d6ec:	f000 f8ba 	bl	800d864 <_sbrk_r>
 800d6f0:	4580      	cmp	r8, r0
 800d6f2:	d13a      	bne.n	800d76a <_malloc_r+0xd2>
 800d6f4:	6821      	ldr	r1, [r4, #0]
 800d6f6:	3503      	adds	r5, #3
 800d6f8:	1a6d      	subs	r5, r5, r1
 800d6fa:	f025 0503 	bic.w	r5, r5, #3
 800d6fe:	3508      	adds	r5, #8
 800d700:	2d0c      	cmp	r5, #12
 800d702:	bf38      	it	cc
 800d704:	250c      	movcc	r5, #12
 800d706:	4629      	mov	r1, r5
 800d708:	4638      	mov	r0, r7
 800d70a:	f7ff ffa5 	bl	800d658 <sbrk_aligned>
 800d70e:	3001      	adds	r0, #1
 800d710:	d02b      	beq.n	800d76a <_malloc_r+0xd2>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	442b      	add	r3, r5
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	e00e      	b.n	800d738 <_malloc_r+0xa0>
 800d71a:	6822      	ldr	r2, [r4, #0]
 800d71c:	1b52      	subs	r2, r2, r5
 800d71e:	d41e      	bmi.n	800d75e <_malloc_r+0xc6>
 800d720:	2a0b      	cmp	r2, #11
 800d722:	d916      	bls.n	800d752 <_malloc_r+0xba>
 800d724:	1961      	adds	r1, r4, r5
 800d726:	42a3      	cmp	r3, r4
 800d728:	6025      	str	r5, [r4, #0]
 800d72a:	bf18      	it	ne
 800d72c:	6059      	strne	r1, [r3, #4]
 800d72e:	6863      	ldr	r3, [r4, #4]
 800d730:	bf08      	it	eq
 800d732:	6031      	streq	r1, [r6, #0]
 800d734:	5162      	str	r2, [r4, r5]
 800d736:	604b      	str	r3, [r1, #4]
 800d738:	4638      	mov	r0, r7
 800d73a:	f104 060b 	add.w	r6, r4, #11
 800d73e:	f001 fbfb 	bl	800ef38 <__malloc_unlock>
 800d742:	f026 0607 	bic.w	r6, r6, #7
 800d746:	1d23      	adds	r3, r4, #4
 800d748:	1af2      	subs	r2, r6, r3
 800d74a:	d0b6      	beq.n	800d6ba <_malloc_r+0x22>
 800d74c:	1b9b      	subs	r3, r3, r6
 800d74e:	50a3      	str	r3, [r4, r2]
 800d750:	e7b3      	b.n	800d6ba <_malloc_r+0x22>
 800d752:	6862      	ldr	r2, [r4, #4]
 800d754:	42a3      	cmp	r3, r4
 800d756:	bf0c      	ite	eq
 800d758:	6032      	streq	r2, [r6, #0]
 800d75a:	605a      	strne	r2, [r3, #4]
 800d75c:	e7ec      	b.n	800d738 <_malloc_r+0xa0>
 800d75e:	4623      	mov	r3, r4
 800d760:	6864      	ldr	r4, [r4, #4]
 800d762:	e7b2      	b.n	800d6ca <_malloc_r+0x32>
 800d764:	4634      	mov	r4, r6
 800d766:	6876      	ldr	r6, [r6, #4]
 800d768:	e7b9      	b.n	800d6de <_malloc_r+0x46>
 800d76a:	230c      	movs	r3, #12
 800d76c:	603b      	str	r3, [r7, #0]
 800d76e:	4638      	mov	r0, r7
 800d770:	f001 fbe2 	bl	800ef38 <__malloc_unlock>
 800d774:	e7a1      	b.n	800d6ba <_malloc_r+0x22>
 800d776:	6025      	str	r5, [r4, #0]
 800d778:	e7de      	b.n	800d738 <_malloc_r+0xa0>
 800d77a:	bf00      	nop
 800d77c:	20002c1c 	.word	0x20002c1c

0800d780 <realloc>:
 800d780:	4b02      	ldr	r3, [pc, #8]	; (800d78c <realloc+0xc>)
 800d782:	460a      	mov	r2, r1
 800d784:	4601      	mov	r1, r0
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	f002 b8b3 	b.w	800f8f2 <_realloc_r>
 800d78c:	20000034 	.word	0x20000034

0800d790 <cleanup_glue>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	460c      	mov	r4, r1
 800d794:	6809      	ldr	r1, [r1, #0]
 800d796:	4605      	mov	r5, r0
 800d798:	b109      	cbz	r1, 800d79e <cleanup_glue+0xe>
 800d79a:	f7ff fff9 	bl	800d790 <cleanup_glue>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7a6:	f7ff bf0b 	b.w	800d5c0 <_free_r>
	...

0800d7ac <_reclaim_reent>:
 800d7ac:	4b2c      	ldr	r3, [pc, #176]	; (800d860 <_reclaim_reent+0xb4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4283      	cmp	r3, r0
 800d7b2:	b570      	push	{r4, r5, r6, lr}
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	d051      	beq.n	800d85c <_reclaim_reent+0xb0>
 800d7b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d7ba:	b143      	cbz	r3, 800d7ce <_reclaim_reent+0x22>
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d14a      	bne.n	800d858 <_reclaim_reent+0xac>
 800d7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	b111      	cbz	r1, 800d7ce <_reclaim_reent+0x22>
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f7ff fef9 	bl	800d5c0 <_free_r>
 800d7ce:	6961      	ldr	r1, [r4, #20]
 800d7d0:	b111      	cbz	r1, 800d7d8 <_reclaim_reent+0x2c>
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f7ff fef4 	bl	800d5c0 <_free_r>
 800d7d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d7da:	b111      	cbz	r1, 800d7e2 <_reclaim_reent+0x36>
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f7ff feef 	bl	800d5c0 <_free_r>
 800d7e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d7e4:	b111      	cbz	r1, 800d7ec <_reclaim_reent+0x40>
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7ff feea 	bl	800d5c0 <_free_r>
 800d7ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d7ee:	b111      	cbz	r1, 800d7f6 <_reclaim_reent+0x4a>
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f7ff fee5 	bl	800d5c0 <_free_r>
 800d7f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d7f8:	b111      	cbz	r1, 800d800 <_reclaim_reent+0x54>
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f7ff fee0 	bl	800d5c0 <_free_r>
 800d800:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d802:	b111      	cbz	r1, 800d80a <_reclaim_reent+0x5e>
 800d804:	4620      	mov	r0, r4
 800d806:	f7ff fedb 	bl	800d5c0 <_free_r>
 800d80a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d80c:	b111      	cbz	r1, 800d814 <_reclaim_reent+0x68>
 800d80e:	4620      	mov	r0, r4
 800d810:	f7ff fed6 	bl	800d5c0 <_free_r>
 800d814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d816:	b111      	cbz	r1, 800d81e <_reclaim_reent+0x72>
 800d818:	4620      	mov	r0, r4
 800d81a:	f7ff fed1 	bl	800d5c0 <_free_r>
 800d81e:	69a3      	ldr	r3, [r4, #24]
 800d820:	b1e3      	cbz	r3, 800d85c <_reclaim_reent+0xb0>
 800d822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d824:	4620      	mov	r0, r4
 800d826:	4798      	blx	r3
 800d828:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d82a:	b1b9      	cbz	r1, 800d85c <_reclaim_reent+0xb0>
 800d82c:	4620      	mov	r0, r4
 800d82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d832:	f7ff bfad 	b.w	800d790 <cleanup_glue>
 800d836:	5949      	ldr	r1, [r1, r5]
 800d838:	b941      	cbnz	r1, 800d84c <_reclaim_reent+0xa0>
 800d83a:	3504      	adds	r5, #4
 800d83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d83e:	2d80      	cmp	r5, #128	; 0x80
 800d840:	68d9      	ldr	r1, [r3, #12]
 800d842:	d1f8      	bne.n	800d836 <_reclaim_reent+0x8a>
 800d844:	4620      	mov	r0, r4
 800d846:	f7ff febb 	bl	800d5c0 <_free_r>
 800d84a:	e7ba      	b.n	800d7c2 <_reclaim_reent+0x16>
 800d84c:	680e      	ldr	r6, [r1, #0]
 800d84e:	4620      	mov	r0, r4
 800d850:	f7ff feb6 	bl	800d5c0 <_free_r>
 800d854:	4631      	mov	r1, r6
 800d856:	e7ef      	b.n	800d838 <_reclaim_reent+0x8c>
 800d858:	2500      	movs	r5, #0
 800d85a:	e7ef      	b.n	800d83c <_reclaim_reent+0x90>
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	bf00      	nop
 800d860:	20000034 	.word	0x20000034

0800d864 <_sbrk_r>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4d06      	ldr	r5, [pc, #24]	; (800d880 <_sbrk_r+0x1c>)
 800d868:	2300      	movs	r3, #0
 800d86a:	4604      	mov	r4, r0
 800d86c:	4608      	mov	r0, r1
 800d86e:	602b      	str	r3, [r5, #0]
 800d870:	f7f7 fb70 	bl	8004f54 <_sbrk>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_sbrk_r+0x1a>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_sbrk_r+0x1a>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	20002c24 	.word	0x20002c24

0800d884 <siprintf>:
 800d884:	b40e      	push	{r1, r2, r3}
 800d886:	b500      	push	{lr}
 800d888:	b09c      	sub	sp, #112	; 0x70
 800d88a:	ab1d      	add	r3, sp, #116	; 0x74
 800d88c:	9002      	str	r0, [sp, #8]
 800d88e:	9006      	str	r0, [sp, #24]
 800d890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d894:	4809      	ldr	r0, [pc, #36]	; (800d8bc <siprintf+0x38>)
 800d896:	9107      	str	r1, [sp, #28]
 800d898:	9104      	str	r1, [sp, #16]
 800d89a:	4909      	ldr	r1, [pc, #36]	; (800d8c0 <siprintf+0x3c>)
 800d89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8a0:	9105      	str	r1, [sp, #20]
 800d8a2:	6800      	ldr	r0, [r0, #0]
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	a902      	add	r1, sp, #8
 800d8a8:	f002 f8ae 	bl	800fa08 <_svfiprintf_r>
 800d8ac:	9b02      	ldr	r3, [sp, #8]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	b01c      	add	sp, #112	; 0x70
 800d8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8b8:	b003      	add	sp, #12
 800d8ba:	4770      	bx	lr
 800d8bc:	20000034 	.word	0x20000034
 800d8c0:	ffff0208 	.word	0xffff0208

0800d8c4 <siscanf>:
 800d8c4:	b40e      	push	{r1, r2, r3}
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	b09f      	sub	sp, #124	; 0x7c
 800d8ca:	ac21      	add	r4, sp, #132	; 0x84
 800d8cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d8d0:	f854 2b04 	ldr.w	r2, [r4], #4
 800d8d4:	9201      	str	r2, [sp, #4]
 800d8d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d8da:	9004      	str	r0, [sp, #16]
 800d8dc:	9008      	str	r0, [sp, #32]
 800d8de:	f7f2 fc89 	bl	80001f4 <strlen>
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <siscanf+0x50>)
 800d8e4:	9005      	str	r0, [sp, #20]
 800d8e6:	9009      	str	r0, [sp, #36]	; 0x24
 800d8e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d8ea:	480b      	ldr	r0, [pc, #44]	; (800d918 <siscanf+0x54>)
 800d8ec:	9a01      	ldr	r2, [sp, #4]
 800d8ee:	6800      	ldr	r0, [r0, #0]
 800d8f0:	9403      	str	r4, [sp, #12]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	9311      	str	r3, [sp, #68]	; 0x44
 800d8f6:	9316      	str	r3, [sp, #88]	; 0x58
 800d8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d8fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d900:	a904      	add	r1, sp, #16
 800d902:	4623      	mov	r3, r4
 800d904:	f002 f9da 	bl	800fcbc <__ssvfiscanf_r>
 800d908:	b01f      	add	sp, #124	; 0x7c
 800d90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d90e:	b003      	add	sp, #12
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	0800d93f 	.word	0x0800d93f
 800d918:	20000034 	.word	0x20000034

0800d91c <__sread>:
 800d91c:	b510      	push	{r4, lr}
 800d91e:	460c      	mov	r4, r1
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	f002 fe28 	bl	8010578 <_read_r>
 800d928:	2800      	cmp	r0, #0
 800d92a:	bfab      	itete	ge
 800d92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d92e:	89a3      	ldrhlt	r3, [r4, #12]
 800d930:	181b      	addge	r3, r3, r0
 800d932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d936:	bfac      	ite	ge
 800d938:	6563      	strge	r3, [r4, #84]	; 0x54
 800d93a:	81a3      	strhlt	r3, [r4, #12]
 800d93c:	bd10      	pop	{r4, pc}

0800d93e <__seofread>:
 800d93e:	2000      	movs	r0, #0
 800d940:	4770      	bx	lr

0800d942 <__swrite>:
 800d942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d946:	461f      	mov	r7, r3
 800d948:	898b      	ldrh	r3, [r1, #12]
 800d94a:	05db      	lsls	r3, r3, #23
 800d94c:	4605      	mov	r5, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	4616      	mov	r6, r2
 800d952:	d505      	bpl.n	800d960 <__swrite+0x1e>
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	2302      	movs	r3, #2
 800d95a:	2200      	movs	r2, #0
 800d95c:	f001 fac2 	bl	800eee4 <_lseek_r>
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	4632      	mov	r2, r6
 800d96e:	463b      	mov	r3, r7
 800d970:	4628      	mov	r0, r5
 800d972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d976:	f000 be61 	b.w	800e63c <_write_r>

0800d97a <__sseek>:
 800d97a:	b510      	push	{r4, lr}
 800d97c:	460c      	mov	r4, r1
 800d97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d982:	f001 faaf 	bl	800eee4 <_lseek_r>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	bf15      	itete	ne
 800d98c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d98e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d996:	81a3      	strheq	r3, [r4, #12]
 800d998:	bf18      	it	ne
 800d99a:	81a3      	strhne	r3, [r4, #12]
 800d99c:	bd10      	pop	{r4, pc}

0800d99e <__sclose>:
 800d99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a2:	f000 be5d 	b.w	800e660 <_close_r>

0800d9a6 <strcpy>:
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9ac:	f803 2b01 	strb.w	r2, [r3], #1
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	d1f9      	bne.n	800d9a8 <strcpy+0x2>
 800d9b4:	4770      	bx	lr

0800d9b6 <strncmp>:
 800d9b6:	b510      	push	{r4, lr}
 800d9b8:	b17a      	cbz	r2, 800d9da <strncmp+0x24>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	3901      	subs	r1, #1
 800d9be:	1884      	adds	r4, r0, r2
 800d9c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d9c8:	4290      	cmp	r0, r2
 800d9ca:	d101      	bne.n	800d9d0 <strncmp+0x1a>
 800d9cc:	42a3      	cmp	r3, r4
 800d9ce:	d101      	bne.n	800d9d4 <strncmp+0x1e>
 800d9d0:	1a80      	subs	r0, r0, r2
 800d9d2:	bd10      	pop	{r4, pc}
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1f3      	bne.n	800d9c0 <strncmp+0xa>
 800d9d8:	e7fa      	b.n	800d9d0 <strncmp+0x1a>
 800d9da:	4610      	mov	r0, r2
 800d9dc:	e7f9      	b.n	800d9d2 <strncmp+0x1c>

0800d9de <sulp>:
 800d9de:	b570      	push	{r4, r5, r6, lr}
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	460d      	mov	r5, r1
 800d9e4:	ec45 4b10 	vmov	d0, r4, r5
 800d9e8:	4616      	mov	r6, r2
 800d9ea:	f001 fe1d 	bl	800f628 <__ulp>
 800d9ee:	ec51 0b10 	vmov	r0, r1, d0
 800d9f2:	b17e      	cbz	r6, 800da14 <sulp+0x36>
 800d9f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d9f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dd09      	ble.n	800da14 <sulp+0x36>
 800da00:	051b      	lsls	r3, r3, #20
 800da02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da06:	2400      	movs	r4, #0
 800da08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da0c:	4622      	mov	r2, r4
 800da0e:	462b      	mov	r3, r5
 800da10:	f7f2 fe0a 	bl	8000628 <__aeabi_dmul>
 800da14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da18 <_strtod_l>:
 800da18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da1c:	ed2d 8b02 	vpush	{d8}
 800da20:	b09d      	sub	sp, #116	; 0x74
 800da22:	461f      	mov	r7, r3
 800da24:	2300      	movs	r3, #0
 800da26:	9318      	str	r3, [sp, #96]	; 0x60
 800da28:	4ba2      	ldr	r3, [pc, #648]	; (800dcb4 <_strtod_l+0x29c>)
 800da2a:	9213      	str	r2, [sp, #76]	; 0x4c
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	9305      	str	r3, [sp, #20]
 800da30:	4604      	mov	r4, r0
 800da32:	4618      	mov	r0, r3
 800da34:	4688      	mov	r8, r1
 800da36:	f7f2 fbdd 	bl	80001f4 <strlen>
 800da3a:	f04f 0a00 	mov.w	sl, #0
 800da3e:	4605      	mov	r5, r0
 800da40:	f04f 0b00 	mov.w	fp, #0
 800da44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800da48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da4a:	781a      	ldrb	r2, [r3, #0]
 800da4c:	2a2b      	cmp	r2, #43	; 0x2b
 800da4e:	d04e      	beq.n	800daee <_strtod_l+0xd6>
 800da50:	d83b      	bhi.n	800daca <_strtod_l+0xb2>
 800da52:	2a0d      	cmp	r2, #13
 800da54:	d834      	bhi.n	800dac0 <_strtod_l+0xa8>
 800da56:	2a08      	cmp	r2, #8
 800da58:	d834      	bhi.n	800dac4 <_strtod_l+0xac>
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	d03e      	beq.n	800dadc <_strtod_l+0xc4>
 800da5e:	2300      	movs	r3, #0
 800da60:	930a      	str	r3, [sp, #40]	; 0x28
 800da62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800da64:	7833      	ldrb	r3, [r6, #0]
 800da66:	2b30      	cmp	r3, #48	; 0x30
 800da68:	f040 80b0 	bne.w	800dbcc <_strtod_l+0x1b4>
 800da6c:	7873      	ldrb	r3, [r6, #1]
 800da6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da72:	2b58      	cmp	r3, #88	; 0x58
 800da74:	d168      	bne.n	800db48 <_strtod_l+0x130>
 800da76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	ab18      	add	r3, sp, #96	; 0x60
 800da7c:	9702      	str	r7, [sp, #8]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4a8d      	ldr	r2, [pc, #564]	; (800dcb8 <_strtod_l+0x2a0>)
 800da82:	ab19      	add	r3, sp, #100	; 0x64
 800da84:	a917      	add	r1, sp, #92	; 0x5c
 800da86:	4620      	mov	r0, r4
 800da88:	f000 ff24 	bl	800e8d4 <__gethex>
 800da8c:	f010 0707 	ands.w	r7, r0, #7
 800da90:	4605      	mov	r5, r0
 800da92:	d005      	beq.n	800daa0 <_strtod_l+0x88>
 800da94:	2f06      	cmp	r7, #6
 800da96:	d12c      	bne.n	800daf2 <_strtod_l+0xda>
 800da98:	3601      	adds	r6, #1
 800da9a:	2300      	movs	r3, #0
 800da9c:	9617      	str	r6, [sp, #92]	; 0x5c
 800da9e:	930a      	str	r3, [sp, #40]	; 0x28
 800daa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f040 8590 	bne.w	800e5c8 <_strtod_l+0xbb0>
 800daa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daaa:	b1eb      	cbz	r3, 800dae8 <_strtod_l+0xd0>
 800daac:	4652      	mov	r2, sl
 800daae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dab2:	ec43 2b10 	vmov	d0, r2, r3
 800dab6:	b01d      	add	sp, #116	; 0x74
 800dab8:	ecbd 8b02 	vpop	{d8}
 800dabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac0:	2a20      	cmp	r2, #32
 800dac2:	d1cc      	bne.n	800da5e <_strtod_l+0x46>
 800dac4:	3301      	adds	r3, #1
 800dac6:	9317      	str	r3, [sp, #92]	; 0x5c
 800dac8:	e7be      	b.n	800da48 <_strtod_l+0x30>
 800daca:	2a2d      	cmp	r2, #45	; 0x2d
 800dacc:	d1c7      	bne.n	800da5e <_strtod_l+0x46>
 800dace:	2201      	movs	r2, #1
 800dad0:	920a      	str	r2, [sp, #40]	; 0x28
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	9217      	str	r2, [sp, #92]	; 0x5c
 800dad6:	785b      	ldrb	r3, [r3, #1]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1c2      	bne.n	800da62 <_strtod_l+0x4a>
 800dadc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dade:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f040 856e 	bne.w	800e5c4 <_strtod_l+0xbac>
 800dae8:	4652      	mov	r2, sl
 800daea:	465b      	mov	r3, fp
 800daec:	e7e1      	b.n	800dab2 <_strtod_l+0x9a>
 800daee:	2200      	movs	r2, #0
 800daf0:	e7ee      	b.n	800dad0 <_strtod_l+0xb8>
 800daf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800daf4:	b13a      	cbz	r2, 800db06 <_strtod_l+0xee>
 800daf6:	2135      	movs	r1, #53	; 0x35
 800daf8:	a81a      	add	r0, sp, #104	; 0x68
 800dafa:	f001 fea0 	bl	800f83e <__copybits>
 800dafe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db00:	4620      	mov	r0, r4
 800db02:	f001 fa5f 	bl	800efc4 <_Bfree>
 800db06:	3f01      	subs	r7, #1
 800db08:	2f04      	cmp	r7, #4
 800db0a:	d806      	bhi.n	800db1a <_strtod_l+0x102>
 800db0c:	e8df f007 	tbb	[pc, r7]
 800db10:	1714030a 	.word	0x1714030a
 800db14:	0a          	.byte	0x0a
 800db15:	00          	.byte	0x00
 800db16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800db1a:	0728      	lsls	r0, r5, #28
 800db1c:	d5c0      	bpl.n	800daa0 <_strtod_l+0x88>
 800db1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800db22:	e7bd      	b.n	800daa0 <_strtod_l+0x88>
 800db24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800db28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db36:	e7f0      	b.n	800db1a <_strtod_l+0x102>
 800db38:	f8df b180 	ldr.w	fp, [pc, #384]	; 800dcbc <_strtod_l+0x2a4>
 800db3c:	e7ed      	b.n	800db1a <_strtod_l+0x102>
 800db3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800db42:	f04f 3aff 	mov.w	sl, #4294967295
 800db46:	e7e8      	b.n	800db1a <_strtod_l+0x102>
 800db48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b30      	cmp	r3, #48	; 0x30
 800db52:	d0f9      	beq.n	800db48 <_strtod_l+0x130>
 800db54:	2b00      	cmp	r3, #0
 800db56:	d0a3      	beq.n	800daa0 <_strtod_l+0x88>
 800db58:	2301      	movs	r3, #1
 800db5a:	f04f 0900 	mov.w	r9, #0
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	f8cd 901c 	str.w	r9, [sp, #28]
 800db68:	464f      	mov	r7, r9
 800db6a:	220a      	movs	r2, #10
 800db6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800db6e:	7806      	ldrb	r6, [r0, #0]
 800db70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800db74:	b2d9      	uxtb	r1, r3
 800db76:	2909      	cmp	r1, #9
 800db78:	d92a      	bls.n	800dbd0 <_strtod_l+0x1b8>
 800db7a:	9905      	ldr	r1, [sp, #20]
 800db7c:	462a      	mov	r2, r5
 800db7e:	f7ff ff1a 	bl	800d9b6 <strncmp>
 800db82:	b398      	cbz	r0, 800dbec <_strtod_l+0x1d4>
 800db84:	2000      	movs	r0, #0
 800db86:	4632      	mov	r2, r6
 800db88:	463d      	mov	r5, r7
 800db8a:	9005      	str	r0, [sp, #20]
 800db8c:	4603      	mov	r3, r0
 800db8e:	2a65      	cmp	r2, #101	; 0x65
 800db90:	d001      	beq.n	800db96 <_strtod_l+0x17e>
 800db92:	2a45      	cmp	r2, #69	; 0x45
 800db94:	d118      	bne.n	800dbc8 <_strtod_l+0x1b0>
 800db96:	b91d      	cbnz	r5, 800dba0 <_strtod_l+0x188>
 800db98:	9a04      	ldr	r2, [sp, #16]
 800db9a:	4302      	orrs	r2, r0
 800db9c:	d09e      	beq.n	800dadc <_strtod_l+0xc4>
 800db9e:	2500      	movs	r5, #0
 800dba0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dba4:	f108 0201 	add.w	r2, r8, #1
 800dba8:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dbae:	2a2b      	cmp	r2, #43	; 0x2b
 800dbb0:	d075      	beq.n	800dc9e <_strtod_l+0x286>
 800dbb2:	2a2d      	cmp	r2, #45	; 0x2d
 800dbb4:	d07b      	beq.n	800dcae <_strtod_l+0x296>
 800dbb6:	f04f 0c00 	mov.w	ip, #0
 800dbba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dbbe:	2909      	cmp	r1, #9
 800dbc0:	f240 8082 	bls.w	800dcc8 <_strtod_l+0x2b0>
 800dbc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dbc8:	2600      	movs	r6, #0
 800dbca:	e09d      	b.n	800dd08 <_strtod_l+0x2f0>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	e7c4      	b.n	800db5a <_strtod_l+0x142>
 800dbd0:	2f08      	cmp	r7, #8
 800dbd2:	bfd8      	it	le
 800dbd4:	9907      	ldrle	r1, [sp, #28]
 800dbd6:	f100 0001 	add.w	r0, r0, #1
 800dbda:	bfda      	itte	le
 800dbdc:	fb02 3301 	mlale	r3, r2, r1, r3
 800dbe0:	9307      	strle	r3, [sp, #28]
 800dbe2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dbe6:	3701      	adds	r7, #1
 800dbe8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dbea:	e7bf      	b.n	800db6c <_strtod_l+0x154>
 800dbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbee:	195a      	adds	r2, r3, r5
 800dbf0:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbf2:	5d5a      	ldrb	r2, [r3, r5]
 800dbf4:	2f00      	cmp	r7, #0
 800dbf6:	d037      	beq.n	800dc68 <_strtod_l+0x250>
 800dbf8:	9005      	str	r0, [sp, #20]
 800dbfa:	463d      	mov	r5, r7
 800dbfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dc00:	2b09      	cmp	r3, #9
 800dc02:	d912      	bls.n	800dc2a <_strtod_l+0x212>
 800dc04:	2301      	movs	r3, #1
 800dc06:	e7c2      	b.n	800db8e <_strtod_l+0x176>
 800dc08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc0e:	785a      	ldrb	r2, [r3, #1]
 800dc10:	3001      	adds	r0, #1
 800dc12:	2a30      	cmp	r2, #48	; 0x30
 800dc14:	d0f8      	beq.n	800dc08 <_strtod_l+0x1f0>
 800dc16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc1a:	2b08      	cmp	r3, #8
 800dc1c:	f200 84d9 	bhi.w	800e5d2 <_strtod_l+0xbba>
 800dc20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc22:	9005      	str	r0, [sp, #20]
 800dc24:	2000      	movs	r0, #0
 800dc26:	9308      	str	r3, [sp, #32]
 800dc28:	4605      	mov	r5, r0
 800dc2a:	3a30      	subs	r2, #48	; 0x30
 800dc2c:	f100 0301 	add.w	r3, r0, #1
 800dc30:	d014      	beq.n	800dc5c <_strtod_l+0x244>
 800dc32:	9905      	ldr	r1, [sp, #20]
 800dc34:	4419      	add	r1, r3
 800dc36:	9105      	str	r1, [sp, #20]
 800dc38:	462b      	mov	r3, r5
 800dc3a:	eb00 0e05 	add.w	lr, r0, r5
 800dc3e:	210a      	movs	r1, #10
 800dc40:	4573      	cmp	r3, lr
 800dc42:	d113      	bne.n	800dc6c <_strtod_l+0x254>
 800dc44:	182b      	adds	r3, r5, r0
 800dc46:	2b08      	cmp	r3, #8
 800dc48:	f105 0501 	add.w	r5, r5, #1
 800dc4c:	4405      	add	r5, r0
 800dc4e:	dc1c      	bgt.n	800dc8a <_strtod_l+0x272>
 800dc50:	9907      	ldr	r1, [sp, #28]
 800dc52:	230a      	movs	r3, #10
 800dc54:	fb03 2301 	mla	r3, r3, r1, r2
 800dc58:	9307      	str	r3, [sp, #28]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc5e:	1c51      	adds	r1, r2, #1
 800dc60:	9117      	str	r1, [sp, #92]	; 0x5c
 800dc62:	7852      	ldrb	r2, [r2, #1]
 800dc64:	4618      	mov	r0, r3
 800dc66:	e7c9      	b.n	800dbfc <_strtod_l+0x1e4>
 800dc68:	4638      	mov	r0, r7
 800dc6a:	e7d2      	b.n	800dc12 <_strtod_l+0x1fa>
 800dc6c:	2b08      	cmp	r3, #8
 800dc6e:	dc04      	bgt.n	800dc7a <_strtod_l+0x262>
 800dc70:	9e07      	ldr	r6, [sp, #28]
 800dc72:	434e      	muls	r6, r1
 800dc74:	9607      	str	r6, [sp, #28]
 800dc76:	3301      	adds	r3, #1
 800dc78:	e7e2      	b.n	800dc40 <_strtod_l+0x228>
 800dc7a:	f103 0c01 	add.w	ip, r3, #1
 800dc7e:	f1bc 0f10 	cmp.w	ip, #16
 800dc82:	bfd8      	it	le
 800dc84:	fb01 f909 	mulle.w	r9, r1, r9
 800dc88:	e7f5      	b.n	800dc76 <_strtod_l+0x25e>
 800dc8a:	2d10      	cmp	r5, #16
 800dc8c:	bfdc      	itt	le
 800dc8e:	230a      	movle	r3, #10
 800dc90:	fb03 2909 	mlale	r9, r3, r9, r2
 800dc94:	e7e1      	b.n	800dc5a <_strtod_l+0x242>
 800dc96:	2300      	movs	r3, #0
 800dc98:	9305      	str	r3, [sp, #20]
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e77c      	b.n	800db98 <_strtod_l+0x180>
 800dc9e:	f04f 0c00 	mov.w	ip, #0
 800dca2:	f108 0202 	add.w	r2, r8, #2
 800dca6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dca8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dcac:	e785      	b.n	800dbba <_strtod_l+0x1a2>
 800dcae:	f04f 0c01 	mov.w	ip, #1
 800dcb2:	e7f6      	b.n	800dca2 <_strtod_l+0x28a>
 800dcb4:	080113f0 	.word	0x080113f0
 800dcb8:	08011328 	.word	0x08011328
 800dcbc:	7ff00000 	.word	0x7ff00000
 800dcc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcc2:	1c51      	adds	r1, r2, #1
 800dcc4:	9117      	str	r1, [sp, #92]	; 0x5c
 800dcc6:	7852      	ldrb	r2, [r2, #1]
 800dcc8:	2a30      	cmp	r2, #48	; 0x30
 800dcca:	d0f9      	beq.n	800dcc0 <_strtod_l+0x2a8>
 800dccc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dcd0:	2908      	cmp	r1, #8
 800dcd2:	f63f af79 	bhi.w	800dbc8 <_strtod_l+0x1b0>
 800dcd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dcda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcdc:	9206      	str	r2, [sp, #24]
 800dcde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dce0:	1c51      	adds	r1, r2, #1
 800dce2:	9117      	str	r1, [sp, #92]	; 0x5c
 800dce4:	7852      	ldrb	r2, [r2, #1]
 800dce6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800dcea:	2e09      	cmp	r6, #9
 800dcec:	d937      	bls.n	800dd5e <_strtod_l+0x346>
 800dcee:	9e06      	ldr	r6, [sp, #24]
 800dcf0:	1b89      	subs	r1, r1, r6
 800dcf2:	2908      	cmp	r1, #8
 800dcf4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dcf8:	dc02      	bgt.n	800dd00 <_strtod_l+0x2e8>
 800dcfa:	4576      	cmp	r6, lr
 800dcfc:	bfa8      	it	ge
 800dcfe:	4676      	movge	r6, lr
 800dd00:	f1bc 0f00 	cmp.w	ip, #0
 800dd04:	d000      	beq.n	800dd08 <_strtod_l+0x2f0>
 800dd06:	4276      	negs	r6, r6
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	d14d      	bne.n	800dda8 <_strtod_l+0x390>
 800dd0c:	9904      	ldr	r1, [sp, #16]
 800dd0e:	4301      	orrs	r1, r0
 800dd10:	f47f aec6 	bne.w	800daa0 <_strtod_l+0x88>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f47f aee1 	bne.w	800dadc <_strtod_l+0xc4>
 800dd1a:	2a69      	cmp	r2, #105	; 0x69
 800dd1c:	d027      	beq.n	800dd6e <_strtod_l+0x356>
 800dd1e:	dc24      	bgt.n	800dd6a <_strtod_l+0x352>
 800dd20:	2a49      	cmp	r2, #73	; 0x49
 800dd22:	d024      	beq.n	800dd6e <_strtod_l+0x356>
 800dd24:	2a4e      	cmp	r2, #78	; 0x4e
 800dd26:	f47f aed9 	bne.w	800dadc <_strtod_l+0xc4>
 800dd2a:	499f      	ldr	r1, [pc, #636]	; (800dfa8 <_strtod_l+0x590>)
 800dd2c:	a817      	add	r0, sp, #92	; 0x5c
 800dd2e:	f001 f829 	bl	800ed84 <__match>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f43f aed2 	beq.w	800dadc <_strtod_l+0xc4>
 800dd38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	2b28      	cmp	r3, #40	; 0x28
 800dd3e:	d12d      	bne.n	800dd9c <_strtod_l+0x384>
 800dd40:	499a      	ldr	r1, [pc, #616]	; (800dfac <_strtod_l+0x594>)
 800dd42:	aa1a      	add	r2, sp, #104	; 0x68
 800dd44:	a817      	add	r0, sp, #92	; 0x5c
 800dd46:	f001 f831 	bl	800edac <__hexnan>
 800dd4a:	2805      	cmp	r0, #5
 800dd4c:	d126      	bne.n	800dd9c <_strtod_l+0x384>
 800dd4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800dd54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dd58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dd5c:	e6a0      	b.n	800daa0 <_strtod_l+0x88>
 800dd5e:	210a      	movs	r1, #10
 800dd60:	fb01 2e0e 	mla	lr, r1, lr, r2
 800dd64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dd68:	e7b9      	b.n	800dcde <_strtod_l+0x2c6>
 800dd6a:	2a6e      	cmp	r2, #110	; 0x6e
 800dd6c:	e7db      	b.n	800dd26 <_strtod_l+0x30e>
 800dd6e:	4990      	ldr	r1, [pc, #576]	; (800dfb0 <_strtod_l+0x598>)
 800dd70:	a817      	add	r0, sp, #92	; 0x5c
 800dd72:	f001 f807 	bl	800ed84 <__match>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f43f aeb0 	beq.w	800dadc <_strtod_l+0xc4>
 800dd7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd7e:	498d      	ldr	r1, [pc, #564]	; (800dfb4 <_strtod_l+0x59c>)
 800dd80:	3b01      	subs	r3, #1
 800dd82:	a817      	add	r0, sp, #92	; 0x5c
 800dd84:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd86:	f000 fffd 	bl	800ed84 <__match>
 800dd8a:	b910      	cbnz	r0, 800dd92 <_strtod_l+0x37a>
 800dd8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd8e:	3301      	adds	r3, #1
 800dd90:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd92:	f8df b230 	ldr.w	fp, [pc, #560]	; 800dfc4 <_strtod_l+0x5ac>
 800dd96:	f04f 0a00 	mov.w	sl, #0
 800dd9a:	e681      	b.n	800daa0 <_strtod_l+0x88>
 800dd9c:	4886      	ldr	r0, [pc, #536]	; (800dfb8 <_strtod_l+0x5a0>)
 800dd9e:	f002 fbff 	bl	80105a0 <nan>
 800dda2:	ec5b ab10 	vmov	sl, fp, d0
 800dda6:	e67b      	b.n	800daa0 <_strtod_l+0x88>
 800dda8:	9b05      	ldr	r3, [sp, #20]
 800ddaa:	9807      	ldr	r0, [sp, #28]
 800ddac:	1af3      	subs	r3, r6, r3
 800ddae:	2f00      	cmp	r7, #0
 800ddb0:	bf08      	it	eq
 800ddb2:	462f      	moveq	r7, r5
 800ddb4:	2d10      	cmp	r5, #16
 800ddb6:	9306      	str	r3, [sp, #24]
 800ddb8:	46a8      	mov	r8, r5
 800ddba:	bfa8      	it	ge
 800ddbc:	f04f 0810 	movge.w	r8, #16
 800ddc0:	f7f2 fbb8 	bl	8000534 <__aeabi_ui2d>
 800ddc4:	2d09      	cmp	r5, #9
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	468b      	mov	fp, r1
 800ddca:	dd13      	ble.n	800ddf4 <_strtod_l+0x3dc>
 800ddcc:	4b7b      	ldr	r3, [pc, #492]	; (800dfbc <_strtod_l+0x5a4>)
 800ddce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ddd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ddd6:	f7f2 fc27 	bl	8000628 <__aeabi_dmul>
 800ddda:	4682      	mov	sl, r0
 800dddc:	4648      	mov	r0, r9
 800ddde:	468b      	mov	fp, r1
 800dde0:	f7f2 fba8 	bl	8000534 <__aeabi_ui2d>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4650      	mov	r0, sl
 800ddea:	4659      	mov	r1, fp
 800ddec:	f7f2 fa66 	bl	80002bc <__adddf3>
 800ddf0:	4682      	mov	sl, r0
 800ddf2:	468b      	mov	fp, r1
 800ddf4:	2d0f      	cmp	r5, #15
 800ddf6:	dc38      	bgt.n	800de6a <_strtod_l+0x452>
 800ddf8:	9b06      	ldr	r3, [sp, #24]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f43f ae50 	beq.w	800daa0 <_strtod_l+0x88>
 800de00:	dd24      	ble.n	800de4c <_strtod_l+0x434>
 800de02:	2b16      	cmp	r3, #22
 800de04:	dc0b      	bgt.n	800de1e <_strtod_l+0x406>
 800de06:	496d      	ldr	r1, [pc, #436]	; (800dfbc <_strtod_l+0x5a4>)
 800de08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de10:	4652      	mov	r2, sl
 800de12:	465b      	mov	r3, fp
 800de14:	f7f2 fc08 	bl	8000628 <__aeabi_dmul>
 800de18:	4682      	mov	sl, r0
 800de1a:	468b      	mov	fp, r1
 800de1c:	e640      	b.n	800daa0 <_strtod_l+0x88>
 800de1e:	9a06      	ldr	r2, [sp, #24]
 800de20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800de24:	4293      	cmp	r3, r2
 800de26:	db20      	blt.n	800de6a <_strtod_l+0x452>
 800de28:	4c64      	ldr	r4, [pc, #400]	; (800dfbc <_strtod_l+0x5a4>)
 800de2a:	f1c5 050f 	rsb	r5, r5, #15
 800de2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800de32:	4652      	mov	r2, sl
 800de34:	465b      	mov	r3, fp
 800de36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de3a:	f7f2 fbf5 	bl	8000628 <__aeabi_dmul>
 800de3e:	9b06      	ldr	r3, [sp, #24]
 800de40:	1b5d      	subs	r5, r3, r5
 800de42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800de46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800de4a:	e7e3      	b.n	800de14 <_strtod_l+0x3fc>
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	3316      	adds	r3, #22
 800de50:	db0b      	blt.n	800de6a <_strtod_l+0x452>
 800de52:	9b05      	ldr	r3, [sp, #20]
 800de54:	1b9e      	subs	r6, r3, r6
 800de56:	4b59      	ldr	r3, [pc, #356]	; (800dfbc <_strtod_l+0x5a4>)
 800de58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800de5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de60:	4650      	mov	r0, sl
 800de62:	4659      	mov	r1, fp
 800de64:	f7f2 fd0a 	bl	800087c <__aeabi_ddiv>
 800de68:	e7d6      	b.n	800de18 <_strtod_l+0x400>
 800de6a:	9b06      	ldr	r3, [sp, #24]
 800de6c:	eba5 0808 	sub.w	r8, r5, r8
 800de70:	4498      	add	r8, r3
 800de72:	f1b8 0f00 	cmp.w	r8, #0
 800de76:	dd74      	ble.n	800df62 <_strtod_l+0x54a>
 800de78:	f018 030f 	ands.w	r3, r8, #15
 800de7c:	d00a      	beq.n	800de94 <_strtod_l+0x47c>
 800de7e:	494f      	ldr	r1, [pc, #316]	; (800dfbc <_strtod_l+0x5a4>)
 800de80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de84:	4652      	mov	r2, sl
 800de86:	465b      	mov	r3, fp
 800de88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de8c:	f7f2 fbcc 	bl	8000628 <__aeabi_dmul>
 800de90:	4682      	mov	sl, r0
 800de92:	468b      	mov	fp, r1
 800de94:	f038 080f 	bics.w	r8, r8, #15
 800de98:	d04f      	beq.n	800df3a <_strtod_l+0x522>
 800de9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800de9e:	dd22      	ble.n	800dee6 <_strtod_l+0x4ce>
 800dea0:	2500      	movs	r5, #0
 800dea2:	462e      	mov	r6, r5
 800dea4:	9507      	str	r5, [sp, #28]
 800dea6:	9505      	str	r5, [sp, #20]
 800dea8:	2322      	movs	r3, #34	; 0x22
 800deaa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800dfc4 <_strtod_l+0x5ac>
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	f04f 0a00 	mov.w	sl, #0
 800deb4:	9b07      	ldr	r3, [sp, #28]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f43f adf2 	beq.w	800daa0 <_strtod_l+0x88>
 800debc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800debe:	4620      	mov	r0, r4
 800dec0:	f001 f880 	bl	800efc4 <_Bfree>
 800dec4:	9905      	ldr	r1, [sp, #20]
 800dec6:	4620      	mov	r0, r4
 800dec8:	f001 f87c 	bl	800efc4 <_Bfree>
 800decc:	4631      	mov	r1, r6
 800dece:	4620      	mov	r0, r4
 800ded0:	f001 f878 	bl	800efc4 <_Bfree>
 800ded4:	9907      	ldr	r1, [sp, #28]
 800ded6:	4620      	mov	r0, r4
 800ded8:	f001 f874 	bl	800efc4 <_Bfree>
 800dedc:	4629      	mov	r1, r5
 800dede:	4620      	mov	r0, r4
 800dee0:	f001 f870 	bl	800efc4 <_Bfree>
 800dee4:	e5dc      	b.n	800daa0 <_strtod_l+0x88>
 800dee6:	4b36      	ldr	r3, [pc, #216]	; (800dfc0 <_strtod_l+0x5a8>)
 800dee8:	9304      	str	r3, [sp, #16]
 800deea:	2300      	movs	r3, #0
 800deec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800def0:	4650      	mov	r0, sl
 800def2:	4659      	mov	r1, fp
 800def4:	4699      	mov	r9, r3
 800def6:	f1b8 0f01 	cmp.w	r8, #1
 800defa:	dc21      	bgt.n	800df40 <_strtod_l+0x528>
 800defc:	b10b      	cbz	r3, 800df02 <_strtod_l+0x4ea>
 800defe:	4682      	mov	sl, r0
 800df00:	468b      	mov	fp, r1
 800df02:	4b2f      	ldr	r3, [pc, #188]	; (800dfc0 <_strtod_l+0x5a8>)
 800df04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800df08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800df0c:	4652      	mov	r2, sl
 800df0e:	465b      	mov	r3, fp
 800df10:	e9d9 0100 	ldrd	r0, r1, [r9]
 800df14:	f7f2 fb88 	bl	8000628 <__aeabi_dmul>
 800df18:	4b2a      	ldr	r3, [pc, #168]	; (800dfc4 <_strtod_l+0x5ac>)
 800df1a:	460a      	mov	r2, r1
 800df1c:	400b      	ands	r3, r1
 800df1e:	492a      	ldr	r1, [pc, #168]	; (800dfc8 <_strtod_l+0x5b0>)
 800df20:	428b      	cmp	r3, r1
 800df22:	4682      	mov	sl, r0
 800df24:	d8bc      	bhi.n	800dea0 <_strtod_l+0x488>
 800df26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800df2a:	428b      	cmp	r3, r1
 800df2c:	bf86      	itte	hi
 800df2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800dfcc <_strtod_l+0x5b4>
 800df32:	f04f 3aff 	movhi.w	sl, #4294967295
 800df36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800df3a:	2300      	movs	r3, #0
 800df3c:	9304      	str	r3, [sp, #16]
 800df3e:	e084      	b.n	800e04a <_strtod_l+0x632>
 800df40:	f018 0f01 	tst.w	r8, #1
 800df44:	d005      	beq.n	800df52 <_strtod_l+0x53a>
 800df46:	9b04      	ldr	r3, [sp, #16]
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f7f2 fb6c 	bl	8000628 <__aeabi_dmul>
 800df50:	2301      	movs	r3, #1
 800df52:	9a04      	ldr	r2, [sp, #16]
 800df54:	3208      	adds	r2, #8
 800df56:	f109 0901 	add.w	r9, r9, #1
 800df5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df5e:	9204      	str	r2, [sp, #16]
 800df60:	e7c9      	b.n	800def6 <_strtod_l+0x4de>
 800df62:	d0ea      	beq.n	800df3a <_strtod_l+0x522>
 800df64:	f1c8 0800 	rsb	r8, r8, #0
 800df68:	f018 020f 	ands.w	r2, r8, #15
 800df6c:	d00a      	beq.n	800df84 <_strtod_l+0x56c>
 800df6e:	4b13      	ldr	r3, [pc, #76]	; (800dfbc <_strtod_l+0x5a4>)
 800df70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df74:	4650      	mov	r0, sl
 800df76:	4659      	mov	r1, fp
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 fc7e 	bl	800087c <__aeabi_ddiv>
 800df80:	4682      	mov	sl, r0
 800df82:	468b      	mov	fp, r1
 800df84:	ea5f 1828 	movs.w	r8, r8, asr #4
 800df88:	d0d7      	beq.n	800df3a <_strtod_l+0x522>
 800df8a:	f1b8 0f1f 	cmp.w	r8, #31
 800df8e:	dd1f      	ble.n	800dfd0 <_strtod_l+0x5b8>
 800df90:	2500      	movs	r5, #0
 800df92:	462e      	mov	r6, r5
 800df94:	9507      	str	r5, [sp, #28]
 800df96:	9505      	str	r5, [sp, #20]
 800df98:	2322      	movs	r3, #34	; 0x22
 800df9a:	f04f 0a00 	mov.w	sl, #0
 800df9e:	f04f 0b00 	mov.w	fp, #0
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	e786      	b.n	800deb4 <_strtod_l+0x49c>
 800dfa6:	bf00      	nop
 800dfa8:	08011325 	.word	0x08011325
 800dfac:	0801133c 	.word	0x0801133c
 800dfb0:	0801131c 	.word	0x0801131c
 800dfb4:	0801131f 	.word	0x0801131f
 800dfb8:	080115fd 	.word	0x080115fd
 800dfbc:	080114a0 	.word	0x080114a0
 800dfc0:	08011478 	.word	0x08011478
 800dfc4:	7ff00000 	.word	0x7ff00000
 800dfc8:	7ca00000 	.word	0x7ca00000
 800dfcc:	7fefffff 	.word	0x7fefffff
 800dfd0:	f018 0310 	ands.w	r3, r8, #16
 800dfd4:	bf18      	it	ne
 800dfd6:	236a      	movne	r3, #106	; 0x6a
 800dfd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e388 <_strtod_l+0x970>
 800dfdc:	9304      	str	r3, [sp, #16]
 800dfde:	4650      	mov	r0, sl
 800dfe0:	4659      	mov	r1, fp
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	f018 0f01 	tst.w	r8, #1
 800dfe8:	d004      	beq.n	800dff4 <_strtod_l+0x5dc>
 800dfea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dfee:	f7f2 fb1b 	bl	8000628 <__aeabi_dmul>
 800dff2:	2301      	movs	r3, #1
 800dff4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dff8:	f109 0908 	add.w	r9, r9, #8
 800dffc:	d1f2      	bne.n	800dfe4 <_strtod_l+0x5cc>
 800dffe:	b10b      	cbz	r3, 800e004 <_strtod_l+0x5ec>
 800e000:	4682      	mov	sl, r0
 800e002:	468b      	mov	fp, r1
 800e004:	9b04      	ldr	r3, [sp, #16]
 800e006:	b1c3      	cbz	r3, 800e03a <_strtod_l+0x622>
 800e008:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e00c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e010:	2b00      	cmp	r3, #0
 800e012:	4659      	mov	r1, fp
 800e014:	dd11      	ble.n	800e03a <_strtod_l+0x622>
 800e016:	2b1f      	cmp	r3, #31
 800e018:	f340 8124 	ble.w	800e264 <_strtod_l+0x84c>
 800e01c:	2b34      	cmp	r3, #52	; 0x34
 800e01e:	bfde      	ittt	le
 800e020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e024:	f04f 33ff 	movle.w	r3, #4294967295
 800e028:	fa03 f202 	lslle.w	r2, r3, r2
 800e02c:	f04f 0a00 	mov.w	sl, #0
 800e030:	bfcc      	ite	gt
 800e032:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e036:	ea02 0b01 	andle.w	fp, r2, r1
 800e03a:	2200      	movs	r2, #0
 800e03c:	2300      	movs	r3, #0
 800e03e:	4650      	mov	r0, sl
 800e040:	4659      	mov	r1, fp
 800e042:	f7f2 fd59 	bl	8000af8 <__aeabi_dcmpeq>
 800e046:	2800      	cmp	r0, #0
 800e048:	d1a2      	bne.n	800df90 <_strtod_l+0x578>
 800e04a:	9b07      	ldr	r3, [sp, #28]
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	9908      	ldr	r1, [sp, #32]
 800e050:	462b      	mov	r3, r5
 800e052:	463a      	mov	r2, r7
 800e054:	4620      	mov	r0, r4
 800e056:	f001 f81d 	bl	800f094 <__s2b>
 800e05a:	9007      	str	r0, [sp, #28]
 800e05c:	2800      	cmp	r0, #0
 800e05e:	f43f af1f 	beq.w	800dea0 <_strtod_l+0x488>
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	1b9e      	subs	r6, r3, r6
 800e066:	9b06      	ldr	r3, [sp, #24]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	bfb4      	ite	lt
 800e06c:	4633      	movlt	r3, r6
 800e06e:	2300      	movge	r3, #0
 800e070:	930c      	str	r3, [sp, #48]	; 0x30
 800e072:	9b06      	ldr	r3, [sp, #24]
 800e074:	2500      	movs	r5, #0
 800e076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e07a:	9312      	str	r3, [sp, #72]	; 0x48
 800e07c:	462e      	mov	r6, r5
 800e07e:	9b07      	ldr	r3, [sp, #28]
 800e080:	4620      	mov	r0, r4
 800e082:	6859      	ldr	r1, [r3, #4]
 800e084:	f000 ff5e 	bl	800ef44 <_Balloc>
 800e088:	9005      	str	r0, [sp, #20]
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f43f af0c 	beq.w	800dea8 <_strtod_l+0x490>
 800e090:	9b07      	ldr	r3, [sp, #28]
 800e092:	691a      	ldr	r2, [r3, #16]
 800e094:	3202      	adds	r2, #2
 800e096:	f103 010c 	add.w	r1, r3, #12
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	300c      	adds	r0, #12
 800e09e:	f7ff fa79 	bl	800d594 <memcpy>
 800e0a2:	ec4b ab10 	vmov	d0, sl, fp
 800e0a6:	aa1a      	add	r2, sp, #104	; 0x68
 800e0a8:	a919      	add	r1, sp, #100	; 0x64
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f001 fb38 	bl	800f720 <__d2b>
 800e0b0:	ec4b ab18 	vmov	d8, sl, fp
 800e0b4:	9018      	str	r0, [sp, #96]	; 0x60
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f43f aef6 	beq.w	800dea8 <_strtod_l+0x490>
 800e0bc:	2101      	movs	r1, #1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f001 f882 	bl	800f1c8 <__i2b>
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f43f aeee 	beq.w	800dea8 <_strtod_l+0x490>
 800e0cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0ce:	9904      	ldr	r1, [sp, #16]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	bfab      	itete	ge
 800e0d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e0d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e0d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e0da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e0de:	bfac      	ite	ge
 800e0e0:	eb03 0902 	addge.w	r9, r3, r2
 800e0e4:	1ad7      	sublt	r7, r2, r3
 800e0e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e0e8:	eba3 0801 	sub.w	r8, r3, r1
 800e0ec:	4490      	add	r8, r2
 800e0ee:	4ba1      	ldr	r3, [pc, #644]	; (800e374 <_strtod_l+0x95c>)
 800e0f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0f4:	4598      	cmp	r8, r3
 800e0f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e0fa:	f280 80c7 	bge.w	800e28c <_strtod_l+0x874>
 800e0fe:	eba3 0308 	sub.w	r3, r3, r8
 800e102:	2b1f      	cmp	r3, #31
 800e104:	eba2 0203 	sub.w	r2, r2, r3
 800e108:	f04f 0101 	mov.w	r1, #1
 800e10c:	f300 80b1 	bgt.w	800e272 <_strtod_l+0x85a>
 800e110:	fa01 f303 	lsl.w	r3, r1, r3
 800e114:	930d      	str	r3, [sp, #52]	; 0x34
 800e116:	2300      	movs	r3, #0
 800e118:	9308      	str	r3, [sp, #32]
 800e11a:	eb09 0802 	add.w	r8, r9, r2
 800e11e:	9b04      	ldr	r3, [sp, #16]
 800e120:	45c1      	cmp	r9, r8
 800e122:	4417      	add	r7, r2
 800e124:	441f      	add	r7, r3
 800e126:	464b      	mov	r3, r9
 800e128:	bfa8      	it	ge
 800e12a:	4643      	movge	r3, r8
 800e12c:	42bb      	cmp	r3, r7
 800e12e:	bfa8      	it	ge
 800e130:	463b      	movge	r3, r7
 800e132:	2b00      	cmp	r3, #0
 800e134:	bfc2      	ittt	gt
 800e136:	eba8 0803 	subgt.w	r8, r8, r3
 800e13a:	1aff      	subgt	r7, r7, r3
 800e13c:	eba9 0903 	subgt.w	r9, r9, r3
 800e140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd17      	ble.n	800e176 <_strtod_l+0x75e>
 800e146:	4631      	mov	r1, r6
 800e148:	461a      	mov	r2, r3
 800e14a:	4620      	mov	r0, r4
 800e14c:	f001 f8fc 	bl	800f348 <__pow5mult>
 800e150:	4606      	mov	r6, r0
 800e152:	2800      	cmp	r0, #0
 800e154:	f43f aea8 	beq.w	800dea8 <_strtod_l+0x490>
 800e158:	4601      	mov	r1, r0
 800e15a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e15c:	4620      	mov	r0, r4
 800e15e:	f001 f849 	bl	800f1f4 <__multiply>
 800e162:	900b      	str	r0, [sp, #44]	; 0x2c
 800e164:	2800      	cmp	r0, #0
 800e166:	f43f ae9f 	beq.w	800dea8 <_strtod_l+0x490>
 800e16a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 ff29 	bl	800efc4 <_Bfree>
 800e172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e174:	9318      	str	r3, [sp, #96]	; 0x60
 800e176:	f1b8 0f00 	cmp.w	r8, #0
 800e17a:	f300 808c 	bgt.w	800e296 <_strtod_l+0x87e>
 800e17e:	9b06      	ldr	r3, [sp, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	dd08      	ble.n	800e196 <_strtod_l+0x77e>
 800e184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e186:	9905      	ldr	r1, [sp, #20]
 800e188:	4620      	mov	r0, r4
 800e18a:	f001 f8dd 	bl	800f348 <__pow5mult>
 800e18e:	9005      	str	r0, [sp, #20]
 800e190:	2800      	cmp	r0, #0
 800e192:	f43f ae89 	beq.w	800dea8 <_strtod_l+0x490>
 800e196:	2f00      	cmp	r7, #0
 800e198:	dd08      	ble.n	800e1ac <_strtod_l+0x794>
 800e19a:	9905      	ldr	r1, [sp, #20]
 800e19c:	463a      	mov	r2, r7
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f001 f92c 	bl	800f3fc <__lshift>
 800e1a4:	9005      	str	r0, [sp, #20]
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	f43f ae7e 	beq.w	800dea8 <_strtod_l+0x490>
 800e1ac:	f1b9 0f00 	cmp.w	r9, #0
 800e1b0:	dd08      	ble.n	800e1c4 <_strtod_l+0x7ac>
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	464a      	mov	r2, r9
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f001 f920 	bl	800f3fc <__lshift>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f ae72 	beq.w	800dea8 <_strtod_l+0x490>
 800e1c4:	9a05      	ldr	r2, [sp, #20]
 800e1c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f001 f9a3 	bl	800f514 <__mdiff>
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f ae69 	beq.w	800dea8 <_strtod_l+0x490>
 800e1d6:	68c3      	ldr	r3, [r0, #12]
 800e1d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60c3      	str	r3, [r0, #12]
 800e1de:	4631      	mov	r1, r6
 800e1e0:	f001 f97c 	bl	800f4dc <__mcmp>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	da60      	bge.n	800e2aa <_strtod_l+0x892>
 800e1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e1ee:	f040 8082 	bne.w	800e2f6 <_strtod_l+0x8de>
 800e1f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d17d      	bne.n	800e2f6 <_strtod_l+0x8de>
 800e1fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e1fe:	0d1b      	lsrs	r3, r3, #20
 800e200:	051b      	lsls	r3, r3, #20
 800e202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e206:	d976      	bls.n	800e2f6 <_strtod_l+0x8de>
 800e208:	696b      	ldr	r3, [r5, #20]
 800e20a:	b913      	cbnz	r3, 800e212 <_strtod_l+0x7fa>
 800e20c:	692b      	ldr	r3, [r5, #16]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	dd71      	ble.n	800e2f6 <_strtod_l+0x8de>
 800e212:	4629      	mov	r1, r5
 800e214:	2201      	movs	r2, #1
 800e216:	4620      	mov	r0, r4
 800e218:	f001 f8f0 	bl	800f3fc <__lshift>
 800e21c:	4631      	mov	r1, r6
 800e21e:	4605      	mov	r5, r0
 800e220:	f001 f95c 	bl	800f4dc <__mcmp>
 800e224:	2800      	cmp	r0, #0
 800e226:	dd66      	ble.n	800e2f6 <_strtod_l+0x8de>
 800e228:	9904      	ldr	r1, [sp, #16]
 800e22a:	4a53      	ldr	r2, [pc, #332]	; (800e378 <_strtod_l+0x960>)
 800e22c:	465b      	mov	r3, fp
 800e22e:	2900      	cmp	r1, #0
 800e230:	f000 8081 	beq.w	800e336 <_strtod_l+0x91e>
 800e234:	ea02 010b 	and.w	r1, r2, fp
 800e238:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e23c:	dc7b      	bgt.n	800e336 <_strtod_l+0x91e>
 800e23e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e242:	f77f aea9 	ble.w	800df98 <_strtod_l+0x580>
 800e246:	4b4d      	ldr	r3, [pc, #308]	; (800e37c <_strtod_l+0x964>)
 800e248:	4650      	mov	r0, sl
 800e24a:	4659      	mov	r1, fp
 800e24c:	2200      	movs	r2, #0
 800e24e:	f7f2 f9eb 	bl	8000628 <__aeabi_dmul>
 800e252:	460b      	mov	r3, r1
 800e254:	4303      	orrs	r3, r0
 800e256:	bf08      	it	eq
 800e258:	2322      	moveq	r3, #34	; 0x22
 800e25a:	4682      	mov	sl, r0
 800e25c:	468b      	mov	fp, r1
 800e25e:	bf08      	it	eq
 800e260:	6023      	streq	r3, [r4, #0]
 800e262:	e62b      	b.n	800debc <_strtod_l+0x4a4>
 800e264:	f04f 32ff 	mov.w	r2, #4294967295
 800e268:	fa02 f303 	lsl.w	r3, r2, r3
 800e26c:	ea03 0a0a 	and.w	sl, r3, sl
 800e270:	e6e3      	b.n	800e03a <_strtod_l+0x622>
 800e272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e27a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e27e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e282:	fa01 f308 	lsl.w	r3, r1, r8
 800e286:	9308      	str	r3, [sp, #32]
 800e288:	910d      	str	r1, [sp, #52]	; 0x34
 800e28a:	e746      	b.n	800e11a <_strtod_l+0x702>
 800e28c:	2300      	movs	r3, #0
 800e28e:	9308      	str	r3, [sp, #32]
 800e290:	2301      	movs	r3, #1
 800e292:	930d      	str	r3, [sp, #52]	; 0x34
 800e294:	e741      	b.n	800e11a <_strtod_l+0x702>
 800e296:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e298:	4642      	mov	r2, r8
 800e29a:	4620      	mov	r0, r4
 800e29c:	f001 f8ae 	bl	800f3fc <__lshift>
 800e2a0:	9018      	str	r0, [sp, #96]	; 0x60
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	f47f af6b 	bne.w	800e17e <_strtod_l+0x766>
 800e2a8:	e5fe      	b.n	800dea8 <_strtod_l+0x490>
 800e2aa:	465f      	mov	r7, fp
 800e2ac:	d16e      	bne.n	800e38c <_strtod_l+0x974>
 800e2ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2b4:	b342      	cbz	r2, 800e308 <_strtod_l+0x8f0>
 800e2b6:	4a32      	ldr	r2, [pc, #200]	; (800e380 <_strtod_l+0x968>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d128      	bne.n	800e30e <_strtod_l+0x8f6>
 800e2bc:	9b04      	ldr	r3, [sp, #16]
 800e2be:	4651      	mov	r1, sl
 800e2c0:	b1eb      	cbz	r3, 800e2fe <_strtod_l+0x8e6>
 800e2c2:	4b2d      	ldr	r3, [pc, #180]	; (800e378 <_strtod_l+0x960>)
 800e2c4:	403b      	ands	r3, r7
 800e2c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ce:	d819      	bhi.n	800e304 <_strtod_l+0x8ec>
 800e2d0:	0d1b      	lsrs	r3, r3, #20
 800e2d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e2da:	4299      	cmp	r1, r3
 800e2dc:	d117      	bne.n	800e30e <_strtod_l+0x8f6>
 800e2de:	4b29      	ldr	r3, [pc, #164]	; (800e384 <_strtod_l+0x96c>)
 800e2e0:	429f      	cmp	r7, r3
 800e2e2:	d102      	bne.n	800e2ea <_strtod_l+0x8d2>
 800e2e4:	3101      	adds	r1, #1
 800e2e6:	f43f addf 	beq.w	800dea8 <_strtod_l+0x490>
 800e2ea:	4b23      	ldr	r3, [pc, #140]	; (800e378 <_strtod_l+0x960>)
 800e2ec:	403b      	ands	r3, r7
 800e2ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e2f2:	f04f 0a00 	mov.w	sl, #0
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1a4      	bne.n	800e246 <_strtod_l+0x82e>
 800e2fc:	e5de      	b.n	800debc <_strtod_l+0x4a4>
 800e2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e302:	e7ea      	b.n	800e2da <_strtod_l+0x8c2>
 800e304:	4613      	mov	r3, r2
 800e306:	e7e8      	b.n	800e2da <_strtod_l+0x8c2>
 800e308:	ea53 030a 	orrs.w	r3, r3, sl
 800e30c:	d08c      	beq.n	800e228 <_strtod_l+0x810>
 800e30e:	9b08      	ldr	r3, [sp, #32]
 800e310:	b1db      	cbz	r3, 800e34a <_strtod_l+0x932>
 800e312:	423b      	tst	r3, r7
 800e314:	d0ef      	beq.n	800e2f6 <_strtod_l+0x8de>
 800e316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e318:	9a04      	ldr	r2, [sp, #16]
 800e31a:	4650      	mov	r0, sl
 800e31c:	4659      	mov	r1, fp
 800e31e:	b1c3      	cbz	r3, 800e352 <_strtod_l+0x93a>
 800e320:	f7ff fb5d 	bl	800d9de <sulp>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	ec51 0b18 	vmov	r0, r1, d8
 800e32c:	f7f1 ffc6 	bl	80002bc <__adddf3>
 800e330:	4682      	mov	sl, r0
 800e332:	468b      	mov	fp, r1
 800e334:	e7df      	b.n	800e2f6 <_strtod_l+0x8de>
 800e336:	4013      	ands	r3, r2
 800e338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e33c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e344:	f04f 3aff 	mov.w	sl, #4294967295
 800e348:	e7d5      	b.n	800e2f6 <_strtod_l+0x8de>
 800e34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e34c:	ea13 0f0a 	tst.w	r3, sl
 800e350:	e7e0      	b.n	800e314 <_strtod_l+0x8fc>
 800e352:	f7ff fb44 	bl	800d9de <sulp>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	ec51 0b18 	vmov	r0, r1, d8
 800e35e:	f7f1 ffab 	bl	80002b8 <__aeabi_dsub>
 800e362:	2200      	movs	r2, #0
 800e364:	2300      	movs	r3, #0
 800e366:	4682      	mov	sl, r0
 800e368:	468b      	mov	fp, r1
 800e36a:	f7f2 fbc5 	bl	8000af8 <__aeabi_dcmpeq>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d0c1      	beq.n	800e2f6 <_strtod_l+0x8de>
 800e372:	e611      	b.n	800df98 <_strtod_l+0x580>
 800e374:	fffffc02 	.word	0xfffffc02
 800e378:	7ff00000 	.word	0x7ff00000
 800e37c:	39500000 	.word	0x39500000
 800e380:	000fffff 	.word	0x000fffff
 800e384:	7fefffff 	.word	0x7fefffff
 800e388:	08011350 	.word	0x08011350
 800e38c:	4631      	mov	r1, r6
 800e38e:	4628      	mov	r0, r5
 800e390:	f001 fa22 	bl	800f7d8 <__ratio>
 800e394:	ec59 8b10 	vmov	r8, r9, d0
 800e398:	ee10 0a10 	vmov	r0, s0
 800e39c:	2200      	movs	r2, #0
 800e39e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	f7f2 fbbc 	bl	8000b20 <__aeabi_dcmple>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d07a      	beq.n	800e4a2 <_strtod_l+0xa8a>
 800e3ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d04a      	beq.n	800e448 <_strtod_l+0xa30>
 800e3b2:	4b95      	ldr	r3, [pc, #596]	; (800e608 <_strtod_l+0xbf0>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e3ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e608 <_strtod_l+0xbf0>
 800e3be:	f04f 0800 	mov.w	r8, #0
 800e3c2:	4b92      	ldr	r3, [pc, #584]	; (800e60c <_strtod_l+0xbf4>)
 800e3c4:	403b      	ands	r3, r7
 800e3c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3ca:	4b91      	ldr	r3, [pc, #580]	; (800e610 <_strtod_l+0xbf8>)
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	f040 80b0 	bne.w	800e532 <_strtod_l+0xb1a>
 800e3d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e3da:	ec4b ab10 	vmov	d0, sl, fp
 800e3de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3e2:	f001 f921 	bl	800f628 <__ulp>
 800e3e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3ea:	ec53 2b10 	vmov	r2, r3, d0
 800e3ee:	f7f2 f91b 	bl	8000628 <__aeabi_dmul>
 800e3f2:	4652      	mov	r2, sl
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	f7f1 ff61 	bl	80002bc <__adddf3>
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4983      	ldr	r1, [pc, #524]	; (800e60c <_strtod_l+0xbf4>)
 800e3fe:	4a85      	ldr	r2, [pc, #532]	; (800e614 <_strtod_l+0xbfc>)
 800e400:	4019      	ands	r1, r3
 800e402:	4291      	cmp	r1, r2
 800e404:	4682      	mov	sl, r0
 800e406:	d960      	bls.n	800e4ca <_strtod_l+0xab2>
 800e408:	ee18 3a90 	vmov	r3, s17
 800e40c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e410:	4293      	cmp	r3, r2
 800e412:	d104      	bne.n	800e41e <_strtod_l+0xa06>
 800e414:	ee18 3a10 	vmov	r3, s16
 800e418:	3301      	adds	r3, #1
 800e41a:	f43f ad45 	beq.w	800dea8 <_strtod_l+0x490>
 800e41e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e620 <_strtod_l+0xc08>
 800e422:	f04f 3aff 	mov.w	sl, #4294967295
 800e426:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 fdcb 	bl	800efc4 <_Bfree>
 800e42e:	9905      	ldr	r1, [sp, #20]
 800e430:	4620      	mov	r0, r4
 800e432:	f000 fdc7 	bl	800efc4 <_Bfree>
 800e436:	4631      	mov	r1, r6
 800e438:	4620      	mov	r0, r4
 800e43a:	f000 fdc3 	bl	800efc4 <_Bfree>
 800e43e:	4629      	mov	r1, r5
 800e440:	4620      	mov	r0, r4
 800e442:	f000 fdbf 	bl	800efc4 <_Bfree>
 800e446:	e61a      	b.n	800e07e <_strtod_l+0x666>
 800e448:	f1ba 0f00 	cmp.w	sl, #0
 800e44c:	d11b      	bne.n	800e486 <_strtod_l+0xa6e>
 800e44e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e452:	b9f3      	cbnz	r3, 800e492 <_strtod_l+0xa7a>
 800e454:	4b6c      	ldr	r3, [pc, #432]	; (800e608 <_strtod_l+0xbf0>)
 800e456:	2200      	movs	r2, #0
 800e458:	4640      	mov	r0, r8
 800e45a:	4649      	mov	r1, r9
 800e45c:	f7f2 fb56 	bl	8000b0c <__aeabi_dcmplt>
 800e460:	b9d0      	cbnz	r0, 800e498 <_strtod_l+0xa80>
 800e462:	4640      	mov	r0, r8
 800e464:	4649      	mov	r1, r9
 800e466:	4b6c      	ldr	r3, [pc, #432]	; (800e618 <_strtod_l+0xc00>)
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f8dd 	bl	8000628 <__aeabi_dmul>
 800e46e:	4680      	mov	r8, r0
 800e470:	4689      	mov	r9, r1
 800e472:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e476:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e47a:	9315      	str	r3, [sp, #84]	; 0x54
 800e47c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e480:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e484:	e79d      	b.n	800e3c2 <_strtod_l+0x9aa>
 800e486:	f1ba 0f01 	cmp.w	sl, #1
 800e48a:	d102      	bne.n	800e492 <_strtod_l+0xa7a>
 800e48c:	2f00      	cmp	r7, #0
 800e48e:	f43f ad83 	beq.w	800df98 <_strtod_l+0x580>
 800e492:	4b62      	ldr	r3, [pc, #392]	; (800e61c <_strtod_l+0xc04>)
 800e494:	2200      	movs	r2, #0
 800e496:	e78e      	b.n	800e3b6 <_strtod_l+0x99e>
 800e498:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e618 <_strtod_l+0xc00>
 800e49c:	f04f 0800 	mov.w	r8, #0
 800e4a0:	e7e7      	b.n	800e472 <_strtod_l+0xa5a>
 800e4a2:	4b5d      	ldr	r3, [pc, #372]	; (800e618 <_strtod_l+0xc00>)
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f7f2 f8bd 	bl	8000628 <__aeabi_dmul>
 800e4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4b0:	4680      	mov	r8, r0
 800e4b2:	4689      	mov	r9, r1
 800e4b4:	b933      	cbnz	r3, 800e4c4 <_strtod_l+0xaac>
 800e4b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4ba:	900e      	str	r0, [sp, #56]	; 0x38
 800e4bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e4c2:	e7dd      	b.n	800e480 <_strtod_l+0xa68>
 800e4c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e4c8:	e7f9      	b.n	800e4be <_strtod_l+0xaa6>
 800e4ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e4ce:	9b04      	ldr	r3, [sp, #16]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1a8      	bne.n	800e426 <_strtod_l+0xa0e>
 800e4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4da:	0d1b      	lsrs	r3, r3, #20
 800e4dc:	051b      	lsls	r3, r3, #20
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d1a1      	bne.n	800e426 <_strtod_l+0xa0e>
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	f7f2 fbff 	bl	8000ce8 <__aeabi_d2lz>
 800e4ea:	f7f2 f86f 	bl	80005cc <__aeabi_l2d>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	f7f1 fedf 	bl	80002b8 <__aeabi_dsub>
 800e4fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e500:	ea43 030a 	orr.w	r3, r3, sl
 800e504:	4313      	orrs	r3, r2
 800e506:	4680      	mov	r8, r0
 800e508:	4689      	mov	r9, r1
 800e50a:	d055      	beq.n	800e5b8 <_strtod_l+0xba0>
 800e50c:	a336      	add	r3, pc, #216	; (adr r3, 800e5e8 <_strtod_l+0xbd0>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	f7f2 fafb 	bl	8000b0c <__aeabi_dcmplt>
 800e516:	2800      	cmp	r0, #0
 800e518:	f47f acd0 	bne.w	800debc <_strtod_l+0x4a4>
 800e51c:	a334      	add	r3, pc, #208	; (adr r3, 800e5f0 <_strtod_l+0xbd8>)
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	4640      	mov	r0, r8
 800e524:	4649      	mov	r1, r9
 800e526:	f7f2 fb0f 	bl	8000b48 <__aeabi_dcmpgt>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	f43f af7b 	beq.w	800e426 <_strtod_l+0xa0e>
 800e530:	e4c4      	b.n	800debc <_strtod_l+0x4a4>
 800e532:	9b04      	ldr	r3, [sp, #16]
 800e534:	b333      	cbz	r3, 800e584 <_strtod_l+0xb6c>
 800e536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e538:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e53c:	d822      	bhi.n	800e584 <_strtod_l+0xb6c>
 800e53e:	a32e      	add	r3, pc, #184	; (adr r3, 800e5f8 <_strtod_l+0xbe0>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	4640      	mov	r0, r8
 800e546:	4649      	mov	r1, r9
 800e548:	f7f2 faea 	bl	8000b20 <__aeabi_dcmple>
 800e54c:	b1a0      	cbz	r0, 800e578 <_strtod_l+0xb60>
 800e54e:	4649      	mov	r1, r9
 800e550:	4640      	mov	r0, r8
 800e552:	f7f2 fb41 	bl	8000bd8 <__aeabi_d2uiz>
 800e556:	2801      	cmp	r0, #1
 800e558:	bf38      	it	cc
 800e55a:	2001      	movcc	r0, #1
 800e55c:	f7f1 ffea 	bl	8000534 <__aeabi_ui2d>
 800e560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e562:	4680      	mov	r8, r0
 800e564:	4689      	mov	r9, r1
 800e566:	bb23      	cbnz	r3, 800e5b2 <_strtod_l+0xb9a>
 800e568:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e56c:	9010      	str	r0, [sp, #64]	; 0x40
 800e56e:	9311      	str	r3, [sp, #68]	; 0x44
 800e570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e574:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e57c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e580:	1a9b      	subs	r3, r3, r2
 800e582:	9309      	str	r3, [sp, #36]	; 0x24
 800e584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e588:	eeb0 0a48 	vmov.f32	s0, s16
 800e58c:	eef0 0a68 	vmov.f32	s1, s17
 800e590:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e594:	f001 f848 	bl	800f628 <__ulp>
 800e598:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e59c:	ec53 2b10 	vmov	r2, r3, d0
 800e5a0:	f7f2 f842 	bl	8000628 <__aeabi_dmul>
 800e5a4:	ec53 2b18 	vmov	r2, r3, d8
 800e5a8:	f7f1 fe88 	bl	80002bc <__adddf3>
 800e5ac:	4682      	mov	sl, r0
 800e5ae:	468b      	mov	fp, r1
 800e5b0:	e78d      	b.n	800e4ce <_strtod_l+0xab6>
 800e5b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e5b6:	e7db      	b.n	800e570 <_strtod_l+0xb58>
 800e5b8:	a311      	add	r3, pc, #68	; (adr r3, 800e600 <_strtod_l+0xbe8>)
 800e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5be:	f7f2 faa5 	bl	8000b0c <__aeabi_dcmplt>
 800e5c2:	e7b2      	b.n	800e52a <_strtod_l+0xb12>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5cc:	6013      	str	r3, [r2, #0]
 800e5ce:	f7ff ba6b 	b.w	800daa8 <_strtod_l+0x90>
 800e5d2:	2a65      	cmp	r2, #101	; 0x65
 800e5d4:	f43f ab5f 	beq.w	800dc96 <_strtod_l+0x27e>
 800e5d8:	2a45      	cmp	r2, #69	; 0x45
 800e5da:	f43f ab5c 	beq.w	800dc96 <_strtod_l+0x27e>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f7ff bb94 	b.w	800dd0c <_strtod_l+0x2f4>
 800e5e4:	f3af 8000 	nop.w
 800e5e8:	94a03595 	.word	0x94a03595
 800e5ec:	3fdfffff 	.word	0x3fdfffff
 800e5f0:	35afe535 	.word	0x35afe535
 800e5f4:	3fe00000 	.word	0x3fe00000
 800e5f8:	ffc00000 	.word	0xffc00000
 800e5fc:	41dfffff 	.word	0x41dfffff
 800e600:	94a03595 	.word	0x94a03595
 800e604:	3fcfffff 	.word	0x3fcfffff
 800e608:	3ff00000 	.word	0x3ff00000
 800e60c:	7ff00000 	.word	0x7ff00000
 800e610:	7fe00000 	.word	0x7fe00000
 800e614:	7c9fffff 	.word	0x7c9fffff
 800e618:	3fe00000 	.word	0x3fe00000
 800e61c:	bff00000 	.word	0xbff00000
 800e620:	7fefffff 	.word	0x7fefffff

0800e624 <strtod>:
 800e624:	460a      	mov	r2, r1
 800e626:	4601      	mov	r1, r0
 800e628:	4802      	ldr	r0, [pc, #8]	; (800e634 <strtod+0x10>)
 800e62a:	4b03      	ldr	r3, [pc, #12]	; (800e638 <strtod+0x14>)
 800e62c:	6800      	ldr	r0, [r0, #0]
 800e62e:	f7ff b9f3 	b.w	800da18 <_strtod_l>
 800e632:	bf00      	nop
 800e634:	20000034 	.word	0x20000034
 800e638:	2000009c 	.word	0x2000009c

0800e63c <_write_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d07      	ldr	r5, [pc, #28]	; (800e65c <_write_r+0x20>)
 800e640:	4604      	mov	r4, r0
 800e642:	4608      	mov	r0, r1
 800e644:	4611      	mov	r1, r2
 800e646:	2200      	movs	r2, #0
 800e648:	602a      	str	r2, [r5, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	f7f6 fc31 	bl	8004eb2 <_write>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	d102      	bne.n	800e65a <_write_r+0x1e>
 800e654:	682b      	ldr	r3, [r5, #0]
 800e656:	b103      	cbz	r3, 800e65a <_write_r+0x1e>
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	20002c24 	.word	0x20002c24

0800e660 <_close_r>:
 800e660:	b538      	push	{r3, r4, r5, lr}
 800e662:	4d06      	ldr	r5, [pc, #24]	; (800e67c <_close_r+0x1c>)
 800e664:	2300      	movs	r3, #0
 800e666:	4604      	mov	r4, r0
 800e668:	4608      	mov	r0, r1
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	f7f6 fc3d 	bl	8004eea <_close>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d102      	bne.n	800e67a <_close_r+0x1a>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	b103      	cbz	r3, 800e67a <_close_r+0x1a>
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	bd38      	pop	{r3, r4, r5, pc}
 800e67c:	20002c24 	.word	0x20002c24

0800e680 <__sflush_r>:
 800e680:	898a      	ldrh	r2, [r1, #12]
 800e682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e686:	4605      	mov	r5, r0
 800e688:	0710      	lsls	r0, r2, #28
 800e68a:	460c      	mov	r4, r1
 800e68c:	d458      	bmi.n	800e740 <__sflush_r+0xc0>
 800e68e:	684b      	ldr	r3, [r1, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	dc05      	bgt.n	800e6a0 <__sflush_r+0x20>
 800e694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e696:	2b00      	cmp	r3, #0
 800e698:	dc02      	bgt.n	800e6a0 <__sflush_r+0x20>
 800e69a:	2000      	movs	r0, #0
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	d0f9      	beq.n	800e69a <__sflush_r+0x1a>
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6ac:	682f      	ldr	r7, [r5, #0]
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	d032      	beq.n	800e718 <__sflush_r+0x98>
 800e6b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6b4:	89a3      	ldrh	r3, [r4, #12]
 800e6b6:	075a      	lsls	r2, r3, #29
 800e6b8:	d505      	bpl.n	800e6c6 <__sflush_r+0x46>
 800e6ba:	6863      	ldr	r3, [r4, #4]
 800e6bc:	1ac0      	subs	r0, r0, r3
 800e6be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6c0:	b10b      	cbz	r3, 800e6c6 <__sflush_r+0x46>
 800e6c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6c4:	1ac0      	subs	r0, r0, r3
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6cc:	6a21      	ldr	r1, [r4, #32]
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b0      	blx	r6
 800e6d2:	1c43      	adds	r3, r0, #1
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	d106      	bne.n	800e6e6 <__sflush_r+0x66>
 800e6d8:	6829      	ldr	r1, [r5, #0]
 800e6da:	291d      	cmp	r1, #29
 800e6dc:	d82c      	bhi.n	800e738 <__sflush_r+0xb8>
 800e6de:	4a2a      	ldr	r2, [pc, #168]	; (800e788 <__sflush_r+0x108>)
 800e6e0:	40ca      	lsrs	r2, r1
 800e6e2:	07d6      	lsls	r6, r2, #31
 800e6e4:	d528      	bpl.n	800e738 <__sflush_r+0xb8>
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	6062      	str	r2, [r4, #4]
 800e6ea:	04d9      	lsls	r1, r3, #19
 800e6ec:	6922      	ldr	r2, [r4, #16]
 800e6ee:	6022      	str	r2, [r4, #0]
 800e6f0:	d504      	bpl.n	800e6fc <__sflush_r+0x7c>
 800e6f2:	1c42      	adds	r2, r0, #1
 800e6f4:	d101      	bne.n	800e6fa <__sflush_r+0x7a>
 800e6f6:	682b      	ldr	r3, [r5, #0]
 800e6f8:	b903      	cbnz	r3, 800e6fc <__sflush_r+0x7c>
 800e6fa:	6560      	str	r0, [r4, #84]	; 0x54
 800e6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6fe:	602f      	str	r7, [r5, #0]
 800e700:	2900      	cmp	r1, #0
 800e702:	d0ca      	beq.n	800e69a <__sflush_r+0x1a>
 800e704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e708:	4299      	cmp	r1, r3
 800e70a:	d002      	beq.n	800e712 <__sflush_r+0x92>
 800e70c:	4628      	mov	r0, r5
 800e70e:	f7fe ff57 	bl	800d5c0 <_free_r>
 800e712:	2000      	movs	r0, #0
 800e714:	6360      	str	r0, [r4, #52]	; 0x34
 800e716:	e7c1      	b.n	800e69c <__sflush_r+0x1c>
 800e718:	6a21      	ldr	r1, [r4, #32]
 800e71a:	2301      	movs	r3, #1
 800e71c:	4628      	mov	r0, r5
 800e71e:	47b0      	blx	r6
 800e720:	1c41      	adds	r1, r0, #1
 800e722:	d1c7      	bne.n	800e6b4 <__sflush_r+0x34>
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d0c4      	beq.n	800e6b4 <__sflush_r+0x34>
 800e72a:	2b1d      	cmp	r3, #29
 800e72c:	d001      	beq.n	800e732 <__sflush_r+0xb2>
 800e72e:	2b16      	cmp	r3, #22
 800e730:	d101      	bne.n	800e736 <__sflush_r+0xb6>
 800e732:	602f      	str	r7, [r5, #0]
 800e734:	e7b1      	b.n	800e69a <__sflush_r+0x1a>
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	e7ad      	b.n	800e69c <__sflush_r+0x1c>
 800e740:	690f      	ldr	r7, [r1, #16]
 800e742:	2f00      	cmp	r7, #0
 800e744:	d0a9      	beq.n	800e69a <__sflush_r+0x1a>
 800e746:	0793      	lsls	r3, r2, #30
 800e748:	680e      	ldr	r6, [r1, #0]
 800e74a:	bf08      	it	eq
 800e74c:	694b      	ldreq	r3, [r1, #20]
 800e74e:	600f      	str	r7, [r1, #0]
 800e750:	bf18      	it	ne
 800e752:	2300      	movne	r3, #0
 800e754:	eba6 0807 	sub.w	r8, r6, r7
 800e758:	608b      	str	r3, [r1, #8]
 800e75a:	f1b8 0f00 	cmp.w	r8, #0
 800e75e:	dd9c      	ble.n	800e69a <__sflush_r+0x1a>
 800e760:	6a21      	ldr	r1, [r4, #32]
 800e762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e764:	4643      	mov	r3, r8
 800e766:	463a      	mov	r2, r7
 800e768:	4628      	mov	r0, r5
 800e76a:	47b0      	blx	r6
 800e76c:	2800      	cmp	r0, #0
 800e76e:	dc06      	bgt.n	800e77e <__sflush_r+0xfe>
 800e770:	89a3      	ldrh	r3, [r4, #12]
 800e772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e776:	81a3      	strh	r3, [r4, #12]
 800e778:	f04f 30ff 	mov.w	r0, #4294967295
 800e77c:	e78e      	b.n	800e69c <__sflush_r+0x1c>
 800e77e:	4407      	add	r7, r0
 800e780:	eba8 0800 	sub.w	r8, r8, r0
 800e784:	e7e9      	b.n	800e75a <__sflush_r+0xda>
 800e786:	bf00      	nop
 800e788:	20400001 	.word	0x20400001

0800e78c <_fflush_r>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	690b      	ldr	r3, [r1, #16]
 800e790:	4605      	mov	r5, r0
 800e792:	460c      	mov	r4, r1
 800e794:	b913      	cbnz	r3, 800e79c <_fflush_r+0x10>
 800e796:	2500      	movs	r5, #0
 800e798:	4628      	mov	r0, r5
 800e79a:	bd38      	pop	{r3, r4, r5, pc}
 800e79c:	b118      	cbz	r0, 800e7a6 <_fflush_r+0x1a>
 800e79e:	6983      	ldr	r3, [r0, #24]
 800e7a0:	b90b      	cbnz	r3, 800e7a6 <_fflush_r+0x1a>
 800e7a2:	f7fe fe11 	bl	800d3c8 <__sinit>
 800e7a6:	4b14      	ldr	r3, [pc, #80]	; (800e7f8 <_fflush_r+0x6c>)
 800e7a8:	429c      	cmp	r4, r3
 800e7aa:	d11b      	bne.n	800e7e4 <_fflush_r+0x58>
 800e7ac:	686c      	ldr	r4, [r5, #4]
 800e7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0ef      	beq.n	800e796 <_fflush_r+0xa>
 800e7b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7b8:	07d0      	lsls	r0, r2, #31
 800e7ba:	d404      	bmi.n	800e7c6 <_fflush_r+0x3a>
 800e7bc:	0599      	lsls	r1, r3, #22
 800e7be:	d402      	bmi.n	800e7c6 <_fflush_r+0x3a>
 800e7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7c2:	f7fe fec4 	bl	800d54e <__retarget_lock_acquire_recursive>
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	f7ff ff59 	bl	800e680 <__sflush_r>
 800e7ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7d0:	07da      	lsls	r2, r3, #31
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	d4e0      	bmi.n	800e798 <_fflush_r+0xc>
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	059b      	lsls	r3, r3, #22
 800e7da:	d4dd      	bmi.n	800e798 <_fflush_r+0xc>
 800e7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7de:	f7fe feb7 	bl	800d550 <__retarget_lock_release_recursive>
 800e7e2:	e7d9      	b.n	800e798 <_fflush_r+0xc>
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <_fflush_r+0x70>)
 800e7e6:	429c      	cmp	r4, r3
 800e7e8:	d101      	bne.n	800e7ee <_fflush_r+0x62>
 800e7ea:	68ac      	ldr	r4, [r5, #8]
 800e7ec:	e7df      	b.n	800e7ae <_fflush_r+0x22>
 800e7ee:	4b04      	ldr	r3, [pc, #16]	; (800e800 <_fflush_r+0x74>)
 800e7f0:	429c      	cmp	r4, r3
 800e7f2:	bf08      	it	eq
 800e7f4:	68ec      	ldreq	r4, [r5, #12]
 800e7f6:	e7da      	b.n	800e7ae <_fflush_r+0x22>
 800e7f8:	080112d8 	.word	0x080112d8
 800e7fc:	080112f8 	.word	0x080112f8
 800e800:	080112b8 	.word	0x080112b8

0800e804 <rshift>:
 800e804:	6903      	ldr	r3, [r0, #16]
 800e806:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e80a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e80e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e812:	f100 0414 	add.w	r4, r0, #20
 800e816:	dd45      	ble.n	800e8a4 <rshift+0xa0>
 800e818:	f011 011f 	ands.w	r1, r1, #31
 800e81c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e824:	d10c      	bne.n	800e840 <rshift+0x3c>
 800e826:	f100 0710 	add.w	r7, r0, #16
 800e82a:	4629      	mov	r1, r5
 800e82c:	42b1      	cmp	r1, r6
 800e82e:	d334      	bcc.n	800e89a <rshift+0x96>
 800e830:	1a9b      	subs	r3, r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	1eea      	subs	r2, r5, #3
 800e836:	4296      	cmp	r6, r2
 800e838:	bf38      	it	cc
 800e83a:	2300      	movcc	r3, #0
 800e83c:	4423      	add	r3, r4
 800e83e:	e015      	b.n	800e86c <rshift+0x68>
 800e840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e844:	f1c1 0820 	rsb	r8, r1, #32
 800e848:	40cf      	lsrs	r7, r1
 800e84a:	f105 0e04 	add.w	lr, r5, #4
 800e84e:	46a1      	mov	r9, r4
 800e850:	4576      	cmp	r6, lr
 800e852:	46f4      	mov	ip, lr
 800e854:	d815      	bhi.n	800e882 <rshift+0x7e>
 800e856:	1a9a      	subs	r2, r3, r2
 800e858:	0092      	lsls	r2, r2, #2
 800e85a:	3a04      	subs	r2, #4
 800e85c:	3501      	adds	r5, #1
 800e85e:	42ae      	cmp	r6, r5
 800e860:	bf38      	it	cc
 800e862:	2200      	movcc	r2, #0
 800e864:	18a3      	adds	r3, r4, r2
 800e866:	50a7      	str	r7, [r4, r2]
 800e868:	b107      	cbz	r7, 800e86c <rshift+0x68>
 800e86a:	3304      	adds	r3, #4
 800e86c:	1b1a      	subs	r2, r3, r4
 800e86e:	42a3      	cmp	r3, r4
 800e870:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e874:	bf08      	it	eq
 800e876:	2300      	moveq	r3, #0
 800e878:	6102      	str	r2, [r0, #16]
 800e87a:	bf08      	it	eq
 800e87c:	6143      	streq	r3, [r0, #20]
 800e87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e882:	f8dc c000 	ldr.w	ip, [ip]
 800e886:	fa0c fc08 	lsl.w	ip, ip, r8
 800e88a:	ea4c 0707 	orr.w	r7, ip, r7
 800e88e:	f849 7b04 	str.w	r7, [r9], #4
 800e892:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e896:	40cf      	lsrs	r7, r1
 800e898:	e7da      	b.n	800e850 <rshift+0x4c>
 800e89a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e89e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8a2:	e7c3      	b.n	800e82c <rshift+0x28>
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	e7e1      	b.n	800e86c <rshift+0x68>

0800e8a8 <__hexdig_fun>:
 800e8a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e8ac:	2b09      	cmp	r3, #9
 800e8ae:	d802      	bhi.n	800e8b6 <__hexdig_fun+0xe>
 800e8b0:	3820      	subs	r0, #32
 800e8b2:	b2c0      	uxtb	r0, r0
 800e8b4:	4770      	bx	lr
 800e8b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e8ba:	2b05      	cmp	r3, #5
 800e8bc:	d801      	bhi.n	800e8c2 <__hexdig_fun+0x1a>
 800e8be:	3847      	subs	r0, #71	; 0x47
 800e8c0:	e7f7      	b.n	800e8b2 <__hexdig_fun+0xa>
 800e8c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e8c6:	2b05      	cmp	r3, #5
 800e8c8:	d801      	bhi.n	800e8ce <__hexdig_fun+0x26>
 800e8ca:	3827      	subs	r0, #39	; 0x27
 800e8cc:	e7f1      	b.n	800e8b2 <__hexdig_fun+0xa>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	4770      	bx	lr
	...

0800e8d4 <__gethex>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	ed2d 8b02 	vpush	{d8}
 800e8dc:	b089      	sub	sp, #36	; 0x24
 800e8de:	ee08 0a10 	vmov	s16, r0
 800e8e2:	9304      	str	r3, [sp, #16]
 800e8e4:	4bb4      	ldr	r3, [pc, #720]	; (800ebb8 <__gethex+0x2e4>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	468b      	mov	fp, r1
 800e8ee:	4690      	mov	r8, r2
 800e8f0:	f7f1 fc80 	bl	80001f4 <strlen>
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	f8db 2000 	ldr.w	r2, [fp]
 800e8fa:	4403      	add	r3, r0
 800e8fc:	4682      	mov	sl, r0
 800e8fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e902:	9305      	str	r3, [sp, #20]
 800e904:	1c93      	adds	r3, r2, #2
 800e906:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e90a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e90e:	32fe      	adds	r2, #254	; 0xfe
 800e910:	18d1      	adds	r1, r2, r3
 800e912:	461f      	mov	r7, r3
 800e914:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e918:	9100      	str	r1, [sp, #0]
 800e91a:	2830      	cmp	r0, #48	; 0x30
 800e91c:	d0f8      	beq.n	800e910 <__gethex+0x3c>
 800e91e:	f7ff ffc3 	bl	800e8a8 <__hexdig_fun>
 800e922:	4604      	mov	r4, r0
 800e924:	2800      	cmp	r0, #0
 800e926:	d13a      	bne.n	800e99e <__gethex+0xca>
 800e928:	9901      	ldr	r1, [sp, #4]
 800e92a:	4652      	mov	r2, sl
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7ff f842 	bl	800d9b6 <strncmp>
 800e932:	4605      	mov	r5, r0
 800e934:	2800      	cmp	r0, #0
 800e936:	d168      	bne.n	800ea0a <__gethex+0x136>
 800e938:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e93c:	eb07 060a 	add.w	r6, r7, sl
 800e940:	f7ff ffb2 	bl	800e8a8 <__hexdig_fun>
 800e944:	2800      	cmp	r0, #0
 800e946:	d062      	beq.n	800ea0e <__gethex+0x13a>
 800e948:	4633      	mov	r3, r6
 800e94a:	7818      	ldrb	r0, [r3, #0]
 800e94c:	2830      	cmp	r0, #48	; 0x30
 800e94e:	461f      	mov	r7, r3
 800e950:	f103 0301 	add.w	r3, r3, #1
 800e954:	d0f9      	beq.n	800e94a <__gethex+0x76>
 800e956:	f7ff ffa7 	bl	800e8a8 <__hexdig_fun>
 800e95a:	2301      	movs	r3, #1
 800e95c:	fab0 f480 	clz	r4, r0
 800e960:	0964      	lsrs	r4, r4, #5
 800e962:	4635      	mov	r5, r6
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	463a      	mov	r2, r7
 800e968:	4616      	mov	r6, r2
 800e96a:	3201      	adds	r2, #1
 800e96c:	7830      	ldrb	r0, [r6, #0]
 800e96e:	f7ff ff9b 	bl	800e8a8 <__hexdig_fun>
 800e972:	2800      	cmp	r0, #0
 800e974:	d1f8      	bne.n	800e968 <__gethex+0x94>
 800e976:	9901      	ldr	r1, [sp, #4]
 800e978:	4652      	mov	r2, sl
 800e97a:	4630      	mov	r0, r6
 800e97c:	f7ff f81b 	bl	800d9b6 <strncmp>
 800e980:	b980      	cbnz	r0, 800e9a4 <__gethex+0xd0>
 800e982:	b94d      	cbnz	r5, 800e998 <__gethex+0xc4>
 800e984:	eb06 050a 	add.w	r5, r6, sl
 800e988:	462a      	mov	r2, r5
 800e98a:	4616      	mov	r6, r2
 800e98c:	3201      	adds	r2, #1
 800e98e:	7830      	ldrb	r0, [r6, #0]
 800e990:	f7ff ff8a 	bl	800e8a8 <__hexdig_fun>
 800e994:	2800      	cmp	r0, #0
 800e996:	d1f8      	bne.n	800e98a <__gethex+0xb6>
 800e998:	1bad      	subs	r5, r5, r6
 800e99a:	00ad      	lsls	r5, r5, #2
 800e99c:	e004      	b.n	800e9a8 <__gethex+0xd4>
 800e99e:	2400      	movs	r4, #0
 800e9a0:	4625      	mov	r5, r4
 800e9a2:	e7e0      	b.n	800e966 <__gethex+0x92>
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	d1f7      	bne.n	800e998 <__gethex+0xc4>
 800e9a8:	7833      	ldrb	r3, [r6, #0]
 800e9aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9ae:	2b50      	cmp	r3, #80	; 0x50
 800e9b0:	d13b      	bne.n	800ea2a <__gethex+0x156>
 800e9b2:	7873      	ldrb	r3, [r6, #1]
 800e9b4:	2b2b      	cmp	r3, #43	; 0x2b
 800e9b6:	d02c      	beq.n	800ea12 <__gethex+0x13e>
 800e9b8:	2b2d      	cmp	r3, #45	; 0x2d
 800e9ba:	d02e      	beq.n	800ea1a <__gethex+0x146>
 800e9bc:	1c71      	adds	r1, r6, #1
 800e9be:	f04f 0900 	mov.w	r9, #0
 800e9c2:	7808      	ldrb	r0, [r1, #0]
 800e9c4:	f7ff ff70 	bl	800e8a8 <__hexdig_fun>
 800e9c8:	1e43      	subs	r3, r0, #1
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b18      	cmp	r3, #24
 800e9ce:	d82c      	bhi.n	800ea2a <__gethex+0x156>
 800e9d0:	f1a0 0210 	sub.w	r2, r0, #16
 800e9d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9d8:	f7ff ff66 	bl	800e8a8 <__hexdig_fun>
 800e9dc:	1e43      	subs	r3, r0, #1
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	2b18      	cmp	r3, #24
 800e9e2:	d91d      	bls.n	800ea20 <__gethex+0x14c>
 800e9e4:	f1b9 0f00 	cmp.w	r9, #0
 800e9e8:	d000      	beq.n	800e9ec <__gethex+0x118>
 800e9ea:	4252      	negs	r2, r2
 800e9ec:	4415      	add	r5, r2
 800e9ee:	f8cb 1000 	str.w	r1, [fp]
 800e9f2:	b1e4      	cbz	r4, 800ea2e <__gethex+0x15a>
 800e9f4:	9b00      	ldr	r3, [sp, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	bf14      	ite	ne
 800e9fa:	2700      	movne	r7, #0
 800e9fc:	2706      	moveq	r7, #6
 800e9fe:	4638      	mov	r0, r7
 800ea00:	b009      	add	sp, #36	; 0x24
 800ea02:	ecbd 8b02 	vpop	{d8}
 800ea06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0a:	463e      	mov	r6, r7
 800ea0c:	4625      	mov	r5, r4
 800ea0e:	2401      	movs	r4, #1
 800ea10:	e7ca      	b.n	800e9a8 <__gethex+0xd4>
 800ea12:	f04f 0900 	mov.w	r9, #0
 800ea16:	1cb1      	adds	r1, r6, #2
 800ea18:	e7d3      	b.n	800e9c2 <__gethex+0xee>
 800ea1a:	f04f 0901 	mov.w	r9, #1
 800ea1e:	e7fa      	b.n	800ea16 <__gethex+0x142>
 800ea20:	230a      	movs	r3, #10
 800ea22:	fb03 0202 	mla	r2, r3, r2, r0
 800ea26:	3a10      	subs	r2, #16
 800ea28:	e7d4      	b.n	800e9d4 <__gethex+0x100>
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	e7df      	b.n	800e9ee <__gethex+0x11a>
 800ea2e:	1bf3      	subs	r3, r6, r7
 800ea30:	3b01      	subs	r3, #1
 800ea32:	4621      	mov	r1, r4
 800ea34:	2b07      	cmp	r3, #7
 800ea36:	dc0b      	bgt.n	800ea50 <__gethex+0x17c>
 800ea38:	ee18 0a10 	vmov	r0, s16
 800ea3c:	f000 fa82 	bl	800ef44 <_Balloc>
 800ea40:	4604      	mov	r4, r0
 800ea42:	b940      	cbnz	r0, 800ea56 <__gethex+0x182>
 800ea44:	4b5d      	ldr	r3, [pc, #372]	; (800ebbc <__gethex+0x2e8>)
 800ea46:	4602      	mov	r2, r0
 800ea48:	21de      	movs	r1, #222	; 0xde
 800ea4a:	485d      	ldr	r0, [pc, #372]	; (800ebc0 <__gethex+0x2ec>)
 800ea4c:	f001 ff28 	bl	80108a0 <__assert_func>
 800ea50:	3101      	adds	r1, #1
 800ea52:	105b      	asrs	r3, r3, #1
 800ea54:	e7ee      	b.n	800ea34 <__gethex+0x160>
 800ea56:	f100 0914 	add.w	r9, r0, #20
 800ea5a:	f04f 0b00 	mov.w	fp, #0
 800ea5e:	f1ca 0301 	rsb	r3, sl, #1
 800ea62:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea66:	f8cd b000 	str.w	fp, [sp]
 800ea6a:	9306      	str	r3, [sp, #24]
 800ea6c:	42b7      	cmp	r7, r6
 800ea6e:	d340      	bcc.n	800eaf2 <__gethex+0x21e>
 800ea70:	9802      	ldr	r0, [sp, #8]
 800ea72:	9b00      	ldr	r3, [sp, #0]
 800ea74:	f840 3b04 	str.w	r3, [r0], #4
 800ea78:	eba0 0009 	sub.w	r0, r0, r9
 800ea7c:	1080      	asrs	r0, r0, #2
 800ea7e:	0146      	lsls	r6, r0, #5
 800ea80:	6120      	str	r0, [r4, #16]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 fb50 	bl	800f128 <__hi0bits>
 800ea88:	1a30      	subs	r0, r6, r0
 800ea8a:	f8d8 6000 	ldr.w	r6, [r8]
 800ea8e:	42b0      	cmp	r0, r6
 800ea90:	dd63      	ble.n	800eb5a <__gethex+0x286>
 800ea92:	1b87      	subs	r7, r0, r6
 800ea94:	4639      	mov	r1, r7
 800ea96:	4620      	mov	r0, r4
 800ea98:	f000 fef4 	bl	800f884 <__any_on>
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	b1a8      	cbz	r0, 800eacc <__gethex+0x1f8>
 800eaa0:	1e7b      	subs	r3, r7, #1
 800eaa2:	1159      	asrs	r1, r3, #5
 800eaa4:	f003 021f 	and.w	r2, r3, #31
 800eaa8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eaac:	f04f 0a01 	mov.w	sl, #1
 800eab0:	fa0a f202 	lsl.w	r2, sl, r2
 800eab4:	420a      	tst	r2, r1
 800eab6:	d009      	beq.n	800eacc <__gethex+0x1f8>
 800eab8:	4553      	cmp	r3, sl
 800eaba:	dd05      	ble.n	800eac8 <__gethex+0x1f4>
 800eabc:	1eb9      	subs	r1, r7, #2
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 fee0 	bl	800f884 <__any_on>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d145      	bne.n	800eb54 <__gethex+0x280>
 800eac8:	f04f 0a02 	mov.w	sl, #2
 800eacc:	4639      	mov	r1, r7
 800eace:	4620      	mov	r0, r4
 800ead0:	f7ff fe98 	bl	800e804 <rshift>
 800ead4:	443d      	add	r5, r7
 800ead6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eada:	42ab      	cmp	r3, r5
 800eadc:	da4c      	bge.n	800eb78 <__gethex+0x2a4>
 800eade:	ee18 0a10 	vmov	r0, s16
 800eae2:	4621      	mov	r1, r4
 800eae4:	f000 fa6e 	bl	800efc4 <_Bfree>
 800eae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaea:	2300      	movs	r3, #0
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	27a3      	movs	r7, #163	; 0xa3
 800eaf0:	e785      	b.n	800e9fe <__gethex+0x12a>
 800eaf2:	1e73      	subs	r3, r6, #1
 800eaf4:	9a05      	ldr	r2, [sp, #20]
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d019      	beq.n	800eb34 <__gethex+0x260>
 800eb00:	f1bb 0f20 	cmp.w	fp, #32
 800eb04:	d107      	bne.n	800eb16 <__gethex+0x242>
 800eb06:	9b02      	ldr	r3, [sp, #8]
 800eb08:	9a00      	ldr	r2, [sp, #0]
 800eb0a:	f843 2b04 	str.w	r2, [r3], #4
 800eb0e:	9302      	str	r3, [sp, #8]
 800eb10:	2300      	movs	r3, #0
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	469b      	mov	fp, r3
 800eb16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb1a:	f7ff fec5 	bl	800e8a8 <__hexdig_fun>
 800eb1e:	9b00      	ldr	r3, [sp, #0]
 800eb20:	f000 000f 	and.w	r0, r0, #15
 800eb24:	fa00 f00b 	lsl.w	r0, r0, fp
 800eb28:	4303      	orrs	r3, r0
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	f10b 0b04 	add.w	fp, fp, #4
 800eb30:	9b03      	ldr	r3, [sp, #12]
 800eb32:	e00d      	b.n	800eb50 <__gethex+0x27c>
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	9a06      	ldr	r2, [sp, #24]
 800eb38:	4413      	add	r3, r2
 800eb3a:	42bb      	cmp	r3, r7
 800eb3c:	d3e0      	bcc.n	800eb00 <__gethex+0x22c>
 800eb3e:	4618      	mov	r0, r3
 800eb40:	9901      	ldr	r1, [sp, #4]
 800eb42:	9307      	str	r3, [sp, #28]
 800eb44:	4652      	mov	r2, sl
 800eb46:	f7fe ff36 	bl	800d9b6 <strncmp>
 800eb4a:	9b07      	ldr	r3, [sp, #28]
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d1d7      	bne.n	800eb00 <__gethex+0x22c>
 800eb50:	461e      	mov	r6, r3
 800eb52:	e78b      	b.n	800ea6c <__gethex+0x198>
 800eb54:	f04f 0a03 	mov.w	sl, #3
 800eb58:	e7b8      	b.n	800eacc <__gethex+0x1f8>
 800eb5a:	da0a      	bge.n	800eb72 <__gethex+0x29e>
 800eb5c:	1a37      	subs	r7, r6, r0
 800eb5e:	4621      	mov	r1, r4
 800eb60:	ee18 0a10 	vmov	r0, s16
 800eb64:	463a      	mov	r2, r7
 800eb66:	f000 fc49 	bl	800f3fc <__lshift>
 800eb6a:	1bed      	subs	r5, r5, r7
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	f100 0914 	add.w	r9, r0, #20
 800eb72:	f04f 0a00 	mov.w	sl, #0
 800eb76:	e7ae      	b.n	800ead6 <__gethex+0x202>
 800eb78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb7c:	42a8      	cmp	r0, r5
 800eb7e:	dd72      	ble.n	800ec66 <__gethex+0x392>
 800eb80:	1b45      	subs	r5, r0, r5
 800eb82:	42ae      	cmp	r6, r5
 800eb84:	dc36      	bgt.n	800ebf4 <__gethex+0x320>
 800eb86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	d02a      	beq.n	800ebe4 <__gethex+0x310>
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d02c      	beq.n	800ebec <__gethex+0x318>
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d11c      	bne.n	800ebd0 <__gethex+0x2fc>
 800eb96:	42ae      	cmp	r6, r5
 800eb98:	d11a      	bne.n	800ebd0 <__gethex+0x2fc>
 800eb9a:	2e01      	cmp	r6, #1
 800eb9c:	d112      	bne.n	800ebc4 <__gethex+0x2f0>
 800eb9e:	9a04      	ldr	r2, [sp, #16]
 800eba0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eba4:	6013      	str	r3, [r2, #0]
 800eba6:	2301      	movs	r3, #1
 800eba8:	6123      	str	r3, [r4, #16]
 800ebaa:	f8c9 3000 	str.w	r3, [r9]
 800ebae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebb0:	2762      	movs	r7, #98	; 0x62
 800ebb2:	601c      	str	r4, [r3, #0]
 800ebb4:	e723      	b.n	800e9fe <__gethex+0x12a>
 800ebb6:	bf00      	nop
 800ebb8:	080113f0 	.word	0x080113f0
 800ebbc:	08011378 	.word	0x08011378
 800ebc0:	08011389 	.word	0x08011389
 800ebc4:	1e71      	subs	r1, r6, #1
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f000 fe5c 	bl	800f884 <__any_on>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d1e6      	bne.n	800eb9e <__gethex+0x2ca>
 800ebd0:	ee18 0a10 	vmov	r0, s16
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	f000 f9f5 	bl	800efc4 <_Bfree>
 800ebda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebdc:	2300      	movs	r3, #0
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	2750      	movs	r7, #80	; 0x50
 800ebe2:	e70c      	b.n	800e9fe <__gethex+0x12a>
 800ebe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1f2      	bne.n	800ebd0 <__gethex+0x2fc>
 800ebea:	e7d8      	b.n	800eb9e <__gethex+0x2ca>
 800ebec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1d5      	bne.n	800eb9e <__gethex+0x2ca>
 800ebf2:	e7ed      	b.n	800ebd0 <__gethex+0x2fc>
 800ebf4:	1e6f      	subs	r7, r5, #1
 800ebf6:	f1ba 0f00 	cmp.w	sl, #0
 800ebfa:	d131      	bne.n	800ec60 <__gethex+0x38c>
 800ebfc:	b127      	cbz	r7, 800ec08 <__gethex+0x334>
 800ebfe:	4639      	mov	r1, r7
 800ec00:	4620      	mov	r0, r4
 800ec02:	f000 fe3f 	bl	800f884 <__any_on>
 800ec06:	4682      	mov	sl, r0
 800ec08:	117b      	asrs	r3, r7, #5
 800ec0a:	2101      	movs	r1, #1
 800ec0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec10:	f007 071f 	and.w	r7, r7, #31
 800ec14:	fa01 f707 	lsl.w	r7, r1, r7
 800ec18:	421f      	tst	r7, r3
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	bf18      	it	ne
 800ec20:	f04a 0a02 	orrne.w	sl, sl, #2
 800ec24:	1b76      	subs	r6, r6, r5
 800ec26:	f7ff fded 	bl	800e804 <rshift>
 800ec2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec2e:	2702      	movs	r7, #2
 800ec30:	f1ba 0f00 	cmp.w	sl, #0
 800ec34:	d048      	beq.n	800ecc8 <__gethex+0x3f4>
 800ec36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d015      	beq.n	800ec6a <__gethex+0x396>
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d017      	beq.n	800ec72 <__gethex+0x39e>
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d109      	bne.n	800ec5a <__gethex+0x386>
 800ec46:	f01a 0f02 	tst.w	sl, #2
 800ec4a:	d006      	beq.n	800ec5a <__gethex+0x386>
 800ec4c:	f8d9 0000 	ldr.w	r0, [r9]
 800ec50:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec54:	f01a 0f01 	tst.w	sl, #1
 800ec58:	d10e      	bne.n	800ec78 <__gethex+0x3a4>
 800ec5a:	f047 0710 	orr.w	r7, r7, #16
 800ec5e:	e033      	b.n	800ecc8 <__gethex+0x3f4>
 800ec60:	f04f 0a01 	mov.w	sl, #1
 800ec64:	e7d0      	b.n	800ec08 <__gethex+0x334>
 800ec66:	2701      	movs	r7, #1
 800ec68:	e7e2      	b.n	800ec30 <__gethex+0x35c>
 800ec6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec6c:	f1c3 0301 	rsb	r3, r3, #1
 800ec70:	9315      	str	r3, [sp, #84]	; 0x54
 800ec72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0f0      	beq.n	800ec5a <__gethex+0x386>
 800ec78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec7c:	f104 0314 	add.w	r3, r4, #20
 800ec80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec88:	f04f 0c00 	mov.w	ip, #0
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec92:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec96:	d01c      	beq.n	800ecd2 <__gethex+0x3fe>
 800ec98:	3201      	adds	r2, #1
 800ec9a:	6002      	str	r2, [r0, #0]
 800ec9c:	2f02      	cmp	r7, #2
 800ec9e:	f104 0314 	add.w	r3, r4, #20
 800eca2:	d13f      	bne.n	800ed24 <__gethex+0x450>
 800eca4:	f8d8 2000 	ldr.w	r2, [r8]
 800eca8:	3a01      	subs	r2, #1
 800ecaa:	42b2      	cmp	r2, r6
 800ecac:	d10a      	bne.n	800ecc4 <__gethex+0x3f0>
 800ecae:	1171      	asrs	r1, r6, #5
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecb6:	f006 061f 	and.w	r6, r6, #31
 800ecba:	fa02 f606 	lsl.w	r6, r2, r6
 800ecbe:	421e      	tst	r6, r3
 800ecc0:	bf18      	it	ne
 800ecc2:	4617      	movne	r7, r2
 800ecc4:	f047 0720 	orr.w	r7, r7, #32
 800ecc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecca:	601c      	str	r4, [r3, #0]
 800eccc:	9b04      	ldr	r3, [sp, #16]
 800ecce:	601d      	str	r5, [r3, #0]
 800ecd0:	e695      	b.n	800e9fe <__gethex+0x12a>
 800ecd2:	4299      	cmp	r1, r3
 800ecd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecd8:	d8d8      	bhi.n	800ec8c <__gethex+0x3b8>
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	459b      	cmp	fp, r3
 800ecde:	db19      	blt.n	800ed14 <__gethex+0x440>
 800ece0:	6861      	ldr	r1, [r4, #4]
 800ece2:	ee18 0a10 	vmov	r0, s16
 800ece6:	3101      	adds	r1, #1
 800ece8:	f000 f92c 	bl	800ef44 <_Balloc>
 800ecec:	4681      	mov	r9, r0
 800ecee:	b918      	cbnz	r0, 800ecf8 <__gethex+0x424>
 800ecf0:	4b1a      	ldr	r3, [pc, #104]	; (800ed5c <__gethex+0x488>)
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	2184      	movs	r1, #132	; 0x84
 800ecf6:	e6a8      	b.n	800ea4a <__gethex+0x176>
 800ecf8:	6922      	ldr	r2, [r4, #16]
 800ecfa:	3202      	adds	r2, #2
 800ecfc:	f104 010c 	add.w	r1, r4, #12
 800ed00:	0092      	lsls	r2, r2, #2
 800ed02:	300c      	adds	r0, #12
 800ed04:	f7fe fc46 	bl	800d594 <memcpy>
 800ed08:	4621      	mov	r1, r4
 800ed0a:	ee18 0a10 	vmov	r0, s16
 800ed0e:	f000 f959 	bl	800efc4 <_Bfree>
 800ed12:	464c      	mov	r4, r9
 800ed14:	6923      	ldr	r3, [r4, #16]
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed1c:	6122      	str	r2, [r4, #16]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	615a      	str	r2, [r3, #20]
 800ed22:	e7bb      	b.n	800ec9c <__gethex+0x3c8>
 800ed24:	6922      	ldr	r2, [r4, #16]
 800ed26:	455a      	cmp	r2, fp
 800ed28:	dd0b      	ble.n	800ed42 <__gethex+0x46e>
 800ed2a:	2101      	movs	r1, #1
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f7ff fd69 	bl	800e804 <rshift>
 800ed32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed36:	3501      	adds	r5, #1
 800ed38:	42ab      	cmp	r3, r5
 800ed3a:	f6ff aed0 	blt.w	800eade <__gethex+0x20a>
 800ed3e:	2701      	movs	r7, #1
 800ed40:	e7c0      	b.n	800ecc4 <__gethex+0x3f0>
 800ed42:	f016 061f 	ands.w	r6, r6, #31
 800ed46:	d0fa      	beq.n	800ed3e <__gethex+0x46a>
 800ed48:	4453      	add	r3, sl
 800ed4a:	f1c6 0620 	rsb	r6, r6, #32
 800ed4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed52:	f000 f9e9 	bl	800f128 <__hi0bits>
 800ed56:	42b0      	cmp	r0, r6
 800ed58:	dbe7      	blt.n	800ed2a <__gethex+0x456>
 800ed5a:	e7f0      	b.n	800ed3e <__gethex+0x46a>
 800ed5c:	08011378 	.word	0x08011378

0800ed60 <L_shift>:
 800ed60:	f1c2 0208 	rsb	r2, r2, #8
 800ed64:	0092      	lsls	r2, r2, #2
 800ed66:	b570      	push	{r4, r5, r6, lr}
 800ed68:	f1c2 0620 	rsb	r6, r2, #32
 800ed6c:	6843      	ldr	r3, [r0, #4]
 800ed6e:	6804      	ldr	r4, [r0, #0]
 800ed70:	fa03 f506 	lsl.w	r5, r3, r6
 800ed74:	432c      	orrs	r4, r5
 800ed76:	40d3      	lsrs	r3, r2
 800ed78:	6004      	str	r4, [r0, #0]
 800ed7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed7e:	4288      	cmp	r0, r1
 800ed80:	d3f4      	bcc.n	800ed6c <L_shift+0xc>
 800ed82:	bd70      	pop	{r4, r5, r6, pc}

0800ed84 <__match>:
 800ed84:	b530      	push	{r4, r5, lr}
 800ed86:	6803      	ldr	r3, [r0, #0]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed8e:	b914      	cbnz	r4, 800ed96 <__match+0x12>
 800ed90:	6003      	str	r3, [r0, #0]
 800ed92:	2001      	movs	r0, #1
 800ed94:	bd30      	pop	{r4, r5, pc}
 800ed96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed9e:	2d19      	cmp	r5, #25
 800eda0:	bf98      	it	ls
 800eda2:	3220      	addls	r2, #32
 800eda4:	42a2      	cmp	r2, r4
 800eda6:	d0f0      	beq.n	800ed8a <__match+0x6>
 800eda8:	2000      	movs	r0, #0
 800edaa:	e7f3      	b.n	800ed94 <__match+0x10>

0800edac <__hexnan>:
 800edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb0:	680b      	ldr	r3, [r1, #0]
 800edb2:	115e      	asrs	r6, r3, #5
 800edb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800edb8:	f013 031f 	ands.w	r3, r3, #31
 800edbc:	b087      	sub	sp, #28
 800edbe:	bf18      	it	ne
 800edc0:	3604      	addne	r6, #4
 800edc2:	2500      	movs	r5, #0
 800edc4:	1f37      	subs	r7, r6, #4
 800edc6:	4690      	mov	r8, r2
 800edc8:	6802      	ldr	r2, [r0, #0]
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	4682      	mov	sl, r0
 800edce:	f846 5c04 	str.w	r5, [r6, #-4]
 800edd2:	46b9      	mov	r9, r7
 800edd4:	463c      	mov	r4, r7
 800edd6:	9502      	str	r5, [sp, #8]
 800edd8:	46ab      	mov	fp, r5
 800edda:	7851      	ldrb	r1, [r2, #1]
 800eddc:	1c53      	adds	r3, r2, #1
 800edde:	9303      	str	r3, [sp, #12]
 800ede0:	b341      	cbz	r1, 800ee34 <__hexnan+0x88>
 800ede2:	4608      	mov	r0, r1
 800ede4:	9205      	str	r2, [sp, #20]
 800ede6:	9104      	str	r1, [sp, #16]
 800ede8:	f7ff fd5e 	bl	800e8a8 <__hexdig_fun>
 800edec:	2800      	cmp	r0, #0
 800edee:	d14f      	bne.n	800ee90 <__hexnan+0xe4>
 800edf0:	9904      	ldr	r1, [sp, #16]
 800edf2:	9a05      	ldr	r2, [sp, #20]
 800edf4:	2920      	cmp	r1, #32
 800edf6:	d818      	bhi.n	800ee2a <__hexnan+0x7e>
 800edf8:	9b02      	ldr	r3, [sp, #8]
 800edfa:	459b      	cmp	fp, r3
 800edfc:	dd13      	ble.n	800ee26 <__hexnan+0x7a>
 800edfe:	454c      	cmp	r4, r9
 800ee00:	d206      	bcs.n	800ee10 <__hexnan+0x64>
 800ee02:	2d07      	cmp	r5, #7
 800ee04:	dc04      	bgt.n	800ee10 <__hexnan+0x64>
 800ee06:	462a      	mov	r2, r5
 800ee08:	4649      	mov	r1, r9
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f7ff ffa8 	bl	800ed60 <L_shift>
 800ee10:	4544      	cmp	r4, r8
 800ee12:	d950      	bls.n	800eeb6 <__hexnan+0x10a>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f1a4 0904 	sub.w	r9, r4, #4
 800ee1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee1e:	f8cd b008 	str.w	fp, [sp, #8]
 800ee22:	464c      	mov	r4, r9
 800ee24:	461d      	mov	r5, r3
 800ee26:	9a03      	ldr	r2, [sp, #12]
 800ee28:	e7d7      	b.n	800edda <__hexnan+0x2e>
 800ee2a:	2929      	cmp	r1, #41	; 0x29
 800ee2c:	d156      	bne.n	800eedc <__hexnan+0x130>
 800ee2e:	3202      	adds	r2, #2
 800ee30:	f8ca 2000 	str.w	r2, [sl]
 800ee34:	f1bb 0f00 	cmp.w	fp, #0
 800ee38:	d050      	beq.n	800eedc <__hexnan+0x130>
 800ee3a:	454c      	cmp	r4, r9
 800ee3c:	d206      	bcs.n	800ee4c <__hexnan+0xa0>
 800ee3e:	2d07      	cmp	r5, #7
 800ee40:	dc04      	bgt.n	800ee4c <__hexnan+0xa0>
 800ee42:	462a      	mov	r2, r5
 800ee44:	4649      	mov	r1, r9
 800ee46:	4620      	mov	r0, r4
 800ee48:	f7ff ff8a 	bl	800ed60 <L_shift>
 800ee4c:	4544      	cmp	r4, r8
 800ee4e:	d934      	bls.n	800eeba <__hexnan+0x10e>
 800ee50:	f1a8 0204 	sub.w	r2, r8, #4
 800ee54:	4623      	mov	r3, r4
 800ee56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee5e:	429f      	cmp	r7, r3
 800ee60:	d2f9      	bcs.n	800ee56 <__hexnan+0xaa>
 800ee62:	1b3b      	subs	r3, r7, r4
 800ee64:	f023 0303 	bic.w	r3, r3, #3
 800ee68:	3304      	adds	r3, #4
 800ee6a:	3401      	adds	r4, #1
 800ee6c:	3e03      	subs	r6, #3
 800ee6e:	42b4      	cmp	r4, r6
 800ee70:	bf88      	it	hi
 800ee72:	2304      	movhi	r3, #4
 800ee74:	4443      	add	r3, r8
 800ee76:	2200      	movs	r2, #0
 800ee78:	f843 2b04 	str.w	r2, [r3], #4
 800ee7c:	429f      	cmp	r7, r3
 800ee7e:	d2fb      	bcs.n	800ee78 <__hexnan+0xcc>
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	b91b      	cbnz	r3, 800ee8c <__hexnan+0xe0>
 800ee84:	4547      	cmp	r7, r8
 800ee86:	d127      	bne.n	800eed8 <__hexnan+0x12c>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	603b      	str	r3, [r7, #0]
 800ee8c:	2005      	movs	r0, #5
 800ee8e:	e026      	b.n	800eede <__hexnan+0x132>
 800ee90:	3501      	adds	r5, #1
 800ee92:	2d08      	cmp	r5, #8
 800ee94:	f10b 0b01 	add.w	fp, fp, #1
 800ee98:	dd06      	ble.n	800eea8 <__hexnan+0xfc>
 800ee9a:	4544      	cmp	r4, r8
 800ee9c:	d9c3      	bls.n	800ee26 <__hexnan+0x7a>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eea4:	2501      	movs	r5, #1
 800eea6:	3c04      	subs	r4, #4
 800eea8:	6822      	ldr	r2, [r4, #0]
 800eeaa:	f000 000f 	and.w	r0, r0, #15
 800eeae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eeb2:	6022      	str	r2, [r4, #0]
 800eeb4:	e7b7      	b.n	800ee26 <__hexnan+0x7a>
 800eeb6:	2508      	movs	r5, #8
 800eeb8:	e7b5      	b.n	800ee26 <__hexnan+0x7a>
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d0df      	beq.n	800ee80 <__hexnan+0xd4>
 800eec0:	f04f 32ff 	mov.w	r2, #4294967295
 800eec4:	f1c3 0320 	rsb	r3, r3, #32
 800eec8:	fa22 f303 	lsr.w	r3, r2, r3
 800eecc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eed0:	401a      	ands	r2, r3
 800eed2:	f846 2c04 	str.w	r2, [r6, #-4]
 800eed6:	e7d3      	b.n	800ee80 <__hexnan+0xd4>
 800eed8:	3f04      	subs	r7, #4
 800eeda:	e7d1      	b.n	800ee80 <__hexnan+0xd4>
 800eedc:	2004      	movs	r0, #4
 800eede:	b007      	add	sp, #28
 800eee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eee4 <_lseek_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d07      	ldr	r5, [pc, #28]	; (800ef04 <_lseek_r+0x20>)
 800eee8:	4604      	mov	r4, r0
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	602a      	str	r2, [r5, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	f7f6 f820 	bl	8004f38 <_lseek>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_lseek_r+0x1e>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_lseek_r+0x1e>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	20002c24 	.word	0x20002c24

0800ef08 <__ascii_mbtowc>:
 800ef08:	b082      	sub	sp, #8
 800ef0a:	b901      	cbnz	r1, 800ef0e <__ascii_mbtowc+0x6>
 800ef0c:	a901      	add	r1, sp, #4
 800ef0e:	b142      	cbz	r2, 800ef22 <__ascii_mbtowc+0x1a>
 800ef10:	b14b      	cbz	r3, 800ef26 <__ascii_mbtowc+0x1e>
 800ef12:	7813      	ldrb	r3, [r2, #0]
 800ef14:	600b      	str	r3, [r1, #0]
 800ef16:	7812      	ldrb	r2, [r2, #0]
 800ef18:	1e10      	subs	r0, r2, #0
 800ef1a:	bf18      	it	ne
 800ef1c:	2001      	movne	r0, #1
 800ef1e:	b002      	add	sp, #8
 800ef20:	4770      	bx	lr
 800ef22:	4610      	mov	r0, r2
 800ef24:	e7fb      	b.n	800ef1e <__ascii_mbtowc+0x16>
 800ef26:	f06f 0001 	mvn.w	r0, #1
 800ef2a:	e7f8      	b.n	800ef1e <__ascii_mbtowc+0x16>

0800ef2c <__malloc_lock>:
 800ef2c:	4801      	ldr	r0, [pc, #4]	; (800ef34 <__malloc_lock+0x8>)
 800ef2e:	f7fe bb0e 	b.w	800d54e <__retarget_lock_acquire_recursive>
 800ef32:	bf00      	nop
 800ef34:	20002c18 	.word	0x20002c18

0800ef38 <__malloc_unlock>:
 800ef38:	4801      	ldr	r0, [pc, #4]	; (800ef40 <__malloc_unlock+0x8>)
 800ef3a:	f7fe bb09 	b.w	800d550 <__retarget_lock_release_recursive>
 800ef3e:	bf00      	nop
 800ef40:	20002c18 	.word	0x20002c18

0800ef44 <_Balloc>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef48:	4604      	mov	r4, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	b976      	cbnz	r6, 800ef6c <_Balloc+0x28>
 800ef4e:	2010      	movs	r0, #16
 800ef50:	f7fe fb00 	bl	800d554 <malloc>
 800ef54:	4602      	mov	r2, r0
 800ef56:	6260      	str	r0, [r4, #36]	; 0x24
 800ef58:	b920      	cbnz	r0, 800ef64 <_Balloc+0x20>
 800ef5a:	4b18      	ldr	r3, [pc, #96]	; (800efbc <_Balloc+0x78>)
 800ef5c:	4818      	ldr	r0, [pc, #96]	; (800efc0 <_Balloc+0x7c>)
 800ef5e:	2166      	movs	r1, #102	; 0x66
 800ef60:	f001 fc9e 	bl	80108a0 <__assert_func>
 800ef64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef68:	6006      	str	r6, [r0, #0]
 800ef6a:	60c6      	str	r6, [r0, #12]
 800ef6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef6e:	68f3      	ldr	r3, [r6, #12]
 800ef70:	b183      	cbz	r3, 800ef94 <_Balloc+0x50>
 800ef72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef7a:	b9b8      	cbnz	r0, 800efac <_Balloc+0x68>
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ef82:	1d72      	adds	r2, r6, #5
 800ef84:	0092      	lsls	r2, r2, #2
 800ef86:	4620      	mov	r0, r4
 800ef88:	f000 fc9d 	bl	800f8c6 <_calloc_r>
 800ef8c:	b160      	cbz	r0, 800efa8 <_Balloc+0x64>
 800ef8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef92:	e00e      	b.n	800efb2 <_Balloc+0x6e>
 800ef94:	2221      	movs	r2, #33	; 0x21
 800ef96:	2104      	movs	r1, #4
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f000 fc94 	bl	800f8c6 <_calloc_r>
 800ef9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa0:	60f0      	str	r0, [r6, #12]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e4      	bne.n	800ef72 <_Balloc+0x2e>
 800efa8:	2000      	movs	r0, #0
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	6802      	ldr	r2, [r0, #0]
 800efae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efb2:	2300      	movs	r3, #0
 800efb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efb8:	e7f7      	b.n	800efaa <_Balloc+0x66>
 800efba:	bf00      	nop
 800efbc:	08011404 	.word	0x08011404
 800efc0:	0801141b 	.word	0x0801141b

0800efc4 <_Bfree>:
 800efc4:	b570      	push	{r4, r5, r6, lr}
 800efc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efc8:	4605      	mov	r5, r0
 800efca:	460c      	mov	r4, r1
 800efcc:	b976      	cbnz	r6, 800efec <_Bfree+0x28>
 800efce:	2010      	movs	r0, #16
 800efd0:	f7fe fac0 	bl	800d554 <malloc>
 800efd4:	4602      	mov	r2, r0
 800efd6:	6268      	str	r0, [r5, #36]	; 0x24
 800efd8:	b920      	cbnz	r0, 800efe4 <_Bfree+0x20>
 800efda:	4b09      	ldr	r3, [pc, #36]	; (800f000 <_Bfree+0x3c>)
 800efdc:	4809      	ldr	r0, [pc, #36]	; (800f004 <_Bfree+0x40>)
 800efde:	218a      	movs	r1, #138	; 0x8a
 800efe0:	f001 fc5e 	bl	80108a0 <__assert_func>
 800efe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efe8:	6006      	str	r6, [r0, #0]
 800efea:	60c6      	str	r6, [r0, #12]
 800efec:	b13c      	cbz	r4, 800effe <_Bfree+0x3a>
 800efee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eff0:	6862      	ldr	r2, [r4, #4]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eff8:	6021      	str	r1, [r4, #0]
 800effa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	08011404 	.word	0x08011404
 800f004:	0801141b 	.word	0x0801141b

0800f008 <__multadd>:
 800f008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f00c:	690d      	ldr	r5, [r1, #16]
 800f00e:	4607      	mov	r7, r0
 800f010:	460c      	mov	r4, r1
 800f012:	461e      	mov	r6, r3
 800f014:	f101 0c14 	add.w	ip, r1, #20
 800f018:	2000      	movs	r0, #0
 800f01a:	f8dc 3000 	ldr.w	r3, [ip]
 800f01e:	b299      	uxth	r1, r3
 800f020:	fb02 6101 	mla	r1, r2, r1, r6
 800f024:	0c1e      	lsrs	r6, r3, #16
 800f026:	0c0b      	lsrs	r3, r1, #16
 800f028:	fb02 3306 	mla	r3, r2, r6, r3
 800f02c:	b289      	uxth	r1, r1
 800f02e:	3001      	adds	r0, #1
 800f030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f034:	4285      	cmp	r5, r0
 800f036:	f84c 1b04 	str.w	r1, [ip], #4
 800f03a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f03e:	dcec      	bgt.n	800f01a <__multadd+0x12>
 800f040:	b30e      	cbz	r6, 800f086 <__multadd+0x7e>
 800f042:	68a3      	ldr	r3, [r4, #8]
 800f044:	42ab      	cmp	r3, r5
 800f046:	dc19      	bgt.n	800f07c <__multadd+0x74>
 800f048:	6861      	ldr	r1, [r4, #4]
 800f04a:	4638      	mov	r0, r7
 800f04c:	3101      	adds	r1, #1
 800f04e:	f7ff ff79 	bl	800ef44 <_Balloc>
 800f052:	4680      	mov	r8, r0
 800f054:	b928      	cbnz	r0, 800f062 <__multadd+0x5a>
 800f056:	4602      	mov	r2, r0
 800f058:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <__multadd+0x84>)
 800f05a:	480d      	ldr	r0, [pc, #52]	; (800f090 <__multadd+0x88>)
 800f05c:	21b5      	movs	r1, #181	; 0xb5
 800f05e:	f001 fc1f 	bl	80108a0 <__assert_func>
 800f062:	6922      	ldr	r2, [r4, #16]
 800f064:	3202      	adds	r2, #2
 800f066:	f104 010c 	add.w	r1, r4, #12
 800f06a:	0092      	lsls	r2, r2, #2
 800f06c:	300c      	adds	r0, #12
 800f06e:	f7fe fa91 	bl	800d594 <memcpy>
 800f072:	4621      	mov	r1, r4
 800f074:	4638      	mov	r0, r7
 800f076:	f7ff ffa5 	bl	800efc4 <_Bfree>
 800f07a:	4644      	mov	r4, r8
 800f07c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f080:	3501      	adds	r5, #1
 800f082:	615e      	str	r6, [r3, #20]
 800f084:	6125      	str	r5, [r4, #16]
 800f086:	4620      	mov	r0, r4
 800f088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08c:	08011378 	.word	0x08011378
 800f090:	0801141b 	.word	0x0801141b

0800f094 <__s2b>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	4615      	mov	r5, r2
 800f09c:	461f      	mov	r7, r3
 800f09e:	2209      	movs	r2, #9
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	db09      	blt.n	800f0c4 <__s2b+0x30>
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7ff ff47 	bl	800ef44 <_Balloc>
 800f0b6:	b940      	cbnz	r0, 800f0ca <__s2b+0x36>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	4b19      	ldr	r3, [pc, #100]	; (800f120 <__s2b+0x8c>)
 800f0bc:	4819      	ldr	r0, [pc, #100]	; (800f124 <__s2b+0x90>)
 800f0be:	21ce      	movs	r1, #206	; 0xce
 800f0c0:	f001 fbee 	bl	80108a0 <__assert_func>
 800f0c4:	0052      	lsls	r2, r2, #1
 800f0c6:	3101      	adds	r1, #1
 800f0c8:	e7f0      	b.n	800f0ac <__s2b+0x18>
 800f0ca:	9b08      	ldr	r3, [sp, #32]
 800f0cc:	6143      	str	r3, [r0, #20]
 800f0ce:	2d09      	cmp	r5, #9
 800f0d0:	f04f 0301 	mov.w	r3, #1
 800f0d4:	6103      	str	r3, [r0, #16]
 800f0d6:	dd16      	ble.n	800f106 <__s2b+0x72>
 800f0d8:	f104 0909 	add.w	r9, r4, #9
 800f0dc:	46c8      	mov	r8, r9
 800f0de:	442c      	add	r4, r5
 800f0e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	3b30      	subs	r3, #48	; 0x30
 800f0e8:	220a      	movs	r2, #10
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f7ff ff8c 	bl	800f008 <__multadd>
 800f0f0:	45a0      	cmp	r8, r4
 800f0f2:	d1f5      	bne.n	800f0e0 <__s2b+0x4c>
 800f0f4:	f1a5 0408 	sub.w	r4, r5, #8
 800f0f8:	444c      	add	r4, r9
 800f0fa:	1b2d      	subs	r5, r5, r4
 800f0fc:	1963      	adds	r3, r4, r5
 800f0fe:	42bb      	cmp	r3, r7
 800f100:	db04      	blt.n	800f10c <__s2b+0x78>
 800f102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f106:	340a      	adds	r4, #10
 800f108:	2509      	movs	r5, #9
 800f10a:	e7f6      	b.n	800f0fa <__s2b+0x66>
 800f10c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f110:	4601      	mov	r1, r0
 800f112:	3b30      	subs	r3, #48	; 0x30
 800f114:	220a      	movs	r2, #10
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff ff76 	bl	800f008 <__multadd>
 800f11c:	e7ee      	b.n	800f0fc <__s2b+0x68>
 800f11e:	bf00      	nop
 800f120:	08011378 	.word	0x08011378
 800f124:	0801141b 	.word	0x0801141b

0800f128 <__hi0bits>:
 800f128:	0c03      	lsrs	r3, r0, #16
 800f12a:	041b      	lsls	r3, r3, #16
 800f12c:	b9d3      	cbnz	r3, 800f164 <__hi0bits+0x3c>
 800f12e:	0400      	lsls	r0, r0, #16
 800f130:	2310      	movs	r3, #16
 800f132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f136:	bf04      	itt	eq
 800f138:	0200      	lsleq	r0, r0, #8
 800f13a:	3308      	addeq	r3, #8
 800f13c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f140:	bf04      	itt	eq
 800f142:	0100      	lsleq	r0, r0, #4
 800f144:	3304      	addeq	r3, #4
 800f146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f14a:	bf04      	itt	eq
 800f14c:	0080      	lsleq	r0, r0, #2
 800f14e:	3302      	addeq	r3, #2
 800f150:	2800      	cmp	r0, #0
 800f152:	db05      	blt.n	800f160 <__hi0bits+0x38>
 800f154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f158:	f103 0301 	add.w	r3, r3, #1
 800f15c:	bf08      	it	eq
 800f15e:	2320      	moveq	r3, #32
 800f160:	4618      	mov	r0, r3
 800f162:	4770      	bx	lr
 800f164:	2300      	movs	r3, #0
 800f166:	e7e4      	b.n	800f132 <__hi0bits+0xa>

0800f168 <__lo0bits>:
 800f168:	6803      	ldr	r3, [r0, #0]
 800f16a:	f013 0207 	ands.w	r2, r3, #7
 800f16e:	4601      	mov	r1, r0
 800f170:	d00b      	beq.n	800f18a <__lo0bits+0x22>
 800f172:	07da      	lsls	r2, r3, #31
 800f174:	d423      	bmi.n	800f1be <__lo0bits+0x56>
 800f176:	0798      	lsls	r0, r3, #30
 800f178:	bf49      	itett	mi
 800f17a:	085b      	lsrmi	r3, r3, #1
 800f17c:	089b      	lsrpl	r3, r3, #2
 800f17e:	2001      	movmi	r0, #1
 800f180:	600b      	strmi	r3, [r1, #0]
 800f182:	bf5c      	itt	pl
 800f184:	600b      	strpl	r3, [r1, #0]
 800f186:	2002      	movpl	r0, #2
 800f188:	4770      	bx	lr
 800f18a:	b298      	uxth	r0, r3
 800f18c:	b9a8      	cbnz	r0, 800f1ba <__lo0bits+0x52>
 800f18e:	0c1b      	lsrs	r3, r3, #16
 800f190:	2010      	movs	r0, #16
 800f192:	b2da      	uxtb	r2, r3
 800f194:	b90a      	cbnz	r2, 800f19a <__lo0bits+0x32>
 800f196:	3008      	adds	r0, #8
 800f198:	0a1b      	lsrs	r3, r3, #8
 800f19a:	071a      	lsls	r2, r3, #28
 800f19c:	bf04      	itt	eq
 800f19e:	091b      	lsreq	r3, r3, #4
 800f1a0:	3004      	addeq	r0, #4
 800f1a2:	079a      	lsls	r2, r3, #30
 800f1a4:	bf04      	itt	eq
 800f1a6:	089b      	lsreq	r3, r3, #2
 800f1a8:	3002      	addeq	r0, #2
 800f1aa:	07da      	lsls	r2, r3, #31
 800f1ac:	d403      	bmi.n	800f1b6 <__lo0bits+0x4e>
 800f1ae:	085b      	lsrs	r3, r3, #1
 800f1b0:	f100 0001 	add.w	r0, r0, #1
 800f1b4:	d005      	beq.n	800f1c2 <__lo0bits+0x5a>
 800f1b6:	600b      	str	r3, [r1, #0]
 800f1b8:	4770      	bx	lr
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	e7e9      	b.n	800f192 <__lo0bits+0x2a>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	4770      	bx	lr
 800f1c2:	2020      	movs	r0, #32
 800f1c4:	4770      	bx	lr
	...

0800f1c8 <__i2b>:
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	2101      	movs	r1, #1
 800f1ce:	f7ff feb9 	bl	800ef44 <_Balloc>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	b928      	cbnz	r0, 800f1e2 <__i2b+0x1a>
 800f1d6:	4b05      	ldr	r3, [pc, #20]	; (800f1ec <__i2b+0x24>)
 800f1d8:	4805      	ldr	r0, [pc, #20]	; (800f1f0 <__i2b+0x28>)
 800f1da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f1de:	f001 fb5f 	bl	80108a0 <__assert_func>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	6144      	str	r4, [r0, #20]
 800f1e6:	6103      	str	r3, [r0, #16]
 800f1e8:	bd10      	pop	{r4, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08011378 	.word	0x08011378
 800f1f0:	0801141b 	.word	0x0801141b

0800f1f4 <__multiply>:
 800f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	4691      	mov	r9, r2
 800f1fa:	690a      	ldr	r2, [r1, #16]
 800f1fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f200:	429a      	cmp	r2, r3
 800f202:	bfb8      	it	lt
 800f204:	460b      	movlt	r3, r1
 800f206:	460c      	mov	r4, r1
 800f208:	bfbc      	itt	lt
 800f20a:	464c      	movlt	r4, r9
 800f20c:	4699      	movlt	r9, r3
 800f20e:	6927      	ldr	r7, [r4, #16]
 800f210:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f214:	68a3      	ldr	r3, [r4, #8]
 800f216:	6861      	ldr	r1, [r4, #4]
 800f218:	eb07 060a 	add.w	r6, r7, sl
 800f21c:	42b3      	cmp	r3, r6
 800f21e:	b085      	sub	sp, #20
 800f220:	bfb8      	it	lt
 800f222:	3101      	addlt	r1, #1
 800f224:	f7ff fe8e 	bl	800ef44 <_Balloc>
 800f228:	b930      	cbnz	r0, 800f238 <__multiply+0x44>
 800f22a:	4602      	mov	r2, r0
 800f22c:	4b44      	ldr	r3, [pc, #272]	; (800f340 <__multiply+0x14c>)
 800f22e:	4845      	ldr	r0, [pc, #276]	; (800f344 <__multiply+0x150>)
 800f230:	f240 115d 	movw	r1, #349	; 0x15d
 800f234:	f001 fb34 	bl	80108a0 <__assert_func>
 800f238:	f100 0514 	add.w	r5, r0, #20
 800f23c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f240:	462b      	mov	r3, r5
 800f242:	2200      	movs	r2, #0
 800f244:	4543      	cmp	r3, r8
 800f246:	d321      	bcc.n	800f28c <__multiply+0x98>
 800f248:	f104 0314 	add.w	r3, r4, #20
 800f24c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f250:	f109 0314 	add.w	r3, r9, #20
 800f254:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f258:	9202      	str	r2, [sp, #8]
 800f25a:	1b3a      	subs	r2, r7, r4
 800f25c:	3a15      	subs	r2, #21
 800f25e:	f022 0203 	bic.w	r2, r2, #3
 800f262:	3204      	adds	r2, #4
 800f264:	f104 0115 	add.w	r1, r4, #21
 800f268:	428f      	cmp	r7, r1
 800f26a:	bf38      	it	cc
 800f26c:	2204      	movcc	r2, #4
 800f26e:	9201      	str	r2, [sp, #4]
 800f270:	9a02      	ldr	r2, [sp, #8]
 800f272:	9303      	str	r3, [sp, #12]
 800f274:	429a      	cmp	r2, r3
 800f276:	d80c      	bhi.n	800f292 <__multiply+0x9e>
 800f278:	2e00      	cmp	r6, #0
 800f27a:	dd03      	ble.n	800f284 <__multiply+0x90>
 800f27c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f280:	2b00      	cmp	r3, #0
 800f282:	d05a      	beq.n	800f33a <__multiply+0x146>
 800f284:	6106      	str	r6, [r0, #16]
 800f286:	b005      	add	sp, #20
 800f288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28c:	f843 2b04 	str.w	r2, [r3], #4
 800f290:	e7d8      	b.n	800f244 <__multiply+0x50>
 800f292:	f8b3 a000 	ldrh.w	sl, [r3]
 800f296:	f1ba 0f00 	cmp.w	sl, #0
 800f29a:	d024      	beq.n	800f2e6 <__multiply+0xf2>
 800f29c:	f104 0e14 	add.w	lr, r4, #20
 800f2a0:	46a9      	mov	r9, r5
 800f2a2:	f04f 0c00 	mov.w	ip, #0
 800f2a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f2aa:	f8d9 1000 	ldr.w	r1, [r9]
 800f2ae:	fa1f fb82 	uxth.w	fp, r2
 800f2b2:	b289      	uxth	r1, r1
 800f2b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f2b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f2bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f2c0:	4461      	add	r1, ip
 800f2c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f2ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2ce:	b289      	uxth	r1, r1
 800f2d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f2d4:	4577      	cmp	r7, lr
 800f2d6:	f849 1b04 	str.w	r1, [r9], #4
 800f2da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2de:	d8e2      	bhi.n	800f2a6 <__multiply+0xb2>
 800f2e0:	9a01      	ldr	r2, [sp, #4]
 800f2e2:	f845 c002 	str.w	ip, [r5, r2]
 800f2e6:	9a03      	ldr	r2, [sp, #12]
 800f2e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	f1b9 0f00 	cmp.w	r9, #0
 800f2f2:	d020      	beq.n	800f336 <__multiply+0x142>
 800f2f4:	6829      	ldr	r1, [r5, #0]
 800f2f6:	f104 0c14 	add.w	ip, r4, #20
 800f2fa:	46ae      	mov	lr, r5
 800f2fc:	f04f 0a00 	mov.w	sl, #0
 800f300:	f8bc b000 	ldrh.w	fp, [ip]
 800f304:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f308:	fb09 220b 	mla	r2, r9, fp, r2
 800f30c:	4492      	add	sl, r2
 800f30e:	b289      	uxth	r1, r1
 800f310:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f314:	f84e 1b04 	str.w	r1, [lr], #4
 800f318:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f31c:	f8be 1000 	ldrh.w	r1, [lr]
 800f320:	0c12      	lsrs	r2, r2, #16
 800f322:	fb09 1102 	mla	r1, r9, r2, r1
 800f326:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f32a:	4567      	cmp	r7, ip
 800f32c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f330:	d8e6      	bhi.n	800f300 <__multiply+0x10c>
 800f332:	9a01      	ldr	r2, [sp, #4]
 800f334:	50a9      	str	r1, [r5, r2]
 800f336:	3504      	adds	r5, #4
 800f338:	e79a      	b.n	800f270 <__multiply+0x7c>
 800f33a:	3e01      	subs	r6, #1
 800f33c:	e79c      	b.n	800f278 <__multiply+0x84>
 800f33e:	bf00      	nop
 800f340:	08011378 	.word	0x08011378
 800f344:	0801141b 	.word	0x0801141b

0800f348 <__pow5mult>:
 800f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f34c:	4615      	mov	r5, r2
 800f34e:	f012 0203 	ands.w	r2, r2, #3
 800f352:	4606      	mov	r6, r0
 800f354:	460f      	mov	r7, r1
 800f356:	d007      	beq.n	800f368 <__pow5mult+0x20>
 800f358:	4c25      	ldr	r4, [pc, #148]	; (800f3f0 <__pow5mult+0xa8>)
 800f35a:	3a01      	subs	r2, #1
 800f35c:	2300      	movs	r3, #0
 800f35e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f362:	f7ff fe51 	bl	800f008 <__multadd>
 800f366:	4607      	mov	r7, r0
 800f368:	10ad      	asrs	r5, r5, #2
 800f36a:	d03d      	beq.n	800f3e8 <__pow5mult+0xa0>
 800f36c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f36e:	b97c      	cbnz	r4, 800f390 <__pow5mult+0x48>
 800f370:	2010      	movs	r0, #16
 800f372:	f7fe f8ef 	bl	800d554 <malloc>
 800f376:	4602      	mov	r2, r0
 800f378:	6270      	str	r0, [r6, #36]	; 0x24
 800f37a:	b928      	cbnz	r0, 800f388 <__pow5mult+0x40>
 800f37c:	4b1d      	ldr	r3, [pc, #116]	; (800f3f4 <__pow5mult+0xac>)
 800f37e:	481e      	ldr	r0, [pc, #120]	; (800f3f8 <__pow5mult+0xb0>)
 800f380:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f384:	f001 fa8c 	bl	80108a0 <__assert_func>
 800f388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f38c:	6004      	str	r4, [r0, #0]
 800f38e:	60c4      	str	r4, [r0, #12]
 800f390:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f398:	b94c      	cbnz	r4, 800f3ae <__pow5mult+0x66>
 800f39a:	f240 2171 	movw	r1, #625	; 0x271
 800f39e:	4630      	mov	r0, r6
 800f3a0:	f7ff ff12 	bl	800f1c8 <__i2b>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	6003      	str	r3, [r0, #0]
 800f3ae:	f04f 0900 	mov.w	r9, #0
 800f3b2:	07eb      	lsls	r3, r5, #31
 800f3b4:	d50a      	bpl.n	800f3cc <__pow5mult+0x84>
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7ff ff1a 	bl	800f1f4 <__multiply>
 800f3c0:	4639      	mov	r1, r7
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff fdfd 	bl	800efc4 <_Bfree>
 800f3ca:	4647      	mov	r7, r8
 800f3cc:	106d      	asrs	r5, r5, #1
 800f3ce:	d00b      	beq.n	800f3e8 <__pow5mult+0xa0>
 800f3d0:	6820      	ldr	r0, [r4, #0]
 800f3d2:	b938      	cbnz	r0, 800f3e4 <__pow5mult+0x9c>
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7ff ff0b 	bl	800f1f4 <__multiply>
 800f3de:	6020      	str	r0, [r4, #0]
 800f3e0:	f8c0 9000 	str.w	r9, [r0]
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	e7e4      	b.n	800f3b2 <__pow5mult+0x6a>
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08011568 	.word	0x08011568
 800f3f4:	08011404 	.word	0x08011404
 800f3f8:	0801141b 	.word	0x0801141b

0800f3fc <__lshift>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	460c      	mov	r4, r1
 800f402:	6849      	ldr	r1, [r1, #4]
 800f404:	6923      	ldr	r3, [r4, #16]
 800f406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	4607      	mov	r7, r0
 800f40e:	4691      	mov	r9, r2
 800f410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f414:	f108 0601 	add.w	r6, r8, #1
 800f418:	42b3      	cmp	r3, r6
 800f41a:	db0b      	blt.n	800f434 <__lshift+0x38>
 800f41c:	4638      	mov	r0, r7
 800f41e:	f7ff fd91 	bl	800ef44 <_Balloc>
 800f422:	4605      	mov	r5, r0
 800f424:	b948      	cbnz	r0, 800f43a <__lshift+0x3e>
 800f426:	4602      	mov	r2, r0
 800f428:	4b2a      	ldr	r3, [pc, #168]	; (800f4d4 <__lshift+0xd8>)
 800f42a:	482b      	ldr	r0, [pc, #172]	; (800f4d8 <__lshift+0xdc>)
 800f42c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f430:	f001 fa36 	bl	80108a0 <__assert_func>
 800f434:	3101      	adds	r1, #1
 800f436:	005b      	lsls	r3, r3, #1
 800f438:	e7ee      	b.n	800f418 <__lshift+0x1c>
 800f43a:	2300      	movs	r3, #0
 800f43c:	f100 0114 	add.w	r1, r0, #20
 800f440:	f100 0210 	add.w	r2, r0, #16
 800f444:	4618      	mov	r0, r3
 800f446:	4553      	cmp	r3, sl
 800f448:	db37      	blt.n	800f4ba <__lshift+0xbe>
 800f44a:	6920      	ldr	r0, [r4, #16]
 800f44c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f450:	f104 0314 	add.w	r3, r4, #20
 800f454:	f019 091f 	ands.w	r9, r9, #31
 800f458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f45c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f460:	d02f      	beq.n	800f4c2 <__lshift+0xc6>
 800f462:	f1c9 0e20 	rsb	lr, r9, #32
 800f466:	468a      	mov	sl, r1
 800f468:	f04f 0c00 	mov.w	ip, #0
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	fa02 f209 	lsl.w	r2, r2, r9
 800f472:	ea42 020c 	orr.w	r2, r2, ip
 800f476:	f84a 2b04 	str.w	r2, [sl], #4
 800f47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47e:	4298      	cmp	r0, r3
 800f480:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f484:	d8f2      	bhi.n	800f46c <__lshift+0x70>
 800f486:	1b03      	subs	r3, r0, r4
 800f488:	3b15      	subs	r3, #21
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	3304      	adds	r3, #4
 800f490:	f104 0215 	add.w	r2, r4, #21
 800f494:	4290      	cmp	r0, r2
 800f496:	bf38      	it	cc
 800f498:	2304      	movcc	r3, #4
 800f49a:	f841 c003 	str.w	ip, [r1, r3]
 800f49e:	f1bc 0f00 	cmp.w	ip, #0
 800f4a2:	d001      	beq.n	800f4a8 <__lshift+0xac>
 800f4a4:	f108 0602 	add.w	r6, r8, #2
 800f4a8:	3e01      	subs	r6, #1
 800f4aa:	4638      	mov	r0, r7
 800f4ac:	612e      	str	r6, [r5, #16]
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	f7ff fd88 	bl	800efc4 <_Bfree>
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4be:	3301      	adds	r3, #1
 800f4c0:	e7c1      	b.n	800f446 <__lshift+0x4a>
 800f4c2:	3904      	subs	r1, #4
 800f4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4cc:	4298      	cmp	r0, r3
 800f4ce:	d8f9      	bhi.n	800f4c4 <__lshift+0xc8>
 800f4d0:	e7ea      	b.n	800f4a8 <__lshift+0xac>
 800f4d2:	bf00      	nop
 800f4d4:	08011378 	.word	0x08011378
 800f4d8:	0801141b 	.word	0x0801141b

0800f4dc <__mcmp>:
 800f4dc:	b530      	push	{r4, r5, lr}
 800f4de:	6902      	ldr	r2, [r0, #16]
 800f4e0:	690c      	ldr	r4, [r1, #16]
 800f4e2:	1b12      	subs	r2, r2, r4
 800f4e4:	d10e      	bne.n	800f504 <__mcmp+0x28>
 800f4e6:	f100 0314 	add.w	r3, r0, #20
 800f4ea:	3114      	adds	r1, #20
 800f4ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f4f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f4f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f4f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f4fc:	42a5      	cmp	r5, r4
 800f4fe:	d003      	beq.n	800f508 <__mcmp+0x2c>
 800f500:	d305      	bcc.n	800f50e <__mcmp+0x32>
 800f502:	2201      	movs	r2, #1
 800f504:	4610      	mov	r0, r2
 800f506:	bd30      	pop	{r4, r5, pc}
 800f508:	4283      	cmp	r3, r0
 800f50a:	d3f3      	bcc.n	800f4f4 <__mcmp+0x18>
 800f50c:	e7fa      	b.n	800f504 <__mcmp+0x28>
 800f50e:	f04f 32ff 	mov.w	r2, #4294967295
 800f512:	e7f7      	b.n	800f504 <__mcmp+0x28>

0800f514 <__mdiff>:
 800f514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f518:	460c      	mov	r4, r1
 800f51a:	4606      	mov	r6, r0
 800f51c:	4611      	mov	r1, r2
 800f51e:	4620      	mov	r0, r4
 800f520:	4690      	mov	r8, r2
 800f522:	f7ff ffdb 	bl	800f4dc <__mcmp>
 800f526:	1e05      	subs	r5, r0, #0
 800f528:	d110      	bne.n	800f54c <__mdiff+0x38>
 800f52a:	4629      	mov	r1, r5
 800f52c:	4630      	mov	r0, r6
 800f52e:	f7ff fd09 	bl	800ef44 <_Balloc>
 800f532:	b930      	cbnz	r0, 800f542 <__mdiff+0x2e>
 800f534:	4b3a      	ldr	r3, [pc, #232]	; (800f620 <__mdiff+0x10c>)
 800f536:	4602      	mov	r2, r0
 800f538:	f240 2132 	movw	r1, #562	; 0x232
 800f53c:	4839      	ldr	r0, [pc, #228]	; (800f624 <__mdiff+0x110>)
 800f53e:	f001 f9af 	bl	80108a0 <__assert_func>
 800f542:	2301      	movs	r3, #1
 800f544:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	bfa4      	itt	ge
 800f54e:	4643      	movge	r3, r8
 800f550:	46a0      	movge	r8, r4
 800f552:	4630      	mov	r0, r6
 800f554:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f558:	bfa6      	itte	ge
 800f55a:	461c      	movge	r4, r3
 800f55c:	2500      	movge	r5, #0
 800f55e:	2501      	movlt	r5, #1
 800f560:	f7ff fcf0 	bl	800ef44 <_Balloc>
 800f564:	b920      	cbnz	r0, 800f570 <__mdiff+0x5c>
 800f566:	4b2e      	ldr	r3, [pc, #184]	; (800f620 <__mdiff+0x10c>)
 800f568:	4602      	mov	r2, r0
 800f56a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f56e:	e7e5      	b.n	800f53c <__mdiff+0x28>
 800f570:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f574:	6926      	ldr	r6, [r4, #16]
 800f576:	60c5      	str	r5, [r0, #12]
 800f578:	f104 0914 	add.w	r9, r4, #20
 800f57c:	f108 0514 	add.w	r5, r8, #20
 800f580:	f100 0e14 	add.w	lr, r0, #20
 800f584:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f588:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f58c:	f108 0210 	add.w	r2, r8, #16
 800f590:	46f2      	mov	sl, lr
 800f592:	2100      	movs	r1, #0
 800f594:	f859 3b04 	ldr.w	r3, [r9], #4
 800f598:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f59c:	fa1f f883 	uxth.w	r8, r3
 800f5a0:	fa11 f18b 	uxtah	r1, r1, fp
 800f5a4:	0c1b      	lsrs	r3, r3, #16
 800f5a6:	eba1 0808 	sub.w	r8, r1, r8
 800f5aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f5b2:	fa1f f888 	uxth.w	r8, r8
 800f5b6:	1419      	asrs	r1, r3, #16
 800f5b8:	454e      	cmp	r6, r9
 800f5ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f5be:	f84a 3b04 	str.w	r3, [sl], #4
 800f5c2:	d8e7      	bhi.n	800f594 <__mdiff+0x80>
 800f5c4:	1b33      	subs	r3, r6, r4
 800f5c6:	3b15      	subs	r3, #21
 800f5c8:	f023 0303 	bic.w	r3, r3, #3
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	3415      	adds	r4, #21
 800f5d0:	42a6      	cmp	r6, r4
 800f5d2:	bf38      	it	cc
 800f5d4:	2304      	movcc	r3, #4
 800f5d6:	441d      	add	r5, r3
 800f5d8:	4473      	add	r3, lr
 800f5da:	469e      	mov	lr, r3
 800f5dc:	462e      	mov	r6, r5
 800f5de:	4566      	cmp	r6, ip
 800f5e0:	d30e      	bcc.n	800f600 <__mdiff+0xec>
 800f5e2:	f10c 0203 	add.w	r2, ip, #3
 800f5e6:	1b52      	subs	r2, r2, r5
 800f5e8:	f022 0203 	bic.w	r2, r2, #3
 800f5ec:	3d03      	subs	r5, #3
 800f5ee:	45ac      	cmp	ip, r5
 800f5f0:	bf38      	it	cc
 800f5f2:	2200      	movcc	r2, #0
 800f5f4:	441a      	add	r2, r3
 800f5f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f5fa:	b17b      	cbz	r3, 800f61c <__mdiff+0x108>
 800f5fc:	6107      	str	r7, [r0, #16]
 800f5fe:	e7a3      	b.n	800f548 <__mdiff+0x34>
 800f600:	f856 8b04 	ldr.w	r8, [r6], #4
 800f604:	fa11 f288 	uxtah	r2, r1, r8
 800f608:	1414      	asrs	r4, r2, #16
 800f60a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f60e:	b292      	uxth	r2, r2
 800f610:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f614:	f84e 2b04 	str.w	r2, [lr], #4
 800f618:	1421      	asrs	r1, r4, #16
 800f61a:	e7e0      	b.n	800f5de <__mdiff+0xca>
 800f61c:	3f01      	subs	r7, #1
 800f61e:	e7ea      	b.n	800f5f6 <__mdiff+0xe2>
 800f620:	08011378 	.word	0x08011378
 800f624:	0801141b 	.word	0x0801141b

0800f628 <__ulp>:
 800f628:	b082      	sub	sp, #8
 800f62a:	ed8d 0b00 	vstr	d0, [sp]
 800f62e:	9b01      	ldr	r3, [sp, #4]
 800f630:	4912      	ldr	r1, [pc, #72]	; (800f67c <__ulp+0x54>)
 800f632:	4019      	ands	r1, r3
 800f634:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f638:	2900      	cmp	r1, #0
 800f63a:	dd05      	ble.n	800f648 <__ulp+0x20>
 800f63c:	2200      	movs	r2, #0
 800f63e:	460b      	mov	r3, r1
 800f640:	ec43 2b10 	vmov	d0, r2, r3
 800f644:	b002      	add	sp, #8
 800f646:	4770      	bx	lr
 800f648:	4249      	negs	r1, r1
 800f64a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f64e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f652:	f04f 0200 	mov.w	r2, #0
 800f656:	f04f 0300 	mov.w	r3, #0
 800f65a:	da04      	bge.n	800f666 <__ulp+0x3e>
 800f65c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f660:	fa41 f300 	asr.w	r3, r1, r0
 800f664:	e7ec      	b.n	800f640 <__ulp+0x18>
 800f666:	f1a0 0114 	sub.w	r1, r0, #20
 800f66a:	291e      	cmp	r1, #30
 800f66c:	bfda      	itte	le
 800f66e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f672:	fa20 f101 	lsrle.w	r1, r0, r1
 800f676:	2101      	movgt	r1, #1
 800f678:	460a      	mov	r2, r1
 800f67a:	e7e1      	b.n	800f640 <__ulp+0x18>
 800f67c:	7ff00000 	.word	0x7ff00000

0800f680 <__b2d>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	6905      	ldr	r5, [r0, #16]
 800f684:	f100 0714 	add.w	r7, r0, #20
 800f688:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f68c:	1f2e      	subs	r6, r5, #4
 800f68e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f692:	4620      	mov	r0, r4
 800f694:	f7ff fd48 	bl	800f128 <__hi0bits>
 800f698:	f1c0 0320 	rsb	r3, r0, #32
 800f69c:	280a      	cmp	r0, #10
 800f69e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f71c <__b2d+0x9c>
 800f6a2:	600b      	str	r3, [r1, #0]
 800f6a4:	dc14      	bgt.n	800f6d0 <__b2d+0x50>
 800f6a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f6aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f6ae:	42b7      	cmp	r7, r6
 800f6b0:	ea41 030c 	orr.w	r3, r1, ip
 800f6b4:	bf34      	ite	cc
 800f6b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6ba:	2100      	movcs	r1, #0
 800f6bc:	3015      	adds	r0, #21
 800f6be:	fa04 f000 	lsl.w	r0, r4, r0
 800f6c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800f6c6:	ea40 0201 	orr.w	r2, r0, r1
 800f6ca:	ec43 2b10 	vmov	d0, r2, r3
 800f6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6d0:	42b7      	cmp	r7, r6
 800f6d2:	bf3a      	itte	cc
 800f6d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f6dc:	2100      	movcs	r1, #0
 800f6de:	380b      	subs	r0, #11
 800f6e0:	d017      	beq.n	800f712 <__b2d+0x92>
 800f6e2:	f1c0 0c20 	rsb	ip, r0, #32
 800f6e6:	fa04 f500 	lsl.w	r5, r4, r0
 800f6ea:	42be      	cmp	r6, r7
 800f6ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800f6f0:	ea45 0504 	orr.w	r5, r5, r4
 800f6f4:	bf8c      	ite	hi
 800f6f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f6fa:	2400      	movls	r4, #0
 800f6fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f700:	fa01 f000 	lsl.w	r0, r1, r0
 800f704:	fa24 f40c 	lsr.w	r4, r4, ip
 800f708:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f70c:	ea40 0204 	orr.w	r2, r0, r4
 800f710:	e7db      	b.n	800f6ca <__b2d+0x4a>
 800f712:	ea44 030c 	orr.w	r3, r4, ip
 800f716:	460a      	mov	r2, r1
 800f718:	e7d7      	b.n	800f6ca <__b2d+0x4a>
 800f71a:	bf00      	nop
 800f71c:	3ff00000 	.word	0x3ff00000

0800f720 <__d2b>:
 800f720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f724:	4689      	mov	r9, r1
 800f726:	2101      	movs	r1, #1
 800f728:	ec57 6b10 	vmov	r6, r7, d0
 800f72c:	4690      	mov	r8, r2
 800f72e:	f7ff fc09 	bl	800ef44 <_Balloc>
 800f732:	4604      	mov	r4, r0
 800f734:	b930      	cbnz	r0, 800f744 <__d2b+0x24>
 800f736:	4602      	mov	r2, r0
 800f738:	4b25      	ldr	r3, [pc, #148]	; (800f7d0 <__d2b+0xb0>)
 800f73a:	4826      	ldr	r0, [pc, #152]	; (800f7d4 <__d2b+0xb4>)
 800f73c:	f240 310a 	movw	r1, #778	; 0x30a
 800f740:	f001 f8ae 	bl	80108a0 <__assert_func>
 800f744:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f74c:	bb35      	cbnz	r5, 800f79c <__d2b+0x7c>
 800f74e:	2e00      	cmp	r6, #0
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	d028      	beq.n	800f7a6 <__d2b+0x86>
 800f754:	4668      	mov	r0, sp
 800f756:	9600      	str	r6, [sp, #0]
 800f758:	f7ff fd06 	bl	800f168 <__lo0bits>
 800f75c:	9900      	ldr	r1, [sp, #0]
 800f75e:	b300      	cbz	r0, 800f7a2 <__d2b+0x82>
 800f760:	9a01      	ldr	r2, [sp, #4]
 800f762:	f1c0 0320 	rsb	r3, r0, #32
 800f766:	fa02 f303 	lsl.w	r3, r2, r3
 800f76a:	430b      	orrs	r3, r1
 800f76c:	40c2      	lsrs	r2, r0
 800f76e:	6163      	str	r3, [r4, #20]
 800f770:	9201      	str	r2, [sp, #4]
 800f772:	9b01      	ldr	r3, [sp, #4]
 800f774:	61a3      	str	r3, [r4, #24]
 800f776:	2b00      	cmp	r3, #0
 800f778:	bf14      	ite	ne
 800f77a:	2202      	movne	r2, #2
 800f77c:	2201      	moveq	r2, #1
 800f77e:	6122      	str	r2, [r4, #16]
 800f780:	b1d5      	cbz	r5, 800f7b8 <__d2b+0x98>
 800f782:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f786:	4405      	add	r5, r0
 800f788:	f8c9 5000 	str.w	r5, [r9]
 800f78c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f790:	f8c8 0000 	str.w	r0, [r8]
 800f794:	4620      	mov	r0, r4
 800f796:	b003      	add	sp, #12
 800f798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f79c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7a0:	e7d5      	b.n	800f74e <__d2b+0x2e>
 800f7a2:	6161      	str	r1, [r4, #20]
 800f7a4:	e7e5      	b.n	800f772 <__d2b+0x52>
 800f7a6:	a801      	add	r0, sp, #4
 800f7a8:	f7ff fcde 	bl	800f168 <__lo0bits>
 800f7ac:	9b01      	ldr	r3, [sp, #4]
 800f7ae:	6163      	str	r3, [r4, #20]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	6122      	str	r2, [r4, #16]
 800f7b4:	3020      	adds	r0, #32
 800f7b6:	e7e3      	b.n	800f780 <__d2b+0x60>
 800f7b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7c0:	f8c9 0000 	str.w	r0, [r9]
 800f7c4:	6918      	ldr	r0, [r3, #16]
 800f7c6:	f7ff fcaf 	bl	800f128 <__hi0bits>
 800f7ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7ce:	e7df      	b.n	800f790 <__d2b+0x70>
 800f7d0:	08011378 	.word	0x08011378
 800f7d4:	0801141b 	.word	0x0801141b

0800f7d8 <__ratio>:
 800f7d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	4688      	mov	r8, r1
 800f7de:	4669      	mov	r1, sp
 800f7e0:	4681      	mov	r9, r0
 800f7e2:	f7ff ff4d 	bl	800f680 <__b2d>
 800f7e6:	a901      	add	r1, sp, #4
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	ec55 4b10 	vmov	r4, r5, d0
 800f7ee:	f7ff ff47 	bl	800f680 <__b2d>
 800f7f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f7fa:	eba3 0c02 	sub.w	ip, r3, r2
 800f7fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f802:	1a9b      	subs	r3, r3, r2
 800f804:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f808:	ec51 0b10 	vmov	r0, r1, d0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bfd6      	itet	le
 800f810:	460a      	movle	r2, r1
 800f812:	462a      	movgt	r2, r5
 800f814:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f818:	468b      	mov	fp, r1
 800f81a:	462f      	mov	r7, r5
 800f81c:	bfd4      	ite	le
 800f81e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f822:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f826:	4620      	mov	r0, r4
 800f828:	ee10 2a10 	vmov	r2, s0
 800f82c:	465b      	mov	r3, fp
 800f82e:	4639      	mov	r1, r7
 800f830:	f7f1 f824 	bl	800087c <__aeabi_ddiv>
 800f834:	ec41 0b10 	vmov	d0, r0, r1
 800f838:	b003      	add	sp, #12
 800f83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f83e <__copybits>:
 800f83e:	3901      	subs	r1, #1
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	1149      	asrs	r1, r1, #5
 800f844:	6914      	ldr	r4, [r2, #16]
 800f846:	3101      	adds	r1, #1
 800f848:	f102 0314 	add.w	r3, r2, #20
 800f84c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f850:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f854:	1f05      	subs	r5, r0, #4
 800f856:	42a3      	cmp	r3, r4
 800f858:	d30c      	bcc.n	800f874 <__copybits+0x36>
 800f85a:	1aa3      	subs	r3, r4, r2
 800f85c:	3b11      	subs	r3, #17
 800f85e:	f023 0303 	bic.w	r3, r3, #3
 800f862:	3211      	adds	r2, #17
 800f864:	42a2      	cmp	r2, r4
 800f866:	bf88      	it	hi
 800f868:	2300      	movhi	r3, #0
 800f86a:	4418      	add	r0, r3
 800f86c:	2300      	movs	r3, #0
 800f86e:	4288      	cmp	r0, r1
 800f870:	d305      	bcc.n	800f87e <__copybits+0x40>
 800f872:	bd70      	pop	{r4, r5, r6, pc}
 800f874:	f853 6b04 	ldr.w	r6, [r3], #4
 800f878:	f845 6f04 	str.w	r6, [r5, #4]!
 800f87c:	e7eb      	b.n	800f856 <__copybits+0x18>
 800f87e:	f840 3b04 	str.w	r3, [r0], #4
 800f882:	e7f4      	b.n	800f86e <__copybits+0x30>

0800f884 <__any_on>:
 800f884:	f100 0214 	add.w	r2, r0, #20
 800f888:	6900      	ldr	r0, [r0, #16]
 800f88a:	114b      	asrs	r3, r1, #5
 800f88c:	4298      	cmp	r0, r3
 800f88e:	b510      	push	{r4, lr}
 800f890:	db11      	blt.n	800f8b6 <__any_on+0x32>
 800f892:	dd0a      	ble.n	800f8aa <__any_on+0x26>
 800f894:	f011 011f 	ands.w	r1, r1, #31
 800f898:	d007      	beq.n	800f8aa <__any_on+0x26>
 800f89a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f89e:	fa24 f001 	lsr.w	r0, r4, r1
 800f8a2:	fa00 f101 	lsl.w	r1, r0, r1
 800f8a6:	428c      	cmp	r4, r1
 800f8a8:	d10b      	bne.n	800f8c2 <__any_on+0x3e>
 800f8aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d803      	bhi.n	800f8ba <__any_on+0x36>
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	bd10      	pop	{r4, pc}
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	e7f7      	b.n	800f8aa <__any_on+0x26>
 800f8ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8be:	2900      	cmp	r1, #0
 800f8c0:	d0f5      	beq.n	800f8ae <__any_on+0x2a>
 800f8c2:	2001      	movs	r0, #1
 800f8c4:	e7f6      	b.n	800f8b4 <__any_on+0x30>

0800f8c6 <_calloc_r>:
 800f8c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8c8:	fba1 2402 	umull	r2, r4, r1, r2
 800f8cc:	b94c      	cbnz	r4, 800f8e2 <_calloc_r+0x1c>
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	9201      	str	r2, [sp, #4]
 800f8d2:	f7fd fee1 	bl	800d698 <_malloc_r>
 800f8d6:	9a01      	ldr	r2, [sp, #4]
 800f8d8:	4605      	mov	r5, r0
 800f8da:	b930      	cbnz	r0, 800f8ea <_calloc_r+0x24>
 800f8dc:	4628      	mov	r0, r5
 800f8de:	b003      	add	sp, #12
 800f8e0:	bd30      	pop	{r4, r5, pc}
 800f8e2:	220c      	movs	r2, #12
 800f8e4:	6002      	str	r2, [r0, #0]
 800f8e6:	2500      	movs	r5, #0
 800f8e8:	e7f8      	b.n	800f8dc <_calloc_r+0x16>
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	f7fd fe60 	bl	800d5b0 <memset>
 800f8f0:	e7f4      	b.n	800f8dc <_calloc_r+0x16>

0800f8f2 <_realloc_r>:
 800f8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4614      	mov	r4, r2
 800f8fa:	460e      	mov	r6, r1
 800f8fc:	b921      	cbnz	r1, 800f908 <_realloc_r+0x16>
 800f8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	4611      	mov	r1, r2
 800f904:	f7fd bec8 	b.w	800d698 <_malloc_r>
 800f908:	b92a      	cbnz	r2, 800f916 <_realloc_r+0x24>
 800f90a:	f7fd fe59 	bl	800d5c0 <_free_r>
 800f90e:	4625      	mov	r5, r4
 800f910:	4628      	mov	r0, r5
 800f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f916:	f001 f80d 	bl	8010934 <_malloc_usable_size_r>
 800f91a:	4284      	cmp	r4, r0
 800f91c:	4607      	mov	r7, r0
 800f91e:	d802      	bhi.n	800f926 <_realloc_r+0x34>
 800f920:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f924:	d812      	bhi.n	800f94c <_realloc_r+0x5a>
 800f926:	4621      	mov	r1, r4
 800f928:	4640      	mov	r0, r8
 800f92a:	f7fd feb5 	bl	800d698 <_malloc_r>
 800f92e:	4605      	mov	r5, r0
 800f930:	2800      	cmp	r0, #0
 800f932:	d0ed      	beq.n	800f910 <_realloc_r+0x1e>
 800f934:	42bc      	cmp	r4, r7
 800f936:	4622      	mov	r2, r4
 800f938:	4631      	mov	r1, r6
 800f93a:	bf28      	it	cs
 800f93c:	463a      	movcs	r2, r7
 800f93e:	f7fd fe29 	bl	800d594 <memcpy>
 800f942:	4631      	mov	r1, r6
 800f944:	4640      	mov	r0, r8
 800f946:	f7fd fe3b 	bl	800d5c0 <_free_r>
 800f94a:	e7e1      	b.n	800f910 <_realloc_r+0x1e>
 800f94c:	4635      	mov	r5, r6
 800f94e:	e7df      	b.n	800f910 <_realloc_r+0x1e>

0800f950 <__ssputs_r>:
 800f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f954:	688e      	ldr	r6, [r1, #8]
 800f956:	429e      	cmp	r6, r3
 800f958:	4682      	mov	sl, r0
 800f95a:	460c      	mov	r4, r1
 800f95c:	4690      	mov	r8, r2
 800f95e:	461f      	mov	r7, r3
 800f960:	d838      	bhi.n	800f9d4 <__ssputs_r+0x84>
 800f962:	898a      	ldrh	r2, [r1, #12]
 800f964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f968:	d032      	beq.n	800f9d0 <__ssputs_r+0x80>
 800f96a:	6825      	ldr	r5, [r4, #0]
 800f96c:	6909      	ldr	r1, [r1, #16]
 800f96e:	eba5 0901 	sub.w	r9, r5, r1
 800f972:	6965      	ldr	r5, [r4, #20]
 800f974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f97c:	3301      	adds	r3, #1
 800f97e:	444b      	add	r3, r9
 800f980:	106d      	asrs	r5, r5, #1
 800f982:	429d      	cmp	r5, r3
 800f984:	bf38      	it	cc
 800f986:	461d      	movcc	r5, r3
 800f988:	0553      	lsls	r3, r2, #21
 800f98a:	d531      	bpl.n	800f9f0 <__ssputs_r+0xa0>
 800f98c:	4629      	mov	r1, r5
 800f98e:	f7fd fe83 	bl	800d698 <_malloc_r>
 800f992:	4606      	mov	r6, r0
 800f994:	b950      	cbnz	r0, 800f9ac <__ssputs_r+0x5c>
 800f996:	230c      	movs	r3, #12
 800f998:	f8ca 3000 	str.w	r3, [sl]
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ac:	6921      	ldr	r1, [r4, #16]
 800f9ae:	464a      	mov	r2, r9
 800f9b0:	f7fd fdf0 	bl	800d594 <memcpy>
 800f9b4:	89a3      	ldrh	r3, [r4, #12]
 800f9b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9be:	81a3      	strh	r3, [r4, #12]
 800f9c0:	6126      	str	r6, [r4, #16]
 800f9c2:	6165      	str	r5, [r4, #20]
 800f9c4:	444e      	add	r6, r9
 800f9c6:	eba5 0509 	sub.w	r5, r5, r9
 800f9ca:	6026      	str	r6, [r4, #0]
 800f9cc:	60a5      	str	r5, [r4, #8]
 800f9ce:	463e      	mov	r6, r7
 800f9d0:	42be      	cmp	r6, r7
 800f9d2:	d900      	bls.n	800f9d6 <__ssputs_r+0x86>
 800f9d4:	463e      	mov	r6, r7
 800f9d6:	6820      	ldr	r0, [r4, #0]
 800f9d8:	4632      	mov	r2, r6
 800f9da:	4641      	mov	r1, r8
 800f9dc:	f000 ff90 	bl	8010900 <memmove>
 800f9e0:	68a3      	ldr	r3, [r4, #8]
 800f9e2:	1b9b      	subs	r3, r3, r6
 800f9e4:	60a3      	str	r3, [r4, #8]
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	4433      	add	r3, r6
 800f9ea:	6023      	str	r3, [r4, #0]
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	e7db      	b.n	800f9a8 <__ssputs_r+0x58>
 800f9f0:	462a      	mov	r2, r5
 800f9f2:	f7ff ff7e 	bl	800f8f2 <_realloc_r>
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d1e1      	bne.n	800f9c0 <__ssputs_r+0x70>
 800f9fc:	6921      	ldr	r1, [r4, #16]
 800f9fe:	4650      	mov	r0, sl
 800fa00:	f7fd fdde 	bl	800d5c0 <_free_r>
 800fa04:	e7c7      	b.n	800f996 <__ssputs_r+0x46>
	...

0800fa08 <_svfiprintf_r>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	4698      	mov	r8, r3
 800fa0e:	898b      	ldrh	r3, [r1, #12]
 800fa10:	061b      	lsls	r3, r3, #24
 800fa12:	b09d      	sub	sp, #116	; 0x74
 800fa14:	4607      	mov	r7, r0
 800fa16:	460d      	mov	r5, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	d50e      	bpl.n	800fa3a <_svfiprintf_r+0x32>
 800fa1c:	690b      	ldr	r3, [r1, #16]
 800fa1e:	b963      	cbnz	r3, 800fa3a <_svfiprintf_r+0x32>
 800fa20:	2140      	movs	r1, #64	; 0x40
 800fa22:	f7fd fe39 	bl	800d698 <_malloc_r>
 800fa26:	6028      	str	r0, [r5, #0]
 800fa28:	6128      	str	r0, [r5, #16]
 800fa2a:	b920      	cbnz	r0, 800fa36 <_svfiprintf_r+0x2e>
 800fa2c:	230c      	movs	r3, #12
 800fa2e:	603b      	str	r3, [r7, #0]
 800fa30:	f04f 30ff 	mov.w	r0, #4294967295
 800fa34:	e0d1      	b.n	800fbda <_svfiprintf_r+0x1d2>
 800fa36:	2340      	movs	r3, #64	; 0x40
 800fa38:	616b      	str	r3, [r5, #20]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa3e:	2320      	movs	r3, #32
 800fa40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa48:	2330      	movs	r3, #48	; 0x30
 800fa4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fbf4 <_svfiprintf_r+0x1ec>
 800fa4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa52:	f04f 0901 	mov.w	r9, #1
 800fa56:	4623      	mov	r3, r4
 800fa58:	469a      	mov	sl, r3
 800fa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa5e:	b10a      	cbz	r2, 800fa64 <_svfiprintf_r+0x5c>
 800fa60:	2a25      	cmp	r2, #37	; 0x25
 800fa62:	d1f9      	bne.n	800fa58 <_svfiprintf_r+0x50>
 800fa64:	ebba 0b04 	subs.w	fp, sl, r4
 800fa68:	d00b      	beq.n	800fa82 <_svfiprintf_r+0x7a>
 800fa6a:	465b      	mov	r3, fp
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7ff ff6d 	bl	800f950 <__ssputs_r>
 800fa76:	3001      	adds	r0, #1
 800fa78:	f000 80aa 	beq.w	800fbd0 <_svfiprintf_r+0x1c8>
 800fa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa7e:	445a      	add	r2, fp
 800fa80:	9209      	str	r2, [sp, #36]	; 0x24
 800fa82:	f89a 3000 	ldrb.w	r3, [sl]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80a2 	beq.w	800fbd0 <_svfiprintf_r+0x1c8>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa96:	f10a 0a01 	add.w	sl, sl, #1
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	9307      	str	r3, [sp, #28]
 800fa9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800faa2:	931a      	str	r3, [sp, #104]	; 0x68
 800faa4:	4654      	mov	r4, sl
 800faa6:	2205      	movs	r2, #5
 800faa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faac:	4851      	ldr	r0, [pc, #324]	; (800fbf4 <_svfiprintf_r+0x1ec>)
 800faae:	f7f0 fbaf 	bl	8000210 <memchr>
 800fab2:	9a04      	ldr	r2, [sp, #16]
 800fab4:	b9d8      	cbnz	r0, 800faee <_svfiprintf_r+0xe6>
 800fab6:	06d0      	lsls	r0, r2, #27
 800fab8:	bf44      	itt	mi
 800faba:	2320      	movmi	r3, #32
 800fabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fac0:	0711      	lsls	r1, r2, #28
 800fac2:	bf44      	itt	mi
 800fac4:	232b      	movmi	r3, #43	; 0x2b
 800fac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faca:	f89a 3000 	ldrb.w	r3, [sl]
 800face:	2b2a      	cmp	r3, #42	; 0x2a
 800fad0:	d015      	beq.n	800fafe <_svfiprintf_r+0xf6>
 800fad2:	9a07      	ldr	r2, [sp, #28]
 800fad4:	4654      	mov	r4, sl
 800fad6:	2000      	movs	r0, #0
 800fad8:	f04f 0c0a 	mov.w	ip, #10
 800fadc:	4621      	mov	r1, r4
 800fade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fae2:	3b30      	subs	r3, #48	; 0x30
 800fae4:	2b09      	cmp	r3, #9
 800fae6:	d94e      	bls.n	800fb86 <_svfiprintf_r+0x17e>
 800fae8:	b1b0      	cbz	r0, 800fb18 <_svfiprintf_r+0x110>
 800faea:	9207      	str	r2, [sp, #28]
 800faec:	e014      	b.n	800fb18 <_svfiprintf_r+0x110>
 800faee:	eba0 0308 	sub.w	r3, r0, r8
 800faf2:	fa09 f303 	lsl.w	r3, r9, r3
 800faf6:	4313      	orrs	r3, r2
 800faf8:	9304      	str	r3, [sp, #16]
 800fafa:	46a2      	mov	sl, r4
 800fafc:	e7d2      	b.n	800faa4 <_svfiprintf_r+0x9c>
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	1d19      	adds	r1, r3, #4
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	9103      	str	r1, [sp, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bfbb      	ittet	lt
 800fb0a:	425b      	neglt	r3, r3
 800fb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb10:	9307      	strge	r3, [sp, #28]
 800fb12:	9307      	strlt	r3, [sp, #28]
 800fb14:	bfb8      	it	lt
 800fb16:	9204      	strlt	r2, [sp, #16]
 800fb18:	7823      	ldrb	r3, [r4, #0]
 800fb1a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb1c:	d10c      	bne.n	800fb38 <_svfiprintf_r+0x130>
 800fb1e:	7863      	ldrb	r3, [r4, #1]
 800fb20:	2b2a      	cmp	r3, #42	; 0x2a
 800fb22:	d135      	bne.n	800fb90 <_svfiprintf_r+0x188>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9203      	str	r2, [sp, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bfb8      	it	lt
 800fb30:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb34:	3402      	adds	r4, #2
 800fb36:	9305      	str	r3, [sp, #20]
 800fb38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc04 <_svfiprintf_r+0x1fc>
 800fb3c:	7821      	ldrb	r1, [r4, #0]
 800fb3e:	2203      	movs	r2, #3
 800fb40:	4650      	mov	r0, sl
 800fb42:	f7f0 fb65 	bl	8000210 <memchr>
 800fb46:	b140      	cbz	r0, 800fb5a <_svfiprintf_r+0x152>
 800fb48:	2340      	movs	r3, #64	; 0x40
 800fb4a:	eba0 000a 	sub.w	r0, r0, sl
 800fb4e:	fa03 f000 	lsl.w	r0, r3, r0
 800fb52:	9b04      	ldr	r3, [sp, #16]
 800fb54:	4303      	orrs	r3, r0
 800fb56:	3401      	adds	r4, #1
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb5e:	4826      	ldr	r0, [pc, #152]	; (800fbf8 <_svfiprintf_r+0x1f0>)
 800fb60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb64:	2206      	movs	r2, #6
 800fb66:	f7f0 fb53 	bl	8000210 <memchr>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d038      	beq.n	800fbe0 <_svfiprintf_r+0x1d8>
 800fb6e:	4b23      	ldr	r3, [pc, #140]	; (800fbfc <_svfiprintf_r+0x1f4>)
 800fb70:	bb1b      	cbnz	r3, 800fbba <_svfiprintf_r+0x1b2>
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	3307      	adds	r3, #7
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	3308      	adds	r3, #8
 800fb7c:	9303      	str	r3, [sp, #12]
 800fb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb80:	4433      	add	r3, r6
 800fb82:	9309      	str	r3, [sp, #36]	; 0x24
 800fb84:	e767      	b.n	800fa56 <_svfiprintf_r+0x4e>
 800fb86:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	2001      	movs	r0, #1
 800fb8e:	e7a5      	b.n	800fadc <_svfiprintf_r+0xd4>
 800fb90:	2300      	movs	r3, #0
 800fb92:	3401      	adds	r4, #1
 800fb94:	9305      	str	r3, [sp, #20]
 800fb96:	4619      	mov	r1, r3
 800fb98:	f04f 0c0a 	mov.w	ip, #10
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fba2:	3a30      	subs	r2, #48	; 0x30
 800fba4:	2a09      	cmp	r2, #9
 800fba6:	d903      	bls.n	800fbb0 <_svfiprintf_r+0x1a8>
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d0c5      	beq.n	800fb38 <_svfiprintf_r+0x130>
 800fbac:	9105      	str	r1, [sp, #20]
 800fbae:	e7c3      	b.n	800fb38 <_svfiprintf_r+0x130>
 800fbb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	e7f0      	b.n	800fb9c <_svfiprintf_r+0x194>
 800fbba:	ab03      	add	r3, sp, #12
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	462a      	mov	r2, r5
 800fbc0:	4b0f      	ldr	r3, [pc, #60]	; (800fc00 <_svfiprintf_r+0x1f8>)
 800fbc2:	a904      	add	r1, sp, #16
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	f3af 8000 	nop.w
 800fbca:	1c42      	adds	r2, r0, #1
 800fbcc:	4606      	mov	r6, r0
 800fbce:	d1d6      	bne.n	800fb7e <_svfiprintf_r+0x176>
 800fbd0:	89ab      	ldrh	r3, [r5, #12]
 800fbd2:	065b      	lsls	r3, r3, #25
 800fbd4:	f53f af2c 	bmi.w	800fa30 <_svfiprintf_r+0x28>
 800fbd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbda:	b01d      	add	sp, #116	; 0x74
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe0:	ab03      	add	r3, sp, #12
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4b06      	ldr	r3, [pc, #24]	; (800fc00 <_svfiprintf_r+0x1f8>)
 800fbe8:	a904      	add	r1, sp, #16
 800fbea:	4638      	mov	r0, r7
 800fbec:	f000 fa4c 	bl	8010088 <_printf_i>
 800fbf0:	e7eb      	b.n	800fbca <_svfiprintf_r+0x1c2>
 800fbf2:	bf00      	nop
 800fbf4:	08011574 	.word	0x08011574
 800fbf8:	0801157e 	.word	0x0801157e
 800fbfc:	00000000 	.word	0x00000000
 800fc00:	0800f951 	.word	0x0800f951
 800fc04:	0801157a 	.word	0x0801157a

0800fc08 <_sungetc_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	1c4b      	adds	r3, r1, #1
 800fc0c:	4614      	mov	r4, r2
 800fc0e:	d103      	bne.n	800fc18 <_sungetc_r+0x10>
 800fc10:	f04f 35ff 	mov.w	r5, #4294967295
 800fc14:	4628      	mov	r0, r5
 800fc16:	bd38      	pop	{r3, r4, r5, pc}
 800fc18:	8993      	ldrh	r3, [r2, #12]
 800fc1a:	f023 0320 	bic.w	r3, r3, #32
 800fc1e:	8193      	strh	r3, [r2, #12]
 800fc20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc22:	6852      	ldr	r2, [r2, #4]
 800fc24:	b2cd      	uxtb	r5, r1
 800fc26:	b18b      	cbz	r3, 800fc4c <_sungetc_r+0x44>
 800fc28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	dd08      	ble.n	800fc40 <_sungetc_r+0x38>
 800fc2e:	6823      	ldr	r3, [r4, #0]
 800fc30:	1e5a      	subs	r2, r3, #1
 800fc32:	6022      	str	r2, [r4, #0]
 800fc34:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fc38:	6863      	ldr	r3, [r4, #4]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	e7e9      	b.n	800fc14 <_sungetc_r+0xc>
 800fc40:	4621      	mov	r1, r4
 800fc42:	f000 fde5 	bl	8010810 <__submore>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d0f1      	beq.n	800fc2e <_sungetc_r+0x26>
 800fc4a:	e7e1      	b.n	800fc10 <_sungetc_r+0x8>
 800fc4c:	6921      	ldr	r1, [r4, #16]
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	b151      	cbz	r1, 800fc68 <_sungetc_r+0x60>
 800fc52:	4299      	cmp	r1, r3
 800fc54:	d208      	bcs.n	800fc68 <_sungetc_r+0x60>
 800fc56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fc5a:	42a9      	cmp	r1, r5
 800fc5c:	d104      	bne.n	800fc68 <_sungetc_r+0x60>
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	3201      	adds	r2, #1
 800fc62:	6023      	str	r3, [r4, #0]
 800fc64:	6062      	str	r2, [r4, #4]
 800fc66:	e7d5      	b.n	800fc14 <_sungetc_r+0xc>
 800fc68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fc6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc70:	6363      	str	r3, [r4, #52]	; 0x34
 800fc72:	2303      	movs	r3, #3
 800fc74:	63a3      	str	r3, [r4, #56]	; 0x38
 800fc76:	4623      	mov	r3, r4
 800fc78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e7dc      	b.n	800fc3c <_sungetc_r+0x34>

0800fc82 <__ssrefill_r>:
 800fc82:	b510      	push	{r4, lr}
 800fc84:	460c      	mov	r4, r1
 800fc86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc88:	b169      	cbz	r1, 800fca6 <__ssrefill_r+0x24>
 800fc8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	d001      	beq.n	800fc96 <__ssrefill_r+0x14>
 800fc92:	f7fd fc95 	bl	800d5c0 <_free_r>
 800fc96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc98:	6063      	str	r3, [r4, #4]
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	6360      	str	r0, [r4, #52]	; 0x34
 800fc9e:	b113      	cbz	r3, 800fca6 <__ssrefill_r+0x24>
 800fca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	bd10      	pop	{r4, pc}
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	6063      	str	r3, [r4, #4]
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	f043 0320 	orr.w	r3, r3, #32
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcba:	e7f3      	b.n	800fca4 <__ssrefill_r+0x22>

0800fcbc <__ssvfiscanf_r>:
 800fcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fccc:	49a6      	ldr	r1, [pc, #664]	; (800ff68 <__ssvfiscanf_r+0x2ac>)
 800fcce:	91a0      	str	r1, [sp, #640]	; 0x280
 800fcd0:	f10d 0804 	add.w	r8, sp, #4
 800fcd4:	49a5      	ldr	r1, [pc, #660]	; (800ff6c <__ssvfiscanf_r+0x2b0>)
 800fcd6:	4fa6      	ldr	r7, [pc, #664]	; (800ff70 <__ssvfiscanf_r+0x2b4>)
 800fcd8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ff74 <__ssvfiscanf_r+0x2b8>
 800fcdc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fce0:	4606      	mov	r6, r0
 800fce2:	91a1      	str	r1, [sp, #644]	; 0x284
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	7813      	ldrb	r3, [r2, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 815a 	beq.w	800ffa2 <__ssvfiscanf_r+0x2e6>
 800fcee:	5dd9      	ldrb	r1, [r3, r7]
 800fcf0:	f011 0108 	ands.w	r1, r1, #8
 800fcf4:	f102 0501 	add.w	r5, r2, #1
 800fcf8:	d019      	beq.n	800fd2e <__ssvfiscanf_r+0x72>
 800fcfa:	6863      	ldr	r3, [r4, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dd0f      	ble.n	800fd20 <__ssvfiscanf_r+0x64>
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	781a      	ldrb	r2, [r3, #0]
 800fd04:	5cba      	ldrb	r2, [r7, r2]
 800fd06:	0712      	lsls	r2, r2, #28
 800fd08:	d401      	bmi.n	800fd0e <__ssvfiscanf_r+0x52>
 800fd0a:	462a      	mov	r2, r5
 800fd0c:	e7eb      	b.n	800fce6 <__ssvfiscanf_r+0x2a>
 800fd0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd10:	3201      	adds	r2, #1
 800fd12:	9245      	str	r2, [sp, #276]	; 0x114
 800fd14:	6862      	ldr	r2, [r4, #4]
 800fd16:	3301      	adds	r3, #1
 800fd18:	3a01      	subs	r2, #1
 800fd1a:	6062      	str	r2, [r4, #4]
 800fd1c:	6023      	str	r3, [r4, #0]
 800fd1e:	e7ec      	b.n	800fcfa <__ssvfiscanf_r+0x3e>
 800fd20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd22:	4621      	mov	r1, r4
 800fd24:	4630      	mov	r0, r6
 800fd26:	4798      	blx	r3
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d0e9      	beq.n	800fd00 <__ssvfiscanf_r+0x44>
 800fd2c:	e7ed      	b.n	800fd0a <__ssvfiscanf_r+0x4e>
 800fd2e:	2b25      	cmp	r3, #37	; 0x25
 800fd30:	d012      	beq.n	800fd58 <__ssvfiscanf_r+0x9c>
 800fd32:	469a      	mov	sl, r3
 800fd34:	6863      	ldr	r3, [r4, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f340 8091 	ble.w	800fe5e <__ssvfiscanf_r+0x1a2>
 800fd3c:	6822      	ldr	r2, [r4, #0]
 800fd3e:	7813      	ldrb	r3, [r2, #0]
 800fd40:	4553      	cmp	r3, sl
 800fd42:	f040 812e 	bne.w	800ffa2 <__ssvfiscanf_r+0x2e6>
 800fd46:	6863      	ldr	r3, [r4, #4]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	6063      	str	r3, [r4, #4]
 800fd4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fd4e:	3201      	adds	r2, #1
 800fd50:	3301      	adds	r3, #1
 800fd52:	6022      	str	r2, [r4, #0]
 800fd54:	9345      	str	r3, [sp, #276]	; 0x114
 800fd56:	e7d8      	b.n	800fd0a <__ssvfiscanf_r+0x4e>
 800fd58:	9141      	str	r1, [sp, #260]	; 0x104
 800fd5a:	9143      	str	r1, [sp, #268]	; 0x10c
 800fd5c:	7853      	ldrb	r3, [r2, #1]
 800fd5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd60:	bf02      	ittt	eq
 800fd62:	2310      	moveq	r3, #16
 800fd64:	1c95      	addeq	r5, r2, #2
 800fd66:	9341      	streq	r3, [sp, #260]	; 0x104
 800fd68:	220a      	movs	r2, #10
 800fd6a:	46aa      	mov	sl, r5
 800fd6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fd70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fd74:	2b09      	cmp	r3, #9
 800fd76:	d91d      	bls.n	800fdb4 <__ssvfiscanf_r+0xf8>
 800fd78:	487e      	ldr	r0, [pc, #504]	; (800ff74 <__ssvfiscanf_r+0x2b8>)
 800fd7a:	2203      	movs	r2, #3
 800fd7c:	f7f0 fa48 	bl	8000210 <memchr>
 800fd80:	b140      	cbz	r0, 800fd94 <__ssvfiscanf_r+0xd8>
 800fd82:	2301      	movs	r3, #1
 800fd84:	eba0 0009 	sub.w	r0, r0, r9
 800fd88:	fa03 f000 	lsl.w	r0, r3, r0
 800fd8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fd8e:	4318      	orrs	r0, r3
 800fd90:	9041      	str	r0, [sp, #260]	; 0x104
 800fd92:	4655      	mov	r5, sl
 800fd94:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd98:	2b78      	cmp	r3, #120	; 0x78
 800fd9a:	d806      	bhi.n	800fdaa <__ssvfiscanf_r+0xee>
 800fd9c:	2b57      	cmp	r3, #87	; 0x57
 800fd9e:	d810      	bhi.n	800fdc2 <__ssvfiscanf_r+0x106>
 800fda0:	2b25      	cmp	r3, #37	; 0x25
 800fda2:	d0c6      	beq.n	800fd32 <__ssvfiscanf_r+0x76>
 800fda4:	d856      	bhi.n	800fe54 <__ssvfiscanf_r+0x198>
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d064      	beq.n	800fe74 <__ssvfiscanf_r+0x1b8>
 800fdaa:	2303      	movs	r3, #3
 800fdac:	9347      	str	r3, [sp, #284]	; 0x11c
 800fdae:	230a      	movs	r3, #10
 800fdb0:	9342      	str	r3, [sp, #264]	; 0x108
 800fdb2:	e071      	b.n	800fe98 <__ssvfiscanf_r+0x1dc>
 800fdb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fdb6:	fb02 1103 	mla	r1, r2, r3, r1
 800fdba:	3930      	subs	r1, #48	; 0x30
 800fdbc:	9143      	str	r1, [sp, #268]	; 0x10c
 800fdbe:	4655      	mov	r5, sl
 800fdc0:	e7d3      	b.n	800fd6a <__ssvfiscanf_r+0xae>
 800fdc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fdc6:	2a20      	cmp	r2, #32
 800fdc8:	d8ef      	bhi.n	800fdaa <__ssvfiscanf_r+0xee>
 800fdca:	a101      	add	r1, pc, #4	; (adr r1, 800fdd0 <__ssvfiscanf_r+0x114>)
 800fdcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fdd0:	0800fe83 	.word	0x0800fe83
 800fdd4:	0800fdab 	.word	0x0800fdab
 800fdd8:	0800fdab 	.word	0x0800fdab
 800fddc:	0800fee1 	.word	0x0800fee1
 800fde0:	0800fdab 	.word	0x0800fdab
 800fde4:	0800fdab 	.word	0x0800fdab
 800fde8:	0800fdab 	.word	0x0800fdab
 800fdec:	0800fdab 	.word	0x0800fdab
 800fdf0:	0800fdab 	.word	0x0800fdab
 800fdf4:	0800fdab 	.word	0x0800fdab
 800fdf8:	0800fdab 	.word	0x0800fdab
 800fdfc:	0800fef7 	.word	0x0800fef7
 800fe00:	0800fecd 	.word	0x0800fecd
 800fe04:	0800fe5b 	.word	0x0800fe5b
 800fe08:	0800fe5b 	.word	0x0800fe5b
 800fe0c:	0800fe5b 	.word	0x0800fe5b
 800fe10:	0800fdab 	.word	0x0800fdab
 800fe14:	0800fed1 	.word	0x0800fed1
 800fe18:	0800fdab 	.word	0x0800fdab
 800fe1c:	0800fdab 	.word	0x0800fdab
 800fe20:	0800fdab 	.word	0x0800fdab
 800fe24:	0800fdab 	.word	0x0800fdab
 800fe28:	0800ff07 	.word	0x0800ff07
 800fe2c:	0800fed9 	.word	0x0800fed9
 800fe30:	0800fe7b 	.word	0x0800fe7b
 800fe34:	0800fdab 	.word	0x0800fdab
 800fe38:	0800fdab 	.word	0x0800fdab
 800fe3c:	0800ff03 	.word	0x0800ff03
 800fe40:	0800fdab 	.word	0x0800fdab
 800fe44:	0800fecd 	.word	0x0800fecd
 800fe48:	0800fdab 	.word	0x0800fdab
 800fe4c:	0800fdab 	.word	0x0800fdab
 800fe50:	0800fe83 	.word	0x0800fe83
 800fe54:	3b45      	subs	r3, #69	; 0x45
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d8a7      	bhi.n	800fdaa <__ssvfiscanf_r+0xee>
 800fe5a:	2305      	movs	r3, #5
 800fe5c:	e01b      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800fe5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe60:	4621      	mov	r1, r4
 800fe62:	4630      	mov	r0, r6
 800fe64:	4798      	blx	r3
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f43f af68 	beq.w	800fd3c <__ssvfiscanf_r+0x80>
 800fe6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f040 808d 	bne.w	800ff8e <__ssvfiscanf_r+0x2d2>
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	e08f      	b.n	800ff9a <__ssvfiscanf_r+0x2de>
 800fe7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fe7c:	f042 0220 	orr.w	r2, r2, #32
 800fe80:	9241      	str	r2, [sp, #260]	; 0x104
 800fe82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fe84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe88:	9241      	str	r2, [sp, #260]	; 0x104
 800fe8a:	2210      	movs	r2, #16
 800fe8c:	2b6f      	cmp	r3, #111	; 0x6f
 800fe8e:	9242      	str	r2, [sp, #264]	; 0x108
 800fe90:	bf34      	ite	cc
 800fe92:	2303      	movcc	r3, #3
 800fe94:	2304      	movcs	r3, #4
 800fe96:	9347      	str	r3, [sp, #284]	; 0x11c
 800fe98:	6863      	ldr	r3, [r4, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	dd42      	ble.n	800ff24 <__ssvfiscanf_r+0x268>
 800fe9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fea0:	0659      	lsls	r1, r3, #25
 800fea2:	d404      	bmi.n	800feae <__ssvfiscanf_r+0x1f2>
 800fea4:	6823      	ldr	r3, [r4, #0]
 800fea6:	781a      	ldrb	r2, [r3, #0]
 800fea8:	5cba      	ldrb	r2, [r7, r2]
 800feaa:	0712      	lsls	r2, r2, #28
 800feac:	d441      	bmi.n	800ff32 <__ssvfiscanf_r+0x276>
 800feae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800feb0:	2b02      	cmp	r3, #2
 800feb2:	dc50      	bgt.n	800ff56 <__ssvfiscanf_r+0x29a>
 800feb4:	466b      	mov	r3, sp
 800feb6:	4622      	mov	r2, r4
 800feb8:	a941      	add	r1, sp, #260	; 0x104
 800feba:	4630      	mov	r0, r6
 800febc:	f000 fa0a 	bl	80102d4 <_scanf_chars>
 800fec0:	2801      	cmp	r0, #1
 800fec2:	d06e      	beq.n	800ffa2 <__ssvfiscanf_r+0x2e6>
 800fec4:	2802      	cmp	r0, #2
 800fec6:	f47f af20 	bne.w	800fd0a <__ssvfiscanf_r+0x4e>
 800feca:	e7cf      	b.n	800fe6c <__ssvfiscanf_r+0x1b0>
 800fecc:	220a      	movs	r2, #10
 800fece:	e7dd      	b.n	800fe8c <__ssvfiscanf_r+0x1d0>
 800fed0:	2300      	movs	r3, #0
 800fed2:	9342      	str	r3, [sp, #264]	; 0x108
 800fed4:	2303      	movs	r3, #3
 800fed6:	e7de      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800fed8:	2308      	movs	r3, #8
 800feda:	9342      	str	r3, [sp, #264]	; 0x108
 800fedc:	2304      	movs	r3, #4
 800fede:	e7da      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800fee0:	4629      	mov	r1, r5
 800fee2:	4640      	mov	r0, r8
 800fee4:	f000 fb64 	bl	80105b0 <__sccl>
 800fee8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800feea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feee:	9341      	str	r3, [sp, #260]	; 0x104
 800fef0:	4605      	mov	r5, r0
 800fef2:	2301      	movs	r3, #1
 800fef4:	e7cf      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800fef6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fefc:	9341      	str	r3, [sp, #260]	; 0x104
 800fefe:	2300      	movs	r3, #0
 800ff00:	e7c9      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800ff02:	2302      	movs	r3, #2
 800ff04:	e7c7      	b.n	800fe96 <__ssvfiscanf_r+0x1da>
 800ff06:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ff08:	06c3      	lsls	r3, r0, #27
 800ff0a:	f53f aefe 	bmi.w	800fd0a <__ssvfiscanf_r+0x4e>
 800ff0e:	9b00      	ldr	r3, [sp, #0]
 800ff10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff12:	1d19      	adds	r1, r3, #4
 800ff14:	9100      	str	r1, [sp, #0]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f010 0f01 	tst.w	r0, #1
 800ff1c:	bf14      	ite	ne
 800ff1e:	801a      	strhne	r2, [r3, #0]
 800ff20:	601a      	streq	r2, [r3, #0]
 800ff22:	e6f2      	b.n	800fd0a <__ssvfiscanf_r+0x4e>
 800ff24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff26:	4621      	mov	r1, r4
 800ff28:	4630      	mov	r0, r6
 800ff2a:	4798      	blx	r3
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d0b6      	beq.n	800fe9e <__ssvfiscanf_r+0x1e2>
 800ff30:	e79c      	b.n	800fe6c <__ssvfiscanf_r+0x1b0>
 800ff32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff34:	3201      	adds	r2, #1
 800ff36:	9245      	str	r2, [sp, #276]	; 0x114
 800ff38:	6862      	ldr	r2, [r4, #4]
 800ff3a:	3a01      	subs	r2, #1
 800ff3c:	2a00      	cmp	r2, #0
 800ff3e:	6062      	str	r2, [r4, #4]
 800ff40:	dd02      	ble.n	800ff48 <__ssvfiscanf_r+0x28c>
 800ff42:	3301      	adds	r3, #1
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	e7ad      	b.n	800fea4 <__ssvfiscanf_r+0x1e8>
 800ff48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	4798      	blx	r3
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d0a7      	beq.n	800fea4 <__ssvfiscanf_r+0x1e8>
 800ff54:	e78a      	b.n	800fe6c <__ssvfiscanf_r+0x1b0>
 800ff56:	2b04      	cmp	r3, #4
 800ff58:	dc0e      	bgt.n	800ff78 <__ssvfiscanf_r+0x2bc>
 800ff5a:	466b      	mov	r3, sp
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	a941      	add	r1, sp, #260	; 0x104
 800ff60:	4630      	mov	r0, r6
 800ff62:	f000 fa11 	bl	8010388 <_scanf_i>
 800ff66:	e7ab      	b.n	800fec0 <__ssvfiscanf_r+0x204>
 800ff68:	0800fc09 	.word	0x0800fc09
 800ff6c:	0800fc83 	.word	0x0800fc83
 800ff70:	080111b5 	.word	0x080111b5
 800ff74:	0801157a 	.word	0x0801157a
 800ff78:	4b0b      	ldr	r3, [pc, #44]	; (800ffa8 <__ssvfiscanf_r+0x2ec>)
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f43f aec5 	beq.w	800fd0a <__ssvfiscanf_r+0x4e>
 800ff80:	466b      	mov	r3, sp
 800ff82:	4622      	mov	r2, r4
 800ff84:	a941      	add	r1, sp, #260	; 0x104
 800ff86:	4630      	mov	r0, r6
 800ff88:	f3af 8000 	nop.w
 800ff8c:	e798      	b.n	800fec0 <__ssvfiscanf_r+0x204>
 800ff8e:	89a3      	ldrh	r3, [r4, #12]
 800ff90:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ff94:	bf18      	it	ne
 800ff96:	f04f 30ff 	movne.w	r0, #4294967295
 800ff9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ff9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ffa4:	e7f9      	b.n	800ff9a <__ssvfiscanf_r+0x2de>
 800ffa6:	bf00      	nop
 800ffa8:	00000000 	.word	0x00000000

0800ffac <_printf_common>:
 800ffac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb0:	4616      	mov	r6, r2
 800ffb2:	4699      	mov	r9, r3
 800ffb4:	688a      	ldr	r2, [r1, #8]
 800ffb6:	690b      	ldr	r3, [r1, #16]
 800ffb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	bfb8      	it	lt
 800ffc0:	4613      	movlt	r3, r2
 800ffc2:	6033      	str	r3, [r6, #0]
 800ffc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ffc8:	4607      	mov	r7, r0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	b10a      	cbz	r2, 800ffd2 <_printf_common+0x26>
 800ffce:	3301      	adds	r3, #1
 800ffd0:	6033      	str	r3, [r6, #0]
 800ffd2:	6823      	ldr	r3, [r4, #0]
 800ffd4:	0699      	lsls	r1, r3, #26
 800ffd6:	bf42      	ittt	mi
 800ffd8:	6833      	ldrmi	r3, [r6, #0]
 800ffda:	3302      	addmi	r3, #2
 800ffdc:	6033      	strmi	r3, [r6, #0]
 800ffde:	6825      	ldr	r5, [r4, #0]
 800ffe0:	f015 0506 	ands.w	r5, r5, #6
 800ffe4:	d106      	bne.n	800fff4 <_printf_common+0x48>
 800ffe6:	f104 0a19 	add.w	sl, r4, #25
 800ffea:	68e3      	ldr	r3, [r4, #12]
 800ffec:	6832      	ldr	r2, [r6, #0]
 800ffee:	1a9b      	subs	r3, r3, r2
 800fff0:	42ab      	cmp	r3, r5
 800fff2:	dc26      	bgt.n	8010042 <_printf_common+0x96>
 800fff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fff8:	1e13      	subs	r3, r2, #0
 800fffa:	6822      	ldr	r2, [r4, #0]
 800fffc:	bf18      	it	ne
 800fffe:	2301      	movne	r3, #1
 8010000:	0692      	lsls	r2, r2, #26
 8010002:	d42b      	bmi.n	801005c <_printf_common+0xb0>
 8010004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010008:	4649      	mov	r1, r9
 801000a:	4638      	mov	r0, r7
 801000c:	47c0      	blx	r8
 801000e:	3001      	adds	r0, #1
 8010010:	d01e      	beq.n	8010050 <_printf_common+0xa4>
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	68e5      	ldr	r5, [r4, #12]
 8010016:	6832      	ldr	r2, [r6, #0]
 8010018:	f003 0306 	and.w	r3, r3, #6
 801001c:	2b04      	cmp	r3, #4
 801001e:	bf08      	it	eq
 8010020:	1aad      	subeq	r5, r5, r2
 8010022:	68a3      	ldr	r3, [r4, #8]
 8010024:	6922      	ldr	r2, [r4, #16]
 8010026:	bf0c      	ite	eq
 8010028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801002c:	2500      	movne	r5, #0
 801002e:	4293      	cmp	r3, r2
 8010030:	bfc4      	itt	gt
 8010032:	1a9b      	subgt	r3, r3, r2
 8010034:	18ed      	addgt	r5, r5, r3
 8010036:	2600      	movs	r6, #0
 8010038:	341a      	adds	r4, #26
 801003a:	42b5      	cmp	r5, r6
 801003c:	d11a      	bne.n	8010074 <_printf_common+0xc8>
 801003e:	2000      	movs	r0, #0
 8010040:	e008      	b.n	8010054 <_printf_common+0xa8>
 8010042:	2301      	movs	r3, #1
 8010044:	4652      	mov	r2, sl
 8010046:	4649      	mov	r1, r9
 8010048:	4638      	mov	r0, r7
 801004a:	47c0      	blx	r8
 801004c:	3001      	adds	r0, #1
 801004e:	d103      	bne.n	8010058 <_printf_common+0xac>
 8010050:	f04f 30ff 	mov.w	r0, #4294967295
 8010054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010058:	3501      	adds	r5, #1
 801005a:	e7c6      	b.n	800ffea <_printf_common+0x3e>
 801005c:	18e1      	adds	r1, r4, r3
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	2030      	movs	r0, #48	; 0x30
 8010062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010066:	4422      	add	r2, r4
 8010068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801006c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010070:	3302      	adds	r3, #2
 8010072:	e7c7      	b.n	8010004 <_printf_common+0x58>
 8010074:	2301      	movs	r3, #1
 8010076:	4622      	mov	r2, r4
 8010078:	4649      	mov	r1, r9
 801007a:	4638      	mov	r0, r7
 801007c:	47c0      	blx	r8
 801007e:	3001      	adds	r0, #1
 8010080:	d0e6      	beq.n	8010050 <_printf_common+0xa4>
 8010082:	3601      	adds	r6, #1
 8010084:	e7d9      	b.n	801003a <_printf_common+0x8e>
	...

08010088 <_printf_i>:
 8010088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801008c:	7e0f      	ldrb	r7, [r1, #24]
 801008e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010090:	2f78      	cmp	r7, #120	; 0x78
 8010092:	4691      	mov	r9, r2
 8010094:	4680      	mov	r8, r0
 8010096:	460c      	mov	r4, r1
 8010098:	469a      	mov	sl, r3
 801009a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801009e:	d807      	bhi.n	80100b0 <_printf_i+0x28>
 80100a0:	2f62      	cmp	r7, #98	; 0x62
 80100a2:	d80a      	bhi.n	80100ba <_printf_i+0x32>
 80100a4:	2f00      	cmp	r7, #0
 80100a6:	f000 80d8 	beq.w	801025a <_printf_i+0x1d2>
 80100aa:	2f58      	cmp	r7, #88	; 0x58
 80100ac:	f000 80a3 	beq.w	80101f6 <_printf_i+0x16e>
 80100b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100b8:	e03a      	b.n	8010130 <_printf_i+0xa8>
 80100ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100be:	2b15      	cmp	r3, #21
 80100c0:	d8f6      	bhi.n	80100b0 <_printf_i+0x28>
 80100c2:	a101      	add	r1, pc, #4	; (adr r1, 80100c8 <_printf_i+0x40>)
 80100c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100c8:	08010121 	.word	0x08010121
 80100cc:	08010135 	.word	0x08010135
 80100d0:	080100b1 	.word	0x080100b1
 80100d4:	080100b1 	.word	0x080100b1
 80100d8:	080100b1 	.word	0x080100b1
 80100dc:	080100b1 	.word	0x080100b1
 80100e0:	08010135 	.word	0x08010135
 80100e4:	080100b1 	.word	0x080100b1
 80100e8:	080100b1 	.word	0x080100b1
 80100ec:	080100b1 	.word	0x080100b1
 80100f0:	080100b1 	.word	0x080100b1
 80100f4:	08010241 	.word	0x08010241
 80100f8:	08010165 	.word	0x08010165
 80100fc:	08010223 	.word	0x08010223
 8010100:	080100b1 	.word	0x080100b1
 8010104:	080100b1 	.word	0x080100b1
 8010108:	08010263 	.word	0x08010263
 801010c:	080100b1 	.word	0x080100b1
 8010110:	08010165 	.word	0x08010165
 8010114:	080100b1 	.word	0x080100b1
 8010118:	080100b1 	.word	0x080100b1
 801011c:	0801022b 	.word	0x0801022b
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	1d1a      	adds	r2, r3, #4
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	602a      	str	r2, [r5, #0]
 8010128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801012c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010130:	2301      	movs	r3, #1
 8010132:	e0a3      	b.n	801027c <_printf_i+0x1f4>
 8010134:	6820      	ldr	r0, [r4, #0]
 8010136:	6829      	ldr	r1, [r5, #0]
 8010138:	0606      	lsls	r6, r0, #24
 801013a:	f101 0304 	add.w	r3, r1, #4
 801013e:	d50a      	bpl.n	8010156 <_printf_i+0xce>
 8010140:	680e      	ldr	r6, [r1, #0]
 8010142:	602b      	str	r3, [r5, #0]
 8010144:	2e00      	cmp	r6, #0
 8010146:	da03      	bge.n	8010150 <_printf_i+0xc8>
 8010148:	232d      	movs	r3, #45	; 0x2d
 801014a:	4276      	negs	r6, r6
 801014c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010150:	485e      	ldr	r0, [pc, #376]	; (80102cc <_printf_i+0x244>)
 8010152:	230a      	movs	r3, #10
 8010154:	e019      	b.n	801018a <_printf_i+0x102>
 8010156:	680e      	ldr	r6, [r1, #0]
 8010158:	602b      	str	r3, [r5, #0]
 801015a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801015e:	bf18      	it	ne
 8010160:	b236      	sxthne	r6, r6
 8010162:	e7ef      	b.n	8010144 <_printf_i+0xbc>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	6820      	ldr	r0, [r4, #0]
 8010168:	1d19      	adds	r1, r3, #4
 801016a:	6029      	str	r1, [r5, #0]
 801016c:	0601      	lsls	r1, r0, #24
 801016e:	d501      	bpl.n	8010174 <_printf_i+0xec>
 8010170:	681e      	ldr	r6, [r3, #0]
 8010172:	e002      	b.n	801017a <_printf_i+0xf2>
 8010174:	0646      	lsls	r6, r0, #25
 8010176:	d5fb      	bpl.n	8010170 <_printf_i+0xe8>
 8010178:	881e      	ldrh	r6, [r3, #0]
 801017a:	4854      	ldr	r0, [pc, #336]	; (80102cc <_printf_i+0x244>)
 801017c:	2f6f      	cmp	r7, #111	; 0x6f
 801017e:	bf0c      	ite	eq
 8010180:	2308      	moveq	r3, #8
 8010182:	230a      	movne	r3, #10
 8010184:	2100      	movs	r1, #0
 8010186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801018a:	6865      	ldr	r5, [r4, #4]
 801018c:	60a5      	str	r5, [r4, #8]
 801018e:	2d00      	cmp	r5, #0
 8010190:	bfa2      	ittt	ge
 8010192:	6821      	ldrge	r1, [r4, #0]
 8010194:	f021 0104 	bicge.w	r1, r1, #4
 8010198:	6021      	strge	r1, [r4, #0]
 801019a:	b90e      	cbnz	r6, 80101a0 <_printf_i+0x118>
 801019c:	2d00      	cmp	r5, #0
 801019e:	d04d      	beq.n	801023c <_printf_i+0x1b4>
 80101a0:	4615      	mov	r5, r2
 80101a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80101a6:	fb03 6711 	mls	r7, r3, r1, r6
 80101aa:	5dc7      	ldrb	r7, [r0, r7]
 80101ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101b0:	4637      	mov	r7, r6
 80101b2:	42bb      	cmp	r3, r7
 80101b4:	460e      	mov	r6, r1
 80101b6:	d9f4      	bls.n	80101a2 <_printf_i+0x11a>
 80101b8:	2b08      	cmp	r3, #8
 80101ba:	d10b      	bne.n	80101d4 <_printf_i+0x14c>
 80101bc:	6823      	ldr	r3, [r4, #0]
 80101be:	07de      	lsls	r6, r3, #31
 80101c0:	d508      	bpl.n	80101d4 <_printf_i+0x14c>
 80101c2:	6923      	ldr	r3, [r4, #16]
 80101c4:	6861      	ldr	r1, [r4, #4]
 80101c6:	4299      	cmp	r1, r3
 80101c8:	bfde      	ittt	le
 80101ca:	2330      	movle	r3, #48	; 0x30
 80101cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80101d4:	1b52      	subs	r2, r2, r5
 80101d6:	6122      	str	r2, [r4, #16]
 80101d8:	f8cd a000 	str.w	sl, [sp]
 80101dc:	464b      	mov	r3, r9
 80101de:	aa03      	add	r2, sp, #12
 80101e0:	4621      	mov	r1, r4
 80101e2:	4640      	mov	r0, r8
 80101e4:	f7ff fee2 	bl	800ffac <_printf_common>
 80101e8:	3001      	adds	r0, #1
 80101ea:	d14c      	bne.n	8010286 <_printf_i+0x1fe>
 80101ec:	f04f 30ff 	mov.w	r0, #4294967295
 80101f0:	b004      	add	sp, #16
 80101f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f6:	4835      	ldr	r0, [pc, #212]	; (80102cc <_printf_i+0x244>)
 80101f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80101fc:	6829      	ldr	r1, [r5, #0]
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	f851 6b04 	ldr.w	r6, [r1], #4
 8010204:	6029      	str	r1, [r5, #0]
 8010206:	061d      	lsls	r5, r3, #24
 8010208:	d514      	bpl.n	8010234 <_printf_i+0x1ac>
 801020a:	07df      	lsls	r7, r3, #31
 801020c:	bf44      	itt	mi
 801020e:	f043 0320 	orrmi.w	r3, r3, #32
 8010212:	6023      	strmi	r3, [r4, #0]
 8010214:	b91e      	cbnz	r6, 801021e <_printf_i+0x196>
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	f023 0320 	bic.w	r3, r3, #32
 801021c:	6023      	str	r3, [r4, #0]
 801021e:	2310      	movs	r3, #16
 8010220:	e7b0      	b.n	8010184 <_printf_i+0xfc>
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	f043 0320 	orr.w	r3, r3, #32
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	2378      	movs	r3, #120	; 0x78
 801022c:	4828      	ldr	r0, [pc, #160]	; (80102d0 <_printf_i+0x248>)
 801022e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010232:	e7e3      	b.n	80101fc <_printf_i+0x174>
 8010234:	0659      	lsls	r1, r3, #25
 8010236:	bf48      	it	mi
 8010238:	b2b6      	uxthmi	r6, r6
 801023a:	e7e6      	b.n	801020a <_printf_i+0x182>
 801023c:	4615      	mov	r5, r2
 801023e:	e7bb      	b.n	80101b8 <_printf_i+0x130>
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	6826      	ldr	r6, [r4, #0]
 8010244:	6961      	ldr	r1, [r4, #20]
 8010246:	1d18      	adds	r0, r3, #4
 8010248:	6028      	str	r0, [r5, #0]
 801024a:	0635      	lsls	r5, r6, #24
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	d501      	bpl.n	8010254 <_printf_i+0x1cc>
 8010250:	6019      	str	r1, [r3, #0]
 8010252:	e002      	b.n	801025a <_printf_i+0x1d2>
 8010254:	0670      	lsls	r0, r6, #25
 8010256:	d5fb      	bpl.n	8010250 <_printf_i+0x1c8>
 8010258:	8019      	strh	r1, [r3, #0]
 801025a:	2300      	movs	r3, #0
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	4615      	mov	r5, r2
 8010260:	e7ba      	b.n	80101d8 <_printf_i+0x150>
 8010262:	682b      	ldr	r3, [r5, #0]
 8010264:	1d1a      	adds	r2, r3, #4
 8010266:	602a      	str	r2, [r5, #0]
 8010268:	681d      	ldr	r5, [r3, #0]
 801026a:	6862      	ldr	r2, [r4, #4]
 801026c:	2100      	movs	r1, #0
 801026e:	4628      	mov	r0, r5
 8010270:	f7ef ffce 	bl	8000210 <memchr>
 8010274:	b108      	cbz	r0, 801027a <_printf_i+0x1f2>
 8010276:	1b40      	subs	r0, r0, r5
 8010278:	6060      	str	r0, [r4, #4]
 801027a:	6863      	ldr	r3, [r4, #4]
 801027c:	6123      	str	r3, [r4, #16]
 801027e:	2300      	movs	r3, #0
 8010280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010284:	e7a8      	b.n	80101d8 <_printf_i+0x150>
 8010286:	6923      	ldr	r3, [r4, #16]
 8010288:	462a      	mov	r2, r5
 801028a:	4649      	mov	r1, r9
 801028c:	4640      	mov	r0, r8
 801028e:	47d0      	blx	sl
 8010290:	3001      	adds	r0, #1
 8010292:	d0ab      	beq.n	80101ec <_printf_i+0x164>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	079b      	lsls	r3, r3, #30
 8010298:	d413      	bmi.n	80102c2 <_printf_i+0x23a>
 801029a:	68e0      	ldr	r0, [r4, #12]
 801029c:	9b03      	ldr	r3, [sp, #12]
 801029e:	4298      	cmp	r0, r3
 80102a0:	bfb8      	it	lt
 80102a2:	4618      	movlt	r0, r3
 80102a4:	e7a4      	b.n	80101f0 <_printf_i+0x168>
 80102a6:	2301      	movs	r3, #1
 80102a8:	4632      	mov	r2, r6
 80102aa:	4649      	mov	r1, r9
 80102ac:	4640      	mov	r0, r8
 80102ae:	47d0      	blx	sl
 80102b0:	3001      	adds	r0, #1
 80102b2:	d09b      	beq.n	80101ec <_printf_i+0x164>
 80102b4:	3501      	adds	r5, #1
 80102b6:	68e3      	ldr	r3, [r4, #12]
 80102b8:	9903      	ldr	r1, [sp, #12]
 80102ba:	1a5b      	subs	r3, r3, r1
 80102bc:	42ab      	cmp	r3, r5
 80102be:	dcf2      	bgt.n	80102a6 <_printf_i+0x21e>
 80102c0:	e7eb      	b.n	801029a <_printf_i+0x212>
 80102c2:	2500      	movs	r5, #0
 80102c4:	f104 0619 	add.w	r6, r4, #25
 80102c8:	e7f5      	b.n	80102b6 <_printf_i+0x22e>
 80102ca:	bf00      	nop
 80102cc:	08011585 	.word	0x08011585
 80102d0:	08011596 	.word	0x08011596

080102d4 <_scanf_chars>:
 80102d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102d8:	4615      	mov	r5, r2
 80102da:	688a      	ldr	r2, [r1, #8]
 80102dc:	4680      	mov	r8, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	b932      	cbnz	r2, 80102f0 <_scanf_chars+0x1c>
 80102e2:	698a      	ldr	r2, [r1, #24]
 80102e4:	2a00      	cmp	r2, #0
 80102e6:	bf0c      	ite	eq
 80102e8:	2201      	moveq	r2, #1
 80102ea:	f04f 32ff 	movne.w	r2, #4294967295
 80102ee:	608a      	str	r2, [r1, #8]
 80102f0:	6822      	ldr	r2, [r4, #0]
 80102f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010384 <_scanf_chars+0xb0>
 80102f6:	06d1      	lsls	r1, r2, #27
 80102f8:	bf5f      	itttt	pl
 80102fa:	681a      	ldrpl	r2, [r3, #0]
 80102fc:	1d11      	addpl	r1, r2, #4
 80102fe:	6019      	strpl	r1, [r3, #0]
 8010300:	6816      	ldrpl	r6, [r2, #0]
 8010302:	2700      	movs	r7, #0
 8010304:	69a0      	ldr	r0, [r4, #24]
 8010306:	b188      	cbz	r0, 801032c <_scanf_chars+0x58>
 8010308:	2801      	cmp	r0, #1
 801030a:	d107      	bne.n	801031c <_scanf_chars+0x48>
 801030c:	682a      	ldr	r2, [r5, #0]
 801030e:	7811      	ldrb	r1, [r2, #0]
 8010310:	6962      	ldr	r2, [r4, #20]
 8010312:	5c52      	ldrb	r2, [r2, r1]
 8010314:	b952      	cbnz	r2, 801032c <_scanf_chars+0x58>
 8010316:	2f00      	cmp	r7, #0
 8010318:	d031      	beq.n	801037e <_scanf_chars+0xaa>
 801031a:	e022      	b.n	8010362 <_scanf_chars+0x8e>
 801031c:	2802      	cmp	r0, #2
 801031e:	d120      	bne.n	8010362 <_scanf_chars+0x8e>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010328:	071b      	lsls	r3, r3, #28
 801032a:	d41a      	bmi.n	8010362 <_scanf_chars+0x8e>
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	06da      	lsls	r2, r3, #27
 8010330:	bf5e      	ittt	pl
 8010332:	682b      	ldrpl	r3, [r5, #0]
 8010334:	781b      	ldrbpl	r3, [r3, #0]
 8010336:	f806 3b01 	strbpl.w	r3, [r6], #1
 801033a:	682a      	ldr	r2, [r5, #0]
 801033c:	686b      	ldr	r3, [r5, #4]
 801033e:	3201      	adds	r2, #1
 8010340:	602a      	str	r2, [r5, #0]
 8010342:	68a2      	ldr	r2, [r4, #8]
 8010344:	3b01      	subs	r3, #1
 8010346:	3a01      	subs	r2, #1
 8010348:	606b      	str	r3, [r5, #4]
 801034a:	3701      	adds	r7, #1
 801034c:	60a2      	str	r2, [r4, #8]
 801034e:	b142      	cbz	r2, 8010362 <_scanf_chars+0x8e>
 8010350:	2b00      	cmp	r3, #0
 8010352:	dcd7      	bgt.n	8010304 <_scanf_chars+0x30>
 8010354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010358:	4629      	mov	r1, r5
 801035a:	4640      	mov	r0, r8
 801035c:	4798      	blx	r3
 801035e:	2800      	cmp	r0, #0
 8010360:	d0d0      	beq.n	8010304 <_scanf_chars+0x30>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	f013 0310 	ands.w	r3, r3, #16
 8010368:	d105      	bne.n	8010376 <_scanf_chars+0xa2>
 801036a:	68e2      	ldr	r2, [r4, #12]
 801036c:	3201      	adds	r2, #1
 801036e:	60e2      	str	r2, [r4, #12]
 8010370:	69a2      	ldr	r2, [r4, #24]
 8010372:	b102      	cbz	r2, 8010376 <_scanf_chars+0xa2>
 8010374:	7033      	strb	r3, [r6, #0]
 8010376:	6923      	ldr	r3, [r4, #16]
 8010378:	443b      	add	r3, r7
 801037a:	6123      	str	r3, [r4, #16]
 801037c:	2000      	movs	r0, #0
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	bf00      	nop
 8010384:	080111b5 	.word	0x080111b5

08010388 <_scanf_i>:
 8010388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	4698      	mov	r8, r3
 801038e:	4b76      	ldr	r3, [pc, #472]	; (8010568 <_scanf_i+0x1e0>)
 8010390:	460c      	mov	r4, r1
 8010392:	4682      	mov	sl, r0
 8010394:	4616      	mov	r6, r2
 8010396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801039a:	b087      	sub	sp, #28
 801039c:	ab03      	add	r3, sp, #12
 801039e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103a2:	4b72      	ldr	r3, [pc, #456]	; (801056c <_scanf_i+0x1e4>)
 80103a4:	69a1      	ldr	r1, [r4, #24]
 80103a6:	4a72      	ldr	r2, [pc, #456]	; (8010570 <_scanf_i+0x1e8>)
 80103a8:	2903      	cmp	r1, #3
 80103aa:	bf18      	it	ne
 80103ac:	461a      	movne	r2, r3
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	9201      	str	r2, [sp, #4]
 80103b2:	1e5a      	subs	r2, r3, #1
 80103b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80103b8:	bf88      	it	hi
 80103ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80103be:	4627      	mov	r7, r4
 80103c0:	bf82      	ittt	hi
 80103c2:	eb03 0905 	addhi.w	r9, r3, r5
 80103c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80103ca:	60a3      	strhi	r3, [r4, #8]
 80103cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80103d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80103d4:	bf98      	it	ls
 80103d6:	f04f 0900 	movls.w	r9, #0
 80103da:	6023      	str	r3, [r4, #0]
 80103dc:	463d      	mov	r5, r7
 80103de:	f04f 0b00 	mov.w	fp, #0
 80103e2:	6831      	ldr	r1, [r6, #0]
 80103e4:	ab03      	add	r3, sp, #12
 80103e6:	7809      	ldrb	r1, [r1, #0]
 80103e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80103ec:	2202      	movs	r2, #2
 80103ee:	f7ef ff0f 	bl	8000210 <memchr>
 80103f2:	b328      	cbz	r0, 8010440 <_scanf_i+0xb8>
 80103f4:	f1bb 0f01 	cmp.w	fp, #1
 80103f8:	d159      	bne.n	80104ae <_scanf_i+0x126>
 80103fa:	6862      	ldr	r2, [r4, #4]
 80103fc:	b92a      	cbnz	r2, 801040a <_scanf_i+0x82>
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	2308      	movs	r3, #8
 8010402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010406:	6063      	str	r3, [r4, #4]
 8010408:	6022      	str	r2, [r4, #0]
 801040a:	6822      	ldr	r2, [r4, #0]
 801040c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010410:	6022      	str	r2, [r4, #0]
 8010412:	68a2      	ldr	r2, [r4, #8]
 8010414:	1e51      	subs	r1, r2, #1
 8010416:	60a1      	str	r1, [r4, #8]
 8010418:	b192      	cbz	r2, 8010440 <_scanf_i+0xb8>
 801041a:	6832      	ldr	r2, [r6, #0]
 801041c:	1c51      	adds	r1, r2, #1
 801041e:	6031      	str	r1, [r6, #0]
 8010420:	7812      	ldrb	r2, [r2, #0]
 8010422:	f805 2b01 	strb.w	r2, [r5], #1
 8010426:	6872      	ldr	r2, [r6, #4]
 8010428:	3a01      	subs	r2, #1
 801042a:	2a00      	cmp	r2, #0
 801042c:	6072      	str	r2, [r6, #4]
 801042e:	dc07      	bgt.n	8010440 <_scanf_i+0xb8>
 8010430:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010434:	4631      	mov	r1, r6
 8010436:	4650      	mov	r0, sl
 8010438:	4790      	blx	r2
 801043a:	2800      	cmp	r0, #0
 801043c:	f040 8085 	bne.w	801054a <_scanf_i+0x1c2>
 8010440:	f10b 0b01 	add.w	fp, fp, #1
 8010444:	f1bb 0f03 	cmp.w	fp, #3
 8010448:	d1cb      	bne.n	80103e2 <_scanf_i+0x5a>
 801044a:	6863      	ldr	r3, [r4, #4]
 801044c:	b90b      	cbnz	r3, 8010452 <_scanf_i+0xca>
 801044e:	230a      	movs	r3, #10
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	6863      	ldr	r3, [r4, #4]
 8010454:	4947      	ldr	r1, [pc, #284]	; (8010574 <_scanf_i+0x1ec>)
 8010456:	6960      	ldr	r0, [r4, #20]
 8010458:	1ac9      	subs	r1, r1, r3
 801045a:	f000 f8a9 	bl	80105b0 <__sccl>
 801045e:	f04f 0b00 	mov.w	fp, #0
 8010462:	68a3      	ldr	r3, [r4, #8]
 8010464:	6822      	ldr	r2, [r4, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d03d      	beq.n	80104e6 <_scanf_i+0x15e>
 801046a:	6831      	ldr	r1, [r6, #0]
 801046c:	6960      	ldr	r0, [r4, #20]
 801046e:	f891 c000 	ldrb.w	ip, [r1]
 8010472:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010476:	2800      	cmp	r0, #0
 8010478:	d035      	beq.n	80104e6 <_scanf_i+0x15e>
 801047a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801047e:	d124      	bne.n	80104ca <_scanf_i+0x142>
 8010480:	0510      	lsls	r0, r2, #20
 8010482:	d522      	bpl.n	80104ca <_scanf_i+0x142>
 8010484:	f10b 0b01 	add.w	fp, fp, #1
 8010488:	f1b9 0f00 	cmp.w	r9, #0
 801048c:	d003      	beq.n	8010496 <_scanf_i+0x10e>
 801048e:	3301      	adds	r3, #1
 8010490:	f109 39ff 	add.w	r9, r9, #4294967295
 8010494:	60a3      	str	r3, [r4, #8]
 8010496:	6873      	ldr	r3, [r6, #4]
 8010498:	3b01      	subs	r3, #1
 801049a:	2b00      	cmp	r3, #0
 801049c:	6073      	str	r3, [r6, #4]
 801049e:	dd1b      	ble.n	80104d8 <_scanf_i+0x150>
 80104a0:	6833      	ldr	r3, [r6, #0]
 80104a2:	3301      	adds	r3, #1
 80104a4:	6033      	str	r3, [r6, #0]
 80104a6:	68a3      	ldr	r3, [r4, #8]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	60a3      	str	r3, [r4, #8]
 80104ac:	e7d9      	b.n	8010462 <_scanf_i+0xda>
 80104ae:	f1bb 0f02 	cmp.w	fp, #2
 80104b2:	d1ae      	bne.n	8010412 <_scanf_i+0x8a>
 80104b4:	6822      	ldr	r2, [r4, #0]
 80104b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80104ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80104be:	d1bf      	bne.n	8010440 <_scanf_i+0xb8>
 80104c0:	2310      	movs	r3, #16
 80104c2:	6063      	str	r3, [r4, #4]
 80104c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104c8:	e7a2      	b.n	8010410 <_scanf_i+0x88>
 80104ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80104ce:	6022      	str	r2, [r4, #0]
 80104d0:	780b      	ldrb	r3, [r1, #0]
 80104d2:	f805 3b01 	strb.w	r3, [r5], #1
 80104d6:	e7de      	b.n	8010496 <_scanf_i+0x10e>
 80104d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80104dc:	4631      	mov	r1, r6
 80104de:	4650      	mov	r0, sl
 80104e0:	4798      	blx	r3
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d0df      	beq.n	80104a6 <_scanf_i+0x11e>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	05db      	lsls	r3, r3, #23
 80104ea:	d50d      	bpl.n	8010508 <_scanf_i+0x180>
 80104ec:	42bd      	cmp	r5, r7
 80104ee:	d909      	bls.n	8010504 <_scanf_i+0x17c>
 80104f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80104f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104f8:	4632      	mov	r2, r6
 80104fa:	4650      	mov	r0, sl
 80104fc:	4798      	blx	r3
 80104fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8010502:	464d      	mov	r5, r9
 8010504:	42bd      	cmp	r5, r7
 8010506:	d02d      	beq.n	8010564 <_scanf_i+0x1dc>
 8010508:	6822      	ldr	r2, [r4, #0]
 801050a:	f012 0210 	ands.w	r2, r2, #16
 801050e:	d113      	bne.n	8010538 <_scanf_i+0x1b0>
 8010510:	702a      	strb	r2, [r5, #0]
 8010512:	6863      	ldr	r3, [r4, #4]
 8010514:	9e01      	ldr	r6, [sp, #4]
 8010516:	4639      	mov	r1, r7
 8010518:	4650      	mov	r0, sl
 801051a:	47b0      	blx	r6
 801051c:	6821      	ldr	r1, [r4, #0]
 801051e:	f8d8 3000 	ldr.w	r3, [r8]
 8010522:	f011 0f20 	tst.w	r1, #32
 8010526:	d013      	beq.n	8010550 <_scanf_i+0x1c8>
 8010528:	1d1a      	adds	r2, r3, #4
 801052a:	f8c8 2000 	str.w	r2, [r8]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	6018      	str	r0, [r3, #0]
 8010532:	68e3      	ldr	r3, [r4, #12]
 8010534:	3301      	adds	r3, #1
 8010536:	60e3      	str	r3, [r4, #12]
 8010538:	1bed      	subs	r5, r5, r7
 801053a:	44ab      	add	fp, r5
 801053c:	6925      	ldr	r5, [r4, #16]
 801053e:	445d      	add	r5, fp
 8010540:	6125      	str	r5, [r4, #16]
 8010542:	2000      	movs	r0, #0
 8010544:	b007      	add	sp, #28
 8010546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054a:	f04f 0b00 	mov.w	fp, #0
 801054e:	e7ca      	b.n	80104e6 <_scanf_i+0x15e>
 8010550:	1d1a      	adds	r2, r3, #4
 8010552:	f8c8 2000 	str.w	r2, [r8]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f011 0f01 	tst.w	r1, #1
 801055c:	bf14      	ite	ne
 801055e:	8018      	strhne	r0, [r3, #0]
 8010560:	6018      	streq	r0, [r3, #0]
 8010562:	e7e6      	b.n	8010532 <_scanf_i+0x1aa>
 8010564:	2001      	movs	r0, #1
 8010566:	e7ed      	b.n	8010544 <_scanf_i+0x1bc>
 8010568:	08011070 	.word	0x08011070
 801056c:	0801080d 	.word	0x0801080d
 8010570:	08010725 	.word	0x08010725
 8010574:	080115c0 	.word	0x080115c0

08010578 <_read_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4d07      	ldr	r5, [pc, #28]	; (8010598 <_read_r+0x20>)
 801057c:	4604      	mov	r4, r0
 801057e:	4608      	mov	r0, r1
 8010580:	4611      	mov	r1, r2
 8010582:	2200      	movs	r2, #0
 8010584:	602a      	str	r2, [r5, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	f7f4 fc76 	bl	8004e78 <_read>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_read_r+0x1e>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	b103      	cbz	r3, 8010596 <_read_r+0x1e>
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	20002c24 	.word	0x20002c24
 801059c:	00000000 	.word	0x00000000

080105a0 <nan>:
 80105a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105a8 <nan+0x8>
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	00000000 	.word	0x00000000
 80105ac:	7ff80000 	.word	0x7ff80000

080105b0 <__sccl>:
 80105b0:	b570      	push	{r4, r5, r6, lr}
 80105b2:	780b      	ldrb	r3, [r1, #0]
 80105b4:	4604      	mov	r4, r0
 80105b6:	2b5e      	cmp	r3, #94	; 0x5e
 80105b8:	bf0b      	itete	eq
 80105ba:	784b      	ldrbeq	r3, [r1, #1]
 80105bc:	1c48      	addne	r0, r1, #1
 80105be:	1c88      	addeq	r0, r1, #2
 80105c0:	2200      	movne	r2, #0
 80105c2:	bf08      	it	eq
 80105c4:	2201      	moveq	r2, #1
 80105c6:	1e61      	subs	r1, r4, #1
 80105c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80105cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80105d0:	42a9      	cmp	r1, r5
 80105d2:	d1fb      	bne.n	80105cc <__sccl+0x1c>
 80105d4:	b90b      	cbnz	r3, 80105da <__sccl+0x2a>
 80105d6:	3801      	subs	r0, #1
 80105d8:	bd70      	pop	{r4, r5, r6, pc}
 80105da:	f082 0201 	eor.w	r2, r2, #1
 80105de:	54e2      	strb	r2, [r4, r3]
 80105e0:	4605      	mov	r5, r0
 80105e2:	4628      	mov	r0, r5
 80105e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80105e8:	292d      	cmp	r1, #45	; 0x2d
 80105ea:	d006      	beq.n	80105fa <__sccl+0x4a>
 80105ec:	295d      	cmp	r1, #93	; 0x5d
 80105ee:	d0f3      	beq.n	80105d8 <__sccl+0x28>
 80105f0:	b909      	cbnz	r1, 80105f6 <__sccl+0x46>
 80105f2:	4628      	mov	r0, r5
 80105f4:	e7f0      	b.n	80105d8 <__sccl+0x28>
 80105f6:	460b      	mov	r3, r1
 80105f8:	e7f1      	b.n	80105de <__sccl+0x2e>
 80105fa:	786e      	ldrb	r6, [r5, #1]
 80105fc:	2e5d      	cmp	r6, #93	; 0x5d
 80105fe:	d0fa      	beq.n	80105f6 <__sccl+0x46>
 8010600:	42b3      	cmp	r3, r6
 8010602:	dcf8      	bgt.n	80105f6 <__sccl+0x46>
 8010604:	3502      	adds	r5, #2
 8010606:	4619      	mov	r1, r3
 8010608:	3101      	adds	r1, #1
 801060a:	428e      	cmp	r6, r1
 801060c:	5462      	strb	r2, [r4, r1]
 801060e:	dcfb      	bgt.n	8010608 <__sccl+0x58>
 8010610:	1af1      	subs	r1, r6, r3
 8010612:	3901      	subs	r1, #1
 8010614:	1c58      	adds	r0, r3, #1
 8010616:	42b3      	cmp	r3, r6
 8010618:	bfa8      	it	ge
 801061a:	2100      	movge	r1, #0
 801061c:	1843      	adds	r3, r0, r1
 801061e:	e7e0      	b.n	80105e2 <__sccl+0x32>

08010620 <_strtol_l.constprop.0>:
 8010620:	2b01      	cmp	r3, #1
 8010622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010626:	d001      	beq.n	801062c <_strtol_l.constprop.0+0xc>
 8010628:	2b24      	cmp	r3, #36	; 0x24
 801062a:	d906      	bls.n	801063a <_strtol_l.constprop.0+0x1a>
 801062c:	f7fc fe6e 	bl	800d30c <__errno>
 8010630:	2316      	movs	r3, #22
 8010632:	6003      	str	r3, [r0, #0]
 8010634:	2000      	movs	r0, #0
 8010636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010720 <_strtol_l.constprop.0+0x100>
 801063e:	460d      	mov	r5, r1
 8010640:	462e      	mov	r6, r5
 8010642:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010646:	f814 700c 	ldrb.w	r7, [r4, ip]
 801064a:	f017 0708 	ands.w	r7, r7, #8
 801064e:	d1f7      	bne.n	8010640 <_strtol_l.constprop.0+0x20>
 8010650:	2c2d      	cmp	r4, #45	; 0x2d
 8010652:	d132      	bne.n	80106ba <_strtol_l.constprop.0+0x9a>
 8010654:	782c      	ldrb	r4, [r5, #0]
 8010656:	2701      	movs	r7, #1
 8010658:	1cb5      	adds	r5, r6, #2
 801065a:	2b00      	cmp	r3, #0
 801065c:	d05b      	beq.n	8010716 <_strtol_l.constprop.0+0xf6>
 801065e:	2b10      	cmp	r3, #16
 8010660:	d109      	bne.n	8010676 <_strtol_l.constprop.0+0x56>
 8010662:	2c30      	cmp	r4, #48	; 0x30
 8010664:	d107      	bne.n	8010676 <_strtol_l.constprop.0+0x56>
 8010666:	782c      	ldrb	r4, [r5, #0]
 8010668:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801066c:	2c58      	cmp	r4, #88	; 0x58
 801066e:	d14d      	bne.n	801070c <_strtol_l.constprop.0+0xec>
 8010670:	786c      	ldrb	r4, [r5, #1]
 8010672:	2310      	movs	r3, #16
 8010674:	3502      	adds	r5, #2
 8010676:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801067a:	f108 38ff 	add.w	r8, r8, #4294967295
 801067e:	f04f 0c00 	mov.w	ip, #0
 8010682:	fbb8 f9f3 	udiv	r9, r8, r3
 8010686:	4666      	mov	r6, ip
 8010688:	fb03 8a19 	mls	sl, r3, r9, r8
 801068c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010690:	f1be 0f09 	cmp.w	lr, #9
 8010694:	d816      	bhi.n	80106c4 <_strtol_l.constprop.0+0xa4>
 8010696:	4674      	mov	r4, lr
 8010698:	42a3      	cmp	r3, r4
 801069a:	dd24      	ble.n	80106e6 <_strtol_l.constprop.0+0xc6>
 801069c:	f1bc 0f00 	cmp.w	ip, #0
 80106a0:	db1e      	blt.n	80106e0 <_strtol_l.constprop.0+0xc0>
 80106a2:	45b1      	cmp	r9, r6
 80106a4:	d31c      	bcc.n	80106e0 <_strtol_l.constprop.0+0xc0>
 80106a6:	d101      	bne.n	80106ac <_strtol_l.constprop.0+0x8c>
 80106a8:	45a2      	cmp	sl, r4
 80106aa:	db19      	blt.n	80106e0 <_strtol_l.constprop.0+0xc0>
 80106ac:	fb06 4603 	mla	r6, r6, r3, r4
 80106b0:	f04f 0c01 	mov.w	ip, #1
 80106b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106b8:	e7e8      	b.n	801068c <_strtol_l.constprop.0+0x6c>
 80106ba:	2c2b      	cmp	r4, #43	; 0x2b
 80106bc:	bf04      	itt	eq
 80106be:	782c      	ldrbeq	r4, [r5, #0]
 80106c0:	1cb5      	addeq	r5, r6, #2
 80106c2:	e7ca      	b.n	801065a <_strtol_l.constprop.0+0x3a>
 80106c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80106c8:	f1be 0f19 	cmp.w	lr, #25
 80106cc:	d801      	bhi.n	80106d2 <_strtol_l.constprop.0+0xb2>
 80106ce:	3c37      	subs	r4, #55	; 0x37
 80106d0:	e7e2      	b.n	8010698 <_strtol_l.constprop.0+0x78>
 80106d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80106d6:	f1be 0f19 	cmp.w	lr, #25
 80106da:	d804      	bhi.n	80106e6 <_strtol_l.constprop.0+0xc6>
 80106dc:	3c57      	subs	r4, #87	; 0x57
 80106de:	e7db      	b.n	8010698 <_strtol_l.constprop.0+0x78>
 80106e0:	f04f 3cff 	mov.w	ip, #4294967295
 80106e4:	e7e6      	b.n	80106b4 <_strtol_l.constprop.0+0x94>
 80106e6:	f1bc 0f00 	cmp.w	ip, #0
 80106ea:	da05      	bge.n	80106f8 <_strtol_l.constprop.0+0xd8>
 80106ec:	2322      	movs	r3, #34	; 0x22
 80106ee:	6003      	str	r3, [r0, #0]
 80106f0:	4646      	mov	r6, r8
 80106f2:	b942      	cbnz	r2, 8010706 <_strtol_l.constprop.0+0xe6>
 80106f4:	4630      	mov	r0, r6
 80106f6:	e79e      	b.n	8010636 <_strtol_l.constprop.0+0x16>
 80106f8:	b107      	cbz	r7, 80106fc <_strtol_l.constprop.0+0xdc>
 80106fa:	4276      	negs	r6, r6
 80106fc:	2a00      	cmp	r2, #0
 80106fe:	d0f9      	beq.n	80106f4 <_strtol_l.constprop.0+0xd4>
 8010700:	f1bc 0f00 	cmp.w	ip, #0
 8010704:	d000      	beq.n	8010708 <_strtol_l.constprop.0+0xe8>
 8010706:	1e69      	subs	r1, r5, #1
 8010708:	6011      	str	r1, [r2, #0]
 801070a:	e7f3      	b.n	80106f4 <_strtol_l.constprop.0+0xd4>
 801070c:	2430      	movs	r4, #48	; 0x30
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1b1      	bne.n	8010676 <_strtol_l.constprop.0+0x56>
 8010712:	2308      	movs	r3, #8
 8010714:	e7af      	b.n	8010676 <_strtol_l.constprop.0+0x56>
 8010716:	2c30      	cmp	r4, #48	; 0x30
 8010718:	d0a5      	beq.n	8010666 <_strtol_l.constprop.0+0x46>
 801071a:	230a      	movs	r3, #10
 801071c:	e7ab      	b.n	8010676 <_strtol_l.constprop.0+0x56>
 801071e:	bf00      	nop
 8010720:	080111b5 	.word	0x080111b5

08010724 <_strtol_r>:
 8010724:	f7ff bf7c 	b.w	8010620 <_strtol_l.constprop.0>

08010728 <_strtoul_l.constprop.0>:
 8010728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801072c:	4f36      	ldr	r7, [pc, #216]	; (8010808 <_strtoul_l.constprop.0+0xe0>)
 801072e:	4686      	mov	lr, r0
 8010730:	460d      	mov	r5, r1
 8010732:	4628      	mov	r0, r5
 8010734:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010738:	5de6      	ldrb	r6, [r4, r7]
 801073a:	f016 0608 	ands.w	r6, r6, #8
 801073e:	d1f8      	bne.n	8010732 <_strtoul_l.constprop.0+0xa>
 8010740:	2c2d      	cmp	r4, #45	; 0x2d
 8010742:	d12f      	bne.n	80107a4 <_strtoul_l.constprop.0+0x7c>
 8010744:	782c      	ldrb	r4, [r5, #0]
 8010746:	2601      	movs	r6, #1
 8010748:	1c85      	adds	r5, r0, #2
 801074a:	2b00      	cmp	r3, #0
 801074c:	d057      	beq.n	80107fe <_strtoul_l.constprop.0+0xd6>
 801074e:	2b10      	cmp	r3, #16
 8010750:	d109      	bne.n	8010766 <_strtoul_l.constprop.0+0x3e>
 8010752:	2c30      	cmp	r4, #48	; 0x30
 8010754:	d107      	bne.n	8010766 <_strtoul_l.constprop.0+0x3e>
 8010756:	7828      	ldrb	r0, [r5, #0]
 8010758:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801075c:	2858      	cmp	r0, #88	; 0x58
 801075e:	d149      	bne.n	80107f4 <_strtoul_l.constprop.0+0xcc>
 8010760:	786c      	ldrb	r4, [r5, #1]
 8010762:	2310      	movs	r3, #16
 8010764:	3502      	adds	r5, #2
 8010766:	f04f 38ff 	mov.w	r8, #4294967295
 801076a:	2700      	movs	r7, #0
 801076c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010770:	fb03 f908 	mul.w	r9, r3, r8
 8010774:	ea6f 0909 	mvn.w	r9, r9
 8010778:	4638      	mov	r0, r7
 801077a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801077e:	f1bc 0f09 	cmp.w	ip, #9
 8010782:	d814      	bhi.n	80107ae <_strtoul_l.constprop.0+0x86>
 8010784:	4664      	mov	r4, ip
 8010786:	42a3      	cmp	r3, r4
 8010788:	dd22      	ble.n	80107d0 <_strtoul_l.constprop.0+0xa8>
 801078a:	2f00      	cmp	r7, #0
 801078c:	db1d      	blt.n	80107ca <_strtoul_l.constprop.0+0xa2>
 801078e:	4580      	cmp	r8, r0
 8010790:	d31b      	bcc.n	80107ca <_strtoul_l.constprop.0+0xa2>
 8010792:	d101      	bne.n	8010798 <_strtoul_l.constprop.0+0x70>
 8010794:	45a1      	cmp	r9, r4
 8010796:	db18      	blt.n	80107ca <_strtoul_l.constprop.0+0xa2>
 8010798:	fb00 4003 	mla	r0, r0, r3, r4
 801079c:	2701      	movs	r7, #1
 801079e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107a2:	e7ea      	b.n	801077a <_strtoul_l.constprop.0+0x52>
 80107a4:	2c2b      	cmp	r4, #43	; 0x2b
 80107a6:	bf04      	itt	eq
 80107a8:	782c      	ldrbeq	r4, [r5, #0]
 80107aa:	1c85      	addeq	r5, r0, #2
 80107ac:	e7cd      	b.n	801074a <_strtoul_l.constprop.0+0x22>
 80107ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80107b2:	f1bc 0f19 	cmp.w	ip, #25
 80107b6:	d801      	bhi.n	80107bc <_strtoul_l.constprop.0+0x94>
 80107b8:	3c37      	subs	r4, #55	; 0x37
 80107ba:	e7e4      	b.n	8010786 <_strtoul_l.constprop.0+0x5e>
 80107bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80107c0:	f1bc 0f19 	cmp.w	ip, #25
 80107c4:	d804      	bhi.n	80107d0 <_strtoul_l.constprop.0+0xa8>
 80107c6:	3c57      	subs	r4, #87	; 0x57
 80107c8:	e7dd      	b.n	8010786 <_strtoul_l.constprop.0+0x5e>
 80107ca:	f04f 37ff 	mov.w	r7, #4294967295
 80107ce:	e7e6      	b.n	801079e <_strtoul_l.constprop.0+0x76>
 80107d0:	2f00      	cmp	r7, #0
 80107d2:	da07      	bge.n	80107e4 <_strtoul_l.constprop.0+0xbc>
 80107d4:	2322      	movs	r3, #34	; 0x22
 80107d6:	f8ce 3000 	str.w	r3, [lr]
 80107da:	f04f 30ff 	mov.w	r0, #4294967295
 80107de:	b932      	cbnz	r2, 80107ee <_strtoul_l.constprop.0+0xc6>
 80107e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107e4:	b106      	cbz	r6, 80107e8 <_strtoul_l.constprop.0+0xc0>
 80107e6:	4240      	negs	r0, r0
 80107e8:	2a00      	cmp	r2, #0
 80107ea:	d0f9      	beq.n	80107e0 <_strtoul_l.constprop.0+0xb8>
 80107ec:	b107      	cbz	r7, 80107f0 <_strtoul_l.constprop.0+0xc8>
 80107ee:	1e69      	subs	r1, r5, #1
 80107f0:	6011      	str	r1, [r2, #0]
 80107f2:	e7f5      	b.n	80107e0 <_strtoul_l.constprop.0+0xb8>
 80107f4:	2430      	movs	r4, #48	; 0x30
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1b5      	bne.n	8010766 <_strtoul_l.constprop.0+0x3e>
 80107fa:	2308      	movs	r3, #8
 80107fc:	e7b3      	b.n	8010766 <_strtoul_l.constprop.0+0x3e>
 80107fe:	2c30      	cmp	r4, #48	; 0x30
 8010800:	d0a9      	beq.n	8010756 <_strtoul_l.constprop.0+0x2e>
 8010802:	230a      	movs	r3, #10
 8010804:	e7af      	b.n	8010766 <_strtoul_l.constprop.0+0x3e>
 8010806:	bf00      	nop
 8010808:	080111b5 	.word	0x080111b5

0801080c <_strtoul_r>:
 801080c:	f7ff bf8c 	b.w	8010728 <_strtoul_l.constprop.0>

08010810 <__submore>:
 8010810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010814:	460c      	mov	r4, r1
 8010816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801081c:	4299      	cmp	r1, r3
 801081e:	d11d      	bne.n	801085c <__submore+0x4c>
 8010820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010824:	f7fc ff38 	bl	800d698 <_malloc_r>
 8010828:	b918      	cbnz	r0, 8010832 <__submore+0x22>
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010836:	63a3      	str	r3, [r4, #56]	; 0x38
 8010838:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801083c:	6360      	str	r0, [r4, #52]	; 0x34
 801083e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010842:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010846:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801084a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801084e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010852:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010856:	6020      	str	r0, [r4, #0]
 8010858:	2000      	movs	r0, #0
 801085a:	e7e8      	b.n	801082e <__submore+0x1e>
 801085c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801085e:	0077      	lsls	r7, r6, #1
 8010860:	463a      	mov	r2, r7
 8010862:	f7ff f846 	bl	800f8f2 <_realloc_r>
 8010866:	4605      	mov	r5, r0
 8010868:	2800      	cmp	r0, #0
 801086a:	d0de      	beq.n	801082a <__submore+0x1a>
 801086c:	eb00 0806 	add.w	r8, r0, r6
 8010870:	4601      	mov	r1, r0
 8010872:	4632      	mov	r2, r6
 8010874:	4640      	mov	r0, r8
 8010876:	f7fc fe8d 	bl	800d594 <memcpy>
 801087a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801087e:	f8c4 8000 	str.w	r8, [r4]
 8010882:	e7e9      	b.n	8010858 <__submore+0x48>

08010884 <__ascii_wctomb>:
 8010884:	b149      	cbz	r1, 801089a <__ascii_wctomb+0x16>
 8010886:	2aff      	cmp	r2, #255	; 0xff
 8010888:	bf85      	ittet	hi
 801088a:	238a      	movhi	r3, #138	; 0x8a
 801088c:	6003      	strhi	r3, [r0, #0]
 801088e:	700a      	strbls	r2, [r1, #0]
 8010890:	f04f 30ff 	movhi.w	r0, #4294967295
 8010894:	bf98      	it	ls
 8010896:	2001      	movls	r0, #1
 8010898:	4770      	bx	lr
 801089a:	4608      	mov	r0, r1
 801089c:	4770      	bx	lr
	...

080108a0 <__assert_func>:
 80108a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108a2:	4614      	mov	r4, r2
 80108a4:	461a      	mov	r2, r3
 80108a6:	4b09      	ldr	r3, [pc, #36]	; (80108cc <__assert_func+0x2c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4605      	mov	r5, r0
 80108ac:	68d8      	ldr	r0, [r3, #12]
 80108ae:	b14c      	cbz	r4, 80108c4 <__assert_func+0x24>
 80108b0:	4b07      	ldr	r3, [pc, #28]	; (80108d0 <__assert_func+0x30>)
 80108b2:	9100      	str	r1, [sp, #0]
 80108b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108b8:	4906      	ldr	r1, [pc, #24]	; (80108d4 <__assert_func+0x34>)
 80108ba:	462b      	mov	r3, r5
 80108bc:	f000 f80e 	bl	80108dc <fiprintf>
 80108c0:	f000 fa5a 	bl	8010d78 <abort>
 80108c4:	4b04      	ldr	r3, [pc, #16]	; (80108d8 <__assert_func+0x38>)
 80108c6:	461c      	mov	r4, r3
 80108c8:	e7f3      	b.n	80108b2 <__assert_func+0x12>
 80108ca:	bf00      	nop
 80108cc:	20000034 	.word	0x20000034
 80108d0:	080115c2 	.word	0x080115c2
 80108d4:	080115cf 	.word	0x080115cf
 80108d8:	080115fd 	.word	0x080115fd

080108dc <fiprintf>:
 80108dc:	b40e      	push	{r1, r2, r3}
 80108de:	b503      	push	{r0, r1, lr}
 80108e0:	4601      	mov	r1, r0
 80108e2:	ab03      	add	r3, sp, #12
 80108e4:	4805      	ldr	r0, [pc, #20]	; (80108fc <fiprintf+0x20>)
 80108e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ea:	6800      	ldr	r0, [r0, #0]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	f000 f853 	bl	8010998 <_vfiprintf_r>
 80108f2:	b002      	add	sp, #8
 80108f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108f8:	b003      	add	sp, #12
 80108fa:	4770      	bx	lr
 80108fc:	20000034 	.word	0x20000034

08010900 <memmove>:
 8010900:	4288      	cmp	r0, r1
 8010902:	b510      	push	{r4, lr}
 8010904:	eb01 0402 	add.w	r4, r1, r2
 8010908:	d902      	bls.n	8010910 <memmove+0x10>
 801090a:	4284      	cmp	r4, r0
 801090c:	4623      	mov	r3, r4
 801090e:	d807      	bhi.n	8010920 <memmove+0x20>
 8010910:	1e43      	subs	r3, r0, #1
 8010912:	42a1      	cmp	r1, r4
 8010914:	d008      	beq.n	8010928 <memmove+0x28>
 8010916:	f811 2b01 	ldrb.w	r2, [r1], #1
 801091a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801091e:	e7f8      	b.n	8010912 <memmove+0x12>
 8010920:	4402      	add	r2, r0
 8010922:	4601      	mov	r1, r0
 8010924:	428a      	cmp	r2, r1
 8010926:	d100      	bne.n	801092a <memmove+0x2a>
 8010928:	bd10      	pop	{r4, pc}
 801092a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801092e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010932:	e7f7      	b.n	8010924 <memmove+0x24>

08010934 <_malloc_usable_size_r>:
 8010934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010938:	1f18      	subs	r0, r3, #4
 801093a:	2b00      	cmp	r3, #0
 801093c:	bfbc      	itt	lt
 801093e:	580b      	ldrlt	r3, [r1, r0]
 8010940:	18c0      	addlt	r0, r0, r3
 8010942:	4770      	bx	lr

08010944 <__sfputc_r>:
 8010944:	6893      	ldr	r3, [r2, #8]
 8010946:	3b01      	subs	r3, #1
 8010948:	2b00      	cmp	r3, #0
 801094a:	b410      	push	{r4}
 801094c:	6093      	str	r3, [r2, #8]
 801094e:	da08      	bge.n	8010962 <__sfputc_r+0x1e>
 8010950:	6994      	ldr	r4, [r2, #24]
 8010952:	42a3      	cmp	r3, r4
 8010954:	db01      	blt.n	801095a <__sfputc_r+0x16>
 8010956:	290a      	cmp	r1, #10
 8010958:	d103      	bne.n	8010962 <__sfputc_r+0x1e>
 801095a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801095e:	f000 b94b 	b.w	8010bf8 <__swbuf_r>
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	1c58      	adds	r0, r3, #1
 8010966:	6010      	str	r0, [r2, #0]
 8010968:	7019      	strb	r1, [r3, #0]
 801096a:	4608      	mov	r0, r1
 801096c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010970:	4770      	bx	lr

08010972 <__sfputs_r>:
 8010972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	4614      	mov	r4, r2
 801097a:	18d5      	adds	r5, r2, r3
 801097c:	42ac      	cmp	r4, r5
 801097e:	d101      	bne.n	8010984 <__sfputs_r+0x12>
 8010980:	2000      	movs	r0, #0
 8010982:	e007      	b.n	8010994 <__sfputs_r+0x22>
 8010984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010988:	463a      	mov	r2, r7
 801098a:	4630      	mov	r0, r6
 801098c:	f7ff ffda 	bl	8010944 <__sfputc_r>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d1f3      	bne.n	801097c <__sfputs_r+0xa>
 8010994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010998 <_vfiprintf_r>:
 8010998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	460d      	mov	r5, r1
 801099e:	b09d      	sub	sp, #116	; 0x74
 80109a0:	4614      	mov	r4, r2
 80109a2:	4698      	mov	r8, r3
 80109a4:	4606      	mov	r6, r0
 80109a6:	b118      	cbz	r0, 80109b0 <_vfiprintf_r+0x18>
 80109a8:	6983      	ldr	r3, [r0, #24]
 80109aa:	b90b      	cbnz	r3, 80109b0 <_vfiprintf_r+0x18>
 80109ac:	f7fc fd0c 	bl	800d3c8 <__sinit>
 80109b0:	4b89      	ldr	r3, [pc, #548]	; (8010bd8 <_vfiprintf_r+0x240>)
 80109b2:	429d      	cmp	r5, r3
 80109b4:	d11b      	bne.n	80109ee <_vfiprintf_r+0x56>
 80109b6:	6875      	ldr	r5, [r6, #4]
 80109b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109ba:	07d9      	lsls	r1, r3, #31
 80109bc:	d405      	bmi.n	80109ca <_vfiprintf_r+0x32>
 80109be:	89ab      	ldrh	r3, [r5, #12]
 80109c0:	059a      	lsls	r2, r3, #22
 80109c2:	d402      	bmi.n	80109ca <_vfiprintf_r+0x32>
 80109c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109c6:	f7fc fdc2 	bl	800d54e <__retarget_lock_acquire_recursive>
 80109ca:	89ab      	ldrh	r3, [r5, #12]
 80109cc:	071b      	lsls	r3, r3, #28
 80109ce:	d501      	bpl.n	80109d4 <_vfiprintf_r+0x3c>
 80109d0:	692b      	ldr	r3, [r5, #16]
 80109d2:	b9eb      	cbnz	r3, 8010a10 <_vfiprintf_r+0x78>
 80109d4:	4629      	mov	r1, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	f000 f960 	bl	8010c9c <__swsetup_r>
 80109dc:	b1c0      	cbz	r0, 8010a10 <_vfiprintf_r+0x78>
 80109de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e0:	07dc      	lsls	r4, r3, #31
 80109e2:	d50e      	bpl.n	8010a02 <_vfiprintf_r+0x6a>
 80109e4:	f04f 30ff 	mov.w	r0, #4294967295
 80109e8:	b01d      	add	sp, #116	; 0x74
 80109ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ee:	4b7b      	ldr	r3, [pc, #492]	; (8010bdc <_vfiprintf_r+0x244>)
 80109f0:	429d      	cmp	r5, r3
 80109f2:	d101      	bne.n	80109f8 <_vfiprintf_r+0x60>
 80109f4:	68b5      	ldr	r5, [r6, #8]
 80109f6:	e7df      	b.n	80109b8 <_vfiprintf_r+0x20>
 80109f8:	4b79      	ldr	r3, [pc, #484]	; (8010be0 <_vfiprintf_r+0x248>)
 80109fa:	429d      	cmp	r5, r3
 80109fc:	bf08      	it	eq
 80109fe:	68f5      	ldreq	r5, [r6, #12]
 8010a00:	e7da      	b.n	80109b8 <_vfiprintf_r+0x20>
 8010a02:	89ab      	ldrh	r3, [r5, #12]
 8010a04:	0598      	lsls	r0, r3, #22
 8010a06:	d4ed      	bmi.n	80109e4 <_vfiprintf_r+0x4c>
 8010a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a0a:	f7fc fda1 	bl	800d550 <__retarget_lock_release_recursive>
 8010a0e:	e7e9      	b.n	80109e4 <_vfiprintf_r+0x4c>
 8010a10:	2300      	movs	r3, #0
 8010a12:	9309      	str	r3, [sp, #36]	; 0x24
 8010a14:	2320      	movs	r3, #32
 8010a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a1e:	2330      	movs	r3, #48	; 0x30
 8010a20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010be4 <_vfiprintf_r+0x24c>
 8010a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a28:	f04f 0901 	mov.w	r9, #1
 8010a2c:	4623      	mov	r3, r4
 8010a2e:	469a      	mov	sl, r3
 8010a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a34:	b10a      	cbz	r2, 8010a3a <_vfiprintf_r+0xa2>
 8010a36:	2a25      	cmp	r2, #37	; 0x25
 8010a38:	d1f9      	bne.n	8010a2e <_vfiprintf_r+0x96>
 8010a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a3e:	d00b      	beq.n	8010a58 <_vfiprintf_r+0xc0>
 8010a40:	465b      	mov	r3, fp
 8010a42:	4622      	mov	r2, r4
 8010a44:	4629      	mov	r1, r5
 8010a46:	4630      	mov	r0, r6
 8010a48:	f7ff ff93 	bl	8010972 <__sfputs_r>
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	f000 80aa 	beq.w	8010ba6 <_vfiprintf_r+0x20e>
 8010a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a54:	445a      	add	r2, fp
 8010a56:	9209      	str	r2, [sp, #36]	; 0x24
 8010a58:	f89a 3000 	ldrb.w	r3, [sl]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 80a2 	beq.w	8010ba6 <_vfiprintf_r+0x20e>
 8010a62:	2300      	movs	r3, #0
 8010a64:	f04f 32ff 	mov.w	r2, #4294967295
 8010a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a6c:	f10a 0a01 	add.w	sl, sl, #1
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	9307      	str	r3, [sp, #28]
 8010a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a78:	931a      	str	r3, [sp, #104]	; 0x68
 8010a7a:	4654      	mov	r4, sl
 8010a7c:	2205      	movs	r2, #5
 8010a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a82:	4858      	ldr	r0, [pc, #352]	; (8010be4 <_vfiprintf_r+0x24c>)
 8010a84:	f7ef fbc4 	bl	8000210 <memchr>
 8010a88:	9a04      	ldr	r2, [sp, #16]
 8010a8a:	b9d8      	cbnz	r0, 8010ac4 <_vfiprintf_r+0x12c>
 8010a8c:	06d1      	lsls	r1, r2, #27
 8010a8e:	bf44      	itt	mi
 8010a90:	2320      	movmi	r3, #32
 8010a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a96:	0713      	lsls	r3, r2, #28
 8010a98:	bf44      	itt	mi
 8010a9a:	232b      	movmi	r3, #43	; 0x2b
 8010a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8010aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8010aa6:	d015      	beq.n	8010ad4 <_vfiprintf_r+0x13c>
 8010aa8:	9a07      	ldr	r2, [sp, #28]
 8010aaa:	4654      	mov	r4, sl
 8010aac:	2000      	movs	r0, #0
 8010aae:	f04f 0c0a 	mov.w	ip, #10
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ab8:	3b30      	subs	r3, #48	; 0x30
 8010aba:	2b09      	cmp	r3, #9
 8010abc:	d94e      	bls.n	8010b5c <_vfiprintf_r+0x1c4>
 8010abe:	b1b0      	cbz	r0, 8010aee <_vfiprintf_r+0x156>
 8010ac0:	9207      	str	r2, [sp, #28]
 8010ac2:	e014      	b.n	8010aee <_vfiprintf_r+0x156>
 8010ac4:	eba0 0308 	sub.w	r3, r0, r8
 8010ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8010acc:	4313      	orrs	r3, r2
 8010ace:	9304      	str	r3, [sp, #16]
 8010ad0:	46a2      	mov	sl, r4
 8010ad2:	e7d2      	b.n	8010a7a <_vfiprintf_r+0xe2>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	1d19      	adds	r1, r3, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	9103      	str	r1, [sp, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	bfbb      	ittet	lt
 8010ae0:	425b      	neglt	r3, r3
 8010ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ae6:	9307      	strge	r3, [sp, #28]
 8010ae8:	9307      	strlt	r3, [sp, #28]
 8010aea:	bfb8      	it	lt
 8010aec:	9204      	strlt	r2, [sp, #16]
 8010aee:	7823      	ldrb	r3, [r4, #0]
 8010af0:	2b2e      	cmp	r3, #46	; 0x2e
 8010af2:	d10c      	bne.n	8010b0e <_vfiprintf_r+0x176>
 8010af4:	7863      	ldrb	r3, [r4, #1]
 8010af6:	2b2a      	cmp	r3, #42	; 0x2a
 8010af8:	d135      	bne.n	8010b66 <_vfiprintf_r+0x1ce>
 8010afa:	9b03      	ldr	r3, [sp, #12]
 8010afc:	1d1a      	adds	r2, r3, #4
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	9203      	str	r2, [sp, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	bfb8      	it	lt
 8010b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b0a:	3402      	adds	r4, #2
 8010b0c:	9305      	str	r3, [sp, #20]
 8010b0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010bf4 <_vfiprintf_r+0x25c>
 8010b12:	7821      	ldrb	r1, [r4, #0]
 8010b14:	2203      	movs	r2, #3
 8010b16:	4650      	mov	r0, sl
 8010b18:	f7ef fb7a 	bl	8000210 <memchr>
 8010b1c:	b140      	cbz	r0, 8010b30 <_vfiprintf_r+0x198>
 8010b1e:	2340      	movs	r3, #64	; 0x40
 8010b20:	eba0 000a 	sub.w	r0, r0, sl
 8010b24:	fa03 f000 	lsl.w	r0, r3, r0
 8010b28:	9b04      	ldr	r3, [sp, #16]
 8010b2a:	4303      	orrs	r3, r0
 8010b2c:	3401      	adds	r4, #1
 8010b2e:	9304      	str	r3, [sp, #16]
 8010b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b34:	482c      	ldr	r0, [pc, #176]	; (8010be8 <_vfiprintf_r+0x250>)
 8010b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b3a:	2206      	movs	r2, #6
 8010b3c:	f7ef fb68 	bl	8000210 <memchr>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d03f      	beq.n	8010bc4 <_vfiprintf_r+0x22c>
 8010b44:	4b29      	ldr	r3, [pc, #164]	; (8010bec <_vfiprintf_r+0x254>)
 8010b46:	bb1b      	cbnz	r3, 8010b90 <_vfiprintf_r+0x1f8>
 8010b48:	9b03      	ldr	r3, [sp, #12]
 8010b4a:	3307      	adds	r3, #7
 8010b4c:	f023 0307 	bic.w	r3, r3, #7
 8010b50:	3308      	adds	r3, #8
 8010b52:	9303      	str	r3, [sp, #12]
 8010b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b56:	443b      	add	r3, r7
 8010b58:	9309      	str	r3, [sp, #36]	; 0x24
 8010b5a:	e767      	b.n	8010a2c <_vfiprintf_r+0x94>
 8010b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b60:	460c      	mov	r4, r1
 8010b62:	2001      	movs	r0, #1
 8010b64:	e7a5      	b.n	8010ab2 <_vfiprintf_r+0x11a>
 8010b66:	2300      	movs	r3, #0
 8010b68:	3401      	adds	r4, #1
 8010b6a:	9305      	str	r3, [sp, #20]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f04f 0c0a 	mov.w	ip, #10
 8010b72:	4620      	mov	r0, r4
 8010b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b78:	3a30      	subs	r2, #48	; 0x30
 8010b7a:	2a09      	cmp	r2, #9
 8010b7c:	d903      	bls.n	8010b86 <_vfiprintf_r+0x1ee>
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d0c5      	beq.n	8010b0e <_vfiprintf_r+0x176>
 8010b82:	9105      	str	r1, [sp, #20]
 8010b84:	e7c3      	b.n	8010b0e <_vfiprintf_r+0x176>
 8010b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	e7f0      	b.n	8010b72 <_vfiprintf_r+0x1da>
 8010b90:	ab03      	add	r3, sp, #12
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	462a      	mov	r2, r5
 8010b96:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <_vfiprintf_r+0x258>)
 8010b98:	a904      	add	r1, sp, #16
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	f3af 8000 	nop.w
 8010ba0:	4607      	mov	r7, r0
 8010ba2:	1c78      	adds	r0, r7, #1
 8010ba4:	d1d6      	bne.n	8010b54 <_vfiprintf_r+0x1bc>
 8010ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ba8:	07d9      	lsls	r1, r3, #31
 8010baa:	d405      	bmi.n	8010bb8 <_vfiprintf_r+0x220>
 8010bac:	89ab      	ldrh	r3, [r5, #12]
 8010bae:	059a      	lsls	r2, r3, #22
 8010bb0:	d402      	bmi.n	8010bb8 <_vfiprintf_r+0x220>
 8010bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bb4:	f7fc fccc 	bl	800d550 <__retarget_lock_release_recursive>
 8010bb8:	89ab      	ldrh	r3, [r5, #12]
 8010bba:	065b      	lsls	r3, r3, #25
 8010bbc:	f53f af12 	bmi.w	80109e4 <_vfiprintf_r+0x4c>
 8010bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bc2:	e711      	b.n	80109e8 <_vfiprintf_r+0x50>
 8010bc4:	ab03      	add	r3, sp, #12
 8010bc6:	9300      	str	r3, [sp, #0]
 8010bc8:	462a      	mov	r2, r5
 8010bca:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <_vfiprintf_r+0x258>)
 8010bcc:	a904      	add	r1, sp, #16
 8010bce:	4630      	mov	r0, r6
 8010bd0:	f7ff fa5a 	bl	8010088 <_printf_i>
 8010bd4:	e7e4      	b.n	8010ba0 <_vfiprintf_r+0x208>
 8010bd6:	bf00      	nop
 8010bd8:	080112d8 	.word	0x080112d8
 8010bdc:	080112f8 	.word	0x080112f8
 8010be0:	080112b8 	.word	0x080112b8
 8010be4:	08011574 	.word	0x08011574
 8010be8:	0801157e 	.word	0x0801157e
 8010bec:	00000000 	.word	0x00000000
 8010bf0:	08010973 	.word	0x08010973
 8010bf4:	0801157a 	.word	0x0801157a

08010bf8 <__swbuf_r>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	460e      	mov	r6, r1
 8010bfc:	4614      	mov	r4, r2
 8010bfe:	4605      	mov	r5, r0
 8010c00:	b118      	cbz	r0, 8010c0a <__swbuf_r+0x12>
 8010c02:	6983      	ldr	r3, [r0, #24]
 8010c04:	b90b      	cbnz	r3, 8010c0a <__swbuf_r+0x12>
 8010c06:	f7fc fbdf 	bl	800d3c8 <__sinit>
 8010c0a:	4b21      	ldr	r3, [pc, #132]	; (8010c90 <__swbuf_r+0x98>)
 8010c0c:	429c      	cmp	r4, r3
 8010c0e:	d12b      	bne.n	8010c68 <__swbuf_r+0x70>
 8010c10:	686c      	ldr	r4, [r5, #4]
 8010c12:	69a3      	ldr	r3, [r4, #24]
 8010c14:	60a3      	str	r3, [r4, #8]
 8010c16:	89a3      	ldrh	r3, [r4, #12]
 8010c18:	071a      	lsls	r2, r3, #28
 8010c1a:	d52f      	bpl.n	8010c7c <__swbuf_r+0x84>
 8010c1c:	6923      	ldr	r3, [r4, #16]
 8010c1e:	b36b      	cbz	r3, 8010c7c <__swbuf_r+0x84>
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	6820      	ldr	r0, [r4, #0]
 8010c24:	1ac0      	subs	r0, r0, r3
 8010c26:	6963      	ldr	r3, [r4, #20]
 8010c28:	b2f6      	uxtb	r6, r6
 8010c2a:	4283      	cmp	r3, r0
 8010c2c:	4637      	mov	r7, r6
 8010c2e:	dc04      	bgt.n	8010c3a <__swbuf_r+0x42>
 8010c30:	4621      	mov	r1, r4
 8010c32:	4628      	mov	r0, r5
 8010c34:	f7fd fdaa 	bl	800e78c <_fflush_r>
 8010c38:	bb30      	cbnz	r0, 8010c88 <__swbuf_r+0x90>
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	60a3      	str	r3, [r4, #8]
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	6022      	str	r2, [r4, #0]
 8010c46:	701e      	strb	r6, [r3, #0]
 8010c48:	6963      	ldr	r3, [r4, #20]
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	4283      	cmp	r3, r0
 8010c4e:	d004      	beq.n	8010c5a <__swbuf_r+0x62>
 8010c50:	89a3      	ldrh	r3, [r4, #12]
 8010c52:	07db      	lsls	r3, r3, #31
 8010c54:	d506      	bpl.n	8010c64 <__swbuf_r+0x6c>
 8010c56:	2e0a      	cmp	r6, #10
 8010c58:	d104      	bne.n	8010c64 <__swbuf_r+0x6c>
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f7fd fd95 	bl	800e78c <_fflush_r>
 8010c62:	b988      	cbnz	r0, 8010c88 <__swbuf_r+0x90>
 8010c64:	4638      	mov	r0, r7
 8010c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c68:	4b0a      	ldr	r3, [pc, #40]	; (8010c94 <__swbuf_r+0x9c>)
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	d101      	bne.n	8010c72 <__swbuf_r+0x7a>
 8010c6e:	68ac      	ldr	r4, [r5, #8]
 8010c70:	e7cf      	b.n	8010c12 <__swbuf_r+0x1a>
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <__swbuf_r+0xa0>)
 8010c74:	429c      	cmp	r4, r3
 8010c76:	bf08      	it	eq
 8010c78:	68ec      	ldreq	r4, [r5, #12]
 8010c7a:	e7ca      	b.n	8010c12 <__swbuf_r+0x1a>
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f000 f80c 	bl	8010c9c <__swsetup_r>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d0cb      	beq.n	8010c20 <__swbuf_r+0x28>
 8010c88:	f04f 37ff 	mov.w	r7, #4294967295
 8010c8c:	e7ea      	b.n	8010c64 <__swbuf_r+0x6c>
 8010c8e:	bf00      	nop
 8010c90:	080112d8 	.word	0x080112d8
 8010c94:	080112f8 	.word	0x080112f8
 8010c98:	080112b8 	.word	0x080112b8

08010c9c <__swsetup_r>:
 8010c9c:	4b32      	ldr	r3, [pc, #200]	; (8010d68 <__swsetup_r+0xcc>)
 8010c9e:	b570      	push	{r4, r5, r6, lr}
 8010ca0:	681d      	ldr	r5, [r3, #0]
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	460c      	mov	r4, r1
 8010ca6:	b125      	cbz	r5, 8010cb2 <__swsetup_r+0x16>
 8010ca8:	69ab      	ldr	r3, [r5, #24]
 8010caa:	b913      	cbnz	r3, 8010cb2 <__swsetup_r+0x16>
 8010cac:	4628      	mov	r0, r5
 8010cae:	f7fc fb8b 	bl	800d3c8 <__sinit>
 8010cb2:	4b2e      	ldr	r3, [pc, #184]	; (8010d6c <__swsetup_r+0xd0>)
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	d10f      	bne.n	8010cd8 <__swsetup_r+0x3c>
 8010cb8:	686c      	ldr	r4, [r5, #4]
 8010cba:	89a3      	ldrh	r3, [r4, #12]
 8010cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010cc0:	0719      	lsls	r1, r3, #28
 8010cc2:	d42c      	bmi.n	8010d1e <__swsetup_r+0x82>
 8010cc4:	06dd      	lsls	r5, r3, #27
 8010cc6:	d411      	bmi.n	8010cec <__swsetup_r+0x50>
 8010cc8:	2309      	movs	r3, #9
 8010cca:	6033      	str	r3, [r6, #0]
 8010ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010cd0:	81a3      	strh	r3, [r4, #12]
 8010cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd6:	e03e      	b.n	8010d56 <__swsetup_r+0xba>
 8010cd8:	4b25      	ldr	r3, [pc, #148]	; (8010d70 <__swsetup_r+0xd4>)
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	d101      	bne.n	8010ce2 <__swsetup_r+0x46>
 8010cde:	68ac      	ldr	r4, [r5, #8]
 8010ce0:	e7eb      	b.n	8010cba <__swsetup_r+0x1e>
 8010ce2:	4b24      	ldr	r3, [pc, #144]	; (8010d74 <__swsetup_r+0xd8>)
 8010ce4:	429c      	cmp	r4, r3
 8010ce6:	bf08      	it	eq
 8010ce8:	68ec      	ldreq	r4, [r5, #12]
 8010cea:	e7e6      	b.n	8010cba <__swsetup_r+0x1e>
 8010cec:	0758      	lsls	r0, r3, #29
 8010cee:	d512      	bpl.n	8010d16 <__swsetup_r+0x7a>
 8010cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cf2:	b141      	cbz	r1, 8010d06 <__swsetup_r+0x6a>
 8010cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cf8:	4299      	cmp	r1, r3
 8010cfa:	d002      	beq.n	8010d02 <__swsetup_r+0x66>
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f7fc fc5f 	bl	800d5c0 <_free_r>
 8010d02:	2300      	movs	r3, #0
 8010d04:	6363      	str	r3, [r4, #52]	; 0x34
 8010d06:	89a3      	ldrh	r3, [r4, #12]
 8010d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d0c:	81a3      	strh	r3, [r4, #12]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	6923      	ldr	r3, [r4, #16]
 8010d14:	6023      	str	r3, [r4, #0]
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	f043 0308 	orr.w	r3, r3, #8
 8010d1c:	81a3      	strh	r3, [r4, #12]
 8010d1e:	6923      	ldr	r3, [r4, #16]
 8010d20:	b94b      	cbnz	r3, 8010d36 <__swsetup_r+0x9a>
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d2c:	d003      	beq.n	8010d36 <__swsetup_r+0x9a>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4630      	mov	r0, r6
 8010d32:	f000 f84d 	bl	8010dd0 <__smakebuf_r>
 8010d36:	89a0      	ldrh	r0, [r4, #12]
 8010d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d3c:	f010 0301 	ands.w	r3, r0, #1
 8010d40:	d00a      	beq.n	8010d58 <__swsetup_r+0xbc>
 8010d42:	2300      	movs	r3, #0
 8010d44:	60a3      	str	r3, [r4, #8]
 8010d46:	6963      	ldr	r3, [r4, #20]
 8010d48:	425b      	negs	r3, r3
 8010d4a:	61a3      	str	r3, [r4, #24]
 8010d4c:	6923      	ldr	r3, [r4, #16]
 8010d4e:	b943      	cbnz	r3, 8010d62 <__swsetup_r+0xc6>
 8010d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010d54:	d1ba      	bne.n	8010ccc <__swsetup_r+0x30>
 8010d56:	bd70      	pop	{r4, r5, r6, pc}
 8010d58:	0781      	lsls	r1, r0, #30
 8010d5a:	bf58      	it	pl
 8010d5c:	6963      	ldrpl	r3, [r4, #20]
 8010d5e:	60a3      	str	r3, [r4, #8]
 8010d60:	e7f4      	b.n	8010d4c <__swsetup_r+0xb0>
 8010d62:	2000      	movs	r0, #0
 8010d64:	e7f7      	b.n	8010d56 <__swsetup_r+0xba>
 8010d66:	bf00      	nop
 8010d68:	20000034 	.word	0x20000034
 8010d6c:	080112d8 	.word	0x080112d8
 8010d70:	080112f8 	.word	0x080112f8
 8010d74:	080112b8 	.word	0x080112b8

08010d78 <abort>:
 8010d78:	b508      	push	{r3, lr}
 8010d7a:	2006      	movs	r0, #6
 8010d7c:	f000 f890 	bl	8010ea0 <raise>
 8010d80:	2001      	movs	r0, #1
 8010d82:	f7f4 f86f 	bl	8004e64 <_exit>

08010d86 <__swhatbuf_r>:
 8010d86:	b570      	push	{r4, r5, r6, lr}
 8010d88:	460e      	mov	r6, r1
 8010d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	b096      	sub	sp, #88	; 0x58
 8010d92:	4614      	mov	r4, r2
 8010d94:	461d      	mov	r5, r3
 8010d96:	da08      	bge.n	8010daa <__swhatbuf_r+0x24>
 8010d98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	602a      	str	r2, [r5, #0]
 8010da0:	061a      	lsls	r2, r3, #24
 8010da2:	d410      	bmi.n	8010dc6 <__swhatbuf_r+0x40>
 8010da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010da8:	e00e      	b.n	8010dc8 <__swhatbuf_r+0x42>
 8010daa:	466a      	mov	r2, sp
 8010dac:	f000 f894 	bl	8010ed8 <_fstat_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	dbf1      	blt.n	8010d98 <__swhatbuf_r+0x12>
 8010db4:	9a01      	ldr	r2, [sp, #4]
 8010db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010dbe:	425a      	negs	r2, r3
 8010dc0:	415a      	adcs	r2, r3
 8010dc2:	602a      	str	r2, [r5, #0]
 8010dc4:	e7ee      	b.n	8010da4 <__swhatbuf_r+0x1e>
 8010dc6:	2340      	movs	r3, #64	; 0x40
 8010dc8:	2000      	movs	r0, #0
 8010dca:	6023      	str	r3, [r4, #0]
 8010dcc:	b016      	add	sp, #88	; 0x58
 8010dce:	bd70      	pop	{r4, r5, r6, pc}

08010dd0 <__smakebuf_r>:
 8010dd0:	898b      	ldrh	r3, [r1, #12]
 8010dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010dd4:	079d      	lsls	r5, r3, #30
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	460c      	mov	r4, r1
 8010dda:	d507      	bpl.n	8010dec <__smakebuf_r+0x1c>
 8010ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	6123      	str	r3, [r4, #16]
 8010de4:	2301      	movs	r3, #1
 8010de6:	6163      	str	r3, [r4, #20]
 8010de8:	b002      	add	sp, #8
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	ab01      	add	r3, sp, #4
 8010dee:	466a      	mov	r2, sp
 8010df0:	f7ff ffc9 	bl	8010d86 <__swhatbuf_r>
 8010df4:	9900      	ldr	r1, [sp, #0]
 8010df6:	4605      	mov	r5, r0
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f7fc fc4d 	bl	800d698 <_malloc_r>
 8010dfe:	b948      	cbnz	r0, 8010e14 <__smakebuf_r+0x44>
 8010e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e04:	059a      	lsls	r2, r3, #22
 8010e06:	d4ef      	bmi.n	8010de8 <__smakebuf_r+0x18>
 8010e08:	f023 0303 	bic.w	r3, r3, #3
 8010e0c:	f043 0302 	orr.w	r3, r3, #2
 8010e10:	81a3      	strh	r3, [r4, #12]
 8010e12:	e7e3      	b.n	8010ddc <__smakebuf_r+0xc>
 8010e14:	4b0d      	ldr	r3, [pc, #52]	; (8010e4c <__smakebuf_r+0x7c>)
 8010e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e18:	89a3      	ldrh	r3, [r4, #12]
 8010e1a:	6020      	str	r0, [r4, #0]
 8010e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	9b00      	ldr	r3, [sp, #0]
 8010e24:	6163      	str	r3, [r4, #20]
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	6120      	str	r0, [r4, #16]
 8010e2a:	b15b      	cbz	r3, 8010e44 <__smakebuf_r+0x74>
 8010e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e30:	4630      	mov	r0, r6
 8010e32:	f000 f863 	bl	8010efc <_isatty_r>
 8010e36:	b128      	cbz	r0, 8010e44 <__smakebuf_r+0x74>
 8010e38:	89a3      	ldrh	r3, [r4, #12]
 8010e3a:	f023 0303 	bic.w	r3, r3, #3
 8010e3e:	f043 0301 	orr.w	r3, r3, #1
 8010e42:	81a3      	strh	r3, [r4, #12]
 8010e44:	89a0      	ldrh	r0, [r4, #12]
 8010e46:	4305      	orrs	r5, r0
 8010e48:	81a5      	strh	r5, [r4, #12]
 8010e4a:	e7cd      	b.n	8010de8 <__smakebuf_r+0x18>
 8010e4c:	0800d361 	.word	0x0800d361

08010e50 <_raise_r>:
 8010e50:	291f      	cmp	r1, #31
 8010e52:	b538      	push	{r3, r4, r5, lr}
 8010e54:	4604      	mov	r4, r0
 8010e56:	460d      	mov	r5, r1
 8010e58:	d904      	bls.n	8010e64 <_raise_r+0x14>
 8010e5a:	2316      	movs	r3, #22
 8010e5c:	6003      	str	r3, [r0, #0]
 8010e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e62:	bd38      	pop	{r3, r4, r5, pc}
 8010e64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e66:	b112      	cbz	r2, 8010e6e <_raise_r+0x1e>
 8010e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e6c:	b94b      	cbnz	r3, 8010e82 <_raise_r+0x32>
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f000 f830 	bl	8010ed4 <_getpid_r>
 8010e74:	462a      	mov	r2, r5
 8010e76:	4601      	mov	r1, r0
 8010e78:	4620      	mov	r0, r4
 8010e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e7e:	f000 b817 	b.w	8010eb0 <_kill_r>
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d00a      	beq.n	8010e9c <_raise_r+0x4c>
 8010e86:	1c59      	adds	r1, r3, #1
 8010e88:	d103      	bne.n	8010e92 <_raise_r+0x42>
 8010e8a:	2316      	movs	r3, #22
 8010e8c:	6003      	str	r3, [r0, #0]
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e7e7      	b.n	8010e62 <_raise_r+0x12>
 8010e92:	2400      	movs	r4, #0
 8010e94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e98:	4628      	mov	r0, r5
 8010e9a:	4798      	blx	r3
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	e7e0      	b.n	8010e62 <_raise_r+0x12>

08010ea0 <raise>:
 8010ea0:	4b02      	ldr	r3, [pc, #8]	; (8010eac <raise+0xc>)
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	6818      	ldr	r0, [r3, #0]
 8010ea6:	f7ff bfd3 	b.w	8010e50 <_raise_r>
 8010eaa:	bf00      	nop
 8010eac:	20000034 	.word	0x20000034

08010eb0 <_kill_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4d07      	ldr	r5, [pc, #28]	; (8010ed0 <_kill_r+0x20>)
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4608      	mov	r0, r1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	602b      	str	r3, [r5, #0]
 8010ebe:	f7f3 ffc1 	bl	8004e44 <_kill>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	d102      	bne.n	8010ecc <_kill_r+0x1c>
 8010ec6:	682b      	ldr	r3, [r5, #0]
 8010ec8:	b103      	cbz	r3, 8010ecc <_kill_r+0x1c>
 8010eca:	6023      	str	r3, [r4, #0]
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}
 8010ece:	bf00      	nop
 8010ed0:	20002c24 	.word	0x20002c24

08010ed4 <_getpid_r>:
 8010ed4:	f7f3 bfae 	b.w	8004e34 <_getpid>

08010ed8 <_fstat_r>:
 8010ed8:	b538      	push	{r3, r4, r5, lr}
 8010eda:	4d07      	ldr	r5, [pc, #28]	; (8010ef8 <_fstat_r+0x20>)
 8010edc:	2300      	movs	r3, #0
 8010ede:	4604      	mov	r4, r0
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	4611      	mov	r1, r2
 8010ee4:	602b      	str	r3, [r5, #0]
 8010ee6:	f7f4 f80c 	bl	8004f02 <_fstat>
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	d102      	bne.n	8010ef4 <_fstat_r+0x1c>
 8010eee:	682b      	ldr	r3, [r5, #0]
 8010ef0:	b103      	cbz	r3, 8010ef4 <_fstat_r+0x1c>
 8010ef2:	6023      	str	r3, [r4, #0]
 8010ef4:	bd38      	pop	{r3, r4, r5, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20002c24 	.word	0x20002c24

08010efc <_isatty_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4d06      	ldr	r5, [pc, #24]	; (8010f18 <_isatty_r+0x1c>)
 8010f00:	2300      	movs	r3, #0
 8010f02:	4604      	mov	r4, r0
 8010f04:	4608      	mov	r0, r1
 8010f06:	602b      	str	r3, [r5, #0]
 8010f08:	f7f4 f80b 	bl	8004f22 <_isatty>
 8010f0c:	1c43      	adds	r3, r0, #1
 8010f0e:	d102      	bne.n	8010f16 <_isatty_r+0x1a>
 8010f10:	682b      	ldr	r3, [r5, #0]
 8010f12:	b103      	cbz	r3, 8010f16 <_isatty_r+0x1a>
 8010f14:	6023      	str	r3, [r4, #0]
 8010f16:	bd38      	pop	{r3, r4, r5, pc}
 8010f18:	20002c24 	.word	0x20002c24

08010f1c <_init>:
 8010f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1e:	bf00      	nop
 8010f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f22:	bc08      	pop	{r3}
 8010f24:	469e      	mov	lr, r3
 8010f26:	4770      	bx	lr

08010f28 <_fini>:
 8010f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f2a:	bf00      	nop
 8010f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f2e:	bc08      	pop	{r3}
 8010f30:	469e      	mov	lr, r3
 8010f32:	4770      	bx	lr
