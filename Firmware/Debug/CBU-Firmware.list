
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08010438  08010438  00020438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a78  08010a78  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010a78  08010a78  00020a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a80  08010a80  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a80  08010a80  00020a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a84  08010a84  00020a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029f0  200001fc  08010c84  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bec  08010c84  00032bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002120d  00000000  00000000  0003026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004643  00000000  00000000  0005147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d18  00000000  00000000  00055ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016b5  00000000  00000000  000577d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e89  00000000  00000000  00058e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f8ef  00000000  00000000  0005ed16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2b3b  00000000  00000000  0007e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091a0  00000000  00000000  00171140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0017a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801041c 	.word	0x0801041c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0801041c 	.word	0x0801041c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <case_insensitive_strcmp+0x16>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e056      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10d      	bne.n	800105e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001042:	2300      	movs	r3, #0
 8001044:	e050      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e04a      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d103      	bne.n	800107e <case_insensitive_strcmp+0x5e>
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f103 0220 	add.w	r2, r3, #32
 800107c:	e000      	b.n	8001080 <case_insensitive_strcmp+0x60>
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	3301      	adds	r3, #1
 800108a:	491a      	ldr	r1, [pc, #104]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d102      	bne.n	800109e <case_insensitive_strcmp+0x7e>
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	3320      	adds	r3, #32
 800109c:	e000      	b.n	80010a0 <case_insensitive_strcmp+0x80>
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d0d0      	beq.n	8001046 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	737b      	strb	r3, [r7, #13]
 80010aa:	7b7b      	ldrb	r3, [r7, #13]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d103      	bne.n	80010c4 <case_insensitive_strcmp+0xa4>
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	f103 0220 	add.w	r2, r3, #32
 80010c2:	e000      	b.n	80010c6 <case_insensitive_strcmp+0xa6>
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	733b      	strb	r3, [r7, #12]
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4908      	ldr	r1, [pc, #32]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 80010d2:	440b      	add	r3, r1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <case_insensitive_strcmp+0xc4>
 80010de:	7b3b      	ldrb	r3, [r7, #12]
 80010e0:	3320      	adds	r3, #32
 80010e2:	e000      	b.n	80010e6 <case_insensitive_strcmp+0xc6>
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	08010700 	.word	0x08010700

080010f8 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001110:	2300      	movs	r3, #0
 8001112:	e015      	b.n	8001140 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f86d 	bl	80001f4 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	4798      	blx	r3
 8001128:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	e005      	b.n	8001140 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f00c fdb4 	bl	800dca6 <memcpy>

    return copy;
 800113e:	68bb      	ldr	r3, [r7, #8]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	4798      	blx	r3
 8001158:	60f8      	str	r0, [r7, #12]
    if (node)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001160:	2228      	movs	r2, #40	; 0x28
 8001162:	2100      	movs	r1, #0
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f00c fca2 	bl	800daae <memset>
    }

    return node;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001180:	e037      	b.n	80011f2 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <cJSON_Delete+0x32>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffe7 	bl	8001174 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <cJSON_Delete+0x52>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <cJSON_Delete+0x90>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6912      	ldr	r2, [r2, #16]
 80011c2:	4610      	mov	r0, r2
 80011c4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <cJSON_Delete+0x72>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <cJSON_Delete+0x90>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6a12      	ldr	r2, [r2, #32]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <cJSON_Delete+0x90>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4798      	blx	r3
        item = next;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1c4      	bne.n	8001182 <cJSON_Delete+0xe>
    }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000

08001208 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800120c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b098      	sub	sp, #96	; 0x60
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001232:	f7ff ffe9 	bl	8001208 <get_decimal_point>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <parse_number+0x36>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <parse_number+0x3a>
    {
        return false;
 800124e:	2300      	movs	r3, #0
 8001250:	e0a0      	b.n	8001394 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001256:	e03d      	b.n	80012d4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b45      	cmp	r3, #69	; 0x45
 800126a:	dc17      	bgt.n	800129c <parse_number+0x84>
 800126c:	2b2b      	cmp	r3, #43	; 0x2b
 800126e:	db40      	blt.n	80012f2 <parse_number+0xda>
 8001270:	3b2b      	subs	r3, #43	; 0x2b
 8001272:	2201      	movs	r2, #1
 8001274:	409a      	lsls	r2, r3
 8001276:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <parse_number+0x190>)
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <parse_number+0x88>
 8001288:	f002 0308 	and.w	r3, r2, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d111      	bne.n	80012be <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800129a:	e02a      	b.n	80012f2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800129c:	2b65      	cmp	r3, #101	; 0x65
 800129e:	d128      	bne.n	80012f2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012aa:	440b      	add	r3, r1
 80012ac:	4413      	add	r3, r2
 80012ae:	7819      	ldrb	r1, [r3, #0]
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
                break;
 80012bc:	e007      	b.n	80012ce <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	4413      	add	r3, r2
 80012c6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80012ca:	701a      	strb	r2, [r3, #0]
                break;
 80012cc:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	3301      	adds	r3, #1
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d6:	2b3e      	cmp	r3, #62	; 0x3e
 80012d8:	d80d      	bhi.n	80012f6 <parse_number+0xde>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00a      	beq.n	80012f6 <parse_number+0xde>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e6:	441a      	add	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3b3      	bcc.n	8001258 <parse_number+0x40>
        }
    }
loop_end:
 80012f0:	e001      	b.n	80012f6 <parse_number+0xde>
                goto loop_end;
 80012f2:	bf00      	nop
 80012f4:	e000      	b.n	80012f8 <parse_number+0xe0>
loop_end:
 80012f6:	bf00      	nop
    number_c_string[i] = '\0';
 80012f8:	f107 0208 	add.w	r2, r7, #8
 80012fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001304:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f00c fa6e 	bl	800d7f0 <strtod>
 8001314:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	429a      	cmp	r2, r3
 8001320:	d101      	bne.n	8001326 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001322:	2300      	movs	r3, #0
 8001324:	e036      	b.n	8001394 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800132c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001330:	a31b      	add	r3, pc, #108	; (adr r3, 80013a0 <parse_number+0x188>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800133a:	f7ff fbfb 	bl	8000b34 <__aeabi_dcmpge>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	e015      	b.n	800137a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <parse_number+0x194>)
 8001354:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001358:	f7ff fbe2 	bl	8000b20 <__aeabi_dcmple>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	e006      	b.n	800137a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800136c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001370:	f7ff fc0a 	bl	8000b88 <__aeabi_d2iz>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2208      	movs	r2, #8
 800137e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001386:	f107 0208 	add.w	r2, r7, #8
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	441a      	add	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	609a      	str	r2, [r3, #8]
    return true;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3760      	adds	r7, #96	; 0x60
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	ffc00000 	.word	0xffc00000
 80013a4:	41dfffff 	.word	0x41dfffff
 80013a8:	04007fe5 	.word	0x04007fe5
 80013ac:	c1e00000 	.word	0xc1e00000

080013b0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <ensure+0x20>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <ensure+0x24>
    {
        return NULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e083      	b.n	80014dc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <ensure+0x3c>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d301      	bcc.n	80013ec <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e077      	b.n	80014dc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da01      	bge.n	80013f6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e072      	b.n	80014dc <ensure+0x12c>
    }

    needed += p->offset + 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	3301      	adds	r3, #1
 8001400:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d805      	bhi.n	8001418 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4413      	add	r3, r2
 8001416:	e061      	b.n	80014dc <ensure+0x12c>
    }

    if (p->noalloc) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <ensure+0x74>
        return NULL;
 8001420:	2300      	movs	r3, #0
 8001422:	e05b      	b.n	80014dc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142a:	d308      	bcc.n	800143e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db03      	blt.n	800143a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001432:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	e004      	b.n	8001444 <ensure+0x94>
        }
        else
        {
            return NULL;
 800143a:	2300      	movs	r3, #0
 800143c:	e04e      	b.n	80014dc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d018      	beq.n	800147e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	4610      	mov	r0, r2
 8001458:	4798      	blx	r3
 800145a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d132      	bne.n	80014c8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3
            p->length = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

            return NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	e02e      	b.n	80014dc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	4798      	blx	r3
 8001486:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	4798      	blx	r3
            p->length = 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

            return NULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e018      	b.n	80014dc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	3301      	adds	r3, #1
 80014b4:	461a      	mov	r2, r3
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f00c fbf5 	bl	800dca6 <memcpy>
        p->hooks.deallocate(p->buffer);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4610      	mov	r0, r2
 80014c6:	4798      	blx	r3
    }
    p->length = newsize;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4413      	add	r3, r2
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d013      	beq.n	800151e <update_offset+0x3a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00f      	beq.n	800151e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689c      	ldr	r4, [r3, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7fe fe70 	bl	80001f4 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	18e2      	adds	r2, r4, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e000      	b.n	8001520 <update_offset+0x3c>
        return;
 800151e:	bf00      	nop
}
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
	...

08001528 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	ed87 0b02 	vstr	d0, [r7, #8]
 8001534:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	68fe      	ldr	r6, [r7, #12]
 800153c:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	687e      	ldr	r6, [r7, #4]
 8001544:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001548:	f7ff fafe 	bl	8000b48 <__aeabi_dcmpgt>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <compare_double+0x34>
 8001552:	68bc      	ldr	r4, [r7, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800155a:	e003      	b.n	8001564 <compare_double+0x3c>
 800155c:	683c      	ldr	r4, [r7, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001564:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800156c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001570:	f7fe fea2 	bl	80002b8 <__aeabi_dsub>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4690      	mov	r8, r2
 800157a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <compare_double+0x8c>)
 8001584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001588:	f7ff f84e 	bl	8000628 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	2101      	movs	r1, #1
 8001592:	460c      	mov	r4, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7ff fac2 	bl	8000b20 <__aeabi_dcmple>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <compare_double+0x7e>
 80015a2:	2300      	movs	r3, #0
 80015a4:	461c      	mov	r4, r3
 80015a6:	b2e3      	uxtb	r3, r4
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015b2:	bf00      	nop
 80015b4:	3cb00000 	.word	0x3cb00000

080015b8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b093      	sub	sp, #76	; 0x4c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80015ee:	f7ff fe0b 	bl	8001208 <get_decimal_point>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <print_number+0x56>
    {
        return false;
 800160a:	2300      	movs	r3, #0
 800160c:	e0b4      	b.n	8001778 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800160e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001612:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001616:	f7ff faa1 	bl	8000b5c <__aeabi_dcmpun>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d121      	bne.n	8001664 <print_number+0xac>
 8001620:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001628:	2301      	movs	r3, #1
 800162a:	461e      	mov	r6, r3
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <print_number+0x1c8>)
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff fa91 	bl	8000b5c <__aeabi_dcmpun>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10b      	bne.n	8001658 <print_number+0xa0>
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <print_number+0x1c8>)
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7ff fa69 	bl	8000b20 <__aeabi_dcmple>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <print_number+0xa0>
 8001654:	2300      	movs	r3, #0
 8001656:	461e      	mov	r6, r3
 8001658:	b2f3      	uxtb	r3, r6
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4946      	ldr	r1, [pc, #280]	; (8001784 <print_number+0x1cc>)
 800166a:	4618      	mov	r0, r3
 800166c:	f00c f98e 	bl	800d98c <siprintf>
 8001670:	6478      	str	r0, [r7, #68]	; 0x44
 8001672:	e03f      	b.n	80016f4 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff6b 	bl	8000554 <__aeabi_i2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001686:	f7ff fa37 	bl	8000af8 <__aeabi_dcmpeq>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	493b      	ldr	r1, [pc, #236]	; (8001788 <print_number+0x1d0>)
 800169a:	4618      	mov	r0, r3
 800169c:	f00c f976 	bl	800d98c <siprintf>
 80016a0:	6478      	str	r0, [r7, #68]	; 0x44
 80016a2:	e027      	b.n	80016f4 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016a4:	f107 0014 	add.w	r0, r7, #20
 80016a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <print_number+0x1d4>)
 80016ae:	f00c f96d 	bl	800d98c <siprintf>
 80016b2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80016b4:	f107 0208 	add.w	r2, r7, #8
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4934      	ldr	r1, [pc, #208]	; (8001790 <print_number+0x1d8>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00c f984 	bl	800d9cc <siscanf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10c      	bne.n	80016e4 <print_number+0x12c>
 80016ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ce:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	eef0 0a67 	vmov.f32	s1, s15
 80016da:	f7ff ff25 	bl	8001528 <compare_double>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80016e4:	f107 0014 	add.w	r0, r7, #20
 80016e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <print_number+0x1dc>)
 80016ee:	f00c f94d 	bl	800d98c <siprintf>
 80016f2:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80016f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db02      	blt.n	8001700 <print_number+0x148>
 80016fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fc:	2b19      	cmp	r3, #25
 80016fe:	dd01      	ble.n	8001704 <print_number+0x14c>
    {
        return false;
 8001700:	2300      	movs	r3, #0
 8001702:	e039      	b.n	8001778 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	3301      	adds	r3, #1
 8001708:	4619      	mov	r1, r3
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f7ff fe50 	bl	80013b0 <ensure>
 8001710:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <print_number+0x164>
    {
        return false;
 8001718:	2300      	movs	r3, #0
 800171a:	e02d      	b.n	8001778 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800171c:	2300      	movs	r3, #0
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
 8001720:	e01a      	b.n	8001758 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001722:	f107 0214 	add.w	r2, r7, #20
 8001726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001730:	429a      	cmp	r2, r3
 8001732:	d105      	bne.n	8001740 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001738:	4413      	add	r3, r2
 800173a:	222e      	movs	r2, #46	; 0x2e
 800173c:	701a      	strb	r2, [r3, #0]
            continue;
 800173e:	e008      	b.n	8001752 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001744:	4413      	add	r3, r2
 8001746:	f107 0114 	add.w	r1, r7, #20
 800174a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800174c:	440a      	add	r2, r1
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001754:	3301      	adds	r3, #1
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800175c:	429a      	cmp	r2, r3
 800175e:	d3e0      	bcc.n	8001722 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001764:	4413      	add	r3, r2
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001770:	441a      	add	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	609a      	str	r2, [r3, #8]

    return true;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	374c      	adds	r7, #76	; 0x4c
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001780:	7fefffff 	.word	0x7fefffff
 8001784:	08010444 	.word	0x08010444
 8001788:	0801044c 	.word	0x0801044c
 800178c:	08010450 	.word	0x08010450
 8001790:	08010458 	.word	0x08010458
 8001794:	0801045c 	.word	0x0801045c

08001798 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	e04c      	b.n	8001848 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b2f      	cmp	r3, #47	; 0x2f
 80017b8:	d90f      	bls.n	80017da <parse_hex4+0x42>
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b39      	cmp	r3, #57	; 0x39
 80017c4:	d809      	bhi.n	80017da <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	3b30      	subs	r3, #48	; 0x30
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e02d      	b.n	8001836 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d90f      	bls.n	8001806 <parse_hex4+0x6e>
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b46      	cmp	r3, #70	; 0x46
 80017f0:	d809      	bhi.n	8001806 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	3b37      	subs	r3, #55	; 0x37
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e017      	b.n	8001836 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b60      	cmp	r3, #96	; 0x60
 8001810:	d90f      	bls.n	8001832 <parse_hex4+0x9a>
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b66      	cmp	r3, #102	; 0x66
 800181c:	d809      	bhi.n	8001832 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	3b57      	subs	r3, #87	; 0x57
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e001      	b.n	8001836 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001832:	2300      	movs	r3, #0
 8001834:	e00c      	b.n	8001850 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d802      	bhi.n	8001842 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9af      	bls.n	80017ae <parse_hex4+0x16>
        }
    }

    return h;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b05      	cmp	r3, #5
 8001894:	f340 80b7 	ble.w	8001a06 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3302      	adds	r3, #2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff7b 	bl	8001798 <parse_hex4>
 80018a2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018aa:	d304      	bcc.n	80018b6 <utf16_literal_to_utf8+0x5a>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018b2:	f0c0 80aa 	bcc.w	8001a0a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018bc:	d337      	bcc.n	800192e <utf16_literal_to_utf8+0xd2>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c4:	d233      	bcs.n	800192e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3306      	adds	r3, #6
 80018ca:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018d0:	230c      	movs	r3, #12
 80018d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b05      	cmp	r3, #5
 80018de:	f340 8096 	ble.w	8001a0e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b5c      	cmp	r3, #92	; 0x5c
 80018e8:	f040 8093 	bne.w	8001a12 <utf16_literal_to_utf8+0x1b6>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b75      	cmp	r3, #117	; 0x75
 80018f4:	f040 808d 	bne.w	8001a12 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3302      	adds	r3, #2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff4b 	bl	8001798 <parse_hex4>
 8001902:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800190a:	f0c0 8084 	bcc.w	8001a16 <utf16_literal_to_utf8+0x1ba>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001914:	d27f      	bcs.n	8001a16 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	029a      	lsls	r2, r3, #10
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <utf16_literal_to_utf8+0x1cc>)
 800191c:	4013      	ands	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001924:	4313      	orrs	r3, r2
 8001926:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800192c:	e004      	b.n	8001938 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800192e:	2306      	movs	r3, #6
 8001930:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	d803      	bhi.n	8001946 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001944:	e01f      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194c:	d206      	bcs.n	800195c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800194e:	2302      	movs	r3, #2
 8001950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	f887 3020 	strb.w	r3, [r7, #32]
 800195a:	e014      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d206      	bcs.n	8001972 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001964:	2303      	movs	r3, #3
 8001966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800196a:	23e0      	movs	r3, #224	; 0xe0
 800196c:	f887 3020 	strb.w	r3, [r7, #32]
 8001970:	e009      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001978:	d24f      	bcs.n	8001a1a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800197a:	2304      	movs	r3, #4
 800197c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001980:	23f0      	movs	r3, #240	; 0xf0
 8001982:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198a:	3b01      	subs	r3, #1
 800198c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001990:	e015      	b.n	80019be <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199a:	b2da      	uxtb	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019a4:	440b      	add	r3, r1
 80019a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019b8:	3b01      	subs	r3, #1
 80019ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d909      	bls.n	80019e2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019da:	430a      	orrs	r2, r1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fa:	441a      	add	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a04:	e00b      	b.n	8001a1e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a06:	bf00      	nop
 8001a08:	e008      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a0a:	bf00      	nop
 8001a0c:	e006      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a0e:	bf00      	nop
 8001a10:	e004      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a12:	bf00      	nop
 8001a14:	e002      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a1a:	bf00      	nop

fail:
    return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000ffc00 	.word	0x000ffc00

08001a2c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b22      	cmp	r3, #34	; 0x22
 8001a68:	f040 8103 	bne.w	8001c72 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a74:	e017      	b.n	8001aa6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b5c      	cmp	r3, #92	; 0x5c
 8001a7c:	d110      	bne.n	8001aa0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	f080 80f1 	bcs.w	8001c76 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d203      	bcs.n	8001ac0 <parse_string+0x94>
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b22      	cmp	r3, #34	; 0x22
 8001abe:	d1da      	bne.n	8001a76 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	f080 80d3 	bcs.w	8001c7a <parse_string+0x24e>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b22      	cmp	r3, #34	; 0x22
 8001ada:	f040 80ce 	bne.w	8001c7a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	3201      	adds	r2, #1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4798      	blx	r3
 8001b00:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ba 	beq.w	8001c7e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b0e:	e094      	b.n	8001c3a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b5c      	cmp	r3, #92	; 0x5c
 8001b16:	d008      	beq.n	8001b2a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	1c53      	adds	r3, r2, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	60f9      	str	r1, [r7, #12]
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e087      	b.n	8001c3a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b2e:	6a3a      	ldr	r2, [r7, #32]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f340 80a4 	ble.w	8001c82 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b75      	cmp	r3, #117	; 0x75
 8001b42:	f300 80a0 	bgt.w	8001c86 <parse_string+0x25a>
 8001b46:	2b5c      	cmp	r3, #92	; 0x5c
 8001b48:	da04      	bge.n	8001b54 <parse_string+0x128>
 8001b4a:	2b22      	cmp	r3, #34	; 0x22
 8001b4c:	d05c      	beq.n	8001c08 <parse_string+0x1dc>
 8001b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001b50:	d05a      	beq.n	8001c08 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b52:	e098      	b.n	8001c86 <parse_string+0x25a>
            switch (input_pointer[1])
 8001b54:	3b5c      	subs	r3, #92	; 0x5c
 8001b56:	2b19      	cmp	r3, #25
 8001b58:	f200 8095 	bhi.w	8001c86 <parse_string+0x25a>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <parse_string+0x138>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001c09 	.word	0x08001c09
 8001b68:	08001c87 	.word	0x08001c87
 8001b6c:	08001c87 	.word	0x08001c87
 8001b70:	08001c87 	.word	0x08001c87
 8001b74:	08001c87 	.word	0x08001c87
 8001b78:	08001c87 	.word	0x08001c87
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001c87 	.word	0x08001c87
 8001b84:	08001c87 	.word	0x08001c87
 8001b88:	08001c87 	.word	0x08001c87
 8001b8c:	08001bd9 	.word	0x08001bd9
 8001b90:	08001c87 	.word	0x08001c87
 8001b94:	08001c87 	.word	0x08001c87
 8001b98:	08001c87 	.word	0x08001c87
 8001b9c:	08001c87 	.word	0x08001c87
 8001ba0:	08001c87 	.word	0x08001c87
 8001ba4:	08001c87 	.word	0x08001c87
 8001ba8:	08001c87 	.word	0x08001c87
 8001bac:	08001be5 	.word	0x08001be5
 8001bb0:	08001c87 	.word	0x08001c87
 8001bb4:	08001c87 	.word	0x08001c87
 8001bb8:	08001c87 	.word	0x08001c87
 8001bbc:	08001bf1 	.word	0x08001bf1
 8001bc0:	08001c87 	.word	0x08001c87
 8001bc4:	08001bfd 	.word	0x08001bfd
 8001bc8:	08001c19 	.word	0x08001c19
                    *output_pointer++ = '\b';
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60fa      	str	r2, [r7, #12]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	701a      	strb	r2, [r3, #0]
                    break;
 8001bd6:	e02c      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60fa      	str	r2, [r7, #12]
 8001bde:	220c      	movs	r2, #12
 8001be0:	701a      	strb	r2, [r3, #0]
                    break;
 8001be2:	e026      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60fa      	str	r2, [r7, #12]
 8001bea:	220a      	movs	r2, #10
 8001bec:	701a      	strb	r2, [r3, #0]
                    break;
 8001bee:	e020      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	220d      	movs	r2, #13
 8001bf8:	701a      	strb	r2, [r3, #0]
                    break;
 8001bfa:	e01a      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60fa      	str	r2, [r7, #12]
 8001c02:	2209      	movs	r2, #9
 8001c04:	701a      	strb	r2, [r3, #0]
                    break;
 8001c06:	e014      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	60f9      	str	r1, [r7, #12]
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
                    break;
 8001c16:	e00c      	b.n	8001c32 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6a39      	ldr	r1, [r7, #32]
 8001c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c22:	f7ff fe1b 	bl	800185c <utf16_literal_to_utf8>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02c      	beq.n	8001c8a <parse_string+0x25e>
                    break;
 8001c30:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	4413      	add	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f4ff af66 	bcc.w	8001b10 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a3a      	ldr	r2, [r7, #32]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]

    return true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e01e      	b.n	8001cb0 <parse_string+0x284>
        goto fail;
 8001c72:	bf00      	nop
 8001c74:	e00a      	b.n	8001c8c <parse_string+0x260>
                    goto fail;
 8001c76:	bf00      	nop
 8001c78:	e008      	b.n	8001c8c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001c7a:	bf00      	nop
 8001c7c:	e006      	b.n	8001c8c <parse_string+0x260>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e004      	b.n	8001c8c <parse_string+0x260>
                goto fail;
 8001c82:	bf00      	nop
 8001c84:	e002      	b.n	8001c8c <parse_string+0x260>
                    goto fail;
 8001c86:	bf00      	nop
 8001c88:	e000      	b.n	8001c8c <parse_string+0x260>
                        goto fail;
 8001c8a:	bf00      	nop

fail:
    if (output != NULL)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	69f8      	ldr	r0, [r7, #28]
 8001c98:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <print_string_ptr+0x28>
    {
        return false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e110      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f7ff fb61 	bl	80013b0 <ensure>
 8001cee:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <print_string_ptr+0x42>
        {
            return false;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e103      	b.n	8001f02 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4a83      	ldr	r2, [pc, #524]	; (8001f0c <print_string_ptr+0x254>)
 8001cfe:	8811      	ldrh	r1, [r2, #0]
 8001d00:	7892      	ldrb	r2, [r2, #2]
 8001d02:	8019      	strh	r1, [r3, #0]
 8001d04:	709a      	strb	r2, [r3, #2]

        return true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0fb      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e024      	b.n	8001d5a <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b22      	cmp	r3, #34	; 0x22
 8001d16:	dc0f      	bgt.n	8001d38 <print_string_ptr+0x80>
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	db13      	blt.n	8001d44 <print_string_ptr+0x8c>
 8001d1c:	3b08      	subs	r3, #8
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	; (8001f10 <print_string_ptr+0x258>)
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <print_string_ptr+0x84>
 8001d36:	e005      	b.n	8001d44 <print_string_ptr+0x8c>
 8001d38:	2b5c      	cmp	r3, #92	; 0x5c
 8001d3a:	d103      	bne.n	8001d44 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
                break;
 8001d42:	e007      	b.n	8001d54 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b1f      	cmp	r3, #31
 8001d4a:	d802      	bhi.n	8001d52 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3305      	adds	r3, #5
 8001d50:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d52:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1d6      	bne.n	8001d10 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3303      	adds	r3, #3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7ff fb1a 	bl	80013b0 <ensure>
 8001d7c:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <print_string_ptr+0xd0>
    {
        return false;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e0bc      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d117      	bne.n	8001dbe <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2222      	movs	r2, #34	; 0x22
 8001d92:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3301      	adds	r3, #1
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00b ff82 	bl	800dca6 <memcpy>
        output[output_length + 1] = '\"';
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	2222      	movs	r2, #34	; 0x22
 8001dac:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]

        return true;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a1      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2222      	movs	r2, #34	; 0x22
 8001dc2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e086      	b.n	8001ede <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b1f      	cmp	r3, #31
 8001dd6:	d90c      	bls.n	8001df2 <print_string_ptr+0x13a>
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b22      	cmp	r3, #34	; 0x22
 8001dde:	d008      	beq.n	8001df2 <print_string_ptr+0x13a>
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b5c      	cmp	r3, #92	; 0x5c
 8001de6:	d004      	beq.n	8001df2 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e06f      	b.n	8001ed2 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	61ba      	str	r2, [r7, #24]
 8001df8:	225c      	movs	r2, #92	; 0x5c
 8001dfa:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b22      	cmp	r3, #34	; 0x22
 8001e02:	dc3d      	bgt.n	8001e80 <print_string_ptr+0x1c8>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	db59      	blt.n	8001ebc <print_string_ptr+0x204>
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	2b1a      	cmp	r3, #26
 8001e0c:	d856      	bhi.n	8001ebc <print_string_ptr+0x204>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <print_string_ptr+0x15c>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e95 	.word	0x08001e95
 8001e18:	08001eb5 	.word	0x08001eb5
 8001e1c:	08001ea5 	.word	0x08001ea5
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001e9d 	.word	0x08001e9d
 8001e28:	08001ead 	.word	0x08001ead
 8001e2c:	08001ebd 	.word	0x08001ebd
 8001e30:	08001ebd 	.word	0x08001ebd
 8001e34:	08001ebd 	.word	0x08001ebd
 8001e38:	08001ebd 	.word	0x08001ebd
 8001e3c:	08001ebd 	.word	0x08001ebd
 8001e40:	08001ebd 	.word	0x08001ebd
 8001e44:	08001ebd 	.word	0x08001ebd
 8001e48:	08001ebd 	.word	0x08001ebd
 8001e4c:	08001ebd 	.word	0x08001ebd
 8001e50:	08001ebd 	.word	0x08001ebd
 8001e54:	08001ebd 	.word	0x08001ebd
 8001e58:	08001ebd 	.word	0x08001ebd
 8001e5c:	08001ebd 	.word	0x08001ebd
 8001e60:	08001ebd 	.word	0x08001ebd
 8001e64:	08001ebd 	.word	0x08001ebd
 8001e68:	08001ebd 	.word	0x08001ebd
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ebd 	.word	0x08001ebd
 8001e74:	08001ebd 	.word	0x08001ebd
 8001e78:	08001ebd 	.word	0x08001ebd
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	2b5c      	cmp	r3, #92	; 0x5c
 8001e82:	d11b      	bne.n	8001ebc <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	225c      	movs	r2, #92	; 0x5c
 8001e88:	701a      	strb	r2, [r3, #0]
                    break;
 8001e8a:	e022      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2222      	movs	r2, #34	; 0x22
 8001e90:	701a      	strb	r2, [r3, #0]
                    break;
 8001e92:	e01e      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2262      	movs	r2, #98	; 0x62
 8001e98:	701a      	strb	r2, [r3, #0]
                    break;
 8001e9a:	e01a      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2266      	movs	r2, #102	; 0x66
 8001ea0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ea2:	e016      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	226e      	movs	r2, #110	; 0x6e
 8001ea8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eaa:	e012      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2272      	movs	r2, #114	; 0x72
 8001eb0:	701a      	strb	r2, [r3, #0]
                    break;
 8001eb2:	e00e      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2274      	movs	r2, #116	; 0x74
 8001eb8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eba:	e00a      	b.n	8001ed2 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <print_string_ptr+0x25c>)
 8001ec4:	69b8      	ldr	r0, [r7, #24]
 8001ec6:	f00b fd61 	bl	800d98c <siprintf>
                    output_pointer += 4;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	61bb      	str	r3, [r7, #24]
                    break;
 8001ed0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f af74 	bne.w	8001dd0 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	2222      	movs	r2, #34	; 0x22
 8001ef2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

    return true;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08010464 	.word	0x08010464
 8001f10:	04000037 	.word	0x04000037
 8001f14:	08010468 	.word	0x08010468

08001f18 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fec5 	bl	8001cb8 <print_string_ptr>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <buffer_skip_whitespace+0x16>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e02c      	b.n	8001fac <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <buffer_skip_whitespace+0x2c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d306      	bcc.n	8001f72 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	e021      	b.n	8001fac <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <buffer_skip_whitespace+0x5c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <buffer_skip_whitespace+0x5c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d9e9      	bls.n	8001f68 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d104      	bne.n	8001faa <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <skip_utf8_bom+0x1e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <skip_utf8_bom+0x1e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <skip_utf8_bom+0x22>
    {
        return NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e01c      	b.n	8002014 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <skip_utf8_bom+0x5a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d211      	bcs.n	8002012 <skip_utf8_bom+0x5a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <skip_utf8_bom+0x64>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00b fd5e 	bl	800dabe <strncmp>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	1cda      	adds	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002012:	687b      	ldr	r3, [r7, #4]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	08010470 	.word	0x08010470

08002020 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	e00c      	b.n	8002050 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7fe f8dc 	bl	80001f4 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f805 	bl	8002058 <cJSON_ParseWithLengthOpts>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d042      	beq.n	8002116 <cJSON_ParseWithLengthOpts+0xbe>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03f      	beq.n	8002116 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020a2:	4a39      	ldr	r2, [pc, #228]	; (8002188 <cJSON_ParseWithLengthOpts+0x130>)
 80020a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020ae:	4836      	ldr	r0, [pc, #216]	; (8002188 <cJSON_ParseWithLengthOpts+0x130>)
 80020b0:	f7ff f84a 	bl	8001148 <cJSON_New_Item>
 80020b4:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02e      	beq.n	800211a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff79 	bl	8001fb8 <skip_utf8_bom>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff35 	bl	8001f38 <buffer_skip_whitespace>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020d4:	f000 f8fc 	bl	80022d0 <parse_value>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01f      	beq.n	800211e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff25 	bl	8001f38 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d215      	bcs.n	8002122 <cJSON_ParseWithLengthOpts+0xca>
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	e031      	b.n	800217a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002116:	bf00      	nop
 8002118:	e004      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002122:	bf00      	nop

fail:
    if (item != NULL)
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800212a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800212c:	f7ff f822 	bl	8001174 <cJSON_Delete>
    }

    if (value != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	429a      	cmp	r2, r3
 8002144:	d202      	bcs.n	800214c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e005      	b.n	8002158 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b01      	subs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d004      	beq.n	8002168 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 800216a:	461a      	mov	r2, r3
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002174:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3738      	adds	r7, #56	; 0x38
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000218 	.word	0x20000218
 8002188:	20000000 	.word	0x20000000

0800218c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff41 	bl	8002020 <cJSON_ParseWithOpts>
 800219e:	4603      	mov	r3, r0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	2224      	movs	r2, #36	; 0x24
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00b fc74 	bl	800daae <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <print+0x104>)
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4610      	mov	r0, r2
 80021d0:	4798      	blx	r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <print+0x104>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d040      	beq.n	8002274 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	4619      	mov	r1, r3
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f955 	bl	80024a8 <print_value>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d039      	beq.n	8002278 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f96b 	bl	80014e4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	6938      	ldr	r0, [r7, #16]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	3201      	adds	r2, #1
 8002220:	4611      	mov	r1, r2
 8002222:	4798      	blx	r3
 8002224:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d027      	beq.n	800227c <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e01e      	b.n	8002270 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	3201      	adds	r2, #1
 800223a:	4610      	mov	r0, r2
 800223c:	4798      	blx	r3
 800223e:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01c      	beq.n	8002280 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	4293      	cmp	r3, r2
 8002250:	bf28      	it	cs
 8002252:	4613      	movcs	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002258:	f00b fd25 	bl	800dca6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002260:	4413      	add	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
    }

    return printed;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	e016      	b.n	80022a2 <print+0xfa>
        goto fail;
 8002274:	bf00      	nop
 8002276:	e004      	b.n	8002282 <print+0xda>
        goto fail;
 8002278:	bf00      	nop
 800227a:	e002      	b.n	8002282 <print+0xda>
            goto fail;
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <print+0xda>
            goto fail;
 8002280:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4610      	mov	r0, r2
 8002290:	4798      	blx	r3
    }

    if (printed != NULL)
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <print+0xf8>
    {
        hooks->deallocate(printed);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800229e:	4798      	blx	r3
    }

    return NULL;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3738      	adds	r7, #56	; 0x38
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0801057c 	.word	0x0801057c

080022b0 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <cJSON_PrintUnformatted+0x1c>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff73 	bl	80021a8 <print>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000000 	.word	0x20000000

080022d0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <parse_value+0x18>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <parse_value+0x1c>
    {
        return false; /* no input */
 80022e8:	2300      	movs	r3, #0
 80022ea:	e0d2      	b.n	8002492 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01d      	beq.n	800232e <parse_value+0x5e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	1d1a      	adds	r2, r3, #4
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d816      	bhi.n	800232e <parse_value+0x5e>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4413      	add	r3, r2
 800230a:	2204      	movs	r2, #4
 800230c:	4963      	ldr	r1, [pc, #396]	; (800249c <parse_value+0x1cc>)
 800230e:	4618      	mov	r0, r3
 8002310:	f00b fbd5 	bl	800dabe <strncmp>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	1d1a      	adds	r2, r3, #4
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	609a      	str	r2, [r3, #8]
        return true;
 800232a:	2301      	movs	r3, #1
 800232c:	e0b1      	b.n	8002492 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01d      	beq.n	8002370 <parse_value+0xa0>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	1d5a      	adds	r2, r3, #5
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d816      	bhi.n	8002370 <parse_value+0xa0>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4413      	add	r3, r2
 800234c:	2205      	movs	r2, #5
 800234e:	4954      	ldr	r1, [pc, #336]	; (80024a0 <parse_value+0x1d0>)
 8002350:	4618      	mov	r0, r3
 8002352:	f00b fbb4 	bl	800dabe <strncmp>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	1d5a      	adds	r2, r3, #5
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	609a      	str	r2, [r3, #8]
        return true;
 800236c:	2301      	movs	r3, #1
 800236e:	e090      	b.n	8002492 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d020      	beq.n	80023b8 <parse_value+0xe8>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d819      	bhi.n	80023b8 <parse_value+0xe8>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4413      	add	r3, r2
 800238e:	2204      	movs	r2, #4
 8002390:	4944      	ldr	r1, [pc, #272]	; (80024a4 <parse_value+0x1d4>)
 8002392:	4618      	mov	r0, r3
 8002394:	f00b fb93 	bl	800dabe <strncmp>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]
        return true;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e06c      	b.n	8002492 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <parse_value+0x116>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20d      	bcs.n	80023e6 <parse_value+0x116>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b22      	cmp	r3, #34	; 0x22
 80023d8:	d105      	bne.n	80023e6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fb25 	bl	8001a2c <parse_string>
 80023e2:	4603      	mov	r3, r0
 80023e4:	e055      	b.n	8002492 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <parse_value+0x164>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d21d      	bcs.n	8002434 <parse_value+0x164>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b2d      	cmp	r3, #45	; 0x2d
 8002406:	d00f      	beq.n	8002428 <parse_value+0x158>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b2f      	cmp	r3, #47	; 0x2f
 8002416:	d90d      	bls.n	8002434 <parse_value+0x164>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b39      	cmp	r3, #57	; 0x39
 8002426:	d805      	bhi.n	8002434 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fef4 	bl	8001218 <parse_number>
 8002430:	4603      	mov	r3, r0
 8002432:	e02e      	b.n	8002492 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d013      	beq.n	8002462 <parse_value+0x192>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20d      	bcs.n	8002462 <parse_value+0x192>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b5b      	cmp	r3, #91	; 0x5b
 8002454:	d105      	bne.n	8002462 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f909 	bl	8002670 <parse_array>
 800245e:	4603      	mov	r3, r0
 8002460:	e017      	b.n	8002492 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <parse_value+0x1c0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d20d      	bcs.n	8002490 <parse_value+0x1c0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b7b      	cmp	r3, #123	; 0x7b
 8002482:	d105      	bne.n	8002490 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa3c 	bl	8002904 <parse_object>
 800248c:	4603      	mov	r3, r0
 800248e:	e000      	b.n	8002492 <parse_value+0x1c2>
    }

    return false;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	08010444 	.word	0x08010444
 80024a0:	08010474 	.word	0x08010474
 80024a4:	0801047c 	.word	0x0801047c

080024a8 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <print_value+0x1a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <print_value+0x1e>
    {
        return false;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e0c9      	b.n	800265a <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	f000 808e 	beq.w	80025ee <print_value+0x146>
 80024d2:	2b80      	cmp	r3, #128	; 0x80
 80024d4:	f300 80c0 	bgt.w	8002658 <print_value+0x1b0>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	dc49      	bgt.n	8002570 <print_value+0xc8>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f340 80bb 	ble.w	8002658 <print_value+0x1b0>
 80024e2:	3b01      	subs	r3, #1
 80024e4:	2b1f      	cmp	r3, #31
 80024e6:	f200 80b7 	bhi.w	8002658 <print_value+0x1b0>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <print_value+0x48>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	0800259b 	.word	0x0800259b
 80024f4:	080025bf 	.word	0x080025bf
 80024f8:	08002659 	.word	0x08002659
 80024fc:	08002577 	.word	0x08002577
 8002500:	08002659 	.word	0x08002659
 8002504:	08002659 	.word	0x08002659
 8002508:	08002659 	.word	0x08002659
 800250c:	080025e3 	.word	0x080025e3
 8002510:	08002659 	.word	0x08002659
 8002514:	08002659 	.word	0x08002659
 8002518:	08002659 	.word	0x08002659
 800251c:	08002659 	.word	0x08002659
 8002520:	08002659 	.word	0x08002659
 8002524:	08002659 	.word	0x08002659
 8002528:	08002659 	.word	0x08002659
 800252c:	08002635 	.word	0x08002635
 8002530:	08002659 	.word	0x08002659
 8002534:	08002659 	.word	0x08002659
 8002538:	08002659 	.word	0x08002659
 800253c:	08002659 	.word	0x08002659
 8002540:	08002659 	.word	0x08002659
 8002544:	08002659 	.word	0x08002659
 8002548:	08002659 	.word	0x08002659
 800254c:	08002659 	.word	0x08002659
 8002550:	08002659 	.word	0x08002659
 8002554:	08002659 	.word	0x08002659
 8002558:	08002659 	.word	0x08002659
 800255c:	08002659 	.word	0x08002659
 8002560:	08002659 	.word	0x08002659
 8002564:	08002659 	.word	0x08002659
 8002568:	08002659 	.word	0x08002659
 800256c:	08002641 	.word	0x08002641
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d06b      	beq.n	800264c <print_value+0x1a4>
 8002574:	e070      	b.n	8002658 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002576:	2105      	movs	r1, #5
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f7fe ff19 	bl	80013b0 <ensure>
 800257e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <print_value+0xe2>
            {
                return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e067      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a35      	ldr	r2, [pc, #212]	; (8002664 <print_value+0x1bc>)
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6018      	str	r0, [r3, #0]
 8002592:	7912      	ldrb	r2, [r2, #4]
 8002594:	711a      	strb	r2, [r3, #4]
            return true;
 8002596:	2301      	movs	r3, #1
 8002598:	e05f      	b.n	800265a <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800259a:	2106      	movs	r1, #6
 800259c:	6838      	ldr	r0, [r7, #0]
 800259e:	f7fe ff07 	bl	80013b0 <ensure>
 80025a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <print_value+0x106>
            {
                return false;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e055      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <print_value+0x1c0>)
 80025b2:	6810      	ldr	r0, [r2, #0]
 80025b4:	6018      	str	r0, [r3, #0]
 80025b6:	8892      	ldrh	r2, [r2, #4]
 80025b8:	809a      	strh	r2, [r3, #4]
            return true;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e04d      	b.n	800265a <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80025be:	2105      	movs	r1, #5
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f7fe fef5 	bl	80013b0 <ensure>
 80025c6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <print_value+0x12a>
            {
                return false;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e043      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <print_value+0x1c4>)
 80025d6:	6810      	ldr	r0, [r2, #0]
 80025d8:	6018      	str	r0, [r3, #0]
 80025da:	7912      	ldrb	r2, [r2, #4]
 80025dc:	711a      	strb	r2, [r3, #4]
            return true;
 80025de:	2301      	movs	r3, #1
 80025e0:	e03b      	b.n	800265a <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe ffe7 	bl	80015b8 <print_number>
 80025ea:	4603      	mov	r3, r0
 80025ec:	e035      	b.n	800265a <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <print_value+0x156>
            {
                return false;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e02d      	b.n	800265a <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fdf6 	bl	80001f4 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	3301      	adds	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f7fe fecd 	bl	80013b0 <ensure>
 8002616:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <print_value+0x17a>
            {
                return false;
 800261e:	2300      	movs	r3, #0
 8002620:	e01b      	b.n	800265a <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4619      	mov	r1, r3
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f00b fb3b 	bl	800dca6 <memcpy>
            return true;
 8002630:	2301      	movs	r3, #1
 8002632:	e012      	b.n	800265a <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fc6e 	bl	8001f18 <print_string>
 800263c:	4603      	mov	r3, r0
 800263e:	e00c      	b.n	800265a <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8d8 	bl	80027f8 <print_array>
 8002648:	4603      	mov	r3, r0
 800264a:	e006      	b.n	800265a <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa57 	bl	8002b02 <print_object>
 8002654:	4603      	mov	r3, r0
 8002656:	e000      	b.n	800265a <print_value+0x1b2>

        default:
            return false;
 8002658:	2300      	movs	r3, #0
    }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	08010444 	.word	0x08010444
 8002668:	08010474 	.word	0x08010474
 800266c:	0801047c 	.word	0x0801047c

08002670 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268a:	d301      	bcc.n	8002690 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800268c:	2300      	movs	r3, #0
 800268e:	e0af      	b.n	80027f0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b5b      	cmp	r3, #91	; 0x5b
 80026a8:	f040 8094 	bne.w	80027d4 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f7ff fc3e 	bl	8001f38 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <parse_array+0x6e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d207      	bcs.n	80026de <parse_array+0x6e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b5d      	cmp	r3, #93	; 0x5d
 80026dc:	d061      	beq.n	80027a2 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <parse_array+0x80>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d305      	bcc.n	80026fc <parse_array+0x8c>
    {
        input_buffer->offset--;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80026fa:	e072      	b.n	80027e2 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3310      	adds	r3, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd1c 	bl	8001148 <cJSON_New_Item>
 8002710:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05f      	beq.n	80027d8 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e007      	b.n	8002738 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	f7ff fbf8 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	6938      	ldr	r0, [r7, #16]
 800274c:	f7ff fdc0 	bl	80022d0 <parse_value>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d042      	beq.n	80027dc <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f7ff fbee 	bl	8001f38 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <parse_array+0x10e>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d207      	bcs.n	800277e <parse_array+0x10e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b2c      	cmp	r3, #44	; 0x2c
 800277c:	d0c3      	beq.n	8002706 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02d      	beq.n	80027e0 <parse_array+0x170>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d227      	bcs.n	80027e0 <parse_array+0x170>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b5d      	cmp	r3, #93	; 0x5d
 800279e:	d11f      	bne.n	80027e0 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027a0:	e000      	b.n	80027a4 <parse_array+0x134>
        goto success;
 80027a2:	bf00      	nop
    input_buffer->depth--;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <parse_array+0x14a>
        head->prev = current_item;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	60da      	str	r2, [r3, #12]
    item->child = head;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]

    return true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00d      	b.n	80027f0 <parse_array+0x180>
        goto fail;
 80027d4:	bf00      	nop
 80027d6:	e004      	b.n	80027e2 <parse_array+0x172>
            goto fail; /* allocation failure */
 80027d8:	bf00      	nop
 80027da:	e002      	b.n	80027e2 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <parse_array+0x172>
        goto fail; /* expected end of array */
 80027e0:	bf00      	nop

fail:
    if (head != NULL)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7fe fcc3 	bl	8001174 <cJSON_Delete>
    }

    return false;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <print_array+0x22>
    {
        return false;
 8002816:	2300      	movs	r3, #0
 8002818:	e070      	b.n	80028fc <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800281a:	2101      	movs	r1, #1
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f7fe fdc7 	bl	80013b0 <ensure>
 8002822:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <print_array+0x36>
    {
        return false;
 800282a:	2300      	movs	r3, #0
 800282c:	e066      	b.n	80028fc <print_array+0x104>
    }

    *output_pointer = '[';
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	225b      	movs	r2, #91	; 0x5b
 8002832:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002848:	e03d      	b.n	80028c6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	6938      	ldr	r0, [r7, #16]
 800284e:	f7ff fe2b 	bl	80024a8 <print_value>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <print_array+0x64>
        {
            return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e04f      	b.n	80028fc <print_array+0x104>
        }
        update_offset(output_buffer);
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f7fe fe41 	bl	80014e4 <update_offset>
        if (current_element->next)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d02a      	beq.n	80028c0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <print_array+0x7e>
 8002872:	2302      	movs	r3, #2
 8002874:	e000      	b.n	8002878 <print_array+0x80>
 8002876:	2301      	movs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	4619      	mov	r1, r3
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7fe fd95 	bl	80013b0 <ensure>
 8002886:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <print_array+0x9a>
            {
                return false;
 800288e:	2300      	movs	r3, #0
 8002890:	e034      	b.n	80028fc <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	617a      	str	r2, [r7, #20]
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	617a      	str	r2, [r7, #20]
 80028aa:	2220      	movs	r2, #32
 80028ac:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	441a      	add	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1be      	bne.n	800284a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80028cc:	2102      	movs	r1, #2
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f7fe fd6e 	bl	80013b0 <ensure>
 80028d4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <print_array+0xe8>
    {
        return false;
 80028dc:	2300      	movs	r3, #0
 80028de:	e00d      	b.n	80028fc <print_array+0x104>
    }
    *output_pointer++ = ']';
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	617a      	str	r2, [r7, #20]
 80028e6:	225d      	movs	r2, #93	; 0x5d
 80028e8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	60da      	str	r2, [r3, #12]

    return true;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291e:	d301      	bcc.n	8002924 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002920:	2300      	movs	r3, #0
 8002922:	e0ea      	b.n	8002afa <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80d0 	beq.w	8002ad6 <parse_object+0x1d2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	f080 80c9 	bcs.w	8002ad6 <parse_object+0x1d2>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b7b      	cmp	r3, #123	; 0x7b
 8002952:	f040 80c0 	bne.w	8002ad6 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f7ff fae9 	bl	8001f38 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <parse_object+0x86>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <parse_object+0x86>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b7d      	cmp	r3, #125	; 0x7d
 8002986:	f000 808d 	beq.w	8002aa4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <parse_object+0x98>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d305      	bcc.n	80029a8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	609a      	str	r2, [r3, #8]
        goto fail;
 80029a6:	e0a1      	b.n	8002aec <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	3310      	adds	r3, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fbc6 	bl	8001148 <cJSON_New_Item>
 80029bc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 808a 	beq.w	8002ada <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	e007      	b.n	80029e6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f7ff faa1 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f7ff f817 	bl	8001a2c <parse_string>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d06c      	beq.n	8002ade <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7ff fa97 	bl	8001f38 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d061      	beq.n	8002ae2 <parse_object+0x1de>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d25b      	bcs.n	8002ae2 <parse_object+0x1de>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b3a      	cmp	r3, #58	; 0x3a
 8002a38:	d153      	bne.n	8002ae2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f7ff fa77 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	6938      	ldr	r0, [r7, #16]
 8002a4e:	f7ff fc3f 	bl	80022d0 <parse_value>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	f7ff fa6d 	bl	8001f38 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <parse_object+0x17c>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <parse_object+0x17c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2c      	cmp	r3, #44	; 0x2c
 8002a7e:	d098      	beq.n	80029b2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d031      	beq.n	8002aea <parse_object+0x1e6>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d22b      	bcs.n	8002aea <parse_object+0x1e6>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b7d      	cmp	r3, #125	; 0x7d
 8002aa0:	d123      	bne.n	8002aea <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002aa2:	e000      	b.n	8002aa6 <parse_object+0x1a2>
        goto success; /* empty object */
 8002aa4:	bf00      	nop
    input_buffer->depth--;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <parse_object+0x1b8>
        head->prev = current_item;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]
    return true;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e011      	b.n	8002afa <parse_object+0x1f6>
        goto fail; /* not an object */
 8002ad6:	bf00      	nop
 8002ad8:	e008      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002ada:	bf00      	nop
 8002adc:	e006      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002ade:	bf00      	nop
 8002ae0:	e004      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002aea:	bf00      	nop

fail:
    if (head != NULL)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7fe fb3e 	bl	8001174 <cJSON_Delete>
    }

    return false;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <print_object+0x22>
    {
        return false;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e108      	b.n	8002d36 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <print_object+0x2e>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e000      	b.n	8002b32 <print_object+0x30>
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f7fe fc38 	bl	80013b0 <ensure>
 8002b40:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <print_object+0x4a>
    {
        return false;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e0f4      	b.n	8002d36 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	61fa      	str	r2, [r7, #28]
 8002b52:	227b      	movs	r2, #123	; 0x7b
 8002b54:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	220a      	movs	r2, #10
 8002b70:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	441a      	add	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002b7e:	e0a0      	b.n	8002cc2 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f7fe fc0e 	bl	80013b0 <ensure>
 8002b94:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <print_object+0x9e>
            {
                return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e0ca      	b.n	8002d36 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e007      	b.n	8002bb6 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	61fa      	str	r2, [r7, #28]
 8002bac:	2209      	movs	r2, #9
 8002bae:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3f2      	bcc.n	8002ba6 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	441a      	add	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f86f 	bl	8001cb8 <print_string_ptr>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <print_object+0xe2>
        {
            return false;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e0a8      	b.n	8002d36 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002be4:	6838      	ldr	r0, [r7, #0]
 8002be6:	f7fe fc7d 	bl	80014e4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <print_object+0xf4>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e000      	b.n	8002bf8 <print_object+0xf6>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	6838      	ldr	r0, [r7, #0]
 8002bfe:	f7fe fbd7 	bl	80013b0 <ensure>
 8002c02:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <print_object+0x10c>
        {
            return false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e093      	b.n	8002d36 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	223a      	movs	r2, #58	; 0x3a
 8002c16:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	2209      	movs	r2, #9
 8002c28:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	441a      	add	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7ff fc35 	bl	80024a8 <print_value>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <print_object+0x146>
        {
            return false;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e076      	b.n	8002d36 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f7fe fc4b 	bl	80014e4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <print_object+0x158>
 8002c56:	2201      	movs	r2, #1
 8002c58:	e000      	b.n	8002c5c <print_object+0x15a>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <print_object+0x166>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <print_object+0x168>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4619      	mov	r1, r3
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f7fe fb9b 	bl	80013b0 <ensure>
 8002c7a:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <print_object+0x184>
        {
            return false;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e057      	b.n	8002d36 <print_object+0x234>
        }
        if (current_item->next)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	61fa      	str	r2, [r7, #28]
 8002c94:	222c      	movs	r2, #44	; 0x2c
 8002c96:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	220a      	movs	r2, #10
 8002ca8:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af5b 	bne.w	8002b80 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <print_object+0x1d8>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	e000      	b.n	8002cdc <print_object+0x1da>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	f7fe fb66 	bl	80013b0 <ensure>
 8002ce4:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <print_object+0x1ee>
    {
        return false;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e022      	b.n	8002d36 <print_object+0x234>
    }
    if (output_buffer->format)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e007      	b.n	8002d0e <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	2209      	movs	r2, #9
 8002d06:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3f1      	bcc.n	8002cfe <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	61fa      	str	r2, [r7, #28]
 8002d20:	227d      	movs	r2, #125	; 0x7d
 8002d22:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	60da      	str	r2, [r3, #12]

    return true;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <get_object_item+0x1c>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <get_object_item+0x20>
    {
        return NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e033      	b.n	8002dc6 <get_object_item+0x88>
    }

    current_element = object->child;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d6a:	e002      	b.n	8002d72 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <get_object_item+0x74>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d018      	beq.n	8002db2 <get_object_item+0x74>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4619      	mov	r1, r3
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	f7fd fa2a 	bl	80001e0 <strcmp>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ec      	bne.n	8002d6c <get_object_item+0x2e>
 8002d92:	e00e      	b.n	8002db2 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <get_object_item+0x74>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4619      	mov	r1, r3
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7fe f93a 	bl	8001020 <case_insensitive_strcmp>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <get_object_item+0x82>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <get_object_item+0x86>
        return NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <get_object_item+0x88>
    }

    return current_element;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ffae 	bl	8002d3e <get_object_item>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	605a      	str	r2, [r3, #4]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <add_item_to_array+0x22>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <add_item_to_array+0x22>
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d101      	bne.n	8002e34 <add_item_to_array+0x26>
    {
        return false;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e01e      	b.n	8002e72 <add_item_to_array+0x64>
    }

    child = array->child;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00d      	b.n	8002e70 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ffc2 	bl	8002dec <suffix_object>
            array->child->prev = item;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d101      	bne.n	8002ec4 <add_item_to_object+0x34>
    {
        return false;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e036      	b.n	8002f32 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	f7ff ffd5 	bl	8002e7a <cast_away_const>
 8002ed0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e00e      	b.n	8002efc <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f7fe f909 	bl	80010f8 <cJSON_strdup>
 8002ee6:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <add_item_to_object+0x62>
        {
            return false;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e01f      	b.n	8002f32 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002efa:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <add_item_to_object+0x8c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6a12      	ldr	r2, [r2, #32]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
    }

    item->string = new_key;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff ff6f 	bl	8002e0e <add_item_to_array>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002f4a:	ed97 0b00 	vldr	d0, [r7]
 8002f4e:	f000 f81b 	bl	8002f88 <cJSON_CreateNumber>
 8002f52:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002f54:	2300      	movs	r3, #0
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <cJSON_AddNumberToObject+0x44>)
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff96 	bl	8002e90 <add_item_to_object>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	e003      	b.n	8002f76 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7fe f900 	bl	8001174 <cJSON_Delete>
    return NULL;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000
 8002f84:	00000000 	.word	0x00000000

08002f88 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002f92:	481f      	ldr	r0, [pc, #124]	; (8003010 <cJSON_CreateNumber+0x88>)
 8002f94:	f7fe f8d8 	bl	8001148 <cJSON_New_Item>
 8002f98:	60f8      	str	r0, [r7, #12]
    if(item)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02c      	beq.n	8002ffa <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fac:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002fb0:	a315      	add	r3, pc, #84	; (adr r3, 8003008 <cJSON_CreateNumber+0x80>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fba:	f7fd fdbb 	bl	8000b34 <__aeabi_dcmpge>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	e015      	b.n	8002ffa <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <cJSON_CreateNumber+0x8c>)
 8002fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fd8:	f7fd fda2 	bl	8000b20 <__aeabi_dcmple>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	e006      	b.n	8002ffa <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8002fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff0:	f7fd fdca 	bl	8000b88 <__aeabi_d2iz>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f3af 8000 	nop.w
 8003008:	ffc00000 	.word	0xffc00000
 800300c:	41dfffff 	.word	0x41dfffff
 8003010:	20000000 	.word	0x20000000
 8003014:	c1e00000 	.word	0xc1e00000

08003018 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <cJSON_CreateObject+0x24>)
 8003020:	f7fe f892 	bl	8001148 <cJSON_New_Item>
 8003024:	6078      	str	r0, [r7, #4]
    if (item)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000000 	.word	0x20000000

08003040 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <cJSON_IsBool+0x12>
    {
        return false;
 800304e:	2300      	movs	r3, #0
 8003050:	e008      	b.n	8003064 <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <cJSON_IsNumber+0x12>
    {
        return false;
 800307e:	2300      	movs	r3, #0
 8003080:	e007      	b.n	8003092 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b08      	cmp	r3, #8
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <cJSON_IsObject+0x12>
    {
        return false;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e007      	b.n	80030c0 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <deserializeJSON>:
 * This function takes a JSON string and fills a GameInfo struct with the deserialized information.
 *
 * @param json_data The JSON data to be deserialized.
 * @param info Pointer to the GameInfo struct to store the deserialized information.
 */
void deserializeJSON(const char* json_data, struct GameInfo* info) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_data);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff f858 	bl	800218c <cJSON_Parse>
 80030dc:	6278      	str	r0, [r7, #36]	; 0x24

    // Who is JSON?

    if (root == NULL) {
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d079      	beq.n	80031d8 <deserializeJSON+0x10c>
        // Handle the error here, e.g., set default values or return.
        return;
    }

    cJSON *team1_json = cJSON_GetObjectItem(root, "team1");
 80030e4:	493e      	ldr	r1, [pc, #248]	; (80031e0 <deserializeJSON+0x114>)
 80030e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e8:	f7ff fe71 	bl	8002dce <cJSON_GetObjectItem>
 80030ec:	6238      	str	r0, [r7, #32]
    cJSON *team2_json = cJSON_GetObjectItem(root, "team2");
 80030ee:	493d      	ldr	r1, [pc, #244]	; (80031e4 <deserializeJSON+0x118>)
 80030f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030f2:	f7ff fe6c 	bl	8002dce <cJSON_GetObjectItem>
 80030f6:	61f8      	str	r0, [r7, #28]
    cJSON *end_of_round_json = cJSON_GetObjectItem(root, "end_of_round");
 80030f8:	493b      	ldr	r1, [pc, #236]	; (80031e8 <deserializeJSON+0x11c>)
 80030fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030fc:	f7ff fe67 	bl	8002dce <cJSON_GetObjectItem>
 8003100:	61b8      	str	r0, [r7, #24]

    if (team1_json && cJSON_IsObject(team1_json)) {
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d029      	beq.n	800315c <deserializeJSON+0x90>
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f7ff ffc8 	bl	800309e <cJSON_IsObject>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <deserializeJSON+0x90>
        cJSON *score_json = cJSON_GetObjectItem(team1_json, "score");
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <deserializeJSON+0x120>)
 8003116:	6a38      	ldr	r0, [r7, #32]
 8003118:	f7ff fe59 	bl	8002dce <cJSON_GetObjectItem>
 800311c:	6178      	str	r0, [r7, #20]
        cJSON *state_json = cJSON_GetObjectItem(team1_json, "state");
 800311e:	4934      	ldr	r1, [pc, #208]	; (80031f0 <deserializeJSON+0x124>)
 8003120:	6a38      	ldr	r0, [r7, #32]
 8003122:	f7ff fe54 	bl	8002dce <cJSON_GetObjectItem>
 8003126:	6138      	str	r0, [r7, #16]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <deserializeJSON+0x76>
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff9e 	bl	8003070 <cJSON_IsNumber>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <deserializeJSON+0x76>
            info->team1.score = score_json->valueint;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	601a      	str	r2, [r3, #0]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <deserializeJSON+0x90>
 8003148:	6938      	ldr	r0, [r7, #16]
 800314a:	f7ff ff91 	bl	8003070 <cJSON_IsNumber>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <deserializeJSON+0x90>
            info->team1.state = state_json->valueint;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
        }
    }

    if (team2_json && cJSON_IsObject(team2_json)) {
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d029      	beq.n	80031b6 <deserializeJSON+0xea>
 8003162:	69f8      	ldr	r0, [r7, #28]
 8003164:	f7ff ff9b 	bl	800309e <cJSON_IsObject>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <deserializeJSON+0xea>
        cJSON *score_json = cJSON_GetObjectItem(team2_json, "score");
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <deserializeJSON+0x120>)
 8003170:	69f8      	ldr	r0, [r7, #28]
 8003172:	f7ff fe2c 	bl	8002dce <cJSON_GetObjectItem>
 8003176:	60f8      	str	r0, [r7, #12]
        cJSON *state_json = cJSON_GetObjectItem(team2_json, "state");
 8003178:	491d      	ldr	r1, [pc, #116]	; (80031f0 <deserializeJSON+0x124>)
 800317a:	69f8      	ldr	r0, [r7, #28]
 800317c:	f7ff fe27 	bl	8002dce <cJSON_GetObjectItem>
 8003180:	60b8      	str	r0, [r7, #8]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <deserializeJSON+0xd0>
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff71 	bl	8003070 <cJSON_IsNumber>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <deserializeJSON+0xd0>
            info->team2.score = score_json->valueint;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	609a      	str	r2, [r3, #8]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <deserializeJSON+0xea>
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	f7ff ff64 	bl	8003070 <cJSON_IsNumber>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <deserializeJSON+0xea>
            info->team2.state = state_json->valueint;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	60da      	str	r2, [r3, #12]
        }
    }
    if (end_of_round_json && cJSON_IsBool(end_of_round_json)) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <deserializeJSON+0x104>
 80031bc:	69b8      	ldr	r0, [r7, #24]
 80031be:	f7ff ff3f 	bl	8003040 <cJSON_IsBool>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <deserializeJSON+0x104>
        info->end_of_round = end_of_round_json->valueint;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	611a      	str	r2, [r3, #16]
    }

    cJSON_Delete(root);
 80031d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d2:	f7fd ffcf 	bl	8001174 <cJSON_Delete>
 80031d6:	e000      	b.n	80031da <deserializeJSON+0x10e>
        return;
 80031d8:	bf00      	nop
}
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08010484 	.word	0x08010484
 80031e4:	0801048c 	.word	0x0801048c
 80031e8:	08010494 	.word	0x08010494
 80031ec:	080104a4 	.word	0x080104a4
 80031f0:	080104ac 	.word	0x080104ac

080031f4 <serializeJSON>:
 * This function takes a broadcast packet and serializes it into a JSON and stores it in a char array.
 *
 * @param packet Pointer to he JSON data to be seralized.
 * @param data Pointer to the string storing the serialized JSON information.
 */
void serializeJSON(BroadcastPacket* data, char* dst ){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]

	 cJSON* json = cJSON_CreateObject();
 80031fe:	f7ff ff0b 	bl	8003018 <cJSON_CreateObject>
 8003202:	60f8      	str	r0, [r7, #12]

	    if (json == NULL) {
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03e      	beq.n	8003288 <serializeJSON+0x94>
//	        fprintf(stderr, "Failed to create JSON object.\n");
	        return NULL;
	    }

	    cJSON_AddNumberToObject(json, "battery", data->batteryVoltage); // battery voltage
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f990 	bl	8000534 <__aeabi_ui2d>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	ec43 2b10 	vmov	d0, r2, r3
 800321c:	491c      	ldr	r1, [pc, #112]	; (8003290 <serializeJSON+0x9c>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fe8c 	bl	8002f3c <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team1d", data->team0DeltaScore); // Team0 score delta
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f983 	bl	8000534 <__aeabi_ui2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	ec43 2b10 	vmov	d0, r2, r3
 8003236:	4917      	ldr	r1, [pc, #92]	; (8003294 <serializeJSON+0xa0>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff fe7f 	bl	8002f3c <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team2d", data->team1DeltaScore);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f976 	bl	8000534 <__aeabi_ui2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	ec43 2b10 	vmov	d0, r2, r3
 8003250:	4911      	ldr	r1, [pc, #68]	; (8003298 <serializeJSON+0xa4>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fe72 	bl	8002f3c <cJSON_AddNumberToObject>

	    char* temp = cJSON_PrintUnformatted(json);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff f829 	bl	80022b0 <cJSON_PrintUnformatted>
 800325e:	60b8      	str	r0, [r7, #8]
	    strncat (temp, "\n", 2);
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f7fc ffc7 	bl	80001f4 <strlen>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	490b      	ldr	r1, [pc, #44]	; (800329c <serializeJSON+0xa8>)
 8003270:	461a      	mov	r2, r3
 8003272:	460b      	mov	r3, r1
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	8013      	strh	r3, [r2, #0]
	    strcpy(dst, temp);
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f00a fd0b 	bl	800dc96 <strcpy>
	    cJSON_Delete(json);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7fd ff77 	bl	8001174 <cJSON_Delete>

	    return dst;
 8003286:	e000      	b.n	800328a <serializeJSON+0x96>
	        return NULL;
 8003288:	bf00      	nop


}
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	080104b4 	.word	0x080104b4
 8003294:	080104bc 	.word	0x080104bc
 8003298:	080104c4 	.word	0x080104c4
 800329c:	080104cc 	.word	0x080104cc

080032a0 <reader_irq_pulse>:


// UPDATE ALL THESE TO INCLUDE DELAYUNTIL or OSDELAY
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2110      	movs	r1, #16
 80032a8:	480b      	ldr	r0, [pc, #44]	; (80032d8 <reader_irq_pulse+0x38>)
 80032aa:	f003 f941 	bl	8006530 <HAL_GPIO_WritePin>
  // HAL_delay(1);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(1)); // delay 1 ms
 80032ae:	f007 fefb 	bl	800b0a8 <xTaskGetTickCount>
 80032b2:	4603      	mov	r3, r0
 80032b4:	3301      	adds	r3, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f007 fda6 	bl	800ae08 <vTaskDelay>
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80032bc:	2201      	movs	r2, #1
 80032be:	2110      	movs	r1, #16
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <reader_irq_pulse+0x38>)
 80032c2:	f003 f935 	bl	8006530 <HAL_GPIO_WritePin>
  // HAL_delay(8);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(8)); // delay 8 ms
 80032c6:	f007 feef 	bl	800b0a8 <xTaskGetTickCount>
 80032ca:	4603      	mov	r3, r0
 80032cc:	3308      	adds	r3, #8
 80032ce:	4618      	mov	r0, r3
 80032d0:	f007 fd9a 	bl	800ae08 <vTaskDelay>
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	48000800 	.word	0x48000800

080032dc <reader_nss>:

void reader_nss(uint8_t enable)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	2110      	movs	r1, #16
 80032f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032fa:	f003 f919 	bl	8006530 <HAL_GPIO_WritePin>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <reader_tx>:

int reader_tx(uint8_t *data, size_t len)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b29a      	uxth	r2, r3
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <reader_tx+0x28>)
 800331e:	f004 fbd4 	bl	8007aca <HAL_SPI_Transmit>
 8003322:	4603      	mov	r3, r0
 8003324:	60fb      	str	r3, [r7, #12]
  return ret;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200002d0 	.word	0x200002d0

08003334 <reader_rx>:

int reader_rx(uint8_t *data, size_t len)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b29a      	uxth	r2, r3
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4804      	ldr	r0, [pc, #16]	; (800335c <reader_rx+0x28>)
 800334a:	f004 fd2c 	bl	8007da6 <HAL_SPI_Receive>
 800334e:	4603      	mov	r3, r0
 8003350:	60fb      	str	r3, [r7, #12]
  return ret;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	200002d0 	.word	0x200002d0

08003360 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  if (pin == RFID_NIRQ_OUT_PIN) {
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003370:	d102      	bne.n	8003378 <HAL_GPIO_EXTI_Callback+0x18>
    reader_handler.irq_flag = 1;
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_GPIO_EXTI_Callback+0x24>)
 8003374:	2201      	movs	r2, #1
 8003376:	745a      	strb	r2, [r3, #17]
  }
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	200006f0 	.word	0x200006f0

08003388 <st25_card_callback>:

void st25_card_callback(uint8_t *uid)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  //HAL_Delay(uid[0]);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(uid[0])); // delay uid[0]
 8003390:	f007 fe8a 	bl	800b0a8 <xTaskGetTickCount>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4905      	ldr	r1, [pc, #20]	; (80033bc <st25_card_callback+0x34>)
 80033a6:	fba1 1303 	umull	r1, r3, r1, r3
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	4413      	add	r3, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f007 fd2a 	bl	800ae08 <vTaskDelay>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c4:	f001 f9ae 	bl	8004724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c8:	f000 f8b6 	bl	8003538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033cc:	f000 fa2a 	bl	8003824 <MX_GPIO_Init>
  MX_DMA_Init();
 80033d0:	f000 fa0a 	bl	80037e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033d4:	f000 f9d8 	bl	8003788 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80033d8:	f000 f9a6 	bl	8003728 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80033dc:	f000 f8fe 	bl	80035dc <MX_ADC1_Init>
  MX_SPI1_Init();
 80033e0:	f000 f964 	bl	80036ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // RFID INITIALIZATION
  reader_handler.protocol = ST25_PROTOCOL_14443A;
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <main+0x110>)
 80033e6:	2202      	movs	r2, #2
 80033e8:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <main+0x110>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <main+0x110>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <main+0x110>)
 80033f8:	2258      	movs	r2, #88	; 0x58
 80033fa:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <main+0x110>)
 80033fe:	22d1      	movs	r2, #209	; 0xd1
 8003400:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <main+0x110>)
 8003404:	2200      	movs	r2, #0
 8003406:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <main+0x110>)
 800340a:	4a32      	ldr	r2, [pc, #200]	; (80034d4 <main+0x114>)
 800340c:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <main+0x110>)
 8003410:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <main+0x118>)
 8003412:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <main+0x110>)
 8003416:	4a31      	ldr	r2, [pc, #196]	; (80034dc <main+0x11c>)
 8003418:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <main+0x110>)
 800341c:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <main+0x120>)
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <main+0x110>)
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <main+0x124>)
 8003424:	615a      	str	r2, [r3, #20]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003426:	f006 f897 	bl	8009558 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BluetoothRX */
  BluetoothRXHandle = osSemaphoreNew(1, 1, &BluetoothRX_attributes);
 800342a:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <main+0x128>)
 800342c:	2101      	movs	r1, #1
 800342e:	2001      	movs	r0, #1
 8003430:	f006 f96e 	bl	8009710 <osSemaphoreNew>
 8003434:	4603      	mov	r3, r0
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <main+0x12c>)
 8003438:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800343a:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <main+0x130>)
 800343c:	2100      	movs	r1, #0
 800343e:	482d      	ldr	r0, [pc, #180]	; (80034f4 <main+0x134>)
 8003440:	f006 f8d4 	bl	80095ec <osThreadNew>
 8003444:	4603      	mov	r3, r0
 8003446:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <main+0x138>)
 8003448:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <main+0x13c>)
 800344c:	2100      	movs	r1, #0
 800344e:	482c      	ldr	r0, [pc, #176]	; (8003500 <main+0x140>)
 8003450:	f006 f8cc 	bl	80095ec <osThreadNew>
 8003454:	4603      	mov	r3, r0
 8003456:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <main+0x144>)
 8003458:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothRXTask */
  BluetoothRXTaskHandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothRXTask_attributes);
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <main+0x148>)
 800345c:	2100      	movs	r1, #0
 800345e:	482b      	ldr	r0, [pc, #172]	; (800350c <main+0x14c>)
 8003460:	f006 f8c4 	bl	80095ec <osThreadNew>
 8003464:	4603      	mov	r3, r0
 8003466:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <main+0x150>)
 8003468:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <main+0x154>)
 800346c:	2100      	movs	r1, #0
 800346e:	482a      	ldr	r0, [pc, #168]	; (8003518 <main+0x158>)
 8003470:	f006 f8bc 	bl	80095ec <osThreadNew>
 8003474:	4603      	mov	r3, r0
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <main+0x15c>)
 8003478:	6013      	str	r3, [r2, #0]

  /* creation of broadcastTask */
  broadcastTaskHandle = osThreadNew(StartBroadcastTask, NULL, &broadcastTask_attributes);
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <main+0x160>)
 800347c:	2100      	movs	r1, #0
 800347e:	4829      	ldr	r0, [pc, #164]	; (8003524 <main+0x164>)
 8003480:	f006 f8b4 	bl	80095ec <osThreadNew>
 8003484:	4603      	mov	r3, r0
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <main+0x168>)
 8003488:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  	  if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 800348a:	2102      	movs	r1, #2
 800348c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003490:	f003 f836 	bl	8006500 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d103      	bne.n	80034a2 <main+0xe2>
  		  CBU_ID[3] = '1';
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <main+0x16c>)
 800349c:	2231      	movs	r2, #49	; 0x31
 800349e:	70da      	strb	r2, [r3, #3]
 80034a0:	e002      	b.n	80034a8 <main+0xe8>
  	  } else {
  		  CBU_ID[3] = '0';
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <main+0x16c>)
 80034a4:	2230      	movs	r2, #48	; 0x30
 80034a6:	70da      	strb	r2, [r3, #3]
  	  }

  	  ble.huart = &huart1;
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <main+0x170>)
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <main+0x174>)
 80034ac:	601a      	str	r2, [r3, #0]
  	  ble.cs_base = BLE_CS_PORT;
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <main+0x170>)
 80034b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034b4:	605a      	str	r2, [r3, #4]
  	  ble.cs_pin = BLE_CS_PIN;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <main+0x170>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	811a      	strh	r2, [r3, #8]
  	  ble.name = CBU_ID;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <main+0x170>)
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <main+0x16c>)
 80034c0:	60da      	str	r2, [r3, #12]
  	  ble.mutex = &BluetoothRXHandle;
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <main+0x170>)
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <main+0x12c>)
 80034c6:	611a      	str	r2, [r3, #16]
//	  select_rfid_channel(8);
//	  for(;;);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80034c8:	f006 f86a 	bl	80095a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <main+0x10c>
 80034ce:	bf00      	nop
 80034d0:	200006f0 	.word	0x200006f0
 80034d4:	080032dd 	.word	0x080032dd
 80034d8:	08003309 	.word	0x08003309
 80034dc:	08003335 	.word	0x08003335
 80034e0:	080032a1 	.word	0x080032a1
 80034e4:	08003389 	.word	0x08003389
 80034e8:	08010634 	.word	0x08010634
 80034ec:	200004b0 	.word	0x200004b0
 80034f0:	08010580 	.word	0x08010580
 80034f4:	0800398d 	.word	0x0800398d
 80034f8:	2000049c 	.word	0x2000049c
 80034fc:	080105a4 	.word	0x080105a4
 8003500:	08003a29 	.word	0x08003a29
 8003504:	200004a0 	.word	0x200004a0
 8003508:	080105c8 	.word	0x080105c8
 800350c:	08003a95 	.word	0x08003a95
 8003510:	200004a4 	.word	0x200004a4
 8003514:	080105ec 	.word	0x080105ec
 8003518:	08003ae9 	.word	0x08003ae9
 800351c:	200004a8 	.word	0x200004a8
 8003520:	08010610 	.word	0x08010610
 8003524:	08003bad 	.word	0x08003bad
 8003528:	200004ac 	.word	0x200004ac
 800352c:	2000000c 	.word	0x2000000c
 8003530:	200004c0 	.word	0x200004c0
 8003534:	20000334 	.word	0x20000334

08003538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b096      	sub	sp, #88	; 0x58
 800353c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	2244      	movs	r2, #68	; 0x44
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f00a fab1 	bl	800daae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800354c:	463b      	mov	r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800355a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800355e:	f003 f825 	bl	80065ac <HAL_PWREx_ControlVoltageScaling>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003568:	f000 fb3a 	bl	8003be0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800356c:	2302      	movs	r3, #2
 800356e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357a:	2302      	movs	r3, #2
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800357e:	2302      	movs	r3, #2
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003586:	230a      	movs	r3, #10
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800358a:	2307      	movs	r3, #7
 800358c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800358e:	2302      	movs	r3, #2
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	4618      	mov	r0, r3
 800359c:	f003 f85c 	bl	8006658 <HAL_RCC_OscConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80035a6:	f000 fb1b 	bl	8003be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035aa:	230f      	movs	r3, #15
 80035ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ae:	2303      	movs	r3, #3
 80035b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2104      	movs	r1, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fc5c 	bl	8006e80 <HAL_RCC_ClockConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80035ce:	f000 fb07 	bl	8003be0 <Error_Handler>
  }
}
 80035d2:	bf00      	nop
 80035d4:	3758      	adds	r7, #88	; 0x58
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035e2:	463b      	mov	r3, r7
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
 80035f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <MX_ADC1_Init+0xc4>)
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <MX_ADC1_Init+0xc8>)
 80035f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <MX_ADC1_Init+0xc4>)
 80035fa:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80035fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003614:	2204      	movs	r2, #4
 8003616:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800361a:	2200      	movs	r2, #0
 800361c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003620:	2201      	movs	r2, #1
 8003622:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003626:	2201      	movs	r2, #1
 8003628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003634:	2200      	movs	r2, #0
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800363a:	2200      	movs	r2, #0
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003648:	2200      	movs	r2, #0
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003656:	2204      	movs	r2, #4
 8003658:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800365a:	4811      	ldr	r0, [pc, #68]	; (80036a0 <MX_ADC1_Init+0xc4>)
 800365c:	f001 fade 	bl	8004c1c <HAL_ADC_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003666:	f000 fabb 	bl	8003be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_ADC1_Init+0xcc>)
 800366c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800366e:	2306      	movs	r3, #6
 8003670:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003676:	237f      	movs	r3, #127	; 0x7f
 8003678:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800367a:	2304      	movs	r3, #4
 800367c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003682:	463b      	mov	r3, r7
 8003684:	4619      	mov	r1, r3
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <MX_ADC1_Init+0xc4>)
 8003688:	f001 fcb6 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8003692:	f000 faa5 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000220 	.word	0x20000220
 80036a4:	50040000 	.word	0x50040000
 80036a8:	cb840000 	.word	0xcb840000

080036ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <MX_SPI1_Init+0x74>)
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <MX_SPI1_Init+0x78>)
 80036b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <MX_SPI1_Init+0x74>)
 80036b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_SPI1_Init+0x74>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <MX_SPI1_Init+0x74>)
 80036c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <MX_SPI1_Init+0x74>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <MX_SPI1_Init+0x74>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <MX_SPI1_Init+0x74>)
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MX_SPI1_Init+0x74>)
 80036e2:	2230      	movs	r2, #48	; 0x30
 80036e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_SPI1_Init+0x74>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <MX_SPI1_Init+0x74>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <MX_SPI1_Init+0x74>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <MX_SPI1_Init+0x74>)
 80036fa:	2207      	movs	r2, #7
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <MX_SPI1_Init+0x74>)
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <MX_SPI1_Init+0x74>)
 8003706:	2208      	movs	r2, #8
 8003708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <MX_SPI1_Init+0x74>)
 800370c:	f004 f93a 	bl	8007984 <HAL_SPI_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003716:	f000 fa63 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200002d0 	.word	0x200002d0
 8003724:	40013000 	.word	0x40013000

08003728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <MX_USART1_UART_Init+0x58>)
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <MX_USART1_UART_Init+0x5c>)
 8003730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <MX_USART1_UART_Init+0x58>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <MX_USART1_UART_Init+0x58>)
 800374e:	220c      	movs	r2, #12
 8003750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <MX_USART1_UART_Init+0x58>)
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003760:	2200      	movs	r2, #0
 8003762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <MX_USART1_UART_Init+0x58>)
 8003766:	2200      	movs	r2, #0
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800376a:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_USART1_UART_Init+0x58>)
 800376c:	f005 f81a 	bl	80087a4 <HAL_UART_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003776:	f000 fa33 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000334 	.word	0x20000334
 8003784:	40013800 	.word	0x40013800

08003788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <MX_USART2_UART_Init+0x5c>)
 8003790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 8003794:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037ae:	220c      	movs	r2, #12
 80037b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037ca:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_USART2_UART_Init+0x58>)
 80037cc:	f004 ffea 	bl	80087a4 <HAL_UART_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80037d6:	f000 fa03 	bl	8003be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200003e8 	.word	0x200003e8
 80037e4:	40004400 	.word	0x40004400

080037e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <MX_DMA_Init+0x38>)
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <MX_DMA_Init+0x38>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6493      	str	r3, [r2, #72]	; 0x48
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <MX_DMA_Init+0x38>)
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2105      	movs	r1, #5
 800380a:	200b      	movs	r0, #11
 800380c:	f002 facf 	bl	8005dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003810:	200b      	movs	r0, #11
 8003812:	f002 fae8 	bl	8005de6 <HAL_NVIC_EnableIRQ>

}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	4b51      	ldr	r3, [pc, #324]	; (8003980 <MX_GPIO_Init+0x15c>)
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	4a50      	ldr	r2, [pc, #320]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003846:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003852:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	4a4a      	ldr	r2, [pc, #296]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385e:	4b48      	ldr	r3, [pc, #288]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800386a:	4b45      	ldr	r3, [pc, #276]	; (8003980 <MX_GPIO_Init+0x15c>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	4a44      	ldr	r2, [pc, #272]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003876:	4b42      	ldr	r3, [pc, #264]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a3e      	ldr	r2, [pc, #248]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388e:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <MX_GPIO_Init+0x15c>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 800389a:	2200      	movs	r2, #0
 800389c:	21d6      	movs	r1, #214	; 0xd6
 800389e:	4839      	ldr	r0, [pc, #228]	; (8003984 <MX_GPIO_Init+0x160>)
 80038a0:	f002 fe46 	bl	8006530 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 80038a4:	2201      	movs	r2, #1
 80038a6:	2110      	movs	r1, #16
 80038a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ac:	f002 fe40 	bl	8006530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80038b0:	2200      	movs	r2, #0
 80038b2:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 80038b6:	4834      	ldr	r0, [pc, #208]	; (8003988 <MX_GPIO_Init+0x164>)
 80038b8:	f002 fe3a 	bl	8006530 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80038bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	482c      	ldr	r0, [pc, #176]	; (8003984 <MX_GPIO_Init+0x160>)
 80038d4:	f002 fc9a 	bl	800620c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 80038d8:	23c6      	movs	r3, #198	; 0xc6
 80038da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	4825      	ldr	r0, [pc, #148]	; (8003984 <MX_GPIO_Init+0x160>)
 80038f0:	f002 fc8c 	bl	800620c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 80038f4:	2310      	movs	r3, #16
 80038f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f8:	2301      	movs	r3, #1
 80038fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003900:	2303      	movs	r3, #3
 8003902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800390e:	f002 fc7d 	bl	800620c <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 8003912:	2310      	movs	r3, #16
 8003914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003916:	2301      	movs	r3, #1
 8003918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8003922:	f107 0314 	add.w	r3, r7, #20
 8003926:	4619      	mov	r1, r3
 8003928:	4816      	ldr	r0, [pc, #88]	; (8003984 <MX_GPIO_Init+0x160>)
 800392a:	f002 fc6f 	bl	800620c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800392e:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003932:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	2300      	movs	r3, #0
 800393e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	4810      	ldr	r0, [pc, #64]	; (8003988 <MX_GPIO_Init+0x164>)
 8003948:	f002 fc60 	bl	800620c <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 800394c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003952:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003958:	2301      	movs	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	4809      	ldr	r0, [pc, #36]	; (8003988 <MX_GPIO_Init+0x164>)
 8003964:	f002 fc52 	bl	800620c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003968:	2200      	movs	r2, #0
 800396a:	2105      	movs	r1, #5
 800396c:	2028      	movs	r0, #40	; 0x28
 800396e:	f002 fa1e 	bl	8005dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003972:	2028      	movs	r0, #40	; 0x28
 8003974:	f002 fa37 	bl	8005de6 <HAL_NVIC_EnableIRQ>

}
 8003978:	bf00      	nop
 800397a:	3728      	adds	r7, #40	; 0x28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	48000800 	.word	0x48000800
 8003988:	48000400 	.word	0x48000400

0800398c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003994:	23c8      	movs	r3, #200	; 0xc8
 8003996:	61fb      	str	r3, [r7, #28]

  xLastWakeTime = xTaskGetTickCount();
 8003998:	f007 fb86 	bl	800b0a8 <xTaskGetTickCount>
 800399c:	4603      	mov	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]

  int ret;
  int count = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
  memset(rx_buffer, 0, RX_BUFF_SIZE);
 80039a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a8:	2100      	movs	r1, #0
 80039aa:	4819      	ldr	r0, [pc, #100]	; (8003a10 <StartDefaultTask+0x84>)
 80039ac:	f00a f87f 	bl	800daae <memset>
//  char* json_string = "ICE SPICE \n";
  char* json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 80039b0:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <StartDefaultTask+0x88>)
 80039b2:	617b      	str	r3, [r7, #20]


  for(;;)
  {
	ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 5000);// Sending in normal mode
 80039b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80039b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039bc:	4914      	ldr	r1, [pc, #80]	; (8003a10 <StartDefaultTask+0x84>)
 80039be:	4816      	ldr	r0, [pc, #88]	; (8003a18 <StartDefaultTask+0x8c>)
 80039c0:	f004 ffe2 	bl	8008988 <HAL_UART_Receive>
 80039c4:	4603      	mov	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]
	if(ret == HAL_OK){
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <StartDefaultTask+0x74>
		// deserialize packet
		deserializeJSON((char*)rx_buffer, &gameInfo);
 80039ce:	4913      	ldr	r1, [pc, #76]	; (8003a1c <StartDefaultTask+0x90>)
 80039d0:	480f      	ldr	r0, [pc, #60]	; (8003a10 <StartDefaultTask+0x84>)
 80039d2:	f7ff fb7b 	bl	80030cc <deserializeJSON>
//		if (gameInfo.end_of_round) {
//			// do some other stuff
//		}

		// send reply packet
		broadcastPacket.team0DeltaScore = 2;
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <StartDefaultTask+0x94>)
 80039d8:	2202      	movs	r2, #2
 80039da:	605a      	str	r2, [r3, #4]
		broadcastPacket.team0DeltaScore = 2;
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <StartDefaultTask+0x94>)
 80039de:	2202      	movs	r2, #2
 80039e0:	605a      	str	r2, [r3, #4]
		serializeJSON(&broadcastPacket,(char*)tx_buffer);
 80039e2:	4910      	ldr	r1, [pc, #64]	; (8003a24 <StartDefaultTask+0x98>)
 80039e4:	480e      	ldr	r0, [pc, #56]	; (8003a20 <StartDefaultTask+0x94>)
 80039e6:	f7ff fc05 	bl	80031f4 <serializeJSON>
		HAL_UART_Transmit(&huart1,(uint8_t*)tx_buffer, strlen(tx_buffer),5000);
 80039ea:	480e      	ldr	r0, [pc, #56]	; (8003a24 <StartDefaultTask+0x98>)
 80039ec:	f7fc fc02 	bl	80001f4 <strlen>
 80039f0:	4603      	mov	r3, r0
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80039f8:	490a      	ldr	r1, [pc, #40]	; (8003a24 <StartDefaultTask+0x98>)
 80039fa:	4807      	ldr	r0, [pc, #28]	; (8003a18 <StartDefaultTask+0x8c>)
 80039fc:	f004 ff30 	bl	8008860 <HAL_UART_Transmit>
//		osSemaphoreRelease(BluetoothRXHandle, osWaitForever);

	}
//	 HAL_UART_Receive(&huart1,(uint8_t*)json_string, strlen(json_string),5000);
	 vTaskDelayUntil( &xLastWakeTime, period );
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f007 f980 	bl	800ad0c <vTaskDelayUntil>
	ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 5000);// Sending in normal mode
 8003a0c:	e7d2      	b.n	80039b4 <StartDefaultTask+0x28>
 8003a0e:	bf00      	nop
 8003a10:	200004dc 	.word	0x200004dc
 8003a14:	08010528 	.word	0x08010528
 8003a18:	20000334 	.word	0x20000334
 8003a1c:	200006dc 	.word	0x200006dc
 8003a20:	200004b4 	.word	0x200004b4
 8003a24:	200005dc 	.word	0x200005dc

08003a28 <StartRFIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */
	st25r95_init(&reader_handler);
 8003a30:	4816      	ldr	r0, [pc, #88]	; (8003a8c <StartRFIDTask+0x64>)
 8003a32:	f000 f9c7 	bl	8003dc4 <st25r95_init>
	st25r95_calibrate(&reader_handler);
 8003a36:	4815      	ldr	r0, [pc, #84]	; (8003a8c <StartRFIDTask+0x64>)
 8003a38:	f000 fae0 	bl	8003ffc <st25r95_calibrate>

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 8003a3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003a40:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8003a42:	f007 fb31 	bl	800b0a8 <xTaskGetTickCount>
 8003a46:	4603      	mov	r3, r0
 8003a48:	613b      	str	r3, [r7, #16]

	uint8_t team0RawScore = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
	uint8_t team1RawScore = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
	for(;;)
		// osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
	{
		RFID_readArray();
 8003a52:	f000 f8f9 	bl	8003c48 <RFID_readArray>

		calculateRawScore(&team0RawScore, false);
 8003a56:	f107 030f 	add.w	r3, r7, #15
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f8c5 	bl	8003bec <calculateRawScore>
		calculateRawScore(&team1RawScore, true); // true to move BagStatus pointer to the Team 1 section
 8003a62:	f107 030e 	add.w	r3, r7, #14
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f8bf 	bl	8003bec <calculateRawScore>

		broadcastPacket.team0DeltaScore = team0RawScore;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <StartRFIDTask+0x68>)
 8003a74:	605a      	str	r2, [r3, #4]
		broadcastPacket.team1DeltaScore = team1RawScore;
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <StartRFIDTask+0x68>)
 8003a7c:	609a      	str	r2, [r3, #8]


//		broadcast(tx_buf, (uint32_t) 2, &ble);

		vTaskDelayUntil( &xLastWakeTime, period );
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	6979      	ldr	r1, [r7, #20]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f007 f941 	bl	800ad0c <vTaskDelayUntil>
		RFID_readArray();
 8003a8a:	e7e2      	b.n	8003a52 <StartRFIDTask+0x2a>
 8003a8c:	200006f0 	.word	0x200006f0
 8003a90:	200004b4 	.word	0x200004b4

08003a94 <StartBluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBluetoothTask */

	uint32_t size = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]

 /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <StartBluetoothTask+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 febb 	bl	8009824 <osSemaphoreAcquire>

	  if (gameInfo.end_of_round){ //TODO: verify we only want to send at end of round
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <StartBluetoothTask+0x44>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f4      	beq.n	8003aa0 <StartBluetoothTask+0xc>
		  // Alternatively, we could have an extra element in the JSON like a boolean so whenever it isnt set, we know only to care about the battery voltage
		  for(uint32_t i = 0; i < 300; i++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e006      	b.n	8003aca <StartBluetoothTask+0x36>
			  serializeJSON(&broadcastPacket,tx_buffer);
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <StartBluetoothTask+0x48>)
 8003abe:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <StartBluetoothTask+0x4c>)
 8003ac0:	f7ff fb98 	bl	80031f4 <serializeJSON>
		  for(uint32_t i = 0; i < 300; i++){
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003ad0:	d3f4      	bcc.n	8003abc <StartBluetoothTask+0x28>
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003ad2:	e7e5      	b.n	8003aa0 <StartBluetoothTask+0xc>
 8003ad4:	200004b0 	.word	0x200004b0
 8003ad8:	200006dc 	.word	0x200006dc
 8003adc:	200005dc 	.word	0x200005dc
 8003ae0:	200004b4 	.word	0x200004b4
 8003ae4:	00000000 	.word	0x00000000

08003ae8 <StartBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8003af0:	f247 5330 	movw	r3, #30000	; 0x7530
 8003af4:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003af6:	f007 fad7 	bl	800b0a8 <xTaskGetTickCount>
 8003afa:	4603      	mov	r3, r0
 8003afc:	617b      	str	r3, [r7, #20]

	uint32_t rawVBat = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
	float VBat = 0.0;
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
	uint32_t VBat_conv = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003b0c:	217f      	movs	r1, #127	; 0x7f
 8003b0e:	4824      	ldr	r0, [pc, #144]	; (8003ba0 <StartBatteryTask+0xb8>)
 8003b10:	f002 f812 	bl	8005b38 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawVBat, 1);
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4820      	ldr	r0, [pc, #128]	; (8003ba0 <StartBatteryTask+0xb8>)
 8003b1e:	f001 f9c9 	bl	8004eb4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {

	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd1e 	bl	8000578 <__aeabi_f2d>
 8003b3c:	a316      	add	r3, pc, #88	; (adr r3, 8003b98 <StartBatteryTask+0xb0>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fd71 	bl	8000628 <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <StartBatteryTask+0xbc>)
 8003b54:	f7fc fe92 	bl	800087c <__aeabi_ddiv>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fd f85a 	bl	8000c18 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
	  VBat_conv = *((uint32_t*)&VBat);
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61bb      	str	r3, [r7, #24]
	  tx_buf[0] = VBat_conv & 0xFF000000;
 8003b70:	2300      	movs	r3, #0
 8003b72:	723b      	strb	r3, [r7, #8]
	  tx_buf[1] = VBat_conv & 0x00FF0000;
 8003b74:	2300      	movs	r3, #0
 8003b76:	727b      	strb	r3, [r7, #9]
	  tx_buf[2] = VBat_conv & 0x0000FF00;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	72bb      	strb	r3, [r7, #10]
	  tx_buf[3] = VBat_conv & 0x000000FF;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	72fb      	strb	r3, [r7, #11]

	  broadcastPacket.batteryVoltage = tx_buf;
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <StartBatteryTask+0xc0>)
 8003b88:	6013      	str	r3, [r2, #0]
//	  broadcast(tx_buf, (uint32_t) 4, &ble);

	  vTaskDelayUntil( &xLastWakeTime, period );
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f007 f8bb 	bl	800ad0c <vTaskDelayUntil>
	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003b96:	e7c4      	b.n	8003b22 <StartBatteryTask+0x3a>
 8003b98:	66666666 	.word	0x66666666
 8003b9c:	400a6666 	.word	0x400a6666
 8003ba0:	20000220 	.word	0x20000220
 8003ba4:	40b00000 	.word	0x40b00000
 8003ba8:	200004b4 	.word	0x200004b4

08003bac <StartBroadcastTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBroadcastTask */
void StartBroadcastTask(void *argument)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBroadcastTask */
  /* Infinite loop */
	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003bb4:	23c8      	movs	r3, #200	; 0xc8
 8003bb6:	617b      	str	r3, [r7, #20]

	memset(rx_buffer, 0, RX_BUFF_SIZE);
 8003bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <StartBroadcastTask+0x2c>)
 8003bc0:	f009 ff75 	bl	800daae <memset>
	char* json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <StartBroadcastTask+0x30>)
 8003bc6:	613b      	str	r3, [r7, #16]
	//  char* json_string = "ICE SPICE";
	for(;;)
	{

//		HAL_UART_Transmit(&huart1,(uint8_t*)json_string, strlen(json_string),5000);
		vTaskDelayUntil( &xLastWakeTime, period );
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f007 f89c 	bl	800ad0c <vTaskDelayUntil>
 8003bd4:	e7f8      	b.n	8003bc8 <StartBroadcastTask+0x1c>
 8003bd6:	bf00      	nop
 8003bd8:	200004dc 	.word	0x200004dc
 8003bdc:	08010528 	.word	0x08010528

08003be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be4:	b672      	cpsid	i
}
 8003be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <Error_Handler+0x8>
	...

08003bec <calculateRawScore>:
BeanBag_interface BagInfo[8];

// global variable for tracking the status of each bag
uint8_t BagStatus[8] = {0,0,0,0,0,0,0,0};

void calculateRawScore(uint8_t* teamRawScore, bool isTeam1) {
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <calculateRawScore+0x58>)
 8003bfa:	60fb      	str	r3, [r7, #12]

	if (isTeam1) bag_p +=4;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <calculateRawScore+0x1c>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]

	// Team 0 routine
	for (int i = 0; i < 4; ++i) {
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	e00c      	b.n	8003c2e <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	440b      	add	r3, r1
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	ddef      	ble.n	8003c14 <calculateRawScore+0x28>
	}

}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000718 	.word	0x20000718

08003c48 <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(void) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0

	for(uint8_t row = 0; row < 3; row++){
 8003c4e:	2300      	movs	r3, #0
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	e03c      	b.n	8003cce <RFID_readArray+0x86>
		// iterate through sel6 and sel7
	    HAL_GPIO_WritePin(SEL_PORT, sel[6], (row >> 1) & 0b01);
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	481e      	ldr	r0, [pc, #120]	; (8003ce0 <RFID_readArray+0x98>)
 8003c66:	f002 fc63 	bl	8006530 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEL_PORT, sel[7], (row & 0b01) );
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	481a      	ldr	r0, [pc, #104]	; (8003ce0 <RFID_readArray+0x98>)
 8003c78:	f002 fc5a 	bl	8006530 <HAL_GPIO_WritePin>

		for(uint8_t column = 0; column < 4; column++){
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	71bb      	strb	r3, [r7, #6]
 8003c80:	e01f      	b.n	8003cc2 <RFID_readArray+0x7a>
			// iterate through each element in the row
			HAL_GPIO_WritePin(SEL_PORT, sel[row*2], (column >> 1) & 0b01);
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <RFID_readArray+0x9c>)
 8003c88:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003c8c:	79bb      	ldrb	r3, [r7, #6]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4811      	ldr	r0, [pc, #68]	; (8003ce0 <RFID_readArray+0x98>)
 8003c9c:	f002 fc48 	bl	8006530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL_PORT, sel[row*2 + 1], (column & 0b01) );
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <RFID_readArray+0x9c>)
 8003ca8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003cac:	79bb      	ldrb	r3, [r7, #6]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	480a      	ldr	r0, [pc, #40]	; (8003ce0 <RFID_readArray+0x98>)
 8003cb8:	f002 fc3a 	bl	8006530 <HAL_GPIO_WritePin>
		for(uint8_t column = 0; column < 4; column++){
 8003cbc:	79bb      	ldrb	r3, [r7, #6]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	71bb      	strb	r3, [r7, #6]
 8003cc2:	79bb      	ldrb	r3, [r7, #6]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d9dc      	bls.n	8003c82 <RFID_readArray+0x3a>
	for(uint8_t row = 0; row < 3; row++){
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	71fb      	strb	r3, [r7, #7]
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d9bf      	bls.n	8003c54 <RFID_readArray+0xc>

			// Now read from selected antenna

		}
	}
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	08010644 	.word	0x08010644

08003ce8 <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <st25r95_spi_tx+0x24>)
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4805      	ldr	r0, [pc, #20]	; (8003d10 <st25r95_spi_tx+0x28>)
 8003cfc:	4798      	blx	r3
  tx_len = 0;
 8003cfe:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <st25r95_spi_tx+0x24>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000820 	.word	0x20000820
 8003d10:	20000720 	.word	0x20000720

08003d14 <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <st25r95_spi_byte+0x28>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 8003d26:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <st25r95_spi_byte+0x2c>)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ffdb 	bl	8003ce8 <st25r95_spi_tx>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000820 	.word	0x20000820
 8003d40:	20000720 	.word	0x20000720

08003d44 <st25r95_response>:
      st25r95_idle(handler);
    }
  }
}

uint8_t *st25r95_response(st25r95_handle *handler) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8003d4c:	bf00      	nop
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7c5b      	ldrb	r3, [r3, #17]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0fa      	beq.n	8003d4e <st25r95_response+0xa>
  handler->irq_flag = 0;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2001      	movs	r0, #1
 8003d64:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 8003d66:	2102      	movs	r1, #2
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffd3 	bl	8003d14 <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2101      	movs	r1, #1
 8003d74:	4810      	ldr	r0, [pc, #64]	; (8003db8 <st25r95_response+0x74>)
 8003d76:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <st25r95_response+0x74>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b55      	cmp	r3, #85	; 0x55
 8003d7e:	d105      	bne.n	8003d8c <st25r95_response+0x48>
    handler->nss(0);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2000      	movs	r0, #0
 8003d86:	4798      	blx	r3
    return rx_data;
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <st25r95_response+0x74>)
 8003d8a:	e011      	b.n	8003db0 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <st25r95_response+0x78>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <st25r95_response+0x7c>)
 8003d9e:	4a06      	ldr	r2, [pc, #24]	; (8003db8 <st25r95_response+0x74>)
 8003da0:	7852      	ldrb	r2, [r2, #1]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4798      	blx	r3
  handler->nss(0);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2000      	movs	r0, #0
 8003dac:	4798      	blx	r3
  return rx_data;
 8003dae:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <st25r95_response+0x74>)
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000824 	.word	0x20000824
 8003dbc:	20000825 	.word	0x20000825
 8003dc0:	20000826 	.word	0x20000826

08003dc4 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f823 	bl	8003e18 <st25r95_reset>
  handler->irq_pulse();
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d110      	bne.n	8003e08 <st25r95_init+0x44>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f85a 	bl	8003ea0 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	795b      	ldrb	r3, [r3, #5]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f890 	bl	8003f18 <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	799b      	ldrb	r3, [r3, #6]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2101      	movs	r1, #1
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8c1 	bl	8003f88 <st25r95_write_ARC>
      break;
 8003e06:	e003      	b.n	8003e10 <st25r95_init+0x4c>
    default:
      st25r95_off(handler);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f819 	bl	8003e40 <st25r95_off>
      break;
 8003e0e:	bf00      	nop
  }
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2001      	movs	r0, #1
 8003e26:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8003e28:	2101      	movs	r1, #1
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff72 	bl	8003d14 <st25r95_spi_byte>
  handler->nss(0);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2000      	movs	r0, #0
 8003e36:	4798      	blx	r3
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <st25r95_off+0x58>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <st25r95_off+0x58>)
 8003e50:	2202      	movs	r2, #2
 8003e52:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <st25r95_off+0x58>)
 8003e56:	2202      	movs	r2, #2
 8003e58:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <st25r95_off+0x58>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <st25r95_off+0x58>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <st25r95_off+0x5c>)
 8003e68:	2205      	movs	r2, #5
 8003e6a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2001      	movs	r0, #1
 8003e72:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff37 	bl	8003ce8 <st25r95_spi_tx>
  handler->nss(0);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2000      	movs	r0, #0
 8003e80:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff5e 	bl	8003d44 <st25r95_response>
 8003e88:	60f8      	str	r0, [r7, #12]
  return res[0];
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000720 	.word	0x20000720
 8003e9c:	20000820 	.word	0x20000820

08003ea0 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <st25r95_14443A+0x70>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <st25r95_14443A+0x70>)
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <st25r95_14443A+0x70>)
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <st25r95_14443A+0x70>)
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	78db      	ldrb	r3, [r3, #3]
 8003ec4:	019b      	lsls	r3, r3, #6
 8003ec6:	b25a      	sxtb	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	791b      	ldrb	r3, [r3, #4]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <st25r95_14443A+0x70>)
 8003ed8:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <st25r95_14443A+0x74>)
 8003edc:	2205      	movs	r2, #5
 8003ede:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fefd 	bl	8003ce8 <st25r95_spi_tx>
  handler->nss(0);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff21 	bl	8003d44 <st25r95_response>
 8003f02:	60f8      	str	r0, [r7, #12]
  return res[0];
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	781b      	ldrb	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000720 	.word	0x20000720
 8003f14:	20000820 	.word	0x20000820

08003f18 <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f2c:	2209      	movs	r2, #9
 8003f2e:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f32:	2204      	movs	r2, #4
 8003f34:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f38:	223a      	movs	r2, #58	; 0x3a
 8003f3a:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8003f42:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <st25r95_write_timerw+0x68>)
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <st25r95_write_timerw+0x6c>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2001      	movs	r0, #1
 8003f5a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fec3 	bl	8003ce8 <st25r95_spi_tx>
  handler->nss(0);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2000      	movs	r0, #0
 8003f68:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff feea 	bl	8003d44 <st25r95_response>
 8003f70:	60f8      	str	r0, [r7, #12]
  return res[0];
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	781b      	ldrb	r3, [r3, #0]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000720 	.word	0x20000720
 8003f84:	20000820 	.word	0x20000820

08003f88 <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fa0:	2209      	movs	r2, #9
 8003fa2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fac:	2268      	movs	r2, #104	; 0x68
 8003fae:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 8003fb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8003fbc:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <st25r95_write_ARC+0x6c>)
 8003fbe:	78bb      	ldrb	r3, [r7, #2]
 8003fc0:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <st25r95_write_ARC+0x70>)
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2001      	movs	r0, #1
 8003fce:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fe89 	bl	8003ce8 <st25r95_spi_tx>
  handler->nss(0);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff feb0 	bl	8003d44 <st25r95_response>
 8003fe4:	60f8      	str	r0, [r7, #12]
  return res[0];
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000720 	.word	0x20000720
 8003ff8:	20000820 	.word	0x20000820

08003ffc <st25r95_calibrate>:
  handler->nss(0);

  handler->state = ST25_STATE_IDLE;
}

void st25r95_calibrate(st25r95_handle *handler) {
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e0be      	b.n	8004188 <st25r95_calibrate+0x18c>
    tx_len = 17;
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <st25r95_calibrate+0x1a4>)
 800400c:	2211      	movs	r2, #17
 800400e:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8004010:	4a64      	ldr	r2, [pc, #400]	; (80041a4 <st25r95_calibrate+0x1a8>)
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
 8004018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800401a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2001      	movs	r0, #1
 8004026:	4798      	blx	r3
    st25r95_spi_tx(handler);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fe5d 	bl	8003ce8 <st25r95_spi_tx>
    handler->nss(0);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2000      	movs	r0, #0
 8004034:	4798      	blx	r3

    res = st25r95_response(handler);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe84 	bl	8003d44 <st25r95_response>
 800403c:	4603      	mov	r3, r0
 800403e:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <st25r95_calibrate+0x1b0>)
 8004040:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8004042:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <st25r95_calibrate+0x1b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 809a 	bne.w	8004182 <st25r95_calibrate+0x186>
 800404e:	4b57      	ldr	r3, [pc, #348]	; (80041ac <st25r95_calibrate+0x1b0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	f040 8093 	bne.w	8004182 <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <st25r95_calibrate+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3302      	adds	r3, #2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d13e      	bne.n	80040e6 <st25r95_calibrate+0xea>
        switch (i - 1) {
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	3b01      	subs	r3, #1
 800406c:	2b07      	cmp	r3, #7
 800406e:	f200 8088 	bhi.w	8004182 <st25r95_calibrate+0x186>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <st25r95_calibrate+0x7c>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	08004099 	.word	0x08004099
 800407c:	08004183 	.word	0x08004183
 8004080:	080040a1 	.word	0x080040a1
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040cb 	.word	0x080040cb
 8004090:	080040d9 	.word	0x080040d9
 8004094:	08004183 	.word	0x08004183
          case 0:
            calibrate_data[14] = 0xFC;
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800409a:	22fc      	movs	r2, #252	; 0xfc
 800409c:	739a      	strb	r2, [r3, #14]
            break;
 800409e:	e070      	b.n	8004182 <st25r95_calibrate+0x186>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040a2:	7b9b      	ldrb	r3, [r3, #14]
 80040a4:	3340      	adds	r3, #64	; 0x40
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040aa:	739a      	strb	r2, [r3, #14]
            break;
 80040ac:	e069      	b.n	8004182 <st25r95_calibrate+0x186>
          case 3:
            calibrate_data[14] += 0x20;
 80040ae:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040b0:	7b9b      	ldrb	r3, [r3, #14]
 80040b2:	3320      	adds	r3, #32
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040b8:	739a      	strb	r2, [r3, #14]
            break;
 80040ba:	e062      	b.n	8004182 <st25r95_calibrate+0x186>
          case 4:
            calibrate_data[14] += 0x10;
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040be:	7b9b      	ldrb	r3, [r3, #14]
 80040c0:	3310      	adds	r3, #16
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040c6:	739a      	strb	r2, [r3, #14]
            break;
 80040c8:	e05b      	b.n	8004182 <st25r95_calibrate+0x186>
          case 5:
            calibrate_data[14] += 0x08;
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040cc:	7b9b      	ldrb	r3, [r3, #14]
 80040ce:	3308      	adds	r3, #8
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040d4:	739a      	strb	r2, [r3, #14]
            break;
 80040d6:	e054      	b.n	8004182 <st25r95_calibrate+0x186>
          case 6:
            calibrate_data[14] += 0x04;
 80040d8:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040da:	7b9b      	ldrb	r3, [r3, #14]
 80040dc:	3304      	adds	r3, #4
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <st25r95_calibrate+0x1ac>)
 80040e2:	739a      	strb	r2, [r3, #14]
            break;
 80040e4:	e04d      	b.n	8004182 <st25r95_calibrate+0x186>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <st25r95_calibrate+0x1b0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3302      	adds	r3, #2
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d147      	bne.n	8004182 <st25r95_calibrate+0x186>
        switch (i - 1) {
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d843      	bhi.n	8004182 <st25r95_calibrate+0x186>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <st25r95_calibrate+0x104>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004183 	.word	0x08004183
 8004104:	08004121 	.word	0x08004121
 8004108:	0800412f 	.word	0x0800412f
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800414b 	.word	0x0800414b
 8004114:	08004159 	.word	0x08004159
 8004118:	08004167 	.word	0x08004167
 800411c:	08004175 	.word	0x08004175
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004122:	7b9b      	ldrb	r3, [r3, #14]
 8004124:	3b80      	subs	r3, #128	; 0x80
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800412a:	739a      	strb	r2, [r3, #14]
            break;
 800412c:	e029      	b.n	8004182 <st25r95_calibrate+0x186>
          case 2:
            calibrate_data[14] -= 0x40;
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004130:	7b9b      	ldrb	r3, [r3, #14]
 8004132:	3b40      	subs	r3, #64	; 0x40
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004138:	739a      	strb	r2, [r3, #14]
            break;
 800413a:	e022      	b.n	8004182 <st25r95_calibrate+0x186>
          case 3:
            calibrate_data[14] -= 0x20;
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800413e:	7b9b      	ldrb	r3, [r3, #14]
 8004140:	3b20      	subs	r3, #32
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004146:	739a      	strb	r2, [r3, #14]
            break;
 8004148:	e01b      	b.n	8004182 <st25r95_calibrate+0x186>
          case 4:
            calibrate_data[14] -= 0x10;
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800414c:	7b9b      	ldrb	r3, [r3, #14]
 800414e:	3b10      	subs	r3, #16
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004154:	739a      	strb	r2, [r3, #14]
            break;
 8004156:	e014      	b.n	8004182 <st25r95_calibrate+0x186>
          case 5:
            calibrate_data[14] -= 0x08;
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800415a:	7b9b      	ldrb	r3, [r3, #14]
 800415c:	3b08      	subs	r3, #8
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004162:	739a      	strb	r2, [r3, #14]
            break;
 8004164:	e00d      	b.n	8004182 <st25r95_calibrate+0x186>
          case 6:
            calibrate_data[14] -= 0x04;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004168:	7b9b      	ldrb	r3, [r3, #14]
 800416a:	3b04      	subs	r3, #4
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004170:	739a      	strb	r2, [r3, #14]
            break;
 8004172:	e006      	b.n	8004182 <st25r95_calibrate+0x186>
          case 7:
            calibrate_data[14] -= 0x04;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004176:	7b9b      	ldrb	r3, [r3, #14]
 8004178:	3b04      	subs	r3, #4
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <st25r95_calibrate+0x1ac>)
 800417e:	739a      	strb	r2, [r3, #14]
            break;
 8004180:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	3301      	adds	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b08      	cmp	r3, #8
 800418c:	f67f af3d 	bls.w	800400a <st25r95_calibrate+0xe>
        }
      }
    }
  }

  handler->DACRef = calibrate_data[14];
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <st25r95_calibrate+0x1ac>)
 8004192:	7b9a      	ldrb	r2, [r3, #14]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	709a      	strb	r2, [r3, #2]
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bdb0      	pop	{r4, r5, r7, pc}
 80041a0:	20000820 	.word	0x20000820
 80041a4:	20000720 	.word	0x20000720
 80041a8:	20000010 	.word	0x20000010
 80041ac:	20000924 	.word	0x20000924

080041b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_MspInit+0x4c>)
 80041b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <HAL_MspInit+0x4c>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6613      	str	r3, [r2, #96]	; 0x60
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_MspInit+0x4c>)
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_MspInit+0x4c>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_MspInit+0x4c>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_MspInit+0x4c>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	210f      	movs	r1, #15
 80041ea:	f06f 0001 	mvn.w	r0, #1
 80041ee:	f001 fdde 	bl	8005dae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000

08004200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b09e      	sub	sp, #120	; 0x78
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2268      	movs	r2, #104	; 0x68
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f009 fc4c 	bl	800daae <memset>
  if(hadc->Instance==ADC1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_ADC_MspInit+0xd4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d155      	bne.n	80042cc <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004224:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800422a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800422c:	2302      	movs	r3, #2
 800422e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004230:	2301      	movs	r3, #1
 8004232:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004234:	2308      	movs	r3, #8
 8004236:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004238:	2307      	movs	r3, #7
 800423a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800423c:	2302      	movs	r3, #2
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004240:	2302      	movs	r3, #2
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800424a:	f107 0310 	add.w	r3, r7, #16
 800424e:	4618      	mov	r0, r3
 8004250:	f003 f83a 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800425a:	f7ff fcc1 	bl	8003be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_ADC_MspInit+0xd8>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_ADC_MspInit+0xd8>)
 8004264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_ADC_MspInit+0xd8>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_ADC_MspInit+0xe0>)
 800427a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 800427e:	2200      	movs	r2, #0
 8004280:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 800428a:	2200      	movs	r2, #0
 800428c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 8004296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 800429e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 80042a6:	2220      	movs	r2, #32
 80042a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80042b0:	480a      	ldr	r0, [pc, #40]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 80042b2:	f001 fdb3 	bl	8005e1c <HAL_DMA_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80042bc:	f7ff fc90 	bl	8003be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a06      	ldr	r2, [pc, #24]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 80042c4:	651a      	str	r2, [r3, #80]	; 0x50
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_ADC_MspInit+0xdc>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042cc:	bf00      	nop
 80042ce:	3778      	adds	r7, #120	; 0x78
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	50040000 	.word	0x50040000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	20000288 	.word	0x20000288
 80042e0:	40020008 	.word	0x40020008

080042e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_SPI_MspInit+0x7c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d128      	bne.n	8004358 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004306:	4b17      	ldr	r3, [pc, #92]	; (8004364 <HAL_SPI_MspInit+0x80>)
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_SPI_MspInit+0x80>)
 800430c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004310:	6613      	str	r3, [r2, #96]	; 0x60
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <HAL_SPI_MspInit+0x80>)
 8004314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_SPI_MspInit+0x80>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	4a10      	ldr	r2, [pc, #64]	; (8004364 <HAL_SPI_MspInit+0x80>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_SPI_MspInit+0x80>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004336:	23c2      	movs	r3, #194	; 0xc2
 8004338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	2303      	movs	r3, #3
 8004344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004346:	2305      	movs	r3, #5
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004354:	f001 ff5a 	bl	800620c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004358:	bf00      	nop
 800435a:	3728      	adds	r7, #40	; 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40013000 	.word	0x40013000
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b0a6      	sub	sp, #152	; 0x98
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	2268      	movs	r2, #104	; 0x68
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f009 fb90 	bl	800daae <memset>
  if(huart->Instance==USART1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <HAL_UART_MspInit+0x138>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d13d      	bne.n	8004414 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800439c:	2300      	movs	r3, #0
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043a0:	f107 031c 	add.w	r3, r7, #28
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 ff8f 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043b0:	f7ff fc16 	bl	8003be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043b4:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043be:	6613      	str	r3, [r2, #96]	; 0x60
 80043c0:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	4a34      	ldr	r2, [pc, #208]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 80043da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f8:	2303      	movs	r3, #3
 80043fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043fe:	2307      	movs	r3, #7
 8004400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004404:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004408:	4619      	mov	r1, r3
 800440a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800440e:	f001 fefd 	bl	800620c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004412:	e040      	b.n	8004496 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_UART_MspInit+0x140>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d13b      	bne.n	8004496 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800441e:	2302      	movs	r3, #2
 8004420:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004422:	2300      	movs	r3, #0
 8004424:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004426:	f107 031c 	add.w	r3, r7, #28
 800442a:	4618      	mov	r0, r3
 800442c:	f002 ff4c 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004436:	f7ff fbd3 	bl	8003be0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	6593      	str	r3, [r2, #88]	; 0x58
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_UART_MspInit+0x13c>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800446a:	230c      	movs	r3, #12
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004482:	2307      	movs	r3, #7
 8004484:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004488:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800448c:	4619      	mov	r1, r3
 800448e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004492:	f001 febb 	bl	800620c <HAL_GPIO_Init>
}
 8004496:	bf00      	nop
 8004498:	3798      	adds	r7, #152	; 0x98
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40013800 	.word	0x40013800
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40004400 	.word	0x40004400

080044ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <NMI_Handler+0x4>

080044b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044b6:	e7fe      	b.n	80044b6 <HardFault_Handler+0x4>

080044b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <MemManage_Handler+0x4>

080044be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044be:	b480      	push	{r7}
 80044c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044c2:	e7fe      	b.n	80044c2 <BusFault_Handler+0x4>

080044c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c8:	e7fe      	b.n	80044c8 <UsageFault_Handler+0x4>

080044ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044dc:	f000 f97e 	bl	80047dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80044e0:	f007 f922 	bl	800b728 <xTaskGetSchedulerState>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80044ea:	f008 f805 	bl	800c4f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <DMA1_Channel1_IRQHandler+0x10>)
 80044fa:	f001 fda7 	bl	800604c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000288 	.word	0x20000288

08004508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 800450c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004510:	f002 f826 	bl	8006560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004514:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004518:	f002 f822 	bl	8006560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return 1;
 8004524:	2301      	movs	r3, #1
}
 8004526:	4618      	mov	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_kill>:

int _kill(int pid, int sig)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800453a:	f009 fb7f 	bl	800dc3c <__errno>
 800453e:	4603      	mov	r3, r0
 8004540:	2216      	movs	r2, #22
 8004542:	601a      	str	r2, [r3, #0]
  return -1;
 8004544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_exit>:

void _exit (int status)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ffe7 	bl	8004530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004562:	e7fe      	b.n	8004562 <_exit+0x12>

08004564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e00a      	b.n	800458c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004576:	f3af 8000 	nop.w
 800457a:	4601      	mov	r1, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	60ba      	str	r2, [r7, #8]
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3301      	adds	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	dbf0      	blt.n	8004576 <_read+0x12>
  }

  return len;
 8004594:	687b      	ldr	r3, [r7, #4]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e009      	b.n	80045c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	60ba      	str	r2, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbf1      	blt.n	80045b0 <_write+0x12>
  }
  return len;
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_close>:

int _close(int file)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_isatty>:

int _isatty(int file)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004616:	2301      	movs	r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <_sbrk+0x5c>)
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <_sbrk+0x60>)
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <_sbrk+0x64>)
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <_sbrk+0x68>)
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <_sbrk+0x64>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d207      	bcs.n	8004680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004670:	f009 fae4 	bl	800dc3c <__errno>
 8004674:	4603      	mov	r3, r0
 8004676:	220c      	movs	r2, #12
 8004678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e009      	b.n	8004694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <_sbrk+0x64>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <_sbrk+0x64>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <_sbrk+0x64>)
 8004690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20028000 	.word	0x20028000
 80046a0:	00000400 	.word	0x00000400
 80046a4:	20000928 	.word	0x20000928
 80046a8:	20002bf0 	.word	0x20002bf0

080046ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <SystemInit+0x20>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	4a05      	ldr	r2, [pc, #20]	; (80046cc <SystemInit+0x20>)
 80046b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046d4:	f7ff ffea 	bl	80046ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046d8:	480c      	ldr	r0, [pc, #48]	; (800470c <LoopForever+0x6>)
  ldr r1, =_edata
 80046da:	490d      	ldr	r1, [pc, #52]	; (8004710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046dc:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <LoopForever+0xe>)
  movs r3, #0
 80046de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046e0:	e002      	b.n	80046e8 <LoopCopyDataInit>

080046e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046e6:	3304      	adds	r3, #4

080046e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046ec:	d3f9      	bcc.n	80046e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046f0:	4c0a      	ldr	r4, [pc, #40]	; (800471c <LoopForever+0x16>)
  movs r3, #0
 80046f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046f4:	e001      	b.n	80046fa <LoopFillZerobss>

080046f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046f8:	3204      	adds	r2, #4

080046fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046fc:	d3fb      	bcc.n	80046f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046fe:	f009 faa3 	bl	800dc48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004702:	f7fe fe5d 	bl	80033c0 <main>

08004706 <LoopForever>:

LoopForever:
    b LoopForever
 8004706:	e7fe      	b.n	8004706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004708:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800470c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004710:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004714:	08010a88 	.word	0x08010a88
  ldr r2, =_sbss
 8004718:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800471c:	20002bec 	.word	0x20002bec

08004720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004720:	e7fe      	b.n	8004720 <ADC1_IRQHandler>
	...

08004724 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_Init+0x3c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <HAL_Init+0x3c>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800473a:	2003      	movs	r0, #3
 800473c:	f001 fb2c 	bl	8005d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004740:	200f      	movs	r0, #15
 8004742:	f000 f80f 	bl	8004764 <HAL_InitTick>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	71fb      	strb	r3, [r7, #7]
 8004750:	e001      	b.n	8004756 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004752:	f7ff fd2d 	bl	80041b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004756:	79fb      	ldrb	r3, [r7, #7]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40022000 	.word	0x40022000

08004764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_InitTick+0x6c>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d023      	beq.n	80047c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_InitTick+0x70>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_InitTick+0x6c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004786:	fbb3 f3f1 	udiv	r3, r3, r1
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fb37 	bl	8005e02 <HAL_SYSTICK_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b0f      	cmp	r3, #15
 800479e:	d809      	bhi.n	80047b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a0:	2200      	movs	r2, #0
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	f001 fb01 	bl	8005dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <HAL_InitTick+0x74>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e007      	b.n	80047c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e004      	b.n	80047c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	e001      	b.n	80047c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000002c 	.word	0x2000002c
 80047d4:	20000024 	.word	0x20000024
 80047d8:	20000028 	.word	0x20000028

080047dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_IncTick+0x20>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_IncTick+0x24>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <HAL_IncTick+0x24>)
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	2000002c 	.word	0x2000002c
 8004800:	2000092c 	.word	0x2000092c

08004804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return uwTick;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_GetTick+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000092c 	.word	0x2000092c

0800481c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3360      	adds	r3, #96	; 0x60
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <LL_ADC_SetOffset+0x44>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	03fff000 	.word	0x03fff000

080048cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3360      	adds	r3, #96	; 0x60
 80048da:	461a      	mov	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3360      	adds	r3, #96	; 0x60
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	431a      	orrs	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	615a      	str	r2, [r3, #20]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3330      	adds	r3, #48	; 0x30
 800498a:	461a      	mov	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	4413      	add	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	211f      	movs	r1, #31
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	401a      	ands	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0e9b      	lsrs	r3, r3, #26
 80049b2:	f003 011f 	and.w	r1, r3, #31
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	431a      	orrs	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3314      	adds	r3, #20
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	0e5b      	lsrs	r3, r3, #25
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	4413      	add	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2107      	movs	r1, #7
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	0d1b      	lsrs	r3, r3, #20
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	431a      	orrs	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0318 	and.w	r3, r3, #24
 8004a4a:	4908      	ldr	r1, [pc, #32]	; (8004a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a4c:	40d9      	lsrs	r1, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	400b      	ands	r3, r1
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	0007ffff 	.word	0x0007ffff

08004a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6093      	str	r3, [r2, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d101      	bne.n	8004aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af8:	d101      	bne.n	8004afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b48:	f043 0202 	orr.w	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <LL_ADC_IsEnabled+0x18>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <LL_ADC_IsEnabled+0x1a>
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d101      	bne.n	8004b9a <LL_ADC_IsDisableOngoing+0x18>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <LL_ADC_IsDisableOngoing+0x1a>
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bbc:	f043 0204 	orr.w	r2, r3, #4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d101      	bne.n	8004be8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d101      	bne.n	8004c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e12f      	b.n	8004e96 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fadb 	bl	8004200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ff19 	bl	8004a94 <LL_ADC_IsDeepPowerDownEnabled>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff feff 	bl	8004a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff34 	bl	8004ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff18 	bl	8004abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c8c:	4b84      	ldr	r3, [pc, #528]	; (8004ea0 <HAL_ADC_Init+0x284>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	4a84      	ldr	r2, [pc, #528]	; (8004ea4 <HAL_ADC_Init+0x288>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff16 	bl	8004ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f043 0210 	orr.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff76 	bl	8004bd0 <LL_ADC_REG_IsConversionOngoing>
 8004ce4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 80c8 	bne.w	8004e84 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 80c4 	bne.w	8004e84 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d04:	f043 0202 	orr.w	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff23 	bl	8004b5c <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1c:	4862      	ldr	r0, [pc, #392]	; (8004ea8 <HAL_ADC_Init+0x28c>)
 8004d1e:	f7ff ff1d 	bl	8004b5c <LL_ADC_IsEnabled>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	485f      	ldr	r0, [pc, #380]	; (8004eac <HAL_ADC_Init+0x290>)
 8004d30:	f7ff fd74 	bl	800481c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7e5b      	ldrb	r3, [r3, #25]
 8004d38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004d44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004d4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d106      	bne.n	8004d70 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	3b01      	subs	r3, #1
 8004d68:	045b      	lsls	r3, r3, #17
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d009      	beq.n	8004d8c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_ADC_Init+0x294>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff13 	bl	8004bd0 <LL_ADC_REG_IsConversionOngoing>
 8004daa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff20 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 8004db6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d140      	bne.n	8004e40 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d13d      	bne.n	8004e40 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7e1b      	ldrb	r3, [r3, #24]
 8004dcc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dce:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dd6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de6:	f023 0306 	bic.w	r3, r3, #6
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	69b9      	ldr	r1, [r7, #24]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d118      	bne.n	8004e30 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e08:	f023 0304 	bic.w	r3, r3, #4
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e14:	4311      	orrs	r1, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e1a:	4311      	orrs	r1, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e20:	430a      	orrs	r2, r1
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	611a      	str	r2, [r3, #16]
 8004e2e:	e007      	b.n	8004e40 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10c      	bne.n	8004e62 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f023 010f 	bic.w	r1, r3, #15
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e60:	e007      	b.n	8004e72 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 020f 	bic.w	r2, r2, #15
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58
 8004e82:	e007      	b.n	8004e94 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	f043 0210 	orr.w	r2, r3, #16
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000024 	.word	0x20000024
 8004ea4:	053e2d63 	.word	0x053e2d63
 8004ea8:	50040000 	.word	0x50040000
 8004eac:	50040300 	.word	0x50040300
 8004eb0:	fff0c007 	.word	0xfff0c007

08004eb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fe83 	bl	8004bd0 <LL_ADC_REG_IsConversionOngoing>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d167      	bne.n	8004fa0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_ADC_Start_DMA+0x2a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e063      	b.n	8004fa6 <HAL_ADC_Start_DMA+0xf2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fc80 	bl	80057ec <ADC_Enable>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d14f      	bne.n	8004f96 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	f023 0206 	bic.w	r2, r3, #6
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f22:	e002      	b.n	8004f2a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <HAL_ADC_Start_DMA+0xfc>)
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f36:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <HAL_ADC_Start_DMA+0x100>)
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_ADC_Start_DMA+0x104>)
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	221c      	movs	r2, #28
 8004f48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0210 	orr.w	r2, r2, #16
 8004f60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3340      	adds	r3, #64	; 0x40
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f001 f803 	bl	8005f8c <HAL_DMA_Start_IT>
 8004f86:	4603      	mov	r3, r0
 8004f88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fe0a 	bl	8004ba8 <LL_ADC_REG_StartConversion>
 8004f94:	e006      	b.n	8004fa4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004f9e:	e001      	b.n	8004fa4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	080059b7 	.word	0x080059b7
 8004fb4:	08005a8f 	.word	0x08005a8f
 8004fb8:	08005aab 	.word	0x08005aab

08004fbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0b6      	sub	sp, #216	; 0xd8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_ADC_ConfigChannel+0x22>
 8005016:	2302      	movs	r3, #2
 8005018:	e3d3      	b.n	80057c2 <HAL_ADC_ConfigChannel+0x7ca>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fdd2 	bl	8004bd0 <LL_ADC_REG_IsConversionOngoing>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 83b8 	bne.w	80057a4 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d824      	bhi.n	8005086 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	3b02      	subs	r3, #2
 8005042:	2b03      	cmp	r3, #3
 8005044:	d81b      	bhi.n	800507e <HAL_ADC_ConfigChannel+0x86>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_ADC_ConfigChannel+0x54>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	0800505d 	.word	0x0800505d
 8005050:	08005065 	.word	0x08005065
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	220c      	movs	r2, #12
 8005060:	605a      	str	r2, [r3, #4]
          break;
 8005062:	e010      	b.n	8005086 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2212      	movs	r2, #18
 8005068:	605a      	str	r2, [r3, #4]
          break;
 800506a:	e00c      	b.n	8005086 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2218      	movs	r2, #24
 8005070:	605a      	str	r2, [r3, #4]
          break;
 8005072:	e008      	b.n	8005086 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800507a:	605a      	str	r2, [r3, #4]
          break;
 800507c:	e003      	b.n	8005086 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2206      	movs	r2, #6
 8005082:	605a      	str	r2, [r3, #4]
          break;
 8005084:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7ff fc71 	bl	800497a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fd97 	bl	8004bd0 <LL_ADC_REG_IsConversionOngoing>
 80050a2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fda3 	bl	8004bf6 <LL_ADC_INJ_IsConversionOngoing>
 80050b0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 81c1 	bne.w	8005440 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 81bc 	bne.w	8005440 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d0:	d10f      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	4619      	mov	r1, r3
 80050de:	f7ff fc78 	bl	80049d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fc1f 	bl	800492e <LL_ADC_SetSamplingTimeCommonConfig>
 80050f0:	e00e      	b.n	8005110 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7ff fc67 	bl	80049d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fc0f 	bl	800492e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d00a      	beq.n	8005148 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6919      	ldr	r1, [r3, #16]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005142:	f7ff fb9f 	bl	8004884 <LL_ADC_SetOffset>
 8005146:	e17b      	b.n	8005440 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fbbc 	bl	80048cc <LL_ADC_GetOffsetChannel>
 8005154:	4603      	mov	r3, r0
 8005156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x17c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fbb1 	bl	80048cc <LL_ADC_GetOffsetChannel>
 800516a:	4603      	mov	r3, r0
 800516c:	0e9b      	lsrs	r3, r3, #26
 800516e:	f003 021f 	and.w	r2, r3, #31
 8005172:	e01e      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x1ba>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fba6 	bl	80048cc <LL_ADC_GetOffsetChannel>
 8005180:	4603      	mov	r3, r0
 8005182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800519a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80051a2:	2320      	movs	r3, #32
 80051a4:	e004      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80051a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x1d2>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	0e9b      	lsrs	r3, r3, #26
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	e018      	b.n	80051fc <HAL_ADC_ConfigChannel+0x204>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051d6:	fa93 f3a3 	rbit	r3, r3
 80051da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80051de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80051e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80051ee:	2320      	movs	r3, #32
 80051f0:	e004      	b.n	80051fc <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80051f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051f6:	fab3 f383 	clz	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d106      	bne.n	800520e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fb75 	bl	80048f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fb59 	bl	80048cc <LL_ADC_GetOffsetChannel>
 800521a:	4603      	mov	r3, r0
 800521c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <HAL_ADC_ConfigChannel+0x242>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fb4e 	bl	80048cc <LL_ADC_GetOffsetChannel>
 8005230:	4603      	mov	r3, r0
 8005232:	0e9b      	lsrs	r3, r3, #26
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	e01e      	b.n	8005278 <HAL_ADC_ConfigChannel+0x280>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2101      	movs	r1, #1
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fb43 	bl	80048cc <LL_ADC_GetOffsetChannel>
 8005246:	4603      	mov	r3, r0
 8005248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005250:	fa93 f3a3 	rbit	r3, r3
 8005254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800525c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8005268:	2320      	movs	r3, #32
 800526a:	e004      	b.n	8005276 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 800526c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005270:	fab3 f383 	clz	r3, r3
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x298>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	e018      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x2ca>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80052a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80052ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e004      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80052b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d106      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fb12 	bl	80048f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2102      	movs	r1, #2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff faf6 	bl	80048cc <LL_ADC_GetOffsetChannel>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x308>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff faeb 	bl	80048cc <LL_ADC_GetOffsetChannel>
 80052f6:	4603      	mov	r3, r0
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	f003 021f 	and.w	r2, r3, #31
 80052fe:	e01e      	b.n	800533e <HAL_ADC_ConfigChannel+0x346>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2102      	movs	r1, #2
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fae0 	bl	80048cc <LL_ADC_GetOffsetChannel>
 800530c:	4603      	mov	r3, r0
 800530e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800531e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800532e:	2320      	movs	r3, #32
 8005330:	e004      	b.n	800533c <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8005332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x35e>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	0e9b      	lsrs	r3, r3, #26
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	e016      	b.n	8005384 <HAL_ADC_ConfigChannel+0x38c>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005362:	fa93 f3a3 	rbit	r3, r3
 8005366:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800536a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800536e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8005376:	2320      	movs	r3, #32
 8005378:	e004      	b.n	8005384 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800537a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005384:	429a      	cmp	r2, r3
 8005386:	d106      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fab1 	bl	80048f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2103      	movs	r1, #3
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fa95 	bl	80048cc <LL_ADC_GetOffsetChannel>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x3ca>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2103      	movs	r1, #3
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fa8a 	bl	80048cc <LL_ADC_GetOffsetChannel>
 80053b8:	4603      	mov	r3, r0
 80053ba:	0e9b      	lsrs	r3, r3, #26
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	e017      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x3fa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2103      	movs	r1, #3
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fa7f 	bl	80048cc <LL_ADC_GetOffsetChannel>
 80053ce:	4603      	mov	r3, r0
 80053d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80053da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80053de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 80053e4:	2320      	movs	r3, #32
 80053e6:	e003      	b.n	80053f0 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80053e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <HAL_ADC_ConfigChannel+0x412>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0e9b      	lsrs	r3, r3, #26
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	e011      	b.n	800542e <HAL_ADC_ConfigChannel+0x436>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8005422:	2320      	movs	r3, #32
 8005424:	e003      	b.n	800542e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800542e:	429a      	cmp	r2, r3
 8005430:	d106      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	2103      	movs	r1, #3
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fa5c 	bl	80048f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fb89 	bl	8004b5c <LL_ADC_IsEnabled>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 813f 	bne.w	80056d0 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f7ff fae2 	bl	8004a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a8e      	ldr	r2, [pc, #568]	; (80056a4 <HAL_ADC_ConfigChannel+0x6ac>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f040 8130 	bne.w	80056d0 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x4a0>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	3301      	adds	r3, #1
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2b09      	cmp	r3, #9
 800548e:	bf94      	ite	ls
 8005490:	2301      	movls	r3, #1
 8005492:	2300      	movhi	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e019      	b.n	80054cc <HAL_ADC_ConfigChannel+0x4d4>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80054a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80054aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80054b0:	2320      	movs	r3, #32
 80054b2:	e003      	b.n	80054bc <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80054b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	bf94      	ite	ls
 80054c6:	2301      	movls	r3, #1
 80054c8:	2300      	movhi	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d079      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x4f4>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	3301      	adds	r3, #1
 80054e4:	069b      	lsls	r3, r3, #26
 80054e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ea:	e015      	b.n	8005518 <HAL_ADC_ConfigChannel+0x520>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80054fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8005504:	2320      	movs	r3, #32
 8005506:	e003      	b.n	8005510 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8005508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	3301      	adds	r3, #1
 8005512:	069b      	lsls	r3, r3, #26
 8005514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x540>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	0e9b      	lsrs	r3, r3, #26
 800552a:	3301      	adds	r3, #1
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	e017      	b.n	8005568 <HAL_ADC_ConfigChannel+0x570>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005540:	fa93 f3a3 	rbit	r3, r3
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800554a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8005550:	2320      	movs	r3, #32
 8005552:	e003      	b.n	800555c <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8005554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2101      	movs	r1, #1
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	ea42 0103 	orr.w	r1, r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_ADC_ConfigChannel+0x596>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0e9b      	lsrs	r3, r3, #26
 800557e:	3301      	adds	r3, #1
 8005580:	f003 021f 	and.w	r2, r3, #31
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	051b      	lsls	r3, r3, #20
 800558c:	e018      	b.n	80055c0 <HAL_ADC_ConfigChannel+0x5c8>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80055a6:	2320      	movs	r3, #32
 80055a8:	e003      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	fab3 f383 	clz	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 021f 	and.w	r2, r3, #31
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055c0:	430b      	orrs	r3, r1
 80055c2:	e080      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x5e8>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	0e9b      	lsrs	r3, r3, #26
 80055d6:	3301      	adds	r3, #1
 80055d8:	069b      	lsls	r3, r3, #26
 80055da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055de:	e015      	b.n	800560c <HAL_ADC_ConfigChannel+0x614>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e003      	b.n	8005604 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	3301      	adds	r3, #1
 8005606:	069b      	lsls	r3, r3, #26
 8005608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <HAL_ADC_ConfigChannel+0x634>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0e9b      	lsrs	r3, r3, #26
 800561e:	3301      	adds	r3, #1
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2101      	movs	r1, #1
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	e017      	b.n	800565c <HAL_ADC_ConfigChannel+0x664>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	61fb      	str	r3, [r7, #28]
  return result;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8005644:	2320      	movs	r3, #32
 8005646:	e003      	b.n	8005650 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	3301      	adds	r3, #1
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	ea42 0103 	orr.w	r1, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x690>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	0e9b      	lsrs	r3, r3, #26
 8005672:	3301      	adds	r3, #1
 8005674:	f003 021f 	and.w	r2, r3, #31
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	3b1e      	subs	r3, #30
 8005680:	051b      	lsls	r3, r3, #20
 8005682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005686:	e01d      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x6cc>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fa93 f3a3 	rbit	r3, r3
 8005694:	613b      	str	r3, [r7, #16]
  return result;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80056a0:	2320      	movs	r3, #32
 80056a2:	e005      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x6b8>
 80056a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	f003 021f 	and.w	r2, r3, #31
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	3b1e      	subs	r3, #30
 80056be:	051b      	lsls	r3, r3, #20
 80056c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c4:	430b      	orrs	r3, r1
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	6892      	ldr	r2, [r2, #8]
 80056ca:	4619      	mov	r1, r3
 80056cc:	f7ff f981 	bl	80049d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <HAL_ADC_ConfigChannel+0x7d4>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d06c      	beq.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056dc:	483c      	ldr	r0, [pc, #240]	; (80057d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80056de:	f7ff f8c3 	bl	8004868 <LL_ADC_GetCommonPathInternalCh>
 80056e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3a      	ldr	r2, [pc, #232]	; (80057d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d127      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d121      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a35      	ldr	r2, [pc, #212]	; (80057d8 <HAL_ADC_ConfigChannel+0x7e0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d157      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800570a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800570e:	4619      	mov	r1, r3
 8005710:	482f      	ldr	r0, [pc, #188]	; (80057d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8005712:	f7ff f896 	bl	8004842 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_ADC_ConfigChannel+0x7e4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	099b      	lsrs	r3, r3, #6
 800571c:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005730:	e002      	b.n	8005738 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b01      	subs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f9      	bne.n	8005732 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800573e:	e03a      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d113      	bne.n	8005772 <HAL_ADC_ConfigChannel+0x77a>
 800574a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800574e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d12a      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005768:	4619      	mov	r1, r3
 800576a:	4819      	ldr	r0, [pc, #100]	; (80057d0 <HAL_ADC_ConfigChannel+0x7d8>)
 800576c:	f7ff f869 	bl	8004842 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005770:	e021      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_ADC_ConfigChannel+0x7f0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d11c      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800577c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d111      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800579a:	4619      	mov	r1, r3
 800579c:	480c      	ldr	r0, [pc, #48]	; (80057d0 <HAL_ADC_ConfigChannel+0x7d8>)
 800579e:	f7ff f850 	bl	8004842 <LL_ADC_SetCommonPathInternalCh>
 80057a2:	e008      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	f043 0220 	orr.w	r2, r3, #32
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80057be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	37d8      	adds	r7, #216	; 0xd8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	80080000 	.word	0x80080000
 80057d0:	50040300 	.word	0x50040300
 80057d4:	c7520000 	.word	0xc7520000
 80057d8:	50040000 	.word	0x50040000
 80057dc:	20000024 	.word	0x20000024
 80057e0:	053e2d63 	.word	0x053e2d63
 80057e4:	cb840000 	.word	0xcb840000
 80057e8:	80000001 	.word	0x80000001

080057ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff f9ad 	bl	8004b5c <LL_ADC_IsEnabled>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d169      	bne.n	80058dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <ADC_Enable+0xfc>)
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f043 0210 	orr.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005826:	f043 0201 	orr.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e055      	b.n	80058de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff f968 	bl	8004b0c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800583c:	482b      	ldr	r0, [pc, #172]	; (80058ec <ADC_Enable+0x100>)
 800583e:	f7ff f813 	bl	8004868 <LL_ADC_GetCommonPathInternalCh>
 8005842:	4603      	mov	r3, r0
 8005844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d013      	beq.n	8005874 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <ADC_Enable+0x104>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	099b      	lsrs	r3, r3, #6
 8005852:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <ADC_Enable+0x108>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	099b      	lsrs	r3, r3, #6
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005866:	e002      	b.n	800586e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3b01      	subs	r3, #1
 800586c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f9      	bne.n	8005868 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005874:	f7fe ffc6 	bl	8004804 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800587a:	e028      	b.n	80058ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff f96b 	bl	8004b5c <LL_ADC_IsEnabled>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f93b 	bl	8004b0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005896:	f7fe ffb5 	bl	8004804 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d914      	bls.n	80058ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00d      	beq.n	80058ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	f043 0210 	orr.w	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	f043 0201 	orr.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d1cf      	bne.n	800587c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	8000003f 	.word	0x8000003f
 80058ec:	50040300 	.word	0x50040300
 80058f0:	20000024 	.word	0x20000024
 80058f4:	053e2d63 	.word	0x053e2d63

080058f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f93c 	bl	8004b82 <LL_ADC_IsDisableOngoing>
 800590a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff f923 	bl	8004b5c <LL_ADC_IsEnabled>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d047      	beq.n	80059ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d144      	bne.n	80059ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030d 	and.w	r3, r3, #13
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10c      	bne.n	800594a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff f8fd 	bl	8004b34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2203      	movs	r2, #3
 8005940:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005942:	f7fe ff5f 	bl	8004804 <HAL_GetTick>
 8005946:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005948:	e029      	b.n	800599e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	f043 0210 	orr.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e023      	b.n	80059ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005966:	f7fe ff4d 	bl	8004804 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d914      	bls.n	800599e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	f043 0210 	orr.w	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	f043 0201 	orr.w	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e007      	b.n	80059ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1dc      	bne.n	8005966 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d14b      	bne.n	8005a68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d021      	beq.n	8005a2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe ffb0 	bl	8004954 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d032      	beq.n	8005a60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d12b      	bne.n	8005a60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11f      	bne.n	8005a60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a2c:	e018      	b.n	8005a60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d111      	bne.n	8005a60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	f043 0201 	orr.w	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff faab 	bl	8004fbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a66:	e00e      	b.n	8005a86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff fab5 	bl	8004fe4 <HAL_ADC_ErrorCallback>
}
 8005a7a:	e004      	b.n	8005a86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff fa97 	bl	8004fd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005aa2:	bf00      	nop
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f043 0204 	orr.w	r2, r3, #4
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fa87 	bl	8004fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <LL_ADC_StartCalibration>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	609a      	str	r2, [r3, #8]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_ADC_IsCalibrationOnGoing>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b24:	d101      	bne.n	8005b2a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_ADCEx_Calibration_Start+0x1c>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e04d      	b.n	8005bf0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fecb 	bl	80058f8 <ADC_Disable>
 8005b62:	4603      	mov	r3, r0
 8005b64:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d136      	bne.n	8005bda <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	f043 0202 	orr.w	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffa9 	bl	8005ade <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b8c:	e014      	b.n	8005bb8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005b9a:	d30d      	bcc.n	8005bb8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	f023 0312 	bic.w	r3, r3, #18
 8005ba4:	f043 0210 	orr.w	r2, r3, #16
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e01b      	b.n	8005bf0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ffa7 	bl	8005b10 <LL_ADC_IsCalibrationOnGoing>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e2      	bne.n	8005b8e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f023 0303 	bic.w	r3, r3, #3
 8005bd0:	f043 0201 	orr.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd8:	e005      	b.n	8005be6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c2a:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	60d3      	str	r3, [r2, #12]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <__NVIC_GetPriorityGrouping+0x18>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 0307 	and.w	r3, r3, #7
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db0b      	blt.n	8005c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	f003 021f 	and.w	r2, r3, #31
 8005c74:	4907      	ldr	r1, [pc, #28]	; (8005c94 <__NVIC_EnableIRQ+0x38>)
 8005c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	e000e100 	.word	0xe000e100

08005c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db0a      	blt.n	8005cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <__NVIC_SetPriority+0x4c>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	0112      	lsls	r2, r2, #4
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	440b      	add	r3, r1
 8005cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cc0:	e00a      	b.n	8005cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <__NVIC_SetPriority+0x50>)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	0112      	lsls	r2, r2, #4
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	761a      	strb	r2, [r3, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	e000e100 	.word	0xe000e100
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f1c3 0307 	rsb	r3, r3, #7
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	bf28      	it	cs
 8005d0a:	2304      	movcs	r3, #4
 8005d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d902      	bls.n	8005d1c <NVIC_EncodePriority+0x30>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3b03      	subs	r3, #3
 8005d1a:	e000      	b.n	8005d1e <NVIC_EncodePriority+0x32>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	401a      	ands	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d34:	f04f 31ff 	mov.w	r1, #4294967295
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	43d9      	mvns	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d44:	4313      	orrs	r3, r2
         );
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d64:	d301      	bcc.n	8005d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d66:	2301      	movs	r3, #1
 8005d68:	e00f      	b.n	8005d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d6a:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <SysTick_Config+0x40>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d72:	210f      	movs	r1, #15
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	f7ff ff8e 	bl	8005c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <SysTick_Config+0x40>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d82:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <SysTick_Config+0x40>)
 8005d84:	2207      	movs	r2, #7
 8005d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	e000e010 	.word	0xe000e010

08005d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff29 	bl	8005bf8 <__NVIC_SetPriorityGrouping>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4603      	mov	r3, r0
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dc0:	f7ff ff3e 	bl	8005c40 <__NVIC_GetPriorityGrouping>
 8005dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7ff ff8e 	bl	8005cec <NVIC_EncodePriority>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ff5d 	bl	8005c98 <__NVIC_SetPriority>
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	4603      	mov	r3, r0
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff ff31 	bl	8005c5c <__NVIC_EnableIRQ>
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ffa2 	bl	8005d54 <SysTick_Config>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e098      	b.n	8005f60 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <HAL_DMA_Init+0x150>)
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d80f      	bhi.n	8005e5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4b4b      	ldr	r3, [pc, #300]	; (8005f70 <HAL_DMA_Init+0x154>)
 8005e42:	4413      	add	r3, r2
 8005e44:	4a4b      	ldr	r2, [pc, #300]	; (8005f74 <HAL_DMA_Init+0x158>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	009a      	lsls	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a48      	ldr	r2, [pc, #288]	; (8005f78 <HAL_DMA_Init+0x15c>)
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
 8005e58:	e00e      	b.n	8005e78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b46      	ldr	r3, [pc, #280]	; (8005f7c <HAL_DMA_Init+0x160>)
 8005e62:	4413      	add	r3, r2
 8005e64:	4a43      	ldr	r2, [pc, #268]	; (8005f74 <HAL_DMA_Init+0x158>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	009a      	lsls	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a42      	ldr	r2, [pc, #264]	; (8005f80 <HAL_DMA_Init+0x164>)
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed2:	d039      	beq.n	8005f48 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <HAL_DMA_Init+0x15c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d11a      	bne.n	8005f14 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <HAL_DMA_Init+0x168>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	f003 031c 	and.w	r3, r3, #28
 8005eea:	210f      	movs	r1, #15
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	4924      	ldr	r1, [pc, #144]	; (8005f84 <HAL_DMA_Init+0x168>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ef8:	4b22      	ldr	r3, [pc, #136]	; (8005f84 <HAL_DMA_Init+0x168>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f003 031c 	and.w	r3, r3, #28
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	491d      	ldr	r1, [pc, #116]	; (8005f84 <HAL_DMA_Init+0x168>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
 8005f12:	e019      	b.n	8005f48 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f14:	4b1c      	ldr	r3, [pc, #112]	; (8005f88 <HAL_DMA_Init+0x16c>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	f003 031c 	and.w	r3, r3, #28
 8005f20:	210f      	movs	r1, #15
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	4917      	ldr	r1, [pc, #92]	; (8005f88 <HAL_DMA_Init+0x16c>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f2e:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <HAL_DMA_Init+0x16c>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f003 031c 	and.w	r3, r3, #28
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	4911      	ldr	r1, [pc, #68]	; (8005f88 <HAL_DMA_Init+0x16c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40020407 	.word	0x40020407
 8005f70:	bffdfff8 	.word	0xbffdfff8
 8005f74:	cccccccd 	.word	0xcccccccd
 8005f78:	40020000 	.word	0x40020000
 8005f7c:	bffdfbf8 	.word	0xbffdfbf8
 8005f80:	40020400 	.word	0x40020400
 8005f84:	400200a8 	.word	0x400200a8
 8005f88:	400204a8 	.word	0x400204a8

08005f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_DMA_Start_IT+0x20>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e04b      	b.n	8006044 <HAL_DMA_Start_IT+0xb8>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d13a      	bne.n	8006036 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f8e0 	bl	80061aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 020e 	orr.w	r2, r2, #14
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e00f      	b.n	8006024 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0204 	bic.w	r2, r2, #4
 8006012:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 020a 	orr.w	r2, r2, #10
 8006022:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e005      	b.n	8006042 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800603e:	2302      	movs	r3, #2
 8006040:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f003 031c 	and.w	r3, r3, #28
 800606c:	2204      	movs	r2, #4
 800606e:	409a      	lsls	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d026      	beq.n	80060c6 <HAL_DMA_IRQHandler+0x7a>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d021      	beq.n	80060c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0204 	bic.w	r2, r2, #4
 800609e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	f003 021c 	and.w	r2, r3, #28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	2104      	movs	r1, #4
 80060ae:	fa01 f202 	lsl.w	r2, r1, r2
 80060b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d071      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80060c4:	e06c      	b.n	80061a0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	f003 031c 	and.w	r3, r3, #28
 80060ce:	2202      	movs	r2, #2
 80060d0:	409a      	lsls	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02e      	beq.n	8006138 <HAL_DMA_IRQHandler+0xec>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d029      	beq.n	8006138 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 020a 	bic.w	r2, r2, #10
 8006100:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	f003 021c 	and.w	r2, r3, #28
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	2102      	movs	r1, #2
 8006118:	fa01 f202 	lsl.w	r2, r1, r2
 800611c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d038      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006136:	e033      	b.n	80061a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f003 031c 	and.w	r3, r3, #28
 8006140:	2208      	movs	r2, #8
 8006142:	409a      	lsls	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02a      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x156>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d025      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 020e 	bic.w	r2, r2, #14
 8006164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f003 021c 	and.w	r2, r3, #28
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2101      	movs	r1, #1
 8006174:	fa01 f202 	lsl.w	r2, r1, r2
 8006178:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
}
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f003 021c 	and.w	r2, r3, #28
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d108      	bne.n	80061ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061ec:	e007      	b.n	80061fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800621a:	e154      	b.n	80064c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	2101      	movs	r1, #1
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8146 	beq.w	80064c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d005      	beq.n	800624c <HAL_GPIO_Init+0x40>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d130      	bne.n	80062ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	2203      	movs	r2, #3
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4013      	ands	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006282:	2201      	movs	r2, #1
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 0201 	and.w	r2, r3, #1
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d017      	beq.n	80062ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	2203      	movs	r2, #3
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4013      	ands	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d123      	bne.n	800633e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	08da      	lsrs	r2, r3, #3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3208      	adds	r2, #8
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	220f      	movs	r2, #15
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4013      	ands	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	08da      	lsrs	r2, r3, #3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3208      	adds	r2, #8
 8006338:	6939      	ldr	r1, [r7, #16]
 800633a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	2203      	movs	r2, #3
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4013      	ands	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0203 	and.w	r2, r3, #3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80a0 	beq.w	80064c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006380:	4b58      	ldr	r3, [pc, #352]	; (80064e4 <HAL_GPIO_Init+0x2d8>)
 8006382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006384:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <HAL_GPIO_Init+0x2d8>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6613      	str	r3, [r2, #96]	; 0x60
 800638c:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HAL_GPIO_Init+0x2d8>)
 800638e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006398:	4a53      	ldr	r2, [pc, #332]	; (80064e8 <HAL_GPIO_Init+0x2dc>)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	3302      	adds	r3, #2
 80063a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	220f      	movs	r2, #15
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4013      	ands	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80063c2:	d019      	beq.n	80063f8 <HAL_GPIO_Init+0x1ec>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a49      	ldr	r2, [pc, #292]	; (80064ec <HAL_GPIO_Init+0x2e0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_GPIO_Init+0x1e8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a48      	ldr	r2, [pc, #288]	; (80064f0 <HAL_GPIO_Init+0x2e4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00d      	beq.n	80063f0 <HAL_GPIO_Init+0x1e4>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a47      	ldr	r2, [pc, #284]	; (80064f4 <HAL_GPIO_Init+0x2e8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <HAL_GPIO_Init+0x1e0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a46      	ldr	r2, [pc, #280]	; (80064f8 <HAL_GPIO_Init+0x2ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d101      	bne.n	80063e8 <HAL_GPIO_Init+0x1dc>
 80063e4:	2304      	movs	r3, #4
 80063e6:	e008      	b.n	80063fa <HAL_GPIO_Init+0x1ee>
 80063e8:	2307      	movs	r3, #7
 80063ea:	e006      	b.n	80063fa <HAL_GPIO_Init+0x1ee>
 80063ec:	2303      	movs	r3, #3
 80063ee:	e004      	b.n	80063fa <HAL_GPIO_Init+0x1ee>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e002      	b.n	80063fa <HAL_GPIO_Init+0x1ee>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <HAL_GPIO_Init+0x1ee>
 80063f8:	2300      	movs	r3, #0
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f002 0203 	and.w	r2, r2, #3
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	4093      	lsls	r3, r2
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800640a:	4937      	ldr	r1, [pc, #220]	; (80064e8 <HAL_GPIO_Init+0x2dc>)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	3302      	adds	r3, #2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006418:	4b38      	ldr	r3, [pc, #224]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	43db      	mvns	r3, r3
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4013      	ands	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800643c:	4a2f      	ldr	r2, [pc, #188]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006442:	4b2e      	ldr	r3, [pc, #184]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	43db      	mvns	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006466:	4a25      	ldr	r2, [pc, #148]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800646c:	4b23      	ldr	r3, [pc, #140]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	43db      	mvns	r3, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4013      	ands	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006490:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006496:	4b19      	ldr	r3, [pc, #100]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	43db      	mvns	r3, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4013      	ands	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <HAL_GPIO_Init+0x2f0>)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	3301      	adds	r3, #1
 80064c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f47f aea3 	bne.w	800621c <HAL_GPIO_Init+0x10>
  }
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40010000 	.word	0x40010000
 80064ec:	48000400 	.word	0x48000400
 80064f0:	48000800 	.word	0x48000800
 80064f4:	48000c00 	.word	0x48000c00
 80064f8:	48001000 	.word	0x48001000
 80064fc:	40010400 	.word	0x40010400

08006500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e001      	b.n	8006522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	807b      	strh	r3, [r7, #2]
 800653c:	4613      	mov	r3, r2
 800653e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006540:	787b      	ldrb	r3, [r7, #1]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006546:	887a      	ldrh	r2, [r7, #2]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800654c:	e002      	b.n	8006554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006576:	4a05      	ldr	r2, [pc, #20]	; (800658c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fc feee 	bl	8003360 <HAL_GPIO_EXTI_Callback>
  }
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40010400 	.word	0x40010400

08006590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006594:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40007000 	.word	0x40007000

080065ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ba:	d130      	bne.n	800661e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80065bc:	4b23      	ldr	r3, [pc, #140]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c8:	d038      	beq.n	800663c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065ca:	4b20      	ldr	r3, [pc, #128]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2232      	movs	r2, #50	; 0x32
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0c9b      	lsrs	r3, r3, #18
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065f0:	e002      	b.n	80065f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065f8:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006604:	d102      	bne.n	800660c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f2      	bne.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006618:	d110      	bne.n	800663c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e00f      	b.n	800663e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662a:	d007      	beq.n	800663c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006634:	4a05      	ldr	r2, [pc, #20]	; (800664c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800663a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40007000 	.word	0x40007000
 8006650:	20000024 	.word	0x20000024
 8006654:	431bde83 	.word	0x431bde83

08006658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f000 bc02 	b.w	8006e70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666c:	4b96      	ldr	r3, [pc, #600]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006676:	4b94      	ldr	r3, [pc, #592]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80e4 	beq.w	8006856 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_RCC_OscConfig+0x4c>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	f040 808b 	bne.w	80067b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	f040 8087 	bne.w	80067b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066a4:	4b88      	ldr	r3, [pc, #544]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_RCC_OscConfig+0x64>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e3d9      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	4b81      	ldr	r3, [pc, #516]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <HAL_RCC_OscConfig+0x7e>
 80066cc:	4b7e      	ldr	r3, [pc, #504]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d4:	e005      	b.n	80066e2 <HAL_RCC_OscConfig+0x8a>
 80066d6:	4b7c      	ldr	r3, [pc, #496]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80066d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d223      	bcs.n	800672e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fd8c 	bl	8007208 <RCC_SetFlashLatencyFromMSIRange>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e3ba      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066fa:	4b73      	ldr	r3, [pc, #460]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a72      	ldr	r2, [pc, #456]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006700:	f043 0308 	orr.w	r3, r3, #8
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	496d      	ldr	r1, [pc, #436]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006714:	4313      	orrs	r3, r2
 8006716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006718:	4b6b      	ldr	r3, [pc, #428]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	4968      	ldr	r1, [pc, #416]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	e025      	b.n	800677a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800672e:	4b66      	ldr	r3, [pc, #408]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a65      	ldr	r2, [pc, #404]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006734:	f043 0308 	orr.w	r3, r3, #8
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4b63      	ldr	r3, [pc, #396]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4960      	ldr	r1, [pc, #384]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800674c:	4b5e      	ldr	r3, [pc, #376]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	495b      	ldr	r1, [pc, #364]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fd4c 	bl	8007208 <RCC_SetFlashLatencyFromMSIRange>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e37a      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800677a:	f000 fc81 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 800677e:	4602      	mov	r2, r0
 8006780:	4b51      	ldr	r3, [pc, #324]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	4950      	ldr	r1, [pc, #320]	; (80068cc <HAL_RCC_OscConfig+0x274>)
 800678c:	5ccb      	ldrb	r3, [r1, r3]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	4a4e      	ldr	r2, [pc, #312]	; (80068d0 <HAL_RCC_OscConfig+0x278>)
 8006798:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800679a:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <HAL_RCC_OscConfig+0x27c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fd ffe0 	bl	8004764 <HAL_InitTick>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d052      	beq.n	8006854 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	e35e      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d032      	beq.n	8006820 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067ba:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a42      	ldr	r2, [pc, #264]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067c6:	f7fe f81d 	bl	8004804 <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067ce:	f7fe f819 	bl	8004804 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e347      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067e0:	4b39      	ldr	r3, [pc, #228]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067ec:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a35      	ldr	r2, [pc, #212]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067f2:	f043 0308 	orr.w	r3, r3, #8
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4b33      	ldr	r3, [pc, #204]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	4930      	ldr	r1, [pc, #192]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	492b      	ldr	r1, [pc, #172]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
 800681e:	e01a      	b.n	8006856 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006820:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800682c:	f7fd ffea 	bl	8004804 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006834:	f7fd ffe6 	bl	8004804 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e314      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x1dc>
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006854:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d073      	beq.n	800694a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d005      	beq.n	8006874 <HAL_RCC_OscConfig+0x21c>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b0c      	cmp	r3, #12
 800686c:	d10e      	bne.n	800688c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d10b      	bne.n	800688c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d063      	beq.n	8006948 <HAL_RCC_OscConfig+0x2f0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d15f      	bne.n	8006948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e2f1      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006894:	d106      	bne.n	80068a4 <HAL_RCC_OscConfig+0x24c>
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 800689c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	e025      	b.n	80068f0 <HAL_RCC_OscConfig+0x298>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ac:	d114      	bne.n	80068d8 <HAL_RCC_OscConfig+0x280>
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80068b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a02      	ldr	r2, [pc, #8]	; (80068c8 <HAL_RCC_OscConfig+0x270>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e013      	b.n	80068f0 <HAL_RCC_OscConfig+0x298>
 80068c8:	40021000 	.word	0x40021000
 80068cc:	08010654 	.word	0x08010654
 80068d0:	20000024 	.word	0x20000024
 80068d4:	20000028 	.word	0x20000028
 80068d8:	4ba0      	ldr	r3, [pc, #640]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a9f      	ldr	r2, [pc, #636]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80068de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	4b9d      	ldr	r3, [pc, #628]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a9c      	ldr	r2, [pc, #624]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80068ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fd ff84 	bl	8004804 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006900:	f7fd ff80 	bl	8004804 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	; 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e2ae      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006912:	4b92      	ldr	r3, [pc, #584]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x2a8>
 800691e:	e014      	b.n	800694a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fd ff70 	bl	8004804 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006928:	f7fd ff6c 	bl	8004804 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	; 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e29a      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800693a:	4b88      	ldr	r3, [pc, #544]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x2d0>
 8006946:	e000      	b.n	800694a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d060      	beq.n	8006a18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d005      	beq.n	8006968 <HAL_RCC_OscConfig+0x310>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d119      	bne.n	8006996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d116      	bne.n	8006996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006968:	4b7c      	ldr	r3, [pc, #496]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_OscConfig+0x328>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e277      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4b76      	ldr	r3, [pc, #472]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	061b      	lsls	r3, r3, #24
 800698e:	4973      	ldr	r1, [pc, #460]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006990:	4313      	orrs	r3, r2
 8006992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006994:	e040      	b.n	8006a18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d023      	beq.n	80069e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800699e:	4b6f      	ldr	r3, [pc, #444]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6e      	ldr	r2, [pc, #440]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069aa:	f7fd ff2b 	bl	8004804 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b2:	f7fd ff27 	bl	8004804 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e255      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069c4:	4b65      	ldr	r3, [pc, #404]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d0:	4b62      	ldr	r3, [pc, #392]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	495f      	ldr	r1, [pc, #380]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	604b      	str	r3, [r1, #4]
 80069e4:	e018      	b.n	8006a18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e6:	4b5d      	ldr	r3, [pc, #372]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a5c      	ldr	r2, [pc, #368]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 80069ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f2:	f7fd ff07 	bl	8004804 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069f8:	e008      	b.n	8006a0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069fa:	f7fd ff03 	bl	8004804 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e231      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a0c:	4b53      	ldr	r3, [pc, #332]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f0      	bne.n	80069fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d03c      	beq.n	8006a9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01c      	beq.n	8006a66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a32:	4a4a      	ldr	r2, [pc, #296]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fd fee2 	bl	8004804 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a44:	f7fd fede 	bl	8004804 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e20c      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a56:	4b41      	ldr	r3, [pc, #260]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0ef      	beq.n	8006a44 <HAL_RCC_OscConfig+0x3ec>
 8006a64:	e01b      	b.n	8006a9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a66:	4b3d      	ldr	r3, [pc, #244]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a6c:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a6e:	f023 0301 	bic.w	r3, r3, #1
 8006a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fd fec5 	bl	8004804 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7e:	f7fd fec1 	bl	8004804 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e1ef      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a90:	4b32      	ldr	r3, [pc, #200]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1ef      	bne.n	8006a7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 80a6 	beq.w	8006bf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aac:	2300      	movs	r3, #0
 8006aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ab0:	4b2a      	ldr	r3, [pc, #168]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10d      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac0:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ad8:	4b21      	ldr	r3, [pc, #132]	; (8006b60 <HAL_RCC_OscConfig+0x508>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d118      	bne.n	8006b16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <HAL_RCC_OscConfig+0x508>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <HAL_RCC_OscConfig+0x508>)
 8006aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006af0:	f7fd fe88 	bl	8004804 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af8:	f7fd fe84 	bl	8004804 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e1b2      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <HAL_RCC_OscConfig+0x508>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d108      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4d8>
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b2e:	e029      	b.n	8006b84 <HAL_RCC_OscConfig+0x52c>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d115      	bne.n	8006b64 <HAL_RCC_OscConfig+0x50c>
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3e:	4a07      	ldr	r2, [pc, #28]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4e:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <HAL_RCC_OscConfig+0x504>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b58:	e014      	b.n	8006b84 <HAL_RCC_OscConfig+0x52c>
 8006b5a:	bf00      	nop
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	40007000 	.word	0x40007000
 8006b64:	4b9a      	ldr	r3, [pc, #616]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6a:	4a99      	ldr	r2, [pc, #612]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b74:	4b96      	ldr	r3, [pc, #600]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	4a95      	ldr	r2, [pc, #596]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006b7c:	f023 0304 	bic.w	r3, r3, #4
 8006b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d016      	beq.n	8006bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8c:	f7fd fe3a 	bl	8004804 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b94:	f7fd fe36 	bl	8004804 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e162      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006baa:	4b89      	ldr	r3, [pc, #548]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0ed      	beq.n	8006b94 <HAL_RCC_OscConfig+0x53c>
 8006bb8:	e015      	b.n	8006be6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bba:	f7fd fe23 	bl	8004804 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bc0:	e00a      	b.n	8006bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc2:	f7fd fe1f 	bl	8004804 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e14b      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bd8:	4b7d      	ldr	r3, [pc, #500]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1ed      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006be6:	7ffb      	ldrb	r3, [r7, #31]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bec:	4b78      	ldr	r3, [pc, #480]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf0:	4a77      	ldr	r2, [pc, #476]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d03c      	beq.n	8006c7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01c      	beq.n	8006c46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c0c:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c12:	4a6f      	ldr	r2, [pc, #444]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fd fdf2 	bl	8004804 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c24:	f7fd fdee 	bl	8004804 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e11c      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c36:	4b66      	ldr	r3, [pc, #408]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ef      	beq.n	8006c24 <HAL_RCC_OscConfig+0x5cc>
 8006c44:	e01b      	b.n	8006c7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c46:	4b62      	ldr	r3, [pc, #392]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c4c:	4a60      	ldr	r2, [pc, #384]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c56:	f7fd fdd5 	bl	8004804 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c5e:	f7fd fdd1 	bl	8004804 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e0ff      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c70:	4b57      	ldr	r3, [pc, #348]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ef      	bne.n	8006c5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80f3 	beq.w	8006e6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	f040 80c9 	bne.w	8006e24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c92:	4b4f      	ldr	r3, [pc, #316]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f003 0203 	and.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d12c      	bne.n	8006d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d123      	bne.n	8006d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d11b      	bne.n	8006d00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d113      	bne.n	8006d00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d109      	bne.n	8006d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d06b      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b0c      	cmp	r3, #12
 8006d04:	d062      	beq.n	8006dcc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d06:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e0ac      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d16:	4b2e      	ldr	r3, [pc, #184]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d22:	f7fd fd6f 	bl	8004804 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2a:	f7fd fd6b 	bl	8004804 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e099      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d3c:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f0      	bne.n	8006d2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <HAL_RCC_OscConfig+0x77c>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d58:	3a01      	subs	r2, #1
 8006d5a:	0112      	lsls	r2, r2, #4
 8006d5c:	4311      	orrs	r1, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d62:	0212      	lsls	r2, r2, #8
 8006d64:	4311      	orrs	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d6a:	0852      	lsrs	r2, r2, #1
 8006d6c:	3a01      	subs	r2, #1
 8006d6e:	0552      	lsls	r2, r2, #21
 8006d70:	4311      	orrs	r1, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d76:	0852      	lsrs	r2, r2, #1
 8006d78:	3a01      	subs	r2, #1
 8006d7a:	0652      	lsls	r2, r2, #25
 8006d7c:	4311      	orrs	r1, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d82:	06d2      	lsls	r2, r2, #27
 8006d84:	430a      	orrs	r2, r1
 8006d86:	4912      	ldr	r1, [pc, #72]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0f      	ldr	r2, [pc, #60]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d98:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a0c      	ldr	r2, [pc, #48]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006da4:	f7fd fd2e 	bl	8004804 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dac:	f7fd fd2a 	bl	8004804 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e058      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <HAL_RCC_OscConfig+0x778>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dca:	e050      	b.n	8006e6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e04f      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d144      	bne.n	8006e6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006de4:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a23      	ldr	r2, [pc, #140]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006df0:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dfc:	f7fd fd02 	bl	8004804 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e04:	f7fd fcfe 	bl	8004804 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e02c      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e16:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f0      	beq.n	8006e04 <HAL_RCC_OscConfig+0x7ac>
 8006e22:	e024      	b.n	8006e6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b0c      	cmp	r3, #12
 8006e28:	d01f      	beq.n	8006e6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2a:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fd fce5 	bl	8004804 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3e:	f7fd fce1 	bl	8004804 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e00f      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	4905      	ldr	r1, [pc, #20]	; (8006e78 <HAL_RCC_OscConfig+0x820>)
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <HAL_RCC_OscConfig+0x824>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	60cb      	str	r3, [r1, #12]
 8006e68:	e001      	b.n	8006e6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	feeefffc 	.word	0xfeeefffc

08006e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0e7      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e94:	4b75      	ldr	r3, [pc, #468]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d910      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b72      	ldr	r3, [pc, #456]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f023 0207 	bic.w	r2, r3, #7
 8006eaa:	4970      	ldr	r1, [pc, #448]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b6e      	ldr	r3, [pc, #440]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0cf      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	4b66      	ldr	r3, [pc, #408]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d908      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ee0:	4b63      	ldr	r3, [pc, #396]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4960      	ldr	r1, [pc, #384]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04c      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d107      	bne.n	8006f16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f06:	4b5a      	ldr	r3, [pc, #360]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d121      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e0a6      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f1e:	4b54      	ldr	r3, [pc, #336]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d115      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e09a      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f36:	4b4e      	ldr	r3, [pc, #312]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e08e      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f46:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e086      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f56:	4b46      	ldr	r3, [pc, #280]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4943      	ldr	r1, [pc, #268]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f68:	f7fd fc4c 	bl	8004804 <HAL_GetTick>
 8006f6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f70:	f7fd fc48 	bl	8004804 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e06e      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f86:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 020c 	and.w	r2, r3, #12
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d1eb      	bne.n	8006f70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d010      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	4b31      	ldr	r3, [pc, #196]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d208      	bcs.n	8006fc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb4:	4b2e      	ldr	r3, [pc, #184]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	492b      	ldr	r1, [pc, #172]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc6:	4b29      	ldr	r3, [pc, #164]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d210      	bcs.n	8006ff6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd4:	4b25      	ldr	r3, [pc, #148]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f023 0207 	bic.w	r2, r3, #7
 8006fdc:	4923      	ldr	r1, [pc, #140]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe4:	4b21      	ldr	r3, [pc, #132]	; (800706c <HAL_RCC_ClockConfig+0x1ec>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d001      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e036      	b.n	8007064 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	4918      	ldr	r1, [pc, #96]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8007010:	4313      	orrs	r3, r2
 8007012:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007020:	4b13      	ldr	r3, [pc, #76]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4910      	ldr	r1, [pc, #64]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007034:	f000 f824 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <HAL_RCC_ClockConfig+0x1f0>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	490b      	ldr	r1, [pc, #44]	; (8007074 <HAL_RCC_ClockConfig+0x1f4>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	4a09      	ldr	r2, [pc, #36]	; (8007078 <HAL_RCC_ClockConfig+0x1f8>)
 8007052:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007054:	4b09      	ldr	r3, [pc, #36]	; (800707c <HAL_RCC_ClockConfig+0x1fc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f7fd fb83 	bl	8004764 <HAL_InitTick>
 800705e:	4603      	mov	r3, r0
 8007060:	72fb      	strb	r3, [r7, #11]

  return status;
 8007062:	7afb      	ldrb	r3, [r7, #11]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40022000 	.word	0x40022000
 8007070:	40021000 	.word	0x40021000
 8007074:	08010654 	.word	0x08010654
 8007078:	20000024 	.word	0x20000024
 800707c:	20000028 	.word	0x20000028

08007080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	2300      	movs	r3, #0
 800708c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800708e:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007098:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0x34>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d121      	bne.n	80070f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d11e      	bne.n	80070f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80070b4:	4b34      	ldr	r3, [pc, #208]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d107      	bne.n	80070d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80070c0:	4b31      	ldr	r3, [pc, #196]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 80070c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	e005      	b.n	80070dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80070d0:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80070dc:	4a2b      	ldr	r2, [pc, #172]	; (800718c <HAL_RCC_GetSysClockFreq+0x10c>)
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10d      	bne.n	8007108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070f0:	e00a      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d102      	bne.n	80070fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <HAL_RCC_GetSysClockFreq+0x110>)
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e004      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d101      	bne.n	8007108 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007104:	4b23      	ldr	r3, [pc, #140]	; (8007194 <HAL_RCC_GetSysClockFreq+0x114>)
 8007106:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b0c      	cmp	r3, #12
 800710c:	d134      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d003      	beq.n	8007126 <HAL_RCC_GetSysClockFreq+0xa6>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d003      	beq.n	800712c <HAL_RCC_GetSysClockFreq+0xac>
 8007124:	e005      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007126:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <HAL_RCC_GetSysClockFreq+0x110>)
 8007128:	617b      	str	r3, [r7, #20]
      break;
 800712a:	e005      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <HAL_RCC_GetSysClockFreq+0x114>)
 800712e:	617b      	str	r3, [r7, #20]
      break;
 8007130:	e002      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	617b      	str	r3, [r7, #20]
      break;
 8007136:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	3301      	adds	r3, #1
 8007144:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	fb03 f202 	mul.w	r2, r3, r2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <HAL_RCC_GetSysClockFreq+0x108>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	0e5b      	lsrs	r3, r3, #25
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	3301      	adds	r3, #1
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007178:	69bb      	ldr	r3, [r7, #24]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3724      	adds	r7, #36	; 0x24
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40021000 	.word	0x40021000
 800718c:	0801066c 	.word	0x0801066c
 8007190:	00f42400 	.word	0x00f42400
 8007194:	007a1200 	.word	0x007a1200

08007198 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <HAL_RCC_GetHCLKFreq+0x14>)
 800719e:	681b      	ldr	r3, [r3, #0]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000024 	.word	0x20000024

080071b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80071b4:	f7ff fff0 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80071b8:	4602      	mov	r2, r0
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	4904      	ldr	r1, [pc, #16]	; (80071d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071c6:	5ccb      	ldrb	r3, [r1, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40021000 	.word	0x40021000
 80071d8:	08010664 	.word	0x08010664

080071dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80071e0:	f7ff ffda 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80071e4:	4602      	mov	r2, r0
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	0adb      	lsrs	r3, r3, #11
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071f2:	5ccb      	ldrb	r3, [r1, r3]
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40021000 	.word	0x40021000
 8007204:	08010664 	.word	0x08010664

08007208 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007214:	4b2a      	ldr	r3, [pc, #168]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007220:	f7ff f9b6 	bl	8006590 <HAL_PWREx_GetVoltageRange>
 8007224:	6178      	str	r0, [r7, #20]
 8007226:	e014      	b.n	8007252 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007228:	4b25      	ldr	r3, [pc, #148]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007232:	6593      	str	r3, [r2, #88]	; 0x58
 8007234:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007240:	f7ff f9a6 	bl	8006590 <HAL_PWREx_GetVoltageRange>
 8007244:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007246:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724a:	4a1d      	ldr	r2, [pc, #116]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800724c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007250:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007258:	d10b      	bne.n	8007272 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d919      	bls.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2ba0      	cmp	r3, #160	; 0xa0
 8007264:	d902      	bls.n	800726c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007266:	2302      	movs	r3, #2
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e013      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800726c:	2301      	movs	r3, #1
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	e010      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d902      	bls.n	800727e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007278:	2303      	movs	r3, #3
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	e00a      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d102      	bne.n	800728a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007284:	2302      	movs	r3, #2
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	e004      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b70      	cmp	r3, #112	; 0x70
 800728e:	d101      	bne.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007290:	2301      	movs	r3, #1
 8007292:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f023 0207 	bic.w	r2, r3, #7
 800729c:	4909      	ldr	r1, [pc, #36]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d001      	beq.n	80072b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40022000 	.word	0x40022000

080072c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072d0:	2300      	movs	r3, #0
 80072d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072d4:	2300      	movs	r3, #0
 80072d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d031      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072ec:	d01a      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80072ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072f2:	d814      	bhi.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072fc:	d10f      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80072fe:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	4a5c      	ldr	r2, [pc, #368]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007308:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800730a:	e00c      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fa44 	bl	80077a0 <RCCEx_PLLSAI1_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800731c:	e003      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	74fb      	strb	r3, [r7, #19]
      break;
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007326:	7cfb      	ldrb	r3, [r7, #19]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800732c:	4b51      	ldr	r3, [pc, #324]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733a:	494e      	ldr	r1, [pc, #312]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007342:	e001      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 809e 	beq.w	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007356:	2300      	movs	r3, #0
 8007358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800735a:	4b46      	ldr	r3, [pc, #280]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800735c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800736a:	2300      	movs	r3, #0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007370:	4b40      	ldr	r3, [pc, #256]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007374:	4a3f      	ldr	r2, [pc, #252]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737a:	6593      	str	r3, [r2, #88]	; 0x58
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800737e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007388:	2301      	movs	r3, #1
 800738a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800738c:	4b3a      	ldr	r3, [pc, #232]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a39      	ldr	r2, [pc, #228]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007398:	f7fd fa34 	bl	8004804 <HAL_GetTick>
 800739c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800739e:	e009      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a0:	f7fd fa30 	bl	8004804 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d902      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	74fb      	strb	r3, [r7, #19]
        break;
 80073b2:	e005      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073b4:	4b30      	ldr	r3, [pc, #192]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0ef      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d15a      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073c6:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01e      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d019      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800740e:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fd f9f0 	bl	8004804 <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007426:	e00b      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007428:	f7fd f9ec 	bl	8004804 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	; 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d902      	bls.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	74fb      	strb	r3, [r7, #19]
            break;
 800743e:	e006      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ec      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800744e:	7cfb      	ldrb	r3, [r7, #19]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007462:	4904      	ldr	r1, [pc, #16]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800746a:	e009      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	74bb      	strb	r3, [r7, #18]
 8007470:	e006      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000
 8007478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7cfb      	ldrb	r3, [r7, #19]
 800747e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007480:	7c7b      	ldrb	r3, [r7, #17]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d105      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007486:	4b9e      	ldr	r3, [pc, #632]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	4a9d      	ldr	r2, [pc, #628]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800748c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800749e:	4b98      	ldr	r3, [pc, #608]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a4:	f023 0203 	bic.w	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	4994      	ldr	r1, [pc, #592]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074c0:	4b8f      	ldr	r3, [pc, #572]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	f023 020c 	bic.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	498c      	ldr	r1, [pc, #560]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074e2:	4b87      	ldr	r3, [pc, #540]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	4983      	ldr	r1, [pc, #524]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007504:	4b7e      	ldr	r3, [pc, #504]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	497b      	ldr	r1, [pc, #492]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007526:	4b76      	ldr	r3, [pc, #472]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	4972      	ldr	r1, [pc, #456]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007548:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007556:	496a      	ldr	r1, [pc, #424]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800756a:	4b65      	ldr	r3, [pc, #404]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007578:	4961      	ldr	r1, [pc, #388]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800758c:	4b5c      	ldr	r3, [pc, #368]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759a:	4959      	ldr	r1, [pc, #356]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800759c:	4313      	orrs	r3, r2
 800759e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ae:	4b54      	ldr	r3, [pc, #336]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	4950      	ldr	r1, [pc, #320]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075d0:	4b4b      	ldr	r3, [pc, #300]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	4948      	ldr	r1, [pc, #288]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075f2:	4b43      	ldr	r3, [pc, #268]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80075f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f8:	f023 0203 	bic.w	r2, r3, #3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	493f      	ldr	r1, [pc, #252]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d028      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007614:	4b3a      	ldr	r3, [pc, #232]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007622:	4937      	ldr	r1, [pc, #220]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007624:	4313      	orrs	r3, r2
 8007626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007632:	d106      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007634:	4b32      	ldr	r3, [pc, #200]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4a31      	ldr	r2, [pc, #196]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800763a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763e:	60d3      	str	r3, [r2, #12]
 8007640:	e011      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800764a:	d10c      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f8a4 	bl	80077a0 <RCCEx_PLLSAI1_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800765c:	7cfb      	ldrb	r3, [r7, #19]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8007662:	7cfb      	ldrb	r3, [r7, #19]
 8007664:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d028      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007672:	4b23      	ldr	r3, [pc, #140]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007680:	491f      	ldr	r1, [pc, #124]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007682:	4313      	orrs	r3, r2
 8007684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007690:	d106      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769c:	60d3      	str	r3, [r2, #12]
 800769e:	e011      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f875 	bl	80077a0 <RCCEx_PLLSAI1_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076ba:	7cfb      	ldrb	r3, [r7, #19]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80076c0:	7cfb      	ldrb	r3, [r7, #19]
 80076c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02b      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	4908      	ldr	r1, [pc, #32]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ee:	d109      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4a02      	ldr	r2, [pc, #8]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fa:	60d3      	str	r3, [r2, #12]
 80076fc:	e014      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80076fe:	bf00      	nop
 8007700:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800770c:	d10c      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3304      	adds	r3, #4
 8007712:	2101      	movs	r1, #1
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f843 	bl	80077a0 <RCCEx_PLLSAI1_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800771e:	7cfb      	ldrb	r3, [r7, #19]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007724:	7cfb      	ldrb	r3, [r7, #19]
 8007726:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01c      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007734:	4b19      	ldr	r3, [pc, #100]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	4916      	ldr	r1, [pc, #88]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007752:	d10c      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3304      	adds	r3, #4
 8007758:	2102      	movs	r1, #2
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f820 	bl	80077a0 <RCCEx_PLLSAI1_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007764:	7cfb      	ldrb	r3, [r7, #19]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800776a:	7cfb      	ldrb	r3, [r7, #19]
 800776c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007790:	7cbb      	ldrb	r3, [r7, #18]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40021000 	.word	0x40021000

080077a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077ae:	4b74      	ldr	r3, [pc, #464]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d018      	beq.n	80077ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077ba:	4b71      	ldr	r3, [pc, #452]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0203 	and.w	r2, r3, #3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d10d      	bne.n	80077e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
       ||
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80077d2:	4b6b      	ldr	r3, [pc, #428]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
       ||
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d047      	beq.n	8007876 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	e044      	b.n	8007876 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d018      	beq.n	8007826 <RCCEx_PLLSAI1_Config+0x86>
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d825      	bhi.n	8007844 <RCCEx_PLLSAI1_Config+0xa4>
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d002      	beq.n	8007802 <RCCEx_PLLSAI1_Config+0x62>
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d009      	beq.n	8007814 <RCCEx_PLLSAI1_Config+0x74>
 8007800:	e020      	b.n	8007844 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007802:	4b5f      	ldr	r3, [pc, #380]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11d      	bne.n	800784a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007812:	e01a      	b.n	800784a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007814:	4b5a      	ldr	r3, [pc, #360]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800781c:	2b00      	cmp	r3, #0
 800781e:	d116      	bne.n	800784e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007824:	e013      	b.n	800784e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007826:	4b56      	ldr	r3, [pc, #344]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007832:	4b53      	ldr	r3, [pc, #332]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007842:	e006      	b.n	8007852 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e004      	b.n	8007854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007852:	bf00      	nop
    }

    if(status == HAL_OK)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800785a:	4b49      	ldr	r3, [pc, #292]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	3b01      	subs	r3, #1
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	430b      	orrs	r3, r1
 8007870:	4943      	ldr	r1, [pc, #268]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007872:	4313      	orrs	r3, r2
 8007874:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d17c      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800787c:	4b40      	ldr	r3, [pc, #256]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3f      	ldr	r2, [pc, #252]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007888:	f7fc ffbc 	bl	8004804 <HAL_GetTick>
 800788c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800788e:	e009      	b.n	80078a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007890:	f7fc ffb8 	bl	8004804 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d902      	bls.n	80078a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	73fb      	strb	r3, [r7, #15]
        break;
 80078a2:	e005      	b.n	80078b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078a4:	4b36      	ldr	r3, [pc, #216]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1ef      	bne.n	8007890 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d15f      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d110      	bne.n	80078de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078bc:	4b30      	ldr	r3, [pc, #192]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80078c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6892      	ldr	r2, [r2, #8]
 80078cc:	0211      	lsls	r1, r2, #8
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68d2      	ldr	r2, [r2, #12]
 80078d2:	06d2      	lsls	r2, r2, #27
 80078d4:	430a      	orrs	r2, r1
 80078d6:	492a      	ldr	r1, [pc, #168]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	610b      	str	r3, [r1, #16]
 80078dc:	e027      	b.n	800792e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d112      	bne.n	800790a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078e4:	4b26      	ldr	r3, [pc, #152]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80078ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6892      	ldr	r2, [r2, #8]
 80078f4:	0211      	lsls	r1, r2, #8
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6912      	ldr	r2, [r2, #16]
 80078fa:	0852      	lsrs	r2, r2, #1
 80078fc:	3a01      	subs	r2, #1
 80078fe:	0552      	lsls	r2, r2, #21
 8007900:	430a      	orrs	r2, r1
 8007902:	491f      	ldr	r1, [pc, #124]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007904:	4313      	orrs	r3, r2
 8007906:	610b      	str	r3, [r1, #16]
 8007908:	e011      	b.n	800792e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6892      	ldr	r2, [r2, #8]
 800791a:	0211      	lsls	r1, r2, #8
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6952      	ldr	r2, [r2, #20]
 8007920:	0852      	lsrs	r2, r2, #1
 8007922:	3a01      	subs	r2, #1
 8007924:	0652      	lsls	r2, r2, #25
 8007926:	430a      	orrs	r2, r1
 8007928:	4915      	ldr	r1, [pc, #84]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800792a:	4313      	orrs	r3, r2
 800792c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a13      	ldr	r2, [pc, #76]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793a:	f7fc ff63 	bl	8004804 <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007940:	e009      	b.n	8007956 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007942:	f7fc ff5f 	bl	8004804 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d902      	bls.n	8007956 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	73fb      	strb	r3, [r7, #15]
          break;
 8007954:	e005      	b.n	8007962 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0ef      	beq.n	8007942 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	4903      	ldr	r1, [pc, #12]	; (8007980 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007972:	4313      	orrs	r3, r2
 8007974:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40021000 	.word	0x40021000

08007984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e095      	b.n	8007ac2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d108      	bne.n	80079b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a6:	d009      	beq.n	80079bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	61da      	str	r2, [r3, #28]
 80079ae:	e005      	b.n	80079bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fc fc84 	bl	80042e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079fc:	d902      	bls.n	8007a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e002      	b.n	8007a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a12:	d007      	beq.n	8007a24 <HAL_SPI_Init+0xa0>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a1c:	d002      	beq.n	8007a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a66:	ea42 0103 	orr.w	r1, r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 0204 	and.w	r2, r3, #4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007aa0:	ea42 0103 	orr.w	r1, r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_SPI_Transmit+0x22>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e158      	b.n	8007d9e <HAL_SPI_Transmit+0x2d4>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007af4:	f7fc fe86 	bl	8004804 <HAL_GetTick>
 8007af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d002      	beq.n	8007b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b0e:	e13d      	b.n	8007d8c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_SPI_Transmit+0x52>
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b20:	e134      	b.n	8007d8c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2203      	movs	r2, #3
 8007b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d10f      	bne.n	8007b8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d007      	beq.n	8007bac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bb4:	d94b      	bls.n	8007c4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_Transmit+0xfa>
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d13e      	bne.n	8007c42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007be8:	e02b      	b.n	8007c42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d112      	bne.n	8007c1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	881a      	ldrh	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c1c:	e011      	b.n	8007c42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1e:	f7fc fdf1 	bl	8004804 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_Transmit+0x16c>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_Transmit+0x172>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d102      	bne.n	8007c42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c40:	e0a4      	b.n	8007d8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1ce      	bne.n	8007bea <HAL_SPI_Transmit+0x120>
 8007c4c:	e07c      	b.n	8007d48 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_SPI_Transmit+0x192>
 8007c56:	8afb      	ldrh	r3, [r7, #22]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d170      	bne.n	8007d3e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d912      	bls.n	8007c8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b02      	subs	r3, #2
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c8a:	e058      	b.n	8007d3e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007cb2:	e044      	b.n	8007d3e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d12b      	bne.n	8007d1a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d912      	bls.n	8007cf2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	881a      	ldrh	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	1c9a      	adds	r2, r3, #2
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b02      	subs	r3, #2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cf0:	e025      	b.n	8007d3e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d18:	e011      	b.n	8007d3e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d1a:	f7fc fd73 	bl	8004804 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d803      	bhi.n	8007d32 <HAL_SPI_Transmit+0x268>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d102      	bne.n	8007d38 <HAL_SPI_Transmit+0x26e>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d3c:	e026      	b.n	8007d8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1b5      	bne.n	8007cb4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fce3 	bl	8008718 <SPI_EndRxTxTransaction>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e000      	b.n	8007d8c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007d8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3720      	adds	r7, #32
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b088      	sub	sp, #32
 8007daa:	af02      	add	r7, sp, #8
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc2:	d112      	bne.n	8007dea <HAL_SPI_Receive+0x44>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10e      	bne.n	8007dea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2204      	movs	r2, #4
 8007dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007dd4:	88fa      	ldrh	r2, [r7, #6]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f910 	bl	8008006 <HAL_SPI_TransmitReceive>
 8007de6:	4603      	mov	r3, r0
 8007de8:	e109      	b.n	8007ffe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_SPI_Receive+0x52>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e102      	b.n	8007ffe <HAL_SPI_Receive+0x258>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e00:	f7fc fd00 	bl	8004804 <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d002      	beq.n	8007e18 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
 8007e14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e16:	e0e9      	b.n	8007fec <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_SPI_Receive+0x7e>
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e28:	e0e0      	b.n	8007fec <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e74:	d908      	bls.n	8007e88 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	e007      	b.n	8007e98 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea0:	d10f      	bne.n	8007ec2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ec0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b40      	cmp	r3, #64	; 0x40
 8007ece:	d007      	beq.n	8007ee0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ede:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ee8:	d867      	bhi.n	8007fba <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007eea:	e030      	b.n	8007f4e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d117      	bne.n	8007f2a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f103 020c 	add.w	r2, r3, #12
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007f28:	e011      	b.n	8007f4e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f2a:	f7fc fc6b 	bl	8004804 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d803      	bhi.n	8007f42 <HAL_SPI_Receive+0x19c>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d102      	bne.n	8007f48 <HAL_SPI_Receive+0x1a2>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f4c:	e04e      	b.n	8007fec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1c8      	bne.n	8007eec <HAL_SPI_Receive+0x146>
 8007f5a:	e034      	b.n	8007fc6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d115      	bne.n	8007f96 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	b292      	uxth	r2, r2
 8007f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	1c9a      	adds	r2, r3, #2
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007f94:	e011      	b.n	8007fba <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f96:	f7fc fc35 	bl	8004804 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d803      	bhi.n	8007fae <HAL_SPI_Receive+0x208>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d102      	bne.n	8007fb4 <HAL_SPI_Receive+0x20e>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007fb8:	e018      	b.n	8007fec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ca      	bne.n	8007f5c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fb4c 	bl	8008668 <SPI_EndRxTransaction>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
 8007fe8:	e000      	b.n	8007fec <HAL_SPI_Receive+0x246>
  }

error :
 8007fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b08a      	sub	sp, #40	; 0x28
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008014:	2301      	movs	r3, #1
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_SPI_TransmitReceive+0x26>
 8008028:	2302      	movs	r3, #2
 800802a:	e1fb      	b.n	8008424 <HAL_SPI_TransmitReceive+0x41e>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008034:	f7fc fbe6 	bl	8004804 <HAL_GetTick>
 8008038:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008040:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800804c:	887b      	ldrh	r3, [r7, #2]
 800804e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008050:	7efb      	ldrb	r3, [r7, #27]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d00e      	beq.n	8008074 <HAL_SPI_TransmitReceive+0x6e>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800805c:	d106      	bne.n	800806c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_SPI_TransmitReceive+0x66>
 8008066:	7efb      	ldrb	r3, [r7, #27]
 8008068:	2b04      	cmp	r3, #4
 800806a:	d003      	beq.n	8008074 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800806c:	2302      	movs	r3, #2
 800806e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008072:	e1cd      	b.n	8008410 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x80>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x80>
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800808c:	e1c0      	b.n	8008410 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b04      	cmp	r3, #4
 8008098:	d003      	beq.n	80080a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2205      	movs	r2, #5
 800809e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	887a      	ldrh	r2, [r7, #2]
 80080b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	887a      	ldrh	r2, [r7, #2]
 80080ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	887a      	ldrh	r2, [r7, #2]
 80080c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080e4:	d802      	bhi.n	80080ec <HAL_SPI_TransmitReceive+0xe6>
 80080e6:	8a3b      	ldrh	r3, [r7, #16]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d908      	bls.n	80080fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	e007      	b.n	800810e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008118:	2b40      	cmp	r3, #64	; 0x40
 800811a:	d007      	beq.n	800812c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800812a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008134:	d97c      	bls.n	8008230 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x13e>
 800813e:	8a7b      	ldrh	r3, [r7, #18]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d169      	bne.n	8008218 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	881a      	ldrh	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	1c9a      	adds	r2, r3, #2
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008168:	e056      	b.n	8008218 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b02      	cmp	r3, #2
 8008176:	d11b      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x1aa>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x1aa>
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	2b01      	cmp	r3, #1
 8008186:	d113      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	881a      	ldrh	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	1c9a      	adds	r2, r3, #2
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d11c      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x1f2>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	b292      	uxth	r2, r2
 80081d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	1c9a      	adds	r2, r3, #2
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081f4:	2301      	movs	r3, #1
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081f8:	f7fc fb04 	bl	8004804 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008204:	429a      	cmp	r2, r3
 8008206:	d807      	bhi.n	8008218 <HAL_SPI_TransmitReceive+0x212>
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820e:	d003      	beq.n	8008218 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008216:	e0fb      	b.n	8008410 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1a3      	bne.n	800816a <HAL_SPI_TransmitReceive+0x164>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d19d      	bne.n	800816a <HAL_SPI_TransmitReceive+0x164>
 800822e:	e0df      	b.n	80083f0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_SPI_TransmitReceive+0x23a>
 8008238:	8a7b      	ldrh	r3, [r7, #18]
 800823a:	2b01      	cmp	r3, #1
 800823c:	f040 80cb 	bne.w	80083d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d912      	bls.n	8008270 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	881a      	ldrh	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b02      	subs	r3, #2
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800826e:	e0b2      	b.n	80083d6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	330c      	adds	r3, #12
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008296:	e09e      	b.n	80083d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d134      	bne.n	8008310 <HAL_SPI_TransmitReceive+0x30a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d02f      	beq.n	8008310 <HAL_SPI_TransmitReceive+0x30a>
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d12c      	bne.n	8008310 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d912      	bls.n	80082e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	881a      	ldrh	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	1c9a      	adds	r2, r3, #2
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b02      	subs	r3, #2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082e4:	e012      	b.n	800830c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	330c      	adds	r3, #12
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b01      	cmp	r3, #1
 800831c:	d148      	bne.n	80083b0 <HAL_SPI_TransmitReceive+0x3aa>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d042      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b01      	cmp	r3, #1
 8008334:	d923      	bls.n	800837e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	b292      	uxth	r2, r2
 8008342:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	1c9a      	adds	r2, r3, #2
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b02      	subs	r3, #2
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b01      	cmp	r3, #1
 800836a:	d81f      	bhi.n	80083ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	e016      	b.n	80083ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f103 020c 	add.w	r2, r3, #12
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	7812      	ldrb	r2, [r2, #0]
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083ac:	2301      	movs	r3, #1
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083b0:	f7fc fa28 	bl	8004804 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083bc:	429a      	cmp	r2, r3
 80083be:	d803      	bhi.n	80083c8 <HAL_SPI_TransmitReceive+0x3c2>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d102      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x3c8>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80083d4:	e01c      	b.n	8008410 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f47f af5b 	bne.w	8008298 <HAL_SPI_TransmitReceive+0x292>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f47f af54 	bne.w	8008298 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f98f 	bl	8008718 <SPI_EndRxTxTransaction>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	661a      	str	r2, [r3, #96]	; 0x60
 800840c:	e000      	b.n	8008410 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800840e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008424:	4618      	mov	r0, r3
 8008426:	3728      	adds	r7, #40	; 0x28
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	4613      	mov	r3, r2
 800843a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800843c:	f7fc f9e2 	bl	8004804 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4413      	add	r3, r2
 800844a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800844c:	f7fc f9da 	bl	8004804 <HAL_GetTick>
 8008450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008452:	4b39      	ldr	r3, [pc, #228]	; (8008538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	015b      	lsls	r3, r3, #5
 8008458:	0d1b      	lsrs	r3, r3, #20
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	fb02 f303 	mul.w	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008462:	e054      	b.n	800850e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d050      	beq.n	800850e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800846c:	f7fc f9ca 	bl	8004804 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	429a      	cmp	r2, r3
 800847a:	d902      	bls.n	8008482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d13d      	bne.n	80084fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800849a:	d111      	bne.n	80084c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d004      	beq.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ae:	d107      	bne.n	80084c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c8:	d10f      	bne.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e017      	b.n	800852e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	3b01      	subs	r3, #1
 800850c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4013      	ands	r3, r2
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	bf0c      	ite	eq
 800851e:	2301      	moveq	r3, #1
 8008520:	2300      	movne	r3, #0
 8008522:	b2db      	uxtb	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	429a      	cmp	r2, r3
 800852a:	d19b      	bne.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000024 	.word	0x20000024

0800853c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	; 0x28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800854e:	f7fc f959 	bl	8004804 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	4413      	add	r3, r2
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800855e:	f7fc f951 	bl	8004804 <HAL_GetTick>
 8008562:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800856c:	4b3d      	ldr	r3, [pc, #244]	; (8008664 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	00da      	lsls	r2, r3, #3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	fb02 f303 	mul.w	r3, r2, r3
 8008582:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008584:	e060      	b.n	8008648 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800858c:	d107      	bne.n	800859e <SPI_WaitFifoStateUntilTimeout+0x62>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d104      	bne.n	800859e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800859c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d050      	beq.n	8008648 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a6:	f7fc f92d 	bl	8004804 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d902      	bls.n	80085bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d13d      	bne.n	8008638 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085d4:	d111      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d004      	beq.n	80085ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e8:	d107      	bne.n	80085fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	d10f      	bne.n	8008624 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008622:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e010      	b.n	800865a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	3b01      	subs	r3, #1
 8008646:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4013      	ands	r3, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d196      	bne.n	8008586 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000024 	.word	0x20000024

08008668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867c:	d111      	bne.n	80086a2 <SPI_EndRxTransaction+0x3a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008686:	d004      	beq.n	8008692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008690:	d107      	bne.n	80086a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff febd 	bl	800842c <SPI_WaitFlagStateUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e023      	b.n	8008710 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086d0:	d11d      	bne.n	800870e <SPI_EndRxTransaction+0xa6>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086da:	d004      	beq.n	80086e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e4:	d113      	bne.n	800870e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff22 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e000      	b.n	8008710 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ff03 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008740:	f043 0220 	orr.w	r2, r3, #32
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e027      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fe68 	bl	800842c <SPI_WaitFlagStateUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d007      	beq.n	8008772 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008766:	f043 0220 	orr.w	r2, r3, #32
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e014      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff fedc 	bl	800853c <SPI_WaitFifoStateUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878e:	f043 0220 	orr.w	r2, r3, #32
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e000      	b.n	800879c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e04e      	b.n	8008854 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d114      	bne.n	80087e8 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa0c 	bl	8008be4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a20      	ldr	r2, [pc, #128]	; (800885c <HAL_UART_Init+0xb8>)
 80087da:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2224      	movs	r2, #36	; 0x24
 80087ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0201 	bic.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fa36 	bl	8008c70 <UART_SetConfig>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e022      	b.n	8008854 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fcb0 	bl	800917c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800882a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800883a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fd37 	bl	80092c0 <UART_CheckIdleState>
 8008852:	4603      	mov	r3, r0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	08004369 	.word	0x08004369

08008860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008874:	2b20      	cmp	r3, #32
 8008876:	f040 8082 	bne.w	800897e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_UART_Transmit+0x26>
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e07a      	b.n	8008980 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_UART_Transmit+0x38>
 8008894:	2302      	movs	r3, #2
 8008896:	e073      	b.n	8008980 <HAL_UART_Transmit+0x120>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2221      	movs	r2, #33	; 0x21
 80088ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ae:	f7fb ffa9 	bl	8004804 <HAL_GetTick>
 80088b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	88fa      	ldrh	r2, [r7, #6]
 80088b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088cc:	d108      	bne.n	80088e0 <HAL_UART_Transmit+0x80>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	e003      	b.n	80088e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80088f0:	e02d      	b.n	800894e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2200      	movs	r2, #0
 80088fa:	2180      	movs	r1, #128	; 0x80
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fd28 	bl	8009352 <UART_WaitOnFlagUntilTimeout>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e039      	b.n	8008980 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	881a      	ldrh	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891e:	b292      	uxth	r2, r2
 8008920:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	3302      	adds	r3, #2
 8008926:	61bb      	str	r3, [r7, #24]
 8008928:	e008      	b.n	800893c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	781a      	ldrb	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	b292      	uxth	r2, r2
 8008934:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3301      	adds	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1cb      	bne.n	80088f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2200      	movs	r2, #0
 8008962:	2140      	movs	r1, #64	; 0x40
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fcf4 	bl	8009352 <UART_WaitOnFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e005      	b.n	8008980 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e000      	b.n	8008980 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800897e:	2302      	movs	r3, #2
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3720      	adds	r7, #32
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800899c:	2b20      	cmp	r3, #32
 800899e:	f040 80bf 	bne.w	8008b20 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <HAL_UART_Receive+0x26>
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e0b7      	b.n	8008b22 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_UART_Receive+0x38>
 80089bc:	2302      	movs	r3, #2
 80089be:	e0b0      	b.n	8008b22 <HAL_UART_Receive+0x19a>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	; 0x22
 80089d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089dc:	f7fb ff12 	bl	8004804 <HAL_GetTick>
 80089e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	88fa      	ldrh	r2, [r7, #6]
 80089e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fa:	d10e      	bne.n	8008a1a <HAL_UART_Receive+0x92>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <HAL_UART_Receive+0x88>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a0e:	e02d      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	22ff      	movs	r2, #255	; 0xff
 8008a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a18:	e028      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10d      	bne.n	8008a3e <HAL_UART_Receive+0xb6>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <HAL_UART_Receive+0xac>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	22ff      	movs	r2, #255	; 0xff
 8008a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a32:	e01b      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	227f      	movs	r2, #127	; 0x7f
 8008a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a3c:	e016      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a46:	d10d      	bne.n	8008a64 <HAL_UART_Receive+0xdc>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <HAL_UART_Receive+0xd2>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	227f      	movs	r2, #127	; 0x7f
 8008a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a58:	e008      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	223f      	movs	r2, #63	; 0x3f
 8008a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a62:	e003      	b.n	8008a6c <HAL_UART_Receive+0xe4>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7c:	d108      	bne.n	8008a90 <HAL_UART_Receive+0x108>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	e003      	b.n	8008a98 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008aa0:	e033      	b.n	8008b0a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2120      	movs	r1, #32
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fc50 	bl	8009352 <UART_WaitOnFlagUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e032      	b.n	8008b22 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	8a7b      	ldrh	r3, [r7, #18]
 8008acc:	4013      	ands	r3, r2
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	3302      	adds	r3, #2
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	e00d      	b.n	8008af8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	8a7b      	ldrh	r3, [r7, #18]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4013      	ands	r3, r2
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1c5      	bne.n	8008aa2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e000      	b.n	8008b22 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008b20:	2302      	movs	r3, #2
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
	...

08008be4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <UART_InitCallbacksToDefault+0x64>)
 8008bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <UART_InitCallbacksToDefault+0x68>)
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <UART_InitCallbacksToDefault+0x6c>)
 8008c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a13      	ldr	r2, [pc, #76]	; (8008c54 <UART_InitCallbacksToDefault+0x70>)
 8008c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a12      	ldr	r2, [pc, #72]	; (8008c58 <UART_InitCallbacksToDefault+0x74>)
 8008c10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a11      	ldr	r2, [pc, #68]	; (8008c5c <UART_InitCallbacksToDefault+0x78>)
 8008c18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a10      	ldr	r2, [pc, #64]	; (8008c60 <UART_InitCallbacksToDefault+0x7c>)
 8008c20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <UART_InitCallbacksToDefault+0x80>)
 8008c28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a0e      	ldr	r2, [pc, #56]	; (8008c68 <UART_InitCallbacksToDefault+0x84>)
 8008c30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <UART_InitCallbacksToDefault+0x88>)
 8008c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	08008b3f 	.word	0x08008b3f
 8008c4c:	08008b2b 	.word	0x08008b2b
 8008c50:	08008b67 	.word	0x08008b67
 8008c54:	08008b53 	.word	0x08008b53
 8008c58:	08008b7b 	.word	0x08008b7b
 8008c5c:	08008b8f 	.word	0x08008b8f
 8008c60:	08008ba3 	.word	0x08008ba3
 8008c64:	08008bb7 	.word	0x08008bb7
 8008c68:	080094db 	.word	0x080094db
 8008c6c:	08008bcb 	.word	0x08008bcb

08008c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c74:	b08a      	sub	sp, #40	; 0x28
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4ba5      	ldr	r3, [pc, #660]	; (8008f34 <UART_SetConfig+0x2c4>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a9a      	ldr	r2, [pc, #616]	; (8008f38 <UART_SetConfig+0x2c8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cec:	430a      	orrs	r2, r1
 8008cee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a91      	ldr	r2, [pc, #580]	; (8008f3c <UART_SetConfig+0x2cc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d126      	bne.n	8008d48 <UART_SetConfig+0xd8>
 8008cfa:	4b91      	ldr	r3, [pc, #580]	; (8008f40 <UART_SetConfig+0x2d0>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d81b      	bhi.n	8008d40 <UART_SetConfig+0xd0>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0xa0>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d21 	.word	0x08008d21
 8008d14:	08008d31 	.word	0x08008d31
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d26:	e0d6      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d2e:	e0d2      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d36:	e0ce      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d3e:	e0ca      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d46:	e0c6      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a7d      	ldr	r2, [pc, #500]	; (8008f44 <UART_SetConfig+0x2d4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d138      	bne.n	8008dc4 <UART_SetConfig+0x154>
 8008d52:	4b7b      	ldr	r3, [pc, #492]	; (8008f40 <UART_SetConfig+0x2d0>)
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d58:	f003 030c 	and.w	r3, r3, #12
 8008d5c:	2b0c      	cmp	r3, #12
 8008d5e:	d82d      	bhi.n	8008dbc <UART_SetConfig+0x14c>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <UART_SetConfig+0xf8>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d9d 	.word	0x08008d9d
 8008d6c:	08008dbd 	.word	0x08008dbd
 8008d70:	08008dbd 	.word	0x08008dbd
 8008d74:	08008dbd 	.word	0x08008dbd
 8008d78:	08008dad 	.word	0x08008dad
 8008d7c:	08008dbd 	.word	0x08008dbd
 8008d80:	08008dbd 	.word	0x08008dbd
 8008d84:	08008dbd 	.word	0x08008dbd
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	08008dbd 	.word	0x08008dbd
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008db5 	.word	0x08008db5
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008da2:	e098      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008da4:	2302      	movs	r3, #2
 8008da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008daa:	e094      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008db2:	e090      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dba:	e08c      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dc2:	e088      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a5f      	ldr	r2, [pc, #380]	; (8008f48 <UART_SetConfig+0x2d8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d125      	bne.n	8008e1a <UART_SetConfig+0x1aa>
 8008dce:	4b5c      	ldr	r3, [pc, #368]	; (8008f40 <UART_SetConfig+0x2d0>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dd8:	2b30      	cmp	r3, #48	; 0x30
 8008dda:	d016      	beq.n	8008e0a <UART_SetConfig+0x19a>
 8008ddc:	2b30      	cmp	r3, #48	; 0x30
 8008dde:	d818      	bhi.n	8008e12 <UART_SetConfig+0x1a2>
 8008de0:	2b20      	cmp	r3, #32
 8008de2:	d00a      	beq.n	8008dfa <UART_SetConfig+0x18a>
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d814      	bhi.n	8008e12 <UART_SetConfig+0x1a2>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <UART_SetConfig+0x182>
 8008dec:	2b10      	cmp	r3, #16
 8008dee:	d008      	beq.n	8008e02 <UART_SetConfig+0x192>
 8008df0:	e00f      	b.n	8008e12 <UART_SetConfig+0x1a2>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df8:	e06d      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e00:	e069      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e02:	2304      	movs	r3, #4
 8008e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e08:	e065      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e0a:	2308      	movs	r3, #8
 8008e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e10:	e061      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e12:	2310      	movs	r3, #16
 8008e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e18:	e05d      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a4b      	ldr	r2, [pc, #300]	; (8008f4c <UART_SetConfig+0x2dc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d125      	bne.n	8008e70 <UART_SetConfig+0x200>
 8008e24:	4b46      	ldr	r3, [pc, #280]	; (8008f40 <UART_SetConfig+0x2d0>)
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e30:	d016      	beq.n	8008e60 <UART_SetConfig+0x1f0>
 8008e32:	2bc0      	cmp	r3, #192	; 0xc0
 8008e34:	d818      	bhi.n	8008e68 <UART_SetConfig+0x1f8>
 8008e36:	2b80      	cmp	r3, #128	; 0x80
 8008e38:	d00a      	beq.n	8008e50 <UART_SetConfig+0x1e0>
 8008e3a:	2b80      	cmp	r3, #128	; 0x80
 8008e3c:	d814      	bhi.n	8008e68 <UART_SetConfig+0x1f8>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <UART_SetConfig+0x1d8>
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d008      	beq.n	8008e58 <UART_SetConfig+0x1e8>
 8008e46:	e00f      	b.n	8008e68 <UART_SetConfig+0x1f8>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4e:	e042      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e50:	2302      	movs	r3, #2
 8008e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e56:	e03e      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e5e:	e03a      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e66:	e036      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e6e:	e032      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a30      	ldr	r2, [pc, #192]	; (8008f38 <UART_SetConfig+0x2c8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d12a      	bne.n	8008ed0 <UART_SetConfig+0x260>
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <UART_SetConfig+0x2d0>)
 8008e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e88:	d01a      	beq.n	8008ec0 <UART_SetConfig+0x250>
 8008e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e8e:	d81b      	bhi.n	8008ec8 <UART_SetConfig+0x258>
 8008e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e94:	d00c      	beq.n	8008eb0 <UART_SetConfig+0x240>
 8008e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e9a:	d815      	bhi.n	8008ec8 <UART_SetConfig+0x258>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <UART_SetConfig+0x238>
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	d008      	beq.n	8008eb8 <UART_SetConfig+0x248>
 8008ea6:	e00f      	b.n	8008ec8 <UART_SetConfig+0x258>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eae:	e012      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eb6:	e00e      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008eb8:	2304      	movs	r3, #4
 8008eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ebe:	e00a      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ec6:	e006      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008ec8:	2310      	movs	r3, #16
 8008eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ece:	e002      	b.n	8008ed6 <UART_SetConfig+0x266>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <UART_SetConfig+0x2c8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	f040 808b 	bne.w	8008ff8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d834      	bhi.n	8008f54 <UART_SetConfig+0x2e4>
 8008eea:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0x280>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f23 	.word	0x08008f23
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08008f55 	.word	0x08008f55
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f2b 	.word	0x08008f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fe f94c 	bl	80071b0 <HAL_RCC_GetPCLK1Freq>
 8008f18:	61f8      	str	r0, [r7, #28]
        break;
 8008f1a:	e021      	b.n	8008f60 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <UART_SetConfig+0x2e0>)
 8008f1e:	61fb      	str	r3, [r7, #28]
        break;
 8008f20:	e01e      	b.n	8008f60 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f22:	f7fe f8ad 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 8008f26:	61f8      	str	r0, [r7, #28]
        break;
 8008f28:	e01a      	b.n	8008f60 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f2e:	61fb      	str	r3, [r7, #28]
        break;
 8008f30:	e016      	b.n	8008f60 <UART_SetConfig+0x2f0>
 8008f32:	bf00      	nop
 8008f34:	efff69f3 	.word	0xefff69f3
 8008f38:	40008000 	.word	0x40008000
 8008f3c:	40013800 	.word	0x40013800
 8008f40:	40021000 	.word	0x40021000
 8008f44:	40004400 	.word	0x40004400
 8008f48:	40004800 	.word	0x40004800
 8008f4c:	40004c00 	.word	0x40004c00
 8008f50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80fa 	beq.w	800915c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d305      	bcc.n	8008f84 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f8a:	e0e7      	b.n	800915c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	461c      	mov	r4, r3
 8008f92:	4615      	mov	r5, r2
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	022b      	lsls	r3, r5, #8
 8008f9e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008fa2:	0222      	lsls	r2, r4, #8
 8008fa4:	68f9      	ldr	r1, [r7, #12]
 8008fa6:	6849      	ldr	r1, [r1, #4]
 8008fa8:	0849      	lsrs	r1, r1, #1
 8008faa:	2000      	movs	r0, #0
 8008fac:	4688      	mov	r8, r1
 8008fae:	4681      	mov	r9, r0
 8008fb0:	eb12 0a08 	adds.w	sl, r2, r8
 8008fb4:	eb43 0b09 	adc.w	fp, r3, r9
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	4659      	mov	r1, fp
 8008fca:	f7f7 fe75 	bl	8000cb8 <__aeabi_uldivmod>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fdc:	d308      	bcc.n	8008ff0 <UART_SetConfig+0x380>
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe4:	d204      	bcs.n	8008ff0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	60da      	str	r2, [r3, #12]
 8008fee:	e0b5      	b.n	800915c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ff6:	e0b1      	b.n	800915c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009000:	d15d      	bne.n	80090be <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8009002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009006:	2b08      	cmp	r3, #8
 8009008:	d827      	bhi.n	800905a <UART_SetConfig+0x3ea>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <UART_SetConfig+0x3a0>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009035 	.word	0x08009035
 8009014:	0800903d 	.word	0x0800903d
 8009018:	08009045 	.word	0x08009045
 800901c:	0800905b 	.word	0x0800905b
 8009020:	0800904b 	.word	0x0800904b
 8009024:	0800905b 	.word	0x0800905b
 8009028:	0800905b 	.word	0x0800905b
 800902c:	0800905b 	.word	0x0800905b
 8009030:	08009053 	.word	0x08009053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009034:	f7fe f8bc 	bl	80071b0 <HAL_RCC_GetPCLK1Freq>
 8009038:	61f8      	str	r0, [r7, #28]
        break;
 800903a:	e014      	b.n	8009066 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800903c:	f7fe f8ce 	bl	80071dc <HAL_RCC_GetPCLK2Freq>
 8009040:	61f8      	str	r0, [r7, #28]
        break;
 8009042:	e010      	b.n	8009066 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009044:	4b4c      	ldr	r3, [pc, #304]	; (8009178 <UART_SetConfig+0x508>)
 8009046:	61fb      	str	r3, [r7, #28]
        break;
 8009048:	e00d      	b.n	8009066 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800904a:	f7fe f819 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 800904e:	61f8      	str	r0, [r7, #28]
        break;
 8009050:	e009      	b.n	8009066 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009056:	61fb      	str	r3, [r7, #28]
        break;
 8009058:	e005      	b.n	8009066 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d077      	beq.n	800915c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	005a      	lsls	r2, r3, #1
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	085b      	lsrs	r3, r3, #1
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009080:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b0f      	cmp	r3, #15
 8009086:	d916      	bls.n	80090b6 <UART_SetConfig+0x446>
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908e:	d212      	bcs.n	80090b6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	b29b      	uxth	r3, r3
 8009094:	f023 030f 	bic.w	r3, r3, #15
 8009098:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	085b      	lsrs	r3, r3, #1
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	8afb      	ldrh	r3, [r7, #22]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	8afa      	ldrh	r2, [r7, #22]
 80090b2:	60da      	str	r2, [r3, #12]
 80090b4:	e052      	b.n	800915c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80090bc:	e04e      	b.n	800915c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	d827      	bhi.n	8009116 <UART_SetConfig+0x4a6>
 80090c6:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <UART_SetConfig+0x45c>)
 80090c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	08009101 	.word	0x08009101
 80090d8:	08009117 	.word	0x08009117
 80090dc:	08009107 	.word	0x08009107
 80090e0:	08009117 	.word	0x08009117
 80090e4:	08009117 	.word	0x08009117
 80090e8:	08009117 	.word	0x08009117
 80090ec:	0800910f 	.word	0x0800910f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090f0:	f7fe f85e 	bl	80071b0 <HAL_RCC_GetPCLK1Freq>
 80090f4:	61f8      	str	r0, [r7, #28]
        break;
 80090f6:	e014      	b.n	8009122 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f8:	f7fe f870 	bl	80071dc <HAL_RCC_GetPCLK2Freq>
 80090fc:	61f8      	str	r0, [r7, #28]
        break;
 80090fe:	e010      	b.n	8009122 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009100:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <UART_SetConfig+0x508>)
 8009102:	61fb      	str	r3, [r7, #28]
        break;
 8009104:	e00d      	b.n	8009122 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009106:	f7fd ffbb 	bl	8007080 <HAL_RCC_GetSysClockFreq>
 800910a:	61f8      	str	r0, [r7, #28]
        break;
 800910c:	e009      	b.n	8009122 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800910e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009112:	61fb      	str	r3, [r7, #28]
        break;
 8009114:	e005      	b.n	8009122 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009120:	bf00      	nop
    }

    if (pclk != 0U)
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d019      	beq.n	800915c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	085a      	lsrs	r2, r3, #1
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	441a      	add	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	fbb2 f3f3 	udiv	r3, r2, r3
 800913a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b0f      	cmp	r3, #15
 8009140:	d909      	bls.n	8009156 <UART_SetConfig+0x4e6>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009148:	d205      	bcs.n	8009156 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60da      	str	r2, [r3, #12]
 8009154:	e002      	b.n	800915c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009168:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800916c:	4618      	mov	r0, r3
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009176:	bf00      	nop
 8009178:	00f42400 	.word	0x00f42400

0800917c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	f003 0310 	and.w	r3, r3, #16
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01a      	beq.n	8009292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800927a:	d10a      	bne.n	8009292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092d0:	f7fb fa98 	bl	8004804 <HAL_GetTick>
 80092d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0308 	and.w	r3, r3, #8
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d10e      	bne.n	8009302 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f82d 	bl	8009352 <UART_WaitOnFlagUntilTimeout>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e023      	b.n	800934a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d10e      	bne.n	800932e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f817 	bl	8009352 <UART_WaitOnFlagUntilTimeout>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e00d      	b.n	800934a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2220      	movs	r2, #32
 8009332:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b09c      	sub	sp, #112	; 0x70
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009362:	e0a5      	b.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	f000 80a1 	beq.w	80094b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800936e:	f7fb fa49 	bl	8004804 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800937a:	429a      	cmp	r2, r3
 800937c:	d302      	bcc.n	8009384 <UART_WaitOnFlagUntilTimeout+0x32>
 800937e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009380:	2b00      	cmp	r3, #0
 8009382:	d13e      	bne.n	8009402 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009394:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009398:	667b      	str	r3, [r7, #100]	; 0x64
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e6      	bne.n	8009384 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	663b      	str	r3, [r7, #96]	; 0x60
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80093d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e5      	bne.n	80093b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2220      	movs	r2, #32
 80093ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e067      	b.n	80094d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d04f      	beq.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800941a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800941e:	d147      	bne.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009428:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800943e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009448:	637b      	str	r3, [r7, #52]	; 0x34
 800944a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800944e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e6      	bne.n	800942a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3308      	adds	r3, #8
 8009462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	e853 3f00 	ldrex	r3, [r3]
 800946a:	613b      	str	r3, [r7, #16]
   return(result);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	66bb      	str	r3, [r7, #104]	; 0x68
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800947c:	623a      	str	r2, [r7, #32]
 800947e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	69f9      	ldr	r1, [r7, #28]
 8009482:	6a3a      	ldr	r2, [r7, #32]
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	61bb      	str	r3, [r7, #24]
   return(result);
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e5      	bne.n	800945c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2220      	movs	r2, #32
 800949a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e010      	b.n	80094d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69da      	ldr	r2, [r3, #28]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4013      	ands	r3, r2
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	429a      	cmp	r2, r3
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	f43f af4a 	beq.w	8009364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3770      	adds	r7, #112	; 0x70
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <__NVIC_SetPriority>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009500:	2b00      	cmp	r3, #0
 8009502:	db0a      	blt.n	800951a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	490c      	ldr	r1, [pc, #48]	; (800953c <__NVIC_SetPriority+0x4c>)
 800950a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950e:	0112      	lsls	r2, r2, #4
 8009510:	b2d2      	uxtb	r2, r2
 8009512:	440b      	add	r3, r1
 8009514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009518:	e00a      	b.n	8009530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	b2da      	uxtb	r2, r3
 800951e:	4908      	ldr	r1, [pc, #32]	; (8009540 <__NVIC_SetPriority+0x50>)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	3b04      	subs	r3, #4
 8009528:	0112      	lsls	r2, r2, #4
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	440b      	add	r3, r1
 800952e:	761a      	strb	r2, [r3, #24]
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	e000e100 	.word	0xe000e100
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009548:	2100      	movs	r1, #0
 800954a:	f06f 0004 	mvn.w	r0, #4
 800954e:	f7ff ffcf 	bl	80094f0 <__NVIC_SetPriority>
#endif
}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800955e:	f3ef 8305 	mrs	r3, IPSR
 8009562:	603b      	str	r3, [r7, #0]
  return(result);
 8009564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800956a:	f06f 0305 	mvn.w	r3, #5
 800956e:	607b      	str	r3, [r7, #4]
 8009570:	e00c      	b.n	800958c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <osKernelInitialize+0x44>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800957a:	4b08      	ldr	r3, [pc, #32]	; (800959c <osKernelInitialize+0x44>)
 800957c:	2201      	movs	r2, #1
 800957e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009580:	2300      	movs	r3, #0
 8009582:	607b      	str	r3, [r7, #4]
 8009584:	e002      	b.n	800958c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009586:	f04f 33ff 	mov.w	r3, #4294967295
 800958a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800958c:	687b      	ldr	r3, [r7, #4]
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	20000930 	.word	0x20000930

080095a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095a6:	f3ef 8305 	mrs	r3, IPSR
 80095aa:	603b      	str	r3, [r7, #0]
  return(result);
 80095ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80095b2:	f06f 0305 	mvn.w	r3, #5
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	e010      	b.n	80095dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <osKernelStart+0x48>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d109      	bne.n	80095d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095c2:	f7ff ffbf 	bl	8009544 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80095c6:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <osKernelStart+0x48>)
 80095c8:	2202      	movs	r2, #2
 80095ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80095cc:	f001 fc50 	bl	800ae70 <vTaskStartScheduler>
      stat = osOK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	607b      	str	r3, [r7, #4]
 80095d4:	e002      	b.n	80095dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295
 80095da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095dc:	687b      	ldr	r3, [r7, #4]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000930 	.word	0x20000930

080095ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08e      	sub	sp, #56	; 0x38
 80095f0:	af04      	add	r7, sp, #16
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fc:	f3ef 8305 	mrs	r3, IPSR
 8009600:	617b      	str	r3, [r7, #20]
  return(result);
 8009602:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009604:	2b00      	cmp	r3, #0
 8009606:	d17e      	bne.n	8009706 <osThreadNew+0x11a>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d07b      	beq.n	8009706 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800960e:	2380      	movs	r3, #128	; 0x80
 8009610:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009612:	2318      	movs	r3, #24
 8009614:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800961a:	f04f 33ff 	mov.w	r3, #4294967295
 800961e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d045      	beq.n	80096b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <osThreadNew+0x48>
        name = attr->name;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <osThreadNew+0x6e>
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	2b38      	cmp	r3, #56	; 0x38
 800964c:	d805      	bhi.n	800965a <osThreadNew+0x6e>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <osThreadNew+0x72>
        return (NULL);
 800965a:	2300      	movs	r3, #0
 800965c:	e054      	b.n	8009708 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	089b      	lsrs	r3, r3, #2
 800966c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00e      	beq.n	8009694 <osThreadNew+0xa8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	2ba7      	cmp	r3, #167	; 0xa7
 800967c:	d90a      	bls.n	8009694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <osThreadNew+0xa8>
        mem = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	e010      	b.n	80096b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10c      	bne.n	80096b6 <osThreadNew+0xca>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d108      	bne.n	80096b6 <osThreadNew+0xca>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d104      	bne.n	80096b6 <osThreadNew+0xca>
          mem = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
 80096b0:	e001      	b.n	80096b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d110      	bne.n	80096de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096c4:	9202      	str	r2, [sp, #8]
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6a3a      	ldr	r2, [r7, #32]
 80096d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f001 f962 	bl	800a99c <xTaskCreateStatic>
 80096d8:	4603      	mov	r3, r0
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	e013      	b.n	8009706 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d110      	bne.n	8009706 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f107 0310 	add.w	r3, r7, #16
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f001 f9ad 	bl	800aa56 <xTaskCreate>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d001      	beq.n	8009706 <osThreadNew+0x11a>
            hTask = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009706:	693b      	ldr	r3, [r7, #16]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3728      	adds	r7, #40	; 0x28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	; 0x28
 8009714:	af02      	add	r7, sp, #8
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009720:	f3ef 8305 	mrs	r3, IPSR
 8009724:	613b      	str	r3, [r7, #16]
  return(result);
 8009726:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009728:	2b00      	cmp	r3, #0
 800972a:	d175      	bne.n	8009818 <osSemaphoreNew+0x108>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d072      	beq.n	8009818 <osSemaphoreNew+0x108>
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	429a      	cmp	r2, r3
 8009738:	d86e      	bhi.n	8009818 <osSemaphoreNew+0x108>
    mem = -1;
 800973a:	f04f 33ff 	mov.w	r3, #4294967295
 800973e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d015      	beq.n	8009772 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d006      	beq.n	800975c <osSemaphoreNew+0x4c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2b4f      	cmp	r3, #79	; 0x4f
 8009754:	d902      	bls.n	800975c <osSemaphoreNew+0x4c>
        mem = 1;
 8009756:	2301      	movs	r3, #1
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	e00c      	b.n	8009776 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <osSemaphoreNew+0x66>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <osSemaphoreNew+0x66>
          mem = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	e001      	b.n	8009776 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d04c      	beq.n	8009818 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d128      	bne.n	80097d6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d10a      	bne.n	80097a0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2203      	movs	r2, #3
 8009790:	9200      	str	r2, [sp, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	2100      	movs	r1, #0
 8009796:	2001      	movs	r0, #1
 8009798:	f000 f9e6 	bl	8009b68 <xQueueGenericCreateStatic>
 800979c:	61f8      	str	r0, [r7, #28]
 800979e:	e005      	b.n	80097ac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80097a0:	2203      	movs	r2, #3
 80097a2:	2100      	movs	r1, #0
 80097a4:	2001      	movs	r0, #1
 80097a6:	f000 fa57 	bl	8009c58 <xQueueGenericCreate>
 80097aa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d022      	beq.n	80097f8 <osSemaphoreNew+0xe8>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01f      	beq.n	80097f8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097b8:	2300      	movs	r3, #0
 80097ba:	2200      	movs	r2, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	69f8      	ldr	r0, [r7, #28]
 80097c0:	f000 fb12 	bl	8009de8 <xQueueGenericSend>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d016      	beq.n	80097f8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80097ca:	69f8      	ldr	r0, [r7, #28]
 80097cc:	f000 ff12 	bl	800a5f4 <vQueueDelete>
            hSemaphore = NULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e010      	b.n	80097f8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d108      	bne.n	80097ee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	461a      	mov	r2, r3
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fa94 	bl	8009d12 <xQueueCreateCountingSemaphoreStatic>
 80097ea:	61f8      	str	r0, [r7, #28]
 80097ec:	e004      	b.n	80097f8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fac5 	bl	8009d80 <xQueueCreateCountingSemaphore>
 80097f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e001      	b.n	8009810 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	69f8      	ldr	r0, [r7, #28]
 8009814:	f001 f83a 	bl	800a88c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009818:	69fb      	ldr	r3, [r7, #28]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800983c:	f06f 0303 	mvn.w	r3, #3
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	e039      	b.n	80098b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009844:	f3ef 8305 	mrs	r3, IPSR
 8009848:	60fb      	str	r3, [r7, #12]
  return(result);
 800984a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800984c:	2b00      	cmp	r3, #0
 800984e:	d022      	beq.n	8009896 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009856:	f06f 0303 	mvn.w	r3, #3
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e02c      	b.n	80098b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	461a      	mov	r2, r3
 8009868:	2100      	movs	r1, #0
 800986a:	6938      	ldr	r0, [r7, #16]
 800986c:	f000 fe42 	bl	800a4f4 <xQueueReceiveFromISR>
 8009870:	4603      	mov	r3, r0
 8009872:	2b01      	cmp	r3, #1
 8009874:	d003      	beq.n	800987e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009876:	f06f 0302 	mvn.w	r3, #2
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e01c      	b.n	80098b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d019      	beq.n	80098b8 <osSemaphoreAcquire+0x94>
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <osSemaphoreAcquire+0xa0>)
 8009886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	e010      	b.n	80098b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6938      	ldr	r0, [r7, #16]
 800989a:	f000 fd1f 	bl	800a2dc <xQueueSemaphoreTake>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d009      	beq.n	80098b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80098aa:	f06f 0301 	mvn.w	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e002      	b.n	80098b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80098b2:	f06f 0302 	mvn.w	r3, #2
 80098b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80098b8:	697b      	ldr	r3, [r7, #20]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80098d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	4a06      	ldr	r2, [pc, #24]	; (80098f8 <vApplicationGetIdleTaskMemory+0x30>)
 80098de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	601a      	str	r2, [r3, #0]
}
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000934 	.word	0x20000934
 80098f8:	200009dc 	.word	0x200009dc

080098fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4a07      	ldr	r2, [pc, #28]	; (8009928 <vApplicationGetTimerTaskMemory+0x2c>)
 800990c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a06      	ldr	r2, [pc, #24]	; (800992c <vApplicationGetTimerTaskMemory+0x30>)
 8009912:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800991a:	601a      	str	r2, [r3, #0]
}
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	20000bdc 	.word	0x20000bdc
 800992c:	20000c84 	.word	0x20000c84

08009930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f103 0208 	add.w	r2, r3, #8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f04f 32ff 	mov.w	r2, #4294967295
 8009948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f103 0208 	add.w	r2, r3, #8
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f103 0208 	add.w	r2, r3, #8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689a      	ldr	r2, [r3, #8]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d103      	bne.n	80099f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e00c      	b.n	8009a0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3308      	adds	r3, #8
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e002      	b.n	8009a00 <vListInsert+0x2e>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d2f6      	bcs.n	80099fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	601a      	str	r2, [r3, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6892      	ldr	r2, [r2, #8]
 8009a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6852      	ldr	r2, [r2, #4]
 8009a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d103      	bne.n	8009a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1e5a      	subs	r2, r3, #1
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ac2:	f002 fc87 	bl	800c3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ad2:	fb01 f303 	mul.w	r3, r1, r3
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af2:	3b01      	subs	r3, #1
 8009af4:	68f9      	ldr	r1, [r7, #12]
 8009af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	441a      	add	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	22ff      	movs	r2, #255	; 0xff
 8009b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	22ff      	movs	r2, #255	; 0xff
 8009b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d114      	bne.n	8009b42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01a      	beq.n	8009b56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3310      	adds	r3, #16
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fc3d 	bl	800b3a4 <xTaskRemoveFromEventList>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d012      	beq.n	8009b56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <xQueueGenericReset+0xcc>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	e009      	b.n	8009b56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3310      	adds	r3, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fef2 	bl	8009930 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3324      	adds	r3, #36	; 0x24
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff feed 	bl	8009930 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b56:	f002 fc6d 	bl	800c434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b5a:	2301      	movs	r3, #1
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	; 0x38
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <xQueueGenericCreateStatic+0x52>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <xQueueGenericCreateStatic+0x56>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e000      	b.n	8009bc0 <xQueueGenericCreateStatic+0x58>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	623b      	str	r3, [r7, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <xQueueGenericCreateStatic+0x7e>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <xQueueGenericCreateStatic+0x82>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericCreateStatic+0x84>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	61fb      	str	r3, [r7, #28]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c06:	2350      	movs	r3, #80	; 0x50
 8009c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b50      	cmp	r3, #80	; 0x50
 8009c0e:	d00a      	beq.n	8009c26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61bb      	str	r3, [r7, #24]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00d      	beq.n	8009c4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4613      	mov	r3, r2
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f83f 	bl	8009ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	613b      	str	r3, [r7, #16]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	fb02 f303 	mul.w	r3, r2, r3
 8009c8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	3350      	adds	r3, #80	; 0x50
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 fcc1 	bl	800c618 <pvPortMalloc>
 8009c96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d011      	beq.n	8009cc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	3350      	adds	r3, #80	; 0x50
 8009ca6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cb0:	79fa      	ldrb	r2, [r7, #7]
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f805 	bl	8009ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
	}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3720      	adds	r7, #32
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	e002      	b.n	8009cee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	69b8      	ldr	r0, [r7, #24]
 8009cfe:	f7ff fecb 	bl	8009a98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b08a      	sub	sp, #40	; 0x28
 8009d16:	af02      	add	r7, sp, #8
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	61bb      	str	r3, [r7, #24]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d90a      	bls.n	8009d58 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	617b      	str	r3, [r7, #20]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d58:	2302      	movs	r3, #2
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2100      	movs	r1, #0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff ff00 	bl	8009b68 <xQueueGenericCreateStatic>
 8009d68:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d76:	69fb      	ldr	r3, [r7, #28]
	}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d90a      	bls.n	8009dc4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff ff45 	bl	8009c58 <xQueueGenericCreate>
 8009dce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ddc:	697b      	ldr	r3, [r7, #20]
	}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	; 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009df6:	2300      	movs	r3, #0
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <xQueueGenericSend+0x32>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d103      	bne.n	8009e28 <xQueueGenericSend+0x40>
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <xQueueGenericSend+0x44>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <xQueueGenericSend+0x46>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xQueueGenericSend+0x60>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d103      	bne.n	8009e56 <xQueueGenericSend+0x6e>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <xQueueGenericSend+0x72>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <xQueueGenericSend+0x74>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	623b      	str	r3, [r7, #32]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e76:	f001 fc57 	bl	800b728 <xTaskGetSchedulerState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <xQueueGenericSend+0x9e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xQueueGenericSend+0xa2>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueGenericSend+0xa4>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61fb      	str	r3, [r7, #28]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ea6:	f002 fa95 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <xQueueGenericSend+0xd4>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d129      	bne.n	8009f10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec2:	f000 fbd2 	bl	800a66a <prvCopyDataToQueue>
 8009ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fa65 	bl	800b3a4 <xTaskRemoveFromEventList>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d013      	beq.n	8009f08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ee0:	4b3f      	ldr	r3, [pc, #252]	; (8009fe0 <xQueueGenericSend+0x1f8>)
 8009ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	e00a      	b.n	8009f08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ef8:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <xQueueGenericSend+0x1f8>)
 8009efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f08:	f002 fa94 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e063      	b.n	8009fd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f16:	f002 fa8d 	bl	800c434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e05c      	b.n	8009fd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fa9f 	bl	800b46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f32:	f002 fa7f 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f36:	f001 f80b 	bl	800af50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f3a:	f002 fa4b 	bl	800c3d4 <vPortEnterCritical>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d103      	bne.n	8009f54 <xQueueGenericSend+0x16c>
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d103      	bne.n	8009f6a <xQueueGenericSend+0x182>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f6a:	f002 fa63 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f6e:	1d3a      	adds	r2, r7, #4
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 fa8e 	bl	800b498 <xTaskCheckForTimeOut>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d124      	bne.n	8009fcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f84:	f000 fc69 	bl	800a85a <prvIsQueueFull>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	3310      	adds	r3, #16
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 f9b4 	bl	800b304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9e:	f000 fbf4 	bl	800a78a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fa2:	f000 ffe3 	bl	800af6c <xTaskResumeAll>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f47f af7c 	bne.w	8009ea6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <xQueueGenericSend+0x1f8>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	e772      	b.n	8009ea6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc2:	f000 fbe2 	bl	800a78a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc6:	f000 ffd1 	bl	800af6c <xTaskResumeAll>
 8009fca:	e76c      	b.n	8009ea6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fce:	f000 fbdc 	bl	800a78a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fd2:	f000 ffcb 	bl	800af6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3738      	adds	r7, #56	; 0x38
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b090      	sub	sp, #64	; 0x40
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d103      	bne.n	800a020 <xQueueGenericSendFromISR+0x3c>
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <xQueueGenericSendFromISR+0x40>
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <xQueueGenericSendFromISR+0x42>
 800a024:	2300      	movs	r3, #0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10a      	bne.n	800a040 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d103      	bne.n	800a04e <xQueueGenericSendFromISR+0x6a>
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d101      	bne.n	800a052 <xQueueGenericSendFromISR+0x6e>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericSendFromISR+0x70>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	623b      	str	r3, [r7, #32]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a06e:	f002 fa93 	bl	800c598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a072:	f3ef 8211 	mrs	r2, BASEPRI
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	61fa      	str	r2, [r7, #28]
 800a088:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a08a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	429a      	cmp	r2, r3
 800a098:	d302      	bcc.n	800a0a0 <xQueueGenericSendFromISR+0xbc>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d12f      	bne.n	800a100 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0b6:	f000 fad8 	bl	800a66a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c2:	d112      	bne.n	800a0ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d016      	beq.n	800a0fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	3324      	adds	r3, #36	; 0x24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 f967 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00b      	beq.n	800a0fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	e007      	b.n	800a0fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	b25a      	sxtb	r2, r3
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a0fe:	e001      	b.n	800a104 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a100:	2300      	movs	r3, #0
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a10e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a112:	4618      	mov	r0, r3
 800a114:	3740      	adds	r7, #64	; 0x40
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08c      	sub	sp, #48	; 0x30
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a128:	2300      	movs	r3, #0
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <xQueueReceive+0x30>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	623b      	str	r3, [r7, #32]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <xQueueReceive+0x3e>
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueReceive+0x42>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueReceive+0x44>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xQueueReceive+0x5e>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61fb      	str	r3, [r7, #28]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a17a:	f001 fad5 	bl	800b728 <xTaskGetSchedulerState>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <xQueueReceive+0x6e>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <xQueueReceive+0x72>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueReceive+0x74>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueReceive+0x8e>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61bb      	str	r3, [r7, #24]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1aa:	f002 f913 	bl	800c3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d01f      	beq.n	800a1fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ba:	68b9      	ldr	r1, [r7, #8]
 800a1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1be:	f000 fabe 	bl	800a73e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	1e5a      	subs	r2, r3, #1
 800a1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00f      	beq.n	800a1f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	3310      	adds	r3, #16
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 f8e4 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1e2:	4b3d      	ldr	r3, [pc, #244]	; (800a2d8 <xQueueReceive+0x1bc>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1f2:	f002 f91f 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e069      	b.n	800a2ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a200:	f002 f918 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a204:	2300      	movs	r3, #0
 800a206:	e062      	b.n	800a2ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a20e:	f107 0310 	add.w	r3, r7, #16
 800a212:	4618      	mov	r0, r3
 800a214:	f001 f92a 	bl	800b46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a21c:	f002 f90a 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a220:	f000 fe96 	bl	800af50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a224:	f002 f8d6 	bl	800c3d4 <vPortEnterCritical>
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d103      	bne.n	800a23e <xQueueReceive+0x122>
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a244:	b25b      	sxtb	r3, r3
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d103      	bne.n	800a254 <xQueueReceive+0x138>
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a254:	f002 f8ee 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a258:	1d3a      	adds	r2, r7, #4
 800a25a:	f107 0310 	add.w	r3, r7, #16
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f919 	bl	800b498 <xTaskCheckForTimeOut>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d123      	bne.n	800a2b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a26e:	f000 fade 	bl	800a82e <prvIsQueueEmpty>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d017      	beq.n	800a2a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	3324      	adds	r3, #36	; 0x24
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f001 f83f 	bl	800b304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a288:	f000 fa7f 	bl	800a78a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a28c:	f000 fe6e 	bl	800af6c <xTaskResumeAll>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d189      	bne.n	800a1aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a296:	4b10      	ldr	r3, [pc, #64]	; (800a2d8 <xQueueReceive+0x1bc>)
 800a298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	e780      	b.n	800a1aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2aa:	f000 fa6e 	bl	800a78a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ae:	f000 fe5d 	bl	800af6c <xTaskResumeAll>
 800a2b2:	e77a      	b.n	800a1aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b6:	f000 fa68 	bl	800a78a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ba:	f000 fe57 	bl	800af6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c0:	f000 fab5 	bl	800a82e <prvIsQueueEmpty>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f43f af6f 	beq.w	800a1aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3730      	adds	r7, #48	; 0x30
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	e000ed04 	.word	0xe000ed04

0800a2dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08e      	sub	sp, #56	; 0x38
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	61fb      	str	r3, [r7, #28]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a32c:	f001 f9fc 	bl	800b728 <xTaskGetSchedulerState>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d102      	bne.n	800a33c <xQueueSemaphoreTake+0x60>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <xQueueSemaphoreTake+0x64>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <xQueueSemaphoreTake+0x66>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	61bb      	str	r3, [r7, #24]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a35c:	f002 f83a 	bl	800c3d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d024      	beq.n	800a3b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	1e5a      	subs	r2, r3, #1
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a37c:	f001 fb4a 	bl	800ba14 <pvTaskIncrementMutexHeldCount>
 800a380:	4602      	mov	r2, r0
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00f      	beq.n	800a3ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	3310      	adds	r3, #16
 800a392:	4618      	mov	r0, r3
 800a394:	f001 f806 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d007      	beq.n	800a3ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a39e:	4b54      	ldr	r3, [pc, #336]	; (800a4f0 <xQueueSemaphoreTake+0x214>)
 800a3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3ae:	f002 f841 	bl	800c434 <vPortExitCritical>
				return pdPASS;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e097      	b.n	800a4e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d111      	bne.n	800a3e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	617b      	str	r3, [r7, #20]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a3d8:	f002 f82c 	bl	800c434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e082      	b.n	800a4e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3e6:	f107 030c 	add.w	r3, r7, #12
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f001 f83e 	bl	800b46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3f4:	f002 f81e 	bl	800c434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3f8:	f000 fdaa 	bl	800af50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3fc:	f001 ffea 	bl	800c3d4 <vPortEnterCritical>
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a406:	b25b      	sxtb	r3, r3
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d103      	bne.n	800a416 <xQueueSemaphoreTake+0x13a>
 800a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d103      	bne.n	800a42c <xQueueSemaphoreTake+0x150>
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a42c:	f002 f802 	bl	800c434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a430:	463a      	mov	r2, r7
 800a432:	f107 030c 	add.w	r3, r7, #12
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f82d 	bl	800b498 <xTaskCheckForTimeOut>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d132      	bne.n	800a4aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a446:	f000 f9f2 	bl	800a82e <prvIsQueueEmpty>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d026      	beq.n	800a49e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a458:	f001 ffbc 	bl	800c3d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	4618      	mov	r0, r3
 800a462:	f001 f97f 	bl	800b764 <xTaskPriorityInherit>
 800a466:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a468:	f001 ffe4 	bl	800c434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	3324      	adds	r3, #36	; 0x24
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f000 ff45 	bl	800b304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a47a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a47c:	f000 f985 	bl	800a78a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a480:	f000 fd74 	bl	800af6c <xTaskResumeAll>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	f47f af68 	bne.w	800a35c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a48c:	4b18      	ldr	r3, [pc, #96]	; (800a4f0 <xQueueSemaphoreTake+0x214>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	e75e      	b.n	800a35c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4a0:	f000 f973 	bl	800a78a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4a4:	f000 fd62 	bl	800af6c <xTaskResumeAll>
 800a4a8:	e758      	b.n	800a35c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a4aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4ac:	f000 f96d 	bl	800a78a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4b0:	f000 fd5c 	bl	800af6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4b6:	f000 f9ba 	bl	800a82e <prvIsQueueEmpty>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f43f af4d 	beq.w	800a35c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00d      	beq.n	800a4e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a4c8:	f001 ff84 	bl	800c3d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a4cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4ce:	f000 f8b4 	bl	800a63a <prvGetDisinheritPriorityAfterTimeout>
 800a4d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f001 fa18 	bl	800b910 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a4e0:	f001 ffa8 	bl	800c434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3738      	adds	r7, #56	; 0x38
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	; 0x38
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	623b      	str	r3, [r7, #32]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d103      	bne.n	800a52e <xQueueReceiveFromISR+0x3a>
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <xQueueReceiveFromISR+0x3e>
 800a52e:	2301      	movs	r3, #1
 800a530:	e000      	b.n	800a534 <xQueueReceiveFromISR+0x40>
 800a532:	2300      	movs	r3, #0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	61fb      	str	r3, [r7, #28]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a54e:	f002 f823 	bl	800c598 <vPortValidateInterruptPriority>
	__asm volatile
 800a552:	f3ef 8211 	mrs	r2, BASEPRI
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61ba      	str	r2, [r7, #24]
 800a568:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a56a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d02f      	beq.n	800a5da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a588:	f000 f8d9 	bl	800a73e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59c:	d112      	bne.n	800a5c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d016      	beq.n	800a5d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fefa 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00e      	beq.n	800a5d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00b      	beq.n	800a5d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e007      	b.n	800a5d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	b25a      	sxtb	r2, r3
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d8:	e001      	b.n	800a5de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f383 8811 	msr	BASEPRI, r3
}
 800a5e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3738      	adds	r7, #56	; 0x38
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10a      	bne.n	800a61c <vQueueDelete+0x28>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60bb      	str	r3, [r7, #8]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f95f 	bl	800a8e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f002 f8bf 	bl	800c7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	d006      	beq.n	800a658 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	e001      	b.n	800a65c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a65c:	68fb      	ldr	r3, [r7, #12]
	}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b086      	sub	sp, #24
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10d      	bne.n	800a6a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d14d      	bne.n	800a72c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	4618      	mov	r0, r3
 800a696:	f001 f8cd 	bl	800b834 <xTaskPriorityDisinherit>
 800a69a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	609a      	str	r2, [r3, #8]
 800a6a2:	e043      	b.n	800a72c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d119      	bne.n	800a6de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6858      	ldr	r0, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	f003 faf6 	bl	800dca6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	441a      	add	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d32b      	bcc.n	800a72c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	e026      	b.n	800a72c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	68d8      	ldr	r0, [r3, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	f003 fadc 	bl	800dca6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	425b      	negs	r3, r3
 800a6f8:	441a      	add	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d207      	bcs.n	800a71a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	689a      	ldr	r2, [r3, #8]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	425b      	negs	r3, r3
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d105      	bne.n	800a72c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3b01      	subs	r3, #1
 800a72a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a734:	697b      	ldr	r3, [r7, #20]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d018      	beq.n	800a782 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68da      	ldr	r2, [r3, #12]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d303      	bcc.n	800a772 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68d9      	ldr	r1, [r3, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	461a      	mov	r2, r3
 800a77c:	6838      	ldr	r0, [r7, #0]
 800a77e:	f003 fa92 	bl	800dca6 <memcpy>
	}
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a792:	f001 fe1f 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a79c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a79e:	e011      	b.n	800a7c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d012      	beq.n	800a7ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3324      	adds	r3, #36	; 0x24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fdf9 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7b8:	f000 fed0 	bl	800b55c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dce9      	bgt.n	800a7a0 <prvUnlockQueue+0x16>
 800a7cc:	e000      	b.n	800a7d0 <prvUnlockQueue+0x46>
					break;
 800a7ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	22ff      	movs	r2, #255	; 0xff
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7d8:	f001 fe2c 	bl	800c434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7dc:	f001 fdfa 	bl	800c3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7e8:	e011      	b.n	800a80e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d012      	beq.n	800a818 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3310      	adds	r3, #16
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fdd4 	bl	800b3a4 <xTaskRemoveFromEventList>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a802:	f000 feab 	bl	800b55c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	3b01      	subs	r3, #1
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a80e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	dce9      	bgt.n	800a7ea <prvUnlockQueue+0x60>
 800a816:	e000      	b.n	800a81a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a818:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	22ff      	movs	r2, #255	; 0xff
 800a81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a822:	f001 fe07 	bl	800c434 <vPortExitCritical>
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a836:	f001 fdcd 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a842:	2301      	movs	r3, #1
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	e001      	b.n	800a84c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a848:	2300      	movs	r3, #0
 800a84a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a84c:	f001 fdf2 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a850:	68fb      	ldr	r3, [r7, #12]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a862:	f001 fdb7 	bl	800c3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	429a      	cmp	r2, r3
 800a870:	d102      	bne.n	800a878 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	e001      	b.n	800a87c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a87c:	f001 fdda 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800a880:	68fb      	ldr	r3, [r7, #12]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e014      	b.n	800a8c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a89c:	4a0f      	ldr	r2, [pc, #60]	; (800a8dc <vQueueAddToRegistry+0x50>)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10b      	bne.n	800a8c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8a8:	490c      	ldr	r1, [pc, #48]	; (800a8dc <vQueueAddToRegistry+0x50>)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8b2:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <vQueueAddToRegistry+0x50>)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8be:	e006      	b.n	800a8ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b07      	cmp	r3, #7
 800a8ca:	d9e7      	bls.n	800a89c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	20001084 	.word	0x20001084

0800a8e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	e016      	b.n	800a91c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <vQueueUnregisterQueue+0x50>)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d10b      	bne.n	800a916 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8fe:	4a0c      	ldr	r2, [pc, #48]	; (800a930 <vQueueUnregisterQueue+0x50>)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2100      	movs	r1, #0
 800a904:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a908:	4a09      	ldr	r2, [pc, #36]	; (800a930 <vQueueUnregisterQueue+0x50>)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	4413      	add	r3, r2
 800a910:	2200      	movs	r2, #0
 800a912:	605a      	str	r2, [r3, #4]
				break;
 800a914:	e006      	b.n	800a924 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3301      	adds	r3, #1
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b07      	cmp	r3, #7
 800a920:	d9e5      	bls.n	800a8ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a922:	bf00      	nop
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	20001084 	.word	0x20001084

0800a934 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a944:	f001 fd46 	bl	800c3d4 <vPortEnterCritical>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d103      	bne.n	800a95e <vQueueWaitForMessageRestricted+0x2a>
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a964:	b25b      	sxtb	r3, r3
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d103      	bne.n	800a974 <vQueueWaitForMessageRestricted+0x40>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a974:	f001 fd5e 	bl	800c434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d106      	bne.n	800a98e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	3324      	adds	r3, #36	; 0x24
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	68b9      	ldr	r1, [r7, #8]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fcdf 	bl	800b34c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a98e:	6978      	ldr	r0, [r7, #20]
 800a990:	f7ff fefb 	bl	800a78a <prvUnlockQueue>
	}
 800a994:	bf00      	nop
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08e      	sub	sp, #56	; 0x38
 800a9a0:	af04      	add	r7, sp, #16
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	623b      	str	r3, [r7, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	61fb      	str	r3, [r7, #28]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9e2:	23a8      	movs	r3, #168	; 0xa8
 800a9e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2ba8      	cmp	r3, #168	; 0xa8
 800a9ea:	d00a      	beq.n	800aa02 <xTaskCreateStatic+0x66>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	61bb      	str	r3, [r7, #24]
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d01e      	beq.n	800aa48 <xTaskCreateStatic+0xac>
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d01b      	beq.n	800aa48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa22:	2300      	movs	r3, #0
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 f850 	bl	800aae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa42:	f000 f8f3 	bl	800ac2c <prvAddNewTaskToReadyList>
 800aa46:	e001      	b.n	800aa4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa4c:	697b      	ldr	r3, [r7, #20]
	}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3728      	adds	r7, #40	; 0x28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b08c      	sub	sp, #48	; 0x30
 800aa5a:	af04      	add	r7, sp, #16
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	603b      	str	r3, [r7, #0]
 800aa62:	4613      	mov	r3, r2
 800aa64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa66:	88fb      	ldrh	r3, [r7, #6]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f001 fdd4 	bl	800c618 <pvPortMalloc>
 800aa70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa78:	20a8      	movs	r0, #168	; 0xa8
 800aa7a:	f001 fdcd 	bl	800c618 <pvPortMalloc>
 800aa7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa8c:	e005      	b.n	800aa9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa8e:	6978      	ldr	r0, [r7, #20]
 800aa90:	f001 fe8e 	bl	800c7b0 <vPortFree>
 800aa94:	e001      	b.n	800aa9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d017      	beq.n	800aad0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaa8:	88fa      	ldrh	r2, [r7, #6]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	9302      	str	r3, [sp, #8]
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f80e 	bl	800aae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aac4:	69f8      	ldr	r0, [r7, #28]
 800aac6:	f000 f8b1 	bl	800ac2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaca:	2301      	movs	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	e002      	b.n	800aad6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295
 800aad4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aad6:	69bb      	ldr	r3, [r7, #24]
	}
 800aad8:	4618      	mov	r0, r3
 800aada:	3720      	adds	r7, #32
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	21a5      	movs	r1, #165	; 0xa5
 800aafa:	f002 ffd8 	bl	800daae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	f023 0307 	bic.w	r3, r3, #7
 800ab16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	617b      	str	r3, [r7, #20]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d01f      	beq.n	800ab7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab3e:	2300      	movs	r3, #0
 800ab40:	61fb      	str	r3, [r7, #28]
 800ab42:	e012      	b.n	800ab6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	4413      	add	r3, r2
 800ab4a:	7819      	ldrb	r1, [r3, #0]
 800ab4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	4413      	add	r3, r2
 800ab52:	3334      	adds	r3, #52	; 0x34
 800ab54:	460a      	mov	r2, r1
 800ab56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d006      	beq.n	800ab72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	3301      	adds	r3, #1
 800ab68:	61fb      	str	r3, [r7, #28]
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	2b0f      	cmp	r3, #15
 800ab6e:	d9e9      	bls.n	800ab44 <prvInitialiseNewTask+0x64>
 800ab70:	e000      	b.n	800ab74 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab7c:	e003      	b.n	800ab86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	2b37      	cmp	r3, #55	; 0x37
 800ab8a:	d901      	bls.n	800ab90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab8c:	2337      	movs	r3, #55	; 0x37
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	2200      	movs	r2, #0
 800aba0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	3304      	adds	r3, #4
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fee2 	bl	8009970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	3318      	adds	r3, #24
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe fedd 	bl	8009970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	3354      	adds	r3, #84	; 0x54
 800abe0:	224c      	movs	r2, #76	; 0x4c
 800abe2:	2100      	movs	r1, #0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f002 ff62 	bl	800daae <memset>
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	4a0c      	ldr	r2, [pc, #48]	; (800ac20 <prvInitialiseNewTask+0x140>)
 800abee:	659a      	str	r2, [r3, #88]	; 0x58
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	4a0c      	ldr	r2, [pc, #48]	; (800ac24 <prvInitialiseNewTask+0x144>)
 800abf4:	65da      	str	r2, [r3, #92]	; 0x5c
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <prvInitialiseNewTask+0x148>)
 800abfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	69b8      	ldr	r0, [r7, #24]
 800ac02:	f001 fabd 	bl	800c180 <pxPortInitialiseStack>
 800ac06:	4602      	mov	r2, r0
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac18:	bf00      	nop
 800ac1a:	3720      	adds	r7, #32
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20002aa8 	.word	0x20002aa8
 800ac24:	20002b10 	.word	0x20002b10
 800ac28:	20002b78 	.word	0x20002b78

0800ac2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac34:	f001 fbce 	bl	800c3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac38:	4b2d      	ldr	r3, [pc, #180]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4a2c      	ldr	r2, [pc, #176]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac42:	4b2c      	ldr	r3, [pc, #176]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac4a:	4a2a      	ldr	r2, [pc, #168]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac50:	4b27      	ldr	r3, [pc, #156]	; (800acf0 <prvAddNewTaskToReadyList+0xc4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d110      	bne.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac58:	f000 fca4 	bl	800b5a4 <prvInitialiseTaskLists>
 800ac5c:	e00d      	b.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <prvAddNewTaskToReadyList+0xcc>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d802      	bhi.n	800ac7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac74:	4a1f      	ldr	r2, [pc, #124]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac7a:	4b20      	ldr	r3, [pc, #128]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	4a1e      	ldr	r2, [pc, #120]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac84:	4b1d      	ldr	r3, [pc, #116]	; (800acfc <prvAddNewTaskToReadyList+0xd0>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac90:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <prvAddNewTaskToReadyList+0xd4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d903      	bls.n	800aca0 <prvAddNewTaskToReadyList+0x74>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4a18      	ldr	r2, [pc, #96]	; (800ad00 <prvAddNewTaskToReadyList+0xd4>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <prvAddNewTaskToReadyList+0xd8>)
 800acae:	441a      	add	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe fe67 	bl	800998a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acbc:	f001 fbba 	bl	800c434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <prvAddNewTaskToReadyList+0xcc>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <prvAddNewTaskToReadyList+0xc8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d207      	bcs.n	800ace6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <prvAddNewTaskToReadyList+0xdc>)
 800acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20001598 	.word	0x20001598
 800acf4:	200010c4 	.word	0x200010c4
 800acf8:	200015a4 	.word	0x200015a4
 800acfc:	200015b4 	.word	0x200015b4
 800ad00:	200015a0 	.word	0x200015a0
 800ad04:	200010c8 	.word	0x200010c8
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	617b      	str	r3, [r7, #20]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <vTaskDelayUntil+0x46>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	613b      	str	r3, [r7, #16]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ad52:	4b2a      	ldr	r3, [pc, #168]	; (800adfc <vTaskDelayUntil+0xf0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <vTaskDelayUntil+0x64>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	60fb      	str	r3, [r7, #12]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ad70:	f000 f8ee 	bl	800af50 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ad74:	4b22      	ldr	r3, [pc, #136]	; (800ae00 <vTaskDelayUntil+0xf4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	4413      	add	r3, r2
 800ad82:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6a3a      	ldr	r2, [r7, #32]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d20b      	bcs.n	800ada6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d211      	bcs.n	800adbc <vTaskDelayUntil+0xb0>
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d90d      	bls.n	800adbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	627b      	str	r3, [r7, #36]	; 0x24
 800ada4:	e00a      	b.n	800adbc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	429a      	cmp	r2, r3
 800adae:	d303      	bcc.n	800adb8 <vTaskDelayUntil+0xac>
 800adb0:	69fa      	ldr	r2, [r7, #28]
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d901      	bls.n	800adbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d006      	beq.n	800add6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f000 fe33 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800add6:	f000 f8c9 	bl	800af6c <xTaskResumeAll>
 800adda:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d107      	bne.n	800adf2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ade2:	4b08      	ldr	r3, [pc, #32]	; (800ae04 <vTaskDelayUntil+0xf8>)
 800ade4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adf2:	bf00      	nop
 800adf4:	3728      	adds	r7, #40	; 0x28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	200015c0 	.word	0x200015c0
 800ae00:	2000159c 	.word	0x2000159c
 800ae04:	e000ed04 	.word	0xe000ed04

0800ae08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d017      	beq.n	800ae4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae1a:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <vTaskDelay+0x60>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <vTaskDelay+0x30>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	60bb      	str	r3, [r7, #8]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae38:	f000 f88a 	bl	800af50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fdfc 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae44:	f000 f892 	bl	800af6c <xTaskResumeAll>
 800ae48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d107      	bne.n	800ae60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae50:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <vTaskDelay+0x64>)
 800ae52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	200015c0 	.word	0x200015c0
 800ae6c:	e000ed04 	.word	0xe000ed04

0800ae70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae7e:	463a      	mov	r2, r7
 800ae80:	1d39      	adds	r1, r7, #4
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fd1e 	bl	80098c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	9202      	str	r2, [sp, #8]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	2300      	movs	r3, #0
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	460a      	mov	r2, r1
 800ae9e:	4924      	ldr	r1, [pc, #144]	; (800af30 <vTaskStartScheduler+0xc0>)
 800aea0:	4824      	ldr	r0, [pc, #144]	; (800af34 <vTaskStartScheduler+0xc4>)
 800aea2:	f7ff fd7b 	bl	800a99c <xTaskCreateStatic>
 800aea6:	4603      	mov	r3, r0
 800aea8:	4a23      	ldr	r2, [pc, #140]	; (800af38 <vTaskStartScheduler+0xc8>)
 800aeaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aeac:	4b22      	ldr	r3, [pc, #136]	; (800af38 <vTaskStartScheduler+0xc8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	e001      	b.n	800aebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d102      	bne.n	800aeca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aec4:	f000 fe0e 	bl	800bae4 <xTimerCreateTimerTask>
 800aec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d11b      	bne.n	800af08 <vTaskStartScheduler+0x98>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	613b      	str	r3, [r7, #16]
}
 800aee2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aee4:	4b15      	ldr	r3, [pc, #84]	; (800af3c <vTaskStartScheduler+0xcc>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3354      	adds	r3, #84	; 0x54
 800aeea:	4a15      	ldr	r2, [pc, #84]	; (800af40 <vTaskStartScheduler+0xd0>)
 800aeec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <vTaskStartScheduler+0xd4>)
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295
 800aef4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aef6:	4b14      	ldr	r3, [pc, #80]	; (800af48 <vTaskStartScheduler+0xd8>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <vTaskStartScheduler+0xdc>)
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af02:	f001 f9c5 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af06:	e00e      	b.n	800af26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d10a      	bne.n	800af26 <vTaskStartScheduler+0xb6>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	60fb      	str	r3, [r7, #12]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <vTaskStartScheduler+0xb4>
}
 800af26:	bf00      	nop
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	08010558 	.word	0x08010558
 800af34:	0800b575 	.word	0x0800b575
 800af38:	200015bc 	.word	0x200015bc
 800af3c:	200010c4 	.word	0x200010c4
 800af40:	200001f8 	.word	0x200001f8
 800af44:	200015b8 	.word	0x200015b8
 800af48:	200015a4 	.word	0x200015a4
 800af4c:	2000159c 	.word	0x2000159c

0800af50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af50:	b480      	push	{r7}
 800af52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af54:	4b04      	ldr	r3, [pc, #16]	; (800af68 <vTaskSuspendAll+0x18>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3301      	adds	r3, #1
 800af5a:	4a03      	ldr	r2, [pc, #12]	; (800af68 <vTaskSuspendAll+0x18>)
 800af5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	200015c0 	.word	0x200015c0

0800af6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af7a:	4b42      	ldr	r3, [pc, #264]	; (800b084 <xTaskResumeAll+0x118>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10a      	bne.n	800af98 <xTaskResumeAll+0x2c>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	603b      	str	r3, [r7, #0]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af98:	f001 fa1c 	bl	800c3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af9c:	4b39      	ldr	r3, [pc, #228]	; (800b084 <xTaskResumeAll+0x118>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	4a38      	ldr	r2, [pc, #224]	; (800b084 <xTaskResumeAll+0x118>)
 800afa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afa6:	4b37      	ldr	r3, [pc, #220]	; (800b084 <xTaskResumeAll+0x118>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d162      	bne.n	800b074 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afae:	4b36      	ldr	r3, [pc, #216]	; (800b088 <xTaskResumeAll+0x11c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d05e      	beq.n	800b074 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afb6:	e02f      	b.n	800b018 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb8:	4b34      	ldr	r3, [pc, #208]	; (800b08c <xTaskResumeAll+0x120>)
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3318      	adds	r3, #24
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe fd3d 	bl	8009a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3304      	adds	r3, #4
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fd38 	bl	8009a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4b2d      	ldr	r3, [pc, #180]	; (800b090 <xTaskResumeAll+0x124>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d903      	bls.n	800afe8 <xTaskResumeAll+0x7c>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	4a2a      	ldr	r2, [pc, #168]	; (800b090 <xTaskResumeAll+0x124>)
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afec:	4613      	mov	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4a27      	ldr	r2, [pc, #156]	; (800b094 <xTaskResumeAll+0x128>)
 800aff6:	441a      	add	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	3304      	adds	r3, #4
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f7fe fcc3 	bl	800998a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b008:	4b23      	ldr	r3, [pc, #140]	; (800b098 <xTaskResumeAll+0x12c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	429a      	cmp	r2, r3
 800b010:	d302      	bcc.n	800b018 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b012:	4b22      	ldr	r3, [pc, #136]	; (800b09c <xTaskResumeAll+0x130>)
 800b014:	2201      	movs	r2, #1
 800b016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b018:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <xTaskResumeAll+0x120>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1cb      	bne.n	800afb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b026:	f000 fb5f 	bl	800b6e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b02a:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <xTaskResumeAll+0x134>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d010      	beq.n	800b058 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b036:	f000 f847 	bl	800b0c8 <xTaskIncrementTick>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b040:	4b16      	ldr	r3, [pc, #88]	; (800b09c <xTaskResumeAll+0x130>)
 800b042:	2201      	movs	r2, #1
 800b044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3b01      	subs	r3, #1
 800b04a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1f1      	bne.n	800b036 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <xTaskResumeAll+0x134>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b058:	4b10      	ldr	r3, [pc, #64]	; (800b09c <xTaskResumeAll+0x130>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d009      	beq.n	800b074 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b064:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <xTaskResumeAll+0x138>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b074:	f001 f9de 	bl	800c434 <vPortExitCritical>

	return xAlreadyYielded;
 800b078:	68bb      	ldr	r3, [r7, #8]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200015c0 	.word	0x200015c0
 800b088:	20001598 	.word	0x20001598
 800b08c:	20001558 	.word	0x20001558
 800b090:	200015a0 	.word	0x200015a0
 800b094:	200010c8 	.word	0x200010c8
 800b098:	200010c4 	.word	0x200010c4
 800b09c:	200015ac 	.word	0x200015ac
 800b0a0:	200015a8 	.word	0x200015a8
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <xTaskGetTickCount+0x1c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0b4:	687b      	ldr	r3, [r7, #4]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	2000159c 	.word	0x2000159c

0800b0c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d2:	4b4f      	ldr	r3, [pc, #316]	; (800b210 <xTaskIncrementTick+0x148>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f040 808f 	bne.w	800b1fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0dc:	4b4d      	ldr	r3, [pc, #308]	; (800b214 <xTaskIncrementTick+0x14c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0e4:	4a4b      	ldr	r2, [pc, #300]	; (800b214 <xTaskIncrementTick+0x14c>)
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d120      	bne.n	800b132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0f0:	4b49      	ldr	r3, [pc, #292]	; (800b218 <xTaskIncrementTick+0x150>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	603b      	str	r3, [r7, #0]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <xTaskIncrementTick+0x46>
 800b110:	4b41      	ldr	r3, [pc, #260]	; (800b218 <xTaskIncrementTick+0x150>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b41      	ldr	r3, [pc, #260]	; (800b21c <xTaskIncrementTick+0x154>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a3f      	ldr	r2, [pc, #252]	; (800b218 <xTaskIncrementTick+0x150>)
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	4a3f      	ldr	r2, [pc, #252]	; (800b21c <xTaskIncrementTick+0x154>)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	4b3e      	ldr	r3, [pc, #248]	; (800b220 <xTaskIncrementTick+0x158>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	4a3d      	ldr	r2, [pc, #244]	; (800b220 <xTaskIncrementTick+0x158>)
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	f000 fadb 	bl	800b6e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b132:	4b3c      	ldr	r3, [pc, #240]	; (800b224 <xTaskIncrementTick+0x15c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d349      	bcc.n	800b1d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b13c:	4b36      	ldr	r3, [pc, #216]	; (800b218 <xTaskIncrementTick+0x150>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b146:	4b37      	ldr	r3, [pc, #220]	; (800b224 <xTaskIncrementTick+0x15c>)
 800b148:	f04f 32ff 	mov.w	r2, #4294967295
 800b14c:	601a      	str	r2, [r3, #0]
					break;
 800b14e:	e03f      	b.n	800b1d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b150:	4b31      	ldr	r3, [pc, #196]	; (800b218 <xTaskIncrementTick+0x150>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d203      	bcs.n	800b170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b168:	4a2e      	ldr	r2, [pc, #184]	; (800b224 <xTaskIncrementTick+0x15c>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b16e:	e02f      	b.n	800b1d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	3304      	adds	r3, #4
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fc65 	bl	8009a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	3318      	adds	r3, #24
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fc5c 	bl	8009a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4b25      	ldr	r3, [pc, #148]	; (800b228 <xTaskIncrementTick+0x160>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d903      	bls.n	800b1a0 <xTaskIncrementTick+0xd8>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	4a22      	ldr	r2, [pc, #136]	; (800b228 <xTaskIncrementTick+0x160>)
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <xTaskIncrementTick+0x164>)
 800b1ae:	441a      	add	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	f7fe fbe7 	bl	800998a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c0:	4b1b      	ldr	r3, [pc, #108]	; (800b230 <xTaskIncrementTick+0x168>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d3b8      	bcc.n	800b13c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1ce:	e7b5      	b.n	800b13c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1d0:	4b17      	ldr	r3, [pc, #92]	; (800b230 <xTaskIncrementTick+0x168>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	4915      	ldr	r1, [pc, #84]	; (800b22c <xTaskIncrementTick+0x164>)
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	440b      	add	r3, r1
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d901      	bls.n	800b1ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1ec:	4b11      	ldr	r3, [pc, #68]	; (800b234 <xTaskIncrementTick+0x16c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d007      	beq.n	800b204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e004      	b.n	800b204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1fa:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <xTaskIncrementTick+0x170>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3301      	adds	r3, #1
 800b200:	4a0d      	ldr	r2, [pc, #52]	; (800b238 <xTaskIncrementTick+0x170>)
 800b202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b204:	697b      	ldr	r3, [r7, #20]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	200015c0 	.word	0x200015c0
 800b214:	2000159c 	.word	0x2000159c
 800b218:	20001550 	.word	0x20001550
 800b21c:	20001554 	.word	0x20001554
 800b220:	200015b0 	.word	0x200015b0
 800b224:	200015b8 	.word	0x200015b8
 800b228:	200015a0 	.word	0x200015a0
 800b22c:	200010c8 	.word	0x200010c8
 800b230:	200010c4 	.word	0x200010c4
 800b234:	200015ac 	.word	0x200015ac
 800b238:	200015a8 	.word	0x200015a8

0800b23c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b242:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <vTaskSwitchContext+0xb0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b24a:	4b29      	ldr	r3, [pc, #164]	; (800b2f0 <vTaskSwitchContext+0xb4>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b250:	e046      	b.n	800b2e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b252:	4b27      	ldr	r3, [pc, #156]	; (800b2f0 <vTaskSwitchContext+0xb4>)
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b258:	4b26      	ldr	r3, [pc, #152]	; (800b2f4 <vTaskSwitchContext+0xb8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e010      	b.n	800b282 <vTaskSwitchContext+0x46>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <vTaskSwitchContext+0x40>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	607b      	str	r3, [r7, #4]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <vTaskSwitchContext+0x3e>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3b01      	subs	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	491d      	ldr	r1, [pc, #116]	; (800b2f8 <vTaskSwitchContext+0xbc>)
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	440b      	add	r3, r1
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0e4      	beq.n	800b260 <vTaskSwitchContext+0x24>
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4613      	mov	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4a15      	ldr	r2, [pc, #84]	; (800b2f8 <vTaskSwitchContext+0xbc>)
 800b2a2:	4413      	add	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3308      	adds	r3, #8
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d104      	bne.n	800b2c6 <vTaskSwitchContext+0x8a>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	4a0b      	ldr	r2, [pc, #44]	; (800b2fc <vTaskSwitchContext+0xc0>)
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	4a08      	ldr	r2, [pc, #32]	; (800b2f4 <vTaskSwitchContext+0xb8>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2d6:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <vTaskSwitchContext+0xc0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3354      	adds	r3, #84	; 0x54
 800b2dc:	4a08      	ldr	r2, [pc, #32]	; (800b300 <vTaskSwitchContext+0xc4>)
 800b2de:	6013      	str	r3, [r2, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	200015c0 	.word	0x200015c0
 800b2f0:	200015ac 	.word	0x200015ac
 800b2f4:	200015a0 	.word	0x200015a0
 800b2f8:	200010c8 	.word	0x200010c8
 800b2fc:	200010c4 	.word	0x200010c4
 800b300:	200001f8 	.word	0x200001f8

0800b304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b32a:	4b07      	ldr	r3, [pc, #28]	; (800b348 <vTaskPlaceOnEventList+0x44>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3318      	adds	r3, #24
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fe fb4d 	bl	80099d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b338:	2101      	movs	r1, #1
 800b33a:	6838      	ldr	r0, [r7, #0]
 800b33c:	f000 fb7e 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200010c4 	.word	0x200010c4

0800b34c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	617b      	str	r3, [r7, #20]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b374:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3318      	adds	r3, #24
 800b37a:	4619      	mov	r1, r3
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7fe fb04 	bl	800998a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b388:	f04f 33ff 	mov.w	r3, #4294967295
 800b38c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f000 fb53 	bl	800ba3c <prvAddCurrentTaskToDelayedList>
	}
 800b396:	bf00      	nop
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	200010c4 	.word	0x200010c4

0800b3a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10a      	bne.n	800b3d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60fb      	str	r3, [r7, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	3318      	adds	r3, #24
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fb35 	bl	8009a44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3da:	4b1e      	ldr	r3, [pc, #120]	; (800b454 <xTaskRemoveFromEventList+0xb0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d11d      	bne.n	800b41e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fb2c 	bl	8009a44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	4b19      	ldr	r3, [pc, #100]	; (800b458 <xTaskRemoveFromEventList+0xb4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d903      	bls.n	800b400 <xTaskRemoveFromEventList+0x5c>
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	4a16      	ldr	r2, [pc, #88]	; (800b458 <xTaskRemoveFromEventList+0xb4>)
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4a13      	ldr	r2, [pc, #76]	; (800b45c <xTaskRemoveFromEventList+0xb8>)
 800b40e:	441a      	add	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	3304      	adds	r3, #4
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f7fe fab7 	bl	800998a <vListInsertEnd>
 800b41c:	e005      	b.n	800b42a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	3318      	adds	r3, #24
 800b422:	4619      	mov	r1, r3
 800b424:	480e      	ldr	r0, [pc, #56]	; (800b460 <xTaskRemoveFromEventList+0xbc>)
 800b426:	f7fe fab0 	bl	800998a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42e:	4b0d      	ldr	r3, [pc, #52]	; (800b464 <xTaskRemoveFromEventList+0xc0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	429a      	cmp	r2, r3
 800b436:	d905      	bls.n	800b444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b438:	2301      	movs	r3, #1
 800b43a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b43c:	4b0a      	ldr	r3, [pc, #40]	; (800b468 <xTaskRemoveFromEventList+0xc4>)
 800b43e:	2201      	movs	r2, #1
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e001      	b.n	800b448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b444:	2300      	movs	r3, #0
 800b446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b448:	697b      	ldr	r3, [r7, #20]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	200015c0 	.word	0x200015c0
 800b458:	200015a0 	.word	0x200015a0
 800b45c:	200010c8 	.word	0x200010c8
 800b460:	20001558 	.word	0x20001558
 800b464:	200010c4 	.word	0x200010c4
 800b468:	200015ac 	.word	0x200015ac

0800b46c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <vTaskInternalSetTimeOutState+0x24>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <vTaskInternalSetTimeOutState+0x28>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	605a      	str	r2, [r3, #4]
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	200015b0 	.word	0x200015b0
 800b494:	2000159c 	.word	0x2000159c

0800b498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	613b      	str	r3, [r7, #16]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	60fb      	str	r3, [r7, #12]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4da:	f000 ff7b 	bl	800c3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4de:	4b1d      	ldr	r3, [pc, #116]	; (800b554 <xTaskCheckForTimeOut+0xbc>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f6:	d102      	bne.n	800b4fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	e023      	b.n	800b546 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <xTaskCheckForTimeOut+0xc0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	429a      	cmp	r2, r3
 800b508:	d007      	beq.n	800b51a <xTaskCheckForTimeOut+0x82>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	69ba      	ldr	r2, [r7, #24]
 800b510:	429a      	cmp	r2, r3
 800b512:	d302      	bcc.n	800b51a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b514:	2301      	movs	r3, #1
 800b516:	61fb      	str	r3, [r7, #28]
 800b518:	e015      	b.n	800b546 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	429a      	cmp	r2, r3
 800b522:	d20b      	bcs.n	800b53c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	1ad2      	subs	r2, r2, r3
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff ff9b 	bl	800b46c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	61fb      	str	r3, [r7, #28]
 800b53a:	e004      	b.n	800b546 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b542:	2301      	movs	r3, #1
 800b544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b546:	f000 ff75 	bl	800c434 <vPortExitCritical>

	return xReturn;
 800b54a:	69fb      	ldr	r3, [r7, #28]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3720      	adds	r7, #32
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	2000159c 	.word	0x2000159c
 800b558:	200015b0 	.word	0x200015b0

0800b55c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b560:	4b03      	ldr	r3, [pc, #12]	; (800b570 <vTaskMissedYield+0x14>)
 800b562:	2201      	movs	r2, #1
 800b564:	601a      	str	r2, [r3, #0]
}
 800b566:	bf00      	nop
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	200015ac 	.word	0x200015ac

0800b574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b57c:	f000 f852 	bl	800b624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <prvIdleTask+0x28>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d9f9      	bls.n	800b57c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <prvIdleTask+0x2c>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b598:	e7f0      	b.n	800b57c <prvIdleTask+0x8>
 800b59a:	bf00      	nop
 800b59c:	200010c8 	.word	0x200010c8
 800b5a0:	e000ed04 	.word	0xe000ed04

0800b5a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	e00c      	b.n	800b5ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4a12      	ldr	r2, [pc, #72]	; (800b604 <prvInitialiseTaskLists+0x60>)
 800b5bc:	4413      	add	r3, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe f9b6 	bl	8009930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	607b      	str	r3, [r7, #4]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b37      	cmp	r3, #55	; 0x37
 800b5ce:	d9ef      	bls.n	800b5b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5d0:	480d      	ldr	r0, [pc, #52]	; (800b608 <prvInitialiseTaskLists+0x64>)
 800b5d2:	f7fe f9ad 	bl	8009930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5d6:	480d      	ldr	r0, [pc, #52]	; (800b60c <prvInitialiseTaskLists+0x68>)
 800b5d8:	f7fe f9aa 	bl	8009930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5dc:	480c      	ldr	r0, [pc, #48]	; (800b610 <prvInitialiseTaskLists+0x6c>)
 800b5de:	f7fe f9a7 	bl	8009930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5e2:	480c      	ldr	r0, [pc, #48]	; (800b614 <prvInitialiseTaskLists+0x70>)
 800b5e4:	f7fe f9a4 	bl	8009930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5e8:	480b      	ldr	r0, [pc, #44]	; (800b618 <prvInitialiseTaskLists+0x74>)
 800b5ea:	f7fe f9a1 	bl	8009930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5ee:	4b0b      	ldr	r3, [pc, #44]	; (800b61c <prvInitialiseTaskLists+0x78>)
 800b5f0:	4a05      	ldr	r2, [pc, #20]	; (800b608 <prvInitialiseTaskLists+0x64>)
 800b5f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <prvInitialiseTaskLists+0x7c>)
 800b5f6:	4a05      	ldr	r2, [pc, #20]	; (800b60c <prvInitialiseTaskLists+0x68>)
 800b5f8:	601a      	str	r2, [r3, #0]
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	200010c8 	.word	0x200010c8
 800b608:	20001528 	.word	0x20001528
 800b60c:	2000153c 	.word	0x2000153c
 800b610:	20001558 	.word	0x20001558
 800b614:	2000156c 	.word	0x2000156c
 800b618:	20001584 	.word	0x20001584
 800b61c:	20001550 	.word	0x20001550
 800b620:	20001554 	.word	0x20001554

0800b624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b62a:	e019      	b.n	800b660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b62c:	f000 fed2 	bl	800c3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b630:	4b10      	ldr	r3, [pc, #64]	; (800b674 <prvCheckTasksWaitingTermination+0x50>)
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fa01 	bl	8009a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b642:	4b0d      	ldr	r3, [pc, #52]	; (800b678 <prvCheckTasksWaitingTermination+0x54>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3b01      	subs	r3, #1
 800b648:	4a0b      	ldr	r2, [pc, #44]	; (800b678 <prvCheckTasksWaitingTermination+0x54>)
 800b64a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b64c:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <prvCheckTasksWaitingTermination+0x58>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3b01      	subs	r3, #1
 800b652:	4a0a      	ldr	r2, [pc, #40]	; (800b67c <prvCheckTasksWaitingTermination+0x58>)
 800b654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b656:	f000 feed 	bl	800c434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f810 	bl	800b680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b660:	4b06      	ldr	r3, [pc, #24]	; (800b67c <prvCheckTasksWaitingTermination+0x58>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1e1      	bne.n	800b62c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	2000156c 	.word	0x2000156c
 800b678:	20001598 	.word	0x20001598
 800b67c:	20001580 	.word	0x20001580

0800b680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3354      	adds	r3, #84	; 0x54
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 fa39 	bl	800db04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d108      	bne.n	800b6ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 f885 	bl	800c7b0 <vPortFree>
				vPortFree( pxTCB );
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f001 f882 	bl	800c7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6ac:	e018      	b.n	800b6e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d103      	bne.n	800b6c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 f879 	bl	800c7b0 <vPortFree>
	}
 800b6be:	e00f      	b.n	800b6e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d00a      	beq.n	800b6e0 <prvDeleteTCB+0x60>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	60fb      	str	r3, [r7, #12]
}
 800b6dc:	bf00      	nop
 800b6de:	e7fe      	b.n	800b6de <prvDeleteTCB+0x5e>
	}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6ee:	4b0c      	ldr	r3, [pc, #48]	; (800b720 <prvResetNextTaskUnblockTime+0x38>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <prvResetNextTaskUnblockTime+0x3c>)
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b700:	e008      	b.n	800b714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <prvResetNextTaskUnblockTime+0x38>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4a04      	ldr	r2, [pc, #16]	; (800b724 <prvResetNextTaskUnblockTime+0x3c>)
 800b712:	6013      	str	r3, [r2, #0]
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	20001550 	.word	0x20001550
 800b724:	200015b8 	.word	0x200015b8

0800b728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b72e:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <xTaskGetSchedulerState+0x34>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d102      	bne.n	800b73c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b736:	2301      	movs	r3, #1
 800b738:	607b      	str	r3, [r7, #4]
 800b73a:	e008      	b.n	800b74e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73c:	4b08      	ldr	r3, [pc, #32]	; (800b760 <xTaskGetSchedulerState+0x38>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b744:	2302      	movs	r3, #2
 800b746:	607b      	str	r3, [r7, #4]
 800b748:	e001      	b.n	800b74e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b74a:	2300      	movs	r3, #0
 800b74c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b74e:	687b      	ldr	r3, [r7, #4]
	}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	200015a4 	.word	0x200015a4
 800b760:	200015c0 	.word	0x200015c0

0800b764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d051      	beq.n	800b81e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	4b2a      	ldr	r3, [pc, #168]	; (800b828 <xTaskPriorityInherit+0xc4>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	429a      	cmp	r2, r3
 800b786:	d241      	bcs.n	800b80c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	699b      	ldr	r3, [r3, #24]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db06      	blt.n	800b79e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b790:	4b25      	ldr	r3, [pc, #148]	; (800b828 <xTaskPriorityInherit+0xc4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	6959      	ldr	r1, [r3, #20]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4a1f      	ldr	r2, [pc, #124]	; (800b82c <xTaskPriorityInherit+0xc8>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	d122      	bne.n	800b7fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe f942 	bl	8009a44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7c0:	4b19      	ldr	r3, [pc, #100]	; (800b828 <xTaskPriorityInherit+0xc4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	4b18      	ldr	r3, [pc, #96]	; (800b830 <xTaskPriorityInherit+0xcc>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d903      	bls.n	800b7de <xTaskPriorityInherit+0x7a>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7da:	4a15      	ldr	r2, [pc, #84]	; (800b830 <xTaskPriorityInherit+0xcc>)
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4a10      	ldr	r2, [pc, #64]	; (800b82c <xTaskPriorityInherit+0xc8>)
 800b7ec:	441a      	add	r2, r3
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	f7fe f8c8 	bl	800998a <vListInsertEnd>
 800b7fa:	e004      	b.n	800b806 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	; (800b828 <xTaskPriorityInherit+0xc4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b806:	2301      	movs	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	e008      	b.n	800b81e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <xTaskPriorityInherit+0xc4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b816:	429a      	cmp	r2, r3
 800b818:	d201      	bcs.n	800b81e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b81a:	2301      	movs	r3, #1
 800b81c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b81e:	68fb      	ldr	r3, [r7, #12]
	}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	200010c4 	.word	0x200010c4
 800b82c:	200010c8 	.word	0x200010c8
 800b830:	200015a0 	.word	0x200015a0

0800b834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b840:	2300      	movs	r3, #0
 800b842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d056      	beq.n	800b8f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b84a:	4b2e      	ldr	r3, [pc, #184]	; (800b904 <xTaskPriorityDisinherit+0xd0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	429a      	cmp	r2, r3
 800b852:	d00a      	beq.n	800b86a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60fb      	str	r3, [r7, #12]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	60bb      	str	r3, [r7, #8]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d02c      	beq.n	800b8f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d128      	bne.n	800b8f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe f8ca 	bl	8009a44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <xTaskPriorityDisinherit+0xd4>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d903      	bls.n	800b8d8 <xTaskPriorityDisinherit+0xa4>
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	4a0c      	ldr	r2, [pc, #48]	; (800b908 <xTaskPriorityDisinherit+0xd4>)
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8dc:	4613      	mov	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4a09      	ldr	r2, [pc, #36]	; (800b90c <xTaskPriorityDisinherit+0xd8>)
 800b8e6:	441a      	add	r2, r3
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fe f84b 	bl	800998a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8f8:	697b      	ldr	r3, [r7, #20]
	}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	200010c4 	.word	0x200010c4
 800b908:	200015a0 	.word	0x200015a0
 800b90c:	200010c8 	.word	0x200010c8

0800b910 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b91e:	2301      	movs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d06a      	beq.n	800b9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	60fb      	str	r3, [r7, #12]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d902      	bls.n	800b956 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	e002      	b.n	800b95c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	429a      	cmp	r2, r3
 800b964:	d04b      	beq.n	800b9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d146      	bne.n	800b9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b970:	4b25      	ldr	r3, [pc, #148]	; (800ba08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	429a      	cmp	r2, r3
 800b978:	d10a      	bne.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	60bb      	str	r3, [r7, #8]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	69fa      	ldr	r2, [r7, #28]
 800b99a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	db04      	blt.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	6959      	ldr	r1, [r3, #20]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4a13      	ldr	r2, [pc, #76]	; (800ba0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9be:	4413      	add	r3, r2
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	d11c      	bne.n	800b9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe f83b 	bl	8009a44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d903      	bls.n	800b9e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	4a0c      	ldr	r2, [pc, #48]	; (800ba10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a07      	ldr	r2, [pc, #28]	; (800ba0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9f0:	441a      	add	r2, r3
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7fd ffc6 	bl	800998a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9fe:	bf00      	nop
 800ba00:	3720      	adds	r7, #32
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200010c4 	.word	0x200010c4
 800ba0c:	200010c8 	.word	0x200010c8
 800ba10:	200015a0 	.word	0x200015a0

0800ba14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d004      	beq.n	800ba2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba20:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba26:	3201      	adds	r2, #1
 800ba28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ba2a:	4b03      	ldr	r3, [pc, #12]	; (800ba38 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
	}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	200010c4 	.word	0x200010c4

0800ba3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba46:	4b21      	ldr	r3, [pc, #132]	; (800bacc <prvAddCurrentTaskToDelayedList+0x90>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba4c:	4b20      	ldr	r3, [pc, #128]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd fff6 	bl	8009a44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5e:	d10a      	bne.n	800ba76 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba66:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4819      	ldr	r0, [pc, #100]	; (800bad4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba70:	f7fd ff8b 	bl	800998a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba74:	e026      	b.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba7e:	4b14      	ldr	r3, [pc, #80]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d209      	bcs.n	800baa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fd ff99 	bl	80099d2 <vListInsert>
}
 800baa0:	e010      	b.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa2:	4b0e      	ldr	r3, [pc, #56]	; (800badc <prvAddCurrentTaskToDelayedList+0xa0>)
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	4b0a      	ldr	r3, [pc, #40]	; (800bad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fd ff8f 	bl	80099d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bab4:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	d202      	bcs.n	800bac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800babe:	4a08      	ldr	r2, [pc, #32]	; (800bae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	6013      	str	r3, [r2, #0]
}
 800bac4:	bf00      	nop
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2000159c 	.word	0x2000159c
 800bad0:	200010c4 	.word	0x200010c4
 800bad4:	20001584 	.word	0x20001584
 800bad8:	20001554 	.word	0x20001554
 800badc:	20001550 	.word	0x20001550
 800bae0:	200015b8 	.word	0x200015b8

0800bae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08a      	sub	sp, #40	; 0x28
 800bae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baee:	f000 fb07 	bl	800c100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xTimerCreateTimerTask+0x80>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d021      	beq.n	800bb3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb02:	1d3a      	adds	r2, r7, #4
 800bb04:	f107 0108 	add.w	r1, r7, #8
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fd fef5 	bl	80098fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	9202      	str	r2, [sp, #8]
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	460a      	mov	r2, r1
 800bb24:	4910      	ldr	r1, [pc, #64]	; (800bb68 <xTimerCreateTimerTask+0x84>)
 800bb26:	4811      	ldr	r0, [pc, #68]	; (800bb6c <xTimerCreateTimerTask+0x88>)
 800bb28:	f7fe ff38 	bl	800a99c <xTaskCreateStatic>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	4a10      	ldr	r2, [pc, #64]	; (800bb70 <xTimerCreateTimerTask+0x8c>)
 800bb30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb32:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <xTimerCreateTimerTask+0x8c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	613b      	str	r3, [r7, #16]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	200015f4 	.word	0x200015f4
 800bb68:	08010560 	.word	0x08010560
 800bb6c:	0800bca9 	.word	0x0800bca9
 800bb70:	200015f8 	.word	0x200015f8

0800bb74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08a      	sub	sp, #40	; 0x28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	623b      	str	r3, [r7, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bba2:	4b1a      	ldr	r3, [pc, #104]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d02a      	beq.n	800bc00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b05      	cmp	r3, #5
 800bbba:	dc18      	bgt.n	800bbee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbbc:	f7ff fdb4 	bl	800b728 <xTaskGetSchedulerState>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d109      	bne.n	800bbda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbc6:	4b11      	ldr	r3, [pc, #68]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f107 0110 	add.w	r1, r7, #16
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	f7fe f909 	bl	8009de8 <xQueueGenericSend>
 800bbd6:	6278      	str	r0, [r7, #36]	; 0x24
 800bbd8:	e012      	b.n	800bc00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f107 0110 	add.w	r1, r7, #16
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f7fe f8ff 	bl	8009de8 <xQueueGenericSend>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24
 800bbec:	e008      	b.n	800bc00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbee:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <xTimerGenericCommand+0x98>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	f107 0110 	add.w	r1, r7, #16
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	f7fe f9f3 	bl	8009fe4 <xQueueGenericSendFromISR>
 800bbfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3728      	adds	r7, #40	; 0x28
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200015f4 	.word	0x200015f4

0800bc10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc1a:	4b22      	ldr	r3, [pc, #136]	; (800bca4 <prvProcessExpiredTimer+0x94>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fd ff0b 	bl	8009a44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d022      	beq.n	800bc82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	699a      	ldr	r2, [r3, #24]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	18d1      	adds	r1, r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	6978      	ldr	r0, [r7, #20]
 800bc4a:	f000 f8d1 	bl	800bdf0 <prvInsertTimerInActiveList>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01f      	beq.n	800bc94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc54:	2300      	movs	r3, #0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	6978      	ldr	r0, [r7, #20]
 800bc60:	f7ff ff88 	bl	800bb74 <xTimerGenericCommand>
 800bc64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d113      	bne.n	800bc94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	60fb      	str	r3, [r7, #12]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc88:	f023 0301 	bic.w	r3, r3, #1
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	6978      	ldr	r0, [r7, #20]
 800bc9a:	4798      	blx	r3
}
 800bc9c:	bf00      	nop
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200015ec 	.word	0x200015ec

0800bca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb0:	f107 0308 	add.w	r3, r7, #8
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f857 	bl	800bd68 <prvGetNextExpireTime>
 800bcba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f803 	bl	800bccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcc6:	f000 f8d5 	bl	800be74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcca:	e7f1      	b.n	800bcb0 <prvTimerTask+0x8>

0800bccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcd6:	f7ff f93b 	bl	800af50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f866 	bl	800bdb0 <prvSampleTimeNow>
 800bce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d130      	bne.n	800bd4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <prvProcessTimerOrBlockTask+0x3c>
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d806      	bhi.n	800bd08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcfa:	f7ff f937 	bl	800af6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff ff85 	bl	800bc10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd06:	e024      	b.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d008      	beq.n	800bd20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd0e:	4b13      	ldr	r3, [pc, #76]	; (800bd5c <prvProcessTimerOrBlockTask+0x90>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <prvProcessTimerOrBlockTask+0x50>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e000      	b.n	800bd1e <prvProcessTimerOrBlockTask+0x52>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd20:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <prvProcessTimerOrBlockTask+0x94>)
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	f7fe fe01 	bl	800a934 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd32:	f7ff f91b 	bl	800af6c <xTaskResumeAll>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <prvProcessTimerOrBlockTask+0x98>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
}
 800bd4c:	e001      	b.n	800bd52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd4e:	f7ff f90d 	bl	800af6c <xTaskResumeAll>
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	200015f0 	.word	0x200015f0
 800bd60:	200015f4 	.word	0x200015f4
 800bd64:	e000ed04 	.word	0xe000ed04

0800bd68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd70:	4b0e      	ldr	r3, [pc, #56]	; (800bdac <prvGetNextExpireTime+0x44>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <prvGetNextExpireTime+0x16>
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	e000      	b.n	800bd80 <prvGetNextExpireTime+0x18>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d105      	bne.n	800bd98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd8c:	4b07      	ldr	r3, [pc, #28]	; (800bdac <prvGetNextExpireTime+0x44>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	e001      	b.n	800bd9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	200015ec 	.word	0x200015ec

0800bdb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdb8:	f7ff f976 	bl	800b0a8 <xTaskGetTickCount>
 800bdbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <prvSampleTimeNow+0x3c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d205      	bcs.n	800bdd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdc8:	f000 f936 	bl	800c038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	e002      	b.n	800bdda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdda:	4a04      	ldr	r2, [pc, #16]	; (800bdec <prvSampleTimeNow+0x3c>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bde0:	68fb      	ldr	r3, [r7, #12]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200015fc 	.word	0x200015fc

0800bdf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d812      	bhi.n	800be3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	1ad2      	subs	r2, r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	429a      	cmp	r2, r3
 800be22:	d302      	bcc.n	800be2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be24:	2301      	movs	r3, #1
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	e01b      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <prvInsertTimerInActiveList+0x7c>)
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fd fdcc 	bl	80099d2 <vListInsert>
 800be3a:	e012      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d206      	bcs.n	800be52 <prvInsertTimerInActiveList+0x62>
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d302      	bcc.n	800be52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be4c:	2301      	movs	r3, #1
 800be4e:	617b      	str	r3, [r7, #20]
 800be50:	e007      	b.n	800be62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be52:	4b07      	ldr	r3, [pc, #28]	; (800be70 <prvInsertTimerInActiveList+0x80>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3304      	adds	r3, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f7fd fdb8 	bl	80099d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be62:	697b      	ldr	r3, [r7, #20]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200015f0 	.word	0x200015f0
 800be70:	200015ec 	.word	0x200015ec

0800be74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08e      	sub	sp, #56	; 0x38
 800be78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be7a:	e0ca      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	da18      	bge.n	800beb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be82:	1d3b      	adds	r3, r7, #4
 800be84:	3304      	adds	r3, #4
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	61fb      	str	r3, [r7, #28]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beaa:	6850      	ldr	r0, [r2, #4]
 800beac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beae:	6892      	ldr	r2, [r2, #8]
 800beb0:	4611      	mov	r1, r2
 800beb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f2c0 80ab 	blt.w	800c012 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	3304      	adds	r3, #4
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd fdb9 	bl	8009a44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bed2:	463b      	mov	r3, r7
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff ff6b 	bl	800bdb0 <prvSampleTimeNow>
 800beda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b09      	cmp	r3, #9
 800bee0:	f200 8096 	bhi.w	800c010 <prvProcessReceivedCommands+0x19c>
 800bee4:	a201      	add	r2, pc, #4	; (adr r2, 800beec <prvProcessReceivedCommands+0x78>)
 800bee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beea:	bf00      	nop
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf15 	.word	0x0800bf15
 800bef4:	0800bf15 	.word	0x0800bf15
 800bef8:	0800bf89 	.word	0x0800bf89
 800befc:	0800bf9d 	.word	0x0800bf9d
 800bf00:	0800bfe7 	.word	0x0800bfe7
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf15 	.word	0x0800bf15
 800bf0c:	0800bf89 	.word	0x0800bf89
 800bf10:	0800bf9d 	.word	0x0800bf9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1a:	f043 0301 	orr.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	18d1      	adds	r1, r2, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf34:	f7ff ff5c 	bl	800bdf0 <prvInsertTimerInActiveList>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d069      	beq.n	800c012 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d05e      	beq.n	800c012 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	441a      	add	r2, r3
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	2300      	movs	r3, #0
 800bf62:	2100      	movs	r1, #0
 800bf64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf66:	f7ff fe05 	bl	800bb74 <xTimerGenericCommand>
 800bf6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf6c:	6a3b      	ldr	r3, [r7, #32]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d14f      	bne.n	800c012 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	61bb      	str	r3, [r7, #24]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8e:	f023 0301 	bic.w	r3, r3, #1
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf9a:	e03a      	b.n	800c012 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa2:	f043 0301 	orr.w	r3, r3, #1
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	617b      	str	r3, [r7, #20]
}
 800bfce:	bf00      	nop
 800bfd0:	e7fe      	b.n	800bfd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	18d1      	adds	r1, r2, r3
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe0:	f7ff ff06 	bl	800bdf0 <prvInsertTimerInActiveList>
					break;
 800bfe4:	e015      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff6:	f000 fbdb 	bl	800c7b0 <vPortFree>
 800bffa:	e00a      	b.n	800c012 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c002:	f023 0301 	bic.w	r3, r3, #1
 800c006:	b2da      	uxtb	r2, r3
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c00e:	e000      	b.n	800c012 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <prvProcessReceivedCommands+0x1c0>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	1d39      	adds	r1, r7, #4
 800c018:	2200      	movs	r2, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe f87e 	bl	800a11c <xQueueReceive>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f47f af2a 	bne.w	800be7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	3730      	adds	r7, #48	; 0x30
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	200015f4 	.word	0x200015f4

0800c038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c03e:	e048      	b.n	800c0d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c040:	4b2d      	ldr	r3, [pc, #180]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04a:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3304      	adds	r3, #4
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fd fcf3 	bl	8009a44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d02e      	beq.n	800c0d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90e      	bls.n	800c0a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c092:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3304      	adds	r3, #4
 800c09a:	4619      	mov	r1, r3
 800c09c:	4610      	mov	r0, r2
 800c09e:	f7fd fc98 	bl	80099d2 <vListInsert>
 800c0a2:	e016      	b.n	800c0d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff fd60 	bl	800bb74 <xTimerGenericCommand>
 800c0b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	603b      	str	r3, [r7, #0]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0d2:	4b09      	ldr	r3, [pc, #36]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1b1      	bne.n	800c040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0e2:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <prvSwitchTimerLists+0xc0>)
 800c0e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0ea:	4a04      	ldr	r2, [pc, #16]	; (800c0fc <prvSwitchTimerLists+0xc4>)
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	6013      	str	r3, [r2, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	200015ec 	.word	0x200015ec
 800c0fc:	200015f0 	.word	0x200015f0

0800c100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c106:	f000 f965 	bl	800c3d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c10a:	4b15      	ldr	r3, [pc, #84]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d120      	bne.n	800c154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c112:	4814      	ldr	r0, [pc, #80]	; (800c164 <prvCheckForValidListAndQueue+0x64>)
 800c114:	f7fd fc0c 	bl	8009930 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c118:	4813      	ldr	r0, [pc, #76]	; (800c168 <prvCheckForValidListAndQueue+0x68>)
 800c11a:	f7fd fc09 	bl	8009930 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <prvCheckForValidListAndQueue+0x6c>)
 800c120:	4a10      	ldr	r2, [pc, #64]	; (800c164 <prvCheckForValidListAndQueue+0x64>)
 800c122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <prvCheckForValidListAndQueue+0x70>)
 800c126:	4a10      	ldr	r2, [pc, #64]	; (800c168 <prvCheckForValidListAndQueue+0x68>)
 800c128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c12a:	2300      	movs	r3, #0
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4b11      	ldr	r3, [pc, #68]	; (800c174 <prvCheckForValidListAndQueue+0x74>)
 800c130:	4a11      	ldr	r2, [pc, #68]	; (800c178 <prvCheckForValidListAndQueue+0x78>)
 800c132:	2110      	movs	r1, #16
 800c134:	200a      	movs	r0, #10
 800c136:	f7fd fd17 	bl	8009b68 <xQueueGenericCreateStatic>
 800c13a:	4603      	mov	r3, r0
 800c13c:	4a08      	ldr	r2, [pc, #32]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c13e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d005      	beq.n	800c154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <prvCheckForValidListAndQueue+0x60>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	490b      	ldr	r1, [pc, #44]	; (800c17c <prvCheckForValidListAndQueue+0x7c>)
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fb9c 	bl	800a88c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c154:	f000 f96e 	bl	800c434 <vPortExitCritical>
}
 800c158:	bf00      	nop
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	200015f4 	.word	0x200015f4
 800c164:	200015c4 	.word	0x200015c4
 800c168:	200015d8 	.word	0x200015d8
 800c16c:	200015ec 	.word	0x200015ec
 800c170:	200015f0 	.word	0x200015f0
 800c174:	200016a0 	.word	0x200016a0
 800c178:	20001600 	.word	0x20001600
 800c17c:	08010568 	.word	0x08010568

0800c180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3b04      	subs	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3b04      	subs	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f023 0201 	bic.w	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3b04      	subs	r3, #4
 800c1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <pxPortInitialiseStack+0x64>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3b14      	subs	r3, #20
 800c1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f06f 0202 	mvn.w	r2, #2
 800c1ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b20      	subs	r3, #32
 800c1d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	0800c1e9 	.word	0x0800c1e9

0800c1e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <prvTaskExitError+0x54>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fa:	d00a      	beq.n	800c212 <prvTaskExitError+0x2a>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <prvTaskExitError+0x28>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60bb      	str	r3, [r7, #8]
}
 800c224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c226:	bf00      	nop
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0fc      	beq.n	800c228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	20000030 	.word	0x20000030

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a46      	ldr	r2, [pc, #280]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b6:	4b3e      	ldr	r3, [pc, #248]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10a      	bne.n	800c2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d6:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	4b31      	ldr	r3, [pc, #196]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fe:	4b31      	ldr	r3, [pc, #196]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c300:	2207      	movs	r2, #7
 800c302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c304:	e009      	b.n	800c31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c306:	4b2f      	ldr	r3, [pc, #188]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a2d      	ldr	r2, [pc, #180]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b80      	cmp	r3, #128	; 0x80
 800c324:	d0ef      	beq.n	800c306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c326:	4b27      	ldr	r3, [pc, #156]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1c3 0307 	rsb	r3, r3, #7
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d00a      	beq.n	800c348 <xPortStartScheduler+0xb8>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c348:	4b1e      	ldr	r3, [pc, #120]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	4a1d      	ldr	r2, [pc, #116]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c352:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c35a:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	b2da      	uxtb	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a14      	ldr	r2, [pc, #80]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c37e:	f000 f8dd 	bl	800c53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <xPortStartScheduler+0x13c>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c388:	f000 f8fc 	bl	800c584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <xPortStartScheduler+0x140>)
 800c392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c398:	f7ff ff66 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c39c:	f7fe ff4e 	bl	800b23c <vTaskSwitchContext>
	prvTaskExitError();
 800c3a0:	f7ff ff22 	bl	800c1e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	e000ed00 	.word	0xe000ed00
 800c3b4:	410fc271 	.word	0x410fc271
 800c3b8:	410fc270 	.word	0x410fc270
 800c3bc:	e000e400 	.word	0xe000e400
 800c3c0:	200016f0 	.word	0x200016f0
 800c3c4:	200016f4 	.word	0x200016f4
 800c3c8:	e000ed20 	.word	0xe000ed20
 800c3cc:	20000030 	.word	0x20000030
 800c3d0:	e000ef34 	.word	0xe000ef34

0800c3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	607b      	str	r3, [r7, #4]
}
 800c3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <vPortEnterCritical+0x58>)
 800c3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <vPortEnterCritical+0x58>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d10f      	bne.n	800c420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortEnterCritical+0x5c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00a      	beq.n	800c420 <vPortEnterCritical+0x4c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	603b      	str	r3, [r7, #0]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <vPortEnterCritical+0x4a>
	}
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	20000030 	.word	0x20000030
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c43a:	4b12      	ldr	r3, [pc, #72]	; (800c484 <vPortExitCritical+0x50>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <vPortExitCritical+0x24>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <vPortExitCritical+0x50>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a09      	ldr	r2, [pc, #36]	; (800c484 <vPortExitCritical+0x50>)
 800c460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <vPortExitCritical+0x50>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <vPortExitCritical+0x42>
 800c46a:	2300      	movs	r3, #0
 800c46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	20000030 	.word	0x20000030
	...

0800c490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c490:	f3ef 8009 	mrs	r0, PSP
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <pxCurrentTCBConst>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	f01e 0f10 	tst.w	lr, #16
 800c4a0:	bf08      	it	eq
 800c4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	6010      	str	r0, [r2, #0]
 800c4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4b4:	f380 8811 	msr	BASEPRI, r0
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f7fe febc 	bl	800b23c <vTaskSwitchContext>
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f380 8811 	msr	BASEPRI, r0
 800c4cc:	bc09      	pop	{r0, r3}
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	6808      	ldr	r0, [r1, #0]
 800c4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d6:	f01e 0f10 	tst.w	lr, #16
 800c4da:	bf08      	it	eq
 800c4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4e0:	f380 8809 	msr	PSP, r0
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w

0800c4f0 <pxCurrentTCBConst>:
 800c4f0:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop

0800c4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c512:	f7fe fdd9 	bl	800b0c8 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <xPortSysTickHandler+0x40>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f383 8811 	msr	BASEPRI, r3
}
 800c52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c540:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c542:	2200      	movs	r2, #0
 800c544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <vPortSetupTimerInterrupt+0x38>)
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <vPortSetupTimerInterrupt+0x3c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <vPortSetupTimerInterrupt+0x40>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	099b      	lsrs	r3, r3, #6
 800c558:	4a09      	ldr	r2, [pc, #36]	; (800c580 <vPortSetupTimerInterrupt+0x44>)
 800c55a:	3b01      	subs	r3, #1
 800c55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <vPortSetupTimerInterrupt+0x34>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010
 800c574:	e000e018 	.word	0xe000e018
 800c578:	20000024 	.word	0x20000024
 800c57c:	10624dd3 	.word	0x10624dd3
 800c580:	e000e014 	.word	0xe000e014

0800c584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c594 <vPortEnableVFP+0x10>
 800c588:	6801      	ldr	r1, [r0, #0]
 800c58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c58e:	6001      	str	r1, [r0, #0]
 800c590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c592:	bf00      	nop
 800c594:	e000ed88 	.word	0xe000ed88

0800c598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c59e:	f3ef 8305 	mrs	r3, IPSR
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b0f      	cmp	r3, #15
 800c5a8:	d914      	bls.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5aa:	4a17      	ldr	r2, [pc, #92]	; (800c608 <vPortValidateInterruptPriority+0x70>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5b4:	4b15      	ldr	r3, [pc, #84]	; (800c60c <vPortValidateInterruptPriority+0x74>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	7afa      	ldrb	r2, [r7, #11]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d20a      	bcs.n	800c5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <vPortValidateInterruptPriority+0x78>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <vPortValidateInterruptPriority+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d90a      	bls.n	800c5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	603b      	str	r3, [r7, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <vPortValidateInterruptPriority+0x60>
	}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	e000e3f0 	.word	0xe000e3f0
 800c60c:	200016f0 	.word	0x200016f0
 800c610:	e000ed0c 	.word	0xe000ed0c
 800c614:	200016f4 	.word	0x200016f4

0800c618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c624:	f7fe fc94 	bl	800af50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c628:	4b5b      	ldr	r3, [pc, #364]	; (800c798 <pvPortMalloc+0x180>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c630:	f000 f920 	bl	800c874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c634:	4b59      	ldr	r3, [pc, #356]	; (800c79c <pvPortMalloc+0x184>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4013      	ands	r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f040 8093 	bne.w	800c768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01d      	beq.n	800c684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c648:	2208      	movs	r2, #8
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d014      	beq.n	800c684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <pvPortMalloc+0x6c>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	617b      	str	r3, [r7, #20]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d06e      	beq.n	800c768 <pvPortMalloc+0x150>
 800c68a:	4b45      	ldr	r3, [pc, #276]	; (800c7a0 <pvPortMalloc+0x188>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d869      	bhi.n	800c768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c694:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c698:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <pvPortMalloc+0x18c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c69e:	e004      	b.n	800c6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d903      	bls.n	800c6bc <pvPortMalloc+0xa4>
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f1      	bne.n	800c6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6bc:	4b36      	ldr	r3, [pc, #216]	; (800c798 <pvPortMalloc+0x180>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d050      	beq.n	800c768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d91f      	bls.n	800c728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <pvPortMalloc+0xf8>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	613b      	str	r3, [r7, #16]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c722:	69b8      	ldr	r0, [r7, #24]
 800c724:	f000 f908 	bl	800c938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c728:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <pvPortMalloc+0x188>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <pvPortMalloc+0x188>)
 800c734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <pvPortMalloc+0x188>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <pvPortMalloc+0x190>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d203      	bcs.n	800c74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c742:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <pvPortMalloc+0x188>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <pvPortMalloc+0x190>)
 800c748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	4b13      	ldr	r3, [pc, #76]	; (800c79c <pvPortMalloc+0x184>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	431a      	orrs	r2, r3
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c75e:	4b13      	ldr	r3, [pc, #76]	; (800c7ac <pvPortMalloc+0x194>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <pvPortMalloc+0x194>)
 800c766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c768:	f7fe fc00 	bl	800af6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <pvPortMalloc+0x174>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <pvPortMalloc+0x172>
	return pvReturn;
 800c78c:	69fb      	ldr	r3, [r7, #28]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3728      	adds	r7, #40	; 0x28
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20002a88 	.word	0x20002a88
 800c79c:	20002a9c 	.word	0x20002a9c
 800c7a0:	20002a8c 	.word	0x20002a8c
 800c7a4:	20002a80 	.word	0x20002a80
 800c7a8:	20002a90 	.word	0x20002a90
 800c7ac:	20002a94 	.word	0x20002a94

0800c7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d04d      	beq.n	800c85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b24      	ldr	r3, [pc, #144]	; (800c868 <vPortFree+0xb8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <vPortFree+0x44>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60fb      	str	r3, [r7, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <vPortFree+0x62>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60bb      	str	r3, [r7, #8]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <vPortFree+0xb8>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01e      	beq.n	800c85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11a      	bne.n	800c85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0e      	ldr	r3, [pc, #56]	; (800c868 <vPortFree+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	43db      	mvns	r3, r3
 800c832:	401a      	ands	r2, r3
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c838:	f7fe fb8a 	bl	800af50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <vPortFree+0xbc>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4413      	add	r3, r2
 800c846:	4a09      	ldr	r2, [pc, #36]	; (800c86c <vPortFree+0xbc>)
 800c848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f000 f874 	bl	800c938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <vPortFree+0xc0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a06      	ldr	r2, [pc, #24]	; (800c870 <vPortFree+0xc0>)
 800c858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c85a:	f7fe fb87 	bl	800af6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c85e:	bf00      	nop
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20002a9c 	.word	0x20002a9c
 800c86c:	20002a8c 	.word	0x20002a8c
 800c870:	20002a98 	.word	0x20002a98

0800c874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c87a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c87e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c880:	4b27      	ldr	r3, [pc, #156]	; (800c920 <prvHeapInit+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00c      	beq.n	800c8a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	4a1f      	ldr	r2, [pc, #124]	; (800c920 <prvHeapInit+0xac>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <prvHeapInit+0xb0>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <prvHeapInit+0xb0>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8c0:	2208      	movs	r2, #8
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <prvHeapInit+0xb4>)
 800c8d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <prvHeapInit+0xb4>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8de:	4b12      	ldr	r3, [pc, #72]	; (800c928 <prvHeapInit+0xb4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvHeapInit+0xb4>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <prvHeapInit+0xb8>)
 800c902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <prvHeapInit+0xbc>)
 800c90a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c90c:	4b09      	ldr	r3, [pc, #36]	; (800c934 <prvHeapInit+0xc0>)
 800c90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c912:	601a      	str	r2, [r3, #0]
}
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	200016f8 	.word	0x200016f8
 800c924:	20002a80 	.word	0x20002a80
 800c928:	20002a88 	.word	0x20002a88
 800c92c:	20002a90 	.word	0x20002a90
 800c930:	20002a8c 	.word	0x20002a8c
 800c934:	20002a9c 	.word	0x20002a9c

0800c938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c940:	4b28      	ldr	r3, [pc, #160]	; (800c9e4 <prvInsertBlockIntoFreeList+0xac>)
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e002      	b.n	800c94c <prvInsertBlockIntoFreeList+0x14>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d8f7      	bhi.n	800c946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	d108      	bne.n	800c97a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	441a      	add	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d118      	bne.n	800c9c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00d      	beq.n	800c9b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	441a      	add	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e008      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e003      	b.n	800c9c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d002      	beq.n	800c9d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d6:	bf00      	nop
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	20002a80 	.word	0x20002a80
 800c9e8:	20002a88 	.word	0x20002a88

0800c9ec <malloc>:
 800c9ec:	4b02      	ldr	r3, [pc, #8]	; (800c9f8 <malloc+0xc>)
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	f000 b82b 	b.w	800ca4c <_malloc_r>
 800c9f6:	bf00      	nop
 800c9f8:	200001f8 	.word	0x200001f8

0800c9fc <free>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <free+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f001 b969 	b.w	800dcd8 <_free_r>
 800ca06:	bf00      	nop
 800ca08:	200001f8 	.word	0x200001f8

0800ca0c <sbrk_aligned>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	4e0e      	ldr	r6, [pc, #56]	; (800ca48 <sbrk_aligned+0x3c>)
 800ca10:	460c      	mov	r4, r1
 800ca12:	6831      	ldr	r1, [r6, #0]
 800ca14:	4605      	mov	r5, r0
 800ca16:	b911      	cbnz	r1, 800ca1e <sbrk_aligned+0x12>
 800ca18:	f001 f8ee 	bl	800dbf8 <_sbrk_r>
 800ca1c:	6030      	str	r0, [r6, #0]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f001 f8e9 	bl	800dbf8 <_sbrk_r>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d00a      	beq.n	800ca40 <sbrk_aligned+0x34>
 800ca2a:	1cc4      	adds	r4, r0, #3
 800ca2c:	f024 0403 	bic.w	r4, r4, #3
 800ca30:	42a0      	cmp	r0, r4
 800ca32:	d007      	beq.n	800ca44 <sbrk_aligned+0x38>
 800ca34:	1a21      	subs	r1, r4, r0
 800ca36:	4628      	mov	r0, r5
 800ca38:	f001 f8de 	bl	800dbf8 <_sbrk_r>
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d101      	bne.n	800ca44 <sbrk_aligned+0x38>
 800ca40:	f04f 34ff 	mov.w	r4, #4294967295
 800ca44:	4620      	mov	r0, r4
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	20002aa4 	.word	0x20002aa4

0800ca4c <_malloc_r>:
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	1ccd      	adds	r5, r1, #3
 800ca52:	f025 0503 	bic.w	r5, r5, #3
 800ca56:	3508      	adds	r5, #8
 800ca58:	2d0c      	cmp	r5, #12
 800ca5a:	bf38      	it	cc
 800ca5c:	250c      	movcc	r5, #12
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	4607      	mov	r7, r0
 800ca62:	db01      	blt.n	800ca68 <_malloc_r+0x1c>
 800ca64:	42a9      	cmp	r1, r5
 800ca66:	d905      	bls.n	800ca74 <_malloc_r+0x28>
 800ca68:	230c      	movs	r3, #12
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	2600      	movs	r6, #0
 800ca6e:	4630      	mov	r0, r6
 800ca70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb48 <_malloc_r+0xfc>
 800ca78:	f000 f868 	bl	800cb4c <__malloc_lock>
 800ca7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca80:	461c      	mov	r4, r3
 800ca82:	bb5c      	cbnz	r4, 800cadc <_malloc_r+0x90>
 800ca84:	4629      	mov	r1, r5
 800ca86:	4638      	mov	r0, r7
 800ca88:	f7ff ffc0 	bl	800ca0c <sbrk_aligned>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	4604      	mov	r4, r0
 800ca90:	d155      	bne.n	800cb3e <_malloc_r+0xf2>
 800ca92:	f8d8 4000 	ldr.w	r4, [r8]
 800ca96:	4626      	mov	r6, r4
 800ca98:	2e00      	cmp	r6, #0
 800ca9a:	d145      	bne.n	800cb28 <_malloc_r+0xdc>
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	d048      	beq.n	800cb32 <_malloc_r+0xe6>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	4631      	mov	r1, r6
 800caa4:	4638      	mov	r0, r7
 800caa6:	eb04 0903 	add.w	r9, r4, r3
 800caaa:	f001 f8a5 	bl	800dbf8 <_sbrk_r>
 800caae:	4581      	cmp	r9, r0
 800cab0:	d13f      	bne.n	800cb32 <_malloc_r+0xe6>
 800cab2:	6821      	ldr	r1, [r4, #0]
 800cab4:	1a6d      	subs	r5, r5, r1
 800cab6:	4629      	mov	r1, r5
 800cab8:	4638      	mov	r0, r7
 800caba:	f7ff ffa7 	bl	800ca0c <sbrk_aligned>
 800cabe:	3001      	adds	r0, #1
 800cac0:	d037      	beq.n	800cb32 <_malloc_r+0xe6>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	442b      	add	r3, r5
 800cac6:	6023      	str	r3, [r4, #0]
 800cac8:	f8d8 3000 	ldr.w	r3, [r8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d038      	beq.n	800cb42 <_malloc_r+0xf6>
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	42a2      	cmp	r2, r4
 800cad4:	d12b      	bne.n	800cb2e <_malloc_r+0xe2>
 800cad6:	2200      	movs	r2, #0
 800cad8:	605a      	str	r2, [r3, #4]
 800cada:	e00f      	b.n	800cafc <_malloc_r+0xb0>
 800cadc:	6822      	ldr	r2, [r4, #0]
 800cade:	1b52      	subs	r2, r2, r5
 800cae0:	d41f      	bmi.n	800cb22 <_malloc_r+0xd6>
 800cae2:	2a0b      	cmp	r2, #11
 800cae4:	d917      	bls.n	800cb16 <_malloc_r+0xca>
 800cae6:	1961      	adds	r1, r4, r5
 800cae8:	42a3      	cmp	r3, r4
 800caea:	6025      	str	r5, [r4, #0]
 800caec:	bf18      	it	ne
 800caee:	6059      	strne	r1, [r3, #4]
 800caf0:	6863      	ldr	r3, [r4, #4]
 800caf2:	bf08      	it	eq
 800caf4:	f8c8 1000 	streq.w	r1, [r8]
 800caf8:	5162      	str	r2, [r4, r5]
 800cafa:	604b      	str	r3, [r1, #4]
 800cafc:	4638      	mov	r0, r7
 800cafe:	f104 060b 	add.w	r6, r4, #11
 800cb02:	f000 f829 	bl	800cb58 <__malloc_unlock>
 800cb06:	f026 0607 	bic.w	r6, r6, #7
 800cb0a:	1d23      	adds	r3, r4, #4
 800cb0c:	1af2      	subs	r2, r6, r3
 800cb0e:	d0ae      	beq.n	800ca6e <_malloc_r+0x22>
 800cb10:	1b9b      	subs	r3, r3, r6
 800cb12:	50a3      	str	r3, [r4, r2]
 800cb14:	e7ab      	b.n	800ca6e <_malloc_r+0x22>
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	6862      	ldr	r2, [r4, #4]
 800cb1a:	d1dd      	bne.n	800cad8 <_malloc_r+0x8c>
 800cb1c:	f8c8 2000 	str.w	r2, [r8]
 800cb20:	e7ec      	b.n	800cafc <_malloc_r+0xb0>
 800cb22:	4623      	mov	r3, r4
 800cb24:	6864      	ldr	r4, [r4, #4]
 800cb26:	e7ac      	b.n	800ca82 <_malloc_r+0x36>
 800cb28:	4634      	mov	r4, r6
 800cb2a:	6876      	ldr	r6, [r6, #4]
 800cb2c:	e7b4      	b.n	800ca98 <_malloc_r+0x4c>
 800cb2e:	4613      	mov	r3, r2
 800cb30:	e7cc      	b.n	800cacc <_malloc_r+0x80>
 800cb32:	230c      	movs	r3, #12
 800cb34:	603b      	str	r3, [r7, #0]
 800cb36:	4638      	mov	r0, r7
 800cb38:	f000 f80e 	bl	800cb58 <__malloc_unlock>
 800cb3c:	e797      	b.n	800ca6e <_malloc_r+0x22>
 800cb3e:	6025      	str	r5, [r4, #0]
 800cb40:	e7dc      	b.n	800cafc <_malloc_r+0xb0>
 800cb42:	605b      	str	r3, [r3, #4]
 800cb44:	deff      	udf	#255	; 0xff
 800cb46:	bf00      	nop
 800cb48:	20002aa0 	.word	0x20002aa0

0800cb4c <__malloc_lock>:
 800cb4c:	4801      	ldr	r0, [pc, #4]	; (800cb54 <__malloc_lock+0x8>)
 800cb4e:	f001 b8a0 	b.w	800dc92 <__retarget_lock_acquire_recursive>
 800cb52:	bf00      	nop
 800cb54:	20002be8 	.word	0x20002be8

0800cb58 <__malloc_unlock>:
 800cb58:	4801      	ldr	r0, [pc, #4]	; (800cb60 <__malloc_unlock+0x8>)
 800cb5a:	f001 b89b 	b.w	800dc94 <__retarget_lock_release_recursive>
 800cb5e:	bf00      	nop
 800cb60:	20002be8 	.word	0x20002be8

0800cb64 <realloc>:
 800cb64:	4b02      	ldr	r3, [pc, #8]	; (800cb70 <realloc+0xc>)
 800cb66:	460a      	mov	r2, r1
 800cb68:	4601      	mov	r1, r0
 800cb6a:	6818      	ldr	r0, [r3, #0]
 800cb6c:	f000 b802 	b.w	800cb74 <_realloc_r>
 800cb70:	200001f8 	.word	0x200001f8

0800cb74 <_realloc_r>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	4680      	mov	r8, r0
 800cb7a:	4614      	mov	r4, r2
 800cb7c:	460e      	mov	r6, r1
 800cb7e:	b921      	cbnz	r1, 800cb8a <_realloc_r+0x16>
 800cb80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb84:	4611      	mov	r1, r2
 800cb86:	f7ff bf61 	b.w	800ca4c <_malloc_r>
 800cb8a:	b92a      	cbnz	r2, 800cb98 <_realloc_r+0x24>
 800cb8c:	f001 f8a4 	bl	800dcd8 <_free_r>
 800cb90:	4625      	mov	r5, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	f002 f901 	bl	800ed9e <_malloc_usable_size_r>
 800cb9c:	4284      	cmp	r4, r0
 800cb9e:	4607      	mov	r7, r0
 800cba0:	d802      	bhi.n	800cba8 <_realloc_r+0x34>
 800cba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cba6:	d812      	bhi.n	800cbce <_realloc_r+0x5a>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f7ff ff4e 	bl	800ca4c <_malloc_r>
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0ed      	beq.n	800cb92 <_realloc_r+0x1e>
 800cbb6:	42bc      	cmp	r4, r7
 800cbb8:	4622      	mov	r2, r4
 800cbba:	4631      	mov	r1, r6
 800cbbc:	bf28      	it	cs
 800cbbe:	463a      	movcs	r2, r7
 800cbc0:	f001 f871 	bl	800dca6 <memcpy>
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	f001 f886 	bl	800dcd8 <_free_r>
 800cbcc:	e7e1      	b.n	800cb92 <_realloc_r+0x1e>
 800cbce:	4635      	mov	r5, r6
 800cbd0:	e7df      	b.n	800cb92 <_realloc_r+0x1e>

0800cbd2 <sulp>:
 800cbd2:	b570      	push	{r4, r5, r6, lr}
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	ec45 4b10 	vmov	d0, r4, r5
 800cbdc:	4616      	mov	r6, r2
 800cbde:	f001 ff9d 	bl	800eb1c <__ulp>
 800cbe2:	ec51 0b10 	vmov	r0, r1, d0
 800cbe6:	b17e      	cbz	r6, 800cc08 <sulp+0x36>
 800cbe8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dd09      	ble.n	800cc08 <sulp+0x36>
 800cbf4:	051b      	lsls	r3, r3, #20
 800cbf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cbfa:	2400      	movs	r4, #0
 800cbfc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc00:	4622      	mov	r2, r4
 800cc02:	462b      	mov	r3, r5
 800cc04:	f7f3 fd10 	bl	8000628 <__aeabi_dmul>
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
 800cc0a:	0000      	movs	r0, r0
 800cc0c:	0000      	movs	r0, r0
	...

0800cc10 <_strtod_l>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	ed2d 8b02 	vpush	{d8}
 800cc18:	b09b      	sub	sp, #108	; 0x6c
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc1e:	2200      	movs	r2, #0
 800cc20:	9216      	str	r2, [sp, #88]	; 0x58
 800cc22:	460d      	mov	r5, r1
 800cc24:	f04f 0800 	mov.w	r8, #0
 800cc28:	f04f 0900 	mov.w	r9, #0
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	9215      	str	r2, [sp, #84]	; 0x54
 800cc30:	7811      	ldrb	r1, [r2, #0]
 800cc32:	292b      	cmp	r1, #43	; 0x2b
 800cc34:	d04c      	beq.n	800ccd0 <_strtod_l+0xc0>
 800cc36:	d83a      	bhi.n	800ccae <_strtod_l+0x9e>
 800cc38:	290d      	cmp	r1, #13
 800cc3a:	d834      	bhi.n	800cca6 <_strtod_l+0x96>
 800cc3c:	2908      	cmp	r1, #8
 800cc3e:	d834      	bhi.n	800ccaa <_strtod_l+0x9a>
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d03d      	beq.n	800ccc0 <_strtod_l+0xb0>
 800cc44:	2200      	movs	r2, #0
 800cc46:	920a      	str	r2, [sp, #40]	; 0x28
 800cc48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cc4a:	7832      	ldrb	r2, [r6, #0]
 800cc4c:	2a30      	cmp	r2, #48	; 0x30
 800cc4e:	f040 80b4 	bne.w	800cdba <_strtod_l+0x1aa>
 800cc52:	7872      	ldrb	r2, [r6, #1]
 800cc54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cc58:	2a58      	cmp	r2, #88	; 0x58
 800cc5a:	d170      	bne.n	800cd3e <_strtod_l+0x12e>
 800cc5c:	9302      	str	r3, [sp, #8]
 800cc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	ab16      	add	r3, sp, #88	; 0x58
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	4a8e      	ldr	r2, [pc, #568]	; (800cea0 <_strtod_l+0x290>)
 800cc68:	ab17      	add	r3, sp, #92	; 0x5c
 800cc6a:	a915      	add	r1, sp, #84	; 0x54
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f001 f8e7 	bl	800de40 <__gethex>
 800cc72:	f010 070f 	ands.w	r7, r0, #15
 800cc76:	4605      	mov	r5, r0
 800cc78:	d005      	beq.n	800cc86 <_strtod_l+0x76>
 800cc7a:	2f06      	cmp	r7, #6
 800cc7c:	d12a      	bne.n	800ccd4 <_strtod_l+0xc4>
 800cc7e:	3601      	adds	r6, #1
 800cc80:	2300      	movs	r3, #0
 800cc82:	9615      	str	r6, [sp, #84]	; 0x54
 800cc84:	930a      	str	r3, [sp, #40]	; 0x28
 800cc86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f040 857f 	bne.w	800d78c <_strtod_l+0xb7c>
 800cc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc90:	b1db      	cbz	r3, 800ccca <_strtod_l+0xba>
 800cc92:	4642      	mov	r2, r8
 800cc94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cc98:	ec43 2b10 	vmov	d0, r2, r3
 800cc9c:	b01b      	add	sp, #108	; 0x6c
 800cc9e:	ecbd 8b02 	vpop	{d8}
 800cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca6:	2920      	cmp	r1, #32
 800cca8:	d1cc      	bne.n	800cc44 <_strtod_l+0x34>
 800ccaa:	3201      	adds	r2, #1
 800ccac:	e7bf      	b.n	800cc2e <_strtod_l+0x1e>
 800ccae:	292d      	cmp	r1, #45	; 0x2d
 800ccb0:	d1c8      	bne.n	800cc44 <_strtod_l+0x34>
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	910a      	str	r1, [sp, #40]	; 0x28
 800ccb6:	1c51      	adds	r1, r2, #1
 800ccb8:	9115      	str	r1, [sp, #84]	; 0x54
 800ccba:	7852      	ldrb	r2, [r2, #1]
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	d1c3      	bne.n	800cc48 <_strtod_l+0x38>
 800ccc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccc2:	9515      	str	r5, [sp, #84]	; 0x54
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f040 855f 	bne.w	800d788 <_strtod_l+0xb78>
 800ccca:	4642      	mov	r2, r8
 800cccc:	464b      	mov	r3, r9
 800ccce:	e7e3      	b.n	800cc98 <_strtod_l+0x88>
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	e7ef      	b.n	800ccb4 <_strtod_l+0xa4>
 800ccd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ccd6:	b13a      	cbz	r2, 800cce8 <_strtod_l+0xd8>
 800ccd8:	2135      	movs	r1, #53	; 0x35
 800ccda:	a818      	add	r0, sp, #96	; 0x60
 800ccdc:	f002 f81b 	bl	800ed16 <__copybits>
 800cce0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 fbee 	bl	800e4c4 <_Bfree>
 800cce8:	3f01      	subs	r7, #1
 800ccea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccec:	2f04      	cmp	r7, #4
 800ccee:	d806      	bhi.n	800ccfe <_strtod_l+0xee>
 800ccf0:	e8df f007 	tbb	[pc, r7]
 800ccf4:	201d0314 	.word	0x201d0314
 800ccf8:	14          	.byte	0x14
 800ccf9:	00          	.byte	0x00
 800ccfa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ccfe:	05e9      	lsls	r1, r5, #23
 800cd00:	bf48      	it	mi
 800cd02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cd06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd0a:	0d1b      	lsrs	r3, r3, #20
 800cd0c:	051b      	lsls	r3, r3, #20
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1b9      	bne.n	800cc86 <_strtod_l+0x76>
 800cd12:	f000 ff93 	bl	800dc3c <__errno>
 800cd16:	2322      	movs	r3, #34	; 0x22
 800cd18:	6003      	str	r3, [r0, #0]
 800cd1a:	e7b4      	b.n	800cc86 <_strtod_l+0x76>
 800cd1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cd20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cd2c:	e7e7      	b.n	800ccfe <_strtod_l+0xee>
 800cd2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cea8 <_strtod_l+0x298>
 800cd32:	e7e4      	b.n	800ccfe <_strtod_l+0xee>
 800cd34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cd38:	f04f 38ff 	mov.w	r8, #4294967295
 800cd3c:	e7df      	b.n	800ccfe <_strtod_l+0xee>
 800cd3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd40:	1c5a      	adds	r2, r3, #1
 800cd42:	9215      	str	r2, [sp, #84]	; 0x54
 800cd44:	785b      	ldrb	r3, [r3, #1]
 800cd46:	2b30      	cmp	r3, #48	; 0x30
 800cd48:	d0f9      	beq.n	800cd3e <_strtod_l+0x12e>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d09b      	beq.n	800cc86 <_strtod_l+0x76>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	f04f 0a00 	mov.w	sl, #0
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd58:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd5e:	46d3      	mov	fp, sl
 800cd60:	220a      	movs	r2, #10
 800cd62:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cd64:	7806      	ldrb	r6, [r0, #0]
 800cd66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cd6a:	b2d9      	uxtb	r1, r3
 800cd6c:	2909      	cmp	r1, #9
 800cd6e:	d926      	bls.n	800cdbe <_strtod_l+0x1ae>
 800cd70:	494c      	ldr	r1, [pc, #304]	; (800cea4 <_strtod_l+0x294>)
 800cd72:	2201      	movs	r2, #1
 800cd74:	f000 fea3 	bl	800dabe <strncmp>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d030      	beq.n	800cdde <_strtod_l+0x1ce>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	4632      	mov	r2, r6
 800cd80:	9005      	str	r0, [sp, #20]
 800cd82:	465e      	mov	r6, fp
 800cd84:	4603      	mov	r3, r0
 800cd86:	2a65      	cmp	r2, #101	; 0x65
 800cd88:	d001      	beq.n	800cd8e <_strtod_l+0x17e>
 800cd8a:	2a45      	cmp	r2, #69	; 0x45
 800cd8c:	d113      	bne.n	800cdb6 <_strtod_l+0x1a6>
 800cd8e:	b91e      	cbnz	r6, 800cd98 <_strtod_l+0x188>
 800cd90:	9a04      	ldr	r2, [sp, #16]
 800cd92:	4302      	orrs	r2, r0
 800cd94:	d094      	beq.n	800ccc0 <_strtod_l+0xb0>
 800cd96:	2600      	movs	r6, #0
 800cd98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cd9a:	1c6a      	adds	r2, r5, #1
 800cd9c:	9215      	str	r2, [sp, #84]	; 0x54
 800cd9e:	786a      	ldrb	r2, [r5, #1]
 800cda0:	2a2b      	cmp	r2, #43	; 0x2b
 800cda2:	d074      	beq.n	800ce8e <_strtod_l+0x27e>
 800cda4:	2a2d      	cmp	r2, #45	; 0x2d
 800cda6:	d078      	beq.n	800ce9a <_strtod_l+0x28a>
 800cda8:	f04f 0c00 	mov.w	ip, #0
 800cdac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cdb0:	2909      	cmp	r1, #9
 800cdb2:	d97f      	bls.n	800ceb4 <_strtod_l+0x2a4>
 800cdb4:	9515      	str	r5, [sp, #84]	; 0x54
 800cdb6:	2700      	movs	r7, #0
 800cdb8:	e09e      	b.n	800cef8 <_strtod_l+0x2e8>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e7c8      	b.n	800cd50 <_strtod_l+0x140>
 800cdbe:	f1bb 0f08 	cmp.w	fp, #8
 800cdc2:	bfd8      	it	le
 800cdc4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cdc6:	f100 0001 	add.w	r0, r0, #1
 800cdca:	bfda      	itte	le
 800cdcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cdd0:	9309      	strle	r3, [sp, #36]	; 0x24
 800cdd2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cdd6:	f10b 0b01 	add.w	fp, fp, #1
 800cdda:	9015      	str	r0, [sp, #84]	; 0x54
 800cddc:	e7c1      	b.n	800cd62 <_strtod_l+0x152>
 800cdde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	9215      	str	r2, [sp, #84]	; 0x54
 800cde4:	785a      	ldrb	r2, [r3, #1]
 800cde6:	f1bb 0f00 	cmp.w	fp, #0
 800cdea:	d037      	beq.n	800ce5c <_strtod_l+0x24c>
 800cdec:	9005      	str	r0, [sp, #20]
 800cdee:	465e      	mov	r6, fp
 800cdf0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	d912      	bls.n	800ce1e <_strtod_l+0x20e>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e7c4      	b.n	800cd86 <_strtod_l+0x176>
 800cdfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	9215      	str	r2, [sp, #84]	; 0x54
 800ce02:	785a      	ldrb	r2, [r3, #1]
 800ce04:	3001      	adds	r0, #1
 800ce06:	2a30      	cmp	r2, #48	; 0x30
 800ce08:	d0f8      	beq.n	800cdfc <_strtod_l+0x1ec>
 800ce0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce0e:	2b08      	cmp	r3, #8
 800ce10:	f200 84c1 	bhi.w	800d796 <_strtod_l+0xb86>
 800ce14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce16:	9005      	str	r0, [sp, #20]
 800ce18:	2000      	movs	r0, #0
 800ce1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	3a30      	subs	r2, #48	; 0x30
 800ce20:	f100 0301 	add.w	r3, r0, #1
 800ce24:	d014      	beq.n	800ce50 <_strtod_l+0x240>
 800ce26:	9905      	ldr	r1, [sp, #20]
 800ce28:	4419      	add	r1, r3
 800ce2a:	9105      	str	r1, [sp, #20]
 800ce2c:	4633      	mov	r3, r6
 800ce2e:	eb00 0c06 	add.w	ip, r0, r6
 800ce32:	210a      	movs	r1, #10
 800ce34:	4563      	cmp	r3, ip
 800ce36:	d113      	bne.n	800ce60 <_strtod_l+0x250>
 800ce38:	1833      	adds	r3, r6, r0
 800ce3a:	2b08      	cmp	r3, #8
 800ce3c:	f106 0601 	add.w	r6, r6, #1
 800ce40:	4406      	add	r6, r0
 800ce42:	dc1a      	bgt.n	800ce7a <_strtod_l+0x26a>
 800ce44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce46:	230a      	movs	r3, #10
 800ce48:	fb03 2301 	mla	r3, r3, r1, r2
 800ce4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce52:	1c51      	adds	r1, r2, #1
 800ce54:	9115      	str	r1, [sp, #84]	; 0x54
 800ce56:	7852      	ldrb	r2, [r2, #1]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	e7c9      	b.n	800cdf0 <_strtod_l+0x1e0>
 800ce5c:	4658      	mov	r0, fp
 800ce5e:	e7d2      	b.n	800ce06 <_strtod_l+0x1f6>
 800ce60:	2b08      	cmp	r3, #8
 800ce62:	f103 0301 	add.w	r3, r3, #1
 800ce66:	dc03      	bgt.n	800ce70 <_strtod_l+0x260>
 800ce68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce6a:	434f      	muls	r7, r1
 800ce6c:	9709      	str	r7, [sp, #36]	; 0x24
 800ce6e:	e7e1      	b.n	800ce34 <_strtod_l+0x224>
 800ce70:	2b10      	cmp	r3, #16
 800ce72:	bfd8      	it	le
 800ce74:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ce78:	e7dc      	b.n	800ce34 <_strtod_l+0x224>
 800ce7a:	2e10      	cmp	r6, #16
 800ce7c:	bfdc      	itt	le
 800ce7e:	230a      	movle	r3, #10
 800ce80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ce84:	e7e3      	b.n	800ce4e <_strtod_l+0x23e>
 800ce86:	2300      	movs	r3, #0
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e780      	b.n	800cd90 <_strtod_l+0x180>
 800ce8e:	f04f 0c00 	mov.w	ip, #0
 800ce92:	1caa      	adds	r2, r5, #2
 800ce94:	9215      	str	r2, [sp, #84]	; 0x54
 800ce96:	78aa      	ldrb	r2, [r5, #2]
 800ce98:	e788      	b.n	800cdac <_strtod_l+0x19c>
 800ce9a:	f04f 0c01 	mov.w	ip, #1
 800ce9e:	e7f8      	b.n	800ce92 <_strtod_l+0x282>
 800cea0:	080106ac 	.word	0x080106ac
 800cea4:	0801069c 	.word	0x0801069c
 800cea8:	7ff00000 	.word	0x7ff00000
 800ceac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ceae:	1c51      	adds	r1, r2, #1
 800ceb0:	9115      	str	r1, [sp, #84]	; 0x54
 800ceb2:	7852      	ldrb	r2, [r2, #1]
 800ceb4:	2a30      	cmp	r2, #48	; 0x30
 800ceb6:	d0f9      	beq.n	800ceac <_strtod_l+0x29c>
 800ceb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cebc:	2908      	cmp	r1, #8
 800cebe:	f63f af7a 	bhi.w	800cdb6 <_strtod_l+0x1a6>
 800cec2:	3a30      	subs	r2, #48	; 0x30
 800cec4:	9208      	str	r2, [sp, #32]
 800cec6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cec8:	920c      	str	r2, [sp, #48]	; 0x30
 800ceca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cecc:	1c57      	adds	r7, r2, #1
 800cece:	9715      	str	r7, [sp, #84]	; 0x54
 800ced0:	7852      	ldrb	r2, [r2, #1]
 800ced2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ced6:	f1be 0f09 	cmp.w	lr, #9
 800ceda:	d938      	bls.n	800cf4e <_strtod_l+0x33e>
 800cedc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cede:	1a7f      	subs	r7, r7, r1
 800cee0:	2f08      	cmp	r7, #8
 800cee2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cee6:	dc03      	bgt.n	800cef0 <_strtod_l+0x2e0>
 800cee8:	9908      	ldr	r1, [sp, #32]
 800ceea:	428f      	cmp	r7, r1
 800ceec:	bfa8      	it	ge
 800ceee:	460f      	movge	r7, r1
 800cef0:	f1bc 0f00 	cmp.w	ip, #0
 800cef4:	d000      	beq.n	800cef8 <_strtod_l+0x2e8>
 800cef6:	427f      	negs	r7, r7
 800cef8:	2e00      	cmp	r6, #0
 800cefa:	d14f      	bne.n	800cf9c <_strtod_l+0x38c>
 800cefc:	9904      	ldr	r1, [sp, #16]
 800cefe:	4301      	orrs	r1, r0
 800cf00:	f47f aec1 	bne.w	800cc86 <_strtod_l+0x76>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f aedb 	bne.w	800ccc0 <_strtod_l+0xb0>
 800cf0a:	2a69      	cmp	r2, #105	; 0x69
 800cf0c:	d029      	beq.n	800cf62 <_strtod_l+0x352>
 800cf0e:	dc26      	bgt.n	800cf5e <_strtod_l+0x34e>
 800cf10:	2a49      	cmp	r2, #73	; 0x49
 800cf12:	d026      	beq.n	800cf62 <_strtod_l+0x352>
 800cf14:	2a4e      	cmp	r2, #78	; 0x4e
 800cf16:	f47f aed3 	bne.w	800ccc0 <_strtod_l+0xb0>
 800cf1a:	499b      	ldr	r1, [pc, #620]	; (800d188 <_strtod_l+0x578>)
 800cf1c:	a815      	add	r0, sp, #84	; 0x54
 800cf1e:	f001 f9cf 	bl	800e2c0 <__match>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	f43f aecc 	beq.w	800ccc0 <_strtod_l+0xb0>
 800cf28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b28      	cmp	r3, #40	; 0x28
 800cf2e:	d12f      	bne.n	800cf90 <_strtod_l+0x380>
 800cf30:	4996      	ldr	r1, [pc, #600]	; (800d18c <_strtod_l+0x57c>)
 800cf32:	aa18      	add	r2, sp, #96	; 0x60
 800cf34:	a815      	add	r0, sp, #84	; 0x54
 800cf36:	f001 f9d7 	bl	800e2e8 <__hexnan>
 800cf3a:	2805      	cmp	r0, #5
 800cf3c:	d128      	bne.n	800cf90 <_strtod_l+0x380>
 800cf3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cf48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cf4c:	e69b      	b.n	800cc86 <_strtod_l+0x76>
 800cf4e:	9f08      	ldr	r7, [sp, #32]
 800cf50:	210a      	movs	r1, #10
 800cf52:	fb01 2107 	mla	r1, r1, r7, r2
 800cf56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cf5a:	9208      	str	r2, [sp, #32]
 800cf5c:	e7b5      	b.n	800ceca <_strtod_l+0x2ba>
 800cf5e:	2a6e      	cmp	r2, #110	; 0x6e
 800cf60:	e7d9      	b.n	800cf16 <_strtod_l+0x306>
 800cf62:	498b      	ldr	r1, [pc, #556]	; (800d190 <_strtod_l+0x580>)
 800cf64:	a815      	add	r0, sp, #84	; 0x54
 800cf66:	f001 f9ab 	bl	800e2c0 <__match>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f43f aea8 	beq.w	800ccc0 <_strtod_l+0xb0>
 800cf70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf72:	4988      	ldr	r1, [pc, #544]	; (800d194 <_strtod_l+0x584>)
 800cf74:	3b01      	subs	r3, #1
 800cf76:	a815      	add	r0, sp, #84	; 0x54
 800cf78:	9315      	str	r3, [sp, #84]	; 0x54
 800cf7a:	f001 f9a1 	bl	800e2c0 <__match>
 800cf7e:	b910      	cbnz	r0, 800cf86 <_strtod_l+0x376>
 800cf80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf82:	3301      	adds	r3, #1
 800cf84:	9315      	str	r3, [sp, #84]	; 0x54
 800cf86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d1a4 <_strtod_l+0x594>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	e67a      	b.n	800cc86 <_strtod_l+0x76>
 800cf90:	4881      	ldr	r0, [pc, #516]	; (800d198 <_strtod_l+0x588>)
 800cf92:	f000 fe99 	bl	800dcc8 <nan>
 800cf96:	ec59 8b10 	vmov	r8, r9, d0
 800cf9a:	e674      	b.n	800cc86 <_strtod_l+0x76>
 800cf9c:	9b05      	ldr	r3, [sp, #20]
 800cf9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfa0:	1afb      	subs	r3, r7, r3
 800cfa2:	f1bb 0f00 	cmp.w	fp, #0
 800cfa6:	bf08      	it	eq
 800cfa8:	46b3      	moveq	fp, r6
 800cfaa:	2e10      	cmp	r6, #16
 800cfac:	9308      	str	r3, [sp, #32]
 800cfae:	4635      	mov	r5, r6
 800cfb0:	bfa8      	it	ge
 800cfb2:	2510      	movge	r5, #16
 800cfb4:	f7f3 fabe 	bl	8000534 <__aeabi_ui2d>
 800cfb8:	2e09      	cmp	r6, #9
 800cfba:	4680      	mov	r8, r0
 800cfbc:	4689      	mov	r9, r1
 800cfbe:	dd13      	ble.n	800cfe8 <_strtod_l+0x3d8>
 800cfc0:	4b76      	ldr	r3, [pc, #472]	; (800d19c <_strtod_l+0x58c>)
 800cfc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cfc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cfca:	f7f3 fb2d 	bl	8000628 <__aeabi_dmul>
 800cfce:	4680      	mov	r8, r0
 800cfd0:	4650      	mov	r0, sl
 800cfd2:	4689      	mov	r9, r1
 800cfd4:	f7f3 faae 	bl	8000534 <__aeabi_ui2d>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 f96c 	bl	80002bc <__adddf3>
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	4689      	mov	r9, r1
 800cfe8:	2e0f      	cmp	r6, #15
 800cfea:	dc38      	bgt.n	800d05e <_strtod_l+0x44e>
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f43f ae49 	beq.w	800cc86 <_strtod_l+0x76>
 800cff4:	dd24      	ble.n	800d040 <_strtod_l+0x430>
 800cff6:	2b16      	cmp	r3, #22
 800cff8:	dc0b      	bgt.n	800d012 <_strtod_l+0x402>
 800cffa:	4968      	ldr	r1, [pc, #416]	; (800d19c <_strtod_l+0x58c>)
 800cffc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d004:	4642      	mov	r2, r8
 800d006:	464b      	mov	r3, r9
 800d008:	f7f3 fb0e 	bl	8000628 <__aeabi_dmul>
 800d00c:	4680      	mov	r8, r0
 800d00e:	4689      	mov	r9, r1
 800d010:	e639      	b.n	800cc86 <_strtod_l+0x76>
 800d012:	9a08      	ldr	r2, [sp, #32]
 800d014:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d018:	4293      	cmp	r3, r2
 800d01a:	db20      	blt.n	800d05e <_strtod_l+0x44e>
 800d01c:	4c5f      	ldr	r4, [pc, #380]	; (800d19c <_strtod_l+0x58c>)
 800d01e:	f1c6 060f 	rsb	r6, r6, #15
 800d022:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d026:	4642      	mov	r2, r8
 800d028:	464b      	mov	r3, r9
 800d02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d02e:	f7f3 fafb 	bl	8000628 <__aeabi_dmul>
 800d032:	9b08      	ldr	r3, [sp, #32]
 800d034:	1b9e      	subs	r6, r3, r6
 800d036:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d03a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d03e:	e7e3      	b.n	800d008 <_strtod_l+0x3f8>
 800d040:	9b08      	ldr	r3, [sp, #32]
 800d042:	3316      	adds	r3, #22
 800d044:	db0b      	blt.n	800d05e <_strtod_l+0x44e>
 800d046:	9b05      	ldr	r3, [sp, #20]
 800d048:	1bdf      	subs	r7, r3, r7
 800d04a:	4b54      	ldr	r3, [pc, #336]	; (800d19c <_strtod_l+0x58c>)
 800d04c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d054:	4640      	mov	r0, r8
 800d056:	4649      	mov	r1, r9
 800d058:	f7f3 fc10 	bl	800087c <__aeabi_ddiv>
 800d05c:	e7d6      	b.n	800d00c <_strtod_l+0x3fc>
 800d05e:	9b08      	ldr	r3, [sp, #32]
 800d060:	1b75      	subs	r5, r6, r5
 800d062:	441d      	add	r5, r3
 800d064:	2d00      	cmp	r5, #0
 800d066:	dd70      	ble.n	800d14a <_strtod_l+0x53a>
 800d068:	f015 030f 	ands.w	r3, r5, #15
 800d06c:	d00a      	beq.n	800d084 <_strtod_l+0x474>
 800d06e:	494b      	ldr	r1, [pc, #300]	; (800d19c <_strtod_l+0x58c>)
 800d070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d074:	4642      	mov	r2, r8
 800d076:	464b      	mov	r3, r9
 800d078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d07c:	f7f3 fad4 	bl	8000628 <__aeabi_dmul>
 800d080:	4680      	mov	r8, r0
 800d082:	4689      	mov	r9, r1
 800d084:	f035 050f 	bics.w	r5, r5, #15
 800d088:	d04d      	beq.n	800d126 <_strtod_l+0x516>
 800d08a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d08e:	dd22      	ble.n	800d0d6 <_strtod_l+0x4c6>
 800d090:	2500      	movs	r5, #0
 800d092:	46ab      	mov	fp, r5
 800d094:	9509      	str	r5, [sp, #36]	; 0x24
 800d096:	9505      	str	r5, [sp, #20]
 800d098:	2322      	movs	r3, #34	; 0x22
 800d09a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d1a4 <_strtod_l+0x594>
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	f04f 0800 	mov.w	r8, #0
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f43f aded 	beq.w	800cc86 <_strtod_l+0x76>
 800d0ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f001 fa08 	bl	800e4c4 <_Bfree>
 800d0b4:	9905      	ldr	r1, [sp, #20]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f001 fa04 	bl	800e4c4 <_Bfree>
 800d0bc:	4659      	mov	r1, fp
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 fa00 	bl	800e4c4 <_Bfree>
 800d0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f001 f9fc 	bl	800e4c4 <_Bfree>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f001 f9f8 	bl	800e4c4 <_Bfree>
 800d0d4:	e5d7      	b.n	800cc86 <_strtod_l+0x76>
 800d0d6:	4b32      	ldr	r3, [pc, #200]	; (800d1a0 <_strtod_l+0x590>)
 800d0d8:	9304      	str	r3, [sp, #16]
 800d0da:	2300      	movs	r3, #0
 800d0dc:	112d      	asrs	r5, r5, #4
 800d0de:	4640      	mov	r0, r8
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	469a      	mov	sl, r3
 800d0e4:	2d01      	cmp	r5, #1
 800d0e6:	dc21      	bgt.n	800d12c <_strtod_l+0x51c>
 800d0e8:	b10b      	cbz	r3, 800d0ee <_strtod_l+0x4de>
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	492c      	ldr	r1, [pc, #176]	; (800d1a0 <_strtod_l+0x590>)
 800d0f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d0f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d100:	f7f3 fa92 	bl	8000628 <__aeabi_dmul>
 800d104:	4b27      	ldr	r3, [pc, #156]	; (800d1a4 <_strtod_l+0x594>)
 800d106:	460a      	mov	r2, r1
 800d108:	400b      	ands	r3, r1
 800d10a:	4927      	ldr	r1, [pc, #156]	; (800d1a8 <_strtod_l+0x598>)
 800d10c:	428b      	cmp	r3, r1
 800d10e:	4680      	mov	r8, r0
 800d110:	d8be      	bhi.n	800d090 <_strtod_l+0x480>
 800d112:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d116:	428b      	cmp	r3, r1
 800d118:	bf86      	itte	hi
 800d11a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d1ac <_strtod_l+0x59c>
 800d11e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d122:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d126:	2300      	movs	r3, #0
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	e07b      	b.n	800d224 <_strtod_l+0x614>
 800d12c:	07ea      	lsls	r2, r5, #31
 800d12e:	d505      	bpl.n	800d13c <_strtod_l+0x52c>
 800d130:	9b04      	ldr	r3, [sp, #16]
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 fa77 	bl	8000628 <__aeabi_dmul>
 800d13a:	2301      	movs	r3, #1
 800d13c:	9a04      	ldr	r2, [sp, #16]
 800d13e:	3208      	adds	r2, #8
 800d140:	f10a 0a01 	add.w	sl, sl, #1
 800d144:	106d      	asrs	r5, r5, #1
 800d146:	9204      	str	r2, [sp, #16]
 800d148:	e7cc      	b.n	800d0e4 <_strtod_l+0x4d4>
 800d14a:	d0ec      	beq.n	800d126 <_strtod_l+0x516>
 800d14c:	426d      	negs	r5, r5
 800d14e:	f015 020f 	ands.w	r2, r5, #15
 800d152:	d00a      	beq.n	800d16a <_strtod_l+0x55a>
 800d154:	4b11      	ldr	r3, [pc, #68]	; (800d19c <_strtod_l+0x58c>)
 800d156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d15a:	4640      	mov	r0, r8
 800d15c:	4649      	mov	r1, r9
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	f7f3 fb8b 	bl	800087c <__aeabi_ddiv>
 800d166:	4680      	mov	r8, r0
 800d168:	4689      	mov	r9, r1
 800d16a:	112d      	asrs	r5, r5, #4
 800d16c:	d0db      	beq.n	800d126 <_strtod_l+0x516>
 800d16e:	2d1f      	cmp	r5, #31
 800d170:	dd1e      	ble.n	800d1b0 <_strtod_l+0x5a0>
 800d172:	2500      	movs	r5, #0
 800d174:	46ab      	mov	fp, r5
 800d176:	9509      	str	r5, [sp, #36]	; 0x24
 800d178:	9505      	str	r5, [sp, #20]
 800d17a:	2322      	movs	r3, #34	; 0x22
 800d17c:	f04f 0800 	mov.w	r8, #0
 800d180:	f04f 0900 	mov.w	r9, #0
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	e78d      	b.n	800d0a4 <_strtod_l+0x494>
 800d188:	080106a7 	.word	0x080106a7
 800d18c:	080106c0 	.word	0x080106c0
 800d190:	0801069e 	.word	0x0801069e
 800d194:	080106a1 	.word	0x080106a1
 800d198:	08010a75 	.word	0x08010a75
 800d19c:	08010918 	.word	0x08010918
 800d1a0:	080108f0 	.word	0x080108f0
 800d1a4:	7ff00000 	.word	0x7ff00000
 800d1a8:	7ca00000 	.word	0x7ca00000
 800d1ac:	7fefffff 	.word	0x7fefffff
 800d1b0:	f015 0310 	ands.w	r3, r5, #16
 800d1b4:	bf18      	it	ne
 800d1b6:	236a      	movne	r3, #106	; 0x6a
 800d1b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d55c <_strtod_l+0x94c>
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	07ea      	lsls	r2, r5, #31
 800d1c6:	d504      	bpl.n	800d1d2 <_strtod_l+0x5c2>
 800d1c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800d1cc:	f7f3 fa2c 	bl	8000628 <__aeabi_dmul>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	106d      	asrs	r5, r5, #1
 800d1d4:	f10a 0a08 	add.w	sl, sl, #8
 800d1d8:	d1f4      	bne.n	800d1c4 <_strtod_l+0x5b4>
 800d1da:	b10b      	cbz	r3, 800d1e0 <_strtod_l+0x5d0>
 800d1dc:	4680      	mov	r8, r0
 800d1de:	4689      	mov	r9, r1
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	b1bb      	cbz	r3, 800d214 <_strtod_l+0x604>
 800d1e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d1e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	dd10      	ble.n	800d214 <_strtod_l+0x604>
 800d1f2:	2b1f      	cmp	r3, #31
 800d1f4:	f340 811e 	ble.w	800d434 <_strtod_l+0x824>
 800d1f8:	2b34      	cmp	r3, #52	; 0x34
 800d1fa:	bfde      	ittt	le
 800d1fc:	f04f 33ff 	movle.w	r3, #4294967295
 800d200:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d204:	4093      	lslle	r3, r2
 800d206:	f04f 0800 	mov.w	r8, #0
 800d20a:	bfcc      	ite	gt
 800d20c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d210:	ea03 0901 	andle.w	r9, r3, r1
 800d214:	2200      	movs	r2, #0
 800d216:	2300      	movs	r3, #0
 800d218:	4640      	mov	r0, r8
 800d21a:	4649      	mov	r1, r9
 800d21c:	f7f3 fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 800d220:	2800      	cmp	r0, #0
 800d222:	d1a6      	bne.n	800d172 <_strtod_l+0x562>
 800d224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d22a:	4633      	mov	r3, r6
 800d22c:	465a      	mov	r2, fp
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 f9b0 	bl	800e594 <__s2b>
 800d234:	9009      	str	r0, [sp, #36]	; 0x24
 800d236:	2800      	cmp	r0, #0
 800d238:	f43f af2a 	beq.w	800d090 <_strtod_l+0x480>
 800d23c:	9a08      	ldr	r2, [sp, #32]
 800d23e:	9b05      	ldr	r3, [sp, #20]
 800d240:	2a00      	cmp	r2, #0
 800d242:	eba3 0307 	sub.w	r3, r3, r7
 800d246:	bfa8      	it	ge
 800d248:	2300      	movge	r3, #0
 800d24a:	930c      	str	r3, [sp, #48]	; 0x30
 800d24c:	2500      	movs	r5, #0
 800d24e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d252:	9312      	str	r3, [sp, #72]	; 0x48
 800d254:	46ab      	mov	fp, r5
 800d256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d258:	4620      	mov	r0, r4
 800d25a:	6859      	ldr	r1, [r3, #4]
 800d25c:	f001 f8f2 	bl	800e444 <_Balloc>
 800d260:	9005      	str	r0, [sp, #20]
 800d262:	2800      	cmp	r0, #0
 800d264:	f43f af18 	beq.w	800d098 <_strtod_l+0x488>
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	691a      	ldr	r2, [r3, #16]
 800d26c:	3202      	adds	r2, #2
 800d26e:	f103 010c 	add.w	r1, r3, #12
 800d272:	0092      	lsls	r2, r2, #2
 800d274:	300c      	adds	r0, #12
 800d276:	f000 fd16 	bl	800dca6 <memcpy>
 800d27a:	ec49 8b10 	vmov	d0, r8, r9
 800d27e:	aa18      	add	r2, sp, #96	; 0x60
 800d280:	a917      	add	r1, sp, #92	; 0x5c
 800d282:	4620      	mov	r0, r4
 800d284:	f001 fcba 	bl	800ebfc <__d2b>
 800d288:	ec49 8b18 	vmov	d8, r8, r9
 800d28c:	9016      	str	r0, [sp, #88]	; 0x58
 800d28e:	2800      	cmp	r0, #0
 800d290:	f43f af02 	beq.w	800d098 <_strtod_l+0x488>
 800d294:	2101      	movs	r1, #1
 800d296:	4620      	mov	r0, r4
 800d298:	f001 fa14 	bl	800e6c4 <__i2b>
 800d29c:	4683      	mov	fp, r0
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	f43f aefa 	beq.w	800d098 <_strtod_l+0x488>
 800d2a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d2a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	bfab      	itete	ge
 800d2ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d2ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d2b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d2b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d2b6:	bfac      	ite	ge
 800d2b8:	eb06 0a03 	addge.w	sl, r6, r3
 800d2bc:	1b9f      	sublt	r7, r3, r6
 800d2be:	9b04      	ldr	r3, [sp, #16]
 800d2c0:	1af6      	subs	r6, r6, r3
 800d2c2:	4416      	add	r6, r2
 800d2c4:	4ba0      	ldr	r3, [pc, #640]	; (800d548 <_strtod_l+0x938>)
 800d2c6:	3e01      	subs	r6, #1
 800d2c8:	429e      	cmp	r6, r3
 800d2ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d2ce:	f280 80c4 	bge.w	800d45a <_strtod_l+0x84a>
 800d2d2:	1b9b      	subs	r3, r3, r6
 800d2d4:	2b1f      	cmp	r3, #31
 800d2d6:	eba2 0203 	sub.w	r2, r2, r3
 800d2da:	f04f 0101 	mov.w	r1, #1
 800d2de:	f300 80b0 	bgt.w	800d442 <_strtod_l+0x832>
 800d2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e6:	930e      	str	r3, [sp, #56]	; 0x38
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d2ec:	eb0a 0602 	add.w	r6, sl, r2
 800d2f0:	9b04      	ldr	r3, [sp, #16]
 800d2f2:	45b2      	cmp	sl, r6
 800d2f4:	4417      	add	r7, r2
 800d2f6:	441f      	add	r7, r3
 800d2f8:	4653      	mov	r3, sl
 800d2fa:	bfa8      	it	ge
 800d2fc:	4633      	movge	r3, r6
 800d2fe:	42bb      	cmp	r3, r7
 800d300:	bfa8      	it	ge
 800d302:	463b      	movge	r3, r7
 800d304:	2b00      	cmp	r3, #0
 800d306:	bfc2      	ittt	gt
 800d308:	1af6      	subgt	r6, r6, r3
 800d30a:	1aff      	subgt	r7, r7, r3
 800d30c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d312:	2b00      	cmp	r3, #0
 800d314:	dd17      	ble.n	800d346 <_strtod_l+0x736>
 800d316:	4659      	mov	r1, fp
 800d318:	461a      	mov	r2, r3
 800d31a:	4620      	mov	r0, r4
 800d31c:	f001 fa92 	bl	800e844 <__pow5mult>
 800d320:	4683      	mov	fp, r0
 800d322:	2800      	cmp	r0, #0
 800d324:	f43f aeb8 	beq.w	800d098 <_strtod_l+0x488>
 800d328:	4601      	mov	r1, r0
 800d32a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d32c:	4620      	mov	r0, r4
 800d32e:	f001 f9df 	bl	800e6f0 <__multiply>
 800d332:	900b      	str	r0, [sp, #44]	; 0x2c
 800d334:	2800      	cmp	r0, #0
 800d336:	f43f aeaf 	beq.w	800d098 <_strtod_l+0x488>
 800d33a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d33c:	4620      	mov	r0, r4
 800d33e:	f001 f8c1 	bl	800e4c4 <_Bfree>
 800d342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d344:	9316      	str	r3, [sp, #88]	; 0x58
 800d346:	2e00      	cmp	r6, #0
 800d348:	f300 808c 	bgt.w	800d464 <_strtod_l+0x854>
 800d34c:	9b08      	ldr	r3, [sp, #32]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dd08      	ble.n	800d364 <_strtod_l+0x754>
 800d352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d354:	9905      	ldr	r1, [sp, #20]
 800d356:	4620      	mov	r0, r4
 800d358:	f001 fa74 	bl	800e844 <__pow5mult>
 800d35c:	9005      	str	r0, [sp, #20]
 800d35e:	2800      	cmp	r0, #0
 800d360:	f43f ae9a 	beq.w	800d098 <_strtod_l+0x488>
 800d364:	2f00      	cmp	r7, #0
 800d366:	dd08      	ble.n	800d37a <_strtod_l+0x76a>
 800d368:	9905      	ldr	r1, [sp, #20]
 800d36a:	463a      	mov	r2, r7
 800d36c:	4620      	mov	r0, r4
 800d36e:	f001 fac3 	bl	800e8f8 <__lshift>
 800d372:	9005      	str	r0, [sp, #20]
 800d374:	2800      	cmp	r0, #0
 800d376:	f43f ae8f 	beq.w	800d098 <_strtod_l+0x488>
 800d37a:	f1ba 0f00 	cmp.w	sl, #0
 800d37e:	dd08      	ble.n	800d392 <_strtod_l+0x782>
 800d380:	4659      	mov	r1, fp
 800d382:	4652      	mov	r2, sl
 800d384:	4620      	mov	r0, r4
 800d386:	f001 fab7 	bl	800e8f8 <__lshift>
 800d38a:	4683      	mov	fp, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f43f ae83 	beq.w	800d098 <_strtod_l+0x488>
 800d392:	9a05      	ldr	r2, [sp, #20]
 800d394:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d396:	4620      	mov	r0, r4
 800d398:	f001 fb36 	bl	800ea08 <__mdiff>
 800d39c:	4605      	mov	r5, r0
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	f43f ae7a 	beq.w	800d098 <_strtod_l+0x488>
 800d3a4:	68c3      	ldr	r3, [r0, #12]
 800d3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60c3      	str	r3, [r0, #12]
 800d3ac:	4659      	mov	r1, fp
 800d3ae:	f001 fb0f 	bl	800e9d0 <__mcmp>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	da60      	bge.n	800d478 <_strtod_l+0x868>
 800d3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3b8:	ea53 0308 	orrs.w	r3, r3, r8
 800d3bc:	f040 8084 	bne.w	800d4c8 <_strtod_l+0x8b8>
 800d3c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d17f      	bne.n	800d4c8 <_strtod_l+0x8b8>
 800d3c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d3cc:	0d1b      	lsrs	r3, r3, #20
 800d3ce:	051b      	lsls	r3, r3, #20
 800d3d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d3d4:	d978      	bls.n	800d4c8 <_strtod_l+0x8b8>
 800d3d6:	696b      	ldr	r3, [r5, #20]
 800d3d8:	b913      	cbnz	r3, 800d3e0 <_strtod_l+0x7d0>
 800d3da:	692b      	ldr	r3, [r5, #16]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	dd73      	ble.n	800d4c8 <_strtod_l+0x8b8>
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f001 fa87 	bl	800e8f8 <__lshift>
 800d3ea:	4659      	mov	r1, fp
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	f001 faef 	bl	800e9d0 <__mcmp>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	dd68      	ble.n	800d4c8 <_strtod_l+0x8b8>
 800d3f6:	9904      	ldr	r1, [sp, #16]
 800d3f8:	4a54      	ldr	r2, [pc, #336]	; (800d54c <_strtod_l+0x93c>)
 800d3fa:	464b      	mov	r3, r9
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	f000 8084 	beq.w	800d50a <_strtod_l+0x8fa>
 800d402:	ea02 0109 	and.w	r1, r2, r9
 800d406:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d40a:	dc7e      	bgt.n	800d50a <_strtod_l+0x8fa>
 800d40c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d410:	f77f aeb3 	ble.w	800d17a <_strtod_l+0x56a>
 800d414:	4b4e      	ldr	r3, [pc, #312]	; (800d550 <_strtod_l+0x940>)
 800d416:	4640      	mov	r0, r8
 800d418:	4649      	mov	r1, r9
 800d41a:	2200      	movs	r2, #0
 800d41c:	f7f3 f904 	bl	8000628 <__aeabi_dmul>
 800d420:	4b4a      	ldr	r3, [pc, #296]	; (800d54c <_strtod_l+0x93c>)
 800d422:	400b      	ands	r3, r1
 800d424:	4680      	mov	r8, r0
 800d426:	4689      	mov	r9, r1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f47f ae3f 	bne.w	800d0ac <_strtod_l+0x49c>
 800d42e:	2322      	movs	r3, #34	; 0x22
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	e63b      	b.n	800d0ac <_strtod_l+0x49c>
 800d434:	f04f 32ff 	mov.w	r2, #4294967295
 800d438:	fa02 f303 	lsl.w	r3, r2, r3
 800d43c:	ea03 0808 	and.w	r8, r3, r8
 800d440:	e6e8      	b.n	800d214 <_strtod_l+0x604>
 800d442:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d446:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d44a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d44e:	36e2      	adds	r6, #226	; 0xe2
 800d450:	fa01 f306 	lsl.w	r3, r1, r6
 800d454:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d458:	e748      	b.n	800d2ec <_strtod_l+0x6dc>
 800d45a:	2100      	movs	r1, #0
 800d45c:	2301      	movs	r3, #1
 800d45e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d462:	e743      	b.n	800d2ec <_strtod_l+0x6dc>
 800d464:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d466:	4632      	mov	r2, r6
 800d468:	4620      	mov	r0, r4
 800d46a:	f001 fa45 	bl	800e8f8 <__lshift>
 800d46e:	9016      	str	r0, [sp, #88]	; 0x58
 800d470:	2800      	cmp	r0, #0
 800d472:	f47f af6b 	bne.w	800d34c <_strtod_l+0x73c>
 800d476:	e60f      	b.n	800d098 <_strtod_l+0x488>
 800d478:	46ca      	mov	sl, r9
 800d47a:	d171      	bne.n	800d560 <_strtod_l+0x950>
 800d47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d47e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d482:	b352      	cbz	r2, 800d4da <_strtod_l+0x8ca>
 800d484:	4a33      	ldr	r2, [pc, #204]	; (800d554 <_strtod_l+0x944>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d12a      	bne.n	800d4e0 <_strtod_l+0x8d0>
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	4641      	mov	r1, r8
 800d48e:	b1fb      	cbz	r3, 800d4d0 <_strtod_l+0x8c0>
 800d490:	4b2e      	ldr	r3, [pc, #184]	; (800d54c <_strtod_l+0x93c>)
 800d492:	ea09 0303 	and.w	r3, r9, r3
 800d496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d49a:	f04f 32ff 	mov.w	r2, #4294967295
 800d49e:	d81a      	bhi.n	800d4d6 <_strtod_l+0x8c6>
 800d4a0:	0d1b      	lsrs	r3, r3, #20
 800d4a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	4299      	cmp	r1, r3
 800d4ac:	d118      	bne.n	800d4e0 <_strtod_l+0x8d0>
 800d4ae:	4b2a      	ldr	r3, [pc, #168]	; (800d558 <_strtod_l+0x948>)
 800d4b0:	459a      	cmp	sl, r3
 800d4b2:	d102      	bne.n	800d4ba <_strtod_l+0x8aa>
 800d4b4:	3101      	adds	r1, #1
 800d4b6:	f43f adef 	beq.w	800d098 <_strtod_l+0x488>
 800d4ba:	4b24      	ldr	r3, [pc, #144]	; (800d54c <_strtod_l+0x93c>)
 800d4bc:	ea0a 0303 	and.w	r3, sl, r3
 800d4c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d4c4:	f04f 0800 	mov.w	r8, #0
 800d4c8:	9b04      	ldr	r3, [sp, #16]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1a2      	bne.n	800d414 <_strtod_l+0x804>
 800d4ce:	e5ed      	b.n	800d0ac <_strtod_l+0x49c>
 800d4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d4:	e7e9      	b.n	800d4aa <_strtod_l+0x89a>
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	e7e7      	b.n	800d4aa <_strtod_l+0x89a>
 800d4da:	ea53 0308 	orrs.w	r3, r3, r8
 800d4de:	d08a      	beq.n	800d3f6 <_strtod_l+0x7e6>
 800d4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e2:	b1e3      	cbz	r3, 800d51e <_strtod_l+0x90e>
 800d4e4:	ea13 0f0a 	tst.w	r3, sl
 800d4e8:	d0ee      	beq.n	800d4c8 <_strtod_l+0x8b8>
 800d4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ec:	9a04      	ldr	r2, [sp, #16]
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	b1c3      	cbz	r3, 800d526 <_strtod_l+0x916>
 800d4f4:	f7ff fb6d 	bl	800cbd2 <sulp>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	ec51 0b18 	vmov	r0, r1, d8
 800d500:	f7f2 fedc 	bl	80002bc <__adddf3>
 800d504:	4680      	mov	r8, r0
 800d506:	4689      	mov	r9, r1
 800d508:	e7de      	b.n	800d4c8 <_strtod_l+0x8b8>
 800d50a:	4013      	ands	r3, r2
 800d50c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d510:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d514:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d518:	f04f 38ff 	mov.w	r8, #4294967295
 800d51c:	e7d4      	b.n	800d4c8 <_strtod_l+0x8b8>
 800d51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d520:	ea13 0f08 	tst.w	r3, r8
 800d524:	e7e0      	b.n	800d4e8 <_strtod_l+0x8d8>
 800d526:	f7ff fb54 	bl	800cbd2 <sulp>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	ec51 0b18 	vmov	r0, r1, d8
 800d532:	f7f2 fec1 	bl	80002b8 <__aeabi_dsub>
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	4680      	mov	r8, r0
 800d53c:	4689      	mov	r9, r1
 800d53e:	f7f3 fadb 	bl	8000af8 <__aeabi_dcmpeq>
 800d542:	2800      	cmp	r0, #0
 800d544:	d0c0      	beq.n	800d4c8 <_strtod_l+0x8b8>
 800d546:	e618      	b.n	800d17a <_strtod_l+0x56a>
 800d548:	fffffc02 	.word	0xfffffc02
 800d54c:	7ff00000 	.word	0x7ff00000
 800d550:	39500000 	.word	0x39500000
 800d554:	000fffff 	.word	0x000fffff
 800d558:	7fefffff 	.word	0x7fefffff
 800d55c:	080106d8 	.word	0x080106d8
 800d560:	4659      	mov	r1, fp
 800d562:	4628      	mov	r0, r5
 800d564:	f001 fba4 	bl	800ecb0 <__ratio>
 800d568:	ec57 6b10 	vmov	r6, r7, d0
 800d56c:	ee10 0a10 	vmov	r0, s0
 800d570:	2200      	movs	r2, #0
 800d572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d576:	4639      	mov	r1, r7
 800d578:	f7f3 fad2 	bl	8000b20 <__aeabi_dcmple>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d071      	beq.n	800d664 <_strtod_l+0xa54>
 800d580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d582:	2b00      	cmp	r3, #0
 800d584:	d17c      	bne.n	800d680 <_strtod_l+0xa70>
 800d586:	f1b8 0f00 	cmp.w	r8, #0
 800d58a:	d15a      	bne.n	800d642 <_strtod_l+0xa32>
 800d58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d590:	2b00      	cmp	r3, #0
 800d592:	d15d      	bne.n	800d650 <_strtod_l+0xa40>
 800d594:	4b90      	ldr	r3, [pc, #576]	; (800d7d8 <_strtod_l+0xbc8>)
 800d596:	2200      	movs	r2, #0
 800d598:	4630      	mov	r0, r6
 800d59a:	4639      	mov	r1, r7
 800d59c:	f7f3 fab6 	bl	8000b0c <__aeabi_dcmplt>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d15c      	bne.n	800d65e <_strtod_l+0xa4e>
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	4b8c      	ldr	r3, [pc, #560]	; (800d7dc <_strtod_l+0xbcc>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f7f3 f83c 	bl	8000628 <__aeabi_dmul>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	460f      	mov	r7, r1
 800d5b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d5b8:	9606      	str	r6, [sp, #24]
 800d5ba:	9307      	str	r3, [sp, #28]
 800d5bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d5c4:	4b86      	ldr	r3, [pc, #536]	; (800d7e0 <_strtod_l+0xbd0>)
 800d5c6:	ea0a 0303 	and.w	r3, sl, r3
 800d5ca:	930d      	str	r3, [sp, #52]	; 0x34
 800d5cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5ce:	4b85      	ldr	r3, [pc, #532]	; (800d7e4 <_strtod_l+0xbd4>)
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	f040 8090 	bne.w	800d6f6 <_strtod_l+0xae6>
 800d5d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d5da:	ec49 8b10 	vmov	d0, r8, r9
 800d5de:	f001 fa9d 	bl	800eb1c <__ulp>
 800d5e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5e6:	ec51 0b10 	vmov	r0, r1, d0
 800d5ea:	f7f3 f81d 	bl	8000628 <__aeabi_dmul>
 800d5ee:	4642      	mov	r2, r8
 800d5f0:	464b      	mov	r3, r9
 800d5f2:	f7f2 fe63 	bl	80002bc <__adddf3>
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4979      	ldr	r1, [pc, #484]	; (800d7e0 <_strtod_l+0xbd0>)
 800d5fa:	4a7b      	ldr	r2, [pc, #492]	; (800d7e8 <_strtod_l+0xbd8>)
 800d5fc:	4019      	ands	r1, r3
 800d5fe:	4291      	cmp	r1, r2
 800d600:	4680      	mov	r8, r0
 800d602:	d944      	bls.n	800d68e <_strtod_l+0xa7e>
 800d604:	ee18 2a90 	vmov	r2, s17
 800d608:	4b78      	ldr	r3, [pc, #480]	; (800d7ec <_strtod_l+0xbdc>)
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d104      	bne.n	800d618 <_strtod_l+0xa08>
 800d60e:	ee18 3a10 	vmov	r3, s16
 800d612:	3301      	adds	r3, #1
 800d614:	f43f ad40 	beq.w	800d098 <_strtod_l+0x488>
 800d618:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d7ec <_strtod_l+0xbdc>
 800d61c:	f04f 38ff 	mov.w	r8, #4294967295
 800d620:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d622:	4620      	mov	r0, r4
 800d624:	f000 ff4e 	bl	800e4c4 <_Bfree>
 800d628:	9905      	ldr	r1, [sp, #20]
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 ff4a 	bl	800e4c4 <_Bfree>
 800d630:	4659      	mov	r1, fp
 800d632:	4620      	mov	r0, r4
 800d634:	f000 ff46 	bl	800e4c4 <_Bfree>
 800d638:	4629      	mov	r1, r5
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 ff42 	bl	800e4c4 <_Bfree>
 800d640:	e609      	b.n	800d256 <_strtod_l+0x646>
 800d642:	f1b8 0f01 	cmp.w	r8, #1
 800d646:	d103      	bne.n	800d650 <_strtod_l+0xa40>
 800d648:	f1b9 0f00 	cmp.w	r9, #0
 800d64c:	f43f ad95 	beq.w	800d17a <_strtod_l+0x56a>
 800d650:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d7a8 <_strtod_l+0xb98>
 800d654:	4f60      	ldr	r7, [pc, #384]	; (800d7d8 <_strtod_l+0xbc8>)
 800d656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d65a:	2600      	movs	r6, #0
 800d65c:	e7ae      	b.n	800d5bc <_strtod_l+0x9ac>
 800d65e:	4f5f      	ldr	r7, [pc, #380]	; (800d7dc <_strtod_l+0xbcc>)
 800d660:	2600      	movs	r6, #0
 800d662:	e7a7      	b.n	800d5b4 <_strtod_l+0x9a4>
 800d664:	4b5d      	ldr	r3, [pc, #372]	; (800d7dc <_strtod_l+0xbcc>)
 800d666:	4630      	mov	r0, r6
 800d668:	4639      	mov	r1, r7
 800d66a:	2200      	movs	r2, #0
 800d66c:	f7f2 ffdc 	bl	8000628 <__aeabi_dmul>
 800d670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	2b00      	cmp	r3, #0
 800d678:	d09c      	beq.n	800d5b4 <_strtod_l+0x9a4>
 800d67a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d67e:	e79d      	b.n	800d5bc <_strtod_l+0x9ac>
 800d680:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d7b0 <_strtod_l+0xba0>
 800d684:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d688:	ec57 6b17 	vmov	r6, r7, d7
 800d68c:	e796      	b.n	800d5bc <_strtod_l+0x9ac>
 800d68e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d692:	9b04      	ldr	r3, [sp, #16]
 800d694:	46ca      	mov	sl, r9
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1c2      	bne.n	800d620 <_strtod_l+0xa10>
 800d69a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d69e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6a0:	0d1b      	lsrs	r3, r3, #20
 800d6a2:	051b      	lsls	r3, r3, #20
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d1bb      	bne.n	800d620 <_strtod_l+0xa10>
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	4639      	mov	r1, r7
 800d6ac:	f7f3 fb1c 	bl	8000ce8 <__aeabi_d2lz>
 800d6b0:	f7f2 ff8c 	bl	80005cc <__aeabi_l2d>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	f7f2 fdfc 	bl	80002b8 <__aeabi_dsub>
 800d6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6c6:	ea43 0308 	orr.w	r3, r3, r8
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	460f      	mov	r7, r1
 800d6d0:	d054      	beq.n	800d77c <_strtod_l+0xb6c>
 800d6d2:	a339      	add	r3, pc, #228	; (adr r3, 800d7b8 <_strtod_l+0xba8>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f3 fa18 	bl	8000b0c <__aeabi_dcmplt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f47f ace5 	bne.w	800d0ac <_strtod_l+0x49c>
 800d6e2:	a337      	add	r3, pc, #220	; (adr r3, 800d7c0 <_strtod_l+0xbb0>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f7f3 fa2c 	bl	8000b48 <__aeabi_dcmpgt>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d095      	beq.n	800d620 <_strtod_l+0xa10>
 800d6f4:	e4da      	b.n	800d0ac <_strtod_l+0x49c>
 800d6f6:	9b04      	ldr	r3, [sp, #16]
 800d6f8:	b333      	cbz	r3, 800d748 <_strtod_l+0xb38>
 800d6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d700:	d822      	bhi.n	800d748 <_strtod_l+0xb38>
 800d702:	a331      	add	r3, pc, #196	; (adr r3, 800d7c8 <_strtod_l+0xbb8>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	4630      	mov	r0, r6
 800d70a:	4639      	mov	r1, r7
 800d70c:	f7f3 fa08 	bl	8000b20 <__aeabi_dcmple>
 800d710:	b1a0      	cbz	r0, 800d73c <_strtod_l+0xb2c>
 800d712:	4639      	mov	r1, r7
 800d714:	4630      	mov	r0, r6
 800d716:	f7f3 fa5f 	bl	8000bd8 <__aeabi_d2uiz>
 800d71a:	2801      	cmp	r0, #1
 800d71c:	bf38      	it	cc
 800d71e:	2001      	movcc	r0, #1
 800d720:	f7f2 ff08 	bl	8000534 <__aeabi_ui2d>
 800d724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	bb23      	cbnz	r3, 800d776 <_strtod_l+0xb66>
 800d72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d730:	9010      	str	r0, [sp, #64]	; 0x40
 800d732:	9311      	str	r3, [sp, #68]	; 0x44
 800d734:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d738:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d73e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d740:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	930f      	str	r3, [sp, #60]	; 0x3c
 800d748:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d74c:	eeb0 0a48 	vmov.f32	s0, s16
 800d750:	eef0 0a68 	vmov.f32	s1, s17
 800d754:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d758:	f001 f9e0 	bl	800eb1c <__ulp>
 800d75c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d760:	ec53 2b10 	vmov	r2, r3, d0
 800d764:	f7f2 ff60 	bl	8000628 <__aeabi_dmul>
 800d768:	ec53 2b18 	vmov	r2, r3, d8
 800d76c:	f7f2 fda6 	bl	80002bc <__adddf3>
 800d770:	4680      	mov	r8, r0
 800d772:	4689      	mov	r9, r1
 800d774:	e78d      	b.n	800d692 <_strtod_l+0xa82>
 800d776:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d77a:	e7db      	b.n	800d734 <_strtod_l+0xb24>
 800d77c:	a314      	add	r3, pc, #80	; (adr r3, 800d7d0 <_strtod_l+0xbc0>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	f7f3 f9c3 	bl	8000b0c <__aeabi_dcmplt>
 800d786:	e7b3      	b.n	800d6f0 <_strtod_l+0xae0>
 800d788:	2300      	movs	r3, #0
 800d78a:	930a      	str	r3, [sp, #40]	; 0x28
 800d78c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d790:	6013      	str	r3, [r2, #0]
 800d792:	f7ff ba7c 	b.w	800cc8e <_strtod_l+0x7e>
 800d796:	2a65      	cmp	r2, #101	; 0x65
 800d798:	f43f ab75 	beq.w	800ce86 <_strtod_l+0x276>
 800d79c:	2a45      	cmp	r2, #69	; 0x45
 800d79e:	f43f ab72 	beq.w	800ce86 <_strtod_l+0x276>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	f7ff bbaa 	b.w	800cefc <_strtod_l+0x2ec>
 800d7a8:	00000000 	.word	0x00000000
 800d7ac:	bff00000 	.word	0xbff00000
 800d7b0:	00000000 	.word	0x00000000
 800d7b4:	3ff00000 	.word	0x3ff00000
 800d7b8:	94a03595 	.word	0x94a03595
 800d7bc:	3fdfffff 	.word	0x3fdfffff
 800d7c0:	35afe535 	.word	0x35afe535
 800d7c4:	3fe00000 	.word	0x3fe00000
 800d7c8:	ffc00000 	.word	0xffc00000
 800d7cc:	41dfffff 	.word	0x41dfffff
 800d7d0:	94a03595 	.word	0x94a03595
 800d7d4:	3fcfffff 	.word	0x3fcfffff
 800d7d8:	3ff00000 	.word	0x3ff00000
 800d7dc:	3fe00000 	.word	0x3fe00000
 800d7e0:	7ff00000 	.word	0x7ff00000
 800d7e4:	7fe00000 	.word	0x7fe00000
 800d7e8:	7c9fffff 	.word	0x7c9fffff
 800d7ec:	7fefffff 	.word	0x7fefffff

0800d7f0 <strtod>:
 800d7f0:	460a      	mov	r2, r1
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	4802      	ldr	r0, [pc, #8]	; (800d800 <strtod+0x10>)
 800d7f6:	4b03      	ldr	r3, [pc, #12]	; (800d804 <strtod+0x14>)
 800d7f8:	6800      	ldr	r0, [r0, #0]
 800d7fa:	f7ff ba09 	b.w	800cc10 <_strtod_l>
 800d7fe:	bf00      	nop
 800d800:	200001f8 	.word	0x200001f8
 800d804:	20000040 	.word	0x20000040

0800d808 <std>:
 800d808:	2300      	movs	r3, #0
 800d80a:	b510      	push	{r4, lr}
 800d80c:	4604      	mov	r4, r0
 800d80e:	e9c0 3300 	strd	r3, r3, [r0]
 800d812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d816:	6083      	str	r3, [r0, #8]
 800d818:	8181      	strh	r1, [r0, #12]
 800d81a:	6643      	str	r3, [r0, #100]	; 0x64
 800d81c:	81c2      	strh	r2, [r0, #14]
 800d81e:	6183      	str	r3, [r0, #24]
 800d820:	4619      	mov	r1, r3
 800d822:	2208      	movs	r2, #8
 800d824:	305c      	adds	r0, #92	; 0x5c
 800d826:	f000 f942 	bl	800daae <memset>
 800d82a:	4b0d      	ldr	r3, [pc, #52]	; (800d860 <std+0x58>)
 800d82c:	6263      	str	r3, [r4, #36]	; 0x24
 800d82e:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <std+0x5c>)
 800d830:	62a3      	str	r3, [r4, #40]	; 0x28
 800d832:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <std+0x60>)
 800d834:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d836:	4b0d      	ldr	r3, [pc, #52]	; (800d86c <std+0x64>)
 800d838:	6323      	str	r3, [r4, #48]	; 0x30
 800d83a:	4b0d      	ldr	r3, [pc, #52]	; (800d870 <std+0x68>)
 800d83c:	6224      	str	r4, [r4, #32]
 800d83e:	429c      	cmp	r4, r3
 800d840:	d006      	beq.n	800d850 <std+0x48>
 800d842:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d846:	4294      	cmp	r4, r2
 800d848:	d002      	beq.n	800d850 <std+0x48>
 800d84a:	33d0      	adds	r3, #208	; 0xd0
 800d84c:	429c      	cmp	r4, r3
 800d84e:	d105      	bne.n	800d85c <std+0x54>
 800d850:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d858:	f000 ba1a 	b.w	800dc90 <__retarget_lock_init_recursive>
 800d85c:	bd10      	pop	{r4, pc}
 800d85e:	bf00      	nop
 800d860:	0800da25 	.word	0x0800da25
 800d864:	0800da4b 	.word	0x0800da4b
 800d868:	0800da83 	.word	0x0800da83
 800d86c:	0800daa7 	.word	0x0800daa7
 800d870:	20002aa8 	.word	0x20002aa8

0800d874 <stdio_exit_handler>:
 800d874:	4a02      	ldr	r2, [pc, #8]	; (800d880 <stdio_exit_handler+0xc>)
 800d876:	4903      	ldr	r1, [pc, #12]	; (800d884 <stdio_exit_handler+0x10>)
 800d878:	4803      	ldr	r0, [pc, #12]	; (800d888 <stdio_exit_handler+0x14>)
 800d87a:	f000 b869 	b.w	800d950 <_fwalk_sglue>
 800d87e:	bf00      	nop
 800d880:	20000034 	.word	0x20000034
 800d884:	0800fae5 	.word	0x0800fae5
 800d888:	200001ac 	.word	0x200001ac

0800d88c <cleanup_stdio>:
 800d88c:	6841      	ldr	r1, [r0, #4]
 800d88e:	4b0c      	ldr	r3, [pc, #48]	; (800d8c0 <cleanup_stdio+0x34>)
 800d890:	4299      	cmp	r1, r3
 800d892:	b510      	push	{r4, lr}
 800d894:	4604      	mov	r4, r0
 800d896:	d001      	beq.n	800d89c <cleanup_stdio+0x10>
 800d898:	f002 f924 	bl	800fae4 <_fflush_r>
 800d89c:	68a1      	ldr	r1, [r4, #8]
 800d89e:	4b09      	ldr	r3, [pc, #36]	; (800d8c4 <cleanup_stdio+0x38>)
 800d8a0:	4299      	cmp	r1, r3
 800d8a2:	d002      	beq.n	800d8aa <cleanup_stdio+0x1e>
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f002 f91d 	bl	800fae4 <_fflush_r>
 800d8aa:	68e1      	ldr	r1, [r4, #12]
 800d8ac:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <cleanup_stdio+0x3c>)
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	d004      	beq.n	800d8bc <cleanup_stdio+0x30>
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b8:	f002 b914 	b.w	800fae4 <_fflush_r>
 800d8bc:	bd10      	pop	{r4, pc}
 800d8be:	bf00      	nop
 800d8c0:	20002aa8 	.word	0x20002aa8
 800d8c4:	20002b10 	.word	0x20002b10
 800d8c8:	20002b78 	.word	0x20002b78

0800d8cc <global_stdio_init.part.0>:
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <global_stdio_init.part.0+0x30>)
 800d8d0:	4c0b      	ldr	r4, [pc, #44]	; (800d900 <global_stdio_init.part.0+0x34>)
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <global_stdio_init.part.0+0x38>)
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2104      	movs	r1, #4
 800d8dc:	f7ff ff94 	bl	800d808 <std>
 800d8e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	2109      	movs	r1, #9
 800d8e8:	f7ff ff8e 	bl	800d808 <std>
 800d8ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f6:	2112      	movs	r1, #18
 800d8f8:	f7ff bf86 	b.w	800d808 <std>
 800d8fc:	20002be0 	.word	0x20002be0
 800d900:	20002aa8 	.word	0x20002aa8
 800d904:	0800d875 	.word	0x0800d875

0800d908 <__sfp_lock_acquire>:
 800d908:	4801      	ldr	r0, [pc, #4]	; (800d910 <__sfp_lock_acquire+0x8>)
 800d90a:	f000 b9c2 	b.w	800dc92 <__retarget_lock_acquire_recursive>
 800d90e:	bf00      	nop
 800d910:	20002be9 	.word	0x20002be9

0800d914 <__sfp_lock_release>:
 800d914:	4801      	ldr	r0, [pc, #4]	; (800d91c <__sfp_lock_release+0x8>)
 800d916:	f000 b9bd 	b.w	800dc94 <__retarget_lock_release_recursive>
 800d91a:	bf00      	nop
 800d91c:	20002be9 	.word	0x20002be9

0800d920 <__sinit>:
 800d920:	b510      	push	{r4, lr}
 800d922:	4604      	mov	r4, r0
 800d924:	f7ff fff0 	bl	800d908 <__sfp_lock_acquire>
 800d928:	6a23      	ldr	r3, [r4, #32]
 800d92a:	b11b      	cbz	r3, 800d934 <__sinit+0x14>
 800d92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d930:	f7ff bff0 	b.w	800d914 <__sfp_lock_release>
 800d934:	4b04      	ldr	r3, [pc, #16]	; (800d948 <__sinit+0x28>)
 800d936:	6223      	str	r3, [r4, #32]
 800d938:	4b04      	ldr	r3, [pc, #16]	; (800d94c <__sinit+0x2c>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1f5      	bne.n	800d92c <__sinit+0xc>
 800d940:	f7ff ffc4 	bl	800d8cc <global_stdio_init.part.0>
 800d944:	e7f2      	b.n	800d92c <__sinit+0xc>
 800d946:	bf00      	nop
 800d948:	0800d88d 	.word	0x0800d88d
 800d94c:	20002be0 	.word	0x20002be0

0800d950 <_fwalk_sglue>:
 800d950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d954:	4607      	mov	r7, r0
 800d956:	4688      	mov	r8, r1
 800d958:	4614      	mov	r4, r2
 800d95a:	2600      	movs	r6, #0
 800d95c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d960:	f1b9 0901 	subs.w	r9, r9, #1
 800d964:	d505      	bpl.n	800d972 <_fwalk_sglue+0x22>
 800d966:	6824      	ldr	r4, [r4, #0]
 800d968:	2c00      	cmp	r4, #0
 800d96a:	d1f7      	bne.n	800d95c <_fwalk_sglue+0xc>
 800d96c:	4630      	mov	r0, r6
 800d96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d972:	89ab      	ldrh	r3, [r5, #12]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d907      	bls.n	800d988 <_fwalk_sglue+0x38>
 800d978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d97c:	3301      	adds	r3, #1
 800d97e:	d003      	beq.n	800d988 <_fwalk_sglue+0x38>
 800d980:	4629      	mov	r1, r5
 800d982:	4638      	mov	r0, r7
 800d984:	47c0      	blx	r8
 800d986:	4306      	orrs	r6, r0
 800d988:	3568      	adds	r5, #104	; 0x68
 800d98a:	e7e9      	b.n	800d960 <_fwalk_sglue+0x10>

0800d98c <siprintf>:
 800d98c:	b40e      	push	{r1, r2, r3}
 800d98e:	b500      	push	{lr}
 800d990:	b09c      	sub	sp, #112	; 0x70
 800d992:	ab1d      	add	r3, sp, #116	; 0x74
 800d994:	9002      	str	r0, [sp, #8]
 800d996:	9006      	str	r0, [sp, #24]
 800d998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d99c:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <siprintf+0x38>)
 800d99e:	9107      	str	r1, [sp, #28]
 800d9a0:	9104      	str	r1, [sp, #16]
 800d9a2:	4909      	ldr	r1, [pc, #36]	; (800d9c8 <siprintf+0x3c>)
 800d9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a8:	9105      	str	r1, [sp, #20]
 800d9aa:	6800      	ldr	r0, [r0, #0]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	a902      	add	r1, sp, #8
 800d9b0:	f001 fa64 	bl	800ee7c <_svfiprintf_r>
 800d9b4:	9b02      	ldr	r3, [sp, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	b01c      	add	sp, #112	; 0x70
 800d9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c0:	b003      	add	sp, #12
 800d9c2:	4770      	bx	lr
 800d9c4:	200001f8 	.word	0x200001f8
 800d9c8:	ffff0208 	.word	0xffff0208

0800d9cc <siscanf>:
 800d9cc:	b40e      	push	{r1, r2, r3}
 800d9ce:	b510      	push	{r4, lr}
 800d9d0:	b09f      	sub	sp, #124	; 0x7c
 800d9d2:	ac21      	add	r4, sp, #132	; 0x84
 800d9d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d9d8:	f854 2b04 	ldr.w	r2, [r4], #4
 800d9dc:	9201      	str	r2, [sp, #4]
 800d9de:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d9e2:	9004      	str	r0, [sp, #16]
 800d9e4:	9008      	str	r0, [sp, #32]
 800d9e6:	f7f2 fc05 	bl	80001f4 <strlen>
 800d9ea:	4b0c      	ldr	r3, [pc, #48]	; (800da1c <siscanf+0x50>)
 800d9ec:	9005      	str	r0, [sp, #20]
 800d9ee:	9009      	str	r0, [sp, #36]	; 0x24
 800d9f0:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f2:	480b      	ldr	r0, [pc, #44]	; (800da20 <siscanf+0x54>)
 800d9f4:	9a01      	ldr	r2, [sp, #4]
 800d9f6:	6800      	ldr	r0, [r0, #0]
 800d9f8:	9403      	str	r4, [sp, #12]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9311      	str	r3, [sp, #68]	; 0x44
 800d9fe:	9316      	str	r3, [sp, #88]	; 0x58
 800da00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da04:	f8ad 301e 	strh.w	r3, [sp, #30]
 800da08:	a904      	add	r1, sp, #16
 800da0a:	4623      	mov	r3, r4
 800da0c:	f001 fb8e 	bl	800f12c <__ssvfiscanf_r>
 800da10:	b01f      	add	sp, #124	; 0x7c
 800da12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da16:	b003      	add	sp, #12
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	0800da47 	.word	0x0800da47
 800da20:	200001f8 	.word	0x200001f8

0800da24 <__sread>:
 800da24:	b510      	push	{r4, lr}
 800da26:	460c      	mov	r4, r1
 800da28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2c:	f000 f8d2 	bl	800dbd4 <_read_r>
 800da30:	2800      	cmp	r0, #0
 800da32:	bfab      	itete	ge
 800da34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da36:	89a3      	ldrhlt	r3, [r4, #12]
 800da38:	181b      	addge	r3, r3, r0
 800da3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da3e:	bfac      	ite	ge
 800da40:	6563      	strge	r3, [r4, #84]	; 0x54
 800da42:	81a3      	strhlt	r3, [r4, #12]
 800da44:	bd10      	pop	{r4, pc}

0800da46 <__seofread>:
 800da46:	2000      	movs	r0, #0
 800da48:	4770      	bx	lr

0800da4a <__swrite>:
 800da4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4e:	461f      	mov	r7, r3
 800da50:	898b      	ldrh	r3, [r1, #12]
 800da52:	05db      	lsls	r3, r3, #23
 800da54:	4605      	mov	r5, r0
 800da56:	460c      	mov	r4, r1
 800da58:	4616      	mov	r6, r2
 800da5a:	d505      	bpl.n	800da68 <__swrite+0x1e>
 800da5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da60:	2302      	movs	r3, #2
 800da62:	2200      	movs	r2, #0
 800da64:	f000 f8a4 	bl	800dbb0 <_lseek_r>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	4632      	mov	r2, r6
 800da76:	463b      	mov	r3, r7
 800da78:	4628      	mov	r0, r5
 800da7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	f000 b8cb 	b.w	800dc18 <_write_r>

0800da82 <__sseek>:
 800da82:	b510      	push	{r4, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8a:	f000 f891 	bl	800dbb0 <_lseek_r>
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	bf15      	itete	ne
 800da94:	6560      	strne	r0, [r4, #84]	; 0x54
 800da96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da9e:	81a3      	strheq	r3, [r4, #12]
 800daa0:	bf18      	it	ne
 800daa2:	81a3      	strhne	r3, [r4, #12]
 800daa4:	bd10      	pop	{r4, pc}

0800daa6 <__sclose>:
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 b81b 	b.w	800dae4 <_close_r>

0800daae <memset>:
 800daae:	4402      	add	r2, r0
 800dab0:	4603      	mov	r3, r0
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d100      	bne.n	800dab8 <memset+0xa>
 800dab6:	4770      	bx	lr
 800dab8:	f803 1b01 	strb.w	r1, [r3], #1
 800dabc:	e7f9      	b.n	800dab2 <memset+0x4>

0800dabe <strncmp>:
 800dabe:	b510      	push	{r4, lr}
 800dac0:	b16a      	cbz	r2, 800dade <strncmp+0x20>
 800dac2:	3901      	subs	r1, #1
 800dac4:	1884      	adds	r4, r0, r2
 800dac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dace:	429a      	cmp	r2, r3
 800dad0:	d103      	bne.n	800dada <strncmp+0x1c>
 800dad2:	42a0      	cmp	r0, r4
 800dad4:	d001      	beq.n	800dada <strncmp+0x1c>
 800dad6:	2a00      	cmp	r2, #0
 800dad8:	d1f5      	bne.n	800dac6 <strncmp+0x8>
 800dada:	1ad0      	subs	r0, r2, r3
 800dadc:	bd10      	pop	{r4, pc}
 800dade:	4610      	mov	r0, r2
 800dae0:	e7fc      	b.n	800dadc <strncmp+0x1e>
	...

0800dae4 <_close_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d06      	ldr	r5, [pc, #24]	; (800db00 <_close_r+0x1c>)
 800dae8:	2300      	movs	r3, #0
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	602b      	str	r3, [r5, #0]
 800daf0:	f7f6 fd71 	bl	80045d6 <_close>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_close_r+0x1a>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_close_r+0x1a>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	20002be4 	.word	0x20002be4

0800db04 <_reclaim_reent>:
 800db04:	4b29      	ldr	r3, [pc, #164]	; (800dbac <_reclaim_reent+0xa8>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4283      	cmp	r3, r0
 800db0a:	b570      	push	{r4, r5, r6, lr}
 800db0c:	4604      	mov	r4, r0
 800db0e:	d04b      	beq.n	800dba8 <_reclaim_reent+0xa4>
 800db10:	69c3      	ldr	r3, [r0, #28]
 800db12:	b143      	cbz	r3, 800db26 <_reclaim_reent+0x22>
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d144      	bne.n	800dba4 <_reclaim_reent+0xa0>
 800db1a:	69e3      	ldr	r3, [r4, #28]
 800db1c:	6819      	ldr	r1, [r3, #0]
 800db1e:	b111      	cbz	r1, 800db26 <_reclaim_reent+0x22>
 800db20:	4620      	mov	r0, r4
 800db22:	f000 f8d9 	bl	800dcd8 <_free_r>
 800db26:	6961      	ldr	r1, [r4, #20]
 800db28:	b111      	cbz	r1, 800db30 <_reclaim_reent+0x2c>
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 f8d4 	bl	800dcd8 <_free_r>
 800db30:	69e1      	ldr	r1, [r4, #28]
 800db32:	b111      	cbz	r1, 800db3a <_reclaim_reent+0x36>
 800db34:	4620      	mov	r0, r4
 800db36:	f000 f8cf 	bl	800dcd8 <_free_r>
 800db3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800db3c:	b111      	cbz	r1, 800db44 <_reclaim_reent+0x40>
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 f8ca 	bl	800dcd8 <_free_r>
 800db44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db46:	b111      	cbz	r1, 800db4e <_reclaim_reent+0x4a>
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f8c5 	bl	800dcd8 <_free_r>
 800db4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db50:	b111      	cbz	r1, 800db58 <_reclaim_reent+0x54>
 800db52:	4620      	mov	r0, r4
 800db54:	f000 f8c0 	bl	800dcd8 <_free_r>
 800db58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800db5a:	b111      	cbz	r1, 800db62 <_reclaim_reent+0x5e>
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 f8bb 	bl	800dcd8 <_free_r>
 800db62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800db64:	b111      	cbz	r1, 800db6c <_reclaim_reent+0x68>
 800db66:	4620      	mov	r0, r4
 800db68:	f000 f8b6 	bl	800dcd8 <_free_r>
 800db6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db6e:	b111      	cbz	r1, 800db76 <_reclaim_reent+0x72>
 800db70:	4620      	mov	r0, r4
 800db72:	f000 f8b1 	bl	800dcd8 <_free_r>
 800db76:	6a23      	ldr	r3, [r4, #32]
 800db78:	b1b3      	cbz	r3, 800dba8 <_reclaim_reent+0xa4>
 800db7a:	4620      	mov	r0, r4
 800db7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db80:	4718      	bx	r3
 800db82:	5949      	ldr	r1, [r1, r5]
 800db84:	b941      	cbnz	r1, 800db98 <_reclaim_reent+0x94>
 800db86:	3504      	adds	r5, #4
 800db88:	69e3      	ldr	r3, [r4, #28]
 800db8a:	2d80      	cmp	r5, #128	; 0x80
 800db8c:	68d9      	ldr	r1, [r3, #12]
 800db8e:	d1f8      	bne.n	800db82 <_reclaim_reent+0x7e>
 800db90:	4620      	mov	r0, r4
 800db92:	f000 f8a1 	bl	800dcd8 <_free_r>
 800db96:	e7c0      	b.n	800db1a <_reclaim_reent+0x16>
 800db98:	680e      	ldr	r6, [r1, #0]
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 f89c 	bl	800dcd8 <_free_r>
 800dba0:	4631      	mov	r1, r6
 800dba2:	e7ef      	b.n	800db84 <_reclaim_reent+0x80>
 800dba4:	2500      	movs	r5, #0
 800dba6:	e7ef      	b.n	800db88 <_reclaim_reent+0x84>
 800dba8:	bd70      	pop	{r4, r5, r6, pc}
 800dbaa:	bf00      	nop
 800dbac:	200001f8 	.word	0x200001f8

0800dbb0 <_lseek_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	; (800dbd0 <_lseek_r+0x20>)
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f6 fd30 	bl	8004624 <_lseek>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_lseek_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_lseek_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	20002be4 	.word	0x20002be4

0800dbd4 <_read_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d07      	ldr	r5, [pc, #28]	; (800dbf4 <_read_r+0x20>)
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4608      	mov	r0, r1
 800dbdc:	4611      	mov	r1, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	602a      	str	r2, [r5, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	f7f6 fcbe 	bl	8004564 <_read>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_read_r+0x1e>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_read_r+0x1e>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20002be4 	.word	0x20002be4

0800dbf8 <_sbrk_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d06      	ldr	r5, [pc, #24]	; (800dc14 <_sbrk_r+0x1c>)
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	4604      	mov	r4, r0
 800dc00:	4608      	mov	r0, r1
 800dc02:	602b      	str	r3, [r5, #0]
 800dc04:	f7f6 fd1c 	bl	8004640 <_sbrk>
 800dc08:	1c43      	adds	r3, r0, #1
 800dc0a:	d102      	bne.n	800dc12 <_sbrk_r+0x1a>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b103      	cbz	r3, 800dc12 <_sbrk_r+0x1a>
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	bd38      	pop	{r3, r4, r5, pc}
 800dc14:	20002be4 	.word	0x20002be4

0800dc18 <_write_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d07      	ldr	r5, [pc, #28]	; (800dc38 <_write_r+0x20>)
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	4608      	mov	r0, r1
 800dc20:	4611      	mov	r1, r2
 800dc22:	2200      	movs	r2, #0
 800dc24:	602a      	str	r2, [r5, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	f7f6 fcb9 	bl	800459e <_write>
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	d102      	bne.n	800dc36 <_write_r+0x1e>
 800dc30:	682b      	ldr	r3, [r5, #0]
 800dc32:	b103      	cbz	r3, 800dc36 <_write_r+0x1e>
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	20002be4 	.word	0x20002be4

0800dc3c <__errno>:
 800dc3c:	4b01      	ldr	r3, [pc, #4]	; (800dc44 <__errno+0x8>)
 800dc3e:	6818      	ldr	r0, [r3, #0]
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	200001f8 	.word	0x200001f8

0800dc48 <__libc_init_array>:
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	4d0d      	ldr	r5, [pc, #52]	; (800dc80 <__libc_init_array+0x38>)
 800dc4c:	4c0d      	ldr	r4, [pc, #52]	; (800dc84 <__libc_init_array+0x3c>)
 800dc4e:	1b64      	subs	r4, r4, r5
 800dc50:	10a4      	asrs	r4, r4, #2
 800dc52:	2600      	movs	r6, #0
 800dc54:	42a6      	cmp	r6, r4
 800dc56:	d109      	bne.n	800dc6c <__libc_init_array+0x24>
 800dc58:	4d0b      	ldr	r5, [pc, #44]	; (800dc88 <__libc_init_array+0x40>)
 800dc5a:	4c0c      	ldr	r4, [pc, #48]	; (800dc8c <__libc_init_array+0x44>)
 800dc5c:	f002 fbde 	bl	801041c <_init>
 800dc60:	1b64      	subs	r4, r4, r5
 800dc62:	10a4      	asrs	r4, r4, #2
 800dc64:	2600      	movs	r6, #0
 800dc66:	42a6      	cmp	r6, r4
 800dc68:	d105      	bne.n	800dc76 <__libc_init_array+0x2e>
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}
 800dc6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc70:	4798      	blx	r3
 800dc72:	3601      	adds	r6, #1
 800dc74:	e7ee      	b.n	800dc54 <__libc_init_array+0xc>
 800dc76:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7a:	4798      	blx	r3
 800dc7c:	3601      	adds	r6, #1
 800dc7e:	e7f2      	b.n	800dc66 <__libc_init_array+0x1e>
 800dc80:	08010a80 	.word	0x08010a80
 800dc84:	08010a80 	.word	0x08010a80
 800dc88:	08010a80 	.word	0x08010a80
 800dc8c:	08010a84 	.word	0x08010a84

0800dc90 <__retarget_lock_init_recursive>:
 800dc90:	4770      	bx	lr

0800dc92 <__retarget_lock_acquire_recursive>:
 800dc92:	4770      	bx	lr

0800dc94 <__retarget_lock_release_recursive>:
 800dc94:	4770      	bx	lr

0800dc96 <strcpy>:
 800dc96:	4603      	mov	r3, r0
 800dc98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc9c:	f803 2b01 	strb.w	r2, [r3], #1
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d1f9      	bne.n	800dc98 <strcpy+0x2>
 800dca4:	4770      	bx	lr

0800dca6 <memcpy>:
 800dca6:	440a      	add	r2, r1
 800dca8:	4291      	cmp	r1, r2
 800dcaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcae:	d100      	bne.n	800dcb2 <memcpy+0xc>
 800dcb0:	4770      	bx	lr
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcbc:	4291      	cmp	r1, r2
 800dcbe:	d1f9      	bne.n	800dcb4 <memcpy+0xe>
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	0000      	movs	r0, r0
 800dcc4:	0000      	movs	r0, r0
	...

0800dcc8 <nan>:
 800dcc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dcd0 <nan+0x8>
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	00000000 	.word	0x00000000
 800dcd4:	7ff80000 	.word	0x7ff80000

0800dcd8 <_free_r>:
 800dcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcda:	2900      	cmp	r1, #0
 800dcdc:	d044      	beq.n	800dd68 <_free_r+0x90>
 800dcde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dce2:	9001      	str	r0, [sp, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f1a1 0404 	sub.w	r4, r1, #4
 800dcea:	bfb8      	it	lt
 800dcec:	18e4      	addlt	r4, r4, r3
 800dcee:	f7fe ff2d 	bl	800cb4c <__malloc_lock>
 800dcf2:	4a1e      	ldr	r2, [pc, #120]	; (800dd6c <_free_r+0x94>)
 800dcf4:	9801      	ldr	r0, [sp, #4]
 800dcf6:	6813      	ldr	r3, [r2, #0]
 800dcf8:	b933      	cbnz	r3, 800dd08 <_free_r+0x30>
 800dcfa:	6063      	str	r3, [r4, #4]
 800dcfc:	6014      	str	r4, [r2, #0]
 800dcfe:	b003      	add	sp, #12
 800dd00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd04:	f7fe bf28 	b.w	800cb58 <__malloc_unlock>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d908      	bls.n	800dd1e <_free_r+0x46>
 800dd0c:	6825      	ldr	r5, [r4, #0]
 800dd0e:	1961      	adds	r1, r4, r5
 800dd10:	428b      	cmp	r3, r1
 800dd12:	bf01      	itttt	eq
 800dd14:	6819      	ldreq	r1, [r3, #0]
 800dd16:	685b      	ldreq	r3, [r3, #4]
 800dd18:	1949      	addeq	r1, r1, r5
 800dd1a:	6021      	streq	r1, [r4, #0]
 800dd1c:	e7ed      	b.n	800dcfa <_free_r+0x22>
 800dd1e:	461a      	mov	r2, r3
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	b10b      	cbz	r3, 800dd28 <_free_r+0x50>
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d9fa      	bls.n	800dd1e <_free_r+0x46>
 800dd28:	6811      	ldr	r1, [r2, #0]
 800dd2a:	1855      	adds	r5, r2, r1
 800dd2c:	42a5      	cmp	r5, r4
 800dd2e:	d10b      	bne.n	800dd48 <_free_r+0x70>
 800dd30:	6824      	ldr	r4, [r4, #0]
 800dd32:	4421      	add	r1, r4
 800dd34:	1854      	adds	r4, r2, r1
 800dd36:	42a3      	cmp	r3, r4
 800dd38:	6011      	str	r1, [r2, #0]
 800dd3a:	d1e0      	bne.n	800dcfe <_free_r+0x26>
 800dd3c:	681c      	ldr	r4, [r3, #0]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	6053      	str	r3, [r2, #4]
 800dd42:	440c      	add	r4, r1
 800dd44:	6014      	str	r4, [r2, #0]
 800dd46:	e7da      	b.n	800dcfe <_free_r+0x26>
 800dd48:	d902      	bls.n	800dd50 <_free_r+0x78>
 800dd4a:	230c      	movs	r3, #12
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	e7d6      	b.n	800dcfe <_free_r+0x26>
 800dd50:	6825      	ldr	r5, [r4, #0]
 800dd52:	1961      	adds	r1, r4, r5
 800dd54:	428b      	cmp	r3, r1
 800dd56:	bf04      	itt	eq
 800dd58:	6819      	ldreq	r1, [r3, #0]
 800dd5a:	685b      	ldreq	r3, [r3, #4]
 800dd5c:	6063      	str	r3, [r4, #4]
 800dd5e:	bf04      	itt	eq
 800dd60:	1949      	addeq	r1, r1, r5
 800dd62:	6021      	streq	r1, [r4, #0]
 800dd64:	6054      	str	r4, [r2, #4]
 800dd66:	e7ca      	b.n	800dcfe <_free_r+0x26>
 800dd68:	b003      	add	sp, #12
 800dd6a:	bd30      	pop	{r4, r5, pc}
 800dd6c:	20002aa0 	.word	0x20002aa0

0800dd70 <rshift>:
 800dd70:	6903      	ldr	r3, [r0, #16]
 800dd72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd7e:	f100 0414 	add.w	r4, r0, #20
 800dd82:	dd45      	ble.n	800de10 <rshift+0xa0>
 800dd84:	f011 011f 	ands.w	r1, r1, #31
 800dd88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd90:	d10c      	bne.n	800ddac <rshift+0x3c>
 800dd92:	f100 0710 	add.w	r7, r0, #16
 800dd96:	4629      	mov	r1, r5
 800dd98:	42b1      	cmp	r1, r6
 800dd9a:	d334      	bcc.n	800de06 <rshift+0x96>
 800dd9c:	1a9b      	subs	r3, r3, r2
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	1eea      	subs	r2, r5, #3
 800dda2:	4296      	cmp	r6, r2
 800dda4:	bf38      	it	cc
 800dda6:	2300      	movcc	r3, #0
 800dda8:	4423      	add	r3, r4
 800ddaa:	e015      	b.n	800ddd8 <rshift+0x68>
 800ddac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ddb0:	f1c1 0820 	rsb	r8, r1, #32
 800ddb4:	40cf      	lsrs	r7, r1
 800ddb6:	f105 0e04 	add.w	lr, r5, #4
 800ddba:	46a1      	mov	r9, r4
 800ddbc:	4576      	cmp	r6, lr
 800ddbe:	46f4      	mov	ip, lr
 800ddc0:	d815      	bhi.n	800ddee <rshift+0x7e>
 800ddc2:	1a9a      	subs	r2, r3, r2
 800ddc4:	0092      	lsls	r2, r2, #2
 800ddc6:	3a04      	subs	r2, #4
 800ddc8:	3501      	adds	r5, #1
 800ddca:	42ae      	cmp	r6, r5
 800ddcc:	bf38      	it	cc
 800ddce:	2200      	movcc	r2, #0
 800ddd0:	18a3      	adds	r3, r4, r2
 800ddd2:	50a7      	str	r7, [r4, r2]
 800ddd4:	b107      	cbz	r7, 800ddd8 <rshift+0x68>
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	1b1a      	subs	r2, r3, r4
 800ddda:	42a3      	cmp	r3, r4
 800dddc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dde0:	bf08      	it	eq
 800dde2:	2300      	moveq	r3, #0
 800dde4:	6102      	str	r2, [r0, #16]
 800dde6:	bf08      	it	eq
 800dde8:	6143      	streq	r3, [r0, #20]
 800ddea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddee:	f8dc c000 	ldr.w	ip, [ip]
 800ddf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddf6:	ea4c 0707 	orr.w	r7, ip, r7
 800ddfa:	f849 7b04 	str.w	r7, [r9], #4
 800ddfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de02:	40cf      	lsrs	r7, r1
 800de04:	e7da      	b.n	800ddbc <rshift+0x4c>
 800de06:	f851 cb04 	ldr.w	ip, [r1], #4
 800de0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800de0e:	e7c3      	b.n	800dd98 <rshift+0x28>
 800de10:	4623      	mov	r3, r4
 800de12:	e7e1      	b.n	800ddd8 <rshift+0x68>

0800de14 <__hexdig_fun>:
 800de14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de18:	2b09      	cmp	r3, #9
 800de1a:	d802      	bhi.n	800de22 <__hexdig_fun+0xe>
 800de1c:	3820      	subs	r0, #32
 800de1e:	b2c0      	uxtb	r0, r0
 800de20:	4770      	bx	lr
 800de22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de26:	2b05      	cmp	r3, #5
 800de28:	d801      	bhi.n	800de2e <__hexdig_fun+0x1a>
 800de2a:	3847      	subs	r0, #71	; 0x47
 800de2c:	e7f7      	b.n	800de1e <__hexdig_fun+0xa>
 800de2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de32:	2b05      	cmp	r3, #5
 800de34:	d801      	bhi.n	800de3a <__hexdig_fun+0x26>
 800de36:	3827      	subs	r0, #39	; 0x27
 800de38:	e7f1      	b.n	800de1e <__hexdig_fun+0xa>
 800de3a:	2000      	movs	r0, #0
 800de3c:	4770      	bx	lr
	...

0800de40 <__gethex>:
 800de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	4617      	mov	r7, r2
 800de46:	680a      	ldr	r2, [r1, #0]
 800de48:	b085      	sub	sp, #20
 800de4a:	f102 0b02 	add.w	fp, r2, #2
 800de4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de56:	4681      	mov	r9, r0
 800de58:	468a      	mov	sl, r1
 800de5a:	9302      	str	r3, [sp, #8]
 800de5c:	32fe      	adds	r2, #254	; 0xfe
 800de5e:	eb02 030b 	add.w	r3, r2, fp
 800de62:	46d8      	mov	r8, fp
 800de64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	2830      	cmp	r0, #48	; 0x30
 800de6c:	d0f7      	beq.n	800de5e <__gethex+0x1e>
 800de6e:	f7ff ffd1 	bl	800de14 <__hexdig_fun>
 800de72:	4604      	mov	r4, r0
 800de74:	2800      	cmp	r0, #0
 800de76:	d138      	bne.n	800deea <__gethex+0xaa>
 800de78:	49a7      	ldr	r1, [pc, #668]	; (800e118 <__gethex+0x2d8>)
 800de7a:	2201      	movs	r2, #1
 800de7c:	4640      	mov	r0, r8
 800de7e:	f7ff fe1e 	bl	800dabe <strncmp>
 800de82:	4606      	mov	r6, r0
 800de84:	2800      	cmp	r0, #0
 800de86:	d169      	bne.n	800df5c <__gethex+0x11c>
 800de88:	f898 0001 	ldrb.w	r0, [r8, #1]
 800de8c:	465d      	mov	r5, fp
 800de8e:	f7ff ffc1 	bl	800de14 <__hexdig_fun>
 800de92:	2800      	cmp	r0, #0
 800de94:	d064      	beq.n	800df60 <__gethex+0x120>
 800de96:	465a      	mov	r2, fp
 800de98:	7810      	ldrb	r0, [r2, #0]
 800de9a:	2830      	cmp	r0, #48	; 0x30
 800de9c:	4690      	mov	r8, r2
 800de9e:	f102 0201 	add.w	r2, r2, #1
 800dea2:	d0f9      	beq.n	800de98 <__gethex+0x58>
 800dea4:	f7ff ffb6 	bl	800de14 <__hexdig_fun>
 800dea8:	2301      	movs	r3, #1
 800deaa:	fab0 f480 	clz	r4, r0
 800deae:	0964      	lsrs	r4, r4, #5
 800deb0:	465e      	mov	r6, fp
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	4642      	mov	r2, r8
 800deb6:	4615      	mov	r5, r2
 800deb8:	3201      	adds	r2, #1
 800deba:	7828      	ldrb	r0, [r5, #0]
 800debc:	f7ff ffaa 	bl	800de14 <__hexdig_fun>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d1f8      	bne.n	800deb6 <__gethex+0x76>
 800dec4:	4994      	ldr	r1, [pc, #592]	; (800e118 <__gethex+0x2d8>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	4628      	mov	r0, r5
 800deca:	f7ff fdf8 	bl	800dabe <strncmp>
 800dece:	b978      	cbnz	r0, 800def0 <__gethex+0xb0>
 800ded0:	b946      	cbnz	r6, 800dee4 <__gethex+0xa4>
 800ded2:	1c6e      	adds	r6, r5, #1
 800ded4:	4632      	mov	r2, r6
 800ded6:	4615      	mov	r5, r2
 800ded8:	3201      	adds	r2, #1
 800deda:	7828      	ldrb	r0, [r5, #0]
 800dedc:	f7ff ff9a 	bl	800de14 <__hexdig_fun>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d1f8      	bne.n	800ded6 <__gethex+0x96>
 800dee4:	1b73      	subs	r3, r6, r5
 800dee6:	009e      	lsls	r6, r3, #2
 800dee8:	e004      	b.n	800def4 <__gethex+0xb4>
 800deea:	2400      	movs	r4, #0
 800deec:	4626      	mov	r6, r4
 800deee:	e7e1      	b.n	800deb4 <__gethex+0x74>
 800def0:	2e00      	cmp	r6, #0
 800def2:	d1f7      	bne.n	800dee4 <__gethex+0xa4>
 800def4:	782b      	ldrb	r3, [r5, #0]
 800def6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800defa:	2b50      	cmp	r3, #80	; 0x50
 800defc:	d13d      	bne.n	800df7a <__gethex+0x13a>
 800defe:	786b      	ldrb	r3, [r5, #1]
 800df00:	2b2b      	cmp	r3, #43	; 0x2b
 800df02:	d02f      	beq.n	800df64 <__gethex+0x124>
 800df04:	2b2d      	cmp	r3, #45	; 0x2d
 800df06:	d031      	beq.n	800df6c <__gethex+0x12c>
 800df08:	1c69      	adds	r1, r5, #1
 800df0a:	f04f 0b00 	mov.w	fp, #0
 800df0e:	7808      	ldrb	r0, [r1, #0]
 800df10:	f7ff ff80 	bl	800de14 <__hexdig_fun>
 800df14:	1e42      	subs	r2, r0, #1
 800df16:	b2d2      	uxtb	r2, r2
 800df18:	2a18      	cmp	r2, #24
 800df1a:	d82e      	bhi.n	800df7a <__gethex+0x13a>
 800df1c:	f1a0 0210 	sub.w	r2, r0, #16
 800df20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df24:	f7ff ff76 	bl	800de14 <__hexdig_fun>
 800df28:	f100 3cff 	add.w	ip, r0, #4294967295
 800df2c:	fa5f fc8c 	uxtb.w	ip, ip
 800df30:	f1bc 0f18 	cmp.w	ip, #24
 800df34:	d91d      	bls.n	800df72 <__gethex+0x132>
 800df36:	f1bb 0f00 	cmp.w	fp, #0
 800df3a:	d000      	beq.n	800df3e <__gethex+0xfe>
 800df3c:	4252      	negs	r2, r2
 800df3e:	4416      	add	r6, r2
 800df40:	f8ca 1000 	str.w	r1, [sl]
 800df44:	b1dc      	cbz	r4, 800df7e <__gethex+0x13e>
 800df46:	9b01      	ldr	r3, [sp, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bf14      	ite	ne
 800df4c:	f04f 0800 	movne.w	r8, #0
 800df50:	f04f 0806 	moveq.w	r8, #6
 800df54:	4640      	mov	r0, r8
 800df56:	b005      	add	sp, #20
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	4645      	mov	r5, r8
 800df5e:	4626      	mov	r6, r4
 800df60:	2401      	movs	r4, #1
 800df62:	e7c7      	b.n	800def4 <__gethex+0xb4>
 800df64:	f04f 0b00 	mov.w	fp, #0
 800df68:	1ca9      	adds	r1, r5, #2
 800df6a:	e7d0      	b.n	800df0e <__gethex+0xce>
 800df6c:	f04f 0b01 	mov.w	fp, #1
 800df70:	e7fa      	b.n	800df68 <__gethex+0x128>
 800df72:	230a      	movs	r3, #10
 800df74:	fb03 0002 	mla	r0, r3, r2, r0
 800df78:	e7d0      	b.n	800df1c <__gethex+0xdc>
 800df7a:	4629      	mov	r1, r5
 800df7c:	e7e0      	b.n	800df40 <__gethex+0x100>
 800df7e:	eba5 0308 	sub.w	r3, r5, r8
 800df82:	3b01      	subs	r3, #1
 800df84:	4621      	mov	r1, r4
 800df86:	2b07      	cmp	r3, #7
 800df88:	dc0a      	bgt.n	800dfa0 <__gethex+0x160>
 800df8a:	4648      	mov	r0, r9
 800df8c:	f000 fa5a 	bl	800e444 <_Balloc>
 800df90:	4604      	mov	r4, r0
 800df92:	b940      	cbnz	r0, 800dfa6 <__gethex+0x166>
 800df94:	4b61      	ldr	r3, [pc, #388]	; (800e11c <__gethex+0x2dc>)
 800df96:	4602      	mov	r2, r0
 800df98:	21e4      	movs	r1, #228	; 0xe4
 800df9a:	4861      	ldr	r0, [pc, #388]	; (800e120 <__gethex+0x2e0>)
 800df9c:	f001 fe58 	bl	800fc50 <__assert_func>
 800dfa0:	3101      	adds	r1, #1
 800dfa2:	105b      	asrs	r3, r3, #1
 800dfa4:	e7ef      	b.n	800df86 <__gethex+0x146>
 800dfa6:	f100 0a14 	add.w	sl, r0, #20
 800dfaa:	2300      	movs	r3, #0
 800dfac:	495a      	ldr	r1, [pc, #360]	; (800e118 <__gethex+0x2d8>)
 800dfae:	f8cd a004 	str.w	sl, [sp, #4]
 800dfb2:	469b      	mov	fp, r3
 800dfb4:	45a8      	cmp	r8, r5
 800dfb6:	d342      	bcc.n	800e03e <__gethex+0x1fe>
 800dfb8:	9801      	ldr	r0, [sp, #4]
 800dfba:	f840 bb04 	str.w	fp, [r0], #4
 800dfbe:	eba0 000a 	sub.w	r0, r0, sl
 800dfc2:	1080      	asrs	r0, r0, #2
 800dfc4:	6120      	str	r0, [r4, #16]
 800dfc6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800dfca:	4658      	mov	r0, fp
 800dfcc:	f000 fb2c 	bl	800e628 <__hi0bits>
 800dfd0:	683d      	ldr	r5, [r7, #0]
 800dfd2:	eba8 0000 	sub.w	r0, r8, r0
 800dfd6:	42a8      	cmp	r0, r5
 800dfd8:	dd59      	ble.n	800e08e <__gethex+0x24e>
 800dfda:	eba0 0805 	sub.w	r8, r0, r5
 800dfde:	4641      	mov	r1, r8
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 febb 	bl	800ed5c <__any_on>
 800dfe6:	4683      	mov	fp, r0
 800dfe8:	b1b8      	cbz	r0, 800e01a <__gethex+0x1da>
 800dfea:	f108 33ff 	add.w	r3, r8, #4294967295
 800dfee:	1159      	asrs	r1, r3, #5
 800dff0:	f003 021f 	and.w	r2, r3, #31
 800dff4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dff8:	f04f 0b01 	mov.w	fp, #1
 800dffc:	fa0b f202 	lsl.w	r2, fp, r2
 800e000:	420a      	tst	r2, r1
 800e002:	d00a      	beq.n	800e01a <__gethex+0x1da>
 800e004:	455b      	cmp	r3, fp
 800e006:	dd06      	ble.n	800e016 <__gethex+0x1d6>
 800e008:	f1a8 0102 	sub.w	r1, r8, #2
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 fea5 	bl	800ed5c <__any_on>
 800e012:	2800      	cmp	r0, #0
 800e014:	d138      	bne.n	800e088 <__gethex+0x248>
 800e016:	f04f 0b02 	mov.w	fp, #2
 800e01a:	4641      	mov	r1, r8
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff fea7 	bl	800dd70 <rshift>
 800e022:	4446      	add	r6, r8
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	42b3      	cmp	r3, r6
 800e028:	da41      	bge.n	800e0ae <__gethex+0x26e>
 800e02a:	4621      	mov	r1, r4
 800e02c:	4648      	mov	r0, r9
 800e02e:	f000 fa49 	bl	800e4c4 <_Bfree>
 800e032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e034:	2300      	movs	r3, #0
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e03c:	e78a      	b.n	800df54 <__gethex+0x114>
 800e03e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e042:	2a2e      	cmp	r2, #46	; 0x2e
 800e044:	d014      	beq.n	800e070 <__gethex+0x230>
 800e046:	2b20      	cmp	r3, #32
 800e048:	d106      	bne.n	800e058 <__gethex+0x218>
 800e04a:	9b01      	ldr	r3, [sp, #4]
 800e04c:	f843 bb04 	str.w	fp, [r3], #4
 800e050:	f04f 0b00 	mov.w	fp, #0
 800e054:	9301      	str	r3, [sp, #4]
 800e056:	465b      	mov	r3, fp
 800e058:	7828      	ldrb	r0, [r5, #0]
 800e05a:	9303      	str	r3, [sp, #12]
 800e05c:	f7ff feda 	bl	800de14 <__hexdig_fun>
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	f000 000f 	and.w	r0, r0, #15
 800e066:	4098      	lsls	r0, r3
 800e068:	ea4b 0b00 	orr.w	fp, fp, r0
 800e06c:	3304      	adds	r3, #4
 800e06e:	e7a1      	b.n	800dfb4 <__gethex+0x174>
 800e070:	45a8      	cmp	r8, r5
 800e072:	d8e8      	bhi.n	800e046 <__gethex+0x206>
 800e074:	2201      	movs	r2, #1
 800e076:	4628      	mov	r0, r5
 800e078:	9303      	str	r3, [sp, #12]
 800e07a:	f7ff fd20 	bl	800dabe <strncmp>
 800e07e:	4926      	ldr	r1, [pc, #152]	; (800e118 <__gethex+0x2d8>)
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	2800      	cmp	r0, #0
 800e084:	d1df      	bne.n	800e046 <__gethex+0x206>
 800e086:	e795      	b.n	800dfb4 <__gethex+0x174>
 800e088:	f04f 0b03 	mov.w	fp, #3
 800e08c:	e7c5      	b.n	800e01a <__gethex+0x1da>
 800e08e:	da0b      	bge.n	800e0a8 <__gethex+0x268>
 800e090:	eba5 0800 	sub.w	r8, r5, r0
 800e094:	4621      	mov	r1, r4
 800e096:	4642      	mov	r2, r8
 800e098:	4648      	mov	r0, r9
 800e09a:	f000 fc2d 	bl	800e8f8 <__lshift>
 800e09e:	eba6 0608 	sub.w	r6, r6, r8
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	f100 0a14 	add.w	sl, r0, #20
 800e0a8:	f04f 0b00 	mov.w	fp, #0
 800e0ac:	e7ba      	b.n	800e024 <__gethex+0x1e4>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	42b3      	cmp	r3, r6
 800e0b2:	dd73      	ble.n	800e19c <__gethex+0x35c>
 800e0b4:	1b9e      	subs	r6, r3, r6
 800e0b6:	42b5      	cmp	r5, r6
 800e0b8:	dc34      	bgt.n	800e124 <__gethex+0x2e4>
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d023      	beq.n	800e108 <__gethex+0x2c8>
 800e0c0:	2b03      	cmp	r3, #3
 800e0c2:	d025      	beq.n	800e110 <__gethex+0x2d0>
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d115      	bne.n	800e0f4 <__gethex+0x2b4>
 800e0c8:	42b5      	cmp	r5, r6
 800e0ca:	d113      	bne.n	800e0f4 <__gethex+0x2b4>
 800e0cc:	2d01      	cmp	r5, #1
 800e0ce:	d10b      	bne.n	800e0e8 <__gethex+0x2a8>
 800e0d0:	9a02      	ldr	r2, [sp, #8]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6013      	str	r3, [r2, #0]
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	6123      	str	r3, [r4, #16]
 800e0da:	f8ca 3000 	str.w	r3, [sl]
 800e0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e0e4:	601c      	str	r4, [r3, #0]
 800e0e6:	e735      	b.n	800df54 <__gethex+0x114>
 800e0e8:	1e69      	subs	r1, r5, #1
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fe36 	bl	800ed5c <__any_on>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d1ed      	bne.n	800e0d0 <__gethex+0x290>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4648      	mov	r0, r9
 800e0f8:	f000 f9e4 	bl	800e4c4 <_Bfree>
 800e0fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0fe:	2300      	movs	r3, #0
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e106:	e725      	b.n	800df54 <__gethex+0x114>
 800e108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1f2      	bne.n	800e0f4 <__gethex+0x2b4>
 800e10e:	e7df      	b.n	800e0d0 <__gethex+0x290>
 800e110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1dc      	bne.n	800e0d0 <__gethex+0x290>
 800e116:	e7ed      	b.n	800e0f4 <__gethex+0x2b4>
 800e118:	0801069c 	.word	0x0801069c
 800e11c:	08010809 	.word	0x08010809
 800e120:	0801081a 	.word	0x0801081a
 800e124:	f106 38ff 	add.w	r8, r6, #4294967295
 800e128:	f1bb 0f00 	cmp.w	fp, #0
 800e12c:	d133      	bne.n	800e196 <__gethex+0x356>
 800e12e:	f1b8 0f00 	cmp.w	r8, #0
 800e132:	d004      	beq.n	800e13e <__gethex+0x2fe>
 800e134:	4641      	mov	r1, r8
 800e136:	4620      	mov	r0, r4
 800e138:	f000 fe10 	bl	800ed5c <__any_on>
 800e13c:	4683      	mov	fp, r0
 800e13e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e142:	2301      	movs	r3, #1
 800e144:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e148:	f008 081f 	and.w	r8, r8, #31
 800e14c:	fa03 f308 	lsl.w	r3, r3, r8
 800e150:	4213      	tst	r3, r2
 800e152:	4631      	mov	r1, r6
 800e154:	4620      	mov	r0, r4
 800e156:	bf18      	it	ne
 800e158:	f04b 0b02 	orrne.w	fp, fp, #2
 800e15c:	1bad      	subs	r5, r5, r6
 800e15e:	f7ff fe07 	bl	800dd70 <rshift>
 800e162:	687e      	ldr	r6, [r7, #4]
 800e164:	f04f 0802 	mov.w	r8, #2
 800e168:	f1bb 0f00 	cmp.w	fp, #0
 800e16c:	d04a      	beq.n	800e204 <__gethex+0x3c4>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b02      	cmp	r3, #2
 800e172:	d016      	beq.n	800e1a2 <__gethex+0x362>
 800e174:	2b03      	cmp	r3, #3
 800e176:	d018      	beq.n	800e1aa <__gethex+0x36a>
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d109      	bne.n	800e190 <__gethex+0x350>
 800e17c:	f01b 0f02 	tst.w	fp, #2
 800e180:	d006      	beq.n	800e190 <__gethex+0x350>
 800e182:	f8da 3000 	ldr.w	r3, [sl]
 800e186:	ea4b 0b03 	orr.w	fp, fp, r3
 800e18a:	f01b 0f01 	tst.w	fp, #1
 800e18e:	d10f      	bne.n	800e1b0 <__gethex+0x370>
 800e190:	f048 0810 	orr.w	r8, r8, #16
 800e194:	e036      	b.n	800e204 <__gethex+0x3c4>
 800e196:	f04f 0b01 	mov.w	fp, #1
 800e19a:	e7d0      	b.n	800e13e <__gethex+0x2fe>
 800e19c:	f04f 0801 	mov.w	r8, #1
 800e1a0:	e7e2      	b.n	800e168 <__gethex+0x328>
 800e1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1a4:	f1c3 0301 	rsb	r3, r3, #1
 800e1a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d0ef      	beq.n	800e190 <__gethex+0x350>
 800e1b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1b4:	f104 0214 	add.w	r2, r4, #20
 800e1b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	4694      	mov	ip, r2
 800e1c6:	f852 1b04 	ldr.w	r1, [r2], #4
 800e1ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e1ce:	d01e      	beq.n	800e20e <__gethex+0x3ce>
 800e1d0:	3101      	adds	r1, #1
 800e1d2:	f8cc 1000 	str.w	r1, [ip]
 800e1d6:	f1b8 0f02 	cmp.w	r8, #2
 800e1da:	f104 0214 	add.w	r2, r4, #20
 800e1de:	d13d      	bne.n	800e25c <__gethex+0x41c>
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	d10b      	bne.n	800e200 <__gethex+0x3c0>
 800e1e8:	1169      	asrs	r1, r5, #5
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	f005 051f 	and.w	r5, r5, #31
 800e1f0:	fa03 f505 	lsl.w	r5, r3, r5
 800e1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1f8:	421d      	tst	r5, r3
 800e1fa:	bf18      	it	ne
 800e1fc:	f04f 0801 	movne.w	r8, #1
 800e200:	f048 0820 	orr.w	r8, r8, #32
 800e204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e206:	601c      	str	r4, [r3, #0]
 800e208:	9b02      	ldr	r3, [sp, #8]
 800e20a:	601e      	str	r6, [r3, #0]
 800e20c:	e6a2      	b.n	800df54 <__gethex+0x114>
 800e20e:	4290      	cmp	r0, r2
 800e210:	f842 3c04 	str.w	r3, [r2, #-4]
 800e214:	d8d6      	bhi.n	800e1c4 <__gethex+0x384>
 800e216:	68a2      	ldr	r2, [r4, #8]
 800e218:	4593      	cmp	fp, r2
 800e21a:	db17      	blt.n	800e24c <__gethex+0x40c>
 800e21c:	6861      	ldr	r1, [r4, #4]
 800e21e:	4648      	mov	r0, r9
 800e220:	3101      	adds	r1, #1
 800e222:	f000 f90f 	bl	800e444 <_Balloc>
 800e226:	4682      	mov	sl, r0
 800e228:	b918      	cbnz	r0, 800e232 <__gethex+0x3f2>
 800e22a:	4b1b      	ldr	r3, [pc, #108]	; (800e298 <__gethex+0x458>)
 800e22c:	4602      	mov	r2, r0
 800e22e:	2184      	movs	r1, #132	; 0x84
 800e230:	e6b3      	b.n	800df9a <__gethex+0x15a>
 800e232:	6922      	ldr	r2, [r4, #16]
 800e234:	3202      	adds	r2, #2
 800e236:	f104 010c 	add.w	r1, r4, #12
 800e23a:	0092      	lsls	r2, r2, #2
 800e23c:	300c      	adds	r0, #12
 800e23e:	f7ff fd32 	bl	800dca6 <memcpy>
 800e242:	4621      	mov	r1, r4
 800e244:	4648      	mov	r0, r9
 800e246:	f000 f93d 	bl	800e4c4 <_Bfree>
 800e24a:	4654      	mov	r4, sl
 800e24c:	6922      	ldr	r2, [r4, #16]
 800e24e:	1c51      	adds	r1, r2, #1
 800e250:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e254:	6121      	str	r1, [r4, #16]
 800e256:	2101      	movs	r1, #1
 800e258:	6151      	str	r1, [r2, #20]
 800e25a:	e7bc      	b.n	800e1d6 <__gethex+0x396>
 800e25c:	6921      	ldr	r1, [r4, #16]
 800e25e:	4559      	cmp	r1, fp
 800e260:	dd0b      	ble.n	800e27a <__gethex+0x43a>
 800e262:	2101      	movs	r1, #1
 800e264:	4620      	mov	r0, r4
 800e266:	f7ff fd83 	bl	800dd70 <rshift>
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3601      	adds	r6, #1
 800e26e:	42b3      	cmp	r3, r6
 800e270:	f6ff aedb 	blt.w	800e02a <__gethex+0x1ea>
 800e274:	f04f 0801 	mov.w	r8, #1
 800e278:	e7c2      	b.n	800e200 <__gethex+0x3c0>
 800e27a:	f015 051f 	ands.w	r5, r5, #31
 800e27e:	d0f9      	beq.n	800e274 <__gethex+0x434>
 800e280:	9b01      	ldr	r3, [sp, #4]
 800e282:	441a      	add	r2, r3
 800e284:	f1c5 0520 	rsb	r5, r5, #32
 800e288:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e28c:	f000 f9cc 	bl	800e628 <__hi0bits>
 800e290:	42a8      	cmp	r0, r5
 800e292:	dbe6      	blt.n	800e262 <__gethex+0x422>
 800e294:	e7ee      	b.n	800e274 <__gethex+0x434>
 800e296:	bf00      	nop
 800e298:	08010809 	.word	0x08010809

0800e29c <L_shift>:
 800e29c:	f1c2 0208 	rsb	r2, r2, #8
 800e2a0:	0092      	lsls	r2, r2, #2
 800e2a2:	b570      	push	{r4, r5, r6, lr}
 800e2a4:	f1c2 0620 	rsb	r6, r2, #32
 800e2a8:	6843      	ldr	r3, [r0, #4]
 800e2aa:	6804      	ldr	r4, [r0, #0]
 800e2ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e2b0:	432c      	orrs	r4, r5
 800e2b2:	40d3      	lsrs	r3, r2
 800e2b4:	6004      	str	r4, [r0, #0]
 800e2b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2ba:	4288      	cmp	r0, r1
 800e2bc:	d3f4      	bcc.n	800e2a8 <L_shift+0xc>
 800e2be:	bd70      	pop	{r4, r5, r6, pc}

0800e2c0 <__match>:
 800e2c0:	b530      	push	{r4, r5, lr}
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ca:	b914      	cbnz	r4, 800e2d2 <__match+0x12>
 800e2cc:	6003      	str	r3, [r0, #0]
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	bd30      	pop	{r4, r5, pc}
 800e2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2da:	2d19      	cmp	r5, #25
 800e2dc:	bf98      	it	ls
 800e2de:	3220      	addls	r2, #32
 800e2e0:	42a2      	cmp	r2, r4
 800e2e2:	d0f0      	beq.n	800e2c6 <__match+0x6>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	e7f3      	b.n	800e2d0 <__match+0x10>

0800e2e8 <__hexnan>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	680b      	ldr	r3, [r1, #0]
 800e2ee:	6801      	ldr	r1, [r0, #0]
 800e2f0:	115e      	asrs	r6, r3, #5
 800e2f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2f6:	f013 031f 	ands.w	r3, r3, #31
 800e2fa:	b087      	sub	sp, #28
 800e2fc:	bf18      	it	ne
 800e2fe:	3604      	addne	r6, #4
 800e300:	2500      	movs	r5, #0
 800e302:	1f37      	subs	r7, r6, #4
 800e304:	4682      	mov	sl, r0
 800e306:	4690      	mov	r8, r2
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e30e:	46b9      	mov	r9, r7
 800e310:	463c      	mov	r4, r7
 800e312:	9502      	str	r5, [sp, #8]
 800e314:	46ab      	mov	fp, r5
 800e316:	784a      	ldrb	r2, [r1, #1]
 800e318:	1c4b      	adds	r3, r1, #1
 800e31a:	9303      	str	r3, [sp, #12]
 800e31c:	b342      	cbz	r2, 800e370 <__hexnan+0x88>
 800e31e:	4610      	mov	r0, r2
 800e320:	9105      	str	r1, [sp, #20]
 800e322:	9204      	str	r2, [sp, #16]
 800e324:	f7ff fd76 	bl	800de14 <__hexdig_fun>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d14f      	bne.n	800e3cc <__hexnan+0xe4>
 800e32c:	9a04      	ldr	r2, [sp, #16]
 800e32e:	9905      	ldr	r1, [sp, #20]
 800e330:	2a20      	cmp	r2, #32
 800e332:	d818      	bhi.n	800e366 <__hexnan+0x7e>
 800e334:	9b02      	ldr	r3, [sp, #8]
 800e336:	459b      	cmp	fp, r3
 800e338:	dd13      	ble.n	800e362 <__hexnan+0x7a>
 800e33a:	454c      	cmp	r4, r9
 800e33c:	d206      	bcs.n	800e34c <__hexnan+0x64>
 800e33e:	2d07      	cmp	r5, #7
 800e340:	dc04      	bgt.n	800e34c <__hexnan+0x64>
 800e342:	462a      	mov	r2, r5
 800e344:	4649      	mov	r1, r9
 800e346:	4620      	mov	r0, r4
 800e348:	f7ff ffa8 	bl	800e29c <L_shift>
 800e34c:	4544      	cmp	r4, r8
 800e34e:	d950      	bls.n	800e3f2 <__hexnan+0x10a>
 800e350:	2300      	movs	r3, #0
 800e352:	f1a4 0904 	sub.w	r9, r4, #4
 800e356:	f844 3c04 	str.w	r3, [r4, #-4]
 800e35a:	f8cd b008 	str.w	fp, [sp, #8]
 800e35e:	464c      	mov	r4, r9
 800e360:	461d      	mov	r5, r3
 800e362:	9903      	ldr	r1, [sp, #12]
 800e364:	e7d7      	b.n	800e316 <__hexnan+0x2e>
 800e366:	2a29      	cmp	r2, #41	; 0x29
 800e368:	d155      	bne.n	800e416 <__hexnan+0x12e>
 800e36a:	3102      	adds	r1, #2
 800e36c:	f8ca 1000 	str.w	r1, [sl]
 800e370:	f1bb 0f00 	cmp.w	fp, #0
 800e374:	d04f      	beq.n	800e416 <__hexnan+0x12e>
 800e376:	454c      	cmp	r4, r9
 800e378:	d206      	bcs.n	800e388 <__hexnan+0xa0>
 800e37a:	2d07      	cmp	r5, #7
 800e37c:	dc04      	bgt.n	800e388 <__hexnan+0xa0>
 800e37e:	462a      	mov	r2, r5
 800e380:	4649      	mov	r1, r9
 800e382:	4620      	mov	r0, r4
 800e384:	f7ff ff8a 	bl	800e29c <L_shift>
 800e388:	4544      	cmp	r4, r8
 800e38a:	d934      	bls.n	800e3f6 <__hexnan+0x10e>
 800e38c:	f1a8 0204 	sub.w	r2, r8, #4
 800e390:	4623      	mov	r3, r4
 800e392:	f853 1b04 	ldr.w	r1, [r3], #4
 800e396:	f842 1f04 	str.w	r1, [r2, #4]!
 800e39a:	429f      	cmp	r7, r3
 800e39c:	d2f9      	bcs.n	800e392 <__hexnan+0xaa>
 800e39e:	1b3b      	subs	r3, r7, r4
 800e3a0:	f023 0303 	bic.w	r3, r3, #3
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	3e03      	subs	r6, #3
 800e3a8:	3401      	adds	r4, #1
 800e3aa:	42a6      	cmp	r6, r4
 800e3ac:	bf38      	it	cc
 800e3ae:	2304      	movcc	r3, #4
 800e3b0:	4443      	add	r3, r8
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f843 2b04 	str.w	r2, [r3], #4
 800e3b8:	429f      	cmp	r7, r3
 800e3ba:	d2fb      	bcs.n	800e3b4 <__hexnan+0xcc>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	b91b      	cbnz	r3, 800e3c8 <__hexnan+0xe0>
 800e3c0:	4547      	cmp	r7, r8
 800e3c2:	d126      	bne.n	800e412 <__hexnan+0x12a>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	603b      	str	r3, [r7, #0]
 800e3c8:	2005      	movs	r0, #5
 800e3ca:	e025      	b.n	800e418 <__hexnan+0x130>
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	2d08      	cmp	r5, #8
 800e3d0:	f10b 0b01 	add.w	fp, fp, #1
 800e3d4:	dd06      	ble.n	800e3e4 <__hexnan+0xfc>
 800e3d6:	4544      	cmp	r4, r8
 800e3d8:	d9c3      	bls.n	800e362 <__hexnan+0x7a>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3e0:	2501      	movs	r5, #1
 800e3e2:	3c04      	subs	r4, #4
 800e3e4:	6822      	ldr	r2, [r4, #0]
 800e3e6:	f000 000f 	and.w	r0, r0, #15
 800e3ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3ee:	6020      	str	r0, [r4, #0]
 800e3f0:	e7b7      	b.n	800e362 <__hexnan+0x7a>
 800e3f2:	2508      	movs	r5, #8
 800e3f4:	e7b5      	b.n	800e362 <__hexnan+0x7a>
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0df      	beq.n	800e3bc <__hexnan+0xd4>
 800e3fc:	f1c3 0320 	rsb	r3, r3, #32
 800e400:	f04f 32ff 	mov.w	r2, #4294967295
 800e404:	40da      	lsrs	r2, r3
 800e406:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e40a:	4013      	ands	r3, r2
 800e40c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e410:	e7d4      	b.n	800e3bc <__hexnan+0xd4>
 800e412:	3f04      	subs	r7, #4
 800e414:	e7d2      	b.n	800e3bc <__hexnan+0xd4>
 800e416:	2004      	movs	r0, #4
 800e418:	b007      	add	sp, #28
 800e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e41e <__ascii_mbtowc>:
 800e41e:	b082      	sub	sp, #8
 800e420:	b901      	cbnz	r1, 800e424 <__ascii_mbtowc+0x6>
 800e422:	a901      	add	r1, sp, #4
 800e424:	b142      	cbz	r2, 800e438 <__ascii_mbtowc+0x1a>
 800e426:	b14b      	cbz	r3, 800e43c <__ascii_mbtowc+0x1e>
 800e428:	7813      	ldrb	r3, [r2, #0]
 800e42a:	600b      	str	r3, [r1, #0]
 800e42c:	7812      	ldrb	r2, [r2, #0]
 800e42e:	1e10      	subs	r0, r2, #0
 800e430:	bf18      	it	ne
 800e432:	2001      	movne	r0, #1
 800e434:	b002      	add	sp, #8
 800e436:	4770      	bx	lr
 800e438:	4610      	mov	r0, r2
 800e43a:	e7fb      	b.n	800e434 <__ascii_mbtowc+0x16>
 800e43c:	f06f 0001 	mvn.w	r0, #1
 800e440:	e7f8      	b.n	800e434 <__ascii_mbtowc+0x16>
	...

0800e444 <_Balloc>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	69c6      	ldr	r6, [r0, #28]
 800e448:	4604      	mov	r4, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	b976      	cbnz	r6, 800e46c <_Balloc+0x28>
 800e44e:	2010      	movs	r0, #16
 800e450:	f7fe facc 	bl	800c9ec <malloc>
 800e454:	4602      	mov	r2, r0
 800e456:	61e0      	str	r0, [r4, #28]
 800e458:	b920      	cbnz	r0, 800e464 <_Balloc+0x20>
 800e45a:	4b18      	ldr	r3, [pc, #96]	; (800e4bc <_Balloc+0x78>)
 800e45c:	4818      	ldr	r0, [pc, #96]	; (800e4c0 <_Balloc+0x7c>)
 800e45e:	216b      	movs	r1, #107	; 0x6b
 800e460:	f001 fbf6 	bl	800fc50 <__assert_func>
 800e464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e468:	6006      	str	r6, [r0, #0]
 800e46a:	60c6      	str	r6, [r0, #12]
 800e46c:	69e6      	ldr	r6, [r4, #28]
 800e46e:	68f3      	ldr	r3, [r6, #12]
 800e470:	b183      	cbz	r3, 800e494 <_Balloc+0x50>
 800e472:	69e3      	ldr	r3, [r4, #28]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e47a:	b9b8      	cbnz	r0, 800e4ac <_Balloc+0x68>
 800e47c:	2101      	movs	r1, #1
 800e47e:	fa01 f605 	lsl.w	r6, r1, r5
 800e482:	1d72      	adds	r2, r6, #5
 800e484:	0092      	lsls	r2, r2, #2
 800e486:	4620      	mov	r0, r4
 800e488:	f001 fc00 	bl	800fc8c <_calloc_r>
 800e48c:	b160      	cbz	r0, 800e4a8 <_Balloc+0x64>
 800e48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e492:	e00e      	b.n	800e4b2 <_Balloc+0x6e>
 800e494:	2221      	movs	r2, #33	; 0x21
 800e496:	2104      	movs	r1, #4
 800e498:	4620      	mov	r0, r4
 800e49a:	f001 fbf7 	bl	800fc8c <_calloc_r>
 800e49e:	69e3      	ldr	r3, [r4, #28]
 800e4a0:	60f0      	str	r0, [r6, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e4      	bne.n	800e472 <_Balloc+0x2e>
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4b8:	e7f7      	b.n	800e4aa <_Balloc+0x66>
 800e4ba:	bf00      	nop
 800e4bc:	0801087a 	.word	0x0801087a
 800e4c0:	08010891 	.word	0x08010891

0800e4c4 <_Bfree>:
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	69c6      	ldr	r6, [r0, #28]
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b976      	cbnz	r6, 800e4ec <_Bfree+0x28>
 800e4ce:	2010      	movs	r0, #16
 800e4d0:	f7fe fa8c 	bl	800c9ec <malloc>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	61e8      	str	r0, [r5, #28]
 800e4d8:	b920      	cbnz	r0, 800e4e4 <_Bfree+0x20>
 800e4da:	4b09      	ldr	r3, [pc, #36]	; (800e500 <_Bfree+0x3c>)
 800e4dc:	4809      	ldr	r0, [pc, #36]	; (800e504 <_Bfree+0x40>)
 800e4de:	218f      	movs	r1, #143	; 0x8f
 800e4e0:	f001 fbb6 	bl	800fc50 <__assert_func>
 800e4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e8:	6006      	str	r6, [r0, #0]
 800e4ea:	60c6      	str	r6, [r0, #12]
 800e4ec:	b13c      	cbz	r4, 800e4fe <_Bfree+0x3a>
 800e4ee:	69eb      	ldr	r3, [r5, #28]
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4f8:	6021      	str	r1, [r4, #0]
 800e4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	0801087a 	.word	0x0801087a
 800e504:	08010891 	.word	0x08010891

0800e508 <__multadd>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	690d      	ldr	r5, [r1, #16]
 800e50e:	4607      	mov	r7, r0
 800e510:	460c      	mov	r4, r1
 800e512:	461e      	mov	r6, r3
 800e514:	f101 0c14 	add.w	ip, r1, #20
 800e518:	2000      	movs	r0, #0
 800e51a:	f8dc 3000 	ldr.w	r3, [ip]
 800e51e:	b299      	uxth	r1, r3
 800e520:	fb02 6101 	mla	r1, r2, r1, r6
 800e524:	0c1e      	lsrs	r6, r3, #16
 800e526:	0c0b      	lsrs	r3, r1, #16
 800e528:	fb02 3306 	mla	r3, r2, r6, r3
 800e52c:	b289      	uxth	r1, r1
 800e52e:	3001      	adds	r0, #1
 800e530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e534:	4285      	cmp	r5, r0
 800e536:	f84c 1b04 	str.w	r1, [ip], #4
 800e53a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e53e:	dcec      	bgt.n	800e51a <__multadd+0x12>
 800e540:	b30e      	cbz	r6, 800e586 <__multadd+0x7e>
 800e542:	68a3      	ldr	r3, [r4, #8]
 800e544:	42ab      	cmp	r3, r5
 800e546:	dc19      	bgt.n	800e57c <__multadd+0x74>
 800e548:	6861      	ldr	r1, [r4, #4]
 800e54a:	4638      	mov	r0, r7
 800e54c:	3101      	adds	r1, #1
 800e54e:	f7ff ff79 	bl	800e444 <_Balloc>
 800e552:	4680      	mov	r8, r0
 800e554:	b928      	cbnz	r0, 800e562 <__multadd+0x5a>
 800e556:	4602      	mov	r2, r0
 800e558:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <__multadd+0x84>)
 800e55a:	480d      	ldr	r0, [pc, #52]	; (800e590 <__multadd+0x88>)
 800e55c:	21ba      	movs	r1, #186	; 0xba
 800e55e:	f001 fb77 	bl	800fc50 <__assert_func>
 800e562:	6922      	ldr	r2, [r4, #16]
 800e564:	3202      	adds	r2, #2
 800e566:	f104 010c 	add.w	r1, r4, #12
 800e56a:	0092      	lsls	r2, r2, #2
 800e56c:	300c      	adds	r0, #12
 800e56e:	f7ff fb9a 	bl	800dca6 <memcpy>
 800e572:	4621      	mov	r1, r4
 800e574:	4638      	mov	r0, r7
 800e576:	f7ff ffa5 	bl	800e4c4 <_Bfree>
 800e57a:	4644      	mov	r4, r8
 800e57c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e580:	3501      	adds	r5, #1
 800e582:	615e      	str	r6, [r3, #20]
 800e584:	6125      	str	r5, [r4, #16]
 800e586:	4620      	mov	r0, r4
 800e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58c:	08010809 	.word	0x08010809
 800e590:	08010891 	.word	0x08010891

0800e594 <__s2b>:
 800e594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e598:	460c      	mov	r4, r1
 800e59a:	4615      	mov	r5, r2
 800e59c:	461f      	mov	r7, r3
 800e59e:	2209      	movs	r2, #9
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	db09      	blt.n	800e5c4 <__s2b+0x30>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7ff ff47 	bl	800e444 <_Balloc>
 800e5b6:	b940      	cbnz	r0, 800e5ca <__s2b+0x36>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	4b19      	ldr	r3, [pc, #100]	; (800e620 <__s2b+0x8c>)
 800e5bc:	4819      	ldr	r0, [pc, #100]	; (800e624 <__s2b+0x90>)
 800e5be:	21d3      	movs	r1, #211	; 0xd3
 800e5c0:	f001 fb46 	bl	800fc50 <__assert_func>
 800e5c4:	0052      	lsls	r2, r2, #1
 800e5c6:	3101      	adds	r1, #1
 800e5c8:	e7f0      	b.n	800e5ac <__s2b+0x18>
 800e5ca:	9b08      	ldr	r3, [sp, #32]
 800e5cc:	6143      	str	r3, [r0, #20]
 800e5ce:	2d09      	cmp	r5, #9
 800e5d0:	f04f 0301 	mov.w	r3, #1
 800e5d4:	6103      	str	r3, [r0, #16]
 800e5d6:	dd16      	ble.n	800e606 <__s2b+0x72>
 800e5d8:	f104 0909 	add.w	r9, r4, #9
 800e5dc:	46c8      	mov	r8, r9
 800e5de:	442c      	add	r4, r5
 800e5e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	3b30      	subs	r3, #48	; 0x30
 800e5e8:	220a      	movs	r2, #10
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f7ff ff8c 	bl	800e508 <__multadd>
 800e5f0:	45a0      	cmp	r8, r4
 800e5f2:	d1f5      	bne.n	800e5e0 <__s2b+0x4c>
 800e5f4:	f1a5 0408 	sub.w	r4, r5, #8
 800e5f8:	444c      	add	r4, r9
 800e5fa:	1b2d      	subs	r5, r5, r4
 800e5fc:	1963      	adds	r3, r4, r5
 800e5fe:	42bb      	cmp	r3, r7
 800e600:	db04      	blt.n	800e60c <__s2b+0x78>
 800e602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e606:	340a      	adds	r4, #10
 800e608:	2509      	movs	r5, #9
 800e60a:	e7f6      	b.n	800e5fa <__s2b+0x66>
 800e60c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e610:	4601      	mov	r1, r0
 800e612:	3b30      	subs	r3, #48	; 0x30
 800e614:	220a      	movs	r2, #10
 800e616:	4630      	mov	r0, r6
 800e618:	f7ff ff76 	bl	800e508 <__multadd>
 800e61c:	e7ee      	b.n	800e5fc <__s2b+0x68>
 800e61e:	bf00      	nop
 800e620:	08010809 	.word	0x08010809
 800e624:	08010891 	.word	0x08010891

0800e628 <__hi0bits>:
 800e628:	0c03      	lsrs	r3, r0, #16
 800e62a:	041b      	lsls	r3, r3, #16
 800e62c:	b9d3      	cbnz	r3, 800e664 <__hi0bits+0x3c>
 800e62e:	0400      	lsls	r0, r0, #16
 800e630:	2310      	movs	r3, #16
 800e632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e636:	bf04      	itt	eq
 800e638:	0200      	lsleq	r0, r0, #8
 800e63a:	3308      	addeq	r3, #8
 800e63c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e640:	bf04      	itt	eq
 800e642:	0100      	lsleq	r0, r0, #4
 800e644:	3304      	addeq	r3, #4
 800e646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e64a:	bf04      	itt	eq
 800e64c:	0080      	lsleq	r0, r0, #2
 800e64e:	3302      	addeq	r3, #2
 800e650:	2800      	cmp	r0, #0
 800e652:	db05      	blt.n	800e660 <__hi0bits+0x38>
 800e654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e658:	f103 0301 	add.w	r3, r3, #1
 800e65c:	bf08      	it	eq
 800e65e:	2320      	moveq	r3, #32
 800e660:	4618      	mov	r0, r3
 800e662:	4770      	bx	lr
 800e664:	2300      	movs	r3, #0
 800e666:	e7e4      	b.n	800e632 <__hi0bits+0xa>

0800e668 <__lo0bits>:
 800e668:	6803      	ldr	r3, [r0, #0]
 800e66a:	f013 0207 	ands.w	r2, r3, #7
 800e66e:	d00c      	beq.n	800e68a <__lo0bits+0x22>
 800e670:	07d9      	lsls	r1, r3, #31
 800e672:	d422      	bmi.n	800e6ba <__lo0bits+0x52>
 800e674:	079a      	lsls	r2, r3, #30
 800e676:	bf49      	itett	mi
 800e678:	085b      	lsrmi	r3, r3, #1
 800e67a:	089b      	lsrpl	r3, r3, #2
 800e67c:	6003      	strmi	r3, [r0, #0]
 800e67e:	2201      	movmi	r2, #1
 800e680:	bf5c      	itt	pl
 800e682:	6003      	strpl	r3, [r0, #0]
 800e684:	2202      	movpl	r2, #2
 800e686:	4610      	mov	r0, r2
 800e688:	4770      	bx	lr
 800e68a:	b299      	uxth	r1, r3
 800e68c:	b909      	cbnz	r1, 800e692 <__lo0bits+0x2a>
 800e68e:	0c1b      	lsrs	r3, r3, #16
 800e690:	2210      	movs	r2, #16
 800e692:	b2d9      	uxtb	r1, r3
 800e694:	b909      	cbnz	r1, 800e69a <__lo0bits+0x32>
 800e696:	3208      	adds	r2, #8
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	0719      	lsls	r1, r3, #28
 800e69c:	bf04      	itt	eq
 800e69e:	091b      	lsreq	r3, r3, #4
 800e6a0:	3204      	addeq	r2, #4
 800e6a2:	0799      	lsls	r1, r3, #30
 800e6a4:	bf04      	itt	eq
 800e6a6:	089b      	lsreq	r3, r3, #2
 800e6a8:	3202      	addeq	r2, #2
 800e6aa:	07d9      	lsls	r1, r3, #31
 800e6ac:	d403      	bmi.n	800e6b6 <__lo0bits+0x4e>
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	f102 0201 	add.w	r2, r2, #1
 800e6b4:	d003      	beq.n	800e6be <__lo0bits+0x56>
 800e6b6:	6003      	str	r3, [r0, #0]
 800e6b8:	e7e5      	b.n	800e686 <__lo0bits+0x1e>
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	e7e3      	b.n	800e686 <__lo0bits+0x1e>
 800e6be:	2220      	movs	r2, #32
 800e6c0:	e7e1      	b.n	800e686 <__lo0bits+0x1e>
	...

0800e6c4 <__i2b>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	f7ff febb 	bl	800e444 <_Balloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	b928      	cbnz	r0, 800e6de <__i2b+0x1a>
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <__i2b+0x24>)
 800e6d4:	4805      	ldr	r0, [pc, #20]	; (800e6ec <__i2b+0x28>)
 800e6d6:	f240 1145 	movw	r1, #325	; 0x145
 800e6da:	f001 fab9 	bl	800fc50 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6144      	str	r4, [r0, #20]
 800e6e2:	6103      	str	r3, [r0, #16]
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08010809 	.word	0x08010809
 800e6ec:	08010891 	.word	0x08010891

0800e6f0 <__multiply>:
 800e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4691      	mov	r9, r2
 800e6f6:	690a      	ldr	r2, [r1, #16]
 800e6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	bfb8      	it	lt
 800e700:	460b      	movlt	r3, r1
 800e702:	460c      	mov	r4, r1
 800e704:	bfbc      	itt	lt
 800e706:	464c      	movlt	r4, r9
 800e708:	4699      	movlt	r9, r3
 800e70a:	6927      	ldr	r7, [r4, #16]
 800e70c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e710:	68a3      	ldr	r3, [r4, #8]
 800e712:	6861      	ldr	r1, [r4, #4]
 800e714:	eb07 060a 	add.w	r6, r7, sl
 800e718:	42b3      	cmp	r3, r6
 800e71a:	b085      	sub	sp, #20
 800e71c:	bfb8      	it	lt
 800e71e:	3101      	addlt	r1, #1
 800e720:	f7ff fe90 	bl	800e444 <_Balloc>
 800e724:	b930      	cbnz	r0, 800e734 <__multiply+0x44>
 800e726:	4602      	mov	r2, r0
 800e728:	4b44      	ldr	r3, [pc, #272]	; (800e83c <__multiply+0x14c>)
 800e72a:	4845      	ldr	r0, [pc, #276]	; (800e840 <__multiply+0x150>)
 800e72c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e730:	f001 fa8e 	bl	800fc50 <__assert_func>
 800e734:	f100 0514 	add.w	r5, r0, #20
 800e738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e73c:	462b      	mov	r3, r5
 800e73e:	2200      	movs	r2, #0
 800e740:	4543      	cmp	r3, r8
 800e742:	d321      	bcc.n	800e788 <__multiply+0x98>
 800e744:	f104 0314 	add.w	r3, r4, #20
 800e748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e74c:	f109 0314 	add.w	r3, r9, #20
 800e750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e754:	9202      	str	r2, [sp, #8]
 800e756:	1b3a      	subs	r2, r7, r4
 800e758:	3a15      	subs	r2, #21
 800e75a:	f022 0203 	bic.w	r2, r2, #3
 800e75e:	3204      	adds	r2, #4
 800e760:	f104 0115 	add.w	r1, r4, #21
 800e764:	428f      	cmp	r7, r1
 800e766:	bf38      	it	cc
 800e768:	2204      	movcc	r2, #4
 800e76a:	9201      	str	r2, [sp, #4]
 800e76c:	9a02      	ldr	r2, [sp, #8]
 800e76e:	9303      	str	r3, [sp, #12]
 800e770:	429a      	cmp	r2, r3
 800e772:	d80c      	bhi.n	800e78e <__multiply+0x9e>
 800e774:	2e00      	cmp	r6, #0
 800e776:	dd03      	ble.n	800e780 <__multiply+0x90>
 800e778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d05b      	beq.n	800e838 <__multiply+0x148>
 800e780:	6106      	str	r6, [r0, #16]
 800e782:	b005      	add	sp, #20
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	f843 2b04 	str.w	r2, [r3], #4
 800e78c:	e7d8      	b.n	800e740 <__multiply+0x50>
 800e78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e792:	f1ba 0f00 	cmp.w	sl, #0
 800e796:	d024      	beq.n	800e7e2 <__multiply+0xf2>
 800e798:	f104 0e14 	add.w	lr, r4, #20
 800e79c:	46a9      	mov	r9, r5
 800e79e:	f04f 0c00 	mov.w	ip, #0
 800e7a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7a6:	f8d9 1000 	ldr.w	r1, [r9]
 800e7aa:	fa1f fb82 	uxth.w	fp, r2
 800e7ae:	b289      	uxth	r1, r1
 800e7b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800e7bc:	4461      	add	r1, ip
 800e7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7ca:	b289      	uxth	r1, r1
 800e7cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7d0:	4577      	cmp	r7, lr
 800e7d2:	f849 1b04 	str.w	r1, [r9], #4
 800e7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7da:	d8e2      	bhi.n	800e7a2 <__multiply+0xb2>
 800e7dc:	9a01      	ldr	r2, [sp, #4]
 800e7de:	f845 c002 	str.w	ip, [r5, r2]
 800e7e2:	9a03      	ldr	r2, [sp, #12]
 800e7e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	f1b9 0f00 	cmp.w	r9, #0
 800e7ee:	d021      	beq.n	800e834 <__multiply+0x144>
 800e7f0:	6829      	ldr	r1, [r5, #0]
 800e7f2:	f104 0c14 	add.w	ip, r4, #20
 800e7f6:	46ae      	mov	lr, r5
 800e7f8:	f04f 0a00 	mov.w	sl, #0
 800e7fc:	f8bc b000 	ldrh.w	fp, [ip]
 800e800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e804:	fb09 220b 	mla	r2, r9, fp, r2
 800e808:	4452      	add	r2, sl
 800e80a:	b289      	uxth	r1, r1
 800e80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e810:	f84e 1b04 	str.w	r1, [lr], #4
 800e814:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e81c:	f8be 1000 	ldrh.w	r1, [lr]
 800e820:	fb09 110a 	mla	r1, r9, sl, r1
 800e824:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e828:	4567      	cmp	r7, ip
 800e82a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e82e:	d8e5      	bhi.n	800e7fc <__multiply+0x10c>
 800e830:	9a01      	ldr	r2, [sp, #4]
 800e832:	50a9      	str	r1, [r5, r2]
 800e834:	3504      	adds	r5, #4
 800e836:	e799      	b.n	800e76c <__multiply+0x7c>
 800e838:	3e01      	subs	r6, #1
 800e83a:	e79b      	b.n	800e774 <__multiply+0x84>
 800e83c:	08010809 	.word	0x08010809
 800e840:	08010891 	.word	0x08010891

0800e844 <__pow5mult>:
 800e844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e848:	4615      	mov	r5, r2
 800e84a:	f012 0203 	ands.w	r2, r2, #3
 800e84e:	4606      	mov	r6, r0
 800e850:	460f      	mov	r7, r1
 800e852:	d007      	beq.n	800e864 <__pow5mult+0x20>
 800e854:	4c25      	ldr	r4, [pc, #148]	; (800e8ec <__pow5mult+0xa8>)
 800e856:	3a01      	subs	r2, #1
 800e858:	2300      	movs	r3, #0
 800e85a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e85e:	f7ff fe53 	bl	800e508 <__multadd>
 800e862:	4607      	mov	r7, r0
 800e864:	10ad      	asrs	r5, r5, #2
 800e866:	d03d      	beq.n	800e8e4 <__pow5mult+0xa0>
 800e868:	69f4      	ldr	r4, [r6, #28]
 800e86a:	b97c      	cbnz	r4, 800e88c <__pow5mult+0x48>
 800e86c:	2010      	movs	r0, #16
 800e86e:	f7fe f8bd 	bl	800c9ec <malloc>
 800e872:	4602      	mov	r2, r0
 800e874:	61f0      	str	r0, [r6, #28]
 800e876:	b928      	cbnz	r0, 800e884 <__pow5mult+0x40>
 800e878:	4b1d      	ldr	r3, [pc, #116]	; (800e8f0 <__pow5mult+0xac>)
 800e87a:	481e      	ldr	r0, [pc, #120]	; (800e8f4 <__pow5mult+0xb0>)
 800e87c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e880:	f001 f9e6 	bl	800fc50 <__assert_func>
 800e884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e888:	6004      	str	r4, [r0, #0]
 800e88a:	60c4      	str	r4, [r0, #12]
 800e88c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e894:	b94c      	cbnz	r4, 800e8aa <__pow5mult+0x66>
 800e896:	f240 2171 	movw	r1, #625	; 0x271
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7ff ff12 	bl	800e6c4 <__i2b>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	6003      	str	r3, [r0, #0]
 800e8aa:	f04f 0900 	mov.w	r9, #0
 800e8ae:	07eb      	lsls	r3, r5, #31
 800e8b0:	d50a      	bpl.n	800e8c8 <__pow5mult+0x84>
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f7ff ff1a 	bl	800e6f0 <__multiply>
 800e8bc:	4639      	mov	r1, r7
 800e8be:	4680      	mov	r8, r0
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7ff fdff 	bl	800e4c4 <_Bfree>
 800e8c6:	4647      	mov	r7, r8
 800e8c8:	106d      	asrs	r5, r5, #1
 800e8ca:	d00b      	beq.n	800e8e4 <__pow5mult+0xa0>
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	b938      	cbnz	r0, 800e8e0 <__pow5mult+0x9c>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7ff ff0b 	bl	800e6f0 <__multiply>
 800e8da:	6020      	str	r0, [r4, #0]
 800e8dc:	f8c0 9000 	str.w	r9, [r0]
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	e7e4      	b.n	800e8ae <__pow5mult+0x6a>
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	bf00      	nop
 800e8ec:	080109e0 	.word	0x080109e0
 800e8f0:	0801087a 	.word	0x0801087a
 800e8f4:	08010891 	.word	0x08010891

0800e8f8 <__lshift>:
 800e8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	6849      	ldr	r1, [r1, #4]
 800e900:	6923      	ldr	r3, [r4, #16]
 800e902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	4607      	mov	r7, r0
 800e90a:	4691      	mov	r9, r2
 800e90c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e910:	f108 0601 	add.w	r6, r8, #1
 800e914:	42b3      	cmp	r3, r6
 800e916:	db0b      	blt.n	800e930 <__lshift+0x38>
 800e918:	4638      	mov	r0, r7
 800e91a:	f7ff fd93 	bl	800e444 <_Balloc>
 800e91e:	4605      	mov	r5, r0
 800e920:	b948      	cbnz	r0, 800e936 <__lshift+0x3e>
 800e922:	4602      	mov	r2, r0
 800e924:	4b28      	ldr	r3, [pc, #160]	; (800e9c8 <__lshift+0xd0>)
 800e926:	4829      	ldr	r0, [pc, #164]	; (800e9cc <__lshift+0xd4>)
 800e928:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e92c:	f001 f990 	bl	800fc50 <__assert_func>
 800e930:	3101      	adds	r1, #1
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	e7ee      	b.n	800e914 <__lshift+0x1c>
 800e936:	2300      	movs	r3, #0
 800e938:	f100 0114 	add.w	r1, r0, #20
 800e93c:	f100 0210 	add.w	r2, r0, #16
 800e940:	4618      	mov	r0, r3
 800e942:	4553      	cmp	r3, sl
 800e944:	db33      	blt.n	800e9ae <__lshift+0xb6>
 800e946:	6920      	ldr	r0, [r4, #16]
 800e948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e94c:	f104 0314 	add.w	r3, r4, #20
 800e950:	f019 091f 	ands.w	r9, r9, #31
 800e954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e95c:	d02b      	beq.n	800e9b6 <__lshift+0xbe>
 800e95e:	f1c9 0e20 	rsb	lr, r9, #32
 800e962:	468a      	mov	sl, r1
 800e964:	2200      	movs	r2, #0
 800e966:	6818      	ldr	r0, [r3, #0]
 800e968:	fa00 f009 	lsl.w	r0, r0, r9
 800e96c:	4310      	orrs	r0, r2
 800e96e:	f84a 0b04 	str.w	r0, [sl], #4
 800e972:	f853 2b04 	ldr.w	r2, [r3], #4
 800e976:	459c      	cmp	ip, r3
 800e978:	fa22 f20e 	lsr.w	r2, r2, lr
 800e97c:	d8f3      	bhi.n	800e966 <__lshift+0x6e>
 800e97e:	ebac 0304 	sub.w	r3, ip, r4
 800e982:	3b15      	subs	r3, #21
 800e984:	f023 0303 	bic.w	r3, r3, #3
 800e988:	3304      	adds	r3, #4
 800e98a:	f104 0015 	add.w	r0, r4, #21
 800e98e:	4584      	cmp	ip, r0
 800e990:	bf38      	it	cc
 800e992:	2304      	movcc	r3, #4
 800e994:	50ca      	str	r2, [r1, r3]
 800e996:	b10a      	cbz	r2, 800e99c <__lshift+0xa4>
 800e998:	f108 0602 	add.w	r6, r8, #2
 800e99c:	3e01      	subs	r6, #1
 800e99e:	4638      	mov	r0, r7
 800e9a0:	612e      	str	r6, [r5, #16]
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	f7ff fd8e 	bl	800e4c4 <_Bfree>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	e7c5      	b.n	800e942 <__lshift+0x4a>
 800e9b6:	3904      	subs	r1, #4
 800e9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9c0:	459c      	cmp	ip, r3
 800e9c2:	d8f9      	bhi.n	800e9b8 <__lshift+0xc0>
 800e9c4:	e7ea      	b.n	800e99c <__lshift+0xa4>
 800e9c6:	bf00      	nop
 800e9c8:	08010809 	.word	0x08010809
 800e9cc:	08010891 	.word	0x08010891

0800e9d0 <__mcmp>:
 800e9d0:	b530      	push	{r4, r5, lr}
 800e9d2:	6902      	ldr	r2, [r0, #16]
 800e9d4:	690c      	ldr	r4, [r1, #16]
 800e9d6:	1b12      	subs	r2, r2, r4
 800e9d8:	d10e      	bne.n	800e9f8 <__mcmp+0x28>
 800e9da:	f100 0314 	add.w	r3, r0, #20
 800e9de:	3114      	adds	r1, #20
 800e9e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9f0:	42a5      	cmp	r5, r4
 800e9f2:	d003      	beq.n	800e9fc <__mcmp+0x2c>
 800e9f4:	d305      	bcc.n	800ea02 <__mcmp+0x32>
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	bd30      	pop	{r4, r5, pc}
 800e9fc:	4283      	cmp	r3, r0
 800e9fe:	d3f3      	bcc.n	800e9e8 <__mcmp+0x18>
 800ea00:	e7fa      	b.n	800e9f8 <__mcmp+0x28>
 800ea02:	f04f 32ff 	mov.w	r2, #4294967295
 800ea06:	e7f7      	b.n	800e9f8 <__mcmp+0x28>

0800ea08 <__mdiff>:
 800ea08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	4606      	mov	r6, r0
 800ea10:	4611      	mov	r1, r2
 800ea12:	4620      	mov	r0, r4
 800ea14:	4690      	mov	r8, r2
 800ea16:	f7ff ffdb 	bl	800e9d0 <__mcmp>
 800ea1a:	1e05      	subs	r5, r0, #0
 800ea1c:	d110      	bne.n	800ea40 <__mdiff+0x38>
 800ea1e:	4629      	mov	r1, r5
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff fd0f 	bl	800e444 <_Balloc>
 800ea26:	b930      	cbnz	r0, 800ea36 <__mdiff+0x2e>
 800ea28:	4b3a      	ldr	r3, [pc, #232]	; (800eb14 <__mdiff+0x10c>)
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	f240 2137 	movw	r1, #567	; 0x237
 800ea30:	4839      	ldr	r0, [pc, #228]	; (800eb18 <__mdiff+0x110>)
 800ea32:	f001 f90d 	bl	800fc50 <__assert_func>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea40:	bfa4      	itt	ge
 800ea42:	4643      	movge	r3, r8
 800ea44:	46a0      	movge	r8, r4
 800ea46:	4630      	mov	r0, r6
 800ea48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea4c:	bfa6      	itte	ge
 800ea4e:	461c      	movge	r4, r3
 800ea50:	2500      	movge	r5, #0
 800ea52:	2501      	movlt	r5, #1
 800ea54:	f7ff fcf6 	bl	800e444 <_Balloc>
 800ea58:	b920      	cbnz	r0, 800ea64 <__mdiff+0x5c>
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	; (800eb14 <__mdiff+0x10c>)
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	f240 2145 	movw	r1, #581	; 0x245
 800ea62:	e7e5      	b.n	800ea30 <__mdiff+0x28>
 800ea64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea68:	6926      	ldr	r6, [r4, #16]
 800ea6a:	60c5      	str	r5, [r0, #12]
 800ea6c:	f104 0914 	add.w	r9, r4, #20
 800ea70:	f108 0514 	add.w	r5, r8, #20
 800ea74:	f100 0e14 	add.w	lr, r0, #20
 800ea78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea80:	f108 0210 	add.w	r2, r8, #16
 800ea84:	46f2      	mov	sl, lr
 800ea86:	2100      	movs	r1, #0
 800ea88:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea90:	fa11 f88b 	uxtah	r8, r1, fp
 800ea94:	b299      	uxth	r1, r3
 800ea96:	0c1b      	lsrs	r3, r3, #16
 800ea98:	eba8 0801 	sub.w	r8, r8, r1
 800ea9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaa0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eaa4:	fa1f f888 	uxth.w	r8, r8
 800eaa8:	1419      	asrs	r1, r3, #16
 800eaaa:	454e      	cmp	r6, r9
 800eaac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eab0:	f84a 3b04 	str.w	r3, [sl], #4
 800eab4:	d8e8      	bhi.n	800ea88 <__mdiff+0x80>
 800eab6:	1b33      	subs	r3, r6, r4
 800eab8:	3b15      	subs	r3, #21
 800eaba:	f023 0303 	bic.w	r3, r3, #3
 800eabe:	3304      	adds	r3, #4
 800eac0:	3415      	adds	r4, #21
 800eac2:	42a6      	cmp	r6, r4
 800eac4:	bf38      	it	cc
 800eac6:	2304      	movcc	r3, #4
 800eac8:	441d      	add	r5, r3
 800eaca:	4473      	add	r3, lr
 800eacc:	469e      	mov	lr, r3
 800eace:	462e      	mov	r6, r5
 800ead0:	4566      	cmp	r6, ip
 800ead2:	d30e      	bcc.n	800eaf2 <__mdiff+0xea>
 800ead4:	f10c 0203 	add.w	r2, ip, #3
 800ead8:	1b52      	subs	r2, r2, r5
 800eada:	f022 0203 	bic.w	r2, r2, #3
 800eade:	3d03      	subs	r5, #3
 800eae0:	45ac      	cmp	ip, r5
 800eae2:	bf38      	it	cc
 800eae4:	2200      	movcc	r2, #0
 800eae6:	4413      	add	r3, r2
 800eae8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eaec:	b17a      	cbz	r2, 800eb0e <__mdiff+0x106>
 800eaee:	6107      	str	r7, [r0, #16]
 800eaf0:	e7a4      	b.n	800ea3c <__mdiff+0x34>
 800eaf2:	f856 8b04 	ldr.w	r8, [r6], #4
 800eaf6:	fa11 f288 	uxtah	r2, r1, r8
 800eafa:	1414      	asrs	r4, r2, #16
 800eafc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb00:	b292      	uxth	r2, r2
 800eb02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb06:	f84e 2b04 	str.w	r2, [lr], #4
 800eb0a:	1421      	asrs	r1, r4, #16
 800eb0c:	e7e0      	b.n	800ead0 <__mdiff+0xc8>
 800eb0e:	3f01      	subs	r7, #1
 800eb10:	e7ea      	b.n	800eae8 <__mdiff+0xe0>
 800eb12:	bf00      	nop
 800eb14:	08010809 	.word	0x08010809
 800eb18:	08010891 	.word	0x08010891

0800eb1c <__ulp>:
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	ed8d 0b00 	vstr	d0, [sp]
 800eb22:	9a01      	ldr	r2, [sp, #4]
 800eb24:	4b0f      	ldr	r3, [pc, #60]	; (800eb64 <__ulp+0x48>)
 800eb26:	4013      	ands	r3, r2
 800eb28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	dc08      	bgt.n	800eb42 <__ulp+0x26>
 800eb30:	425b      	negs	r3, r3
 800eb32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eb36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb3a:	da04      	bge.n	800eb46 <__ulp+0x2a>
 800eb3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb40:	4113      	asrs	r3, r2
 800eb42:	2200      	movs	r2, #0
 800eb44:	e008      	b.n	800eb58 <__ulp+0x3c>
 800eb46:	f1a2 0314 	sub.w	r3, r2, #20
 800eb4a:	2b1e      	cmp	r3, #30
 800eb4c:	bfda      	itte	le
 800eb4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800eb52:	40da      	lsrle	r2, r3
 800eb54:	2201      	movgt	r2, #1
 800eb56:	2300      	movs	r3, #0
 800eb58:	4619      	mov	r1, r3
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	ec41 0b10 	vmov	d0, r0, r1
 800eb60:	b002      	add	sp, #8
 800eb62:	4770      	bx	lr
 800eb64:	7ff00000 	.word	0x7ff00000

0800eb68 <__b2d>:
 800eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6c:	6906      	ldr	r6, [r0, #16]
 800eb6e:	f100 0814 	add.w	r8, r0, #20
 800eb72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eb76:	1f37      	subs	r7, r6, #4
 800eb78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	f7ff fd53 	bl	800e628 <__hi0bits>
 800eb82:	f1c0 0320 	rsb	r3, r0, #32
 800eb86:	280a      	cmp	r0, #10
 800eb88:	600b      	str	r3, [r1, #0]
 800eb8a:	491b      	ldr	r1, [pc, #108]	; (800ebf8 <__b2d+0x90>)
 800eb8c:	dc15      	bgt.n	800ebba <__b2d+0x52>
 800eb8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb92:	fa22 f30c 	lsr.w	r3, r2, ip
 800eb96:	45b8      	cmp	r8, r7
 800eb98:	ea43 0501 	orr.w	r5, r3, r1
 800eb9c:	bf34      	ite	cc
 800eb9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eba2:	2300      	movcs	r3, #0
 800eba4:	3015      	adds	r0, #21
 800eba6:	fa02 f000 	lsl.w	r0, r2, r0
 800ebaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800ebae:	4303      	orrs	r3, r0
 800ebb0:	461c      	mov	r4, r3
 800ebb2:	ec45 4b10 	vmov	d0, r4, r5
 800ebb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebba:	45b8      	cmp	r8, r7
 800ebbc:	bf3a      	itte	cc
 800ebbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ebc2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ebc6:	2300      	movcs	r3, #0
 800ebc8:	380b      	subs	r0, #11
 800ebca:	d012      	beq.n	800ebf2 <__b2d+0x8a>
 800ebcc:	f1c0 0120 	rsb	r1, r0, #32
 800ebd0:	fa23 f401 	lsr.w	r4, r3, r1
 800ebd4:	4082      	lsls	r2, r0
 800ebd6:	4322      	orrs	r2, r4
 800ebd8:	4547      	cmp	r7, r8
 800ebda:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ebde:	bf8c      	ite	hi
 800ebe0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ebe4:	2200      	movls	r2, #0
 800ebe6:	4083      	lsls	r3, r0
 800ebe8:	40ca      	lsrs	r2, r1
 800ebea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	e7de      	b.n	800ebb0 <__b2d+0x48>
 800ebf2:	ea42 0501 	orr.w	r5, r2, r1
 800ebf6:	e7db      	b.n	800ebb0 <__b2d+0x48>
 800ebf8:	3ff00000 	.word	0x3ff00000

0800ebfc <__d2b>:
 800ebfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec00:	460f      	mov	r7, r1
 800ec02:	2101      	movs	r1, #1
 800ec04:	ec59 8b10 	vmov	r8, r9, d0
 800ec08:	4616      	mov	r6, r2
 800ec0a:	f7ff fc1b 	bl	800e444 <_Balloc>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b930      	cbnz	r0, 800ec20 <__d2b+0x24>
 800ec12:	4602      	mov	r2, r0
 800ec14:	4b24      	ldr	r3, [pc, #144]	; (800eca8 <__d2b+0xac>)
 800ec16:	4825      	ldr	r0, [pc, #148]	; (800ecac <__d2b+0xb0>)
 800ec18:	f240 310f 	movw	r1, #783	; 0x30f
 800ec1c:	f001 f818 	bl	800fc50 <__assert_func>
 800ec20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec28:	bb2d      	cbnz	r5, 800ec76 <__d2b+0x7a>
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	f1b8 0300 	subs.w	r3, r8, #0
 800ec30:	d026      	beq.n	800ec80 <__d2b+0x84>
 800ec32:	4668      	mov	r0, sp
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	f7ff fd17 	bl	800e668 <__lo0bits>
 800ec3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec3e:	b1e8      	cbz	r0, 800ec7c <__d2b+0x80>
 800ec40:	f1c0 0320 	rsb	r3, r0, #32
 800ec44:	fa02 f303 	lsl.w	r3, r2, r3
 800ec48:	430b      	orrs	r3, r1
 800ec4a:	40c2      	lsrs	r2, r0
 800ec4c:	6163      	str	r3, [r4, #20]
 800ec4e:	9201      	str	r2, [sp, #4]
 800ec50:	9b01      	ldr	r3, [sp, #4]
 800ec52:	61a3      	str	r3, [r4, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	bf14      	ite	ne
 800ec58:	2202      	movne	r2, #2
 800ec5a:	2201      	moveq	r2, #1
 800ec5c:	6122      	str	r2, [r4, #16]
 800ec5e:	b1bd      	cbz	r5, 800ec90 <__d2b+0x94>
 800ec60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec64:	4405      	add	r5, r0
 800ec66:	603d      	str	r5, [r7, #0]
 800ec68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec6c:	6030      	str	r0, [r6, #0]
 800ec6e:	4620      	mov	r0, r4
 800ec70:	b003      	add	sp, #12
 800ec72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec7a:	e7d6      	b.n	800ec2a <__d2b+0x2e>
 800ec7c:	6161      	str	r1, [r4, #20]
 800ec7e:	e7e7      	b.n	800ec50 <__d2b+0x54>
 800ec80:	a801      	add	r0, sp, #4
 800ec82:	f7ff fcf1 	bl	800e668 <__lo0bits>
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	6163      	str	r3, [r4, #20]
 800ec8a:	3020      	adds	r0, #32
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	e7e5      	b.n	800ec5c <__d2b+0x60>
 800ec90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec98:	6038      	str	r0, [r7, #0]
 800ec9a:	6918      	ldr	r0, [r3, #16]
 800ec9c:	f7ff fcc4 	bl	800e628 <__hi0bits>
 800eca0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eca4:	e7e2      	b.n	800ec6c <__d2b+0x70>
 800eca6:	bf00      	nop
 800eca8:	08010809 	.word	0x08010809
 800ecac:	08010891 	.word	0x08010891

0800ecb0 <__ratio>:
 800ecb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	4688      	mov	r8, r1
 800ecb6:	4669      	mov	r1, sp
 800ecb8:	4681      	mov	r9, r0
 800ecba:	f7ff ff55 	bl	800eb68 <__b2d>
 800ecbe:	a901      	add	r1, sp, #4
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	ec55 4b10 	vmov	r4, r5, d0
 800ecc6:	f7ff ff4f 	bl	800eb68 <__b2d>
 800ecca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ecd2:	eba3 0c02 	sub.w	ip, r3, r2
 800ecd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ece0:	ec51 0b10 	vmov	r0, r1, d0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfd6      	itet	le
 800ece8:	460a      	movle	r2, r1
 800ecea:	462a      	movgt	r2, r5
 800ecec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecf0:	468b      	mov	fp, r1
 800ecf2:	462f      	mov	r7, r5
 800ecf4:	bfd4      	ite	le
 800ecf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ecfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ecfe:	4620      	mov	r0, r4
 800ed00:	ee10 2a10 	vmov	r2, s0
 800ed04:	465b      	mov	r3, fp
 800ed06:	4639      	mov	r1, r7
 800ed08:	f7f1 fdb8 	bl	800087c <__aeabi_ddiv>
 800ed0c:	ec41 0b10 	vmov	d0, r0, r1
 800ed10:	b003      	add	sp, #12
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed16 <__copybits>:
 800ed16:	3901      	subs	r1, #1
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	1149      	asrs	r1, r1, #5
 800ed1c:	6914      	ldr	r4, [r2, #16]
 800ed1e:	3101      	adds	r1, #1
 800ed20:	f102 0314 	add.w	r3, r2, #20
 800ed24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed2c:	1f05      	subs	r5, r0, #4
 800ed2e:	42a3      	cmp	r3, r4
 800ed30:	d30c      	bcc.n	800ed4c <__copybits+0x36>
 800ed32:	1aa3      	subs	r3, r4, r2
 800ed34:	3b11      	subs	r3, #17
 800ed36:	f023 0303 	bic.w	r3, r3, #3
 800ed3a:	3211      	adds	r2, #17
 800ed3c:	42a2      	cmp	r2, r4
 800ed3e:	bf88      	it	hi
 800ed40:	2300      	movhi	r3, #0
 800ed42:	4418      	add	r0, r3
 800ed44:	2300      	movs	r3, #0
 800ed46:	4288      	cmp	r0, r1
 800ed48:	d305      	bcc.n	800ed56 <__copybits+0x40>
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed54:	e7eb      	b.n	800ed2e <__copybits+0x18>
 800ed56:	f840 3b04 	str.w	r3, [r0], #4
 800ed5a:	e7f4      	b.n	800ed46 <__copybits+0x30>

0800ed5c <__any_on>:
 800ed5c:	f100 0214 	add.w	r2, r0, #20
 800ed60:	6900      	ldr	r0, [r0, #16]
 800ed62:	114b      	asrs	r3, r1, #5
 800ed64:	4298      	cmp	r0, r3
 800ed66:	b510      	push	{r4, lr}
 800ed68:	db11      	blt.n	800ed8e <__any_on+0x32>
 800ed6a:	dd0a      	ble.n	800ed82 <__any_on+0x26>
 800ed6c:	f011 011f 	ands.w	r1, r1, #31
 800ed70:	d007      	beq.n	800ed82 <__any_on+0x26>
 800ed72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed76:	fa24 f001 	lsr.w	r0, r4, r1
 800ed7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ed7e:	428c      	cmp	r4, r1
 800ed80:	d10b      	bne.n	800ed9a <__any_on+0x3e>
 800ed82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d803      	bhi.n	800ed92 <__any_on+0x36>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	4603      	mov	r3, r0
 800ed90:	e7f7      	b.n	800ed82 <__any_on+0x26>
 800ed92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed96:	2900      	cmp	r1, #0
 800ed98:	d0f5      	beq.n	800ed86 <__any_on+0x2a>
 800ed9a:	2001      	movs	r0, #1
 800ed9c:	e7f6      	b.n	800ed8c <__any_on+0x30>

0800ed9e <_malloc_usable_size_r>:
 800ed9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda2:	1f18      	subs	r0, r3, #4
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	bfbc      	itt	lt
 800eda8:	580b      	ldrlt	r3, [r1, r0]
 800edaa:	18c0      	addlt	r0, r0, r3
 800edac:	4770      	bx	lr

0800edae <__ascii_wctomb>:
 800edae:	b149      	cbz	r1, 800edc4 <__ascii_wctomb+0x16>
 800edb0:	2aff      	cmp	r2, #255	; 0xff
 800edb2:	bf85      	ittet	hi
 800edb4:	238a      	movhi	r3, #138	; 0x8a
 800edb6:	6003      	strhi	r3, [r0, #0]
 800edb8:	700a      	strbls	r2, [r1, #0]
 800edba:	f04f 30ff 	movhi.w	r0, #4294967295
 800edbe:	bf98      	it	ls
 800edc0:	2001      	movls	r0, #1
 800edc2:	4770      	bx	lr
 800edc4:	4608      	mov	r0, r1
 800edc6:	4770      	bx	lr

0800edc8 <__ssputs_r>:
 800edc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edcc:	688e      	ldr	r6, [r1, #8]
 800edce:	461f      	mov	r7, r3
 800edd0:	42be      	cmp	r6, r7
 800edd2:	680b      	ldr	r3, [r1, #0]
 800edd4:	4682      	mov	sl, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	4690      	mov	r8, r2
 800edda:	d82c      	bhi.n	800ee36 <__ssputs_r+0x6e>
 800eddc:	898a      	ldrh	r2, [r1, #12]
 800edde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ede2:	d026      	beq.n	800ee32 <__ssputs_r+0x6a>
 800ede4:	6965      	ldr	r5, [r4, #20]
 800ede6:	6909      	ldr	r1, [r1, #16]
 800ede8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edec:	eba3 0901 	sub.w	r9, r3, r1
 800edf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edf4:	1c7b      	adds	r3, r7, #1
 800edf6:	444b      	add	r3, r9
 800edf8:	106d      	asrs	r5, r5, #1
 800edfa:	429d      	cmp	r5, r3
 800edfc:	bf38      	it	cc
 800edfe:	461d      	movcc	r5, r3
 800ee00:	0553      	lsls	r3, r2, #21
 800ee02:	d527      	bpl.n	800ee54 <__ssputs_r+0x8c>
 800ee04:	4629      	mov	r1, r5
 800ee06:	f7fd fe21 	bl	800ca4c <_malloc_r>
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	b360      	cbz	r0, 800ee68 <__ssputs_r+0xa0>
 800ee0e:	6921      	ldr	r1, [r4, #16]
 800ee10:	464a      	mov	r2, r9
 800ee12:	f7fe ff48 	bl	800dca6 <memcpy>
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee20:	81a3      	strh	r3, [r4, #12]
 800ee22:	6126      	str	r6, [r4, #16]
 800ee24:	6165      	str	r5, [r4, #20]
 800ee26:	444e      	add	r6, r9
 800ee28:	eba5 0509 	sub.w	r5, r5, r9
 800ee2c:	6026      	str	r6, [r4, #0]
 800ee2e:	60a5      	str	r5, [r4, #8]
 800ee30:	463e      	mov	r6, r7
 800ee32:	42be      	cmp	r6, r7
 800ee34:	d900      	bls.n	800ee38 <__ssputs_r+0x70>
 800ee36:	463e      	mov	r6, r7
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	4632      	mov	r2, r6
 800ee3c:	4641      	mov	r1, r8
 800ee3e:	f000 feec 	bl	800fc1a <memmove>
 800ee42:	68a3      	ldr	r3, [r4, #8]
 800ee44:	1b9b      	subs	r3, r3, r6
 800ee46:	60a3      	str	r3, [r4, #8]
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	4433      	add	r3, r6
 800ee4c:	6023      	str	r3, [r4, #0]
 800ee4e:	2000      	movs	r0, #0
 800ee50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee54:	462a      	mov	r2, r5
 800ee56:	f7fd fe8d 	bl	800cb74 <_realloc_r>
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d1e0      	bne.n	800ee22 <__ssputs_r+0x5a>
 800ee60:	6921      	ldr	r1, [r4, #16]
 800ee62:	4650      	mov	r0, sl
 800ee64:	f7fe ff38 	bl	800dcd8 <_free_r>
 800ee68:	230c      	movs	r3, #12
 800ee6a:	f8ca 3000 	str.w	r3, [sl]
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee74:	81a3      	strh	r3, [r4, #12]
 800ee76:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7a:	e7e9      	b.n	800ee50 <__ssputs_r+0x88>

0800ee7c <_svfiprintf_r>:
 800ee7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee80:	4698      	mov	r8, r3
 800ee82:	898b      	ldrh	r3, [r1, #12]
 800ee84:	061b      	lsls	r3, r3, #24
 800ee86:	b09d      	sub	sp, #116	; 0x74
 800ee88:	4607      	mov	r7, r0
 800ee8a:	460d      	mov	r5, r1
 800ee8c:	4614      	mov	r4, r2
 800ee8e:	d50e      	bpl.n	800eeae <_svfiprintf_r+0x32>
 800ee90:	690b      	ldr	r3, [r1, #16]
 800ee92:	b963      	cbnz	r3, 800eeae <_svfiprintf_r+0x32>
 800ee94:	2140      	movs	r1, #64	; 0x40
 800ee96:	f7fd fdd9 	bl	800ca4c <_malloc_r>
 800ee9a:	6028      	str	r0, [r5, #0]
 800ee9c:	6128      	str	r0, [r5, #16]
 800ee9e:	b920      	cbnz	r0, 800eeaa <_svfiprintf_r+0x2e>
 800eea0:	230c      	movs	r3, #12
 800eea2:	603b      	str	r3, [r7, #0]
 800eea4:	f04f 30ff 	mov.w	r0, #4294967295
 800eea8:	e0d0      	b.n	800f04c <_svfiprintf_r+0x1d0>
 800eeaa:	2340      	movs	r3, #64	; 0x40
 800eeac:	616b      	str	r3, [r5, #20]
 800eeae:	2300      	movs	r3, #0
 800eeb0:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb2:	2320      	movs	r3, #32
 800eeb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eebc:	2330      	movs	r3, #48	; 0x30
 800eebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f064 <_svfiprintf_r+0x1e8>
 800eec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eec6:	f04f 0901 	mov.w	r9, #1
 800eeca:	4623      	mov	r3, r4
 800eecc:	469a      	mov	sl, r3
 800eece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eed2:	b10a      	cbz	r2, 800eed8 <_svfiprintf_r+0x5c>
 800eed4:	2a25      	cmp	r2, #37	; 0x25
 800eed6:	d1f9      	bne.n	800eecc <_svfiprintf_r+0x50>
 800eed8:	ebba 0b04 	subs.w	fp, sl, r4
 800eedc:	d00b      	beq.n	800eef6 <_svfiprintf_r+0x7a>
 800eede:	465b      	mov	r3, fp
 800eee0:	4622      	mov	r2, r4
 800eee2:	4629      	mov	r1, r5
 800eee4:	4638      	mov	r0, r7
 800eee6:	f7ff ff6f 	bl	800edc8 <__ssputs_r>
 800eeea:	3001      	adds	r0, #1
 800eeec:	f000 80a9 	beq.w	800f042 <_svfiprintf_r+0x1c6>
 800eef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef2:	445a      	add	r2, fp
 800eef4:	9209      	str	r2, [sp, #36]	; 0x24
 800eef6:	f89a 3000 	ldrb.w	r3, [sl]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 80a1 	beq.w	800f042 <_svfiprintf_r+0x1c6>
 800ef00:	2300      	movs	r3, #0
 800ef02:	f04f 32ff 	mov.w	r2, #4294967295
 800ef06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef0a:	f10a 0a01 	add.w	sl, sl, #1
 800ef0e:	9304      	str	r3, [sp, #16]
 800ef10:	9307      	str	r3, [sp, #28]
 800ef12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef16:	931a      	str	r3, [sp, #104]	; 0x68
 800ef18:	4654      	mov	r4, sl
 800ef1a:	2205      	movs	r2, #5
 800ef1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef20:	4850      	ldr	r0, [pc, #320]	; (800f064 <_svfiprintf_r+0x1e8>)
 800ef22:	f7f1 f975 	bl	8000210 <memchr>
 800ef26:	9a04      	ldr	r2, [sp, #16]
 800ef28:	b9d8      	cbnz	r0, 800ef62 <_svfiprintf_r+0xe6>
 800ef2a:	06d0      	lsls	r0, r2, #27
 800ef2c:	bf44      	itt	mi
 800ef2e:	2320      	movmi	r3, #32
 800ef30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef34:	0711      	lsls	r1, r2, #28
 800ef36:	bf44      	itt	mi
 800ef38:	232b      	movmi	r3, #43	; 0x2b
 800ef3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef42:	2b2a      	cmp	r3, #42	; 0x2a
 800ef44:	d015      	beq.n	800ef72 <_svfiprintf_r+0xf6>
 800ef46:	9a07      	ldr	r2, [sp, #28]
 800ef48:	4654      	mov	r4, sl
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	f04f 0c0a 	mov.w	ip, #10
 800ef50:	4621      	mov	r1, r4
 800ef52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef56:	3b30      	subs	r3, #48	; 0x30
 800ef58:	2b09      	cmp	r3, #9
 800ef5a:	d94d      	bls.n	800eff8 <_svfiprintf_r+0x17c>
 800ef5c:	b1b0      	cbz	r0, 800ef8c <_svfiprintf_r+0x110>
 800ef5e:	9207      	str	r2, [sp, #28]
 800ef60:	e014      	b.n	800ef8c <_svfiprintf_r+0x110>
 800ef62:	eba0 0308 	sub.w	r3, r0, r8
 800ef66:	fa09 f303 	lsl.w	r3, r9, r3
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	9304      	str	r3, [sp, #16]
 800ef6e:	46a2      	mov	sl, r4
 800ef70:	e7d2      	b.n	800ef18 <_svfiprintf_r+0x9c>
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	1d19      	adds	r1, r3, #4
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	9103      	str	r1, [sp, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	bfbb      	ittet	lt
 800ef7e:	425b      	neglt	r3, r3
 800ef80:	f042 0202 	orrlt.w	r2, r2, #2
 800ef84:	9307      	strge	r3, [sp, #28]
 800ef86:	9307      	strlt	r3, [sp, #28]
 800ef88:	bfb8      	it	lt
 800ef8a:	9204      	strlt	r2, [sp, #16]
 800ef8c:	7823      	ldrb	r3, [r4, #0]
 800ef8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ef90:	d10c      	bne.n	800efac <_svfiprintf_r+0x130>
 800ef92:	7863      	ldrb	r3, [r4, #1]
 800ef94:	2b2a      	cmp	r3, #42	; 0x2a
 800ef96:	d134      	bne.n	800f002 <_svfiprintf_r+0x186>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	1d1a      	adds	r2, r3, #4
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	9203      	str	r2, [sp, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	bfb8      	it	lt
 800efa4:	f04f 33ff 	movlt.w	r3, #4294967295
 800efa8:	3402      	adds	r4, #2
 800efaa:	9305      	str	r3, [sp, #20]
 800efac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f074 <_svfiprintf_r+0x1f8>
 800efb0:	7821      	ldrb	r1, [r4, #0]
 800efb2:	2203      	movs	r2, #3
 800efb4:	4650      	mov	r0, sl
 800efb6:	f7f1 f92b 	bl	8000210 <memchr>
 800efba:	b138      	cbz	r0, 800efcc <_svfiprintf_r+0x150>
 800efbc:	9b04      	ldr	r3, [sp, #16]
 800efbe:	eba0 000a 	sub.w	r0, r0, sl
 800efc2:	2240      	movs	r2, #64	; 0x40
 800efc4:	4082      	lsls	r2, r0
 800efc6:	4313      	orrs	r3, r2
 800efc8:	3401      	adds	r4, #1
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd0:	4825      	ldr	r0, [pc, #148]	; (800f068 <_svfiprintf_r+0x1ec>)
 800efd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efd6:	2206      	movs	r2, #6
 800efd8:	f7f1 f91a 	bl	8000210 <memchr>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d038      	beq.n	800f052 <_svfiprintf_r+0x1d6>
 800efe0:	4b22      	ldr	r3, [pc, #136]	; (800f06c <_svfiprintf_r+0x1f0>)
 800efe2:	bb1b      	cbnz	r3, 800f02c <_svfiprintf_r+0x1b0>
 800efe4:	9b03      	ldr	r3, [sp, #12]
 800efe6:	3307      	adds	r3, #7
 800efe8:	f023 0307 	bic.w	r3, r3, #7
 800efec:	3308      	adds	r3, #8
 800efee:	9303      	str	r3, [sp, #12]
 800eff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff2:	4433      	add	r3, r6
 800eff4:	9309      	str	r3, [sp, #36]	; 0x24
 800eff6:	e768      	b.n	800eeca <_svfiprintf_r+0x4e>
 800eff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800effc:	460c      	mov	r4, r1
 800effe:	2001      	movs	r0, #1
 800f000:	e7a6      	b.n	800ef50 <_svfiprintf_r+0xd4>
 800f002:	2300      	movs	r3, #0
 800f004:	3401      	adds	r4, #1
 800f006:	9305      	str	r3, [sp, #20]
 800f008:	4619      	mov	r1, r3
 800f00a:	f04f 0c0a 	mov.w	ip, #10
 800f00e:	4620      	mov	r0, r4
 800f010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f014:	3a30      	subs	r2, #48	; 0x30
 800f016:	2a09      	cmp	r2, #9
 800f018:	d903      	bls.n	800f022 <_svfiprintf_r+0x1a6>
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0c6      	beq.n	800efac <_svfiprintf_r+0x130>
 800f01e:	9105      	str	r1, [sp, #20]
 800f020:	e7c4      	b.n	800efac <_svfiprintf_r+0x130>
 800f022:	fb0c 2101 	mla	r1, ip, r1, r2
 800f026:	4604      	mov	r4, r0
 800f028:	2301      	movs	r3, #1
 800f02a:	e7f0      	b.n	800f00e <_svfiprintf_r+0x192>
 800f02c:	ab03      	add	r3, sp, #12
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	462a      	mov	r2, r5
 800f032:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <_svfiprintf_r+0x1f4>)
 800f034:	a904      	add	r1, sp, #16
 800f036:	4638      	mov	r0, r7
 800f038:	f3af 8000 	nop.w
 800f03c:	1c42      	adds	r2, r0, #1
 800f03e:	4606      	mov	r6, r0
 800f040:	d1d6      	bne.n	800eff0 <_svfiprintf_r+0x174>
 800f042:	89ab      	ldrh	r3, [r5, #12]
 800f044:	065b      	lsls	r3, r3, #25
 800f046:	f53f af2d 	bmi.w	800eea4 <_svfiprintf_r+0x28>
 800f04a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f04c:	b01d      	add	sp, #116	; 0x74
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f052:	ab03      	add	r3, sp, #12
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	462a      	mov	r2, r5
 800f058:	4b05      	ldr	r3, [pc, #20]	; (800f070 <_svfiprintf_r+0x1f4>)
 800f05a:	a904      	add	r1, sp, #16
 800f05c:	4638      	mov	r0, r7
 800f05e:	f000 fa4b 	bl	800f4f8 <_printf_i>
 800f062:	e7eb      	b.n	800f03c <_svfiprintf_r+0x1c0>
 800f064:	080109ec 	.word	0x080109ec
 800f068:	080109f6 	.word	0x080109f6
 800f06c:	00000000 	.word	0x00000000
 800f070:	0800edc9 	.word	0x0800edc9
 800f074:	080109f2 	.word	0x080109f2

0800f078 <_sungetc_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	1c4b      	adds	r3, r1, #1
 800f07c:	4614      	mov	r4, r2
 800f07e:	d103      	bne.n	800f088 <_sungetc_r+0x10>
 800f080:	f04f 35ff 	mov.w	r5, #4294967295
 800f084:	4628      	mov	r0, r5
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	8993      	ldrh	r3, [r2, #12]
 800f08a:	f023 0320 	bic.w	r3, r3, #32
 800f08e:	8193      	strh	r3, [r2, #12]
 800f090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f092:	6852      	ldr	r2, [r2, #4]
 800f094:	b2cd      	uxtb	r5, r1
 800f096:	b18b      	cbz	r3, 800f0bc <_sungetc_r+0x44>
 800f098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f09a:	4293      	cmp	r3, r2
 800f09c:	dd08      	ble.n	800f0b0 <_sungetc_r+0x38>
 800f09e:	6823      	ldr	r3, [r4, #0]
 800f0a0:	1e5a      	subs	r2, r3, #1
 800f0a2:	6022      	str	r2, [r4, #0]
 800f0a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f0a8:	6863      	ldr	r3, [r4, #4]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	6063      	str	r3, [r4, #4]
 800f0ae:	e7e9      	b.n	800f084 <_sungetc_r+0xc>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	f000 fd78 	bl	800fba6 <__submore>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d0f1      	beq.n	800f09e <_sungetc_r+0x26>
 800f0ba:	e7e1      	b.n	800f080 <_sungetc_r+0x8>
 800f0bc:	6921      	ldr	r1, [r4, #16]
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	b151      	cbz	r1, 800f0d8 <_sungetc_r+0x60>
 800f0c2:	4299      	cmp	r1, r3
 800f0c4:	d208      	bcs.n	800f0d8 <_sungetc_r+0x60>
 800f0c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f0ca:	42a9      	cmp	r1, r5
 800f0cc:	d104      	bne.n	800f0d8 <_sungetc_r+0x60>
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	3201      	adds	r2, #1
 800f0d2:	6023      	str	r3, [r4, #0]
 800f0d4:	6062      	str	r2, [r4, #4]
 800f0d6:	e7d5      	b.n	800f084 <_sungetc_r+0xc>
 800f0d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800f0e2:	2303      	movs	r3, #3
 800f0e4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f0e6:	4623      	mov	r3, r4
 800f0e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e7dc      	b.n	800f0ac <_sungetc_r+0x34>

0800f0f2 <__ssrefill_r>:
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f0f8:	b169      	cbz	r1, 800f116 <__ssrefill_r+0x24>
 800f0fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0fe:	4299      	cmp	r1, r3
 800f100:	d001      	beq.n	800f106 <__ssrefill_r+0x14>
 800f102:	f7fe fde9 	bl	800dcd8 <_free_r>
 800f106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f108:	6063      	str	r3, [r4, #4]
 800f10a:	2000      	movs	r0, #0
 800f10c:	6360      	str	r0, [r4, #52]	; 0x34
 800f10e:	b113      	cbz	r3, 800f116 <__ssrefill_r+0x24>
 800f110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f112:	6023      	str	r3, [r4, #0]
 800f114:	bd10      	pop	{r4, pc}
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	2300      	movs	r3, #0
 800f11c:	6063      	str	r3, [r4, #4]
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	f043 0320 	orr.w	r3, r3, #32
 800f124:	81a3      	strh	r3, [r4, #12]
 800f126:	f04f 30ff 	mov.w	r0, #4294967295
 800f12a:	e7f3      	b.n	800f114 <__ssrefill_r+0x22>

0800f12c <__ssvfiscanf_r>:
 800f12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f130:	460c      	mov	r4, r1
 800f132:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f136:	2100      	movs	r1, #0
 800f138:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f13c:	49a6      	ldr	r1, [pc, #664]	; (800f3d8 <__ssvfiscanf_r+0x2ac>)
 800f13e:	91a0      	str	r1, [sp, #640]	; 0x280
 800f140:	f10d 0804 	add.w	r8, sp, #4
 800f144:	49a5      	ldr	r1, [pc, #660]	; (800f3dc <__ssvfiscanf_r+0x2b0>)
 800f146:	4fa6      	ldr	r7, [pc, #664]	; (800f3e0 <__ssvfiscanf_r+0x2b4>)
 800f148:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f3e4 <__ssvfiscanf_r+0x2b8>
 800f14c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f150:	4606      	mov	r6, r0
 800f152:	91a1      	str	r1, [sp, #644]	; 0x284
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	7813      	ldrb	r3, [r2, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	f000 815a 	beq.w	800f412 <__ssvfiscanf_r+0x2e6>
 800f15e:	5cf9      	ldrb	r1, [r7, r3]
 800f160:	f011 0108 	ands.w	r1, r1, #8
 800f164:	f102 0501 	add.w	r5, r2, #1
 800f168:	d019      	beq.n	800f19e <__ssvfiscanf_r+0x72>
 800f16a:	6863      	ldr	r3, [r4, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	dd0f      	ble.n	800f190 <__ssvfiscanf_r+0x64>
 800f170:	6823      	ldr	r3, [r4, #0]
 800f172:	781a      	ldrb	r2, [r3, #0]
 800f174:	5cba      	ldrb	r2, [r7, r2]
 800f176:	0712      	lsls	r2, r2, #28
 800f178:	d401      	bmi.n	800f17e <__ssvfiscanf_r+0x52>
 800f17a:	462a      	mov	r2, r5
 800f17c:	e7eb      	b.n	800f156 <__ssvfiscanf_r+0x2a>
 800f17e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f180:	3201      	adds	r2, #1
 800f182:	9245      	str	r2, [sp, #276]	; 0x114
 800f184:	6862      	ldr	r2, [r4, #4]
 800f186:	3301      	adds	r3, #1
 800f188:	3a01      	subs	r2, #1
 800f18a:	6062      	str	r2, [r4, #4]
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	e7ec      	b.n	800f16a <__ssvfiscanf_r+0x3e>
 800f190:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f192:	4621      	mov	r1, r4
 800f194:	4630      	mov	r0, r6
 800f196:	4798      	blx	r3
 800f198:	2800      	cmp	r0, #0
 800f19a:	d0e9      	beq.n	800f170 <__ssvfiscanf_r+0x44>
 800f19c:	e7ed      	b.n	800f17a <__ssvfiscanf_r+0x4e>
 800f19e:	2b25      	cmp	r3, #37	; 0x25
 800f1a0:	d012      	beq.n	800f1c8 <__ssvfiscanf_r+0x9c>
 800f1a2:	469a      	mov	sl, r3
 800f1a4:	6863      	ldr	r3, [r4, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f340 8091 	ble.w	800f2ce <__ssvfiscanf_r+0x1a2>
 800f1ac:	6822      	ldr	r2, [r4, #0]
 800f1ae:	7813      	ldrb	r3, [r2, #0]
 800f1b0:	4553      	cmp	r3, sl
 800f1b2:	f040 812e 	bne.w	800f412 <__ssvfiscanf_r+0x2e6>
 800f1b6:	6863      	ldr	r3, [r4, #4]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	6063      	str	r3, [r4, #4]
 800f1bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f1be:	3201      	adds	r2, #1
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	6022      	str	r2, [r4, #0]
 800f1c4:	9345      	str	r3, [sp, #276]	; 0x114
 800f1c6:	e7d8      	b.n	800f17a <__ssvfiscanf_r+0x4e>
 800f1c8:	9141      	str	r1, [sp, #260]	; 0x104
 800f1ca:	9143      	str	r1, [sp, #268]	; 0x10c
 800f1cc:	7853      	ldrb	r3, [r2, #1]
 800f1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d0:	bf02      	ittt	eq
 800f1d2:	2310      	moveq	r3, #16
 800f1d4:	1c95      	addeq	r5, r2, #2
 800f1d6:	9341      	streq	r3, [sp, #260]	; 0x104
 800f1d8:	220a      	movs	r2, #10
 800f1da:	46aa      	mov	sl, r5
 800f1dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f1e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f1e4:	2b09      	cmp	r3, #9
 800f1e6:	d91c      	bls.n	800f222 <__ssvfiscanf_r+0xf6>
 800f1e8:	487e      	ldr	r0, [pc, #504]	; (800f3e4 <__ssvfiscanf_r+0x2b8>)
 800f1ea:	2203      	movs	r2, #3
 800f1ec:	f7f1 f810 	bl	8000210 <memchr>
 800f1f0:	b138      	cbz	r0, 800f202 <__ssvfiscanf_r+0xd6>
 800f1f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f1f4:	eba0 0009 	sub.w	r0, r0, r9
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	4083      	lsls	r3, r0
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	9341      	str	r3, [sp, #260]	; 0x104
 800f200:	4655      	mov	r5, sl
 800f202:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f206:	2b78      	cmp	r3, #120	; 0x78
 800f208:	d806      	bhi.n	800f218 <__ssvfiscanf_r+0xec>
 800f20a:	2b57      	cmp	r3, #87	; 0x57
 800f20c:	d810      	bhi.n	800f230 <__ssvfiscanf_r+0x104>
 800f20e:	2b25      	cmp	r3, #37	; 0x25
 800f210:	d0c7      	beq.n	800f1a2 <__ssvfiscanf_r+0x76>
 800f212:	d857      	bhi.n	800f2c4 <__ssvfiscanf_r+0x198>
 800f214:	2b00      	cmp	r3, #0
 800f216:	d065      	beq.n	800f2e4 <__ssvfiscanf_r+0x1b8>
 800f218:	2303      	movs	r3, #3
 800f21a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f21c:	230a      	movs	r3, #10
 800f21e:	9342      	str	r3, [sp, #264]	; 0x108
 800f220:	e076      	b.n	800f310 <__ssvfiscanf_r+0x1e4>
 800f222:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f224:	fb02 1103 	mla	r1, r2, r3, r1
 800f228:	3930      	subs	r1, #48	; 0x30
 800f22a:	9143      	str	r1, [sp, #268]	; 0x10c
 800f22c:	4655      	mov	r5, sl
 800f22e:	e7d4      	b.n	800f1da <__ssvfiscanf_r+0xae>
 800f230:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f234:	2a20      	cmp	r2, #32
 800f236:	d8ef      	bhi.n	800f218 <__ssvfiscanf_r+0xec>
 800f238:	a101      	add	r1, pc, #4	; (adr r1, 800f240 <__ssvfiscanf_r+0x114>)
 800f23a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f23e:	bf00      	nop
 800f240:	0800f2f3 	.word	0x0800f2f3
 800f244:	0800f219 	.word	0x0800f219
 800f248:	0800f219 	.word	0x0800f219
 800f24c:	0800f351 	.word	0x0800f351
 800f250:	0800f219 	.word	0x0800f219
 800f254:	0800f219 	.word	0x0800f219
 800f258:	0800f219 	.word	0x0800f219
 800f25c:	0800f219 	.word	0x0800f219
 800f260:	0800f219 	.word	0x0800f219
 800f264:	0800f219 	.word	0x0800f219
 800f268:	0800f219 	.word	0x0800f219
 800f26c:	0800f367 	.word	0x0800f367
 800f270:	0800f34d 	.word	0x0800f34d
 800f274:	0800f2cb 	.word	0x0800f2cb
 800f278:	0800f2cb 	.word	0x0800f2cb
 800f27c:	0800f2cb 	.word	0x0800f2cb
 800f280:	0800f219 	.word	0x0800f219
 800f284:	0800f309 	.word	0x0800f309
 800f288:	0800f219 	.word	0x0800f219
 800f28c:	0800f219 	.word	0x0800f219
 800f290:	0800f219 	.word	0x0800f219
 800f294:	0800f219 	.word	0x0800f219
 800f298:	0800f377 	.word	0x0800f377
 800f29c:	0800f345 	.word	0x0800f345
 800f2a0:	0800f2eb 	.word	0x0800f2eb
 800f2a4:	0800f219 	.word	0x0800f219
 800f2a8:	0800f219 	.word	0x0800f219
 800f2ac:	0800f373 	.word	0x0800f373
 800f2b0:	0800f219 	.word	0x0800f219
 800f2b4:	0800f34d 	.word	0x0800f34d
 800f2b8:	0800f219 	.word	0x0800f219
 800f2bc:	0800f219 	.word	0x0800f219
 800f2c0:	0800f2f3 	.word	0x0800f2f3
 800f2c4:	3b45      	subs	r3, #69	; 0x45
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d8a6      	bhi.n	800f218 <__ssvfiscanf_r+0xec>
 800f2ca:	2305      	movs	r3, #5
 800f2cc:	e01f      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f2ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	4798      	blx	r3
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	f43f af68 	beq.w	800f1ac <__ssvfiscanf_r+0x80>
 800f2dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f040 808d 	bne.w	800f3fe <__ssvfiscanf_r+0x2d2>
 800f2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e8:	e08f      	b.n	800f40a <__ssvfiscanf_r+0x2de>
 800f2ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2ec:	f042 0220 	orr.w	r2, r2, #32
 800f2f0:	9241      	str	r2, [sp, #260]	; 0x104
 800f2f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2f8:	9241      	str	r2, [sp, #260]	; 0x104
 800f2fa:	2210      	movs	r2, #16
 800f2fc:	2b6f      	cmp	r3, #111	; 0x6f
 800f2fe:	9242      	str	r2, [sp, #264]	; 0x108
 800f300:	bf34      	ite	cc
 800f302:	2303      	movcc	r3, #3
 800f304:	2304      	movcs	r3, #4
 800f306:	e002      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f308:	2300      	movs	r3, #0
 800f30a:	9342      	str	r3, [sp, #264]	; 0x108
 800f30c:	2303      	movs	r3, #3
 800f30e:	9347      	str	r3, [sp, #284]	; 0x11c
 800f310:	6863      	ldr	r3, [r4, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	dd3d      	ble.n	800f392 <__ssvfiscanf_r+0x266>
 800f316:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f318:	0659      	lsls	r1, r3, #25
 800f31a:	d404      	bmi.n	800f326 <__ssvfiscanf_r+0x1fa>
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	781a      	ldrb	r2, [r3, #0]
 800f320:	5cba      	ldrb	r2, [r7, r2]
 800f322:	0712      	lsls	r2, r2, #28
 800f324:	d43c      	bmi.n	800f3a0 <__ssvfiscanf_r+0x274>
 800f326:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f328:	2b02      	cmp	r3, #2
 800f32a:	dc4b      	bgt.n	800f3c4 <__ssvfiscanf_r+0x298>
 800f32c:	466b      	mov	r3, sp
 800f32e:	4622      	mov	r2, r4
 800f330:	a941      	add	r1, sp, #260	; 0x104
 800f332:	4630      	mov	r0, r6
 800f334:	f000 fa02 	bl	800f73c <_scanf_chars>
 800f338:	2801      	cmp	r0, #1
 800f33a:	d06a      	beq.n	800f412 <__ssvfiscanf_r+0x2e6>
 800f33c:	2802      	cmp	r0, #2
 800f33e:	f47f af1c 	bne.w	800f17a <__ssvfiscanf_r+0x4e>
 800f342:	e7cb      	b.n	800f2dc <__ssvfiscanf_r+0x1b0>
 800f344:	2308      	movs	r3, #8
 800f346:	9342      	str	r3, [sp, #264]	; 0x108
 800f348:	2304      	movs	r3, #4
 800f34a:	e7e0      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f34c:	220a      	movs	r2, #10
 800f34e:	e7d5      	b.n	800f2fc <__ssvfiscanf_r+0x1d0>
 800f350:	4629      	mov	r1, r5
 800f352:	4640      	mov	r0, r8
 800f354:	f000 fbee 	bl	800fb34 <__sccl>
 800f358:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35e:	9341      	str	r3, [sp, #260]	; 0x104
 800f360:	4605      	mov	r5, r0
 800f362:	2301      	movs	r3, #1
 800f364:	e7d3      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f366:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36c:	9341      	str	r3, [sp, #260]	; 0x104
 800f36e:	2300      	movs	r3, #0
 800f370:	e7cd      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f372:	2302      	movs	r3, #2
 800f374:	e7cb      	b.n	800f30e <__ssvfiscanf_r+0x1e2>
 800f376:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f378:	06c3      	lsls	r3, r0, #27
 800f37a:	f53f aefe 	bmi.w	800f17a <__ssvfiscanf_r+0x4e>
 800f37e:	9b00      	ldr	r3, [sp, #0]
 800f380:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f382:	1d19      	adds	r1, r3, #4
 800f384:	9100      	str	r1, [sp, #0]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	07c0      	lsls	r0, r0, #31
 800f38a:	bf4c      	ite	mi
 800f38c:	801a      	strhmi	r2, [r3, #0]
 800f38e:	601a      	strpl	r2, [r3, #0]
 800f390:	e6f3      	b.n	800f17a <__ssvfiscanf_r+0x4e>
 800f392:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f394:	4621      	mov	r1, r4
 800f396:	4630      	mov	r0, r6
 800f398:	4798      	blx	r3
 800f39a:	2800      	cmp	r0, #0
 800f39c:	d0bb      	beq.n	800f316 <__ssvfiscanf_r+0x1ea>
 800f39e:	e79d      	b.n	800f2dc <__ssvfiscanf_r+0x1b0>
 800f3a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f3a2:	3201      	adds	r2, #1
 800f3a4:	9245      	str	r2, [sp, #276]	; 0x114
 800f3a6:	6862      	ldr	r2, [r4, #4]
 800f3a8:	3a01      	subs	r2, #1
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	6062      	str	r2, [r4, #4]
 800f3ae:	dd02      	ble.n	800f3b6 <__ssvfiscanf_r+0x28a>
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	e7b2      	b.n	800f31c <__ssvfiscanf_r+0x1f0>
 800f3b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	4798      	blx	r3
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0ac      	beq.n	800f31c <__ssvfiscanf_r+0x1f0>
 800f3c2:	e78b      	b.n	800f2dc <__ssvfiscanf_r+0x1b0>
 800f3c4:	2b04      	cmp	r3, #4
 800f3c6:	dc0f      	bgt.n	800f3e8 <__ssvfiscanf_r+0x2bc>
 800f3c8:	466b      	mov	r3, sp
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	a941      	add	r1, sp, #260	; 0x104
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f000 fa0e 	bl	800f7f0 <_scanf_i>
 800f3d4:	e7b0      	b.n	800f338 <__ssvfiscanf_r+0x20c>
 800f3d6:	bf00      	nop
 800f3d8:	0800f079 	.word	0x0800f079
 800f3dc:	0800f0f3 	.word	0x0800f0f3
 800f3e0:	08010701 	.word	0x08010701
 800f3e4:	080109f2 	.word	0x080109f2
 800f3e8:	4b0b      	ldr	r3, [pc, #44]	; (800f418 <__ssvfiscanf_r+0x2ec>)
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f43f aec5 	beq.w	800f17a <__ssvfiscanf_r+0x4e>
 800f3f0:	466b      	mov	r3, sp
 800f3f2:	4622      	mov	r2, r4
 800f3f4:	a941      	add	r1, sp, #260	; 0x104
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f3af 8000 	nop.w
 800f3fc:	e79c      	b.n	800f338 <__ssvfiscanf_r+0x20c>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f404:	bf18      	it	ne
 800f406:	f04f 30ff 	movne.w	r0, #4294967295
 800f40a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f412:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f414:	e7f9      	b.n	800f40a <__ssvfiscanf_r+0x2de>
 800f416:	bf00      	nop
 800f418:	00000000 	.word	0x00000000

0800f41c <_printf_common>:
 800f41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f420:	4616      	mov	r6, r2
 800f422:	4699      	mov	r9, r3
 800f424:	688a      	ldr	r2, [r1, #8]
 800f426:	690b      	ldr	r3, [r1, #16]
 800f428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f42c:	4293      	cmp	r3, r2
 800f42e:	bfb8      	it	lt
 800f430:	4613      	movlt	r3, r2
 800f432:	6033      	str	r3, [r6, #0]
 800f434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f438:	4607      	mov	r7, r0
 800f43a:	460c      	mov	r4, r1
 800f43c:	b10a      	cbz	r2, 800f442 <_printf_common+0x26>
 800f43e:	3301      	adds	r3, #1
 800f440:	6033      	str	r3, [r6, #0]
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	0699      	lsls	r1, r3, #26
 800f446:	bf42      	ittt	mi
 800f448:	6833      	ldrmi	r3, [r6, #0]
 800f44a:	3302      	addmi	r3, #2
 800f44c:	6033      	strmi	r3, [r6, #0]
 800f44e:	6825      	ldr	r5, [r4, #0]
 800f450:	f015 0506 	ands.w	r5, r5, #6
 800f454:	d106      	bne.n	800f464 <_printf_common+0x48>
 800f456:	f104 0a19 	add.w	sl, r4, #25
 800f45a:	68e3      	ldr	r3, [r4, #12]
 800f45c:	6832      	ldr	r2, [r6, #0]
 800f45e:	1a9b      	subs	r3, r3, r2
 800f460:	42ab      	cmp	r3, r5
 800f462:	dc26      	bgt.n	800f4b2 <_printf_common+0x96>
 800f464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f468:	1e13      	subs	r3, r2, #0
 800f46a:	6822      	ldr	r2, [r4, #0]
 800f46c:	bf18      	it	ne
 800f46e:	2301      	movne	r3, #1
 800f470:	0692      	lsls	r2, r2, #26
 800f472:	d42b      	bmi.n	800f4cc <_printf_common+0xb0>
 800f474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f478:	4649      	mov	r1, r9
 800f47a:	4638      	mov	r0, r7
 800f47c:	47c0      	blx	r8
 800f47e:	3001      	adds	r0, #1
 800f480:	d01e      	beq.n	800f4c0 <_printf_common+0xa4>
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	6922      	ldr	r2, [r4, #16]
 800f486:	f003 0306 	and.w	r3, r3, #6
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	bf02      	ittt	eq
 800f48e:	68e5      	ldreq	r5, [r4, #12]
 800f490:	6833      	ldreq	r3, [r6, #0]
 800f492:	1aed      	subeq	r5, r5, r3
 800f494:	68a3      	ldr	r3, [r4, #8]
 800f496:	bf0c      	ite	eq
 800f498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f49c:	2500      	movne	r5, #0
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	bfc4      	itt	gt
 800f4a2:	1a9b      	subgt	r3, r3, r2
 800f4a4:	18ed      	addgt	r5, r5, r3
 800f4a6:	2600      	movs	r6, #0
 800f4a8:	341a      	adds	r4, #26
 800f4aa:	42b5      	cmp	r5, r6
 800f4ac:	d11a      	bne.n	800f4e4 <_printf_common+0xc8>
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	e008      	b.n	800f4c4 <_printf_common+0xa8>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4652      	mov	r2, sl
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	47c0      	blx	r8
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d103      	bne.n	800f4c8 <_printf_common+0xac>
 800f4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c8:	3501      	adds	r5, #1
 800f4ca:	e7c6      	b.n	800f45a <_printf_common+0x3e>
 800f4cc:	18e1      	adds	r1, r4, r3
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	2030      	movs	r0, #48	; 0x30
 800f4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4d6:	4422      	add	r2, r4
 800f4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4e0:	3302      	adds	r3, #2
 800f4e2:	e7c7      	b.n	800f474 <_printf_common+0x58>
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	4622      	mov	r2, r4
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	4638      	mov	r0, r7
 800f4ec:	47c0      	blx	r8
 800f4ee:	3001      	adds	r0, #1
 800f4f0:	d0e6      	beq.n	800f4c0 <_printf_common+0xa4>
 800f4f2:	3601      	adds	r6, #1
 800f4f4:	e7d9      	b.n	800f4aa <_printf_common+0x8e>
	...

0800f4f8 <_printf_i>:
 800f4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4fc:	7e0f      	ldrb	r7, [r1, #24]
 800f4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f500:	2f78      	cmp	r7, #120	; 0x78
 800f502:	4691      	mov	r9, r2
 800f504:	4680      	mov	r8, r0
 800f506:	460c      	mov	r4, r1
 800f508:	469a      	mov	sl, r3
 800f50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f50e:	d807      	bhi.n	800f520 <_printf_i+0x28>
 800f510:	2f62      	cmp	r7, #98	; 0x62
 800f512:	d80a      	bhi.n	800f52a <_printf_i+0x32>
 800f514:	2f00      	cmp	r7, #0
 800f516:	f000 80d4 	beq.w	800f6c2 <_printf_i+0x1ca>
 800f51a:	2f58      	cmp	r7, #88	; 0x58
 800f51c:	f000 80c0 	beq.w	800f6a0 <_printf_i+0x1a8>
 800f520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f528:	e03a      	b.n	800f5a0 <_printf_i+0xa8>
 800f52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f52e:	2b15      	cmp	r3, #21
 800f530:	d8f6      	bhi.n	800f520 <_printf_i+0x28>
 800f532:	a101      	add	r1, pc, #4	; (adr r1, 800f538 <_printf_i+0x40>)
 800f534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f538:	0800f591 	.word	0x0800f591
 800f53c:	0800f5a5 	.word	0x0800f5a5
 800f540:	0800f521 	.word	0x0800f521
 800f544:	0800f521 	.word	0x0800f521
 800f548:	0800f521 	.word	0x0800f521
 800f54c:	0800f521 	.word	0x0800f521
 800f550:	0800f5a5 	.word	0x0800f5a5
 800f554:	0800f521 	.word	0x0800f521
 800f558:	0800f521 	.word	0x0800f521
 800f55c:	0800f521 	.word	0x0800f521
 800f560:	0800f521 	.word	0x0800f521
 800f564:	0800f6a9 	.word	0x0800f6a9
 800f568:	0800f5d1 	.word	0x0800f5d1
 800f56c:	0800f663 	.word	0x0800f663
 800f570:	0800f521 	.word	0x0800f521
 800f574:	0800f521 	.word	0x0800f521
 800f578:	0800f6cb 	.word	0x0800f6cb
 800f57c:	0800f521 	.word	0x0800f521
 800f580:	0800f5d1 	.word	0x0800f5d1
 800f584:	0800f521 	.word	0x0800f521
 800f588:	0800f521 	.word	0x0800f521
 800f58c:	0800f66b 	.word	0x0800f66b
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	1d1a      	adds	r2, r3, #4
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	602a      	str	r2, [r5, #0]
 800f598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e09f      	b.n	800f6e4 <_printf_i+0x1ec>
 800f5a4:	6820      	ldr	r0, [r4, #0]
 800f5a6:	682b      	ldr	r3, [r5, #0]
 800f5a8:	0607      	lsls	r7, r0, #24
 800f5aa:	f103 0104 	add.w	r1, r3, #4
 800f5ae:	6029      	str	r1, [r5, #0]
 800f5b0:	d501      	bpl.n	800f5b6 <_printf_i+0xbe>
 800f5b2:	681e      	ldr	r6, [r3, #0]
 800f5b4:	e003      	b.n	800f5be <_printf_i+0xc6>
 800f5b6:	0646      	lsls	r6, r0, #25
 800f5b8:	d5fb      	bpl.n	800f5b2 <_printf_i+0xba>
 800f5ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f5be:	2e00      	cmp	r6, #0
 800f5c0:	da03      	bge.n	800f5ca <_printf_i+0xd2>
 800f5c2:	232d      	movs	r3, #45	; 0x2d
 800f5c4:	4276      	negs	r6, r6
 800f5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5ca:	485a      	ldr	r0, [pc, #360]	; (800f734 <_printf_i+0x23c>)
 800f5cc:	230a      	movs	r3, #10
 800f5ce:	e012      	b.n	800f5f6 <_printf_i+0xfe>
 800f5d0:	682b      	ldr	r3, [r5, #0]
 800f5d2:	6820      	ldr	r0, [r4, #0]
 800f5d4:	1d19      	adds	r1, r3, #4
 800f5d6:	6029      	str	r1, [r5, #0]
 800f5d8:	0605      	lsls	r5, r0, #24
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0xe8>
 800f5dc:	681e      	ldr	r6, [r3, #0]
 800f5de:	e002      	b.n	800f5e6 <_printf_i+0xee>
 800f5e0:	0641      	lsls	r1, r0, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0xe4>
 800f5e4:	881e      	ldrh	r6, [r3, #0]
 800f5e6:	4853      	ldr	r0, [pc, #332]	; (800f734 <_printf_i+0x23c>)
 800f5e8:	2f6f      	cmp	r7, #111	; 0x6f
 800f5ea:	bf0c      	ite	eq
 800f5ec:	2308      	moveq	r3, #8
 800f5ee:	230a      	movne	r3, #10
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5f6:	6865      	ldr	r5, [r4, #4]
 800f5f8:	60a5      	str	r5, [r4, #8]
 800f5fa:	2d00      	cmp	r5, #0
 800f5fc:	bfa2      	ittt	ge
 800f5fe:	6821      	ldrge	r1, [r4, #0]
 800f600:	f021 0104 	bicge.w	r1, r1, #4
 800f604:	6021      	strge	r1, [r4, #0]
 800f606:	b90e      	cbnz	r6, 800f60c <_printf_i+0x114>
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d04b      	beq.n	800f6a4 <_printf_i+0x1ac>
 800f60c:	4615      	mov	r5, r2
 800f60e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f612:	fb03 6711 	mls	r7, r3, r1, r6
 800f616:	5dc7      	ldrb	r7, [r0, r7]
 800f618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f61c:	4637      	mov	r7, r6
 800f61e:	42bb      	cmp	r3, r7
 800f620:	460e      	mov	r6, r1
 800f622:	d9f4      	bls.n	800f60e <_printf_i+0x116>
 800f624:	2b08      	cmp	r3, #8
 800f626:	d10b      	bne.n	800f640 <_printf_i+0x148>
 800f628:	6823      	ldr	r3, [r4, #0]
 800f62a:	07de      	lsls	r6, r3, #31
 800f62c:	d508      	bpl.n	800f640 <_printf_i+0x148>
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	6861      	ldr	r1, [r4, #4]
 800f632:	4299      	cmp	r1, r3
 800f634:	bfde      	ittt	le
 800f636:	2330      	movle	r3, #48	; 0x30
 800f638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f63c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f640:	1b52      	subs	r2, r2, r5
 800f642:	6122      	str	r2, [r4, #16]
 800f644:	f8cd a000 	str.w	sl, [sp]
 800f648:	464b      	mov	r3, r9
 800f64a:	aa03      	add	r2, sp, #12
 800f64c:	4621      	mov	r1, r4
 800f64e:	4640      	mov	r0, r8
 800f650:	f7ff fee4 	bl	800f41c <_printf_common>
 800f654:	3001      	adds	r0, #1
 800f656:	d14a      	bne.n	800f6ee <_printf_i+0x1f6>
 800f658:	f04f 30ff 	mov.w	r0, #4294967295
 800f65c:	b004      	add	sp, #16
 800f65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	f043 0320 	orr.w	r3, r3, #32
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	4833      	ldr	r0, [pc, #204]	; (800f738 <_printf_i+0x240>)
 800f66c:	2778      	movs	r7, #120	; 0x78
 800f66e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	6829      	ldr	r1, [r5, #0]
 800f676:	061f      	lsls	r7, r3, #24
 800f678:	f851 6b04 	ldr.w	r6, [r1], #4
 800f67c:	d402      	bmi.n	800f684 <_printf_i+0x18c>
 800f67e:	065f      	lsls	r7, r3, #25
 800f680:	bf48      	it	mi
 800f682:	b2b6      	uxthmi	r6, r6
 800f684:	07df      	lsls	r7, r3, #31
 800f686:	bf48      	it	mi
 800f688:	f043 0320 	orrmi.w	r3, r3, #32
 800f68c:	6029      	str	r1, [r5, #0]
 800f68e:	bf48      	it	mi
 800f690:	6023      	strmi	r3, [r4, #0]
 800f692:	b91e      	cbnz	r6, 800f69c <_printf_i+0x1a4>
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	f023 0320 	bic.w	r3, r3, #32
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	2310      	movs	r3, #16
 800f69e:	e7a7      	b.n	800f5f0 <_printf_i+0xf8>
 800f6a0:	4824      	ldr	r0, [pc, #144]	; (800f734 <_printf_i+0x23c>)
 800f6a2:	e7e4      	b.n	800f66e <_printf_i+0x176>
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	e7bd      	b.n	800f624 <_printf_i+0x12c>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	6826      	ldr	r6, [r4, #0]
 800f6ac:	6961      	ldr	r1, [r4, #20]
 800f6ae:	1d18      	adds	r0, r3, #4
 800f6b0:	6028      	str	r0, [r5, #0]
 800f6b2:	0635      	lsls	r5, r6, #24
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	d501      	bpl.n	800f6bc <_printf_i+0x1c4>
 800f6b8:	6019      	str	r1, [r3, #0]
 800f6ba:	e002      	b.n	800f6c2 <_printf_i+0x1ca>
 800f6bc:	0670      	lsls	r0, r6, #25
 800f6be:	d5fb      	bpl.n	800f6b8 <_printf_i+0x1c0>
 800f6c0:	8019      	strh	r1, [r3, #0]
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	6123      	str	r3, [r4, #16]
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	e7bc      	b.n	800f644 <_printf_i+0x14c>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	1d1a      	adds	r2, r3, #4
 800f6ce:	602a      	str	r2, [r5, #0]
 800f6d0:	681d      	ldr	r5, [r3, #0]
 800f6d2:	6862      	ldr	r2, [r4, #4]
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f7f0 fd9a 	bl	8000210 <memchr>
 800f6dc:	b108      	cbz	r0, 800f6e2 <_printf_i+0x1ea>
 800f6de:	1b40      	subs	r0, r0, r5
 800f6e0:	6060      	str	r0, [r4, #4]
 800f6e2:	6863      	ldr	r3, [r4, #4]
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ec:	e7aa      	b.n	800f644 <_printf_i+0x14c>
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	462a      	mov	r2, r5
 800f6f2:	4649      	mov	r1, r9
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	47d0      	blx	sl
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	d0ad      	beq.n	800f658 <_printf_i+0x160>
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	079b      	lsls	r3, r3, #30
 800f700:	d413      	bmi.n	800f72a <_printf_i+0x232>
 800f702:	68e0      	ldr	r0, [r4, #12]
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	4298      	cmp	r0, r3
 800f708:	bfb8      	it	lt
 800f70a:	4618      	movlt	r0, r3
 800f70c:	e7a6      	b.n	800f65c <_printf_i+0x164>
 800f70e:	2301      	movs	r3, #1
 800f710:	4632      	mov	r2, r6
 800f712:	4649      	mov	r1, r9
 800f714:	4640      	mov	r0, r8
 800f716:	47d0      	blx	sl
 800f718:	3001      	adds	r0, #1
 800f71a:	d09d      	beq.n	800f658 <_printf_i+0x160>
 800f71c:	3501      	adds	r5, #1
 800f71e:	68e3      	ldr	r3, [r4, #12]
 800f720:	9903      	ldr	r1, [sp, #12]
 800f722:	1a5b      	subs	r3, r3, r1
 800f724:	42ab      	cmp	r3, r5
 800f726:	dcf2      	bgt.n	800f70e <_printf_i+0x216>
 800f728:	e7eb      	b.n	800f702 <_printf_i+0x20a>
 800f72a:	2500      	movs	r5, #0
 800f72c:	f104 0619 	add.w	r6, r4, #25
 800f730:	e7f5      	b.n	800f71e <_printf_i+0x226>
 800f732:	bf00      	nop
 800f734:	080109fd 	.word	0x080109fd
 800f738:	08010a0e 	.word	0x08010a0e

0800f73c <_scanf_chars>:
 800f73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f740:	4615      	mov	r5, r2
 800f742:	688a      	ldr	r2, [r1, #8]
 800f744:	4680      	mov	r8, r0
 800f746:	460c      	mov	r4, r1
 800f748:	b932      	cbnz	r2, 800f758 <_scanf_chars+0x1c>
 800f74a:	698a      	ldr	r2, [r1, #24]
 800f74c:	2a00      	cmp	r2, #0
 800f74e:	bf0c      	ite	eq
 800f750:	2201      	moveq	r2, #1
 800f752:	f04f 32ff 	movne.w	r2, #4294967295
 800f756:	608a      	str	r2, [r1, #8]
 800f758:	6822      	ldr	r2, [r4, #0]
 800f75a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f7ec <_scanf_chars+0xb0>
 800f75e:	06d1      	lsls	r1, r2, #27
 800f760:	bf5f      	itttt	pl
 800f762:	681a      	ldrpl	r2, [r3, #0]
 800f764:	1d11      	addpl	r1, r2, #4
 800f766:	6019      	strpl	r1, [r3, #0]
 800f768:	6816      	ldrpl	r6, [r2, #0]
 800f76a:	2700      	movs	r7, #0
 800f76c:	69a0      	ldr	r0, [r4, #24]
 800f76e:	b188      	cbz	r0, 800f794 <_scanf_chars+0x58>
 800f770:	2801      	cmp	r0, #1
 800f772:	d107      	bne.n	800f784 <_scanf_chars+0x48>
 800f774:	682a      	ldr	r2, [r5, #0]
 800f776:	7811      	ldrb	r1, [r2, #0]
 800f778:	6962      	ldr	r2, [r4, #20]
 800f77a:	5c52      	ldrb	r2, [r2, r1]
 800f77c:	b952      	cbnz	r2, 800f794 <_scanf_chars+0x58>
 800f77e:	2f00      	cmp	r7, #0
 800f780:	d031      	beq.n	800f7e6 <_scanf_chars+0xaa>
 800f782:	e022      	b.n	800f7ca <_scanf_chars+0x8e>
 800f784:	2802      	cmp	r0, #2
 800f786:	d120      	bne.n	800f7ca <_scanf_chars+0x8e>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f790:	071b      	lsls	r3, r3, #28
 800f792:	d41a      	bmi.n	800f7ca <_scanf_chars+0x8e>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	06da      	lsls	r2, r3, #27
 800f798:	bf5e      	ittt	pl
 800f79a:	682b      	ldrpl	r3, [r5, #0]
 800f79c:	781b      	ldrbpl	r3, [r3, #0]
 800f79e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f7a2:	682a      	ldr	r2, [r5, #0]
 800f7a4:	686b      	ldr	r3, [r5, #4]
 800f7a6:	3201      	adds	r2, #1
 800f7a8:	602a      	str	r2, [r5, #0]
 800f7aa:	68a2      	ldr	r2, [r4, #8]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	3a01      	subs	r2, #1
 800f7b0:	606b      	str	r3, [r5, #4]
 800f7b2:	3701      	adds	r7, #1
 800f7b4:	60a2      	str	r2, [r4, #8]
 800f7b6:	b142      	cbz	r2, 800f7ca <_scanf_chars+0x8e>
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	dcd7      	bgt.n	800f76c <_scanf_chars+0x30>
 800f7bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	4798      	blx	r3
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d0d0      	beq.n	800f76c <_scanf_chars+0x30>
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	f013 0310 	ands.w	r3, r3, #16
 800f7d0:	d105      	bne.n	800f7de <_scanf_chars+0xa2>
 800f7d2:	68e2      	ldr	r2, [r4, #12]
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	60e2      	str	r2, [r4, #12]
 800f7d8:	69a2      	ldr	r2, [r4, #24]
 800f7da:	b102      	cbz	r2, 800f7de <_scanf_chars+0xa2>
 800f7dc:	7033      	strb	r3, [r6, #0]
 800f7de:	6923      	ldr	r3, [r4, #16]
 800f7e0:	443b      	add	r3, r7
 800f7e2:	6123      	str	r3, [r4, #16]
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ea:	bf00      	nop
 800f7ec:	08010701 	.word	0x08010701

0800f7f0 <_scanf_i>:
 800f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f4:	4698      	mov	r8, r3
 800f7f6:	4b74      	ldr	r3, [pc, #464]	; (800f9c8 <_scanf_i+0x1d8>)
 800f7f8:	460c      	mov	r4, r1
 800f7fa:	4682      	mov	sl, r0
 800f7fc:	4616      	mov	r6, r2
 800f7fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f802:	b087      	sub	sp, #28
 800f804:	ab03      	add	r3, sp, #12
 800f806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f80a:	4b70      	ldr	r3, [pc, #448]	; (800f9cc <_scanf_i+0x1dc>)
 800f80c:	69a1      	ldr	r1, [r4, #24]
 800f80e:	4a70      	ldr	r2, [pc, #448]	; (800f9d0 <_scanf_i+0x1e0>)
 800f810:	2903      	cmp	r1, #3
 800f812:	bf18      	it	ne
 800f814:	461a      	movne	r2, r3
 800f816:	68a3      	ldr	r3, [r4, #8]
 800f818:	9201      	str	r2, [sp, #4]
 800f81a:	1e5a      	subs	r2, r3, #1
 800f81c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f820:	bf88      	it	hi
 800f822:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f826:	4627      	mov	r7, r4
 800f828:	bf82      	ittt	hi
 800f82a:	eb03 0905 	addhi.w	r9, r3, r5
 800f82e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f832:	60a3      	strhi	r3, [r4, #8]
 800f834:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f838:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f83c:	bf98      	it	ls
 800f83e:	f04f 0900 	movls.w	r9, #0
 800f842:	6023      	str	r3, [r4, #0]
 800f844:	463d      	mov	r5, r7
 800f846:	f04f 0b00 	mov.w	fp, #0
 800f84a:	6831      	ldr	r1, [r6, #0]
 800f84c:	ab03      	add	r3, sp, #12
 800f84e:	7809      	ldrb	r1, [r1, #0]
 800f850:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f854:	2202      	movs	r2, #2
 800f856:	f7f0 fcdb 	bl	8000210 <memchr>
 800f85a:	b328      	cbz	r0, 800f8a8 <_scanf_i+0xb8>
 800f85c:	f1bb 0f01 	cmp.w	fp, #1
 800f860:	d159      	bne.n	800f916 <_scanf_i+0x126>
 800f862:	6862      	ldr	r2, [r4, #4]
 800f864:	b92a      	cbnz	r2, 800f872 <_scanf_i+0x82>
 800f866:	6822      	ldr	r2, [r4, #0]
 800f868:	2308      	movs	r3, #8
 800f86a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f86e:	6063      	str	r3, [r4, #4]
 800f870:	6022      	str	r2, [r4, #0]
 800f872:	6822      	ldr	r2, [r4, #0]
 800f874:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f878:	6022      	str	r2, [r4, #0]
 800f87a:	68a2      	ldr	r2, [r4, #8]
 800f87c:	1e51      	subs	r1, r2, #1
 800f87e:	60a1      	str	r1, [r4, #8]
 800f880:	b192      	cbz	r2, 800f8a8 <_scanf_i+0xb8>
 800f882:	6832      	ldr	r2, [r6, #0]
 800f884:	1c51      	adds	r1, r2, #1
 800f886:	6031      	str	r1, [r6, #0]
 800f888:	7812      	ldrb	r2, [r2, #0]
 800f88a:	f805 2b01 	strb.w	r2, [r5], #1
 800f88e:	6872      	ldr	r2, [r6, #4]
 800f890:	3a01      	subs	r2, #1
 800f892:	2a00      	cmp	r2, #0
 800f894:	6072      	str	r2, [r6, #4]
 800f896:	dc07      	bgt.n	800f8a8 <_scanf_i+0xb8>
 800f898:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f89c:	4631      	mov	r1, r6
 800f89e:	4650      	mov	r0, sl
 800f8a0:	4790      	blx	r2
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	f040 8085 	bne.w	800f9b2 <_scanf_i+0x1c2>
 800f8a8:	f10b 0b01 	add.w	fp, fp, #1
 800f8ac:	f1bb 0f03 	cmp.w	fp, #3
 800f8b0:	d1cb      	bne.n	800f84a <_scanf_i+0x5a>
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	b90b      	cbnz	r3, 800f8ba <_scanf_i+0xca>
 800f8b6:	230a      	movs	r3, #10
 800f8b8:	6063      	str	r3, [r4, #4]
 800f8ba:	6863      	ldr	r3, [r4, #4]
 800f8bc:	4945      	ldr	r1, [pc, #276]	; (800f9d4 <_scanf_i+0x1e4>)
 800f8be:	6960      	ldr	r0, [r4, #20]
 800f8c0:	1ac9      	subs	r1, r1, r3
 800f8c2:	f000 f937 	bl	800fb34 <__sccl>
 800f8c6:	f04f 0b00 	mov.w	fp, #0
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	6822      	ldr	r2, [r4, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d03d      	beq.n	800f94e <_scanf_i+0x15e>
 800f8d2:	6831      	ldr	r1, [r6, #0]
 800f8d4:	6960      	ldr	r0, [r4, #20]
 800f8d6:	f891 c000 	ldrb.w	ip, [r1]
 800f8da:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d035      	beq.n	800f94e <_scanf_i+0x15e>
 800f8e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f8e6:	d124      	bne.n	800f932 <_scanf_i+0x142>
 800f8e8:	0510      	lsls	r0, r2, #20
 800f8ea:	d522      	bpl.n	800f932 <_scanf_i+0x142>
 800f8ec:	f10b 0b01 	add.w	fp, fp, #1
 800f8f0:	f1b9 0f00 	cmp.w	r9, #0
 800f8f4:	d003      	beq.n	800f8fe <_scanf_i+0x10e>
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800f8fc:	60a3      	str	r3, [r4, #8]
 800f8fe:	6873      	ldr	r3, [r6, #4]
 800f900:	3b01      	subs	r3, #1
 800f902:	2b00      	cmp	r3, #0
 800f904:	6073      	str	r3, [r6, #4]
 800f906:	dd1b      	ble.n	800f940 <_scanf_i+0x150>
 800f908:	6833      	ldr	r3, [r6, #0]
 800f90a:	3301      	adds	r3, #1
 800f90c:	6033      	str	r3, [r6, #0]
 800f90e:	68a3      	ldr	r3, [r4, #8]
 800f910:	3b01      	subs	r3, #1
 800f912:	60a3      	str	r3, [r4, #8]
 800f914:	e7d9      	b.n	800f8ca <_scanf_i+0xda>
 800f916:	f1bb 0f02 	cmp.w	fp, #2
 800f91a:	d1ae      	bne.n	800f87a <_scanf_i+0x8a>
 800f91c:	6822      	ldr	r2, [r4, #0]
 800f91e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f922:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f926:	d1bf      	bne.n	800f8a8 <_scanf_i+0xb8>
 800f928:	2310      	movs	r3, #16
 800f92a:	6063      	str	r3, [r4, #4]
 800f92c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f930:	e7a2      	b.n	800f878 <_scanf_i+0x88>
 800f932:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f936:	6022      	str	r2, [r4, #0]
 800f938:	780b      	ldrb	r3, [r1, #0]
 800f93a:	f805 3b01 	strb.w	r3, [r5], #1
 800f93e:	e7de      	b.n	800f8fe <_scanf_i+0x10e>
 800f940:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f944:	4631      	mov	r1, r6
 800f946:	4650      	mov	r0, sl
 800f948:	4798      	blx	r3
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d0df      	beq.n	800f90e <_scanf_i+0x11e>
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	05d9      	lsls	r1, r3, #23
 800f952:	d50d      	bpl.n	800f970 <_scanf_i+0x180>
 800f954:	42bd      	cmp	r5, r7
 800f956:	d909      	bls.n	800f96c <_scanf_i+0x17c>
 800f958:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f95c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f960:	4632      	mov	r2, r6
 800f962:	4650      	mov	r0, sl
 800f964:	4798      	blx	r3
 800f966:	f105 39ff 	add.w	r9, r5, #4294967295
 800f96a:	464d      	mov	r5, r9
 800f96c:	42bd      	cmp	r5, r7
 800f96e:	d028      	beq.n	800f9c2 <_scanf_i+0x1d2>
 800f970:	6822      	ldr	r2, [r4, #0]
 800f972:	f012 0210 	ands.w	r2, r2, #16
 800f976:	d113      	bne.n	800f9a0 <_scanf_i+0x1b0>
 800f978:	702a      	strb	r2, [r5, #0]
 800f97a:	6863      	ldr	r3, [r4, #4]
 800f97c:	9e01      	ldr	r6, [sp, #4]
 800f97e:	4639      	mov	r1, r7
 800f980:	4650      	mov	r0, sl
 800f982:	47b0      	blx	r6
 800f984:	f8d8 3000 	ldr.w	r3, [r8]
 800f988:	6821      	ldr	r1, [r4, #0]
 800f98a:	1d1a      	adds	r2, r3, #4
 800f98c:	f8c8 2000 	str.w	r2, [r8]
 800f990:	f011 0f20 	tst.w	r1, #32
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	d00f      	beq.n	800f9b8 <_scanf_i+0x1c8>
 800f998:	6018      	str	r0, [r3, #0]
 800f99a:	68e3      	ldr	r3, [r4, #12]
 800f99c:	3301      	adds	r3, #1
 800f99e:	60e3      	str	r3, [r4, #12]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	1bed      	subs	r5, r5, r7
 800f9a4:	445d      	add	r5, fp
 800f9a6:	442b      	add	r3, r5
 800f9a8:	6123      	str	r3, [r4, #16]
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	b007      	add	sp, #28
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	f04f 0b00 	mov.w	fp, #0
 800f9b6:	e7ca      	b.n	800f94e <_scanf_i+0x15e>
 800f9b8:	07ca      	lsls	r2, r1, #31
 800f9ba:	bf4c      	ite	mi
 800f9bc:	8018      	strhmi	r0, [r3, #0]
 800f9be:	6018      	strpl	r0, [r3, #0]
 800f9c0:	e7eb      	b.n	800f99a <_scanf_i+0x1aa>
 800f9c2:	2001      	movs	r0, #1
 800f9c4:	e7f2      	b.n	800f9ac <_scanf_i+0x1bc>
 800f9c6:	bf00      	nop
 800f9c8:	08010570 	.word	0x08010570
 800f9cc:	0800fea5 	.word	0x0800fea5
 800f9d0:	0800fdbd 	.word	0x0800fdbd
 800f9d4:	08010a2f 	.word	0x08010a2f

0800f9d8 <__sflush_r>:
 800f9d8:	898a      	ldrh	r2, [r1, #12]
 800f9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9de:	4605      	mov	r5, r0
 800f9e0:	0710      	lsls	r0, r2, #28
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	d458      	bmi.n	800fa98 <__sflush_r+0xc0>
 800f9e6:	684b      	ldr	r3, [r1, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dc05      	bgt.n	800f9f8 <__sflush_r+0x20>
 800f9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	dc02      	bgt.n	800f9f8 <__sflush_r+0x20>
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9fa:	2e00      	cmp	r6, #0
 800f9fc:	d0f9      	beq.n	800f9f2 <__sflush_r+0x1a>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa04:	682f      	ldr	r7, [r5, #0]
 800fa06:	6a21      	ldr	r1, [r4, #32]
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	d032      	beq.n	800fa72 <__sflush_r+0x9a>
 800fa0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa0e:	89a3      	ldrh	r3, [r4, #12]
 800fa10:	075a      	lsls	r2, r3, #29
 800fa12:	d505      	bpl.n	800fa20 <__sflush_r+0x48>
 800fa14:	6863      	ldr	r3, [r4, #4]
 800fa16:	1ac0      	subs	r0, r0, r3
 800fa18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa1a:	b10b      	cbz	r3, 800fa20 <__sflush_r+0x48>
 800fa1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa1e:	1ac0      	subs	r0, r0, r3
 800fa20:	2300      	movs	r3, #0
 800fa22:	4602      	mov	r2, r0
 800fa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa26:	6a21      	ldr	r1, [r4, #32]
 800fa28:	4628      	mov	r0, r5
 800fa2a:	47b0      	blx	r6
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	d106      	bne.n	800fa40 <__sflush_r+0x68>
 800fa32:	6829      	ldr	r1, [r5, #0]
 800fa34:	291d      	cmp	r1, #29
 800fa36:	d82b      	bhi.n	800fa90 <__sflush_r+0xb8>
 800fa38:	4a29      	ldr	r2, [pc, #164]	; (800fae0 <__sflush_r+0x108>)
 800fa3a:	410a      	asrs	r2, r1
 800fa3c:	07d6      	lsls	r6, r2, #31
 800fa3e:	d427      	bmi.n	800fa90 <__sflush_r+0xb8>
 800fa40:	2200      	movs	r2, #0
 800fa42:	6062      	str	r2, [r4, #4]
 800fa44:	04d9      	lsls	r1, r3, #19
 800fa46:	6922      	ldr	r2, [r4, #16]
 800fa48:	6022      	str	r2, [r4, #0]
 800fa4a:	d504      	bpl.n	800fa56 <__sflush_r+0x7e>
 800fa4c:	1c42      	adds	r2, r0, #1
 800fa4e:	d101      	bne.n	800fa54 <__sflush_r+0x7c>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	b903      	cbnz	r3, 800fa56 <__sflush_r+0x7e>
 800fa54:	6560      	str	r0, [r4, #84]	; 0x54
 800fa56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa58:	602f      	str	r7, [r5, #0]
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	d0c9      	beq.n	800f9f2 <__sflush_r+0x1a>
 800fa5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa62:	4299      	cmp	r1, r3
 800fa64:	d002      	beq.n	800fa6c <__sflush_r+0x94>
 800fa66:	4628      	mov	r0, r5
 800fa68:	f7fe f936 	bl	800dcd8 <_free_r>
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	6360      	str	r0, [r4, #52]	; 0x34
 800fa70:	e7c0      	b.n	800f9f4 <__sflush_r+0x1c>
 800fa72:	2301      	movs	r3, #1
 800fa74:	4628      	mov	r0, r5
 800fa76:	47b0      	blx	r6
 800fa78:	1c41      	adds	r1, r0, #1
 800fa7a:	d1c8      	bne.n	800fa0e <__sflush_r+0x36>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d0c5      	beq.n	800fa0e <__sflush_r+0x36>
 800fa82:	2b1d      	cmp	r3, #29
 800fa84:	d001      	beq.n	800fa8a <__sflush_r+0xb2>
 800fa86:	2b16      	cmp	r3, #22
 800fa88:	d101      	bne.n	800fa8e <__sflush_r+0xb6>
 800fa8a:	602f      	str	r7, [r5, #0]
 800fa8c:	e7b1      	b.n	800f9f2 <__sflush_r+0x1a>
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa94:	81a3      	strh	r3, [r4, #12]
 800fa96:	e7ad      	b.n	800f9f4 <__sflush_r+0x1c>
 800fa98:	690f      	ldr	r7, [r1, #16]
 800fa9a:	2f00      	cmp	r7, #0
 800fa9c:	d0a9      	beq.n	800f9f2 <__sflush_r+0x1a>
 800fa9e:	0793      	lsls	r3, r2, #30
 800faa0:	680e      	ldr	r6, [r1, #0]
 800faa2:	bf08      	it	eq
 800faa4:	694b      	ldreq	r3, [r1, #20]
 800faa6:	600f      	str	r7, [r1, #0]
 800faa8:	bf18      	it	ne
 800faaa:	2300      	movne	r3, #0
 800faac:	eba6 0807 	sub.w	r8, r6, r7
 800fab0:	608b      	str	r3, [r1, #8]
 800fab2:	f1b8 0f00 	cmp.w	r8, #0
 800fab6:	dd9c      	ble.n	800f9f2 <__sflush_r+0x1a>
 800fab8:	6a21      	ldr	r1, [r4, #32]
 800faba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fabc:	4643      	mov	r3, r8
 800fabe:	463a      	mov	r2, r7
 800fac0:	4628      	mov	r0, r5
 800fac2:	47b0      	blx	r6
 800fac4:	2800      	cmp	r0, #0
 800fac6:	dc06      	bgt.n	800fad6 <__sflush_r+0xfe>
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800face:	81a3      	strh	r3, [r4, #12]
 800fad0:	f04f 30ff 	mov.w	r0, #4294967295
 800fad4:	e78e      	b.n	800f9f4 <__sflush_r+0x1c>
 800fad6:	4407      	add	r7, r0
 800fad8:	eba8 0800 	sub.w	r8, r8, r0
 800fadc:	e7e9      	b.n	800fab2 <__sflush_r+0xda>
 800fade:	bf00      	nop
 800fae0:	dfbffffe 	.word	0xdfbffffe

0800fae4 <_fflush_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	690b      	ldr	r3, [r1, #16]
 800fae8:	4605      	mov	r5, r0
 800faea:	460c      	mov	r4, r1
 800faec:	b913      	cbnz	r3, 800faf4 <_fflush_r+0x10>
 800faee:	2500      	movs	r5, #0
 800faf0:	4628      	mov	r0, r5
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	b118      	cbz	r0, 800fafe <_fflush_r+0x1a>
 800faf6:	6a03      	ldr	r3, [r0, #32]
 800faf8:	b90b      	cbnz	r3, 800fafe <_fflush_r+0x1a>
 800fafa:	f7fd ff11 	bl	800d920 <__sinit>
 800fafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d0f3      	beq.n	800faee <_fflush_r+0xa>
 800fb06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb08:	07d0      	lsls	r0, r2, #31
 800fb0a:	d404      	bmi.n	800fb16 <_fflush_r+0x32>
 800fb0c:	0599      	lsls	r1, r3, #22
 800fb0e:	d402      	bmi.n	800fb16 <_fflush_r+0x32>
 800fb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb12:	f7fe f8be 	bl	800dc92 <__retarget_lock_acquire_recursive>
 800fb16:	4628      	mov	r0, r5
 800fb18:	4621      	mov	r1, r4
 800fb1a:	f7ff ff5d 	bl	800f9d8 <__sflush_r>
 800fb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb20:	07da      	lsls	r2, r3, #31
 800fb22:	4605      	mov	r5, r0
 800fb24:	d4e4      	bmi.n	800faf0 <_fflush_r+0xc>
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	059b      	lsls	r3, r3, #22
 800fb2a:	d4e1      	bmi.n	800faf0 <_fflush_r+0xc>
 800fb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb2e:	f7fe f8b1 	bl	800dc94 <__retarget_lock_release_recursive>
 800fb32:	e7dd      	b.n	800faf0 <_fflush_r+0xc>

0800fb34 <__sccl>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	780b      	ldrb	r3, [r1, #0]
 800fb38:	4604      	mov	r4, r0
 800fb3a:	2b5e      	cmp	r3, #94	; 0x5e
 800fb3c:	bf0b      	itete	eq
 800fb3e:	784b      	ldrbeq	r3, [r1, #1]
 800fb40:	1c4a      	addne	r2, r1, #1
 800fb42:	1c8a      	addeq	r2, r1, #2
 800fb44:	2100      	movne	r1, #0
 800fb46:	bf08      	it	eq
 800fb48:	2101      	moveq	r1, #1
 800fb4a:	3801      	subs	r0, #1
 800fb4c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fb50:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fb54:	42a8      	cmp	r0, r5
 800fb56:	d1fb      	bne.n	800fb50 <__sccl+0x1c>
 800fb58:	b90b      	cbnz	r3, 800fb5e <__sccl+0x2a>
 800fb5a:	1e50      	subs	r0, r2, #1
 800fb5c:	bd70      	pop	{r4, r5, r6, pc}
 800fb5e:	f081 0101 	eor.w	r1, r1, #1
 800fb62:	54e1      	strb	r1, [r4, r3]
 800fb64:	4610      	mov	r0, r2
 800fb66:	4602      	mov	r2, r0
 800fb68:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fb6c:	2d2d      	cmp	r5, #45	; 0x2d
 800fb6e:	d005      	beq.n	800fb7c <__sccl+0x48>
 800fb70:	2d5d      	cmp	r5, #93	; 0x5d
 800fb72:	d016      	beq.n	800fba2 <__sccl+0x6e>
 800fb74:	2d00      	cmp	r5, #0
 800fb76:	d0f1      	beq.n	800fb5c <__sccl+0x28>
 800fb78:	462b      	mov	r3, r5
 800fb7a:	e7f2      	b.n	800fb62 <__sccl+0x2e>
 800fb7c:	7846      	ldrb	r6, [r0, #1]
 800fb7e:	2e5d      	cmp	r6, #93	; 0x5d
 800fb80:	d0fa      	beq.n	800fb78 <__sccl+0x44>
 800fb82:	42b3      	cmp	r3, r6
 800fb84:	dcf8      	bgt.n	800fb78 <__sccl+0x44>
 800fb86:	3002      	adds	r0, #2
 800fb88:	461a      	mov	r2, r3
 800fb8a:	3201      	adds	r2, #1
 800fb8c:	4296      	cmp	r6, r2
 800fb8e:	54a1      	strb	r1, [r4, r2]
 800fb90:	dcfb      	bgt.n	800fb8a <__sccl+0x56>
 800fb92:	1af2      	subs	r2, r6, r3
 800fb94:	3a01      	subs	r2, #1
 800fb96:	1c5d      	adds	r5, r3, #1
 800fb98:	42b3      	cmp	r3, r6
 800fb9a:	bfa8      	it	ge
 800fb9c:	2200      	movge	r2, #0
 800fb9e:	18ab      	adds	r3, r5, r2
 800fba0:	e7e1      	b.n	800fb66 <__sccl+0x32>
 800fba2:	4610      	mov	r0, r2
 800fba4:	e7da      	b.n	800fb5c <__sccl+0x28>

0800fba6 <__submore>:
 800fba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbaa:	460c      	mov	r4, r1
 800fbac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fbae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbb2:	4299      	cmp	r1, r3
 800fbb4:	d11d      	bne.n	800fbf2 <__submore+0x4c>
 800fbb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fbba:	f7fc ff47 	bl	800ca4c <_malloc_r>
 800fbbe:	b918      	cbnz	r0, 800fbc8 <__submore+0x22>
 800fbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbcc:	63a3      	str	r3, [r4, #56]	; 0x38
 800fbce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fbd2:	6360      	str	r0, [r4, #52]	; 0x34
 800fbd4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fbd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fbdc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fbe0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fbe4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fbe8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fbec:	6020      	str	r0, [r4, #0]
 800fbee:	2000      	movs	r0, #0
 800fbf0:	e7e8      	b.n	800fbc4 <__submore+0x1e>
 800fbf2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fbf4:	0077      	lsls	r7, r6, #1
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	f7fc ffbc 	bl	800cb74 <_realloc_r>
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d0de      	beq.n	800fbc0 <__submore+0x1a>
 800fc02:	eb00 0806 	add.w	r8, r0, r6
 800fc06:	4601      	mov	r1, r0
 800fc08:	4632      	mov	r2, r6
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	f7fe f84b 	bl	800dca6 <memcpy>
 800fc10:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fc14:	f8c4 8000 	str.w	r8, [r4]
 800fc18:	e7e9      	b.n	800fbee <__submore+0x48>

0800fc1a <memmove>:
 800fc1a:	4288      	cmp	r0, r1
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	eb01 0402 	add.w	r4, r1, r2
 800fc22:	d902      	bls.n	800fc2a <memmove+0x10>
 800fc24:	4284      	cmp	r4, r0
 800fc26:	4623      	mov	r3, r4
 800fc28:	d807      	bhi.n	800fc3a <memmove+0x20>
 800fc2a:	1e43      	subs	r3, r0, #1
 800fc2c:	42a1      	cmp	r1, r4
 800fc2e:	d008      	beq.n	800fc42 <memmove+0x28>
 800fc30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc38:	e7f8      	b.n	800fc2c <memmove+0x12>
 800fc3a:	4402      	add	r2, r0
 800fc3c:	4601      	mov	r1, r0
 800fc3e:	428a      	cmp	r2, r1
 800fc40:	d100      	bne.n	800fc44 <memmove+0x2a>
 800fc42:	bd10      	pop	{r4, pc}
 800fc44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc4c:	e7f7      	b.n	800fc3e <memmove+0x24>
	...

0800fc50 <__assert_func>:
 800fc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc52:	4614      	mov	r4, r2
 800fc54:	461a      	mov	r2, r3
 800fc56:	4b09      	ldr	r3, [pc, #36]	; (800fc7c <__assert_func+0x2c>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	68d8      	ldr	r0, [r3, #12]
 800fc5e:	b14c      	cbz	r4, 800fc74 <__assert_func+0x24>
 800fc60:	4b07      	ldr	r3, [pc, #28]	; (800fc80 <__assert_func+0x30>)
 800fc62:	9100      	str	r1, [sp, #0]
 800fc64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc68:	4906      	ldr	r1, [pc, #24]	; (800fc84 <__assert_func+0x34>)
 800fc6a:	462b      	mov	r3, r5
 800fc6c:	f000 f91c 	bl	800fea8 <fiprintf>
 800fc70:	f000 f92c 	bl	800fecc <abort>
 800fc74:	4b04      	ldr	r3, [pc, #16]	; (800fc88 <__assert_func+0x38>)
 800fc76:	461c      	mov	r4, r3
 800fc78:	e7f3      	b.n	800fc62 <__assert_func+0x12>
 800fc7a:	bf00      	nop
 800fc7c:	200001f8 	.word	0x200001f8
 800fc80:	08010a3a 	.word	0x08010a3a
 800fc84:	08010a47 	.word	0x08010a47
 800fc88:	08010a75 	.word	0x08010a75

0800fc8c <_calloc_r>:
 800fc8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc8e:	fba1 2402 	umull	r2, r4, r1, r2
 800fc92:	b94c      	cbnz	r4, 800fca8 <_calloc_r+0x1c>
 800fc94:	4611      	mov	r1, r2
 800fc96:	9201      	str	r2, [sp, #4]
 800fc98:	f7fc fed8 	bl	800ca4c <_malloc_r>
 800fc9c:	9a01      	ldr	r2, [sp, #4]
 800fc9e:	4605      	mov	r5, r0
 800fca0:	b930      	cbnz	r0, 800fcb0 <_calloc_r+0x24>
 800fca2:	4628      	mov	r0, r5
 800fca4:	b003      	add	sp, #12
 800fca6:	bd30      	pop	{r4, r5, pc}
 800fca8:	220c      	movs	r2, #12
 800fcaa:	6002      	str	r2, [r0, #0]
 800fcac:	2500      	movs	r5, #0
 800fcae:	e7f8      	b.n	800fca2 <_calloc_r+0x16>
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	f7fd fefc 	bl	800daae <memset>
 800fcb6:	e7f4      	b.n	800fca2 <_calloc_r+0x16>

0800fcb8 <_strtol_l.constprop.0>:
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcbe:	d001      	beq.n	800fcc4 <_strtol_l.constprop.0+0xc>
 800fcc0:	2b24      	cmp	r3, #36	; 0x24
 800fcc2:	d906      	bls.n	800fcd2 <_strtol_l.constprop.0+0x1a>
 800fcc4:	f7fd ffba 	bl	800dc3c <__errno>
 800fcc8:	2316      	movs	r3, #22
 800fcca:	6003      	str	r3, [r0, #0]
 800fccc:	2000      	movs	r0, #0
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fdb8 <_strtol_l.constprop.0+0x100>
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	462e      	mov	r6, r5
 800fcda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcde:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fce2:	f017 0708 	ands.w	r7, r7, #8
 800fce6:	d1f7      	bne.n	800fcd8 <_strtol_l.constprop.0+0x20>
 800fce8:	2c2d      	cmp	r4, #45	; 0x2d
 800fcea:	d132      	bne.n	800fd52 <_strtol_l.constprop.0+0x9a>
 800fcec:	782c      	ldrb	r4, [r5, #0]
 800fcee:	2701      	movs	r7, #1
 800fcf0:	1cb5      	adds	r5, r6, #2
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d05b      	beq.n	800fdae <_strtol_l.constprop.0+0xf6>
 800fcf6:	2b10      	cmp	r3, #16
 800fcf8:	d109      	bne.n	800fd0e <_strtol_l.constprop.0+0x56>
 800fcfa:	2c30      	cmp	r4, #48	; 0x30
 800fcfc:	d107      	bne.n	800fd0e <_strtol_l.constprop.0+0x56>
 800fcfe:	782c      	ldrb	r4, [r5, #0]
 800fd00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd04:	2c58      	cmp	r4, #88	; 0x58
 800fd06:	d14d      	bne.n	800fda4 <_strtol_l.constprop.0+0xec>
 800fd08:	786c      	ldrb	r4, [r5, #1]
 800fd0a:	2310      	movs	r3, #16
 800fd0c:	3502      	adds	r5, #2
 800fd0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd12:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd16:	f04f 0e00 	mov.w	lr, #0
 800fd1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd1e:	4676      	mov	r6, lr
 800fd20:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fd28:	f1bc 0f09 	cmp.w	ip, #9
 800fd2c:	d816      	bhi.n	800fd5c <_strtol_l.constprop.0+0xa4>
 800fd2e:	4664      	mov	r4, ip
 800fd30:	42a3      	cmp	r3, r4
 800fd32:	dd24      	ble.n	800fd7e <_strtol_l.constprop.0+0xc6>
 800fd34:	f1be 3fff 	cmp.w	lr, #4294967295
 800fd38:	d008      	beq.n	800fd4c <_strtol_l.constprop.0+0x94>
 800fd3a:	45b1      	cmp	r9, r6
 800fd3c:	d31c      	bcc.n	800fd78 <_strtol_l.constprop.0+0xc0>
 800fd3e:	d101      	bne.n	800fd44 <_strtol_l.constprop.0+0x8c>
 800fd40:	45a2      	cmp	sl, r4
 800fd42:	db19      	blt.n	800fd78 <_strtol_l.constprop.0+0xc0>
 800fd44:	fb06 4603 	mla	r6, r6, r3, r4
 800fd48:	f04f 0e01 	mov.w	lr, #1
 800fd4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd50:	e7e8      	b.n	800fd24 <_strtol_l.constprop.0+0x6c>
 800fd52:	2c2b      	cmp	r4, #43	; 0x2b
 800fd54:	bf04      	itt	eq
 800fd56:	782c      	ldrbeq	r4, [r5, #0]
 800fd58:	1cb5      	addeq	r5, r6, #2
 800fd5a:	e7ca      	b.n	800fcf2 <_strtol_l.constprop.0+0x3a>
 800fd5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fd60:	f1bc 0f19 	cmp.w	ip, #25
 800fd64:	d801      	bhi.n	800fd6a <_strtol_l.constprop.0+0xb2>
 800fd66:	3c37      	subs	r4, #55	; 0x37
 800fd68:	e7e2      	b.n	800fd30 <_strtol_l.constprop.0+0x78>
 800fd6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fd6e:	f1bc 0f19 	cmp.w	ip, #25
 800fd72:	d804      	bhi.n	800fd7e <_strtol_l.constprop.0+0xc6>
 800fd74:	3c57      	subs	r4, #87	; 0x57
 800fd76:	e7db      	b.n	800fd30 <_strtol_l.constprop.0+0x78>
 800fd78:	f04f 3eff 	mov.w	lr, #4294967295
 800fd7c:	e7e6      	b.n	800fd4c <_strtol_l.constprop.0+0x94>
 800fd7e:	f1be 3fff 	cmp.w	lr, #4294967295
 800fd82:	d105      	bne.n	800fd90 <_strtol_l.constprop.0+0xd8>
 800fd84:	2322      	movs	r3, #34	; 0x22
 800fd86:	6003      	str	r3, [r0, #0]
 800fd88:	4646      	mov	r6, r8
 800fd8a:	b942      	cbnz	r2, 800fd9e <_strtol_l.constprop.0+0xe6>
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	e79e      	b.n	800fcce <_strtol_l.constprop.0+0x16>
 800fd90:	b107      	cbz	r7, 800fd94 <_strtol_l.constprop.0+0xdc>
 800fd92:	4276      	negs	r6, r6
 800fd94:	2a00      	cmp	r2, #0
 800fd96:	d0f9      	beq.n	800fd8c <_strtol_l.constprop.0+0xd4>
 800fd98:	f1be 0f00 	cmp.w	lr, #0
 800fd9c:	d000      	beq.n	800fda0 <_strtol_l.constprop.0+0xe8>
 800fd9e:	1e69      	subs	r1, r5, #1
 800fda0:	6011      	str	r1, [r2, #0]
 800fda2:	e7f3      	b.n	800fd8c <_strtol_l.constprop.0+0xd4>
 800fda4:	2430      	movs	r4, #48	; 0x30
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1b1      	bne.n	800fd0e <_strtol_l.constprop.0+0x56>
 800fdaa:	2308      	movs	r3, #8
 800fdac:	e7af      	b.n	800fd0e <_strtol_l.constprop.0+0x56>
 800fdae:	2c30      	cmp	r4, #48	; 0x30
 800fdb0:	d0a5      	beq.n	800fcfe <_strtol_l.constprop.0+0x46>
 800fdb2:	230a      	movs	r3, #10
 800fdb4:	e7ab      	b.n	800fd0e <_strtol_l.constprop.0+0x56>
 800fdb6:	bf00      	nop
 800fdb8:	08010701 	.word	0x08010701

0800fdbc <_strtol_r>:
 800fdbc:	f7ff bf7c 	b.w	800fcb8 <_strtol_l.constprop.0>

0800fdc0 <_strtoul_l.constprop.0>:
 800fdc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdc4:	4f36      	ldr	r7, [pc, #216]	; (800fea0 <_strtoul_l.constprop.0+0xe0>)
 800fdc6:	4686      	mov	lr, r0
 800fdc8:	460d      	mov	r5, r1
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdd0:	5d3e      	ldrb	r6, [r7, r4]
 800fdd2:	f016 0608 	ands.w	r6, r6, #8
 800fdd6:	d1f8      	bne.n	800fdca <_strtoul_l.constprop.0+0xa>
 800fdd8:	2c2d      	cmp	r4, #45	; 0x2d
 800fdda:	d130      	bne.n	800fe3e <_strtoul_l.constprop.0+0x7e>
 800fddc:	782c      	ldrb	r4, [r5, #0]
 800fdde:	2601      	movs	r6, #1
 800fde0:	1c85      	adds	r5, r0, #2
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d057      	beq.n	800fe96 <_strtoul_l.constprop.0+0xd6>
 800fde6:	2b10      	cmp	r3, #16
 800fde8:	d109      	bne.n	800fdfe <_strtoul_l.constprop.0+0x3e>
 800fdea:	2c30      	cmp	r4, #48	; 0x30
 800fdec:	d107      	bne.n	800fdfe <_strtoul_l.constprop.0+0x3e>
 800fdee:	7828      	ldrb	r0, [r5, #0]
 800fdf0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fdf4:	2858      	cmp	r0, #88	; 0x58
 800fdf6:	d149      	bne.n	800fe8c <_strtoul_l.constprop.0+0xcc>
 800fdf8:	786c      	ldrb	r4, [r5, #1]
 800fdfa:	2310      	movs	r3, #16
 800fdfc:	3502      	adds	r5, #2
 800fdfe:	f04f 38ff 	mov.w	r8, #4294967295
 800fe02:	2700      	movs	r7, #0
 800fe04:	fbb8 f8f3 	udiv	r8, r8, r3
 800fe08:	fb03 f908 	mul.w	r9, r3, r8
 800fe0c:	ea6f 0909 	mvn.w	r9, r9
 800fe10:	4638      	mov	r0, r7
 800fe12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fe16:	f1bc 0f09 	cmp.w	ip, #9
 800fe1a:	d815      	bhi.n	800fe48 <_strtoul_l.constprop.0+0x88>
 800fe1c:	4664      	mov	r4, ip
 800fe1e:	42a3      	cmp	r3, r4
 800fe20:	dd23      	ble.n	800fe6a <_strtoul_l.constprop.0+0xaa>
 800fe22:	f1b7 3fff 	cmp.w	r7, #4294967295
 800fe26:	d007      	beq.n	800fe38 <_strtoul_l.constprop.0+0x78>
 800fe28:	4580      	cmp	r8, r0
 800fe2a:	d31b      	bcc.n	800fe64 <_strtoul_l.constprop.0+0xa4>
 800fe2c:	d101      	bne.n	800fe32 <_strtoul_l.constprop.0+0x72>
 800fe2e:	45a1      	cmp	r9, r4
 800fe30:	db18      	blt.n	800fe64 <_strtoul_l.constprop.0+0xa4>
 800fe32:	fb00 4003 	mla	r0, r0, r3, r4
 800fe36:	2701      	movs	r7, #1
 800fe38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe3c:	e7e9      	b.n	800fe12 <_strtoul_l.constprop.0+0x52>
 800fe3e:	2c2b      	cmp	r4, #43	; 0x2b
 800fe40:	bf04      	itt	eq
 800fe42:	782c      	ldrbeq	r4, [r5, #0]
 800fe44:	1c85      	addeq	r5, r0, #2
 800fe46:	e7cc      	b.n	800fde2 <_strtoul_l.constprop.0+0x22>
 800fe48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fe4c:	f1bc 0f19 	cmp.w	ip, #25
 800fe50:	d801      	bhi.n	800fe56 <_strtoul_l.constprop.0+0x96>
 800fe52:	3c37      	subs	r4, #55	; 0x37
 800fe54:	e7e3      	b.n	800fe1e <_strtoul_l.constprop.0+0x5e>
 800fe56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe5a:	f1bc 0f19 	cmp.w	ip, #25
 800fe5e:	d804      	bhi.n	800fe6a <_strtoul_l.constprop.0+0xaa>
 800fe60:	3c57      	subs	r4, #87	; 0x57
 800fe62:	e7dc      	b.n	800fe1e <_strtoul_l.constprop.0+0x5e>
 800fe64:	f04f 37ff 	mov.w	r7, #4294967295
 800fe68:	e7e6      	b.n	800fe38 <_strtoul_l.constprop.0+0x78>
 800fe6a:	1c7b      	adds	r3, r7, #1
 800fe6c:	d106      	bne.n	800fe7c <_strtoul_l.constprop.0+0xbc>
 800fe6e:	2322      	movs	r3, #34	; 0x22
 800fe70:	f8ce 3000 	str.w	r3, [lr]
 800fe74:	4638      	mov	r0, r7
 800fe76:	b932      	cbnz	r2, 800fe86 <_strtoul_l.constprop.0+0xc6>
 800fe78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe7c:	b106      	cbz	r6, 800fe80 <_strtoul_l.constprop.0+0xc0>
 800fe7e:	4240      	negs	r0, r0
 800fe80:	2a00      	cmp	r2, #0
 800fe82:	d0f9      	beq.n	800fe78 <_strtoul_l.constprop.0+0xb8>
 800fe84:	b107      	cbz	r7, 800fe88 <_strtoul_l.constprop.0+0xc8>
 800fe86:	1e69      	subs	r1, r5, #1
 800fe88:	6011      	str	r1, [r2, #0]
 800fe8a:	e7f5      	b.n	800fe78 <_strtoul_l.constprop.0+0xb8>
 800fe8c:	2430      	movs	r4, #48	; 0x30
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1b5      	bne.n	800fdfe <_strtoul_l.constprop.0+0x3e>
 800fe92:	2308      	movs	r3, #8
 800fe94:	e7b3      	b.n	800fdfe <_strtoul_l.constprop.0+0x3e>
 800fe96:	2c30      	cmp	r4, #48	; 0x30
 800fe98:	d0a9      	beq.n	800fdee <_strtoul_l.constprop.0+0x2e>
 800fe9a:	230a      	movs	r3, #10
 800fe9c:	e7af      	b.n	800fdfe <_strtoul_l.constprop.0+0x3e>
 800fe9e:	bf00      	nop
 800fea0:	08010701 	.word	0x08010701

0800fea4 <_strtoul_r>:
 800fea4:	f7ff bf8c 	b.w	800fdc0 <_strtoul_l.constprop.0>

0800fea8 <fiprintf>:
 800fea8:	b40e      	push	{r1, r2, r3}
 800feaa:	b503      	push	{r0, r1, lr}
 800feac:	4601      	mov	r1, r0
 800feae:	ab03      	add	r3, sp, #12
 800feb0:	4805      	ldr	r0, [pc, #20]	; (800fec8 <fiprintf+0x20>)
 800feb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb6:	6800      	ldr	r0, [r0, #0]
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f000 f837 	bl	800ff2c <_vfiprintf_r>
 800febe:	b002      	add	sp, #8
 800fec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec4:	b003      	add	sp, #12
 800fec6:	4770      	bx	lr
 800fec8:	200001f8 	.word	0x200001f8

0800fecc <abort>:
 800fecc:	b508      	push	{r3, lr}
 800fece:	2006      	movs	r0, #6
 800fed0:	f000 fa04 	bl	80102dc <raise>
 800fed4:	2001      	movs	r0, #1
 800fed6:	f7f4 fb3b 	bl	8004550 <_exit>

0800feda <__sfputc_r>:
 800feda:	6893      	ldr	r3, [r2, #8]
 800fedc:	3b01      	subs	r3, #1
 800fede:	2b00      	cmp	r3, #0
 800fee0:	b410      	push	{r4}
 800fee2:	6093      	str	r3, [r2, #8]
 800fee4:	da08      	bge.n	800fef8 <__sfputc_r+0x1e>
 800fee6:	6994      	ldr	r4, [r2, #24]
 800fee8:	42a3      	cmp	r3, r4
 800feea:	db01      	blt.n	800fef0 <__sfputc_r+0x16>
 800feec:	290a      	cmp	r1, #10
 800feee:	d103      	bne.n	800fef8 <__sfputc_r+0x1e>
 800fef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef4:	f000 b934 	b.w	8010160 <__swbuf_r>
 800fef8:	6813      	ldr	r3, [r2, #0]
 800fefa:	1c58      	adds	r0, r3, #1
 800fefc:	6010      	str	r0, [r2, #0]
 800fefe:	7019      	strb	r1, [r3, #0]
 800ff00:	4608      	mov	r0, r1
 800ff02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <__sfputs_r>:
 800ff08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	460f      	mov	r7, r1
 800ff0e:	4614      	mov	r4, r2
 800ff10:	18d5      	adds	r5, r2, r3
 800ff12:	42ac      	cmp	r4, r5
 800ff14:	d101      	bne.n	800ff1a <__sfputs_r+0x12>
 800ff16:	2000      	movs	r0, #0
 800ff18:	e007      	b.n	800ff2a <__sfputs_r+0x22>
 800ff1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff1e:	463a      	mov	r2, r7
 800ff20:	4630      	mov	r0, r6
 800ff22:	f7ff ffda 	bl	800feda <__sfputc_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	d1f3      	bne.n	800ff12 <__sfputs_r+0xa>
 800ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff2c <_vfiprintf_r>:
 800ff2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff30:	460d      	mov	r5, r1
 800ff32:	b09d      	sub	sp, #116	; 0x74
 800ff34:	4614      	mov	r4, r2
 800ff36:	4698      	mov	r8, r3
 800ff38:	4606      	mov	r6, r0
 800ff3a:	b118      	cbz	r0, 800ff44 <_vfiprintf_r+0x18>
 800ff3c:	6a03      	ldr	r3, [r0, #32]
 800ff3e:	b90b      	cbnz	r3, 800ff44 <_vfiprintf_r+0x18>
 800ff40:	f7fd fcee 	bl	800d920 <__sinit>
 800ff44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff46:	07d9      	lsls	r1, r3, #31
 800ff48:	d405      	bmi.n	800ff56 <_vfiprintf_r+0x2a>
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	059a      	lsls	r2, r3, #22
 800ff4e:	d402      	bmi.n	800ff56 <_vfiprintf_r+0x2a>
 800ff50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff52:	f7fd fe9e 	bl	800dc92 <__retarget_lock_acquire_recursive>
 800ff56:	89ab      	ldrh	r3, [r5, #12]
 800ff58:	071b      	lsls	r3, r3, #28
 800ff5a:	d501      	bpl.n	800ff60 <_vfiprintf_r+0x34>
 800ff5c:	692b      	ldr	r3, [r5, #16]
 800ff5e:	b99b      	cbnz	r3, 800ff88 <_vfiprintf_r+0x5c>
 800ff60:	4629      	mov	r1, r5
 800ff62:	4630      	mov	r0, r6
 800ff64:	f000 f93a 	bl	80101dc <__swsetup_r>
 800ff68:	b170      	cbz	r0, 800ff88 <_vfiprintf_r+0x5c>
 800ff6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff6c:	07dc      	lsls	r4, r3, #31
 800ff6e:	d504      	bpl.n	800ff7a <_vfiprintf_r+0x4e>
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295
 800ff74:	b01d      	add	sp, #116	; 0x74
 800ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	0598      	lsls	r0, r3, #22
 800ff7e:	d4f7      	bmi.n	800ff70 <_vfiprintf_r+0x44>
 800ff80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff82:	f7fd fe87 	bl	800dc94 <__retarget_lock_release_recursive>
 800ff86:	e7f3      	b.n	800ff70 <_vfiprintf_r+0x44>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff96:	2330      	movs	r3, #48	; 0x30
 800ff98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801014c <_vfiprintf_r+0x220>
 800ff9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffa0:	f04f 0901 	mov.w	r9, #1
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	469a      	mov	sl, r3
 800ffa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffac:	b10a      	cbz	r2, 800ffb2 <_vfiprintf_r+0x86>
 800ffae:	2a25      	cmp	r2, #37	; 0x25
 800ffb0:	d1f9      	bne.n	800ffa6 <_vfiprintf_r+0x7a>
 800ffb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffb6:	d00b      	beq.n	800ffd0 <_vfiprintf_r+0xa4>
 800ffb8:	465b      	mov	r3, fp
 800ffba:	4622      	mov	r2, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ffa2 	bl	800ff08 <__sfputs_r>
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	f000 80a9 	beq.w	801011c <_vfiprintf_r+0x1f0>
 800ffca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffcc:	445a      	add	r2, fp
 800ffce:	9209      	str	r2, [sp, #36]	; 0x24
 800ffd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80a1 	beq.w	801011c <_vfiprintf_r+0x1f0>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffe4:	f10a 0a01 	add.w	sl, sl, #1
 800ffe8:	9304      	str	r3, [sp, #16]
 800ffea:	9307      	str	r3, [sp, #28]
 800ffec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fff0:	931a      	str	r3, [sp, #104]	; 0x68
 800fff2:	4654      	mov	r4, sl
 800fff4:	2205      	movs	r2, #5
 800fff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fffa:	4854      	ldr	r0, [pc, #336]	; (801014c <_vfiprintf_r+0x220>)
 800fffc:	f7f0 f908 	bl	8000210 <memchr>
 8010000:	9a04      	ldr	r2, [sp, #16]
 8010002:	b9d8      	cbnz	r0, 801003c <_vfiprintf_r+0x110>
 8010004:	06d1      	lsls	r1, r2, #27
 8010006:	bf44      	itt	mi
 8010008:	2320      	movmi	r3, #32
 801000a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000e:	0713      	lsls	r3, r2, #28
 8010010:	bf44      	itt	mi
 8010012:	232b      	movmi	r3, #43	; 0x2b
 8010014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010018:	f89a 3000 	ldrb.w	r3, [sl]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d015      	beq.n	801004c <_vfiprintf_r+0x120>
 8010020:	9a07      	ldr	r2, [sp, #28]
 8010022:	4654      	mov	r4, sl
 8010024:	2000      	movs	r0, #0
 8010026:	f04f 0c0a 	mov.w	ip, #10
 801002a:	4621      	mov	r1, r4
 801002c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010030:	3b30      	subs	r3, #48	; 0x30
 8010032:	2b09      	cmp	r3, #9
 8010034:	d94d      	bls.n	80100d2 <_vfiprintf_r+0x1a6>
 8010036:	b1b0      	cbz	r0, 8010066 <_vfiprintf_r+0x13a>
 8010038:	9207      	str	r2, [sp, #28]
 801003a:	e014      	b.n	8010066 <_vfiprintf_r+0x13a>
 801003c:	eba0 0308 	sub.w	r3, r0, r8
 8010040:	fa09 f303 	lsl.w	r3, r9, r3
 8010044:	4313      	orrs	r3, r2
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	46a2      	mov	sl, r4
 801004a:	e7d2      	b.n	800fff2 <_vfiprintf_r+0xc6>
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	1d19      	adds	r1, r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	9103      	str	r1, [sp, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	bfbb      	ittet	lt
 8010058:	425b      	neglt	r3, r3
 801005a:	f042 0202 	orrlt.w	r2, r2, #2
 801005e:	9307      	strge	r3, [sp, #28]
 8010060:	9307      	strlt	r3, [sp, #28]
 8010062:	bfb8      	it	lt
 8010064:	9204      	strlt	r2, [sp, #16]
 8010066:	7823      	ldrb	r3, [r4, #0]
 8010068:	2b2e      	cmp	r3, #46	; 0x2e
 801006a:	d10c      	bne.n	8010086 <_vfiprintf_r+0x15a>
 801006c:	7863      	ldrb	r3, [r4, #1]
 801006e:	2b2a      	cmp	r3, #42	; 0x2a
 8010070:	d134      	bne.n	80100dc <_vfiprintf_r+0x1b0>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	1d1a      	adds	r2, r3, #4
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	9203      	str	r2, [sp, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bfb8      	it	lt
 801007e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010082:	3402      	adds	r4, #2
 8010084:	9305      	str	r3, [sp, #20]
 8010086:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801015c <_vfiprintf_r+0x230>
 801008a:	7821      	ldrb	r1, [r4, #0]
 801008c:	2203      	movs	r2, #3
 801008e:	4650      	mov	r0, sl
 8010090:	f7f0 f8be 	bl	8000210 <memchr>
 8010094:	b138      	cbz	r0, 80100a6 <_vfiprintf_r+0x17a>
 8010096:	9b04      	ldr	r3, [sp, #16]
 8010098:	eba0 000a 	sub.w	r0, r0, sl
 801009c:	2240      	movs	r2, #64	; 0x40
 801009e:	4082      	lsls	r2, r0
 80100a0:	4313      	orrs	r3, r2
 80100a2:	3401      	adds	r4, #1
 80100a4:	9304      	str	r3, [sp, #16]
 80100a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100aa:	4829      	ldr	r0, [pc, #164]	; (8010150 <_vfiprintf_r+0x224>)
 80100ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100b0:	2206      	movs	r2, #6
 80100b2:	f7f0 f8ad 	bl	8000210 <memchr>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d03f      	beq.n	801013a <_vfiprintf_r+0x20e>
 80100ba:	4b26      	ldr	r3, [pc, #152]	; (8010154 <_vfiprintf_r+0x228>)
 80100bc:	bb1b      	cbnz	r3, 8010106 <_vfiprintf_r+0x1da>
 80100be:	9b03      	ldr	r3, [sp, #12]
 80100c0:	3307      	adds	r3, #7
 80100c2:	f023 0307 	bic.w	r3, r3, #7
 80100c6:	3308      	adds	r3, #8
 80100c8:	9303      	str	r3, [sp, #12]
 80100ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100cc:	443b      	add	r3, r7
 80100ce:	9309      	str	r3, [sp, #36]	; 0x24
 80100d0:	e768      	b.n	800ffa4 <_vfiprintf_r+0x78>
 80100d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80100d6:	460c      	mov	r4, r1
 80100d8:	2001      	movs	r0, #1
 80100da:	e7a6      	b.n	801002a <_vfiprintf_r+0xfe>
 80100dc:	2300      	movs	r3, #0
 80100de:	3401      	adds	r4, #1
 80100e0:	9305      	str	r3, [sp, #20]
 80100e2:	4619      	mov	r1, r3
 80100e4:	f04f 0c0a 	mov.w	ip, #10
 80100e8:	4620      	mov	r0, r4
 80100ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100ee:	3a30      	subs	r2, #48	; 0x30
 80100f0:	2a09      	cmp	r2, #9
 80100f2:	d903      	bls.n	80100fc <_vfiprintf_r+0x1d0>
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d0c6      	beq.n	8010086 <_vfiprintf_r+0x15a>
 80100f8:	9105      	str	r1, [sp, #20]
 80100fa:	e7c4      	b.n	8010086 <_vfiprintf_r+0x15a>
 80100fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010100:	4604      	mov	r4, r0
 8010102:	2301      	movs	r3, #1
 8010104:	e7f0      	b.n	80100e8 <_vfiprintf_r+0x1bc>
 8010106:	ab03      	add	r3, sp, #12
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	462a      	mov	r2, r5
 801010c:	4b12      	ldr	r3, [pc, #72]	; (8010158 <_vfiprintf_r+0x22c>)
 801010e:	a904      	add	r1, sp, #16
 8010110:	4630      	mov	r0, r6
 8010112:	f3af 8000 	nop.w
 8010116:	4607      	mov	r7, r0
 8010118:	1c78      	adds	r0, r7, #1
 801011a:	d1d6      	bne.n	80100ca <_vfiprintf_r+0x19e>
 801011c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801011e:	07d9      	lsls	r1, r3, #31
 8010120:	d405      	bmi.n	801012e <_vfiprintf_r+0x202>
 8010122:	89ab      	ldrh	r3, [r5, #12]
 8010124:	059a      	lsls	r2, r3, #22
 8010126:	d402      	bmi.n	801012e <_vfiprintf_r+0x202>
 8010128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801012a:	f7fd fdb3 	bl	800dc94 <__retarget_lock_release_recursive>
 801012e:	89ab      	ldrh	r3, [r5, #12]
 8010130:	065b      	lsls	r3, r3, #25
 8010132:	f53f af1d 	bmi.w	800ff70 <_vfiprintf_r+0x44>
 8010136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010138:	e71c      	b.n	800ff74 <_vfiprintf_r+0x48>
 801013a:	ab03      	add	r3, sp, #12
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	462a      	mov	r2, r5
 8010140:	4b05      	ldr	r3, [pc, #20]	; (8010158 <_vfiprintf_r+0x22c>)
 8010142:	a904      	add	r1, sp, #16
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff f9d7 	bl	800f4f8 <_printf_i>
 801014a:	e7e4      	b.n	8010116 <_vfiprintf_r+0x1ea>
 801014c:	080109ec 	.word	0x080109ec
 8010150:	080109f6 	.word	0x080109f6
 8010154:	00000000 	.word	0x00000000
 8010158:	0800ff09 	.word	0x0800ff09
 801015c:	080109f2 	.word	0x080109f2

08010160 <__swbuf_r>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	460e      	mov	r6, r1
 8010164:	4614      	mov	r4, r2
 8010166:	4605      	mov	r5, r0
 8010168:	b118      	cbz	r0, 8010172 <__swbuf_r+0x12>
 801016a:	6a03      	ldr	r3, [r0, #32]
 801016c:	b90b      	cbnz	r3, 8010172 <__swbuf_r+0x12>
 801016e:	f7fd fbd7 	bl	800d920 <__sinit>
 8010172:	69a3      	ldr	r3, [r4, #24]
 8010174:	60a3      	str	r3, [r4, #8]
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	071a      	lsls	r2, r3, #28
 801017a:	d525      	bpl.n	80101c8 <__swbuf_r+0x68>
 801017c:	6923      	ldr	r3, [r4, #16]
 801017e:	b31b      	cbz	r3, 80101c8 <__swbuf_r+0x68>
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	6922      	ldr	r2, [r4, #16]
 8010184:	1a98      	subs	r0, r3, r2
 8010186:	6963      	ldr	r3, [r4, #20]
 8010188:	b2f6      	uxtb	r6, r6
 801018a:	4283      	cmp	r3, r0
 801018c:	4637      	mov	r7, r6
 801018e:	dc04      	bgt.n	801019a <__swbuf_r+0x3a>
 8010190:	4621      	mov	r1, r4
 8010192:	4628      	mov	r0, r5
 8010194:	f7ff fca6 	bl	800fae4 <_fflush_r>
 8010198:	b9e0      	cbnz	r0, 80101d4 <__swbuf_r+0x74>
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	3b01      	subs	r3, #1
 801019e:	60a3      	str	r3, [r4, #8]
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	1c5a      	adds	r2, r3, #1
 80101a4:	6022      	str	r2, [r4, #0]
 80101a6:	701e      	strb	r6, [r3, #0]
 80101a8:	6962      	ldr	r2, [r4, #20]
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d004      	beq.n	80101ba <__swbuf_r+0x5a>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	07db      	lsls	r3, r3, #31
 80101b4:	d506      	bpl.n	80101c4 <__swbuf_r+0x64>
 80101b6:	2e0a      	cmp	r6, #10
 80101b8:	d104      	bne.n	80101c4 <__swbuf_r+0x64>
 80101ba:	4621      	mov	r1, r4
 80101bc:	4628      	mov	r0, r5
 80101be:	f7ff fc91 	bl	800fae4 <_fflush_r>
 80101c2:	b938      	cbnz	r0, 80101d4 <__swbuf_r+0x74>
 80101c4:	4638      	mov	r0, r7
 80101c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c8:	4621      	mov	r1, r4
 80101ca:	4628      	mov	r0, r5
 80101cc:	f000 f806 	bl	80101dc <__swsetup_r>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d0d5      	beq.n	8010180 <__swbuf_r+0x20>
 80101d4:	f04f 37ff 	mov.w	r7, #4294967295
 80101d8:	e7f4      	b.n	80101c4 <__swbuf_r+0x64>
	...

080101dc <__swsetup_r>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4b2a      	ldr	r3, [pc, #168]	; (8010288 <__swsetup_r+0xac>)
 80101e0:	4605      	mov	r5, r0
 80101e2:	6818      	ldr	r0, [r3, #0]
 80101e4:	460c      	mov	r4, r1
 80101e6:	b118      	cbz	r0, 80101f0 <__swsetup_r+0x14>
 80101e8:	6a03      	ldr	r3, [r0, #32]
 80101ea:	b90b      	cbnz	r3, 80101f0 <__swsetup_r+0x14>
 80101ec:	f7fd fb98 	bl	800d920 <__sinit>
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101f6:	0718      	lsls	r0, r3, #28
 80101f8:	d422      	bmi.n	8010240 <__swsetup_r+0x64>
 80101fa:	06d9      	lsls	r1, r3, #27
 80101fc:	d407      	bmi.n	801020e <__swsetup_r+0x32>
 80101fe:	2309      	movs	r3, #9
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010206:	81a3      	strh	r3, [r4, #12]
 8010208:	f04f 30ff 	mov.w	r0, #4294967295
 801020c:	e034      	b.n	8010278 <__swsetup_r+0x9c>
 801020e:	0758      	lsls	r0, r3, #29
 8010210:	d512      	bpl.n	8010238 <__swsetup_r+0x5c>
 8010212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010214:	b141      	cbz	r1, 8010228 <__swsetup_r+0x4c>
 8010216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801021a:	4299      	cmp	r1, r3
 801021c:	d002      	beq.n	8010224 <__swsetup_r+0x48>
 801021e:	4628      	mov	r0, r5
 8010220:	f7fd fd5a 	bl	800dcd8 <_free_r>
 8010224:	2300      	movs	r3, #0
 8010226:	6363      	str	r3, [r4, #52]	; 0x34
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	2300      	movs	r3, #0
 8010232:	6063      	str	r3, [r4, #4]
 8010234:	6923      	ldr	r3, [r4, #16]
 8010236:	6023      	str	r3, [r4, #0]
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	f043 0308 	orr.w	r3, r3, #8
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	6923      	ldr	r3, [r4, #16]
 8010242:	b94b      	cbnz	r3, 8010258 <__swsetup_r+0x7c>
 8010244:	89a3      	ldrh	r3, [r4, #12]
 8010246:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801024a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801024e:	d003      	beq.n	8010258 <__swsetup_r+0x7c>
 8010250:	4621      	mov	r1, r4
 8010252:	4628      	mov	r0, r5
 8010254:	f000 f884 	bl	8010360 <__smakebuf_r>
 8010258:	89a0      	ldrh	r0, [r4, #12]
 801025a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801025e:	f010 0301 	ands.w	r3, r0, #1
 8010262:	d00a      	beq.n	801027a <__swsetup_r+0x9e>
 8010264:	2300      	movs	r3, #0
 8010266:	60a3      	str	r3, [r4, #8]
 8010268:	6963      	ldr	r3, [r4, #20]
 801026a:	425b      	negs	r3, r3
 801026c:	61a3      	str	r3, [r4, #24]
 801026e:	6923      	ldr	r3, [r4, #16]
 8010270:	b943      	cbnz	r3, 8010284 <__swsetup_r+0xa8>
 8010272:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010276:	d1c4      	bne.n	8010202 <__swsetup_r+0x26>
 8010278:	bd38      	pop	{r3, r4, r5, pc}
 801027a:	0781      	lsls	r1, r0, #30
 801027c:	bf58      	it	pl
 801027e:	6963      	ldrpl	r3, [r4, #20]
 8010280:	60a3      	str	r3, [r4, #8]
 8010282:	e7f4      	b.n	801026e <__swsetup_r+0x92>
 8010284:	2000      	movs	r0, #0
 8010286:	e7f7      	b.n	8010278 <__swsetup_r+0x9c>
 8010288:	200001f8 	.word	0x200001f8

0801028c <_raise_r>:
 801028c:	291f      	cmp	r1, #31
 801028e:	b538      	push	{r3, r4, r5, lr}
 8010290:	4604      	mov	r4, r0
 8010292:	460d      	mov	r5, r1
 8010294:	d904      	bls.n	80102a0 <_raise_r+0x14>
 8010296:	2316      	movs	r3, #22
 8010298:	6003      	str	r3, [r0, #0]
 801029a:	f04f 30ff 	mov.w	r0, #4294967295
 801029e:	bd38      	pop	{r3, r4, r5, pc}
 80102a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80102a2:	b112      	cbz	r2, 80102aa <_raise_r+0x1e>
 80102a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102a8:	b94b      	cbnz	r3, 80102be <_raise_r+0x32>
 80102aa:	4620      	mov	r0, r4
 80102ac:	f000 f830 	bl	8010310 <_getpid_r>
 80102b0:	462a      	mov	r2, r5
 80102b2:	4601      	mov	r1, r0
 80102b4:	4620      	mov	r0, r4
 80102b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ba:	f000 b817 	b.w	80102ec <_kill_r>
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d00a      	beq.n	80102d8 <_raise_r+0x4c>
 80102c2:	1c59      	adds	r1, r3, #1
 80102c4:	d103      	bne.n	80102ce <_raise_r+0x42>
 80102c6:	2316      	movs	r3, #22
 80102c8:	6003      	str	r3, [r0, #0]
 80102ca:	2001      	movs	r0, #1
 80102cc:	e7e7      	b.n	801029e <_raise_r+0x12>
 80102ce:	2400      	movs	r4, #0
 80102d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102d4:	4628      	mov	r0, r5
 80102d6:	4798      	blx	r3
 80102d8:	2000      	movs	r0, #0
 80102da:	e7e0      	b.n	801029e <_raise_r+0x12>

080102dc <raise>:
 80102dc:	4b02      	ldr	r3, [pc, #8]	; (80102e8 <raise+0xc>)
 80102de:	4601      	mov	r1, r0
 80102e0:	6818      	ldr	r0, [r3, #0]
 80102e2:	f7ff bfd3 	b.w	801028c <_raise_r>
 80102e6:	bf00      	nop
 80102e8:	200001f8 	.word	0x200001f8

080102ec <_kill_r>:
 80102ec:	b538      	push	{r3, r4, r5, lr}
 80102ee:	4d07      	ldr	r5, [pc, #28]	; (801030c <_kill_r+0x20>)
 80102f0:	2300      	movs	r3, #0
 80102f2:	4604      	mov	r4, r0
 80102f4:	4608      	mov	r0, r1
 80102f6:	4611      	mov	r1, r2
 80102f8:	602b      	str	r3, [r5, #0]
 80102fa:	f7f4 f919 	bl	8004530 <_kill>
 80102fe:	1c43      	adds	r3, r0, #1
 8010300:	d102      	bne.n	8010308 <_kill_r+0x1c>
 8010302:	682b      	ldr	r3, [r5, #0]
 8010304:	b103      	cbz	r3, 8010308 <_kill_r+0x1c>
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	bd38      	pop	{r3, r4, r5, pc}
 801030a:	bf00      	nop
 801030c:	20002be4 	.word	0x20002be4

08010310 <_getpid_r>:
 8010310:	f7f4 b906 	b.w	8004520 <_getpid>

08010314 <__swhatbuf_r>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	460c      	mov	r4, r1
 8010318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801031c:	2900      	cmp	r1, #0
 801031e:	b096      	sub	sp, #88	; 0x58
 8010320:	4615      	mov	r5, r2
 8010322:	461e      	mov	r6, r3
 8010324:	da0d      	bge.n	8010342 <__swhatbuf_r+0x2e>
 8010326:	89a3      	ldrh	r3, [r4, #12]
 8010328:	f013 0f80 	tst.w	r3, #128	; 0x80
 801032c:	f04f 0100 	mov.w	r1, #0
 8010330:	bf0c      	ite	eq
 8010332:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010336:	2340      	movne	r3, #64	; 0x40
 8010338:	2000      	movs	r0, #0
 801033a:	6031      	str	r1, [r6, #0]
 801033c:	602b      	str	r3, [r5, #0]
 801033e:	b016      	add	sp, #88	; 0x58
 8010340:	bd70      	pop	{r4, r5, r6, pc}
 8010342:	466a      	mov	r2, sp
 8010344:	f000 f848 	bl	80103d8 <_fstat_r>
 8010348:	2800      	cmp	r0, #0
 801034a:	dbec      	blt.n	8010326 <__swhatbuf_r+0x12>
 801034c:	9901      	ldr	r1, [sp, #4]
 801034e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010352:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010356:	4259      	negs	r1, r3
 8010358:	4159      	adcs	r1, r3
 801035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801035e:	e7eb      	b.n	8010338 <__swhatbuf_r+0x24>

08010360 <__smakebuf_r>:
 8010360:	898b      	ldrh	r3, [r1, #12]
 8010362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010364:	079d      	lsls	r5, r3, #30
 8010366:	4606      	mov	r6, r0
 8010368:	460c      	mov	r4, r1
 801036a:	d507      	bpl.n	801037c <__smakebuf_r+0x1c>
 801036c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	6123      	str	r3, [r4, #16]
 8010374:	2301      	movs	r3, #1
 8010376:	6163      	str	r3, [r4, #20]
 8010378:	b002      	add	sp, #8
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	ab01      	add	r3, sp, #4
 801037e:	466a      	mov	r2, sp
 8010380:	f7ff ffc8 	bl	8010314 <__swhatbuf_r>
 8010384:	9900      	ldr	r1, [sp, #0]
 8010386:	4605      	mov	r5, r0
 8010388:	4630      	mov	r0, r6
 801038a:	f7fc fb5f 	bl	800ca4c <_malloc_r>
 801038e:	b948      	cbnz	r0, 80103a4 <__smakebuf_r+0x44>
 8010390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010394:	059a      	lsls	r2, r3, #22
 8010396:	d4ef      	bmi.n	8010378 <__smakebuf_r+0x18>
 8010398:	f023 0303 	bic.w	r3, r3, #3
 801039c:	f043 0302 	orr.w	r3, r3, #2
 80103a0:	81a3      	strh	r3, [r4, #12]
 80103a2:	e7e3      	b.n	801036c <__smakebuf_r+0xc>
 80103a4:	89a3      	ldrh	r3, [r4, #12]
 80103a6:	6020      	str	r0, [r4, #0]
 80103a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ac:	81a3      	strh	r3, [r4, #12]
 80103ae:	9b00      	ldr	r3, [sp, #0]
 80103b0:	6163      	str	r3, [r4, #20]
 80103b2:	9b01      	ldr	r3, [sp, #4]
 80103b4:	6120      	str	r0, [r4, #16]
 80103b6:	b15b      	cbz	r3, 80103d0 <__smakebuf_r+0x70>
 80103b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103bc:	4630      	mov	r0, r6
 80103be:	f000 f81d 	bl	80103fc <_isatty_r>
 80103c2:	b128      	cbz	r0, 80103d0 <__smakebuf_r+0x70>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f023 0303 	bic.w	r3, r3, #3
 80103ca:	f043 0301 	orr.w	r3, r3, #1
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	89a3      	ldrh	r3, [r4, #12]
 80103d2:	431d      	orrs	r5, r3
 80103d4:	81a5      	strh	r5, [r4, #12]
 80103d6:	e7cf      	b.n	8010378 <__smakebuf_r+0x18>

080103d8 <_fstat_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d07      	ldr	r5, [pc, #28]	; (80103f8 <_fstat_r+0x20>)
 80103dc:	2300      	movs	r3, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	4611      	mov	r1, r2
 80103e4:	602b      	str	r3, [r5, #0]
 80103e6:	f7f4 f902 	bl	80045ee <_fstat>
 80103ea:	1c43      	adds	r3, r0, #1
 80103ec:	d102      	bne.n	80103f4 <_fstat_r+0x1c>
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	b103      	cbz	r3, 80103f4 <_fstat_r+0x1c>
 80103f2:	6023      	str	r3, [r4, #0]
 80103f4:	bd38      	pop	{r3, r4, r5, pc}
 80103f6:	bf00      	nop
 80103f8:	20002be4 	.word	0x20002be4

080103fc <_isatty_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d06      	ldr	r5, [pc, #24]	; (8010418 <_isatty_r+0x1c>)
 8010400:	2300      	movs	r3, #0
 8010402:	4604      	mov	r4, r0
 8010404:	4608      	mov	r0, r1
 8010406:	602b      	str	r3, [r5, #0]
 8010408:	f7f4 f901 	bl	800460e <_isatty>
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	d102      	bne.n	8010416 <_isatty_r+0x1a>
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	b103      	cbz	r3, 8010416 <_isatty_r+0x1a>
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	bd38      	pop	{r3, r4, r5, pc}
 8010418:	20002be4 	.word	0x20002be4

0801041c <_init>:
 801041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041e:	bf00      	nop
 8010420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010422:	bc08      	pop	{r3}
 8010424:	469e      	mov	lr, r3
 8010426:	4770      	bx	lr

08010428 <_fini>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	bf00      	nop
 801042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042e:	bc08      	pop	{r3}
 8010430:	469e      	mov	lr, r3
 8010432:	4770      	bx	lr
