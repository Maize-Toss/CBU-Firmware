
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08011928  08011928  00021928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f60  08011f60  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08011f60  08011f60  00021f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f68  08011f68  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f68  08011f68  00021f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f6c  08011f6c  00021f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08011f70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a7c  2000034c  080122bc  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc8  080122bc  00032dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221c0  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004878  00000000  00000000  0005257f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  00056df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001720  00000000  00000000  00058b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006324  00000000  00000000  0005a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020322  00000000  00000000  000605cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e3b  00000000  00000000  000808ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000093d4  00000000  00000000  0017372c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0017cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000034c 	.word	0x2000034c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801190c 	.word	0x0801190c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000350 	.word	0x20000350
 80001dc:	0801190c 	.word	0x0801190c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <case_insensitive_strcmp+0x16>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e056      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10d      	bne.n	800105e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001042:	2300      	movs	r3, #0
 8001044:	e050      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e04a      	b.n	80010e8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d103      	bne.n	800107e <case_insensitive_strcmp+0x5e>
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f103 0220 	add.w	r2, r3, #32
 800107c:	e000      	b.n	8001080 <case_insensitive_strcmp+0x60>
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	3301      	adds	r3, #1
 800108a:	491a      	ldr	r1, [pc, #104]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d102      	bne.n	800109e <case_insensitive_strcmp+0x7e>
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	3320      	adds	r3, #32
 800109c:	e000      	b.n	80010a0 <case_insensitive_strcmp+0x80>
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d0d0      	beq.n	8001046 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	737b      	strb	r3, [r7, #13]
 80010aa:	7b7b      	ldrb	r3, [r7, #13]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d103      	bne.n	80010c4 <case_insensitive_strcmp+0xa4>
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	f103 0220 	add.w	r2, r3, #32
 80010c2:	e000      	b.n	80010c6 <case_insensitive_strcmp+0xa6>
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	733b      	strb	r3, [r7, #12]
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4908      	ldr	r1, [pc, #32]	; (80010f4 <case_insensitive_strcmp+0xd4>)
 80010d2:	440b      	add	r3, r1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <case_insensitive_strcmp+0xc4>
 80010de:	7b3b      	ldrb	r3, [r7, #12]
 80010e0:	3320      	adds	r3, #32
 80010e2:	e000      	b.n	80010e6 <case_insensitive_strcmp+0xc6>
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	08011be8 	.word	0x08011be8

080010f8 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001110:	2300      	movs	r3, #0
 8001112:	e015      	b.n	8001140 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f86d 	bl	80001f4 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	4798      	blx	r3
 8001128:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	e005      	b.n	8001140 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f00e f82c 	bl	800f196 <memcpy>

    return copy;
 800113e:	68bb      	ldr	r3, [r7, #8]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	4798      	blx	r3
 8001158:	60f8      	str	r0, [r7, #12]
    if (node)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001160:	2228      	movs	r2, #40	; 0x28
 8001162:	2100      	movs	r1, #0
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f00d ff1a 	bl	800ef9e <memset>
    }

    return node;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001180:	e037      	b.n	80011f2 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <cJSON_Delete+0x32>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffe7 	bl	8001174 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <cJSON_Delete+0x52>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <cJSON_Delete+0x90>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6912      	ldr	r2, [r2, #16]
 80011c2:	4610      	mov	r0, r2
 80011c4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <cJSON_Delete+0x72>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <cJSON_Delete+0x90>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6a12      	ldr	r2, [r2, #32]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <cJSON_Delete+0x90>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4798      	blx	r3
        item = next;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1c4      	bne.n	8001182 <cJSON_Delete+0xe>
    }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000

08001208 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800120c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b098      	sub	sp, #96	; 0x60
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001232:	f7ff ffe9 	bl	8001208 <get_decimal_point>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <parse_number+0x36>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <parse_number+0x3a>
    {
        return false;
 800124e:	2300      	movs	r3, #0
 8001250:	e0a0      	b.n	8001394 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001256:	e03d      	b.n	80012d4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b45      	cmp	r3, #69	; 0x45
 800126a:	dc17      	bgt.n	800129c <parse_number+0x84>
 800126c:	2b2b      	cmp	r3, #43	; 0x2b
 800126e:	db40      	blt.n	80012f2 <parse_number+0xda>
 8001270:	3b2b      	subs	r3, #43	; 0x2b
 8001272:	2201      	movs	r2, #1
 8001274:	409a      	lsls	r2, r3
 8001276:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <parse_number+0x190>)
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10b      	bne.n	80012a0 <parse_number+0x88>
 8001288:	f002 0308 	and.w	r3, r2, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d111      	bne.n	80012be <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800129a:	e02a      	b.n	80012f2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800129c:	2b65      	cmp	r3, #101	; 0x65
 800129e:	d128      	bne.n	80012f2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012aa:	440b      	add	r3, r1
 80012ac:	4413      	add	r3, r2
 80012ae:	7819      	ldrb	r1, [r3, #0]
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
                break;
 80012bc:	e007      	b.n	80012ce <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	4413      	add	r3, r2
 80012c6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80012ca:	701a      	strb	r2, [r3, #0]
                break;
 80012cc:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	3301      	adds	r3, #1
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d6:	2b3e      	cmp	r3, #62	; 0x3e
 80012d8:	d80d      	bhi.n	80012f6 <parse_number+0xde>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00a      	beq.n	80012f6 <parse_number+0xde>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e6:	441a      	add	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3b3      	bcc.n	8001258 <parse_number+0x40>
        }
    }
loop_end:
 80012f0:	e001      	b.n	80012f6 <parse_number+0xde>
                goto loop_end;
 80012f2:	bf00      	nop
 80012f4:	e000      	b.n	80012f8 <parse_number+0xe0>
loop_end:
 80012f6:	bf00      	nop
    number_c_string[i] = '\0';
 80012f8:	f107 0208 	add.w	r2, r7, #8
 80012fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001304:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f00d fcd6 	bl	800ecc0 <strtod>
 8001314:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	429a      	cmp	r2, r3
 8001320:	d101      	bne.n	8001326 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001322:	2300      	movs	r3, #0
 8001324:	e036      	b.n	8001394 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800132c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001330:	a31b      	add	r3, pc, #108	; (adr r3, 80013a0 <parse_number+0x188>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800133a:	f7ff fbfb 	bl	8000b34 <__aeabi_dcmpge>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	e015      	b.n	800137a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <parse_number+0x194>)
 8001354:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001358:	f7ff fbe2 	bl	8000b20 <__aeabi_dcmple>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	e006      	b.n	800137a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800136c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001370:	f7ff fc0a 	bl	8000b88 <__aeabi_d2iz>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2208      	movs	r2, #8
 800137e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001386:	f107 0208 	add.w	r2, r7, #8
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	441a      	add	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	609a      	str	r2, [r3, #8]
    return true;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3760      	adds	r7, #96	; 0x60
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	f3af 8000 	nop.w
 80013a0:	ffc00000 	.word	0xffc00000
 80013a4:	41dfffff 	.word	0x41dfffff
 80013a8:	04007fe5 	.word	0x04007fe5
 80013ac:	c1e00000 	.word	0xc1e00000

080013b0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <ensure+0x20>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <ensure+0x24>
    {
        return NULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e083      	b.n	80014dc <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <ensure+0x3c>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d301      	bcc.n	80013ec <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e077      	b.n	80014dc <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da01      	bge.n	80013f6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e072      	b.n	80014dc <ensure+0x12c>
    }

    needed += p->offset + 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	3301      	adds	r3, #1
 8001400:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d805      	bhi.n	8001418 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4413      	add	r3, r2
 8001416:	e061      	b.n	80014dc <ensure+0x12c>
    }

    if (p->noalloc) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <ensure+0x74>
        return NULL;
 8001420:	2300      	movs	r3, #0
 8001422:	e05b      	b.n	80014dc <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142a:	d308      	bcc.n	800143e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db03      	blt.n	800143a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001432:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	e004      	b.n	8001444 <ensure+0x94>
        }
        else
        {
            return NULL;
 800143a:	2300      	movs	r3, #0
 800143c:	e04e      	b.n	80014dc <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d018      	beq.n	800147e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	4610      	mov	r0, r2
 8001458:	4798      	blx	r3
 800145a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d132      	bne.n	80014c8 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3
            p->length = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

            return NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	e02e      	b.n	80014dc <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	4798      	blx	r3
 8001486:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	4798      	blx	r3
            p->length = 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

            return NULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e018      	b.n	80014dc <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	3301      	adds	r3, #1
 80014b4:	461a      	mov	r2, r3
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f00d fe6d 	bl	800f196 <memcpy>
        p->hooks.deallocate(p->buffer);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4610      	mov	r0, r2
 80014c6:	4798      	blx	r3
    }
    p->length = newsize;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4413      	add	r3, r2
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d013      	beq.n	800151e <update_offset+0x3a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00f      	beq.n	800151e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689c      	ldr	r4, [r3, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7fe fe70 	bl	80001f4 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	18e2      	adds	r2, r4, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e000      	b.n	8001520 <update_offset+0x3c>
        return;
 800151e:	bf00      	nop
}
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
	...

08001528 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	ed87 0b02 	vstr	d0, [r7, #8]
 8001534:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	68fe      	ldr	r6, [r7, #12]
 800153c:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	687e      	ldr	r6, [r7, #4]
 8001544:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8001548:	f7ff fafe 	bl	8000b48 <__aeabi_dcmpgt>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <compare_double+0x34>
 8001552:	68bc      	ldr	r4, [r7, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800155a:	e003      	b.n	8001564 <compare_double+0x3c>
 800155c:	683c      	ldr	r4, [r7, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001564:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800156c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001570:	f7fe fea2 	bl	80002b8 <__aeabi_dsub>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4690      	mov	r8, r2
 800157a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <compare_double+0x8c>)
 8001584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001588:	f7ff f84e 	bl	8000628 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	2101      	movs	r1, #1
 8001592:	460c      	mov	r4, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7ff fac2 	bl	8000b20 <__aeabi_dcmple>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <compare_double+0x7e>
 80015a2:	2300      	movs	r3, #0
 80015a4:	461c      	mov	r4, r3
 80015a6:	b2e3      	uxtb	r3, r4
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015b2:	bf00      	nop
 80015b4:	3cb00000 	.word	0x3cb00000

080015b8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b093      	sub	sp, #76	; 0x4c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80015ee:	f7ff fe0b 	bl	8001208 <get_decimal_point>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <print_number+0x56>
    {
        return false;
 800160a:	2300      	movs	r3, #0
 800160c:	e0b4      	b.n	8001778 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800160e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001612:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001616:	f7ff faa1 	bl	8000b5c <__aeabi_dcmpun>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d121      	bne.n	8001664 <print_number+0xac>
 8001620:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001624:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001628:	2301      	movs	r3, #1
 800162a:	461e      	mov	r6, r3
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <print_number+0x1c8>)
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff fa91 	bl	8000b5c <__aeabi_dcmpun>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10b      	bne.n	8001658 <print_number+0xa0>
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <print_number+0x1c8>)
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7ff fa69 	bl	8000b20 <__aeabi_dcmple>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <print_number+0xa0>
 8001654:	2300      	movs	r3, #0
 8001656:	461e      	mov	r6, r3
 8001658:	b2f3      	uxtb	r3, r6
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4946      	ldr	r1, [pc, #280]	; (8001784 <print_number+0x1cc>)
 800166a:	4618      	mov	r0, r3
 800166c:	f00d fbf6 	bl	800ee5c <siprintf>
 8001670:	6478      	str	r0, [r7, #68]	; 0x44
 8001672:	e03f      	b.n	80016f4 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff6b 	bl	8000554 <__aeabi_i2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001686:	f7ff fa37 	bl	8000af8 <__aeabi_dcmpeq>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	493b      	ldr	r1, [pc, #236]	; (8001788 <print_number+0x1d0>)
 800169a:	4618      	mov	r0, r3
 800169c:	f00d fbde 	bl	800ee5c <siprintf>
 80016a0:	6478      	str	r0, [r7, #68]	; 0x44
 80016a2:	e027      	b.n	80016f4 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016a4:	f107 0014 	add.w	r0, r7, #20
 80016a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <print_number+0x1d4>)
 80016ae:	f00d fbd5 	bl	800ee5c <siprintf>
 80016b2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80016b4:	f107 0208 	add.w	r2, r7, #8
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4934      	ldr	r1, [pc, #208]	; (8001790 <print_number+0x1d8>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00d fbec 	bl	800ee9c <siscanf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10c      	bne.n	80016e4 <print_number+0x12c>
 80016ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ce:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	eef0 0a67 	vmov.f32	s1, s15
 80016da:	f7ff ff25 	bl	8001528 <compare_double>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80016e4:	f107 0014 	add.w	r0, r7, #20
 80016e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <print_number+0x1dc>)
 80016ee:	f00d fbb5 	bl	800ee5c <siprintf>
 80016f2:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80016f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db02      	blt.n	8001700 <print_number+0x148>
 80016fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fc:	2b19      	cmp	r3, #25
 80016fe:	dd01      	ble.n	8001704 <print_number+0x14c>
    {
        return false;
 8001700:	2300      	movs	r3, #0
 8001702:	e039      	b.n	8001778 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	3301      	adds	r3, #1
 8001708:	4619      	mov	r1, r3
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f7ff fe50 	bl	80013b0 <ensure>
 8001710:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <print_number+0x164>
    {
        return false;
 8001718:	2300      	movs	r3, #0
 800171a:	e02d      	b.n	8001778 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800171c:	2300      	movs	r3, #0
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
 8001720:	e01a      	b.n	8001758 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001722:	f107 0214 	add.w	r2, r7, #20
 8001726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001730:	429a      	cmp	r2, r3
 8001732:	d105      	bne.n	8001740 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001738:	4413      	add	r3, r2
 800173a:	222e      	movs	r2, #46	; 0x2e
 800173c:	701a      	strb	r2, [r3, #0]
            continue;
 800173e:	e008      	b.n	8001752 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001744:	4413      	add	r3, r2
 8001746:	f107 0114 	add.w	r1, r7, #20
 800174a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800174c:	440a      	add	r2, r1
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001754:	3301      	adds	r3, #1
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800175c:	429a      	cmp	r2, r3
 800175e:	d3e0      	bcc.n	8001722 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001764:	4413      	add	r3, r2
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001770:	441a      	add	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	609a      	str	r2, [r3, #8]

    return true;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	374c      	adds	r7, #76	; 0x4c
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001780:	7fefffff 	.word	0x7fefffff
 8001784:	08011934 	.word	0x08011934
 8001788:	0801193c 	.word	0x0801193c
 800178c:	08011940 	.word	0x08011940
 8001790:	08011948 	.word	0x08011948
 8001794:	0801194c 	.word	0x0801194c

08001798 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	e04c      	b.n	8001848 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b2f      	cmp	r3, #47	; 0x2f
 80017b8:	d90f      	bls.n	80017da <parse_hex4+0x42>
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b39      	cmp	r3, #57	; 0x39
 80017c4:	d809      	bhi.n	80017da <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	3b30      	subs	r3, #48	; 0x30
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e02d      	b.n	8001836 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d90f      	bls.n	8001806 <parse_hex4+0x6e>
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b46      	cmp	r3, #70	; 0x46
 80017f0:	d809      	bhi.n	8001806 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	3b37      	subs	r3, #55	; 0x37
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e017      	b.n	8001836 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b60      	cmp	r3, #96	; 0x60
 8001810:	d90f      	bls.n	8001832 <parse_hex4+0x9a>
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b66      	cmp	r3, #102	; 0x66
 800181c:	d809      	bhi.n	8001832 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	3b57      	subs	r3, #87	; 0x57
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e001      	b.n	8001836 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001832:	2300      	movs	r3, #0
 8001834:	e00c      	b.n	8001850 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d802      	bhi.n	8001842 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9af      	bls.n	80017ae <parse_hex4+0x16>
        }
    }

    return h;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b05      	cmp	r3, #5
 8001894:	f340 80b7 	ble.w	8001a06 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3302      	adds	r3, #2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff7b 	bl	8001798 <parse_hex4>
 80018a2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018aa:	d304      	bcc.n	80018b6 <utf16_literal_to_utf8+0x5a>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018b2:	f0c0 80aa 	bcc.w	8001a0a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018bc:	d337      	bcc.n	800192e <utf16_literal_to_utf8+0xd2>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c4:	d233      	bcs.n	800192e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3306      	adds	r3, #6
 80018ca:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018d0:	230c      	movs	r3, #12
 80018d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b05      	cmp	r3, #5
 80018de:	f340 8096 	ble.w	8001a0e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b5c      	cmp	r3, #92	; 0x5c
 80018e8:	f040 8093 	bne.w	8001a12 <utf16_literal_to_utf8+0x1b6>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b75      	cmp	r3, #117	; 0x75
 80018f4:	f040 808d 	bne.w	8001a12 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3302      	adds	r3, #2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff4b 	bl	8001798 <parse_hex4>
 8001902:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800190a:	f0c0 8084 	bcc.w	8001a16 <utf16_literal_to_utf8+0x1ba>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001914:	d27f      	bcs.n	8001a16 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	029a      	lsls	r2, r3, #10
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <utf16_literal_to_utf8+0x1cc>)
 800191c:	4013      	ands	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001924:	4313      	orrs	r3, r2
 8001926:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800192c:	e004      	b.n	8001938 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800192e:	2306      	movs	r3, #6
 8001930:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	d803      	bhi.n	8001946 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001944:	e01f      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194c:	d206      	bcs.n	800195c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800194e:	2302      	movs	r3, #2
 8001950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	f887 3020 	strb.w	r3, [r7, #32]
 800195a:	e014      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d206      	bcs.n	8001972 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001964:	2303      	movs	r3, #3
 8001966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800196a:	23e0      	movs	r3, #224	; 0xe0
 800196c:	f887 3020 	strb.w	r3, [r7, #32]
 8001970:	e009      	b.n	8001986 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001978:	d24f      	bcs.n	8001a1a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800197a:	2304      	movs	r3, #4
 800197c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001980:	23f0      	movs	r3, #240	; 0xf0
 8001982:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198a:	3b01      	subs	r3, #1
 800198c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001990:	e015      	b.n	80019be <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199a:	b2da      	uxtb	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019a4:	440b      	add	r3, r1
 80019a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019b8:	3b01      	subs	r3, #1
 80019ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d909      	bls.n	80019e2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019da:	430a      	orrs	r2, r1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fa:	441a      	add	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a04:	e00b      	b.n	8001a1e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a06:	bf00      	nop
 8001a08:	e008      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a0a:	bf00      	nop
 8001a0c:	e006      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a0e:	bf00      	nop
 8001a10:	e004      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a12:	bf00      	nop
 8001a14:	e002      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a1a:	bf00      	nop

fail:
    return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000ffc00 	.word	0x000ffc00

08001a2c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b22      	cmp	r3, #34	; 0x22
 8001a68:	f040 8103 	bne.w	8001c72 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a74:	e017      	b.n	8001aa6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b5c      	cmp	r3, #92	; 0x5c
 8001a7c:	d110      	bne.n	8001aa0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	f080 80f1 	bcs.w	8001c76 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d203      	bcs.n	8001ac0 <parse_string+0x94>
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b22      	cmp	r3, #34	; 0x22
 8001abe:	d1da      	bne.n	8001a76 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	f080 80d3 	bcs.w	8001c7a <parse_string+0x24e>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b22      	cmp	r3, #34	; 0x22
 8001ada:	f040 80ce 	bne.w	8001c7a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	3201      	adds	r2, #1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4798      	blx	r3
 8001b00:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ba 	beq.w	8001c7e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b0e:	e094      	b.n	8001c3a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b5c      	cmp	r3, #92	; 0x5c
 8001b16:	d008      	beq.n	8001b2a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	1c53      	adds	r3, r2, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	60f9      	str	r1, [r7, #12]
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e087      	b.n	8001c3a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b2e:	6a3a      	ldr	r2, [r7, #32]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f340 80a4 	ble.w	8001c82 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b75      	cmp	r3, #117	; 0x75
 8001b42:	f300 80a0 	bgt.w	8001c86 <parse_string+0x25a>
 8001b46:	2b5c      	cmp	r3, #92	; 0x5c
 8001b48:	da04      	bge.n	8001b54 <parse_string+0x128>
 8001b4a:	2b22      	cmp	r3, #34	; 0x22
 8001b4c:	d05c      	beq.n	8001c08 <parse_string+0x1dc>
 8001b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001b50:	d05a      	beq.n	8001c08 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b52:	e098      	b.n	8001c86 <parse_string+0x25a>
            switch (input_pointer[1])
 8001b54:	3b5c      	subs	r3, #92	; 0x5c
 8001b56:	2b19      	cmp	r3, #25
 8001b58:	f200 8095 	bhi.w	8001c86 <parse_string+0x25a>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <parse_string+0x138>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001c09 	.word	0x08001c09
 8001b68:	08001c87 	.word	0x08001c87
 8001b6c:	08001c87 	.word	0x08001c87
 8001b70:	08001c87 	.word	0x08001c87
 8001b74:	08001c87 	.word	0x08001c87
 8001b78:	08001c87 	.word	0x08001c87
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001c87 	.word	0x08001c87
 8001b84:	08001c87 	.word	0x08001c87
 8001b88:	08001c87 	.word	0x08001c87
 8001b8c:	08001bd9 	.word	0x08001bd9
 8001b90:	08001c87 	.word	0x08001c87
 8001b94:	08001c87 	.word	0x08001c87
 8001b98:	08001c87 	.word	0x08001c87
 8001b9c:	08001c87 	.word	0x08001c87
 8001ba0:	08001c87 	.word	0x08001c87
 8001ba4:	08001c87 	.word	0x08001c87
 8001ba8:	08001c87 	.word	0x08001c87
 8001bac:	08001be5 	.word	0x08001be5
 8001bb0:	08001c87 	.word	0x08001c87
 8001bb4:	08001c87 	.word	0x08001c87
 8001bb8:	08001c87 	.word	0x08001c87
 8001bbc:	08001bf1 	.word	0x08001bf1
 8001bc0:	08001c87 	.word	0x08001c87
 8001bc4:	08001bfd 	.word	0x08001bfd
 8001bc8:	08001c19 	.word	0x08001c19
                    *output_pointer++ = '\b';
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60fa      	str	r2, [r7, #12]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	701a      	strb	r2, [r3, #0]
                    break;
 8001bd6:	e02c      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60fa      	str	r2, [r7, #12]
 8001bde:	220c      	movs	r2, #12
 8001be0:	701a      	strb	r2, [r3, #0]
                    break;
 8001be2:	e026      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60fa      	str	r2, [r7, #12]
 8001bea:	220a      	movs	r2, #10
 8001bec:	701a      	strb	r2, [r3, #0]
                    break;
 8001bee:	e020      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	220d      	movs	r2, #13
 8001bf8:	701a      	strb	r2, [r3, #0]
                    break;
 8001bfa:	e01a      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60fa      	str	r2, [r7, #12]
 8001c02:	2209      	movs	r2, #9
 8001c04:	701a      	strb	r2, [r3, #0]
                    break;
 8001c06:	e014      	b.n	8001c32 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	60f9      	str	r1, [r7, #12]
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
                    break;
 8001c16:	e00c      	b.n	8001c32 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6a39      	ldr	r1, [r7, #32]
 8001c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c22:	f7ff fe1b 	bl	800185c <utf16_literal_to_utf8>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02c      	beq.n	8001c8a <parse_string+0x25e>
                    break;
 8001c30:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	4413      	add	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f4ff af66 	bcc.w	8001b10 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a3a      	ldr	r2, [r7, #32]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]

    return true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e01e      	b.n	8001cb0 <parse_string+0x284>
        goto fail;
 8001c72:	bf00      	nop
 8001c74:	e00a      	b.n	8001c8c <parse_string+0x260>
                    goto fail;
 8001c76:	bf00      	nop
 8001c78:	e008      	b.n	8001c8c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001c7a:	bf00      	nop
 8001c7c:	e006      	b.n	8001c8c <parse_string+0x260>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e004      	b.n	8001c8c <parse_string+0x260>
                goto fail;
 8001c82:	bf00      	nop
 8001c84:	e002      	b.n	8001c8c <parse_string+0x260>
                    goto fail;
 8001c86:	bf00      	nop
 8001c88:	e000      	b.n	8001c8c <parse_string+0x260>
                        goto fail;
 8001c8a:	bf00      	nop

fail:
    if (output != NULL)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	69f8      	ldr	r0, [r7, #28]
 8001c98:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <print_string_ptr+0x28>
    {
        return false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e110      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f7ff fb61 	bl	80013b0 <ensure>
 8001cee:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <print_string_ptr+0x42>
        {
            return false;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e103      	b.n	8001f02 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4a83      	ldr	r2, [pc, #524]	; (8001f0c <print_string_ptr+0x254>)
 8001cfe:	8811      	ldrh	r1, [r2, #0]
 8001d00:	7892      	ldrb	r2, [r2, #2]
 8001d02:	8019      	strh	r1, [r3, #0]
 8001d04:	709a      	strb	r2, [r3, #2]

        return true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0fb      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e024      	b.n	8001d5a <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b22      	cmp	r3, #34	; 0x22
 8001d16:	dc0f      	bgt.n	8001d38 <print_string_ptr+0x80>
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	db13      	blt.n	8001d44 <print_string_ptr+0x8c>
 8001d1c:	3b08      	subs	r3, #8
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	; (8001f10 <print_string_ptr+0x258>)
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <print_string_ptr+0x84>
 8001d36:	e005      	b.n	8001d44 <print_string_ptr+0x8c>
 8001d38:	2b5c      	cmp	r3, #92	; 0x5c
 8001d3a:	d103      	bne.n	8001d44 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
                break;
 8001d42:	e007      	b.n	8001d54 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b1f      	cmp	r3, #31
 8001d4a:	d802      	bhi.n	8001d52 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3305      	adds	r3, #5
 8001d50:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d52:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1d6      	bne.n	8001d10 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3303      	adds	r3, #3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7ff fb1a 	bl	80013b0 <ensure>
 8001d7c:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <print_string_ptr+0xd0>
    {
        return false;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e0bc      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d117      	bne.n	8001dbe <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2222      	movs	r2, #34	; 0x22
 8001d92:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3301      	adds	r3, #1
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00d f9fa 	bl	800f196 <memcpy>
        output[output_length + 1] = '\"';
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	2222      	movs	r2, #34	; 0x22
 8001dac:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]

        return true;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a1      	b.n	8001f02 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2222      	movs	r2, #34	; 0x22
 8001dc2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e086      	b.n	8001ede <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b1f      	cmp	r3, #31
 8001dd6:	d90c      	bls.n	8001df2 <print_string_ptr+0x13a>
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b22      	cmp	r3, #34	; 0x22
 8001dde:	d008      	beq.n	8001df2 <print_string_ptr+0x13a>
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b5c      	cmp	r3, #92	; 0x5c
 8001de6:	d004      	beq.n	8001df2 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e06f      	b.n	8001ed2 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	61ba      	str	r2, [r7, #24]
 8001df8:	225c      	movs	r2, #92	; 0x5c
 8001dfa:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b22      	cmp	r3, #34	; 0x22
 8001e02:	dc3d      	bgt.n	8001e80 <print_string_ptr+0x1c8>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	db59      	blt.n	8001ebc <print_string_ptr+0x204>
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	2b1a      	cmp	r3, #26
 8001e0c:	d856      	bhi.n	8001ebc <print_string_ptr+0x204>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <print_string_ptr+0x15c>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e95 	.word	0x08001e95
 8001e18:	08001eb5 	.word	0x08001eb5
 8001e1c:	08001ea5 	.word	0x08001ea5
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001e9d 	.word	0x08001e9d
 8001e28:	08001ead 	.word	0x08001ead
 8001e2c:	08001ebd 	.word	0x08001ebd
 8001e30:	08001ebd 	.word	0x08001ebd
 8001e34:	08001ebd 	.word	0x08001ebd
 8001e38:	08001ebd 	.word	0x08001ebd
 8001e3c:	08001ebd 	.word	0x08001ebd
 8001e40:	08001ebd 	.word	0x08001ebd
 8001e44:	08001ebd 	.word	0x08001ebd
 8001e48:	08001ebd 	.word	0x08001ebd
 8001e4c:	08001ebd 	.word	0x08001ebd
 8001e50:	08001ebd 	.word	0x08001ebd
 8001e54:	08001ebd 	.word	0x08001ebd
 8001e58:	08001ebd 	.word	0x08001ebd
 8001e5c:	08001ebd 	.word	0x08001ebd
 8001e60:	08001ebd 	.word	0x08001ebd
 8001e64:	08001ebd 	.word	0x08001ebd
 8001e68:	08001ebd 	.word	0x08001ebd
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ebd 	.word	0x08001ebd
 8001e74:	08001ebd 	.word	0x08001ebd
 8001e78:	08001ebd 	.word	0x08001ebd
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	2b5c      	cmp	r3, #92	; 0x5c
 8001e82:	d11b      	bne.n	8001ebc <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	225c      	movs	r2, #92	; 0x5c
 8001e88:	701a      	strb	r2, [r3, #0]
                    break;
 8001e8a:	e022      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2222      	movs	r2, #34	; 0x22
 8001e90:	701a      	strb	r2, [r3, #0]
                    break;
 8001e92:	e01e      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2262      	movs	r2, #98	; 0x62
 8001e98:	701a      	strb	r2, [r3, #0]
                    break;
 8001e9a:	e01a      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2266      	movs	r2, #102	; 0x66
 8001ea0:	701a      	strb	r2, [r3, #0]
                    break;
 8001ea2:	e016      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	226e      	movs	r2, #110	; 0x6e
 8001ea8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eaa:	e012      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2272      	movs	r2, #114	; 0x72
 8001eb0:	701a      	strb	r2, [r3, #0]
                    break;
 8001eb2:	e00e      	b.n	8001ed2 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2274      	movs	r2, #116	; 0x74
 8001eb8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eba:	e00a      	b.n	8001ed2 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <print_string_ptr+0x25c>)
 8001ec4:	69b8      	ldr	r0, [r7, #24]
 8001ec6:	f00c ffc9 	bl	800ee5c <siprintf>
                    output_pointer += 4;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	61bb      	str	r3, [r7, #24]
                    break;
 8001ed0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f af74 	bne.w	8001dd0 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	2222      	movs	r2, #34	; 0x22
 8001ef2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

    return true;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08011954 	.word	0x08011954
 8001f10:	04000037 	.word	0x04000037
 8001f14:	08011958 	.word	0x08011958

08001f18 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fec5 	bl	8001cb8 <print_string_ptr>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <buffer_skip_whitespace+0x16>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e02c      	b.n	8001fac <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <buffer_skip_whitespace+0x2c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d306      	bcc.n	8001f72 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	e021      	b.n	8001fac <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <buffer_skip_whitespace+0x5c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <buffer_skip_whitespace+0x5c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d9e9      	bls.n	8001f68 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d104      	bne.n	8001faa <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <skip_utf8_bom+0x1e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <skip_utf8_bom+0x1e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <skip_utf8_bom+0x22>
    {
        return NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e01c      	b.n	8002014 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <skip_utf8_bom+0x5a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d211      	bcs.n	8002012 <skip_utf8_bom+0x5a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <skip_utf8_bom+0x64>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00c ffd6 	bl	800efae <strncmp>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	1cda      	adds	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002012:	687b      	ldr	r3, [r7, #4]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	08011960 	.word	0x08011960

08002020 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	e00c      	b.n	8002050 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7fe f8dc 	bl	80001f4 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f805 	bl	8002058 <cJSON_ParseWithLengthOpts>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d042      	beq.n	8002116 <cJSON_ParseWithLengthOpts+0xbe>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03f      	beq.n	8002116 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020a2:	4a39      	ldr	r2, [pc, #228]	; (8002188 <cJSON_ParseWithLengthOpts+0x130>)
 80020a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020ae:	4836      	ldr	r0, [pc, #216]	; (8002188 <cJSON_ParseWithLengthOpts+0x130>)
 80020b0:	f7ff f84a 	bl	8001148 <cJSON_New_Item>
 80020b4:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02e      	beq.n	800211a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff79 	bl	8001fb8 <skip_utf8_bom>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff35 	bl	8001f38 <buffer_skip_whitespace>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020d4:	f000 f8fc 	bl	80022d0 <parse_value>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01f      	beq.n	800211e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff25 	bl	8001f38 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d215      	bcs.n	8002122 <cJSON_ParseWithLengthOpts+0xca>
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	e031      	b.n	800217a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002116:	bf00      	nop
 8002118:	e004      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002122:	bf00      	nop

fail:
    if (item != NULL)
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800212a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800212c:	f7ff f822 	bl	8001174 <cJSON_Delete>
    }

    if (value != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	429a      	cmp	r2, r3
 8002144:	d202      	bcs.n	800214c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e005      	b.n	8002158 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b01      	subs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d004      	beq.n	8002168 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <cJSON_ParseWithLengthOpts+0x12c>)
 800216a:	461a      	mov	r2, r3
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002174:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3738      	adds	r7, #56	; 0x38
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000368 	.word	0x20000368
 8002188:	20000000 	.word	0x20000000

0800218c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff41 	bl	8002020 <cJSON_ParseWithOpts>
 800219e:	4603      	mov	r3, r0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	2224      	movs	r2, #36	; 0x24
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00c feec 	bl	800ef9e <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <print+0x104>)
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4610      	mov	r0, r2
 80021d0:	4798      	blx	r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <print+0x104>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d040      	beq.n	8002274 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	4619      	mov	r1, r3
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f955 	bl	80024a8 <print_value>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d039      	beq.n	8002278 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f96b 	bl	80014e4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	6938      	ldr	r0, [r7, #16]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	3201      	adds	r2, #1
 8002220:	4611      	mov	r1, r2
 8002222:	4798      	blx	r3
 8002224:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d027      	beq.n	800227c <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e01e      	b.n	8002270 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	3201      	adds	r2, #1
 800223a:	4610      	mov	r0, r2
 800223c:	4798      	blx	r3
 800223e:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01c      	beq.n	8002280 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	4293      	cmp	r3, r2
 8002250:	bf28      	it	cs
 8002252:	4613      	movcs	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002258:	f00c ff9d 	bl	800f196 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002260:	4413      	add	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
    }

    return printed;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	e016      	b.n	80022a2 <print+0xfa>
        goto fail;
 8002274:	bf00      	nop
 8002276:	e004      	b.n	8002282 <print+0xda>
        goto fail;
 8002278:	bf00      	nop
 800227a:	e002      	b.n	8002282 <print+0xda>
            goto fail;
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <print+0xda>
            goto fail;
 8002280:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4610      	mov	r0, r2
 8002290:	4798      	blx	r3
    }

    if (printed != NULL)
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <print+0xf8>
    {
        hooks->deallocate(printed);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800229e:	4798      	blx	r3
    }

    return NULL;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3738      	adds	r7, #56	; 0x38
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08011a70 	.word	0x08011a70

080022b0 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <cJSON_PrintUnformatted+0x1c>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff73 	bl	80021a8 <print>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000000 	.word	0x20000000

080022d0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <parse_value+0x18>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <parse_value+0x1c>
    {
        return false; /* no input */
 80022e8:	2300      	movs	r3, #0
 80022ea:	e0d2      	b.n	8002492 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01d      	beq.n	800232e <parse_value+0x5e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	1d1a      	adds	r2, r3, #4
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d816      	bhi.n	800232e <parse_value+0x5e>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4413      	add	r3, r2
 800230a:	2204      	movs	r2, #4
 800230c:	4963      	ldr	r1, [pc, #396]	; (800249c <parse_value+0x1cc>)
 800230e:	4618      	mov	r0, r3
 8002310:	f00c fe4d 	bl	800efae <strncmp>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	1d1a      	adds	r2, r3, #4
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	609a      	str	r2, [r3, #8]
        return true;
 800232a:	2301      	movs	r3, #1
 800232c:	e0b1      	b.n	8002492 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01d      	beq.n	8002370 <parse_value+0xa0>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	1d5a      	adds	r2, r3, #5
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d816      	bhi.n	8002370 <parse_value+0xa0>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4413      	add	r3, r2
 800234c:	2205      	movs	r2, #5
 800234e:	4954      	ldr	r1, [pc, #336]	; (80024a0 <parse_value+0x1d0>)
 8002350:	4618      	mov	r0, r3
 8002352:	f00c fe2c 	bl	800efae <strncmp>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	1d5a      	adds	r2, r3, #5
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	609a      	str	r2, [r3, #8]
        return true;
 800236c:	2301      	movs	r3, #1
 800236e:	e090      	b.n	8002492 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d020      	beq.n	80023b8 <parse_value+0xe8>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d819      	bhi.n	80023b8 <parse_value+0xe8>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4413      	add	r3, r2
 800238e:	2204      	movs	r2, #4
 8002390:	4944      	ldr	r1, [pc, #272]	; (80024a4 <parse_value+0x1d4>)
 8002392:	4618      	mov	r0, r3
 8002394:	f00c fe0b 	bl	800efae <strncmp>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]
        return true;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e06c      	b.n	8002492 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <parse_value+0x116>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20d      	bcs.n	80023e6 <parse_value+0x116>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b22      	cmp	r3, #34	; 0x22
 80023d8:	d105      	bne.n	80023e6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fb25 	bl	8001a2c <parse_string>
 80023e2:	4603      	mov	r3, r0
 80023e4:	e055      	b.n	8002492 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <parse_value+0x164>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d21d      	bcs.n	8002434 <parse_value+0x164>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b2d      	cmp	r3, #45	; 0x2d
 8002406:	d00f      	beq.n	8002428 <parse_value+0x158>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b2f      	cmp	r3, #47	; 0x2f
 8002416:	d90d      	bls.n	8002434 <parse_value+0x164>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b39      	cmp	r3, #57	; 0x39
 8002426:	d805      	bhi.n	8002434 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fef4 	bl	8001218 <parse_number>
 8002430:	4603      	mov	r3, r0
 8002432:	e02e      	b.n	8002492 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d013      	beq.n	8002462 <parse_value+0x192>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20d      	bcs.n	8002462 <parse_value+0x192>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b5b      	cmp	r3, #91	; 0x5b
 8002454:	d105      	bne.n	8002462 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f909 	bl	8002670 <parse_array>
 800245e:	4603      	mov	r3, r0
 8002460:	e017      	b.n	8002492 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <parse_value+0x1c0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d20d      	bcs.n	8002490 <parse_value+0x1c0>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b7b      	cmp	r3, #123	; 0x7b
 8002482:	d105      	bne.n	8002490 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa3c 	bl	8002904 <parse_object>
 800248c:	4603      	mov	r3, r0
 800248e:	e000      	b.n	8002492 <parse_value+0x1c2>
    }

    return false;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	08011934 	.word	0x08011934
 80024a0:	08011964 	.word	0x08011964
 80024a4:	0801196c 	.word	0x0801196c

080024a8 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <print_value+0x1a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <print_value+0x1e>
    {
        return false;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e0c9      	b.n	800265a <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	f000 808e 	beq.w	80025ee <print_value+0x146>
 80024d2:	2b80      	cmp	r3, #128	; 0x80
 80024d4:	f300 80c0 	bgt.w	8002658 <print_value+0x1b0>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	dc49      	bgt.n	8002570 <print_value+0xc8>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f340 80bb 	ble.w	8002658 <print_value+0x1b0>
 80024e2:	3b01      	subs	r3, #1
 80024e4:	2b1f      	cmp	r3, #31
 80024e6:	f200 80b7 	bhi.w	8002658 <print_value+0x1b0>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <print_value+0x48>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	0800259b 	.word	0x0800259b
 80024f4:	080025bf 	.word	0x080025bf
 80024f8:	08002659 	.word	0x08002659
 80024fc:	08002577 	.word	0x08002577
 8002500:	08002659 	.word	0x08002659
 8002504:	08002659 	.word	0x08002659
 8002508:	08002659 	.word	0x08002659
 800250c:	080025e3 	.word	0x080025e3
 8002510:	08002659 	.word	0x08002659
 8002514:	08002659 	.word	0x08002659
 8002518:	08002659 	.word	0x08002659
 800251c:	08002659 	.word	0x08002659
 8002520:	08002659 	.word	0x08002659
 8002524:	08002659 	.word	0x08002659
 8002528:	08002659 	.word	0x08002659
 800252c:	08002635 	.word	0x08002635
 8002530:	08002659 	.word	0x08002659
 8002534:	08002659 	.word	0x08002659
 8002538:	08002659 	.word	0x08002659
 800253c:	08002659 	.word	0x08002659
 8002540:	08002659 	.word	0x08002659
 8002544:	08002659 	.word	0x08002659
 8002548:	08002659 	.word	0x08002659
 800254c:	08002659 	.word	0x08002659
 8002550:	08002659 	.word	0x08002659
 8002554:	08002659 	.word	0x08002659
 8002558:	08002659 	.word	0x08002659
 800255c:	08002659 	.word	0x08002659
 8002560:	08002659 	.word	0x08002659
 8002564:	08002659 	.word	0x08002659
 8002568:	08002659 	.word	0x08002659
 800256c:	08002641 	.word	0x08002641
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d06b      	beq.n	800264c <print_value+0x1a4>
 8002574:	e070      	b.n	8002658 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002576:	2105      	movs	r1, #5
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f7fe ff19 	bl	80013b0 <ensure>
 800257e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <print_value+0xe2>
            {
                return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e067      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a35      	ldr	r2, [pc, #212]	; (8002664 <print_value+0x1bc>)
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6018      	str	r0, [r3, #0]
 8002592:	7912      	ldrb	r2, [r2, #4]
 8002594:	711a      	strb	r2, [r3, #4]
            return true;
 8002596:	2301      	movs	r3, #1
 8002598:	e05f      	b.n	800265a <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800259a:	2106      	movs	r1, #6
 800259c:	6838      	ldr	r0, [r7, #0]
 800259e:	f7fe ff07 	bl	80013b0 <ensure>
 80025a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <print_value+0x106>
            {
                return false;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e055      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <print_value+0x1c0>)
 80025b2:	6810      	ldr	r0, [r2, #0]
 80025b4:	6018      	str	r0, [r3, #0]
 80025b6:	8892      	ldrh	r2, [r2, #4]
 80025b8:	809a      	strh	r2, [r3, #4]
            return true;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e04d      	b.n	800265a <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80025be:	2105      	movs	r1, #5
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f7fe fef5 	bl	80013b0 <ensure>
 80025c6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <print_value+0x12a>
            {
                return false;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e043      	b.n	800265a <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <print_value+0x1c4>)
 80025d6:	6810      	ldr	r0, [r2, #0]
 80025d8:	6018      	str	r0, [r3, #0]
 80025da:	7912      	ldrb	r2, [r2, #4]
 80025dc:	711a      	strb	r2, [r3, #4]
            return true;
 80025de:	2301      	movs	r3, #1
 80025e0:	e03b      	b.n	800265a <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe ffe7 	bl	80015b8 <print_number>
 80025ea:	4603      	mov	r3, r0
 80025ec:	e035      	b.n	800265a <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <print_value+0x156>
            {
                return false;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e02d      	b.n	800265a <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fdf6 	bl	80001f4 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	3301      	adds	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f7fe fecd 	bl	80013b0 <ensure>
 8002616:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <print_value+0x17a>
            {
                return false;
 800261e:	2300      	movs	r3, #0
 8002620:	e01b      	b.n	800265a <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4619      	mov	r1, r3
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f00c fdb3 	bl	800f196 <memcpy>
            return true;
 8002630:	2301      	movs	r3, #1
 8002632:	e012      	b.n	800265a <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fc6e 	bl	8001f18 <print_string>
 800263c:	4603      	mov	r3, r0
 800263e:	e00c      	b.n	800265a <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8d8 	bl	80027f8 <print_array>
 8002648:	4603      	mov	r3, r0
 800264a:	e006      	b.n	800265a <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa57 	bl	8002b02 <print_object>
 8002654:	4603      	mov	r3, r0
 8002656:	e000      	b.n	800265a <print_value+0x1b2>

        default:
            return false;
 8002658:	2300      	movs	r3, #0
    }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	08011934 	.word	0x08011934
 8002668:	08011964 	.word	0x08011964
 800266c:	0801196c 	.word	0x0801196c

08002670 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268a:	d301      	bcc.n	8002690 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800268c:	2300      	movs	r3, #0
 800268e:	e0af      	b.n	80027f0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b5b      	cmp	r3, #91	; 0x5b
 80026a8:	f040 8094 	bne.w	80027d4 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f7ff fc3e 	bl	8001f38 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <parse_array+0x6e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d207      	bcs.n	80026de <parse_array+0x6e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b5d      	cmp	r3, #93	; 0x5d
 80026dc:	d061      	beq.n	80027a2 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <parse_array+0x80>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d305      	bcc.n	80026fc <parse_array+0x8c>
    {
        input_buffer->offset--;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80026fa:	e072      	b.n	80027e2 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3310      	adds	r3, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd1c 	bl	8001148 <cJSON_New_Item>
 8002710:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05f      	beq.n	80027d8 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e007      	b.n	8002738 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	f7ff fbf8 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	6938      	ldr	r0, [r7, #16]
 800274c:	f7ff fdc0 	bl	80022d0 <parse_value>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d042      	beq.n	80027dc <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f7ff fbee 	bl	8001f38 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <parse_array+0x10e>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d207      	bcs.n	800277e <parse_array+0x10e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b2c      	cmp	r3, #44	; 0x2c
 800277c:	d0c3      	beq.n	8002706 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02d      	beq.n	80027e0 <parse_array+0x170>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d227      	bcs.n	80027e0 <parse_array+0x170>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b5d      	cmp	r3, #93	; 0x5d
 800279e:	d11f      	bne.n	80027e0 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027a0:	e000      	b.n	80027a4 <parse_array+0x134>
        goto success;
 80027a2:	bf00      	nop
    input_buffer->depth--;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <parse_array+0x14a>
        head->prev = current_item;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	60da      	str	r2, [r3, #12]
    item->child = head;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]

    return true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00d      	b.n	80027f0 <parse_array+0x180>
        goto fail;
 80027d4:	bf00      	nop
 80027d6:	e004      	b.n	80027e2 <parse_array+0x172>
            goto fail; /* allocation failure */
 80027d8:	bf00      	nop
 80027da:	e002      	b.n	80027e2 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <parse_array+0x172>
        goto fail; /* expected end of array */
 80027e0:	bf00      	nop

fail:
    if (head != NULL)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7fe fcc3 	bl	8001174 <cJSON_Delete>
    }

    return false;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <print_array+0x22>
    {
        return false;
 8002816:	2300      	movs	r3, #0
 8002818:	e070      	b.n	80028fc <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800281a:	2101      	movs	r1, #1
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f7fe fdc7 	bl	80013b0 <ensure>
 8002822:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <print_array+0x36>
    {
        return false;
 800282a:	2300      	movs	r3, #0
 800282c:	e066      	b.n	80028fc <print_array+0x104>
    }

    *output_pointer = '[';
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	225b      	movs	r2, #91	; 0x5b
 8002832:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002848:	e03d      	b.n	80028c6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	6938      	ldr	r0, [r7, #16]
 800284e:	f7ff fe2b 	bl	80024a8 <print_value>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <print_array+0x64>
        {
            return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e04f      	b.n	80028fc <print_array+0x104>
        }
        update_offset(output_buffer);
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f7fe fe41 	bl	80014e4 <update_offset>
        if (current_element->next)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d02a      	beq.n	80028c0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <print_array+0x7e>
 8002872:	2302      	movs	r3, #2
 8002874:	e000      	b.n	8002878 <print_array+0x80>
 8002876:	2301      	movs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	4619      	mov	r1, r3
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7fe fd95 	bl	80013b0 <ensure>
 8002886:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <print_array+0x9a>
            {
                return false;
 800288e:	2300      	movs	r3, #0
 8002890:	e034      	b.n	80028fc <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	617a      	str	r2, [r7, #20]
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	617a      	str	r2, [r7, #20]
 80028aa:	2220      	movs	r2, #32
 80028ac:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	441a      	add	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1be      	bne.n	800284a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80028cc:	2102      	movs	r1, #2
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f7fe fd6e 	bl	80013b0 <ensure>
 80028d4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <print_array+0xe8>
    {
        return false;
 80028dc:	2300      	movs	r3, #0
 80028de:	e00d      	b.n	80028fc <print_array+0x104>
    }
    *output_pointer++ = ']';
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	617a      	str	r2, [r7, #20]
 80028e6:	225d      	movs	r2, #93	; 0x5d
 80028e8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	60da      	str	r2, [r3, #12]

    return true;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291e:	d301      	bcc.n	8002924 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002920:	2300      	movs	r3, #0
 8002922:	e0ea      	b.n	8002afa <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80d0 	beq.w	8002ad6 <parse_object+0x1d2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	f080 80c9 	bcs.w	8002ad6 <parse_object+0x1d2>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b7b      	cmp	r3, #123	; 0x7b
 8002952:	f040 80c0 	bne.w	8002ad6 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f7ff fae9 	bl	8001f38 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <parse_object+0x86>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <parse_object+0x86>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b7d      	cmp	r3, #125	; 0x7d
 8002986:	f000 808d 	beq.w	8002aa4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <parse_object+0x98>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d305      	bcc.n	80029a8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	609a      	str	r2, [r3, #8]
        goto fail;
 80029a6:	e0a1      	b.n	8002aec <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	3310      	adds	r3, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fbc6 	bl	8001148 <cJSON_New_Item>
 80029bc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 808a 	beq.w	8002ada <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	e007      	b.n	80029e6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f7ff faa1 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f7ff f817 	bl	8001a2c <parse_string>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d06c      	beq.n	8002ade <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7ff fa97 	bl	8001f38 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d061      	beq.n	8002ae2 <parse_object+0x1de>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d25b      	bcs.n	8002ae2 <parse_object+0x1de>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b3a      	cmp	r3, #58	; 0x3a
 8002a38:	d153      	bne.n	8002ae2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f7ff fa77 	bl	8001f38 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	6938      	ldr	r0, [r7, #16]
 8002a4e:	f7ff fc3f 	bl	80022d0 <parse_value>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002a58:	6838      	ldr	r0, [r7, #0]
 8002a5a:	f7ff fa6d 	bl	8001f38 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <parse_object+0x17c>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <parse_object+0x17c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2c      	cmp	r3, #44	; 0x2c
 8002a7e:	d098      	beq.n	80029b2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d031      	beq.n	8002aea <parse_object+0x1e6>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d22b      	bcs.n	8002aea <parse_object+0x1e6>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b7d      	cmp	r3, #125	; 0x7d
 8002aa0:	d123      	bne.n	8002aea <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002aa2:	e000      	b.n	8002aa6 <parse_object+0x1a2>
        goto success; /* empty object */
 8002aa4:	bf00      	nop
    input_buffer->depth--;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <parse_object+0x1b8>
        head->prev = current_item;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]
    return true;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e011      	b.n	8002afa <parse_object+0x1f6>
        goto fail; /* not an object */
 8002ad6:	bf00      	nop
 8002ad8:	e008      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002ada:	bf00      	nop
 8002adc:	e006      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002ade:	bf00      	nop
 8002ae0:	e004      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002aea:	bf00      	nop

fail:
    if (head != NULL)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7fe fb3e 	bl	8001174 <cJSON_Delete>
    }

    return false;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <print_object+0x22>
    {
        return false;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e108      	b.n	8002d36 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <print_object+0x2e>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e000      	b.n	8002b32 <print_object+0x30>
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f7fe fc38 	bl	80013b0 <ensure>
 8002b40:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <print_object+0x4a>
    {
        return false;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e0f4      	b.n	8002d36 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	61fa      	str	r2, [r7, #28]
 8002b52:	227b      	movs	r2, #123	; 0x7b
 8002b54:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	220a      	movs	r2, #10
 8002b70:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	441a      	add	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002b7e:	e0a0      	b.n	8002cc2 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f7fe fc0e 	bl	80013b0 <ensure>
 8002b94:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <print_object+0x9e>
            {
                return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e0ca      	b.n	8002d36 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e007      	b.n	8002bb6 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	61fa      	str	r2, [r7, #28]
 8002bac:	2209      	movs	r2, #9
 8002bae:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3f2      	bcc.n	8002ba6 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	441a      	add	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f86f 	bl	8001cb8 <print_string_ptr>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <print_object+0xe2>
        {
            return false;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e0a8      	b.n	8002d36 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002be4:	6838      	ldr	r0, [r7, #0]
 8002be6:	f7fe fc7d 	bl	80014e4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <print_object+0xf4>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e000      	b.n	8002bf8 <print_object+0xf6>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	6838      	ldr	r0, [r7, #0]
 8002bfe:	f7fe fbd7 	bl	80013b0 <ensure>
 8002c02:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <print_object+0x10c>
        {
            return false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e093      	b.n	8002d36 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	223a      	movs	r2, #58	; 0x3a
 8002c16:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	2209      	movs	r2, #9
 8002c28:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	441a      	add	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7ff fc35 	bl	80024a8 <print_value>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <print_object+0x146>
        {
            return false;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e076      	b.n	8002d36 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f7fe fc4b 	bl	80014e4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <print_object+0x158>
 8002c56:	2201      	movs	r2, #1
 8002c58:	e000      	b.n	8002c5c <print_object+0x15a>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <print_object+0x166>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <print_object+0x168>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4619      	mov	r1, r3
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f7fe fb9b 	bl	80013b0 <ensure>
 8002c7a:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <print_object+0x184>
        {
            return false;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e057      	b.n	8002d36 <print_object+0x234>
        }
        if (current_item->next)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	61fa      	str	r2, [r7, #28]
 8002c94:	222c      	movs	r2, #44	; 0x2c
 8002c96:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	61fa      	str	r2, [r7, #28]
 8002ca6:	220a      	movs	r2, #10
 8002ca8:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af5b 	bne.w	8002b80 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <print_object+0x1d8>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	e000      	b.n	8002cdc <print_object+0x1da>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	f7fe fb66 	bl	80013b0 <ensure>
 8002ce4:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <print_object+0x1ee>
    {
        return false;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e022      	b.n	8002d36 <print_object+0x234>
    }
    if (output_buffer->format)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e007      	b.n	8002d0e <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	2209      	movs	r2, #9
 8002d06:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3f1      	bcc.n	8002cfe <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	61fa      	str	r2, [r7, #28]
 8002d20:	227d      	movs	r2, #125	; 0x7d
 8002d22:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	60da      	str	r2, [r3, #12]

    return true;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <get_object_item+0x1c>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <get_object_item+0x20>
    {
        return NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e033      	b.n	8002dc6 <get_object_item+0x88>
    }

    current_element = object->child;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d6a:	e002      	b.n	8002d72 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <get_object_item+0x74>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d018      	beq.n	8002db2 <get_object_item+0x74>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4619      	mov	r1, r3
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	f7fd fa2a 	bl	80001e0 <strcmp>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ec      	bne.n	8002d6c <get_object_item+0x2e>
 8002d92:	e00e      	b.n	8002db2 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <get_object_item+0x74>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4619      	mov	r1, r3
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7fe f93a 	bl	8001020 <case_insensitive_strcmp>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <get_object_item+0x82>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <get_object_item+0x86>
        return NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <get_object_item+0x88>
    }

    return current_element;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ffae 	bl	8002d3e <get_object_item>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	605a      	str	r2, [r3, #4]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <add_item_to_array+0x22>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <add_item_to_array+0x22>
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d101      	bne.n	8002e34 <add_item_to_array+0x26>
    {
        return false;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e01e      	b.n	8002e72 <add_item_to_array+0x64>
    }

    child = array->child;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00d      	b.n	8002e70 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ffc2 	bl	8002dec <suffix_object>
            array->child->prev = item;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <add_item_to_object+0x30>
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d101      	bne.n	8002ec4 <add_item_to_object+0x34>
    {
        return false;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e036      	b.n	8002f32 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	f7ff ffd5 	bl	8002e7a <cast_away_const>
 8002ed0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e00e      	b.n	8002efc <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f7fe f909 	bl	80010f8 <cJSON_strdup>
 8002ee6:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <add_item_to_object+0x62>
        {
            return false;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e01f      	b.n	8002f32 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002efa:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <add_item_to_object+0x8c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6a12      	ldr	r2, [r2, #32]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
    }

    item->string = new_key;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff ff6f 	bl	8002e0e <add_item_to_array>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002f4a:	ed97 0b00 	vldr	d0, [r7]
 8002f4e:	f000 f81b 	bl	8002f88 <cJSON_CreateNumber>
 8002f52:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002f54:	2300      	movs	r3, #0
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <cJSON_AddNumberToObject+0x44>)
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff96 	bl	8002e90 <add_item_to_object>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	e003      	b.n	8002f76 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7fe f900 	bl	8001174 <cJSON_Delete>
    return NULL;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000
 8002f84:	00000000 	.word	0x00000000

08002f88 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002f92:	481f      	ldr	r0, [pc, #124]	; (8003010 <cJSON_CreateNumber+0x88>)
 8002f94:	f7fe f8d8 	bl	8001148 <cJSON_New_Item>
 8002f98:	60f8      	str	r0, [r7, #12]
    if(item)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02c      	beq.n	8002ffa <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fac:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002fb0:	a315      	add	r3, pc, #84	; (adr r3, 8003008 <cJSON_CreateNumber+0x80>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fba:	f7fd fdbb 	bl	8000b34 <__aeabi_dcmpge>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	e015      	b.n	8002ffa <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <cJSON_CreateNumber+0x8c>)
 8002fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fd8:	f7fd fda2 	bl	8000b20 <__aeabi_dcmple>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	e006      	b.n	8002ffa <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8002fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff0:	f7fd fdca 	bl	8000b88 <__aeabi_d2iz>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f3af 8000 	nop.w
 8003008:	ffc00000 	.word	0xffc00000
 800300c:	41dfffff 	.word	0x41dfffff
 8003010:	20000000 	.word	0x20000000
 8003014:	c1e00000 	.word	0xc1e00000

08003018 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <cJSON_CreateObject+0x24>)
 8003020:	f7fe f892 	bl	8001148 <cJSON_New_Item>
 8003024:	6078      	str	r0, [r7, #4]
    if (item)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000000 	.word	0x20000000

08003040 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <cJSON_IsBool+0x12>
    {
        return false;
 800304e:	2300      	movs	r3, #0
 8003050:	e008      	b.n	8003064 <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <cJSON_IsNumber+0x12>
    {
        return false;
 800307e:	2300      	movs	r3, #0
 8003080:	e007      	b.n	8003092 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b08      	cmp	r3, #8
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <cJSON_IsObject+0x12>
    {
        return false;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e007      	b.n	80030c0 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <deserializeJSON>:
 * This function takes a JSON string and fills a GameInfo struct with the deserialized information.
 *
 * @param json_data The JSON data to be deserialized.
 * @param info Pointer to the GameInfo struct to store the deserialized information.
 */
void deserializeJSON(const char* json_data, struct GameInfo* info) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_data);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff f858 	bl	800218c <cJSON_Parse>
 80030dc:	6278      	str	r0, [r7, #36]	; 0x24

    // Who is JSON?

    if (root == NULL) {
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d079      	beq.n	80031d8 <deserializeJSON+0x10c>
        // Handle the error here, e.g., set default values or return.
        return;
    }

    cJSON *red_json = cJSON_GetObjectItem(root, "team1");
 80030e4:	493e      	ldr	r1, [pc, #248]	; (80031e0 <deserializeJSON+0x114>)
 80030e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e8:	f7ff fe71 	bl	8002dce <cJSON_GetObjectItem>
 80030ec:	6238      	str	r0, [r7, #32]
    cJSON *blue_json = cJSON_GetObjectItem(root, "team2");
 80030ee:	493d      	ldr	r1, [pc, #244]	; (80031e4 <deserializeJSON+0x118>)
 80030f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030f2:	f7ff fe6c 	bl	8002dce <cJSON_GetObjectItem>
 80030f6:	61f8      	str	r0, [r7, #28]
    cJSON *end_of_round_json = cJSON_GetObjectItem(root, "end_of_round");
 80030f8:	493b      	ldr	r1, [pc, #236]	; (80031e8 <deserializeJSON+0x11c>)
 80030fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030fc:	f7ff fe67 	bl	8002dce <cJSON_GetObjectItem>
 8003100:	61b8      	str	r0, [r7, #24]

    if (red_json && cJSON_IsObject(red_json)) {
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d029      	beq.n	800315c <deserializeJSON+0x90>
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f7ff ffc8 	bl	800309e <cJSON_IsObject>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <deserializeJSON+0x90>
        cJSON *score_json = cJSON_GetObjectItem(red_json, "score");
 8003114:	4935      	ldr	r1, [pc, #212]	; (80031ec <deserializeJSON+0x120>)
 8003116:	6a38      	ldr	r0, [r7, #32]
 8003118:	f7ff fe59 	bl	8002dce <cJSON_GetObjectItem>
 800311c:	6178      	str	r0, [r7, #20]
        cJSON *state_json = cJSON_GetObjectItem(red_json, "state");
 800311e:	4934      	ldr	r1, [pc, #208]	; (80031f0 <deserializeJSON+0x124>)
 8003120:	6a38      	ldr	r0, [r7, #32]
 8003122:	f7ff fe54 	bl	8002dce <cJSON_GetObjectItem>
 8003126:	6138      	str	r0, [r7, #16]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <deserializeJSON+0x76>
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff9e 	bl	8003070 <cJSON_IsNumber>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <deserializeJSON+0x76>
            info->red.score = score_json->valueint;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	601a      	str	r2, [r3, #0]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <deserializeJSON+0x90>
 8003148:	6938      	ldr	r0, [r7, #16]
 800314a:	f7ff ff91 	bl	8003070 <cJSON_IsNumber>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <deserializeJSON+0x90>
            info->red.state = state_json->valueint;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
        }
    }

    if (blue_json && cJSON_IsObject(blue_json)) {
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d029      	beq.n	80031b6 <deserializeJSON+0xea>
 8003162:	69f8      	ldr	r0, [r7, #28]
 8003164:	f7ff ff9b 	bl	800309e <cJSON_IsObject>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <deserializeJSON+0xea>
        cJSON *score_json = cJSON_GetObjectItem(blue_json, "score");
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <deserializeJSON+0x120>)
 8003170:	69f8      	ldr	r0, [r7, #28]
 8003172:	f7ff fe2c 	bl	8002dce <cJSON_GetObjectItem>
 8003176:	60f8      	str	r0, [r7, #12]
        cJSON *state_json = cJSON_GetObjectItem(blue_json, "state");
 8003178:	491d      	ldr	r1, [pc, #116]	; (80031f0 <deserializeJSON+0x124>)
 800317a:	69f8      	ldr	r0, [r7, #28]
 800317c:	f7ff fe27 	bl	8002dce <cJSON_GetObjectItem>
 8003180:	60b8      	str	r0, [r7, #8]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <deserializeJSON+0xd0>
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff71 	bl	8003070 <cJSON_IsNumber>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <deserializeJSON+0xd0>
            info->blue.score = score_json->valueint;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	609a      	str	r2, [r3, #8]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <deserializeJSON+0xea>
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	f7ff ff64 	bl	8003070 <cJSON_IsNumber>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <deserializeJSON+0xea>
            info->blue.state = state_json->valueint;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	60da      	str	r2, [r3, #12]
        }
    }
    if (end_of_round_json && cJSON_IsBool(end_of_round_json)) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <deserializeJSON+0x104>
 80031bc:	69b8      	ldr	r0, [r7, #24]
 80031be:	f7ff ff3f 	bl	8003040 <cJSON_IsBool>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <deserializeJSON+0x104>
        info->end_of_round = end_of_round_json->valueint;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	611a      	str	r2, [r3, #16]
    }

    cJSON_Delete(root);
 80031d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d2:	f7fd ffcf 	bl	8001174 <cJSON_Delete>
 80031d6:	e000      	b.n	80031da <deserializeJSON+0x10e>
        return;
 80031d8:	bf00      	nop
}
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08011974 	.word	0x08011974
 80031e4:	0801197c 	.word	0x0801197c
 80031e8:	08011984 	.word	0x08011984
 80031ec:	08011994 	.word	0x08011994
 80031f0:	0801199c 	.word	0x0801199c

080031f4 <serializeJSON>:
 * This function takes a broadcast packet and serializes it into a JSON and stores it in a char array.
 *
 * @param packet Pointer to he JSON data to be seralized.
 * @param data Pointer to the string storing the serialized JSON information.
 */
void* serializeJSON(BroadcastPacket* data, char* dst , uint32_t percentage){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

	 cJSON* json = cJSON_CreateObject();
 8003200:	f7ff ff0a 	bl	8003018 <cJSON_CreateObject>
 8003204:	6178      	str	r0, [r7, #20]

	    if (json == NULL) {
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <serializeJSON+0x1c>
//	        fprintf(stderr, "Failed to create JSON object.\n");
	        return NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	e03c      	b.n	800328a <serializeJSON+0x96>
	    }

	    cJSON_AddNumberToObject(json, "battery", percentage); // battery voltage
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd f98f 	bl	8000534 <__aeabi_ui2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	ec43 2b10 	vmov	d0, r2, r3
 800321e:	491d      	ldr	r1, [pc, #116]	; (8003294 <serializeJSON+0xa0>)
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f7ff fe8b 	bl	8002f3c <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team1d", data->redDeltaScore);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f982 	bl	8000534 <__aeabi_ui2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	ec43 2b10 	vmov	d0, r2, r3
 8003238:	4917      	ldr	r1, [pc, #92]	; (8003298 <serializeJSON+0xa4>)
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff fe7e 	bl	8002f3c <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team2d", data->blueDeltaScore);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f975 	bl	8000534 <__aeabi_ui2d>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	ec43 2b10 	vmov	d0, r2, r3
 8003252:	4912      	ldr	r1, [pc, #72]	; (800329c <serializeJSON+0xa8>)
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7ff fe71 	bl	8002f3c <cJSON_AddNumberToObject>

	    char* temp = cJSON_PrintUnformatted(json);
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff f828 	bl	80022b0 <cJSON_PrintUnformatted>
 8003260:	6138      	str	r0, [r7, #16]
	    strncat (temp, "\n", 2);
 8003262:	6938      	ldr	r0, [r7, #16]
 8003264:	f7fc ffc6 	bl	80001f4 <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	490b      	ldr	r1, [pc, #44]	; (80032a0 <serializeJSON+0xac>)
 8003272:	461a      	mov	r2, r3
 8003274:	460b      	mov	r3, r1
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	8013      	strh	r3, [r2, #0]
	    strcpy(dst, temp);
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	68b8      	ldr	r0, [r7, #8]
 800327e:	f00b ff82 	bl	800f186 <strcpy>
	    cJSON_Delete(json);
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7fd ff76 	bl	8001174 <cJSON_Delete>

	    return dst;
 8003288:	68bb      	ldr	r3, [r7, #8]


}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	080119a4 	.word	0x080119a4
 8003298:	080119ac 	.word	0x080119ac
 800329c:	080119b4 	.word	0x080119b4
 80032a0:	080119bc 	.word	0x080119bc

080032a4 <select_rfid_channel>:
/* USER CODE BEGIN 0 */

/**
 * channel index is 1 indexed, 1-12
 */
uint8_t select_rfid_channel(uint8_t channel_index) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]

	if (channel_index < 1 || channel_index > 12) {
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <select_rfid_channel+0x16>
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d901      	bls.n	80032be <select_rfid_channel+0x1a>
		return 1;  // Invalid switch index
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0d1      	b.n	8003462 <select_rfid_channel+0x1be>
	}

	// Set U2.4
	uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
	if (channel_index <= 4) {
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d80e      	bhi.n	80032e6 <select_rfid_channel+0x42>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ce:	4867      	ldr	r0, [pc, #412]	; (800346c <select_rfid_channel+0x1c8>)
 80032d0:	f003 fefa 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032da:	4864      	ldr	r0, [pc, #400]	; (800346c <select_rfid_channel+0x1c8>)
 80032dc:	f003 fef4 	bl	80070c8 <HAL_GPIO_WritePin>
		switch_refdes = 1;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e01f      	b.n	8003326 <select_rfid_channel+0x82>
	} else if (channel_index <= 8) {
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d80e      	bhi.n	800330a <select_rfid_channel+0x66>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 80032ec:	2201      	movs	r2, #1
 80032ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032f2:	485e      	ldr	r0, [pc, #376]	; (800346c <select_rfid_channel+0x1c8>)
 80032f4:	f003 fee8 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032fe:	485b      	ldr	r0, [pc, #364]	; (800346c <select_rfid_channel+0x1c8>)
 8003300:	f003 fee2 	bl	80070c8 <HAL_GPIO_WritePin>
		switch_refdes = 2;
 8003304:	2302      	movs	r3, #2
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e00d      	b.n	8003326 <select_rfid_channel+0x82>
	} else { // if channel_index <= 12
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 800330a:	2201      	movs	r2, #1
 800330c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003310:	4856      	ldr	r0, [pc, #344]	; (800346c <select_rfid_channel+0x1c8>)
 8003312:	f003 fed9 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331c:	4853      	ldr	r0, [pc, #332]	; (800346c <select_rfid_channel+0x1c8>)
 800331e:	f003 fed3 	bl	80070c8 <HAL_GPIO_WritePin>
		switch_refdes = 3;
 8003322:	2303      	movs	r3, #3
 8003324:	73fb      	strb	r3, [r7, #15]
	}

	// The pattern on each 2nd layer switch is the same, use multiplexing
	uint8_t V0 = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	73bb      	strb	r3, [r7, #14]
	uint8_t V1 = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	737b      	strb	r3, [r7, #13]
	if (channel_index % 4 == 0) {  // 4, 8, 12
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <select_rfid_channel+0xa0>
		V0 = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	737b      	strb	r3, [r7, #13]
 8003342:	e019      	b.n	8003378 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 1) {  // 1, 5, 9
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d104      	bne.n	800335a <select_rfid_channel+0xb6>
		V0 = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	737b      	strb	r3, [r7, #13]
 8003358:	e00e      	b.n	8003378 <select_rfid_channel+0xd4>
	} else if (channel_index % 4 == 2) {  // 2, 6, 10
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d104      	bne.n	8003370 <select_rfid_channel+0xcc>
		V0 = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	737b      	strb	r3, [r7, #13]
 800336e:	e003      	b.n	8003378 <select_rfid_channel+0xd4>
	} else {  // if channel_index % 4 == 3  // 3, 7, 11
		V0 = 1;
 8003370:	2301      	movs	r3, #1
 8003372:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	737b      	strb	r3, [r7, #13]
	}

	// The other switches' V0/V1 are don't care, but set them to 0 anyways
	switch (switch_refdes) {
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d04c      	beq.n	8003418 <select_rfid_channel+0x174>
 800337e:	2b03      	cmp	r3, #3
 8003380:	dc6d      	bgt.n	800345e <select_rfid_channel+0x1ba>
 8003382:	2b01      	cmp	r3, #1
 8003384:	d002      	beq.n	800338c <select_rfid_channel+0xe8>
 8003386:	2b02      	cmp	r3, #2
 8003388:	d023      	beq.n	80033d2 <select_rfid_channel+0x12e>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
		break;
	default:
		break;
 800338a:	e068      	b.n	800345e <select_rfid_channel+0x1ba>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	461a      	mov	r2, r3
 8003390:	2104      	movs	r1, #4
 8003392:	4837      	ldr	r0, [pc, #220]	; (8003470 <select_rfid_channel+0x1cc>)
 8003394:	f003 fe98 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 8003398:	7b7b      	ldrb	r3, [r7, #13]
 800339a:	461a      	mov	r2, r3
 800339c:	2102      	movs	r1, #2
 800339e:	4834      	ldr	r0, [pc, #208]	; (8003470 <select_rfid_channel+0x1cc>)
 80033a0:	f003 fe92 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033aa:	4830      	ldr	r0, [pc, #192]	; (800346c <select_rfid_channel+0x1c8>)
 80033ac:	f003 fe8c 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033b6:	482d      	ldr	r0, [pc, #180]	; (800346c <select_rfid_channel+0x1c8>)
 80033b8:	f003 fe86 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	482b      	ldr	r0, [pc, #172]	; (8003470 <select_rfid_channel+0x1cc>)
 80033c2:	f003 fe81 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4829      	ldr	r0, [pc, #164]	; (8003470 <select_rfid_channel+0x1cc>)
 80033cc:	f003 fe7c 	bl	80070c8 <HAL_GPIO_WritePin>
		break;
 80033d0:	e046      	b.n	8003460 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2104      	movs	r1, #4
 80033d6:	4826      	ldr	r0, [pc, #152]	; (8003470 <select_rfid_channel+0x1cc>)
 80033d8:	f003 fe76 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 80033dc:	2200      	movs	r2, #0
 80033de:	2102      	movs	r1, #2
 80033e0:	4823      	ldr	r0, [pc, #140]	; (8003470 <select_rfid_channel+0x1cc>)
 80033e2:	f003 fe71 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ee:	481f      	ldr	r0, [pc, #124]	; (800346c <select_rfid_channel+0x1c8>)
 80033f0:	f003 fe6a 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 80033f4:	7b7b      	ldrb	r3, [r7, #13]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fc:	481b      	ldr	r0, [pc, #108]	; (800346c <select_rfid_channel+0x1c8>)
 80033fe:	f003 fe63 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	481a      	ldr	r0, [pc, #104]	; (8003470 <select_rfid_channel+0x1cc>)
 8003408:	f003 fe5e 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	4817      	ldr	r0, [pc, #92]	; (8003470 <select_rfid_channel+0x1cc>)
 8003412:	f003 fe59 	bl	80070c8 <HAL_GPIO_WritePin>
		break;
 8003416:	e023      	b.n	8003460 <select_rfid_channel+0x1bc>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2104      	movs	r1, #4
 800341c:	4814      	ldr	r0, [pc, #80]	; (8003470 <select_rfid_channel+0x1cc>)
 800341e:	f003 fe53 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2102      	movs	r1, #2
 8003426:	4812      	ldr	r0, [pc, #72]	; (8003470 <select_rfid_channel+0x1cc>)
 8003428:	f003 fe4e 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <select_rfid_channel+0x1c8>)
 8003434:	f003 fe48 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800343e:	480b      	ldr	r0, [pc, #44]	; (800346c <select_rfid_channel+0x1c8>)
 8003440:	f003 fe42 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 8003444:	7bbb      	ldrb	r3, [r7, #14]
 8003446:	461a      	mov	r2, r3
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	4809      	ldr	r0, [pc, #36]	; (8003470 <select_rfid_channel+0x1cc>)
 800344c:	f003 fe3c 	bl	80070c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8003450:	7b7b      	ldrb	r3, [r7, #13]
 8003452:	461a      	mov	r2, r3
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4806      	ldr	r0, [pc, #24]	; (8003470 <select_rfid_channel+0x1cc>)
 8003458:	f003 fe36 	bl	80070c8 <HAL_GPIO_WritePin>
		break;
 800345c:	e000      	b.n	8003460 <select_rfid_channel+0x1bc>
		break;
 800345e:	bf00      	nop
	}

	return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	48000400 	.word	0x48000400
 8003470:	48000800 	.word	0x48000800

08003474 <reader_irq_pulse>:

// UPDATE ALL THESE TO INCLUDE DELAYUNTIL or OSDELAY
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	2110      	movs	r1, #16
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <reader_irq_pulse+0x28>)
 800347e:	f003 fe23 	bl	80070c8 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(1)); // delay 1 ms
 8003482:	2001      	movs	r0, #1
 8003484:	f008 ff3c 	bl	800c300 <vTaskDelay>
	HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 8003488:	2201      	movs	r2, #1
 800348a:	2110      	movs	r1, #16
 800348c:	4803      	ldr	r0, [pc, #12]	; (800349c <reader_irq_pulse+0x28>)
 800348e:	f003 fe1b 	bl	80070c8 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(100)); // delay 100 ms
 8003492:	2064      	movs	r0, #100	; 0x64
 8003494:	f008 ff34 	bl	800c300 <vTaskDelay>

}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	48000800 	.word	0x48000800

080034a0 <reader_nss>:

void reader_nss(uint8_t enable) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN,
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	2110      	movs	r1, #16
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034be:	f003 fe03 	bl	80070c8 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <reader_tx>:

int reader_tx(uint8_t *data, size_t len) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <reader_tx+0x28>)
 80034e2:	f005 f8d8 	bl	8008696 <HAL_SPI_Transmit>
 80034e6:	4603      	mov	r3, r0
 80034e8:	60fb      	str	r3, [r7, #12]
	return ret;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000420 	.word	0x20000420

080034f8 <reader_rx>:

int reader_rx(uint8_t *data, size_t len) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b29a      	uxth	r2, r3
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <reader_rx+0x28>)
 800350e:	f005 fa30 	bl	8008972 <HAL_SPI_Receive>
 8003512:	4603      	mov	r3, r0
 8003514:	60fb      	str	r3, [r7, #12]
	return ret;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000420 	.word	0x20000420

08003524 <HAL_GPIO_EXTI_Callback>:

BaseType_t xHigherPriorityTaskWoken;

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
	static int errorCounter = 0;

    /* We have not woken a task at the start of the ISR. */
    xHigherPriorityTaskWoken = pdFALSE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

	if (pin == RFID_NIRQ_OUT_PIN) {
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353a:	d102      	bne.n	8003542 <HAL_GPIO_EXTI_Callback+0x1e>
		reader_handler.irq_flag = 1;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_GPIO_EXTI_Callback+0x30>)
 800353e:	2201      	movs	r2, #1
 8003540:	73da      	strb	r2, [r3, #15]
//			}
//
//			portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
//		}
	}
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	200008f0 	.word	0x200008f0
 8003554:	200008c8 	.word	0x200008c8

08003558 <st25_card_callback>:

void st25_card_callback(uint8_t *uid) {
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	//vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(uid[0])); // delay uid[0]
	;
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);  // toggle LED1
 8003574:	2120      	movs	r1, #32
 8003576:	4803      	ldr	r0, [pc, #12]	; (8003584 <HAL_UART_RxHalfCpltCallback+0x18>)
 8003578:	f003 fdbe 	bl	80070f8 <HAL_GPIO_TogglePin>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	48000400 	.word	0x48000400

08003588 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFF_SIZE - 1);
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	4905      	ldr	r1, [pc, #20]	; (80035a8 <HAL_UART_RxCpltCallback+0x20>)
 8003594:	4805      	ldr	r0, [pc, #20]	; (80035ac <HAL_UART_RxCpltCallback+0x24>)
 8003596:	f005 ffd9 	bl	800954c <HAL_UART_Receive_DMA>

  DMA_RX = 1;
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_UART_RxCpltCallback+0x28>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200006b0 	.word	0x200006b0
 80035ac:	20000484 	.word	0x20000484
 80035b0:	200008c4 	.word	0x200008c4

080035b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b8:	f001 fe02 	bl	80051c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035bc:	f000 f8bc 	bl	8003738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035c0:	f000 fa4c 	bl	8003a5c <MX_GPIO_Init>
  MX_DMA_Init();
 80035c4:	f000 fa10 	bl	80039e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035c8:	f000 f9de 	bl	8003988 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80035cc:	f000 f9ac 	bl	8003928 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80035d0:	f000 f904 	bl	80037dc <MX_ADC1_Init>
  MX_SPI1_Init();
 80035d4:	f000 f96a 	bl	80038ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Setup all protocol */
  reader_handler.protocol = ST25_PROTOCOL_15693;
 80035d8:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <main+0x11c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate
 80035de:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <main+0x11c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <main+0x11c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <main+0x11c>)
 80035ec:	2258      	movs	r2, #88	; 0x58
 80035ee:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <main+0x11c>)
 80035f2:	22d1      	movs	r2, #209	; 0xd1
 80035f4:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <main+0x11c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	73da      	strb	r2, [r3, #15]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <main+0x11c>)
 80035fe:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <main+0x120>)
 8003600:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 8003602:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <main+0x11c>)
 8003604:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <main+0x124>)
 8003606:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 8003608:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <main+0x11c>)
 800360a:	4a34      	ldr	r2, [pc, #208]	; (80036dc <main+0x128>)
 800360c:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 800360e:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <main+0x11c>)
 8003610:	4a33      	ldr	r2, [pc, #204]	; (80036e0 <main+0x12c>)
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 8003614:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <main+0x11c>)
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <main+0x130>)
 8003618:	615a      	str	r2, [r3, #20]

  BeanBag_setup();
 800361a:	f000 fca5 	bl	8003f68 <BeanBag_setup>

  HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFF_SIZE - 1);
 800361e:	22ff      	movs	r2, #255	; 0xff
 8003620:	4931      	ldr	r1, [pc, #196]	; (80036e8 <main+0x134>)
 8003622:	4832      	ldr	r0, [pc, #200]	; (80036ec <main+0x138>)
 8003624:	f005 ff92 	bl	800954c <HAL_UART_Receive_DMA>

  MX_USART1_UART_Init();
 8003628:	f000 f97e 	bl	8003928 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800362c:	f007 fa9c 	bl	800ab68 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BLESemaphore */
  BLESemaphoreHandle = osSemaphoreNew(1, 1, &BLESemaphore_attributes);
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <main+0x13c>)
 8003632:	2101      	movs	r1, #1
 8003634:	2001      	movs	r0, #1
 8003636:	f007 fc6a 	bl	800af0e <osSemaphoreNew>
 800363a:	4603      	mov	r3, r0
 800363c:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <main+0x140>)
 800363e:	6013      	str	r3, [r2, #0]
	//osSemaphoreAcquire(BLESemaphoreHandle, 0);
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of RFIDTimeout */
  RFIDTimeoutHandle = osTimerNew(RFIDTimeoutCallback, osTimerPeriodic, NULL, &RFIDTimeout_attributes);
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <main+0x144>)
 8003642:	2200      	movs	r2, #0
 8003644:	2101      	movs	r1, #1
 8003646:	482d      	ldr	r0, [pc, #180]	; (80036fc <main+0x148>)
 8003648:	f007 fb80 	bl	800ad4c <osTimerNew>
 800364c:	4603      	mov	r3, r0
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <main+0x14c>)
 8003650:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xRFIDEventQueue */
  xRFIDEventQueueHandle = osMessageQueueNew (16, sizeof(RFIDEvent_t), &xRFIDEventQueue_attributes);
 8003652:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <main+0x150>)
 8003654:	2101      	movs	r1, #1
 8003656:	2010      	movs	r0, #16
 8003658:	f007 fce2 	bl	800b020 <osMessageQueueNew>
 800365c:	4603      	mov	r3, r0
 800365e:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <main+0x154>)
 8003660:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BluetoothTXRX_T */
  BluetoothTXRX_THandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothTXRX_T_attributes);
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <main+0x158>)
 8003664:	2100      	movs	r1, #0
 8003666:	482a      	ldr	r0, [pc, #168]	; (8003710 <main+0x15c>)
 8003668:	f007 fac8 	bl	800abfc <osThreadNew>
 800366c:	4603      	mov	r3, r0
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <main+0x160>)
 8003670:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 8003672:	4a29      	ldr	r2, [pc, #164]	; (8003718 <main+0x164>)
 8003674:	2100      	movs	r1, #0
 8003676:	4829      	ldr	r0, [pc, #164]	; (800371c <main+0x168>)
 8003678:	f007 fac0 	bl	800abfc <osThreadNew>
 800367c:	4603      	mov	r3, r0
 800367e:	4a28      	ldr	r2, [pc, #160]	; (8003720 <main+0x16c>)
 8003680:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 8003682:	4a28      	ldr	r2, [pc, #160]	; (8003724 <main+0x170>)
 8003684:	2100      	movs	r1, #0
 8003686:	4828      	ldr	r0, [pc, #160]	; (8003728 <main+0x174>)
 8003688:	f007 fab8 	bl	800abfc <osThreadNew>
 800368c:	4603      	mov	r3, r0
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <main+0x178>)
 8003690:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */

	if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 8003692:	2102      	movs	r1, #2
 8003694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003698:	f003 fcfe 	bl	8007098 <HAL_GPIO_ReadPin>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d103      	bne.n	80036aa <main+0xf6>
		CBU_ID[3] = '1';
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <main+0x17c>)
 80036a4:	2231      	movs	r2, #49	; 0x31
 80036a6:	70da      	strb	r2, [r3, #3]
 80036a8:	e002      	b.n	80036b0 <main+0xfc>
	} else {
		CBU_ID[3] = '0';
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <main+0x17c>)
 80036ac:	2230      	movs	r2, #48	; 0x30
 80036ae:	70da      	strb	r2, [r3, #3]
	}

	ble.huart = &huart1;
 80036b0:	4b20      	ldr	r3, [pc, #128]	; (8003734 <main+0x180>)
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <main+0x138>)
 80036b4:	601a      	str	r2, [r3, #0]
	ble.cs_base = BLE_CS_PORT;
 80036b6:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <main+0x180>)
 80036b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80036bc:	605a      	str	r2, [r3, #4]
	ble.cs_pin = BLE_CS_PIN;
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <main+0x180>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	811a      	strh	r2, [r3, #8]
	ble.name = CBU_ID;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <main+0x180>)
 80036c6:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <main+0x17c>)
 80036c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80036ca:	f007 fa71 	bl	800abb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80036ce:	e7fe      	b.n	80036ce <main+0x11a>
 80036d0:	200008c8 	.word	0x200008c8
 80036d4:	080034a1 	.word	0x080034a1
 80036d8:	080034cd 	.word	0x080034cd
 80036dc:	080034f9 	.word	0x080034f9
 80036e0:	08003475 	.word	0x08003475
 80036e4:	08003559 	.word	0x08003559
 80036e8:	200006b0 	.word	0x200006b0
 80036ec:	20000484 	.word	0x20000484
 80036f0:	08011b08 	.word	0x08011b08
 80036f4:	20000690 	.word	0x20000690
 80036f8:	08011af8 	.word	0x08011af8
 80036fc:	08003dc9 	.word	0x08003dc9
 8003700:	2000068c 	.word	0x2000068c
 8003704:	08011ae0 	.word	0x08011ae0
 8003708:	20000688 	.word	0x20000688
 800370c:	08011a74 	.word	0x08011a74
 8003710:	08003bb1 	.word	0x08003bb1
 8003714:	2000067c 	.word	0x2000067c
 8003718:	08011a98 	.word	0x08011a98
 800371c:	08003ccd 	.word	0x08003ccd
 8003720:	20000680 	.word	0x20000680
 8003724:	08011abc 	.word	0x08011abc
 8003728:	08003d5d 	.word	0x08003d5d
 800372c:	20000684 	.word	0x20000684
 8003730:	20000018 	.word	0x20000018
 8003734:	20000694 	.word	0x20000694

08003738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b096      	sub	sp, #88	; 0x58
 800373c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	2244      	movs	r2, #68	; 0x44
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f00b fc29 	bl	800ef9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800374c:	463b      	mov	r3, r7
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800375a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800375e:	f003 fd0b 	bl	8007178 <HAL_PWREx_ControlVoltageScaling>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003768:	f000 fb3e 	bl	8003de8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800376c:	2302      	movs	r3, #2
 800376e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003776:	2340      	movs	r3, #64	; 0x40
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800377a:	2302      	movs	r3, #2
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800377e:	2302      	movs	r3, #2
 8003780:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003786:	230a      	movs	r3, #10
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800378a:	2307      	movs	r3, #7
 800378c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800378e:	2302      	movs	r3, #2
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003792:	2302      	movs	r3, #2
 8003794:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fd42 	bl	8007224 <HAL_RCC_OscConfig>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80037a6:	f000 fb1f 	bl	8003de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037aa:	230f      	movs	r3, #15
 80037ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ae:	2303      	movs	r3, #3
 80037b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037be:	463b      	mov	r3, r7
 80037c0:	2104      	movs	r1, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 f942 	bl	8007a4c <HAL_RCC_ClockConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037ce:	f000 fb0b 	bl	8003de8 <Error_Handler>
  }
}
 80037d2:	bf00      	nop
 80037d4:	3758      	adds	r7, #88	; 0x58
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037e2:	463b      	mov	r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
 80037f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <MX_ADC1_Init+0xc4>)
 80037f4:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <MX_ADC1_Init+0xc8>)
 80037f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <MX_ADC1_Init+0xc4>)
 80037fa:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80037fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003814:	2204      	movs	r2, #4
 8003816:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800381a:	2200      	movs	r2, #0
 800381c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003820:	2201      	movs	r2, #1
 8003822:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003826:	2201      	movs	r2, #1
 8003828:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003834:	2200      	movs	r2, #0
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800383a:	2200      	movs	r2, #0
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003848:	2200      	movs	r2, #0
 800384a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003856:	2204      	movs	r2, #4
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800385a:	4811      	ldr	r0, [pc, #68]	; (80038a0 <MX_ADC1_Init+0xc4>)
 800385c:	f001 ff2c 	bl	80056b8 <HAL_ADC_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003866:	f000 fabf 	bl	8003de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_ADC1_Init+0xcc>)
 800386c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800386e:	2306      	movs	r3, #6
 8003870:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003876:	237f      	movs	r3, #127	; 0x7f
 8003878:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800387a:	2304      	movs	r3, #4
 800387c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003882:	463b      	mov	r3, r7
 8003884:	4619      	mov	r1, r3
 8003886:	4806      	ldr	r0, [pc, #24]	; (80038a0 <MX_ADC1_Init+0xc4>)
 8003888:	f002 f904 	bl	8005a94 <HAL_ADC_ConfigChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8003892:	f000 faa9 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000370 	.word	0x20000370
 80038a4:	50040000 	.word	0x50040000
 80038a8:	cb840000 	.word	0xcb840000

080038ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <MX_SPI1_Init+0x74>)
 80038b2:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <MX_SPI1_Init+0x78>)
 80038b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <MX_SPI1_Init+0x74>)
 80038b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <MX_SPI1_Init+0x74>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <MX_SPI1_Init+0x74>)
 80038c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <MX_SPI1_Init+0x74>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <MX_SPI1_Init+0x74>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <MX_SPI1_Init+0x74>)
 80038da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <MX_SPI1_Init+0x74>)
 80038e2:	2230      	movs	r2, #48	; 0x30
 80038e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <MX_SPI1_Init+0x74>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <MX_SPI1_Init+0x74>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <MX_SPI1_Init+0x74>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <MX_SPI1_Init+0x74>)
 80038fa:	2207      	movs	r2, #7
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <MX_SPI1_Init+0x74>)
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <MX_SPI1_Init+0x74>)
 8003906:	2208      	movs	r2, #8
 8003908:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800390a:	4805      	ldr	r0, [pc, #20]	; (8003920 <MX_SPI1_Init+0x74>)
 800390c:	f004 fe20 	bl	8008550 <HAL_SPI_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003916:	f000 fa67 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000420 	.word	0x20000420
 8003924:	40013000 	.word	0x40013000

08003928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <MX_USART1_UART_Init+0x58>)
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <MX_USART1_UART_Init+0x5c>)
 8003930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <MX_USART1_UART_Init+0x58>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <MX_USART1_UART_Init+0x58>)
 800394e:	220c      	movs	r2, #12
 8003950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <MX_USART1_UART_Init+0x58>)
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003960:	2200      	movs	r2, #0
 8003962:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <MX_USART1_UART_Init+0x58>)
 8003966:	2200      	movs	r2, #0
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800396a:	4805      	ldr	r0, [pc, #20]	; (8003980 <MX_USART1_UART_Init+0x58>)
 800396c:	f005 fd00 	bl	8009370 <HAL_UART_Init>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003976:	f000 fa37 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000484 	.word	0x20000484
 8003984:	40013800 	.word	0x40013800

08003988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <MX_USART2_UART_Init+0x5c>)
 8003990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 8003994:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039ae:	220c      	movs	r2, #12
 80039b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <MX_USART2_UART_Init+0x58>)
 80039cc:	f005 fcd0 	bl	8009370 <HAL_UART_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039d6:	f000 fa07 	bl	8003de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000538 	.word	0x20000538
 80039e4:	40004400 	.word	0x40004400

080039e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <MX_DMA_Init+0x70>)
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <MX_DMA_Init+0x70>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6493      	str	r3, [r2, #72]	; 0x48
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <MX_DMA_Init+0x70>)
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <MX_DMA_Init+0x70>)
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <MX_DMA_Init+0x70>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	6493      	str	r3, [r2, #72]	; 0x48
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_DMA_Init+0x70>)
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2106      	movs	r1, #6
 8003a22:	200b      	movs	r0, #11
 8003a24:	f002 ff11 	bl	800684a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a28:	200b      	movs	r0, #11
 8003a2a:	f002 ff2a 	bl	8006882 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 6, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2106      	movs	r1, #6
 8003a32:	200f      	movs	r0, #15
 8003a34:	f002 ff09 	bl	800684a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003a38:	200f      	movs	r0, #15
 8003a3a:	f002 ff22 	bl	8006882 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2105      	movs	r1, #5
 8003a42:	2044      	movs	r0, #68	; 0x44
 8003a44:	f002 ff01 	bl	800684a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003a48:	2044      	movs	r0, #68	; 0x44
 8003a4a:	f002 ff1a 	bl	8006882 <HAL_NVIC_EnableIRQ>

}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	4a4a      	ldr	r2, [pc, #296]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a7e:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	4a44      	ldr	r2, [pc, #272]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a96:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <MX_GPIO_Init+0x144>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|NIRQ_IN_Pin|GPIO_PIN_6
 8003aba:	2200      	movs	r2, #0
 8003abc:	21d6      	movs	r1, #214	; 0xd6
 8003abe:	4839      	ldr	r0, [pc, #228]	; (8003ba4 <MX_GPIO_Init+0x148>)
 8003ac0:	f003 fb02 	bl	80070c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RFID_CS_GPIO_Port, SPI1_RFID_CS_Pin, GPIO_PIN_SET);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2110      	movs	r1, #16
 8003ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003acc:	f003 fafc 	bl	80070c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8003ad6:	4834      	ldr	r0, [pc, #208]	; (8003ba8 <MX_GPIO_Init+0x14c>)
 8003ad8:	f003 faf6 	bl	80070c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |LED0_Pin|LED1_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ae2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	4619      	mov	r1, r3
 8003af2:	482c      	ldr	r0, [pc, #176]	; (8003ba4 <MX_GPIO_Init+0x148>)
 8003af4:	f003 f956 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8003af8:	23c6      	movs	r3, #198	; 0xc6
 8003afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afc:	2301      	movs	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4825      	ldr	r0, [pc, #148]	; (8003ba4 <MX_GPIO_Init+0x148>)
 8003b10:	f003 f948 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RFID_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RFID_CS_Pin;
 8003b14:	2310      	movs	r3, #16
 8003b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b20:	2303      	movs	r3, #3
 8003b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2e:	f003 f939 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_IN_Pin */
  GPIO_InitStruct.Pin = NIRQ_IN_Pin;
 8003b32:	2310      	movs	r3, #16
 8003b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b36:	2301      	movs	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NIRQ_IN_GPIO_Port, &GPIO_InitStruct);
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	4619      	mov	r1, r3
 8003b48:	4816      	ldr	r0, [pc, #88]	; (8003ba4 <MX_GPIO_Init+0x148>)
 8003b4a:	f003 f92b 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           LED0_Pin LED1_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b4e:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003b52:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |LED0_Pin|LED1_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	4619      	mov	r1, r3
 8003b66:	4810      	ldr	r0, [pc, #64]	; (8003ba8 <MX_GPIO_Init+0x14c>)
 8003b68:	f003 f91c 	bl	8006da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIRQ_OUT_Pin */
  GPIO_InitStruct.Pin = NIRQ_OUT_Pin;
 8003b6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NIRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	4619      	mov	r1, r3
 8003b82:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <MX_GPIO_Init+0x14c>)
 8003b84:	f003 f90e 	bl	8006da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2106      	movs	r1, #6
 8003b8c:	2028      	movs	r0, #40	; 0x28
 8003b8e:	f002 fe5c 	bl	800684a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b92:	2028      	movs	r0, #40	; 0x28
 8003b94:	f002 fe75 	bl	8006882 <HAL_NVIC_EnableIRQ>

}
 8003b98:	bf00      	nop
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	48000800 	.word	0x48000800
 8003ba8:	48000400 	.word	0x48000400
 8003bac:	00000000 	.word	0x00000000

08003bb0 <StartBluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BROADCAST_PERIOD_MS);
 8003bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bbc:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8003bbe:	f008 fcef 	bl	800c5a0 <xTaskGetTickCount>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	60fb      	str	r3, [r7, #12]

	int ret;
	int count = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
	memset(rx_buffer, 0, RX_BUFF_SIZE);
 8003bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4835      	ldr	r0, [pc, #212]	; (8003ca8 <StartBluetoothTask+0xf8>)
 8003bd2:	f00b f9e4 	bl	800ef9e <memset>
	char *json_string = "{\"battery\": 10.56, \"team1d\": 0, \"team2d\": 3} \n";
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <StartBluetoothTask+0xfc>)
 8003bd8:	613b      	str	r3, [r7, #16]

	float batteryPercentage = 0;
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]

	for (;;)
	 //osDelay(BROADCAST_PERIOD_MS); // temp for commenting out the rest of the task
	 {
		if (DMA_RX != 0) {
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <StartBluetoothTask+0x100>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d050      	beq.n	8003c8a <StartBluetoothTask+0xda>
			//vPortEnterCritical();
			DMA_RX = 0;
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <StartBluetoothTask+0x100>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

			//ret = HAL_UART_Receive(&huart1, rx_buffer, RX_BUFF_SIZE, 600); // Sending in normal mode

			//if (ret == HAL_OK) {
				// deserialize packet
				deserializeJSON((char*) rx_buffer, &gameInfo);
 8003bee:	4931      	ldr	r1, [pc, #196]	; (8003cb4 <StartBluetoothTask+0x104>)
 8003bf0:	482d      	ldr	r0, [pc, #180]	; (8003ca8 <StartBluetoothTask+0xf8>)
 8003bf2:	f7ff fa6b 	bl	80030cc <deserializeJSON>
				// send reply packet
				//broadcastPacket.redDeltaScore = 2;
				broadcastPacket.blueDeltaScore = 3;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <StartBluetoothTask+0x108>)
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	609a      	str	r2, [r3, #8]

				// voltage to percentage
				batteryPercentage = broadcastPacket.batteryVoltage - 3.6;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <StartBluetoothTask+0x108>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fcb9 	bl	8000578 <__aeabi_f2d>
 8003c06:	a324      	add	r3, pc, #144	; (adr r3, 8003c98 <StartBluetoothTask+0xe8>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fb54 	bl	80002b8 <__aeabi_dsub>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7fc fffe 	bl	8000c18 <__aeabi_d2f>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	61fb      	str	r3, [r7, #28]
				batteryPercentage /= .024;
 8003c20:	69f8      	ldr	r0, [r7, #28]
 8003c22:	f7fc fca9 	bl	8000578 <__aeabi_f2d>
 8003c26:	a31e      	add	r3, pc, #120	; (adr r3, 8003ca0 <StartBluetoothTask+0xf0>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc fe26 	bl	800087c <__aeabi_ddiv>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	f7fc ffee 	bl	8000c18 <__aeabi_d2f>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	61fb      	str	r3, [r7, #28]
				if (batteryPercentage > 100) batteryPercentage = 100;
 8003c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c44:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003cbc <StartBluetoothTask+0x10c>
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	dd01      	ble.n	8003c56 <StartBluetoothTask+0xa6>
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <StartBluetoothTask+0x110>)
 8003c54:	61fb      	str	r3, [r7, #28]
				if (batteryPercentage < 0) batteryPercentage = 0;
 8003c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c62:	d502      	bpl.n	8003c6a <StartBluetoothTask+0xba>
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]

				serializeJSON(&broadcastPacket, (char*) tx_buffer, (uint32_t)batteryPercentage);
 8003c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c72:	ee17 2a90 	vmov	r2, s15
 8003c76:	4913      	ldr	r1, [pc, #76]	; (8003cc4 <StartBluetoothTask+0x114>)
 8003c78:	480f      	ldr	r0, [pc, #60]	; (8003cb8 <StartBluetoothTask+0x108>)
 8003c7a:	f7ff fabb 	bl	80031f4 <serializeJSON>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) tx_buffer, TX_BUFF_SIZE);
 8003c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c82:	4910      	ldr	r1, [pc, #64]	; (8003cc4 <StartBluetoothTask+0x114>)
 8003c84:	4810      	ldr	r0, [pc, #64]	; (8003cc8 <StartBluetoothTask+0x118>)
 8003c86:	f005 fbd1 	bl	800942c <HAL_UART_Transmit_DMA>
//				osTimerStart(RFIDTimeoutHandle, pdMS_TO_TICKS(TIMER_PERIOD_MS));

			//vPortExitCritical();
			//}
		}
		vTaskDelayUntil(&xLastWakeTime, period);
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f008 fab7 	bl	800c204 <vTaskDelayUntil>
		if (DMA_RX != 0) {
 8003c96:	e7a3      	b.n	8003be0 <StartBluetoothTask+0x30>
 8003c98:	cccccccd 	.word	0xcccccccd
 8003c9c:	400ccccc 	.word	0x400ccccc
 8003ca0:	bc6a7efa 	.word	0xbc6a7efa
 8003ca4:	3f989374 	.word	0x3f989374
 8003ca8:	200006b0 	.word	0x200006b0
 8003cac:	08011a1c 	.word	0x08011a1c
 8003cb0:	200008c4 	.word	0x200008c4
 8003cb4:	200008b0 	.word	0x200008b0
 8003cb8:	2000000c 	.word	0x2000000c
 8003cbc:	42c80000 	.word	0x42c80000
 8003cc0:	42c80000 	.word	0x42c80000
 8003cc4:	200007b0 	.word	0x200007b0
 8003cc8:	20000484 	.word	0x20000484

08003ccc <StartRFIDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */
	st25r95_init((st25r95_handle *)&reader_handler);
 8003cd4:	481d      	ldr	r0, [pc, #116]	; (8003d4c <StartRFIDTask+0x80>)
 8003cd6:	f000 fab7 	bl	8004248 <st25r95_init>
	st25r95_calibrate((st25r95_handle *)&reader_handler);
 8003cda:	481c      	ldr	r0, [pc, #112]	; (8003d4c <StartRFIDTask+0x80>)
 8003cdc:	f000 fe30 	bl	8004940 <st25r95_calibrate>

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 8003ce0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ce4:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8003ce6:	f008 fc5b 	bl	800c5a0 <xTaskGetTickCount>
 8003cea:	6138      	str	r0, [r7, #16]

	uint8_t redRawScore = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
	uint8_t blueRawScore = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73bb      	strb	r3, [r7, #14]

	uint8_t tx_buf[2];

	//xQueueReset(xRFIDEventQueueHandle);

	st25r95_idle((st25r95_handle *)&reader_handler);
 8003cf4:	4815      	ldr	r0, [pc, #84]	; (8003d4c <StartRFIDTask+0x80>)
 8003cf6:	f000 fdcd 	bl	8004894 <st25r95_idle>

	osTimerStart(RFIDTimeoutHandle, pdMS_TO_TICKS(TIMER_PERIOD_MS));
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <StartRFIDTask+0x84>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	23fa      	movs	r3, #250	; 0xfa
 8003d00:	4619      	mov	r1, r3
 8003d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4912      	ldr	r1, [pc, #72]	; (8003d54 <StartRFIDTask+0x88>)
 8003d0c:	fba1 1303 	umull	r1, r3, r1, r3
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f007 f895 	bl	800ae44 <osTimerStart>

	/* Infinite loop */
	for (;;)
//	osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
			{
		RFID_readArray(&reader_handler);
 8003d1a:	480c      	ldr	r0, [pc, #48]	; (8003d4c <StartRFIDTask+0x80>)
 8003d1c:	f000 f898 	bl	8003e50 <RFID_readArray>

		calculateRawScore(&redRawScore, false);
 8003d20:	f107 030f 	add.w	r3, r7, #15
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f864 	bl	8003df4 <calculateRawScore>
		calculateRawScore(&blueRawScore, true); // true to move BagStatus pointer to the Blue section
 8003d2c:	f107 030e 	add.w	r3, r7, #14
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f85e 	bl	8003df4 <calculateRawScore>

		broadcastPacket.redDeltaScore = redRawScore;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <StartRFIDTask+0x8c>)
 8003d3e:	605a      	str	r2, [r3, #4]
		broadcastPacket.blueDeltaScore = blueRawScore;
 8003d40:	7bbb      	ldrb	r3, [r7, #14]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <StartRFIDTask+0x8c>)
 8003d46:	609a      	str	r2, [r3, #8]
		RFID_readArray(&reader_handler);
 8003d48:	e7e7      	b.n	8003d1a <StartRFIDTask+0x4e>
 8003d4a:	bf00      	nop
 8003d4c:	200008c8 	.word	0x200008c8
 8003d50:	2000068c 	.word	0x2000068c
 8003d54:	10624dd3 	.word	0x10624dd3
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <StartBatteryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8003d64:	f247 5330 	movw	r3, #30000	; 0x7530
 8003d68:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003d6a:	f008 fc19 	bl	800c5a0 <xTaskGetTickCount>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	613b      	str	r3, [r7, #16]

	uint32_t rawVBat = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
	float VBat = 0.0;
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
	uint32_t VBat_conv = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003d80:	217f      	movs	r1, #127	; 0x7f
 8003d82:	480e      	ldr	r0, [pc, #56]	; (8003dbc <StartBatteryTask+0x60>)
 8003d84:	f002 fc26 	bl	80065d4 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &rawVBat, 1);
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4619      	mov	r1, r3
 8003d90:	480a      	ldr	r0, [pc, #40]	; (8003dbc <StartBatteryTask+0x60>)
 8003d92:	f001 fddd 	bl	8005950 <HAL_ADC_Start_DMA>
	uint8_t tx_buf[4];

	/* Infinite loop */
	for (;;) {

		broadcastPacket.batteryVoltage = (float)rawVBat * VBAT_CONVERSION_FACTOR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003dc0 <StartBatteryTask+0x64>
 8003da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <StartBatteryTask+0x68>)
 8003daa:	edc3 7a00 	vstr	s15, [r3]

		vTaskDelayUntil(&xLastWakeTime, period);
 8003dae:	f107 0310 	add.w	r3, r7, #16
 8003db2:	69f9      	ldr	r1, [r7, #28]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f008 fa25 	bl	800c204 <vTaskDelayUntil>
		broadcastPacket.batteryVoltage = (float)rawVBat * VBAT_CONVERSION_FACTOR;
 8003dba:	e7ec      	b.n	8003d96 <StartBatteryTask+0x3a>
 8003dbc:	20000370 	.word	0x20000370
 8003dc0:	3b1e6666 	.word	0x3b1e6666
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <RFIDTimeoutCallback>:
  /* USER CODE END StartBatteryTask */
}

/* RFIDTimeoutCallback function */
void RFIDTimeoutCallback(void *argument)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
//		errorCounter++;
//	}
//
//	portYIELD_FROM_ISR (xHigherPriorityTaskWoken);

	reader_handler.timeout_flag = 1;
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <RFIDTimeoutCallback+0x1c>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	741a      	strb	r2, [r3, #16]
  /* USER CODE END RFIDTimeoutCallback */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	200008c8 	.word	0x200008c8

08003de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dec:	b672      	cpsid	i
}
 8003dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003df0:	e7fe      	b.n	8003df0 <Error_Handler+0x8>
	...

08003df4 <calculateRawScore>:
static const uint8_t UID_ZERO_CMP[UID_SIZE]; // auto-initialized to zero TODO test lol

#define RFID_NIRQ_OUT_PORT GPIOB
#define RFID_NIRQ_OUT_PIN GPIO_PIN_11

void calculateRawScore(uint8_t* teamRawScore, bool isBlue) {
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <calculateRawScore+0x58>)
 8003e02:	60fb      	str	r3, [r7, #12]

	// Shift pointer to blue section of array
	if (isBlue) bag_p += 4;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <calculateRawScore+0x1c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]

	// Score count routine
	for (int i = 0; i < 4; ++i) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	e00c      	b.n	8003e36 <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	440b      	add	r3, r1
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	ddef      	ble.n	8003e1c <calculateRawScore+0x28>
	}

}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	200008f4 	.word	0x200008f4

08003e50 <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(st25r95_handle *handler) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	static int errorCounter = 0;

	BeanBag_clearDetected();
 8003e58:	f000 f88c 	bl	8003f74 <BeanBag_clearDetected>
	//BeanBag_clearScore();

	RFIDEvent_t xRFIDEvent;

	for(uint8_t ant_number = 1; ant_number <= 12; ant_number++){
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e069      	b.n	8003f36 <RFID_readArray+0xe6>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <RFID_readArray+0xf8>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d15c      	bne.n	8003f2e <RFID_readArray+0xde>

		select_rfid_channel(ant_number);
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fa14 	bl	80032a4 <select_rfid_channel>

		vTaskDelay(10);
 8003e7c:	200a      	movs	r0, #10
 8003e7e:	f008 fa3f 	bl	800c300 <vTaskDelay>
//			BaseType_t ret = xQueueReceive( xRFIDEventQueueHandle, &xRFIDEvent, osWaitForever );
//			if (ret != pdTRUE) {
//				errorCounter++;
//			}

			if (handler->irq_flag) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7bdb      	ldrb	r3, [r3, #15]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d028      	beq.n	8003ede <RFID_readArray+0x8e>

				memset(handler->uid, 0, sizeof(handler->uid)); // clear uid
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3307      	adds	r3, #7
 8003e90:	2208      	movs	r2, #8
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00b f882 	bl	800ef9e <memset>

				st25r95_service(handler);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f93e 	bl	800411c <st25r95_service>

				if ( memcmp(handler->uid, UID_ZERO_CMP, sizeof(handler->uid)) ) { // check for non-zero uid, returns 0 if same
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4929      	ldr	r1, [pc, #164]	; (8003f4c <RFID_readArray+0xfc>)
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00b f868 	bl	800ef7e <memcmp>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d014      	beq.n	8003ede <RFID_readArray+0x8e>
					int bag_number = BeanBag_findIDinArray(handler);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f87d 	bl	8003fb4 <BeanBag_findIDinArray>
 8003eba:	60b8      	str	r0, [r7, #8]

					if (bag_number == -1) continue; // UID not found
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d030      	beq.n	8003f26 <RFID_readArray+0xd6>
					else if (bag_number == -2) continue; // Bag already scanned
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f113 0f02 	cmn.w	r3, #2
 8003eca:	d02e      	beq.n	8003f2a <RFID_readArray+0xda>

					BagStatus[bag_number] = ANT_POINTS_MAP[ant_number - 1];
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <RFID_readArray+0x100>)
 8003ed2:	5cd1      	ldrb	r1, [r2, r3]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <RFID_readArray+0x104>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4413      	add	r3, r2
 8003eda:	460a      	mov	r2, r1
 8003edc:	701a      	strb	r2, [r3, #0]
				}

			}

			if (handler->timeout_flag) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7c1b      	ldrb	r3, [r3, #16]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0cc      	beq.n	8003e82 <RFID_readArray+0x32>
				handler->timeout_flag = 0;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	741a      	strb	r2, [r3, #16]

				HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2110      	movs	r1, #16
 8003ef2:	4819      	ldr	r0, [pc, #100]	; (8003f58 <RFID_readArray+0x108>)
 8003ef4:	f003 f8e8 	bl	80070c8 <HAL_GPIO_WritePin>

				osTimerStop(RFIDTimeoutHandle);
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <RFID_readArray+0x10c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f006 ffcf 	bl	800aea0 <osTimerStop>
				osTimerStart(RFIDTimeoutHandle, pdMS_TO_TICKS(TIMER_PERIOD_MS));
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <RFID_readArray+0x10c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <RFID_readArray+0x110>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4913      	ldr	r1, [pc, #76]	; (8003f64 <RFID_readArray+0x114>)
 8003f16:	fba1 1303 	umull	r1, r3, r1, r3
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f006 ff90 	bl	800ae44 <osTimerStart>

				break;
 8003f24:	e004      	b.n	8003f30 <RFID_readArray+0xe0>
					if (bag_number == -1) continue; // UID not found
 8003f26:	bf00      	nop
 8003f28:	e7ab      	b.n	8003e82 <RFID_readArray+0x32>
					else if (bag_number == -2) continue; // Bag already scanned
 8003f2a:	bf00      	nop
			if (handler->irq_flag) {
 8003f2c:	e7a9      	b.n	8003e82 <RFID_readArray+0x32>
		if (!ANT_ENABLED[ant_number-1]) continue; // ANT not plugged in, don't waste your time
 8003f2e:	bf00      	nop
	for(uint8_t ant_number = 1; ant_number <= 12; ant_number++){
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	3301      	adds	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d992      	bls.n	8003e62 <RFID_readArray+0x12>
//
//		    	break;
//		    }
		}
	}
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	08011b1c 	.word	0x08011b1c
 8003f4c:	08011b34 	.word	0x08011b34
 8003f50:	08011b28 	.word	0x08011b28
 8003f54:	200008f4 	.word	0x200008f4
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	2000068c 	.word	0x2000068c
 8003f60:	08011b18 	.word	0x08011b18
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <BeanBag_setup>:

void BeanBag_setup(void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

	BeanBag_clearDetected();
 8003f6c:	f000 f802 	bl	8003f74 <BeanBag_clearDetected>

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <BeanBag_clearDetected>:

void BeanBag_clearDetected(void) {
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_BAGS; ++i) {
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	e00c      	b.n	8003f9a <BeanBag_clearDetected+0x26>
		BagInfo[i].detected = false;
 8003f80:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <BeanBag_clearDetected+0x3c>)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3320      	adds	r3, #32
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BAGS; ++i) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3301      	adds	r3, #1
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b07      	cmp	r3, #7
 8003f9e:	ddef      	ble.n	8003f80 <BeanBag_clearDetected+0xc>
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000020 	.word	0x20000020

08003fb4 <BeanBag_findIDinArray>:
	for (int i = 0; i < NUM_BAGS; ++i) {
		BagStatus[i] = 0;
	}
}

int BeanBag_findIDinArray(st25r95_handle *handler) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

	uint64_t uid = 0;
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memcpy(&uid, handler->uid, UID_SIZE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1dd9      	adds	r1, r3, #7
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00b f8df 	bl	800f196 <memcpy>

	int bag_number = -1;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fdc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < NUM_BAGS; ++i) {
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e044      	b.n	800406e <BeanBag_findIDinArray+0xba>
		if (uid == BagInfo[i].uid1 || uid == BagInfo[i].uid2 || uid == BagInfo[i].uid3 || uid == BagInfo[i].uid4) {
 8003fe4:	4935      	ldr	r1, [pc, #212]	; (80040bc <BeanBag_findIDinArray+0x108>)
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	bf08      	it	eq
 8003ffe:	4290      	cmpeq	r0, r2
 8004000:	d02f      	beq.n	8004062 <BeanBag_findIDinArray+0xae>
 8004002:	492e      	ldr	r1, [pc, #184]	; (80040bc <BeanBag_findIDinArray+0x108>)
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	3308      	adds	r3, #8
 8004012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800401a:	4299      	cmp	r1, r3
 800401c:	bf08      	it	eq
 800401e:	4290      	cmpeq	r0, r2
 8004020:	d01f      	beq.n	8004062 <BeanBag_findIDinArray+0xae>
 8004022:	4926      	ldr	r1, [pc, #152]	; (80040bc <BeanBag_findIDinArray+0x108>)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3310      	adds	r3, #16
 8004032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800403a:	4299      	cmp	r1, r3
 800403c:	bf08      	it	eq
 800403e:	4290      	cmpeq	r0, r2
 8004040:	d00f      	beq.n	8004062 <BeanBag_findIDinArray+0xae>
 8004042:	491e      	ldr	r1, [pc, #120]	; (80040bc <BeanBag_findIDinArray+0x108>)
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	3318      	adds	r3, #24
 8004052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800405a:	4299      	cmp	r1, r3
 800405c:	bf08      	it	eq
 800405e:	4290      	cmpeq	r0, r2
 8004060:	d102      	bne.n	8004068 <BeanBag_findIDinArray+0xb4>
			bag_number = i;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	617b      	str	r3, [r7, #20]
			break;
 8004066:	e005      	b.n	8004074 <BeanBag_findIDinArray+0xc0>
	for (int i = 0; i < NUM_BAGS; ++i) {
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	3301      	adds	r3, #1
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b07      	cmp	r3, #7
 8004072:	ddb7      	ble.n	8003fe4 <BeanBag_findIDinArray+0x30>
		}
	}

	if (bag_number == -1) { // UID not mapped to a bag
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d102      	bne.n	8004082 <BeanBag_findIDinArray+0xce>
		return -1;
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	e018      	b.n	80040b4 <BeanBag_findIDinArray+0x100>

	} else if (BagInfo[bag_number].detected) { // return bag already detected status code
 8004082:	490e      	ldr	r1, [pc, #56]	; (80040bc <BeanBag_findIDinArray+0x108>)
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	3320      	adds	r3, #32
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <BeanBag_findIDinArray+0xea>
		return -2;
 8004098:	f06f 0301 	mvn.w	r3, #1
 800409c:	e00a      	b.n	80040b4 <BeanBag_findIDinArray+0x100>

	} else { // valid UID, not already detected
		BagInfo[bag_number].detected = true;
 800409e:	4907      	ldr	r1, [pc, #28]	; (80040bc <BeanBag_findIDinArray+0x108>)
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	3320      	adds	r3, #32
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
		return bag_number;
 80040b2:	697b      	ldr	r3, [r7, #20]
	}

}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000020 	.word	0x20000020

080040c0 <st25r95_spi_tx>:
volatile static size_t tx_len;

#define RFID_NIRQ_OUT_PORT GPIOB
#define RFID_NIRQ_OUT_PIN GPIO_PIN_11

void st25r95_spi_tx(st25r95_handle *handler) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <st25r95_spi_tx+0x24>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4805      	ldr	r0, [pc, #20]	; (80040e8 <st25r95_spi_tx+0x28>)
 80040d4:	4798      	blx	r3
  tx_len = 0;
 80040d6:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <st25r95_spi_tx+0x24>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200009fc 	.word	0x200009fc
 80040e8:	200008fc 	.word	0x200008fc

080040ec <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <st25r95_spi_byte+0x28>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 80040fe:	4a06      	ldr	r2, [pc, #24]	; (8004118 <st25r95_spi_byte+0x2c>)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ffdb 	bl	80040c0 <st25r95_spi_tx>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200009fc 	.word	0x200009fc
 8004118:	200008fc 	.word	0x200008fc

0800411c <st25r95_service>:

void st25r95_service(st25r95_handle *handler) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  if (handler->irq_flag == 1) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7bdb      	ldrb	r3, [r3, #15]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d145      	bne.n	80041ba <st25r95_service+0x9e>
    handler->irq_flag = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	73da      	strb	r2, [r3, #15]
    if (handler->state == ST25_STATE_IDLE) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d13e      	bne.n	80041ba <st25r95_service+0x9e>
      st25r95_init(handler);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f883 	bl	8004248 <st25r95_init>
      vTaskDelay(1);
 8004142:	2001      	movs	r0, #1
 8004144:	f008 f8dc 	bl	800c300 <vTaskDelay>
      if (handler->protocol == ST25_PROTOCOL_14443A
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d11c      	bne.n	800418a <st25r95_service+0x6e>
    		  && st25r95_14443A_detect(handler)) {
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f9d9 	bl	8004508 <st25r95_14443A_detect>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <st25r95_service+0x6e>
        handler->callback(handler->uid);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	3207      	adds	r2, #7
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 8004168:	2201      	movs	r2, #1
 800416a:	2110      	movs	r1, #16
 800416c:	4815      	ldr	r0, [pc, #84]	; (80041c4 <st25r95_service+0xa8>)
 800416e:	f002 ffab 	bl	80070c8 <HAL_GPIO_WritePin>
        for(volatile int i=0;i<10000; ++i);
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e002      	b.n	800417e <st25r95_service+0x62>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f242 720f 	movw	r2, #9999	; 0x270f
 8004184:	4293      	cmp	r3, r2
 8004186:	ddf7      	ble.n	8004178 <st25r95_service+0x5c>
 8004188:	e014      	b.n	80041b4 <st25r95_service+0x98>
      }
      else if (handler->protocol == ST25_PROTOCOL_15693
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d110      	bne.n	80041b4 <st25r95_service+0x98>
    		  && st25r95_15693_inventory1(handler)) {
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb34 	bl	8004800 <st25r95_15693_inventory1>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <st25r95_service+0x98>
        handler->callback(handler->uid);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	3207      	adds	r2, #7
 80041a6:	4610      	mov	r0, r2
 80041a8:	4798      	blx	r3
        HAL_GPIO_WritePin(GPIOB, 1 << 4, 1);
 80041aa:	2201      	movs	r2, #1
 80041ac:	2110      	movs	r1, #16
 80041ae:	4805      	ldr	r0, [pc, #20]	; (80041c4 <st25r95_service+0xa8>)
 80041b0:	f002 ff8a 	bl	80070c8 <HAL_GPIO_WritePin>
      } else {
    	//HAL_GPIO_WritePin(GPIOB, 1 << 4, 0);
      }
      st25r95_idle(handler);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb6d 	bl	8004894 <st25r95_idle>
    }

  }
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	48000400 	.word	0x48000400

080041c8 <st25r95_response>:

uint8_t *st25r95_response(st25r95_handle *handler) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 80041d0:	bf00      	nop
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7bdb      	ldrb	r3, [r3, #15]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0fa      	beq.n	80041d2 <st25r95_response+0xa>
  handler->irq_flag = 0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	73da      	strb	r2, [r3, #15]
  static uint8_t rx_data[256];
  handler->nss(1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2001      	movs	r0, #1
 80041e8:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 80041ea:	2102      	movs	r1, #2
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff7d 	bl	80040ec <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	2101      	movs	r1, #1
 80041f8:	4810      	ldr	r0, [pc, #64]	; (800423c <st25r95_response+0x74>)
 80041fa:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO)
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <st25r95_response+0x74>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b55      	cmp	r3, #85	; 0x55
 8004202:	d105      	bne.n	8004210 <st25r95_response+0x48>
  {
    handler->nss(0);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2000      	movs	r0, #0
 800420a:	4798      	blx	r3
    return rx_data;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <st25r95_response+0x74>)
 800420e:	e011      	b.n	8004234 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <st25r95_response+0x78>)
 8004216:	2101      	movs	r1, #1
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4808      	ldr	r0, [pc, #32]	; (8004244 <st25r95_response+0x7c>)
 8004222:	4a06      	ldr	r2, [pc, #24]	; (800423c <st25r95_response+0x74>)
 8004224:	7852      	ldrb	r2, [r2, #1]
 8004226:	4611      	mov	r1, r2
 8004228:	4798      	blx	r3
  handler->nss(0);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2000      	movs	r0, #0
 8004230:	4798      	blx	r3
  return rx_data;
 8004232:	4b02      	ldr	r3, [pc, #8]	; (800423c <st25r95_response+0x74>)
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000a00 	.word	0x20000a00
 8004240:	20000a01 	.word	0x20000a01
 8004244:	20000a02 	.word	0x20000a02

08004248 <st25r95_init>:
  handler->rx(rx_data + 2, *(rx_data + 1));
  handler->nss(0);
  return rx_data;
}

void st25r95_init(st25r95_handle *handler) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	handler->state = ST25_STATE_INIT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	701a      	strb	r2, [r3, #0]

  st25r95_reset(handler);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f829 	bl	80042ae <st25r95_reset>
  handler->irq_pulse();
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d012      	beq.n	8004296 <st25r95_init+0x4e>
 8004270:	2b02      	cmp	r3, #2
 8004272:	d114      	bne.n	800429e <st25r95_init+0x56>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f85f 	bl	8004338 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	795b      	ldrb	r3, [r3, #5]
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8cf 	bl	8004424 <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	799b      	ldrb	r3, [r3, #6]
 800428a:	461a      	mov	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f900 	bl	8004494 <st25r95_write_ARC>
      break;
 8004294:	e007      	b.n	80042a6 <st25r95_init+0x5e>
    case ST25_PROTOCOL_15693:
      st25r95_15693(handler);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f88a 	bl	80043b0 <st25r95_15693>
	  break;
 800429c:	e003      	b.n	80042a6 <st25r95_init+0x5e>
    default:
      st25r95_off(handler);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f81a 	bl	80042d8 <st25r95_off>
      break;
 80042a4:	bf00      	nop
  }
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <st25r95_reset>:
      break;
  }

}

void st25r95_reset(st25r95_handle *handler) {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2001      	movs	r0, #1
 80042bc:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff13 	bl	80040ec <st25r95_spi_byte>
  handler->nss(0);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2000      	movs	r0, #0
 80042cc:	4798      	blx	r3
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <st25r95_off+0x58>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <st25r95_off+0x58>)
 80042e8:	2202      	movs	r2, #2
 80042ea:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <st25r95_off+0x58>)
 80042ee:	2202      	movs	r2, #2
 80042f0:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <st25r95_off+0x58>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <st25r95_off+0x58>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <st25r95_off+0x5c>)
 8004300:	2205      	movs	r2, #5
 8004302:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2001      	movs	r0, #1
 800430a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fed7 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2000      	movs	r0, #0
 8004318:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ff54 	bl	80041c8 <st25r95_response>
 8004320:	60f8      	str	r0, [r7, #12]
  return res[0];
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	781b      	ldrb	r3, [r3, #0]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200008fc 	.word	0x200008fc
 8004334:	200009fc 	.word	0x200009fc

08004338 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <st25r95_14443A+0x70>)
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <st25r95_14443A+0x70>)
 8004348:	2202      	movs	r2, #2
 800434a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <st25r95_14443A+0x70>)
 800434e:	2202      	movs	r2, #2
 8004350:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <st25r95_14443A+0x70>)
 8004354:	2202      	movs	r2, #2
 8004356:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	78db      	ldrb	r3, [r3, #3]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	b25a      	sxtb	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	b25b      	sxtb	r3, r3
 8004368:	4313      	orrs	r3, r2
 800436a:	b25b      	sxtb	r3, r3
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <st25r95_14443A+0x70>)
 8004370:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <st25r95_14443A+0x74>)
 8004374:	2205      	movs	r2, #5
 8004376:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2001      	movs	r0, #1
 800437e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fe9d 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2000      	movs	r0, #0
 800438c:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff17 	bl	80041c8 <st25r95_response>
 800439a:	60f8      	str	r0, [r7, #12]
  return res[0];
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	781b      	ldrb	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200008fc 	.word	0x200008fc
 80043ac:	200009fc 	.word	0x200009fc

080043b0 <st25r95_15693>:

st25r95_status_t st25r95_15693(st25r95_handle *handler) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 80043b8:	4b18      	ldr	r3, [pc, #96]	; (800441c <st25r95_15693+0x6c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <st25r95_15693+0x6c>)
 80043c0:	2202      	movs	r2, #2
 80043c2:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80043c4:	4b15      	ldr	r3, [pc, #84]	; (800441c <st25r95_15693+0x6c>)
 80043c6:	2202      	movs	r2, #2
 80043c8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_15693;
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <st25r95_15693+0x6c>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	78db      	ldrb	r3, [r3, #3]
  	  	  	  	  | 0 << 2 | 0 << 1 | 1 << 0;
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	b2da      	uxtb	r2, r3
  tx_buffer[4] = handler->tx_speed << 4 | 0 << 3
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <st25r95_15693+0x6c>)
 80043e2:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <st25r95_15693+0x70>)
 80043e6:	2205      	movs	r2, #5
 80043e8:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2001      	movs	r0, #1
 80043f0:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fe64 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2000      	movs	r0, #0
 80043fe:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_15693;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fede 	bl	80041c8 <st25r95_response>
 800440c:	60f8      	str	r0, [r7, #12]
  return res[0];
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	781b      	ldrb	r3, [r3, #0]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200008fc 	.word	0x200008fc
 8004420:	200009fc 	.word	0x200009fc

08004424 <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <st25r95_write_timerw+0x68>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <st25r95_write_timerw+0x68>)
 8004438:	2209      	movs	r2, #9
 800443a:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <st25r95_write_timerw+0x68>)
 800443e:	2204      	movs	r2, #4
 8004440:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <st25r95_write_timerw+0x68>)
 8004444:	223a      	movs	r2, #58	; 0x3a
 8004446:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <st25r95_write_timerw+0x68>)
 800444a:	2200      	movs	r2, #0
 800444c:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <st25r95_write_timerw+0x68>)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <st25r95_write_timerw+0x68>)
 8004456:	2204      	movs	r2, #4
 8004458:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <st25r95_write_timerw+0x6c>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2001      	movs	r0, #1
 8004466:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fe29 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2000      	movs	r0, #0
 8004474:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fea6 	bl	80041c8 <st25r95_response>
 800447c:	60f8      	str	r0, [r7, #12]
  return res[0];
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	781b      	ldrb	r3, [r3, #0]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200008fc 	.word	0x200008fc
 8004490:	200009fc 	.word	0x200009fc

08004494 <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
 80044a0:	4613      	mov	r3, r2
 80044a2:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044ac:	2209      	movs	r2, #9
 80044ae:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044b2:	2204      	movs	r2, #4
 80044b4:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044b8:	2268      	movs	r2, #104	; 0x68
 80044ba:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044be:	2201      	movs	r2, #1
 80044c0:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 80044c2:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 80044c8:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <st25r95_write_ARC+0x6c>)
 80044ca:	78bb      	ldrb	r3, [r7, #2]
 80044cc:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <st25r95_write_ARC+0x70>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2001      	movs	r0, #1
 80044da:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fdef 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2000      	movs	r0, #0
 80044e8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fe6c 	bl	80041c8 <st25r95_response>
 80044f0:	60f8      	str	r0, [r7, #12]
  return res[0];
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	781b      	ldrb	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200008fc 	.word	0x200008fc
 8004504:	200009fc 	.word	0x200009fc

08004508 <st25r95_14443A_detect>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b08c      	sub	sp, #48	; 0x30
 800450c:	af04      	add	r7, sp, #16
 800450e:	6078      	str	r0, [r7, #4]
  uint8_t data[10] = {0xff};
 8004510:	23ff      	movs	r3, #255	; 0xff
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f107 0318 	add.w	r3, r7, #24
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	809a      	strh	r2, [r3, #4]
  st25r95_14443A_REQA(handler, data);
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f883 	bl	8004630 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 800452a:	7d3b      	ldrb	r3, [r7, #20]
 800452c:	2bff      	cmp	r3, #255	; 0xff
 800452e:	d101      	bne.n	8004534 <st25r95_14443A_detect+0x2c>
 8004530:	2300      	movs	r3, #0
 8004532:	e079      	b.n	8004628 <st25r95_14443A_detect+0x120>
  if (data[0] & 0b00100000) {
 8004534:	7d3b      	ldrb	r3, [r7, #20]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <st25r95_14443A_detect+0x3a>
    return 0;
 800453e:	2300      	movs	r3, #0
 8004540:	e072      	b.n	8004628 <st25r95_14443A_detect+0x120>
  }

  uint8_t UID[10];
  uint8_t UID_size = data[0] >> 6;
 8004542:	7d3b      	ldrb	r3, [r7, #20]
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < UID_size + 1; i++) {
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e054      	b.n	80045f8 <st25r95_14443A_detect+0xf0>
    data[0] = 0xff;
 800454e:	23ff      	movs	r3, #255	; 0xff
 8004550:	753b      	strb	r3, [r7, #20]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8004552:	f107 0214 	add.w	r2, r7, #20
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8a4 	bl	80046a8 <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 8004560:	7d3b      	ldrb	r3, [r7, #20]
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d101      	bne.n	800456a <st25r95_14443A_detect+0x62>
 8004566:	2300      	movs	r3, #0
 8004568:	e05e      	b.n	8004628 <st25r95_14443A_detect+0x120>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 800456a:	7d3a      	ldrb	r2, [r7, #20]
 800456c:	7d7b      	ldrb	r3, [r7, #21]
 800456e:	4053      	eors	r3, r2
 8004570:	b2da      	uxtb	r2, r3
 8004572:	7dbb      	ldrb	r3, [r7, #22]
 8004574:	4053      	eors	r3, r2
 8004576:	b2da      	uxtb	r2, r3
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	4053      	eors	r3, r2
 800457c:	b2da      	uxtb	r2, r3
 800457e:	7e3b      	ldrb	r3, [r7, #24]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <st25r95_14443A_detect+0x80>
 8004584:	2300      	movs	r3, #0
 8004586:	e04f      	b.n	8004628 <st25r95_14443A_detect+0x120>
    if (data[5] & 0x80) {
    }
    UID[4 * i + 0] = data[0];
 8004588:	7ffb      	ldrb	r3, [r7, #31]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	7d3a      	ldrb	r2, [r7, #20]
 800458e:	3320      	adds	r3, #32
 8004590:	443b      	add	r3, r7
 8004592:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 1] = data[1];
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	3301      	adds	r3, #1
 800459c:	7d7a      	ldrb	r2, [r7, #21]
 800459e:	3320      	adds	r3, #32
 80045a0:	443b      	add	r3, r7
 80045a2:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 2] = data[2];
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	3302      	adds	r3, #2
 80045ac:	7dba      	ldrb	r2, [r7, #22]
 80045ae:	3320      	adds	r3, #32
 80045b0:	443b      	add	r3, r7
 80045b2:	f803 2c18 	strb.w	r2, [r3, #-24]
    UID[4 * i + 3] = data[3];
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	3303      	adds	r3, #3
 80045bc:	7dfa      	ldrb	r2, [r7, #23]
 80045be:	3320      	adds	r3, #32
 80045c0:	443b      	add	r3, r7
 80045c2:	f803 2c18 	strb.w	r2, [r3, #-24]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 80045c6:	7d3d      	ldrb	r5, [r7, #20]
 80045c8:	7d7b      	ldrb	r3, [r7, #21]
 80045ca:	7dba      	ldrb	r2, [r7, #22]
 80045cc:	7df9      	ldrb	r1, [r7, #23]
 80045ce:	f107 0414 	add.w	r4, r7, #20
 80045d2:	7ff8      	ldrb	r0, [r7, #31]
 80045d4:	9102      	str	r1, [sp, #8]
 80045d6:	9201      	str	r2, [sp, #4]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	462b      	mov	r3, r5
 80045dc:	4622      	mov	r2, r4
 80045de:	4601      	mov	r1, r0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f8a7 	bl	8004734 <st25r95_14443A_select>
    if (data[0] & 0x4)
 80045e6:	7d3b      	ldrb	r3, [r7, #20]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <st25r95_14443A_detect+0xfa>
      continue;
 80045f0:	bf00      	nop
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 80045f2:	7ffb      	ldrb	r3, [r7, #31]
 80045f4:	3301      	adds	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	7fba      	ldrb	r2, [r7, #30]
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d2a6      	bcs.n	800454e <st25r95_14443A_detect+0x46>
 8004600:	e000      	b.n	8004604 <st25r95_14443A_detect+0xfc>
    else
      break;
 8004602:	bf00      	nop
  }

  memset(handler->uid, 0, 10);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3307      	adds	r3, #7
 8004608:	220a      	movs	r2, #10
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f00a fcc6 	bl	800ef9e <memset>
  memcpy(handler->uid, UID, 10);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3307      	adds	r3, #7
 8004616:	461a      	mov	r2, r3
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	cb03      	ldmia	r3!, {r0, r1}
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	6051      	str	r1, [r2, #4]
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	8113      	strh	r3, [r2, #8]
  return 1;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bdb0      	pop	{r4, r5, r7, pc}

08004630 <st25r95_14443A_REQA>:

void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  tx_buffer[0] = ST25_SEND;
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <st25r95_14443A_REQA+0x70>)
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <st25r95_14443A_REQA+0x70>)
 8004642:	2204      	movs	r2, #4
 8004644:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <st25r95_14443A_REQA+0x70>)
 8004648:	2202      	movs	r2, #2
 800464a:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <st25r95_14443A_REQA+0x70>)
 800464e:	2226      	movs	r2, #38	; 0x26
 8004650:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <st25r95_14443A_REQA+0x70>)
 8004654:	2207      	movs	r2, #7
 8004656:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <st25r95_14443A_REQA+0x74>)
 800465a:	2205      	movs	r2, #5
 800465c:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2001      	movs	r0, #1
 8004664:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fd2a 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2000      	movs	r0, #0
 8004672:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fda7 	bl	80041c8 <st25r95_response>
 800467a:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d109      	bne.n	8004698 <st25r95_14443A_REQA+0x68>

  memcpy(data, res + 2, res[1]);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1c99      	adds	r1, r3, #2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f00a fd80 	bl	800f196 <memcpy>
 8004696:	e000      	b.n	800469a <st25r95_14443A_REQA+0x6a>
  if (res[0] != ST25_EFrameRecvOK) return;
 8004698:	bf00      	nop

}
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200008fc 	.word	0x200008fc
 80046a4:	200009fc 	.word	0x200009fc

080046a8 <st25r95_14443A_ANTICOLLISION>:

const static uint8_t cascade_level[] = {CL_1, CL_2, CL_3};

void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	460b      	mov	r3, r1
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	72fb      	strb	r3, [r7, #11]
  tx_buffer[0] = ST25_SEND;
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046be:	2204      	movs	r2, #4
 80046c0:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 80046c2:	4b19      	ldr	r3, [pc, #100]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046c4:	2203      	movs	r2, #3
 80046c6:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 80046c8:	7afb      	ldrb	r3, [r7, #11]
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <st25r95_14443A_ANTICOLLISION+0x84>)
 80046cc:	5cd2      	ldrb	r2, [r2, r3]
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046d0:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046d4:	2220      	movs	r2, #32
 80046d6:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <st25r95_14443A_ANTICOLLISION+0x80>)
 80046da:	2208      	movs	r2, #8
 80046dc:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <st25r95_14443A_ANTICOLLISION+0x88>)
 80046e0:	2206      	movs	r2, #6
 80046e2:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2001      	movs	r0, #1
 80046ea:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fce7 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2000      	movs	r0, #0
 80046f8:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fd64 	bl	80041c8 <st25r95_response>
 8004700:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d109      	bne.n	800471e <st25r95_14443A_ANTICOLLISION+0x76>

  memcpy(data, res + 2, res[1]);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1c99      	adds	r1, r3, #2
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f00a fd3d 	bl	800f196 <memcpy>
 800471c:	e000      	b.n	8004720 <st25r95_14443A_ANTICOLLISION+0x78>
  if (res[0] != ST25_EFrameRecvOK) return;
 800471e:	bf00      	nop
}
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200008fc 	.word	0x200008fc
 800472c:	08011b3c 	.word	0x08011b3c
 8004730:	200009fc 	.word	0x200009fc

08004734 <st25r95_14443A_select>:

void
st25r95_14443A_select(st25r95_handle *handler, uint8_t level, uint8_t *data, uint8_t uid0, uint8_t uid1, uint8_t uid2,
                      uint8_t uid3) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	72fb      	strb	r3, [r7, #11]
 8004744:	4613      	mov	r3, r2
 8004746:	72bb      	strb	r3, [r7, #10]
  tx_buffer[0] = ST25_SEND;
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <st25r95_14443A_select+0xc0>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004750:	2204      	movs	r2, #4
 8004752:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x08;
 8004754:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004756:	2208      	movs	r2, #8
 8004758:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <st25r95_14443A_select+0xc4>)
 800475e:	5cd2      	ldrb	r2, [r2, r3]
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004762:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x70;
 8004764:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004766:	2270      	movs	r2, #112	; 0x70
 8004768:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = uid0;
 800476a:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <st25r95_14443A_select+0xc0>)
 800476c:	7abb      	ldrb	r3, [r7, #10]
 800476e:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = uid1;
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004776:	7193      	strb	r3, [r2, #6]
  tx_buffer[7] = uid2;
 8004778:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <st25r95_14443A_select+0xc0>)
 800477a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800477e:	71d3      	strb	r3, [r2, #7]
  tx_buffer[8] = uid3;
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <st25r95_14443A_select+0xc0>)
 8004782:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004786:	7213      	strb	r3, [r2, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 8004788:	7aba      	ldrb	r2, [r7, #10]
 800478a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800478e:	4053      	eors	r3, r2
 8004790:	b2da      	uxtb	r2, r3
 8004792:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004796:	4053      	eors	r3, r2
 8004798:	b2da      	uxtb	r2, r3
 800479a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800479e:	4053      	eors	r3, r2
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <st25r95_14443A_select+0xc0>)
 80047a4:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <st25r95_14443A_select+0xc0>)
 80047a8:	2228      	movs	r2, #40	; 0x28
 80047aa:	729a      	strb	r2, [r3, #10]
  tx_len = 11;
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <st25r95_14443A_select+0xc8>)
 80047ae:	220b      	movs	r2, #11
 80047b0:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2001      	movs	r0, #1
 80047b8:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fc80 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2000      	movs	r0, #0
 80047c6:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fcfd 	bl	80041c8 <st25r95_response>
 80047ce:	6178      	str	r0, [r7, #20]
  if (res[0] != ST25_EFrameRecvOK) return;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b80      	cmp	r3, #128	; 0x80
 80047d6:	d109      	bne.n	80047ec <st25r95_14443A_select+0xb8>

  memcpy(data, res + 2, res[1]);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1c99      	adds	r1, r3, #2
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	3301      	adds	r3, #1
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f00a fcd6 	bl	800f196 <memcpy>
 80047ea:	e000      	b.n	80047ee <st25r95_14443A_select+0xba>
  if (res[0] != ST25_EFrameRecvOK) return;
 80047ec:	bf00      	nop
}
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200008fc 	.word	0x200008fc
 80047f8:	08011b3c 	.word	0x08011b3c
 80047fc:	200009fc 	.word	0x200009fc

08004800 <st25r95_15693_inventory1>:

uint8_t st25r95_15693_inventory1(st25r95_handle *handler)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	  handler->state = ST25_STATE_INIT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	701a      	strb	r2, [r3, #0]

  tx_buffer[0] = ST25_SEND;
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <st25r95_15693_inventory1+0x8c>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <st25r95_15693_inventory1+0x8c>)
 8004816:	2204      	movs	r2, #4
 8004818:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x3; // length of 15693 command frame
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <st25r95_15693_inventory1+0x8c>)
 800481c:	2203      	movs	r2, #3
 800481e:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x26; // flags
 8004820:	4b1a      	ldr	r3, [pc, #104]	; (800488c <st25r95_15693_inventory1+0x8c>)
 8004822:	2226      	movs	r2, #38	; 0x26
 8004824:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x01; // command code
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <st25r95_15693_inventory1+0x8c>)
 8004828:	2201      	movs	r2, #1
 800482a:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x00; // non-addressed & no mask
 800482c:	4b17      	ldr	r3, [pc, #92]	; (800488c <st25r95_15693_inventory1+0x8c>)
 800482e:	2200      	movs	r2, #0
 8004830:	715a      	strb	r2, [r3, #5]
  // CRC automatically appended by 15693 protocol select
  tx_len = 6;
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <st25r95_15693_inventory1+0x90>)
 8004834:	2206      	movs	r2, #6
 8004836:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2001      	movs	r0, #1
 800483e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fc3d 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2000      	movs	r0, #0
 800484c:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fcba 	bl	80041c8 <st25r95_response>
 8004854:	60f8      	str	r0, [r7, #12]
  if (res[0] != ST25_EFrameRecvOK) return 0;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d001      	beq.n	8004862 <st25r95_15693_inventory1+0x62>
 800485e:	2300      	movs	r3, #0
 8004860:	e010      	b.n	8004884 <st25r95_15693_inventory1+0x84>

  memset(handler->uid, 0, 8);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3307      	adds	r3, #7
 8004866:	2208      	movs	r2, #8
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f00a fb97 	bl	800ef9e <memset>
  memcpy(handler->uid, res[4], 8);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1dd8      	adds	r0, r3, #7
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3304      	adds	r3, #4
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2208      	movs	r2, #8
 800487c:	4619      	mov	r1, r3
 800487e:	f00a fc8a 	bl	800f196 <memcpy>
  return 1;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200008fc 	.word	0x200008fc
 8004890:	200009fc 	.word	0x200009fc

08004894 <st25r95_idle>:
  memset(handler->uid, 0, 8);
  memcpy(handler->uid, res[4], 8);
  return 1;
}

void st25r95_idle(st25r95_handle *handler) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	  handler->state = ST25_STATE_IDLE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]

  tx_buffer[0] = ST25_SEND;
 80048a2:	4b25      	ldr	r3, [pc, #148]	; (8004938 <st25r95_idle+0xa4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 80048a8:	4b23      	ldr	r3, [pc, #140]	; (8004938 <st25r95_idle+0xa4>)
 80048aa:	2207      	movs	r2, #7
 80048ac:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <st25r95_idle+0xa4>)
 80048b0:	220e      	movs	r2, #14
 80048b2:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0b00001011;
 80048b4:	4b20      	ldr	r3, [pc, #128]	; (8004938 <st25r95_idle+0xa4>)
 80048b6:	220b      	movs	r2, #11
 80048b8:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <st25r95_idle+0xa4>)
 80048bc:	2221      	movs	r2, #33	; 0x21
 80048be:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <st25r95_idle+0xa4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	715a      	strb	r2, [r3, #5]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <st25r95_idle+0xa4>)
 80048c8:	2279      	movs	r2, #121	; 0x79
 80048ca:	719a      	strb	r2, [r3, #6]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 80048cc:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <st25r95_idle+0xa4>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	71da      	strb	r2, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 80048d2:	4b19      	ldr	r3, [pc, #100]	; (8004938 <st25r95_idle+0xa4>)
 80048d4:	2218      	movs	r2, #24
 80048d6:	721a      	strb	r2, [r3, #8]
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <st25r95_idle+0xa4>)
 80048da:	2200      	movs	r2, #0
 80048dc:	725a      	strb	r2, [r3, #9]
  tx_buffer[10] = 0x20;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <st25r95_idle+0xa4>)
 80048e0:	2220      	movs	r2, #32
 80048e2:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <st25r95_idle+0xa4>)
 80048e6:	2260      	movs	r2, #96	; 0x60
 80048e8:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <st25r95_idle+0xa4>)
 80048ec:	2260      	movs	r2, #96	; 0x60
 80048ee:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	789b      	ldrb	r3, [r3, #2]
 80048f4:	3b08      	subs	r3, #8
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <st25r95_idle+0xa4>)
 80048fa:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	789b      	ldrb	r3, [r3, #2]
 8004900:	3308      	adds	r3, #8
 8004902:	b2da      	uxtb	r2, r3
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <st25r95_idle+0xa4>)
 8004906:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <st25r95_idle+0xa4>)
 800490a:	223f      	movs	r2, #63	; 0x3f
 800490c:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <st25r95_idle+0xa4>)
 8004910:	2201      	movs	r2, #1
 8004912:	741a      	strb	r2, [r3, #16]
  tx_len = 17;
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <st25r95_idle+0xa8>)
 8004916:	2211      	movs	r2, #17
 8004918:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2001      	movs	r0, #1
 8004920:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fbcc 	bl	80040c0 <st25r95_spi_tx>
  handler->nss(0);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2000      	movs	r0, #0
 800492e:	4798      	blx	r3

}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	200008fc 	.word	0x200008fc
 800493c:	200009fc 	.word	0x200009fc

08004940 <st25r95_calibrate>:

void st25r95_calibrate(st25r95_handle *handler) {
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e0be      	b.n	8004acc <st25r95_calibrate+0x18c>
    tx_len = 17;
 800494e:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <st25r95_calibrate+0x1a4>)
 8004950:	2211      	movs	r2, #17
 8004952:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8004954:	4a64      	ldr	r2, [pc, #400]	; (8004ae8 <st25r95_calibrate+0x1a8>)
 8004956:	4b65      	ldr	r3, [pc, #404]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2001      	movs	r0, #1
 800496a:	4798      	blx	r3
    st25r95_spi_tx(handler);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fba7 	bl	80040c0 <st25r95_spi_tx>
    handler->nss(0);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2000      	movs	r0, #0
 8004978:	4798      	blx	r3

    res = st25r95_response(handler);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fc24 	bl	80041c8 <st25r95_response>
 8004980:	4603      	mov	r3, r0
 8004982:	4a5b      	ldr	r2, [pc, #364]	; (8004af0 <st25r95_calibrate+0x1b0>)
 8004984:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8004986:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <st25r95_calibrate+0x1b0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 809a 	bne.w	8004ac6 <st25r95_calibrate+0x186>
 8004992:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <st25r95_calibrate+0x1b0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 8093 	bne.w	8004ac6 <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <st25r95_calibrate+0x1b0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3302      	adds	r3, #2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d13e      	bne.n	8004a2a <st25r95_calibrate+0xea>
        switch (i - 1) {
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	f200 8088 	bhi.w	8004ac6 <st25r95_calibrate+0x186>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <st25r95_calibrate+0x7c>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	08004ac7 	.word	0x08004ac7
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	08004a1d 	.word	0x08004a1d
 80049d8:	08004ac7 	.word	0x08004ac7
          case 0:
            calibrate_data[14] = 0xFC;
 80049dc:	4b43      	ldr	r3, [pc, #268]	; (8004aec <st25r95_calibrate+0x1ac>)
 80049de:	22fc      	movs	r2, #252	; 0xfc
 80049e0:	739a      	strb	r2, [r3, #14]
            break;
 80049e2:	e070      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80049e4:	4b41      	ldr	r3, [pc, #260]	; (8004aec <st25r95_calibrate+0x1ac>)
 80049e6:	7b9b      	ldrb	r3, [r3, #14]
 80049e8:	3340      	adds	r3, #64	; 0x40
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <st25r95_calibrate+0x1ac>)
 80049ee:	739a      	strb	r2, [r3, #14]
            break;
 80049f0:	e069      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 3:
            calibrate_data[14] += 0x20;
 80049f2:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <st25r95_calibrate+0x1ac>)
 80049f4:	7b9b      	ldrb	r3, [r3, #14]
 80049f6:	3320      	adds	r3, #32
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <st25r95_calibrate+0x1ac>)
 80049fc:	739a      	strb	r2, [r3, #14]
            break;
 80049fe:	e062      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 4:
            calibrate_data[14] += 0x10;
 8004a00:	4b3a      	ldr	r3, [pc, #232]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a02:	7b9b      	ldrb	r3, [r3, #14]
 8004a04:	3310      	adds	r3, #16
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b38      	ldr	r3, [pc, #224]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a0a:	739a      	strb	r2, [r3, #14]
            break;
 8004a0c:	e05b      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 5:
            calibrate_data[14] += 0x08;
 8004a0e:	4b37      	ldr	r3, [pc, #220]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a10:	7b9b      	ldrb	r3, [r3, #14]
 8004a12:	3308      	adds	r3, #8
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b35      	ldr	r3, [pc, #212]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a18:	739a      	strb	r2, [r3, #14]
            break;
 8004a1a:	e054      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 6:
            calibrate_data[14] += 0x04;
 8004a1c:	4b33      	ldr	r3, [pc, #204]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a1e:	7b9b      	ldrb	r3, [r3, #14]
 8004a20:	3304      	adds	r3, #4
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b31      	ldr	r3, [pc, #196]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a26:	739a      	strb	r2, [r3, #14]
            break;
 8004a28:	e04d      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <st25r95_calibrate+0x1b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3302      	adds	r3, #2
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d147      	bne.n	8004ac6 <st25r95_calibrate+0x186>
        switch (i - 1) {
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	2b07      	cmp	r3, #7
 8004a3c:	d843      	bhi.n	8004ac6 <st25r95_calibrate+0x186>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <st25r95_calibrate+0x104>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004ac7 	.word	0x08004ac7
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a73 	.word	0x08004a73
 8004a50:	08004a81 	.word	0x08004a81
 8004a54:	08004a8f 	.word	0x08004a8f
 8004a58:	08004a9d 	.word	0x08004a9d
 8004a5c:	08004aab 	.word	0x08004aab
 8004a60:	08004ab9 	.word	0x08004ab9
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8004a64:	4b21      	ldr	r3, [pc, #132]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a66:	7b9b      	ldrb	r3, [r3, #14]
 8004a68:	3b80      	subs	r3, #128	; 0x80
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a6e:	739a      	strb	r2, [r3, #14]
            break;
 8004a70:	e029      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 2:
            calibrate_data[14] -= 0x40;
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a74:	7b9b      	ldrb	r3, [r3, #14]
 8004a76:	3b40      	subs	r3, #64	; 0x40
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a7c:	739a      	strb	r2, [r3, #14]
            break;
 8004a7e:	e022      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 3:
            calibrate_data[14] -= 0x20;
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a82:	7b9b      	ldrb	r3, [r3, #14]
 8004a84:	3b20      	subs	r3, #32
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a8a:	739a      	strb	r2, [r3, #14]
            break;
 8004a8c:	e01b      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 4:
            calibrate_data[14] -= 0x10;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a90:	7b9b      	ldrb	r3, [r3, #14]
 8004a92:	3b10      	subs	r3, #16
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4b15      	ldr	r3, [pc, #84]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a98:	739a      	strb	r2, [r3, #14]
            break;
 8004a9a:	e014      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 5:
            calibrate_data[14] -= 0x08;
 8004a9c:	4b13      	ldr	r3, [pc, #76]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004a9e:	7b9b      	ldrb	r3, [r3, #14]
 8004aa0:	3b08      	subs	r3, #8
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004aa6:	739a      	strb	r2, [r3, #14]
            break;
 8004aa8:	e00d      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 6:
            calibrate_data[14] -= 0x04;
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004aac:	7b9b      	ldrb	r3, [r3, #14]
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004ab4:	739a      	strb	r2, [r3, #14]
            break;
 8004ab6:	e006      	b.n	8004ac6 <st25r95_calibrate+0x186>
          case 7:
            calibrate_data[14] -= 0x04;
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004aba:	7b9b      	ldrb	r3, [r3, #14]
 8004abc:	3b04      	subs	r3, #4
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004ac2:	739a      	strb	r2, [r3, #14]
            break;
 8004ac4:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	f67f af3d 	bls.w	800494e <st25r95_calibrate+0xe>
        }
      }
    }
  }

  handler->DACRef = calibrate_data[14];
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <st25r95_calibrate+0x1ac>)
 8004ad6:	7b9a      	ldrb	r2, [r3, #14]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	709a      	strb	r2, [r3, #2]
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	200009fc 	.word	0x200009fc
 8004ae8:	200008fc 	.word	0x200008fc
 8004aec:	20000160 	.word	0x20000160
 8004af0:	20000b00 	.word	0x20000b00

08004af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <HAL_MspInit+0x4c>)
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <HAL_MspInit+0x4c>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6613      	str	r3, [r2, #96]	; 0x60
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <HAL_MspInit+0x4c>)
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_MspInit+0x4c>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_MspInit+0x4c>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_MspInit+0x4c>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	210f      	movs	r1, #15
 8004b2e:	f06f 0001 	mvn.w	r0, #1
 8004b32:	f001 fe8a 	bl	800684a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000

08004b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b09e      	sub	sp, #120	; 0x78
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	2268      	movs	r2, #104	; 0x68
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f00a fa22 	bl	800ef9e <memset>
  if(hadc->Instance==ADC1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2e      	ldr	r2, [pc, #184]	; (8004c18 <HAL_ADC_MspInit+0xd4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d155      	bne.n	8004c10 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004b70:	2302      	movs	r3, #2
 8004b72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b74:	2301      	movs	r3, #1
 8004b76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004b78:	2308      	movs	r3, #8
 8004b7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b80:	2302      	movs	r3, #2
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b84:	2302      	movs	r3, #2
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 f97e 	bl	8007e94 <HAL_RCCEx_PeriphCLKConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8004b9e:	f7ff f923 	bl	8003de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <HAL_ADC_MspInit+0xd8>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <HAL_ADC_MspInit+0xd8>)
 8004ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_ADC_MspInit+0xd8>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <HAL_ADC_MspInit+0xe0>)
 8004bbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bea:	2220      	movs	r2, #32
 8004bec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bf4:	480a      	ldr	r0, [pc, #40]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004bf6:	f001 fe5f 	bl	80068b8 <HAL_DMA_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004c00:	f7ff f8f2 	bl	8003de8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004c08:	651a      	str	r2, [r3, #80]	; 0x50
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <HAL_ADC_MspInit+0xdc>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c10:	bf00      	nop
 8004c12:	3778      	adds	r7, #120	; 0x78
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	50040000 	.word	0x50040000
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	200003d8 	.word	0x200003d8
 8004c24:	40020008 	.word	0x40020008

08004c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <HAL_SPI_MspInit+0x7c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d128      	bne.n	8004c9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c4a:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c54:	6613      	str	r3, [r2, #96]	; 0x60
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <HAL_SPI_MspInit+0x80>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8004c7a:	23c2      	movs	r3, #194	; 0xc2
 8004c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c86:	2303      	movs	r3, #3
 8004c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8e:	f107 0314 	add.w	r3, r7, #20
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c98:	f002 f884 	bl	8006da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c9c:	bf00      	nop
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40013000 	.word	0x40013000
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0a6      	sub	sp, #152	; 0x98
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cc4:	f107 031c 	add.w	r3, r7, #28
 8004cc8:	2268      	movs	r2, #104	; 0x68
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f00a f966 	bl	800ef9e <memset>
  if(huart->Instance==USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a71      	ldr	r2, [pc, #452]	; (8004e9c <HAL_UART_MspInit+0x1f0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	f040 809a 	bne.w	8004e12 <HAL_UART_MspInit+0x166>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ce6:	f107 031c 	add.w	r3, r7, #28
 8004cea:	4618      	mov	r0, r3
 8004cec:	f003 f8d2 	bl	8007e94 <HAL_RCCEx_PeriphCLKConfig>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004cf6:	f7ff f877 	bl	8003de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cfa:	4b69      	ldr	r3, [pc, #420]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	4a68      	ldr	r2, [pc, #416]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d04:	6613      	str	r3, [r2, #96]	; 0x60
 8004d06:	4b66      	ldr	r3, [pc, #408]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d12:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	4a62      	ldr	r2, [pc, #392]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d1e:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8004d2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d32:	2302      	movs	r3, #2
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d44:	2307      	movs	r3, #7
 8004d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d54:	f002 f826 	bl	8006da4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004d58:	4b52      	ldr	r3, [pc, #328]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d5a:	4a53      	ldr	r2, [pc, #332]	; (8004ea8 <HAL_UART_MspInit+0x1fc>)
 8004d5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8004d5e:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d60:	2202      	movs	r2, #2
 8004d62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d64:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d70:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d76:	4b4b      	ldr	r3, [pc, #300]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d7c:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004d82:	4b48      	ldr	r3, [pc, #288]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d90:	4844      	ldr	r0, [pc, #272]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004d92:	f001 fd91 	bl	80068b8 <HAL_DMA_Init>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8004d9c:	f7ff f824 	bl	8003de8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a40      	ldr	r2, [pc, #256]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004da4:	671a      	str	r2, [r3, #112]	; 0x70
 8004da6:	4a3f      	ldr	r2, [pc, #252]	; (8004ea4 <HAL_UART_MspInit+0x1f8>)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8004dac:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dae:	4a40      	ldr	r2, [pc, #256]	; (8004eb0 <HAL_UART_MspInit+0x204>)
 8004db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8004db2:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004db4:	2202      	movs	r2, #2
 8004db6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004db8:	4b3c      	ldr	r3, [pc, #240]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dba:	2210      	movs	r2, #16
 8004dbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dc4:	4b39      	ldr	r3, [pc, #228]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd0:	4b36      	ldr	r3, [pc, #216]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004dd6:	4b35      	ldr	r3, [pc, #212]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ddc:	4b33      	ldr	r3, [pc, #204]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004de2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004de4:	4831      	ldr	r0, [pc, #196]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004de6:	f001 fd67 	bl	80068b8 <HAL_DMA_Init>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8004df0:	f7fe fffa 	bl	8003de8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004df8:	66da      	str	r2, [r3, #108]	; 0x6c
 8004dfa:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_UART_MspInit+0x200>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2106      	movs	r1, #6
 8004e04:	2025      	movs	r0, #37	; 0x25
 8004e06:	f001 fd20 	bl	800684a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e0a:	2025      	movs	r0, #37	; 0x25
 8004e0c:	f001 fd39 	bl	8006882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e10:	e040      	b.n	8004e94 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <HAL_UART_MspInit+0x208>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d13b      	bne.n	8004e94 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e20:	2300      	movs	r3, #0
 8004e22:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 f833 	bl	8007e94 <HAL_RCCEx_PeriphCLKConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8004e34:	f7fe ffd8 	bl	8003de8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e42:	6593      	str	r3, [r2, #88]	; 0x58
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e50:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_UART_MspInit+0x1f4>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e68:	230c      	movs	r3, #12
 8004e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e80:	2307      	movs	r3, #7
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e90:	f001 ff88 	bl	8006da4 <HAL_GPIO_Init>
}
 8004e94:	bf00      	nop
 8004e96:	3798      	adds	r7, #152	; 0x98
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	200005ec 	.word	0x200005ec
 8004ea8:	40020058 	.word	0x40020058
 8004eac:	20000634 	.word	0x20000634
 8004eb0:	4002046c 	.word	0x4002046c
 8004eb4:	40004400 	.word	0x40004400

08004eb8 <pop_registers_from_fault_stack>:
extern DMA_HandleTypeDef hdma_usart1_tx;
extern UART_HandleTypeDef huart1;
/* USER CODE BEGIN EV */

void pop_registers_from_fault_stack(unsigned int * hardfault_args)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b08b      	sub	sp, #44	; 0x2c
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
unsigned int stacked_r3;
unsigned int stacked_r12;
unsigned int stacked_lr;
unsigned int stacked_pc;
unsigned int stacked_psr;
    stacked_r0 = ((unsigned long) hardfault_args[0]);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
    stacked_r1 = ((unsigned long) hardfault_args[1]);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	623b      	str	r3, [r7, #32]
    stacked_r2 = ((unsigned long) hardfault_args[2]);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	61fb      	str	r3, [r7, #28]
    stacked_r3 = ((unsigned long) hardfault_args[3]);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	61bb      	str	r3, [r7, #24]
    stacked_r12 = ((unsigned long) hardfault_args[4]);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	617b      	str	r3, [r7, #20]
    stacked_lr = ((unsigned long) hardfault_args[5]);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	613b      	str	r3, [r7, #16]
    stacked_pc = ((unsigned long) hardfault_args[6]);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	60fb      	str	r3, [r7, #12]
    stacked_psr = ((unsigned long) hardfault_args[7]);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60bb      	str	r3, [r7, #8]
    /* Inspect stacked_pc to locate the offending instruction. */
    for( ;; );
 8004ef0:	e7fe      	b.n	8004ef0 <pop_registers_from_fault_stack+0x38>

08004ef2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ef6:	e7fe      	b.n	8004ef6 <NMI_Handler+0x4>

08004ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	__asm volatile (
 8004efc:	f01e 0f04 	tst.w	lr, #4
 8004f00:	bf0c      	ite	eq
 8004f02:	f3ef 8008 	mrseq	r0, MSP
 8004f06:	f3ef 8009 	mrsne	r0, PSP
 8004f0a:	6981      	ldr	r1, [r0, #24]
 8004f0c:	4a01      	ldr	r2, [pc, #4]	; (8004f14 <HardFault_Handler+0x1c>)
 8004f0e:	4710      	bx	r2
	    "ldr r2, =pop_registers_from_fault_stack\n\t"
	    "bx r2\n\t"
	    //handler2_address_const: .word
	        );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f10:	e7fe      	b.n	8004f10 <HardFault_Handler+0x18>
 8004f12:	0000      	.short	0x0000
 8004f14:	08004eb9 	.word	0x08004eb9

08004f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f1c:	e7fe      	b.n	8004f1c <MemManage_Handler+0x4>

08004f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f22:	e7fe      	b.n	8004f22 <BusFault_Handler+0x4>

08004f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f28:	e7fe      	b.n	8004f28 <UsageFault_Handler+0x4>

08004f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f3c:	f000 f99c 	bl	8005278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f40:	f007 fe6e 	bl	800cc20 <xTaskGetSchedulerState>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f4a:	f008 fd3d 	bl	800d9c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f58:	4802      	ldr	r0, [pc, #8]	; (8004f64 <DMA1_Channel1_IRQHandler+0x10>)
 8004f5a:	f001 fe44 	bl	8006be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200003d8 	.word	0x200003d8

08004f68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <DMA1_Channel5_IRQHandler+0x10>)
 8004f6e:	f001 fe3a 	bl	8006be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200005ec 	.word	0x200005ec

08004f7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <USART1_IRQHandler+0x10>)
 8004f82:	f004 fb39 	bl	80095f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000484 	.word	0x20000484

08004f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NIRQ_OUT_Pin);
 8004f94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f98:	f002 f8c8 	bl	800712c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fa0:	f002 f8c4 	bl	800712c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fa4:	bf00      	nop
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004fac:	4802      	ldr	r0, [pc, #8]	; (8004fb8 <DMA2_Channel6_IRQHandler+0x10>)
 8004fae:	f001 fe1a 	bl	8006be6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000634 	.word	0x20000634

08004fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return 1;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_kill>:

int _kill(int pid, int sig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fd6:	f00a f8a9 	bl	800f12c <__errno>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2216      	movs	r2, #22
 8004fde:	601a      	str	r2, [r3, #0]
  return -1;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_exit>:

void _exit (int status)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ffe7 	bl	8004fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ffe:	e7fe      	b.n	8004ffe <_exit+0x12>

08005000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e00a      	b.n	8005028 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005012:	f3af 8000 	nop.w
 8005016:	4601      	mov	r1, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	60ba      	str	r2, [r7, #8]
 800501e:	b2ca      	uxtb	r2, r1
 8005020:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3301      	adds	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	dbf0      	blt.n	8005012 <_read+0x12>
  }

  return len;
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e009      	b.n	8005060 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	60ba      	str	r2, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	dbf1      	blt.n	800504c <_write+0x12>
  }
  return len;
 8005068:	687b      	ldr	r3, [r7, #4]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_close>:

int _close(int file)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800509a:	605a      	str	r2, [r3, #4]
  return 0;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_isatty>:

int _isatty(int file)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050b2:	2301      	movs	r3, #1
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <_sbrk+0x5c>)
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <_sbrk+0x60>)
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050f0:	4b13      	ldr	r3, [pc, #76]	; (8005140 <_sbrk+0x64>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <_sbrk+0x64>)
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <_sbrk+0x68>)
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <_sbrk+0x64>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	429a      	cmp	r2, r3
 800510a:	d207      	bcs.n	800511c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800510c:	f00a f80e 	bl	800f12c <__errno>
 8005110:	4603      	mov	r3, r0
 8005112:	220c      	movs	r2, #12
 8005114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e009      	b.n	8005130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <_sbrk+0x64>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <_sbrk+0x64>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4413      	add	r3, r2
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <_sbrk+0x64>)
 800512c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20028000 	.word	0x20028000
 800513c:	00000400 	.word	0x00000400
 8005140:	20000b04 	.word	0x20000b04
 8005144:	20002dc8 	.word	0x20002dc8

08005148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <SystemInit+0x20>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	4a05      	ldr	r2, [pc, #20]	; (8005168 <SystemInit+0x20>)
 8005154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800516c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005170:	f7ff ffea 	bl	8005148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005174:	480c      	ldr	r0, [pc, #48]	; (80051a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005176:	490d      	ldr	r1, [pc, #52]	; (80051ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005178:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <LoopForever+0xe>)
  movs r3, #0
 800517a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800517c:	e002      	b.n	8005184 <LoopCopyDataInit>

0800517e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800517e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005182:	3304      	adds	r3, #4

08005184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005188:	d3f9      	bcc.n	800517e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800518c:	4c0a      	ldr	r4, [pc, #40]	; (80051b8 <LoopForever+0x16>)
  movs r3, #0
 800518e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005190:	e001      	b.n	8005196 <LoopFillZerobss>

08005192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005194:	3204      	adds	r2, #4

08005196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005198:	d3fb      	bcc.n	8005192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800519a:	f009 ffcd 	bl	800f138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800519e:	f7fe fa09 	bl	80035b4 <main>

080051a2 <LoopForever>:

LoopForever:
    b LoopForever
 80051a2:	e7fe      	b.n	80051a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80051a4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80051a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051ac:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80051b0:	08011f70 	.word	0x08011f70
  ldr r2, =_sbss
 80051b4:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80051b8:	20002dc8 	.word	0x20002dc8

080051bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051bc:	e7fe      	b.n	80051bc <ADC1_IRQHandler>
	...

080051c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_Init+0x3c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0b      	ldr	r2, [pc, #44]	; (80051fc <HAL_Init+0x3c>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051d6:	2003      	movs	r0, #3
 80051d8:	f001 fb2c 	bl	8006834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051dc:	200f      	movs	r0, #15
 80051de:	f000 f80f 	bl	8005200 <HAL_InitTick>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	e001      	b.n	80051f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051ee:	f7ff fc81 	bl	8004af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40022000 	.word	0x40022000

08005200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <HAL_InitTick+0x6c>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d023      	beq.n	800525c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <HAL_InitTick+0x70>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b14      	ldr	r3, [pc, #80]	; (800526c <HAL_InitTick+0x6c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005222:	fbb3 f3f1 	udiv	r3, r3, r1
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fb37 	bl	800689e <HAL_SYSTICK_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b0f      	cmp	r3, #15
 800523a:	d809      	bhi.n	8005250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800523c:	2200      	movs	r2, #0
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	f001 fb01 	bl	800684a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <HAL_InitTick+0x74>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e007      	b.n	8005260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e004      	b.n	8005260 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e001      	b.n	8005260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	2000017c 	.word	0x2000017c
 8005270:	20000174 	.word	0x20000174
 8005274:	20000178 	.word	0x20000178

08005278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_IncTick+0x20>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_IncTick+0x24>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <HAL_IncTick+0x24>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	2000017c 	.word	0x2000017c
 800529c:	20000b08 	.word	0x20000b08

080052a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return uwTick;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_GetTick+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000b08 	.word	0x20000b08

080052b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3360      	adds	r3, #96	; 0x60
 8005332:	461a      	mov	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <LL_ADC_SetOffset+0x44>)
 8005342:	4013      	ands	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	4313      	orrs	r3, r2
 8005350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	03fff000 	.word	0x03fff000

08005368 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3360      	adds	r3, #96	; 0x60
 8005376:	461a      	mov	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3360      	adds	r3, #96	; 0x60
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	615a      	str	r2, [r3, #20]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005416:	b480      	push	{r7}
 8005418:	b087      	sub	sp, #28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3330      	adds	r3, #48	; 0x30
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	4413      	add	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	211f      	movs	r1, #31
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	401a      	ands	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0e9b      	lsrs	r3, r3, #26
 800544e:	f003 011f 	and.w	r1, r3, #31
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	431a      	orrs	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3314      	adds	r3, #20
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	0e5b      	lsrs	r3, r3, #25
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0d1b      	lsrs	r3, r3, #20
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2107      	movs	r1, #7
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	0d1b      	lsrs	r3, r3, #20
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	431a      	orrs	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0318 	and.w	r3, r3, #24
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <LL_ADC_SetChannelSingleDiff+0x44>)
 80054e8:	40d9      	lsrs	r1, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	400b      	ands	r3, r1
 80054ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	0007ffff 	.word	0x0007ffff

0800550c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800551c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6093      	str	r3, [r2, #8]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d101      	bne.n	800554a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800556c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005594:	d101      	bne.n	800559a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e4:	f043 0202 	orr.w	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <LL_ADC_IsEnabled+0x18>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <LL_ADC_IsEnabled+0x1a>
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d101      	bne.n	8005636 <LL_ADC_IsDisableOngoing+0x18>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <LL_ADC_IsDisableOngoing+0x1a>
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005658:	f043 0204 	orr.w	r2, r3, #4
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b04      	cmp	r3, #4
 800567e:	d101      	bne.n	8005684 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d101      	bne.n	80056aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e12f      	b.n	8005932 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fa2f 	bl	8004b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff19 	bl	8005530 <LL_ADC_IsDeepPowerDownEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff feff 	bl	800550c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ff34 	bl	8005580 <LL_ADC_IsInternalRegulatorEnabled>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d115      	bne.n	800574a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff ff18 	bl	8005558 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005728:	4b84      	ldr	r3, [pc, #528]	; (800593c <HAL_ADC_Init+0x284>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	4a84      	ldr	r2, [pc, #528]	; (8005940 <HAL_ADC_Init+0x288>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	3301      	adds	r3, #1
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800573c:	e002      	b.n	8005744 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3b01      	subs	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f9      	bne.n	800573e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ff16 	bl	8005580 <LL_ADC_IsInternalRegulatorEnabled>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575e:	f043 0210 	orr.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	f043 0201 	orr.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff ff76 	bl	800566c <LL_ADC_REG_IsConversionOngoing>
 8005780:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 80c8 	bne.w	8005920 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 80c4 	bne.w	8005920 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057a0:	f043 0202 	orr.w	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff23 	bl	80055f8 <LL_ADC_IsEnabled>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057b8:	4862      	ldr	r0, [pc, #392]	; (8005944 <HAL_ADC_Init+0x28c>)
 80057ba:	f7ff ff1d 	bl	80055f8 <LL_ADC_IsEnabled>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	485f      	ldr	r0, [pc, #380]	; (8005948 <HAL_ADC_Init+0x290>)
 80057cc:	f7ff fd74 	bl	80052b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	7e5b      	ldrb	r3, [r3, #25]
 80057d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80057e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80057e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d106      	bne.n	800580c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	3b01      	subs	r3, #1
 8005804:	045b      	lsls	r3, r3, #17
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_ADC_Init+0x294>)
 8005830:	4013      	ands	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	430b      	orrs	r3, r1
 800583a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff13 	bl	800566c <LL_ADC_REG_IsConversionOngoing>
 8005846:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ff20 	bl	8005692 <LL_ADC_INJ_IsConversionOngoing>
 8005852:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d140      	bne.n	80058dc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d13d      	bne.n	80058dc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7e1b      	ldrb	r3, [r3, #24]
 8005868:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800586a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005872:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005882:	f023 0306 	bic.w	r3, r3, #6
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	430b      	orrs	r3, r1
 800588e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005896:	2b01      	cmp	r3, #1
 8005898:	d118      	bne.n	80058cc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058b0:	4311      	orrs	r1, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058bc:	430a      	orrs	r2, r1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	e007      	b.n	80058dc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10c      	bne.n	80058fe <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f023 010f 	bic.w	r1, r3, #15
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	1e5a      	subs	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
 80058fc:	e007      	b.n	800590e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 020f 	bic.w	r2, r2, #15
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	; 0x58
 800591e:	e007      	b.n	8005930 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	f043 0210 	orr.w	r2, r3, #16
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005930:	7ffb      	ldrb	r3, [r7, #31]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000174 	.word	0x20000174
 8005940:	053e2d63 	.word	0x053e2d63
 8005944:	50040000 	.word	0x50040000
 8005948:	50040300 	.word	0x50040300
 800594c:	fff0c007 	.word	0xfff0c007

08005950 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fe83 	bl	800566c <LL_ADC_REG_IsConversionOngoing>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d167      	bne.n	8005a3c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_ADC_Start_DMA+0x2a>
 8005976:	2302      	movs	r3, #2
 8005978:	e063      	b.n	8005a42 <HAL_ADC_Start_DMA+0xf2>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fc80 	bl	8006288 <ADC_Enable>
 8005988:	4603      	mov	r3, r0
 800598a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d14f      	bne.n	8005a32 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	f023 0206 	bic.w	r2, r3, #6
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80059be:	e002      	b.n	80059c6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <HAL_ADC_Start_DMA+0xfc>)
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <HAL_ADC_Start_DMA+0x100>)
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <HAL_ADC_Start_DMA+0x104>)
 80059dc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	221c      	movs	r2, #28
 80059e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0210 	orr.w	r2, r2, #16
 80059fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3340      	adds	r3, #64	; 0x40
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f001 f803 	bl	8006a28 <HAL_DMA_Start_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fe0a 	bl	8005644 <LL_ADC_REG_StartConversion>
 8005a30:	e006      	b.n	8005a40 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005a3a:	e001      	b.n	8005a40 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08006453 	.word	0x08006453
 8005a50:	0800652b 	.word	0x0800652b
 8005a54:	08006547 	.word	0x08006547

08005a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b0b6      	sub	sp, #216	; 0xd8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x22>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e3d3      	b.n	800625e <HAL_ADC_ConfigChannel+0x7ca>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fdd2 	bl	800566c <LL_ADC_REG_IsConversionOngoing>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 83b8 	bne.w	8006240 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d824      	bhi.n	8005b22 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	3b02      	subs	r3, #2
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d81b      	bhi.n	8005b1a <HAL_ADC_ConfigChannel+0x86>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_ADC_ConfigChannel+0x54>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b01 	.word	0x08005b01
 8005af0:	08005b09 	.word	0x08005b09
 8005af4:	08005b11 	.word	0x08005b11
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	220c      	movs	r2, #12
 8005afc:	605a      	str	r2, [r3, #4]
          break;
 8005afe:	e010      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2212      	movs	r2, #18
 8005b04:	605a      	str	r2, [r3, #4]
          break;
 8005b06:	e00c      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2218      	movs	r2, #24
 8005b0c:	605a      	str	r2, [r3, #4]
          break;
 8005b0e:	e008      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b16:	605a      	str	r2, [r3, #4]
          break;
 8005b18:	e003      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	605a      	str	r2, [r3, #4]
          break;
 8005b20:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f7ff fc71 	bl	8005416 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fd97 	bl	800566c <LL_ADC_REG_IsConversionOngoing>
 8005b3e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fda3 	bl	8005692 <LL_ADC_INJ_IsConversionOngoing>
 8005b4c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 81c1 	bne.w	8005edc <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 81bc 	bne.w	8005edc <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6c:	d10f      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f7ff fc78 	bl	800546e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fc1f 	bl	80053ca <LL_ADC_SetSamplingTimeCommonConfig>
 8005b8c:	e00e      	b.n	8005bac <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7ff fc67 	bl	800546e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fc0f 	bl	80053ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	08db      	lsrs	r3, r3, #3
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d00a      	beq.n	8005be4 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6919      	ldr	r1, [r3, #16]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bde:	f7ff fb9f 	bl	8005320 <LL_ADC_SetOffset>
 8005be2:	e17b      	b.n	8005edc <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fbbc 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x17c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fbb1 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005c06:	4603      	mov	r3, r0
 8005c08:	0e9b      	lsrs	r3, r3, #26
 8005c0a:	f003 021f 	and.w	r2, r3, #31
 8005c0e:	e01e      	b.n	8005c4e <HAL_ADC_ConfigChannel+0x1ba>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fba6 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c26:	fa93 f3a3 	rbit	r3, r3
 8005c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8005c3e:	2320      	movs	r3, #32
 8005c40:	e004      	b.n	8005c4c <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8005c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c46:	fab3 f383 	clz	r3, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x1d2>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	0e9b      	lsrs	r3, r3, #26
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	e018      	b.n	8005c98 <HAL_ADC_ConfigChannel+0x204>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c72:	fa93 f3a3 	rbit	r3, r3
 8005c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8005c8a:	2320      	movs	r3, #32
 8005c8c:	e004      	b.n	8005c98 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8005c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c92:	fab3 f383 	clz	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d106      	bne.n	8005caa <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fb75 	bl	8005394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fb59 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x242>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fb4e 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	0e9b      	lsrs	r3, r3, #26
 8005cd0:	f003 021f 	and.w	r2, r3, #31
 8005cd4:	e01e      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x280>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2101      	movs	r1, #1
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fb43 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	e004      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8005d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d0c:	fab3 f383 	clz	r3, r3
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x298>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	0e9b      	lsrs	r3, r3, #26
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	e018      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x2ca>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8005d50:	2320      	movs	r3, #32
 8005d52:	e004      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8005d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d58:	fab3 f383 	clz	r3, r3
 8005d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d106      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fb12 	bl	8005394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2102      	movs	r1, #2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff faf6 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x308>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff faeb 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005d92:	4603      	mov	r3, r0
 8005d94:	0e9b      	lsrs	r3, r3, #26
 8005d96:	f003 021f 	and.w	r2, r3, #31
 8005d9a:	e01e      	b.n	8005dda <HAL_ADC_ConfigChannel+0x346>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2102      	movs	r1, #2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fae0 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8005dca:	2320      	movs	r3, #32
 8005dcc:	e004      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8005dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dd2:	fab3 f383 	clz	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x35e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	0e9b      	lsrs	r3, r3, #26
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	e016      	b.n	8005e20 <HAL_ADC_ConfigChannel+0x38c>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8005e12:	2320      	movs	r3, #32
 8005e14:	e004      	b.n	8005e20 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8005e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1a:	fab3 f383 	clz	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d106      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fab1 	bl	8005394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2103      	movs	r1, #3
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff fa95 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x3ca>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2103      	movs	r1, #3
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fa8a 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005e54:	4603      	mov	r3, r0
 8005e56:	0e9b      	lsrs	r3, r3, #26
 8005e58:	f003 021f 	and.w	r2, r3, #31
 8005e5c:	e017      	b.n	8005e8e <HAL_ADC_ConfigChannel+0x3fa>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2103      	movs	r1, #3
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fa7f 	bl	8005368 <LL_ADC_GetOffsetChannel>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e70:	fa93 f3a3 	rbit	r3, r3
 8005e74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8005e80:	2320      	movs	r3, #32
 8005e82:	e003      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8005e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e86:	fab3 f383 	clz	r3, r3
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x412>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	0e9b      	lsrs	r3, r3, #26
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	e011      	b.n	8005eca <HAL_ADC_ConfigChannel+0x436>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	e003      	b.n	8005eca <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec4:	fab3 f383 	clz	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d106      	bne.n	8005edc <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2103      	movs	r1, #3
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fa5c 	bl	8005394 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fb89 	bl	80055f8 <LL_ADC_IsEnabled>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f040 813f 	bne.w	800616c <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6819      	ldr	r1, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7ff fae2 	bl	80054c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a8e      	ldr	r2, [pc, #568]	; (8006140 <HAL_ADC_ConfigChannel+0x6ac>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f040 8130 	bne.w	800616c <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x4a0>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	0e9b      	lsrs	r3, r3, #26
 8005f22:	3301      	adds	r3, #1
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	bf94      	ite	ls
 8005f2c:	2301      	movls	r3, #1
 8005f2e:	2300      	movhi	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e019      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x4d4>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3c:	fa93 f3a3 	rbit	r3, r3
 8005f40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	e003      	b.n	8005f58 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8005f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2b09      	cmp	r3, #9
 8005f60:	bf94      	ite	ls
 8005f62:	2301      	movls	r3, #1
 8005f64:	2300      	movhi	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d079      	beq.n	8006060 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x4f4>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0e9b      	lsrs	r3, r3, #26
 8005f7e:	3301      	adds	r3, #1
 8005f80:	069b      	lsls	r3, r3, #26
 8005f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f86:	e015      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x520>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f90:	fa93 f3a3 	rbit	r3, r3
 8005f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	e003      	b.n	8005fac <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	fab3 f383 	clz	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	3301      	adds	r3, #1
 8005fae:	069b      	lsls	r3, r3, #26
 8005fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <HAL_ADC_ConfigChannel+0x540>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	0e9b      	lsrs	r3, r3, #26
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	e017      	b.n	8006004 <HAL_ADC_ConfigChannel+0x570>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fdc:	fa93 f3a3 	rbit	r3, r3
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8005fec:	2320      	movs	r3, #32
 8005fee:	e003      	b.n	8005ff8 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8005ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff2:	fab3 f383 	clz	r3, r3
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <HAL_ADC_ConfigChannel+0x596>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	0e9b      	lsrs	r3, r3, #26
 800601a:	3301      	adds	r3, #1
 800601c:	f003 021f 	and.w	r2, r3, #31
 8006020:	4613      	mov	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	4413      	add	r3, r2
 8006026:	051b      	lsls	r3, r3, #20
 8006028:	e018      	b.n	800605c <HAL_ADC_ConfigChannel+0x5c8>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	fa93 f3a3 	rbit	r3, r3
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8006042:	2320      	movs	r3, #32
 8006044:	e003      	b.n	800604e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	fab3 f383 	clz	r3, r3
 800604c:	b2db      	uxtb	r3, r3
 800604e:	3301      	adds	r3, #1
 8006050:	f003 021f 	and.w	r2, r3, #31
 8006054:	4613      	mov	r3, r2
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	4413      	add	r3, r2
 800605a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800605c:	430b      	orrs	r3, r1
 800605e:	e080      	b.n	8006162 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_ADC_ConfigChannel+0x5e8>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0e9b      	lsrs	r3, r3, #26
 8006072:	3301      	adds	r3, #1
 8006074:	069b      	lsls	r3, r3, #26
 8006076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800607a:	e015      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x614>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	fa93 f3a3 	rbit	r3, r3
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8006094:	2320      	movs	r3, #32
 8006096:	e003      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	3301      	adds	r3, #1
 80060a2:	069b      	lsls	r3, r3, #26
 80060a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x634>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	0e9b      	lsrs	r3, r3, #26
 80060ba:	3301      	adds	r3, #1
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	e017      	b.n	80060f8 <HAL_ADC_ConfigChannel+0x664>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	fa93 f3a3 	rbit	r3, r3
 80060d4:	61fb      	str	r3, [r7, #28]
  return result;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80060e0:	2320      	movs	r3, #32
 80060e2:	e003      	b.n	80060ec <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	3301      	adds	r3, #1
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2101      	movs	r1, #1
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	ea42 0103 	orr.w	r1, r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x690>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0e9b      	lsrs	r3, r3, #26
 800610e:	3301      	adds	r3, #1
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	4613      	mov	r3, r2
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	3b1e      	subs	r3, #30
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006122:	e01d      	b.n	8006160 <HAL_ADC_ConfigChannel+0x6cc>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	613b      	str	r3, [r7, #16]
  return result;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e005      	b.n	800614c <HAL_ADC_ConfigChannel+0x6b8>
 8006140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3301      	adds	r3, #1
 800614e:	f003 021f 	and.w	r2, r3, #31
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	3b1e      	subs	r3, #30
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006160:	430b      	orrs	r3, r1
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	6892      	ldr	r2, [r2, #8]
 8006166:	4619      	mov	r1, r3
 8006168:	f7ff f981 	bl	800546e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b3d      	ldr	r3, [pc, #244]	; (8006268 <HAL_ADC_ConfigChannel+0x7d4>)
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d06c      	beq.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006178:	483c      	ldr	r0, [pc, #240]	; (800626c <HAL_ADC_ConfigChannel+0x7d8>)
 800617a:	f7ff f8c3 	bl	8005304 <LL_ADC_GetCommonPathInternalCh>
 800617e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a3a      	ldr	r2, [pc, #232]	; (8006270 <HAL_ADC_ConfigChannel+0x7dc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d127      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800618c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d121      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a35      	ldr	r2, [pc, #212]	; (8006274 <HAL_ADC_ConfigChannel+0x7e0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d157      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061aa:	4619      	mov	r1, r3
 80061ac:	482f      	ldr	r0, [pc, #188]	; (800626c <HAL_ADC_ConfigChannel+0x7d8>)
 80061ae:	f7ff f896 	bl	80052de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061b2:	4b31      	ldr	r3, [pc, #196]	; (8006278 <HAL_ADC_ConfigChannel+0x7e4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	4a30      	ldr	r2, [pc, #192]	; (800627c <HAL_ADC_ConfigChannel+0x7e8>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80061cc:	e002      	b.n	80061d4 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f9      	bne.n	80061ce <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061da:	e03a      	b.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a27      	ldr	r2, [pc, #156]	; (8006280 <HAL_ADC_ConfigChannel+0x7ec>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d113      	bne.n	800620e <HAL_ADC_ConfigChannel+0x77a>
 80061e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <HAL_ADC_ConfigChannel+0x7e0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d12a      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006204:	4619      	mov	r1, r3
 8006206:	4819      	ldr	r0, [pc, #100]	; (800626c <HAL_ADC_ConfigChannel+0x7d8>)
 8006208:	f7ff f869 	bl	80052de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800620c:	e021      	b.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <HAL_ADC_ConfigChannel+0x7f0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d11c      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800621c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d116      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a12      	ldr	r2, [pc, #72]	; (8006274 <HAL_ADC_ConfigChannel+0x7e0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d111      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800622e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006236:	4619      	mov	r1, r3
 8006238:	480c      	ldr	r0, [pc, #48]	; (800626c <HAL_ADC_ConfigChannel+0x7d8>)
 800623a:	f7ff f850 	bl	80052de <LL_ADC_SetCommonPathInternalCh>
 800623e:	e008      	b.n	8006252 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800625a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800625e:	4618      	mov	r0, r3
 8006260:	37d8      	adds	r7, #216	; 0xd8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	80080000 	.word	0x80080000
 800626c:	50040300 	.word	0x50040300
 8006270:	c7520000 	.word	0xc7520000
 8006274:	50040000 	.word	0x50040000
 8006278:	20000174 	.word	0x20000174
 800627c:	053e2d63 	.word	0x053e2d63
 8006280:	cb840000 	.word	0xcb840000
 8006284:	80000001 	.word	0x80000001

08006288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f9ad 	bl	80055f8 <LL_ADC_IsEnabled>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d169      	bne.n	8006378 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	4b36      	ldr	r3, [pc, #216]	; (8006384 <ADC_Enable+0xfc>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	f043 0210 	orr.w	r2, r3, #16
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e055      	b.n	800637a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff f968 	bl	80055a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80062d8:	482b      	ldr	r0, [pc, #172]	; (8006388 <ADC_Enable+0x100>)
 80062da:	f7ff f813 	bl	8005304 <LL_ADC_GetCommonPathInternalCh>
 80062de:	4603      	mov	r3, r0
 80062e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d013      	beq.n	8006310 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062e8:	4b28      	ldr	r3, [pc, #160]	; (800638c <ADC_Enable+0x104>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	4a28      	ldr	r2, [pc, #160]	; (8006390 <ADC_Enable+0x108>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	099b      	lsrs	r3, r3, #6
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	4613      	mov	r3, r2
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006302:	e002      	b.n	800630a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	3b01      	subs	r3, #1
 8006308:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f9      	bne.n	8006304 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006310:	f7fe ffc6 	bl	80052a0 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006316:	e028      	b.n	800636a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff f96b 	bl	80055f8 <LL_ADC_IsEnabled>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f93b 	bl	80055a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006332:	f7fe ffb5 	bl	80052a0 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d914      	bls.n	800636a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d00d      	beq.n	800636a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f043 0210 	orr.w	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e007      	b.n	800637a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d1cf      	bne.n	8006318 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	8000003f 	.word	0x8000003f
 8006388:	50040300 	.word	0x50040300
 800638c:	20000174 	.word	0x20000174
 8006390:	053e2d63 	.word	0x053e2d63

08006394 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f93c 	bl	800561e <LL_ADC_IsDisableOngoing>
 80063a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff f923 	bl	80055f8 <LL_ADC_IsEnabled>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d047      	beq.n	8006448 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d144      	bne.n	8006448 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030d 	and.w	r3, r3, #13
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d10c      	bne.n	80063e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f8fd 	bl	80055d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2203      	movs	r2, #3
 80063dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063de:	f7fe ff5f 	bl	80052a0 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063e4:	e029      	b.n	800643a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	f043 0210 	orr.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e023      	b.n	800644a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006402:	f7fe ff4d 	bl	80052a0 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d914      	bls.n	800643a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	f043 0210 	orr.w	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	f043 0201 	orr.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e007      	b.n	800644a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1dc      	bne.n	8006402 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006468:	2b00      	cmp	r3, #0
 800646a:	d14b      	bne.n	8006504 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d021      	beq.n	80064ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe ffb0 	bl	80053f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d032      	beq.n	80064fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d12b      	bne.n	80064fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11f      	bne.n	80064fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f043 0201 	orr.w	r2, r3, #1
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	659a      	str	r2, [r3, #88]	; 0x58
 80064c8:	e018      	b.n	80064fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d111      	bne.n	80064fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	f043 0201 	orr.w	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff faab 	bl	8005a58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006502:	e00e      	b.n	8006522 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fab5 	bl	8005a80 <HAL_ADC_ErrorCallback>
}
 8006516:	e004      	b.n	8006522 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fa97 	bl	8005a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fa87 	bl	8005a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <LL_ADC_StartCalibration>:
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800658c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006596:	4313      	orrs	r3, r2
 8006598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <LL_ADC_IsCalibrationOnGoing>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c0:	d101      	bne.n	80065c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e04d      	b.n	800668c <HAL_ADCEx_Calibration_Start+0xb8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fecb 	bl	8006394 <ADC_Disable>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d136      	bne.n	8006676 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	f043 0202 	orr.w	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ffa9 	bl	800657a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006628:	e014      	b.n	8006654 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3301      	adds	r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006636:	d30d      	bcc.n	8006654 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f023 0312 	bic.w	r3, r3, #18
 8006640:	f043 0210 	orr.w	r2, r3, #16
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e01b      	b.n	800668c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ffa7 	bl	80065ac <LL_ADC_IsCalibrationOnGoing>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e2      	bne.n	800662a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	f023 0303 	bic.w	r3, r3, #3
 800666c:	f043 0201 	orr.w	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	659a      	str	r2, [r3, #88]	; 0x58
 8006674:	e005      	b.n	8006682 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667a:	f043 0210 	orr.w	r2, r3, #16
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <__NVIC_SetPriorityGrouping+0x44>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066b0:	4013      	ands	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066c6:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <__NVIC_SetPriorityGrouping+0x44>)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	60d3      	str	r3, [r2, #12]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	e000ed00 	.word	0xe000ed00

080066dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <__NVIC_GetPriorityGrouping+0x18>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 0307 	and.w	r3, r3, #7
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006706:	2b00      	cmp	r3, #0
 8006708:	db0b      	blt.n	8006722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	f003 021f 	and.w	r2, r3, #31
 8006710:	4907      	ldr	r1, [pc, #28]	; (8006730 <__NVIC_EnableIRQ+0x38>)
 8006712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	2001      	movs	r0, #1
 800671a:	fa00 f202 	lsl.w	r2, r0, r2
 800671e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	e000e100 	.word	0xe000e100

08006734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	6039      	str	r1, [r7, #0]
 800673e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006744:	2b00      	cmp	r3, #0
 8006746:	db0a      	blt.n	800675e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	490c      	ldr	r1, [pc, #48]	; (8006780 <__NVIC_SetPriority+0x4c>)
 800674e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006752:	0112      	lsls	r2, r2, #4
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	440b      	add	r3, r1
 8006758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800675c:	e00a      	b.n	8006774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	4908      	ldr	r1, [pc, #32]	; (8006784 <__NVIC_SetPriority+0x50>)
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	3b04      	subs	r3, #4
 800676c:	0112      	lsls	r2, r2, #4
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	440b      	add	r3, r1
 8006772:	761a      	strb	r2, [r3, #24]
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	e000e100 	.word	0xe000e100
 8006784:	e000ed00 	.word	0xe000ed00

08006788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006788:	b480      	push	{r7}
 800678a:	b089      	sub	sp, #36	; 0x24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f1c3 0307 	rsb	r3, r3, #7
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	bf28      	it	cs
 80067a6:	2304      	movcs	r3, #4
 80067a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3304      	adds	r3, #4
 80067ae:	2b06      	cmp	r3, #6
 80067b0:	d902      	bls.n	80067b8 <NVIC_EncodePriority+0x30>
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3b03      	subs	r3, #3
 80067b6:	e000      	b.n	80067ba <NVIC_EncodePriority+0x32>
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	43da      	mvns	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	401a      	ands	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067d0:	f04f 31ff 	mov.w	r1, #4294967295
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	43d9      	mvns	r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e0:	4313      	orrs	r3, r2
         );
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3724      	adds	r7, #36	; 0x24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006800:	d301      	bcc.n	8006806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006802:	2301      	movs	r3, #1
 8006804:	e00f      	b.n	8006826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006806:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <SysTick_Config+0x40>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3b01      	subs	r3, #1
 800680c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800680e:	210f      	movs	r1, #15
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	f7ff ff8e 	bl	8006734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <SysTick_Config+0x40>)
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <SysTick_Config+0x40>)
 8006820:	2207      	movs	r2, #7
 8006822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000e010 	.word	0xe000e010

08006834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff29 	bl	8006694 <__NVIC_SetPriorityGrouping>
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b086      	sub	sp, #24
 800684e:	af00      	add	r7, sp, #0
 8006850:	4603      	mov	r3, r0
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800685c:	f7ff ff3e 	bl	80066dc <__NVIC_GetPriorityGrouping>
 8006860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	6978      	ldr	r0, [r7, #20]
 8006868:	f7ff ff8e 	bl	8006788 <NVIC_EncodePriority>
 800686c:	4602      	mov	r2, r0
 800686e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff5d 	bl	8006734 <__NVIC_SetPriority>
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	4603      	mov	r3, r0
 800688a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800688c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff ff31 	bl	80066f8 <__NVIC_EnableIRQ>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ffa2 	bl	80067f0 <SysTick_Config>
 80068ac:	4603      	mov	r3, r0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e098      	b.n	80069fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	4b4d      	ldr	r3, [pc, #308]	; (8006a08 <HAL_DMA_Init+0x150>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d80f      	bhi.n	80068f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <HAL_DMA_Init+0x154>)
 80068de:	4413      	add	r3, r2
 80068e0:	4a4b      	ldr	r2, [pc, #300]	; (8006a10 <HAL_DMA_Init+0x158>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	009a      	lsls	r2, r3, #2
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a48      	ldr	r2, [pc, #288]	; (8006a14 <HAL_DMA_Init+0x15c>)
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
 80068f4:	e00e      	b.n	8006914 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b46      	ldr	r3, [pc, #280]	; (8006a18 <HAL_DMA_Init+0x160>)
 80068fe:	4413      	add	r3, r2
 8006900:	4a43      	ldr	r2, [pc, #268]	; (8006a10 <HAL_DMA_Init+0x158>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	009a      	lsls	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a42      	ldr	r2, [pc, #264]	; (8006a1c <HAL_DMA_Init+0x164>)
 8006912:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800696e:	d039      	beq.n	80069e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <HAL_DMA_Init+0x15c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d11a      	bne.n	80069b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800697a:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <HAL_DMA_Init+0x168>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	f003 031c 	and.w	r3, r3, #28
 8006986:	210f      	movs	r1, #15
 8006988:	fa01 f303 	lsl.w	r3, r1, r3
 800698c:	43db      	mvns	r3, r3
 800698e:	4924      	ldr	r1, [pc, #144]	; (8006a20 <HAL_DMA_Init+0x168>)
 8006990:	4013      	ands	r3, r2
 8006992:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006994:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <HAL_DMA_Init+0x168>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a0:	f003 031c 	and.w	r3, r3, #28
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	491d      	ldr	r1, [pc, #116]	; (8006a20 <HAL_DMA_Init+0x168>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	e019      	b.n	80069e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80069b0:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <HAL_DMA_Init+0x16c>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b8:	f003 031c 	and.w	r3, r3, #28
 80069bc:	210f      	movs	r1, #15
 80069be:	fa01 f303 	lsl.w	r3, r1, r3
 80069c2:	43db      	mvns	r3, r3
 80069c4:	4917      	ldr	r1, [pc, #92]	; (8006a24 <HAL_DMA_Init+0x16c>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80069ca:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <HAL_DMA_Init+0x16c>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	f003 031c 	and.w	r3, r3, #28
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	4911      	ldr	r1, [pc, #68]	; (8006a24 <HAL_DMA_Init+0x16c>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40020407 	.word	0x40020407
 8006a0c:	bffdfff8 	.word	0xbffdfff8
 8006a10:	cccccccd 	.word	0xcccccccd
 8006a14:	40020000 	.word	0x40020000
 8006a18:	bffdfbf8 	.word	0xbffdfbf8
 8006a1c:	40020400 	.word	0x40020400
 8006a20:	400200a8 	.word	0x400200a8
 8006a24:	400204a8 	.word	0x400204a8

08006a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_Start_IT+0x20>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e04b      	b.n	8006ae0 <HAL_DMA_Start_IT+0xb8>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d13a      	bne.n	8006ad2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f95f 	bl	8006d44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 020e 	orr.w	r2, r2, #14
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e00f      	b.n	8006ac0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0204 	bic.w	r2, r2, #4
 8006aae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 020a 	orr.w	r2, r2, #10
 8006abe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e005      	b.n	8006ade <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
 8006adc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d008      	beq.n	8006b12 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2204      	movs	r2, #4
 8006b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e022      	b.n	8006b58 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 020e 	bic.w	r2, r2, #14
 8006b20:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	f003 021c 	and.w	r2, r3, #28
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	2101      	movs	r1, #1
 8006b40:	fa01 f202 	lsl.w	r2, r1, r2
 8006b44:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d005      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
 8006b86:	e029      	b.n	8006bdc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 020e 	bic.w	r2, r2, #14
 8006b96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bac:	f003 021c 	and.w	r2, r3, #28
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006bba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
    }
  }
  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	f003 031c 	and.w	r3, r3, #28
 8006c06:	2204      	movs	r2, #4
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d026      	beq.n	8006c60 <HAL_DMA_IRQHandler+0x7a>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d021      	beq.n	8006c60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0204 	bic.w	r2, r2, #4
 8006c38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3e:	f003 021c 	and.w	r2, r3, #28
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2104      	movs	r1, #4
 8006c48:	fa01 f202 	lsl.w	r2, r1, r2
 8006c4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d071      	beq.n	8006d3a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006c5e:	e06c      	b.n	8006d3a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	f003 031c 	and.w	r3, r3, #28
 8006c68:	2202      	movs	r2, #2
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02e      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xec>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d029      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 020a 	bic.w	r2, r2, #10
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	f003 021c 	and.w	r2, r3, #28
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8006cb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d038      	beq.n	8006d3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006cd0:	e033      	b.n	8006d3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f003 031c 	and.w	r3, r3, #28
 8006cda:	2208      	movs	r2, #8
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d02a      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x156>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d025      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 020e 	bic.w	r2, r2, #14
 8006cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	f003 021c 	and.w	r2, r3, #28
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
}
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	f003 021c 	and.w	r2, r3, #28
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2101      	movs	r1, #1
 8006d60:	fa01 f202 	lsl.w	r2, r1, r2
 8006d64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d108      	bne.n	8006d88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d86:	e007      	b.n	8006d98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006db2:	e154      	b.n	800705e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	2101      	movs	r1, #1
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8146 	beq.w	8007058 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d005      	beq.n	8006de4 <HAL_GPIO_Init+0x40>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d130      	bne.n	8006e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	2203      	movs	r2, #3
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4013      	ands	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f003 0201 	and.w	r2, r3, #1
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d017      	beq.n	8006e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	2203      	movs	r2, #3
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	43db      	mvns	r3, r3
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4013      	ands	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d123      	bne.n	8006ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	08da      	lsrs	r2, r3, #3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3208      	adds	r2, #8
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	220f      	movs	r2, #15
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	08da      	lsrs	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3208      	adds	r2, #8
 8006ed0:	6939      	ldr	r1, [r7, #16]
 8006ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4013      	ands	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0203 	and.w	r2, r3, #3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80a0 	beq.w	8007058 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f18:	4b58      	ldr	r3, [pc, #352]	; (800707c <HAL_GPIO_Init+0x2d8>)
 8006f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1c:	4a57      	ldr	r2, [pc, #348]	; (800707c <HAL_GPIO_Init+0x2d8>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6613      	str	r3, [r2, #96]	; 0x60
 8006f24:	4b55      	ldr	r3, [pc, #340]	; (800707c <HAL_GPIO_Init+0x2d8>)
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f30:	4a53      	ldr	r2, [pc, #332]	; (8007080 <HAL_GPIO_Init+0x2dc>)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	089b      	lsrs	r3, r3, #2
 8006f36:	3302      	adds	r3, #2
 8006f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	220f      	movs	r2, #15
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4013      	ands	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f5a:	d019      	beq.n	8006f90 <HAL_GPIO_Init+0x1ec>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a49      	ldr	r2, [pc, #292]	; (8007084 <HAL_GPIO_Init+0x2e0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <HAL_GPIO_Init+0x1e8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a48      	ldr	r2, [pc, #288]	; (8007088 <HAL_GPIO_Init+0x2e4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00d      	beq.n	8006f88 <HAL_GPIO_Init+0x1e4>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a47      	ldr	r2, [pc, #284]	; (800708c <HAL_GPIO_Init+0x2e8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <HAL_GPIO_Init+0x1e0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a46      	ldr	r2, [pc, #280]	; (8007090 <HAL_GPIO_Init+0x2ec>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <HAL_GPIO_Init+0x1dc>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	e008      	b.n	8006f92 <HAL_GPIO_Init+0x1ee>
 8006f80:	2307      	movs	r3, #7
 8006f82:	e006      	b.n	8006f92 <HAL_GPIO_Init+0x1ee>
 8006f84:	2303      	movs	r3, #3
 8006f86:	e004      	b.n	8006f92 <HAL_GPIO_Init+0x1ee>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e002      	b.n	8006f92 <HAL_GPIO_Init+0x1ee>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <HAL_GPIO_Init+0x1ee>
 8006f90:	2300      	movs	r3, #0
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	f002 0203 	and.w	r2, r2, #3
 8006f98:	0092      	lsls	r2, r2, #2
 8006f9a:	4093      	lsls	r3, r2
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006fa2:	4937      	ldr	r1, [pc, #220]	; (8007080 <HAL_GPIO_Init+0x2dc>)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	3302      	adds	r3, #2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fb0:	4b38      	ldr	r3, [pc, #224]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006fd4:	4a2f      	ldr	r2, [pc, #188]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006fda:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ffe:	4a25      	ldr	r2, [pc, #148]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007004:	4b23      	ldr	r3, [pc, #140]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	43db      	mvns	r3, r3
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4013      	ands	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007028:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800702e:	4b19      	ldr	r3, [pc, #100]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	43db      	mvns	r3, r3
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4013      	ands	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007052:	4a10      	ldr	r2, [pc, #64]	; (8007094 <HAL_GPIO_Init+0x2f0>)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3301      	adds	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f aea3 	bne.w	8006db4 <HAL_GPIO_Init+0x10>
  }
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40021000 	.word	0x40021000
 8007080:	40010000 	.word	0x40010000
 8007084:	48000400 	.word	0x48000400
 8007088:	48000800 	.word	0x48000800
 800708c:	48000c00 	.word	0x48000c00
 8007090:	48001000 	.word	0x48001000
 8007094:	40010400 	.word	0x40010400

08007098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	887b      	ldrh	r3, [r7, #2]
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
 80070b4:	e001      	b.n	80070ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	807b      	strh	r3, [r7, #2]
 80070d4:	4613      	mov	r3, r2
 80070d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070d8:	787b      	ldrb	r3, [r7, #1]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070de:	887a      	ldrh	r2, [r7, #2]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070e4:	e002      	b.n	80070ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800710a:	887a      	ldrh	r2, [r7, #2]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4013      	ands	r3, r2
 8007110:	041a      	lsls	r2, r3, #16
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	43d9      	mvns	r1, r3
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	400b      	ands	r3, r1
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007136:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d006      	beq.n	8007150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007142:	4a05      	ldr	r2, [pc, #20]	; (8007158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fc f9ea 	bl	8003524 <HAL_GPIO_EXTI_Callback>
  }
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40010400 	.word	0x40010400

0800715c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <HAL_PWREx_GetVoltageRange+0x18>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40007000 	.word	0x40007000

08007178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007186:	d130      	bne.n	80071ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007188:	4b23      	ldr	r3, [pc, #140]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007194:	d038      	beq.n	8007208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800719e:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2232      	movs	r2, #50	; 0x32
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	0c9b      	lsrs	r3, r3, #18
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071bc:	e002      	b.n	80071c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c4:	4b14      	ldr	r3, [pc, #80]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d0:	d102      	bne.n	80071d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f2      	bne.n	80071be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d110      	bne.n	8007208 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e00f      	b.n	800720a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80071ea:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d007      	beq.n	8007208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007200:	4a05      	ldr	r2, [pc, #20]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007206:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40007000 	.word	0x40007000
 800721c:	20000174 	.word	0x20000174
 8007220:	431bde83 	.word	0x431bde83

08007224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f000 bc02 	b.w	8007a3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007238:	4b96      	ldr	r3, [pc, #600]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 030c 	and.w	r3, r3, #12
 8007240:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007242:	4b94      	ldr	r3, [pc, #592]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80e4 	beq.w	8007422 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_RCC_OscConfig+0x4c>
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b0c      	cmp	r3, #12
 8007264:	f040 808b 	bne.w	800737e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b01      	cmp	r3, #1
 800726c:	f040 8087 	bne.w	800737e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007270:	4b88      	ldr	r3, [pc, #544]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_OscConfig+0x64>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e3d9      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1a      	ldr	r2, [r3, #32]
 800728c:	4b81      	ldr	r3, [pc, #516]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <HAL_RCC_OscConfig+0x7e>
 8007298:	4b7e      	ldr	r3, [pc, #504]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a0:	e005      	b.n	80072ae <HAL_RCC_OscConfig+0x8a>
 80072a2:	4b7c      	ldr	r3, [pc, #496]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d223      	bcs.n	80072fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fd8c 	bl	8007dd4 <RCC_SetFlashLatencyFromMSIRange>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e3ba      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072c6:	4b73      	ldr	r3, [pc, #460]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a72      	ldr	r2, [pc, #456]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072cc:	f043 0308 	orr.w	r3, r3, #8
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4b70      	ldr	r3, [pc, #448]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	496d      	ldr	r1, [pc, #436]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072e4:	4b6b      	ldr	r3, [pc, #428]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	4968      	ldr	r1, [pc, #416]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	604b      	str	r3, [r1, #4]
 80072f8:	e025      	b.n	8007346 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072fa:	4b66      	ldr	r3, [pc, #408]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a65      	ldr	r2, [pc, #404]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007300:	f043 0308 	orr.w	r3, r3, #8
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	4b63      	ldr	r3, [pc, #396]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	4960      	ldr	r1, [pc, #384]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007318:	4b5e      	ldr	r3, [pc, #376]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	495b      	ldr	r1, [pc, #364]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007328:	4313      	orrs	r3, r2
 800732a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fd4c 	bl	8007dd4 <RCC_SetFlashLatencyFromMSIRange>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e37a      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007346:	f000 fc81 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800734a:	4602      	mov	r2, r0
 800734c:	4b51      	ldr	r3, [pc, #324]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	4950      	ldr	r1, [pc, #320]	; (8007498 <HAL_RCC_OscConfig+0x274>)
 8007358:	5ccb      	ldrb	r3, [r1, r3]
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	fa22 f303 	lsr.w	r3, r2, r3
 8007362:	4a4e      	ldr	r2, [pc, #312]	; (800749c <HAL_RCC_OscConfig+0x278>)
 8007364:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007366:	4b4e      	ldr	r3, [pc, #312]	; (80074a0 <HAL_RCC_OscConfig+0x27c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7fd ff48 	bl	8005200 <HAL_InitTick>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d052      	beq.n	8007420 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	e35e      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d032      	beq.n	80073ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007386:	4b43      	ldr	r3, [pc, #268]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a42      	ldr	r2, [pc, #264]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007392:	f7fd ff85 	bl	80052a0 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800739a:	f7fd ff81 	bl	80052a0 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e347      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073ac:	4b39      	ldr	r3, [pc, #228]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f0      	beq.n	800739a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073b8:	4b36      	ldr	r3, [pc, #216]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a35      	ldr	r2, [pc, #212]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073be:	f043 0308 	orr.w	r3, r3, #8
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	4b33      	ldr	r3, [pc, #204]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	4930      	ldr	r1, [pc, #192]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073d6:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	492b      	ldr	r1, [pc, #172]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	604b      	str	r3, [r1, #4]
 80073ea:	e01a      	b.n	8007422 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073ec:	4b29      	ldr	r3, [pc, #164]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a28      	ldr	r2, [pc, #160]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073f8:	f7fd ff52 	bl	80052a0 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007400:	f7fd ff4e 	bl	80052a0 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e314      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x1dc>
 800741e:	e000      	b.n	8007422 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007420:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d073      	beq.n	8007516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d005      	beq.n	8007440 <HAL_RCC_OscConfig+0x21c>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b0c      	cmp	r3, #12
 8007438:	d10e      	bne.n	8007458 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d10b      	bne.n	8007458 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007440:	4b14      	ldr	r3, [pc, #80]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d063      	beq.n	8007514 <HAL_RCC_OscConfig+0x2f0>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d15f      	bne.n	8007514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e2f1      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d106      	bne.n	8007470 <HAL_RCC_OscConfig+0x24c>
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	e025      	b.n	80074bc <HAL_RCC_OscConfig+0x298>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007478:	d114      	bne.n	80074a4 <HAL_RCC_OscConfig+0x280>
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a05      	ldr	r2, [pc, #20]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	4b03      	ldr	r3, [pc, #12]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a02      	ldr	r2, [pc, #8]	; (8007494 <HAL_RCC_OscConfig+0x270>)
 800748c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e013      	b.n	80074bc <HAL_RCC_OscConfig+0x298>
 8007494:	40021000 	.word	0x40021000
 8007498:	08011b40 	.word	0x08011b40
 800749c:	20000174 	.word	0x20000174
 80074a0:	20000178 	.word	0x20000178
 80074a4:	4ba0      	ldr	r3, [pc, #640]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a9f      	ldr	r2, [pc, #636]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80074aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b9d      	ldr	r3, [pc, #628]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a9c      	ldr	r2, [pc, #624]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d013      	beq.n	80074ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fd feec 	bl	80052a0 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074cc:	f7fd fee8 	bl	80052a0 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b64      	cmp	r3, #100	; 0x64
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e2ae      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074de:	4b92      	ldr	r3, [pc, #584]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0f0      	beq.n	80074cc <HAL_RCC_OscConfig+0x2a8>
 80074ea:	e014      	b.n	8007516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fd fed8 	bl	80052a0 <HAL_GetTick>
 80074f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f4:	f7fd fed4 	bl	80052a0 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b64      	cmp	r3, #100	; 0x64
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e29a      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007506:	4b88      	ldr	r3, [pc, #544]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f0      	bne.n	80074f4 <HAL_RCC_OscConfig+0x2d0>
 8007512:	e000      	b.n	8007516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d060      	beq.n	80075e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d005      	beq.n	8007534 <HAL_RCC_OscConfig+0x310>
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b0c      	cmp	r3, #12
 800752c:	d119      	bne.n	8007562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d116      	bne.n	8007562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007534:	4b7c      	ldr	r3, [pc, #496]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_RCC_OscConfig+0x328>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e277      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754c:	4b76      	ldr	r3, [pc, #472]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	4973      	ldr	r1, [pc, #460]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800755c:	4313      	orrs	r3, r2
 800755e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007560:	e040      	b.n	80075e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d023      	beq.n	80075b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800756a:	4b6f      	ldr	r3, [pc, #444]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a6e      	ldr	r2, [pc, #440]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007576:	f7fd fe93 	bl	80052a0 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757e:	f7fd fe8f 	bl	80052a0 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e255      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007590:	4b65      	ldr	r3, [pc, #404]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0f0      	beq.n	800757e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759c:	4b62      	ldr	r3, [pc, #392]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	061b      	lsls	r3, r3, #24
 80075aa:	495f      	ldr	r1, [pc, #380]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	604b      	str	r3, [r1, #4]
 80075b0:	e018      	b.n	80075e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075b2:	4b5d      	ldr	r3, [pc, #372]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a5c      	ldr	r2, [pc, #368]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80075b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075be:	f7fd fe6f 	bl	80052a0 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075c6:	f7fd fe6b 	bl	80052a0 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e231      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075d8:	4b53      	ldr	r3, [pc, #332]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f0      	bne.n	80075c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d03c      	beq.n	800766a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01c      	beq.n	8007632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075f8:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80075fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fe:	4a4a      	ldr	r2, [pc, #296]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007608:	f7fd fe4a 	bl	80052a0 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007610:	f7fd fe46 	bl	80052a0 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e20c      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0ef      	beq.n	8007610 <HAL_RCC_OscConfig+0x3ec>
 8007630:	e01b      	b.n	800766a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007632:	4b3d      	ldr	r3, [pc, #244]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007638:	4a3b      	ldr	r2, [pc, #236]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007642:	f7fd fe2d 	bl	80052a0 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800764a:	f7fd fe29 	bl	80052a0 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e1ef      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800765c:	4b32      	ldr	r3, [pc, #200]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800765e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1ef      	bne.n	800764a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80a6 	beq.w	80077c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007678:	2300      	movs	r3, #0
 800767a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800767c:	4b2a      	ldr	r3, [pc, #168]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10d      	bne.n	80076a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007692:	6593      	str	r3, [r2, #88]	; 0x58
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076a4:	4b21      	ldr	r3, [pc, #132]	; (800772c <HAL_RCC_OscConfig+0x508>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d118      	bne.n	80076e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076b0:	4b1e      	ldr	r3, [pc, #120]	; (800772c <HAL_RCC_OscConfig+0x508>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1d      	ldr	r2, [pc, #116]	; (800772c <HAL_RCC_OscConfig+0x508>)
 80076b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076bc:	f7fd fdf0 	bl	80052a0 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c4:	f7fd fdec 	bl	80052a0 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e1b2      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <HAL_RCC_OscConfig+0x508>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d108      	bne.n	80076fc <HAL_RCC_OscConfig+0x4d8>
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076fa:	e029      	b.n	8007750 <HAL_RCC_OscConfig+0x52c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b05      	cmp	r3, #5
 8007702:	d115      	bne.n	8007730 <HAL_RCC_OscConfig+0x50c>
 8007704:	4b08      	ldr	r3, [pc, #32]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	4a07      	ldr	r2, [pc, #28]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800770c:	f043 0304 	orr.w	r3, r3, #4
 8007710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007714:	4b04      	ldr	r3, [pc, #16]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	4a03      	ldr	r2, [pc, #12]	; (8007728 <HAL_RCC_OscConfig+0x504>)
 800771c:	f043 0301 	orr.w	r3, r3, #1
 8007720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007724:	e014      	b.n	8007750 <HAL_RCC_OscConfig+0x52c>
 8007726:	bf00      	nop
 8007728:	40021000 	.word	0x40021000
 800772c:	40007000 	.word	0x40007000
 8007730:	4b9a      	ldr	r3, [pc, #616]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007736:	4a99      	ldr	r2, [pc, #612]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007740:	4b96      	ldr	r3, [pc, #600]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007746:	4a95      	ldr	r2, [pc, #596]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007748:	f023 0304 	bic.w	r3, r3, #4
 800774c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007758:	f7fd fda2 	bl	80052a0 <HAL_GetTick>
 800775c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800775e:	e00a      	b.n	8007776 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007760:	f7fd fd9e 	bl	80052a0 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	f241 3288 	movw	r2, #5000	; 0x1388
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e162      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007776:	4b89      	ldr	r3, [pc, #548]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0ed      	beq.n	8007760 <HAL_RCC_OscConfig+0x53c>
 8007784:	e015      	b.n	80077b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007786:	f7fd fd8b 	bl	80052a0 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778e:	f7fd fd87 	bl	80052a0 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f241 3288 	movw	r2, #5000	; 0x1388
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e14b      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077a4:	4b7d      	ldr	r3, [pc, #500]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1ed      	bne.n	800778e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b8:	4b78      	ldr	r3, [pc, #480]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	4a77      	ldr	r2, [pc, #476]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80077be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d03c      	beq.n	800784a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01c      	beq.n	8007812 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077d8:	4b70      	ldr	r3, [pc, #448]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80077da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077de:	4a6f      	ldr	r2, [pc, #444]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e8:	f7fd fd5a 	bl	80052a0 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077f0:	f7fd fd56 	bl	80052a0 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e11c      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007802:	4b66      	ldr	r3, [pc, #408]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0ef      	beq.n	80077f0 <HAL_RCC_OscConfig+0x5cc>
 8007810:	e01b      	b.n	800784a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007812:	4b62      	ldr	r3, [pc, #392]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007818:	4a60      	ldr	r2, [pc, #384]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007822:	f7fd fd3d 	bl	80052a0 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800782a:	f7fd fd39 	bl	80052a0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e0ff      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800783c:	4b57      	ldr	r3, [pc, #348]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800783e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1ef      	bne.n	800782a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 80f3 	beq.w	8007a3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	2b02      	cmp	r3, #2
 800785a:	f040 80c9 	bne.w	80079f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800785e:	4b4f      	ldr	r3, [pc, #316]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f003 0203 	and.w	r2, r3, #3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	429a      	cmp	r2, r3
 8007870:	d12c      	bne.n	80078cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	3b01      	subs	r3, #1
 800787e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007880:	429a      	cmp	r2, r3
 8007882:	d123      	bne.n	80078cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007890:	429a      	cmp	r2, r3
 8007892:	d11b      	bne.n	80078cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d113      	bne.n	80078cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	3b01      	subs	r3, #1
 80078b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d109      	bne.n	80078cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	3b01      	subs	r3, #1
 80078c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d06b      	beq.n	80079a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b0c      	cmp	r3, #12
 80078d0:	d062      	beq.n	8007998 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80078d2:	4b32      	ldr	r3, [pc, #200]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e0ac      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80078e2:	4b2e      	ldr	r3, [pc, #184]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2d      	ldr	r2, [pc, #180]	; (800799c <HAL_RCC_OscConfig+0x778>)
 80078e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078ee:	f7fd fcd7 	bl	80052a0 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fd fcd3 	bl	80052a0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e099      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007908:	4b24      	ldr	r3, [pc, #144]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007914:	4b21      	ldr	r3, [pc, #132]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <HAL_RCC_OscConfig+0x77c>)
 800791a:	4013      	ands	r3, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007924:	3a01      	subs	r2, #1
 8007926:	0112      	lsls	r2, r2, #4
 8007928:	4311      	orrs	r1, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800792e:	0212      	lsls	r2, r2, #8
 8007930:	4311      	orrs	r1, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007936:	0852      	lsrs	r2, r2, #1
 8007938:	3a01      	subs	r2, #1
 800793a:	0552      	lsls	r2, r2, #21
 800793c:	4311      	orrs	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007942:	0852      	lsrs	r2, r2, #1
 8007944:	3a01      	subs	r2, #1
 8007946:	0652      	lsls	r2, r2, #25
 8007948:	4311      	orrs	r1, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800794e:	06d2      	lsls	r2, r2, #27
 8007950:	430a      	orrs	r2, r1
 8007952:	4912      	ldr	r1, [pc, #72]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007954:	4313      	orrs	r3, r2
 8007956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007958:	4b10      	ldr	r3, [pc, #64]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a0f      	ldr	r2, [pc, #60]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800795e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <HAL_RCC_OscConfig+0x778>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4a0c      	ldr	r2, [pc, #48]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800796a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800796e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007970:	f7fd fc96 	bl	80052a0 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007978:	f7fd fc92 	bl	80052a0 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e058      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800798a:	4b04      	ldr	r3, [pc, #16]	; (800799c <HAL_RCC_OscConfig+0x778>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0f0      	beq.n	8007978 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007996:	e050      	b.n	8007a3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e04f      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
 800799c:	40021000 	.word	0x40021000
 80079a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079a4:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d144      	bne.n	8007a3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079c8:	f7fd fc6a 	bl	80052a0 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d0:	f7fd fc66 	bl	80052a0 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e02c      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079e2:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f0      	beq.n	80079d0 <HAL_RCC_OscConfig+0x7ac>
 80079ee:	e024      	b.n	8007a3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2b0c      	cmp	r3, #12
 80079f4:	d01f      	beq.n	8007a36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 80079fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a02:	f7fd fc4d 	bl	80052a0 <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a08:	e008      	b.n	8007a1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a0a:	f7fd fc49 	bl	80052a0 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e00f      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f0      	bne.n	8007a0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	4905      	ldr	r1, [pc, #20]	; (8007a44 <HAL_RCC_OscConfig+0x820>)
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <HAL_RCC_OscConfig+0x824>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60cb      	str	r3, [r1, #12]
 8007a34:	e001      	b.n	8007a3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000
 8007a48:	feeefffc 	.word	0xfeeefffc

08007a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0e7      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a60:	4b75      	ldr	r3, [pc, #468]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d910      	bls.n	8007a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6e:	4b72      	ldr	r3, [pc, #456]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f023 0207 	bic.w	r2, r3, #7
 8007a76:	4970      	ldr	r1, [pc, #448]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7e:	4b6e      	ldr	r3, [pc, #440]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d001      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0cf      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d010      	beq.n	8007abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	4b66      	ldr	r3, [pc, #408]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d908      	bls.n	8007abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aac:	4b63      	ldr	r3, [pc, #396]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4960      	ldr	r1, [pc, #384]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d04c      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d107      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ad2:	4b5a      	ldr	r3, [pc, #360]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d121      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0a6      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d107      	bne.n	8007afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aea:	4b54      	ldr	r3, [pc, #336]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d115      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e09a      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b02:	4b4e      	ldr	r3, [pc, #312]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e08e      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b12:	4b4a      	ldr	r3, [pc, #296]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e086      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b22:	4b46      	ldr	r3, [pc, #280]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f023 0203 	bic.w	r2, r3, #3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4943      	ldr	r1, [pc, #268]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b34:	f7fd fbb4 	bl	80052a0 <HAL_GetTick>
 8007b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3a:	e00a      	b.n	8007b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b3c:	f7fd fbb0 	bl	80052a0 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e06e      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b52:	4b3a      	ldr	r3, [pc, #232]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 020c 	and.w	r2, r3, #12
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d1eb      	bne.n	8007b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d208      	bcs.n	8007b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b80:	4b2e      	ldr	r3, [pc, #184]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	492b      	ldr	r1, [pc, #172]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d210      	bcs.n	8007bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f023 0207 	bic.w	r2, r3, #7
 8007ba8:	4923      	ldr	r1, [pc, #140]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb0:	4b21      	ldr	r3, [pc, #132]	; (8007c38 <HAL_RCC_ClockConfig+0x1ec>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d001      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e036      	b.n	8007c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bce:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	4918      	ldr	r1, [pc, #96]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bec:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	4910      	ldr	r1, [pc, #64]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c00:	f000 f824 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 8007c04:	4602      	mov	r2, r0
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <HAL_RCC_ClockConfig+0x1f0>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	490b      	ldr	r1, [pc, #44]	; (8007c40 <HAL_RCC_ClockConfig+0x1f4>)
 8007c12:	5ccb      	ldrb	r3, [r1, r3]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1c:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <HAL_RCC_ClockConfig+0x1f8>)
 8007c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c20:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <HAL_RCC_ClockConfig+0x1fc>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fd faeb 	bl	8005200 <HAL_InitTick>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	40022000 	.word	0x40022000
 8007c3c:	40021000 	.word	0x40021000
 8007c40:	08011b40 	.word	0x08011b40
 8007c44:	20000174 	.word	0x20000174
 8007c48:	20000178 	.word	0x20000178

08007c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b089      	sub	sp, #36	; 0x24
 8007c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c5a:	4b3e      	ldr	r3, [pc, #248]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 030c 	and.w	r3, r3, #12
 8007c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c64:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x34>
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b0c      	cmp	r3, #12
 8007c78:	d121      	bne.n	8007cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d11e      	bne.n	8007cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c80:	4b34      	ldr	r3, [pc, #208]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c8c:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e005      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c9c:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007ca8:	4a2b      	ldr	r2, [pc, #172]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10d      	bne.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d102      	bne.n	8007cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e004      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8007cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b0c      	cmp	r3, #12
 8007cd8:	d134      	bne.n	8007d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cda:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d003      	beq.n	8007cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8007cf0:	e005      	b.n	8007cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8007cf4:	617b      	str	r3, [r7, #20]
      break;
 8007cf6:	e005      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8007cfa:	617b      	str	r3, [r7, #20]
      break;
 8007cfc:	e002      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	617b      	str	r3, [r7, #20]
      break;
 8007d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d04:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	091b      	lsrs	r3, r3, #4
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	3301      	adds	r3, #1
 8007d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	fb03 f202 	mul.w	r2, r3, r2
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	0e5b      	lsrs	r3, r3, #25
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	3301      	adds	r3, #1
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d44:	69bb      	ldr	r3, [r7, #24]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3724      	adds	r7, #36	; 0x24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40021000 	.word	0x40021000
 8007d58:	08011b58 	.word	0x08011b58
 8007d5c:	00f42400 	.word	0x00f42400
 8007d60:	007a1200 	.word	0x007a1200

08007d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d68:	4b03      	ldr	r3, [pc, #12]	; (8007d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000174 	.word	0x20000174

08007d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d80:	f7ff fff0 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4904      	ldr	r1, [pc, #16]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40021000 	.word	0x40021000
 8007da4:	08011b50 	.word	0x08011b50

08007da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007dac:	f7ff ffda 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0adb      	lsrs	r3, r3, #11
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4904      	ldr	r1, [pc, #16]	; (8007dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dbe:	5ccb      	ldrb	r3, [r1, r3]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	08011b50 	.word	0x08011b50

08007dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ddc:	2300      	movs	r3, #0
 8007dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007de0:	4b2a      	ldr	r3, [pc, #168]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007dec:	f7ff f9b6 	bl	800715c <HAL_PWREx_GetVoltageRange>
 8007df0:	6178      	str	r0, [r7, #20]
 8007df2:	e014      	b.n	8007e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007df4:	4b25      	ldr	r3, [pc, #148]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	4a24      	ldr	r2, [pc, #144]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8007e00:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e0c:	f7ff f9a6 	bl	800715c <HAL_PWREx_GetVoltageRange>
 8007e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	4a1d      	ldr	r2, [pc, #116]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d10b      	bne.n	8007e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d919      	bls.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8007e30:	d902      	bls.n	8007e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e32:	2302      	movs	r3, #2
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	e013      	b.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e38:	2301      	movs	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	e010      	b.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d902      	bls.n	8007e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e44:	2303      	movs	r3, #3
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	e00a      	b.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d102      	bne.n	8007e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e50:	2302      	movs	r3, #2
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	e004      	b.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b70      	cmp	r3, #112	; 0x70
 8007e5a:	d101      	bne.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f023 0207 	bic.w	r2, r3, #7
 8007e68:	4909      	ldr	r1, [pc, #36]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d001      	beq.n	8007e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40021000 	.word	0x40021000
 8007e90:	40022000 	.word	0x40022000

08007e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d031      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007eb8:	d01a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ebe:	d814      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ec8:	d10f      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007eca:	4b5d      	ldr	r3, [pc, #372]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	4a5c      	ldr	r2, [pc, #368]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ed6:	e00c      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3304      	adds	r3, #4
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fa44 	bl	800836c <RCCEx_PLLSAI1_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ee8:	e003      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	74fb      	strb	r3, [r7, #19]
      break;
 8007eee:	e000      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef2:	7cfb      	ldrb	r3, [r7, #19]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ef8:	4b51      	ldr	r3, [pc, #324]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	494e      	ldr	r1, [pc, #312]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f0e:	e001      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	7cfb      	ldrb	r3, [r7, #19]
 8007f12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 809e 	beq.w	800805e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f22:	2300      	movs	r3, #0
 8007f24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f26:	4b46      	ldr	r3, [pc, #280]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007f36:	2300      	movs	r3, #0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00d      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f3c:	4b40      	ldr	r3, [pc, #256]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	4a3f      	ldr	r2, [pc, #252]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f46:	6593      	str	r3, [r2, #88]	; 0x58
 8007f48:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f50:	60bb      	str	r3, [r7, #8]
 8007f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f54:	2301      	movs	r3, #1
 8007f56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f58:	4b3a      	ldr	r3, [pc, #232]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a39      	ldr	r2, [pc, #228]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f64:	f7fd f99c 	bl	80052a0 <HAL_GetTick>
 8007f68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f6a:	e009      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6c:	f7fd f998 	bl	80052a0 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d902      	bls.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8007f7e:	e005      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f80:	4b30      	ldr	r3, [pc, #192]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0ef      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007f8c:	7cfb      	ldrb	r3, [r7, #19]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d15a      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f92:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01e      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d019      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fae:	4b24      	ldr	r3, [pc, #144]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fba:	4b21      	ldr	r3, [pc, #132]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fca:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fda:	4a19      	ldr	r2, [pc, #100]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d016      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fec:	f7fd f958 	bl	80052a0 <HAL_GetTick>
 8007ff0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff2:	e00b      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fd f954 	bl	80052a0 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d902      	bls.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	74fb      	strb	r3, [r7, #19]
            break;
 800800a:	e006      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0ec      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800802e:	4904      	ldr	r1, [pc, #16]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008036:	e009      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008038:	7cfb      	ldrb	r3, [r7, #19]
 800803a:	74bb      	strb	r3, [r7, #18]
 800803c:	e006      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800803e:	bf00      	nop
 8008040:	40021000 	.word	0x40021000
 8008044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	7cfb      	ldrb	r3, [r7, #19]
 800804a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800804c:	7c7b      	ldrb	r3, [r7, #17]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d105      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008052:	4b9e      	ldr	r3, [pc, #632]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	4a9d      	ldr	r2, [pc, #628]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800806a:	4b98      	ldr	r3, [pc, #608]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	f023 0203 	bic.w	r2, r3, #3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	4994      	ldr	r1, [pc, #592]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800808c:	4b8f      	ldr	r3, [pc, #572]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800808e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008092:	f023 020c 	bic.w	r2, r3, #12
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	498c      	ldr	r1, [pc, #560]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080ae:	4b87      	ldr	r3, [pc, #540]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	4983      	ldr	r1, [pc, #524]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00a      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080d0:	4b7e      	ldr	r3, [pc, #504]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	497b      	ldr	r1, [pc, #492]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00a      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080f2:	4b76      	ldr	r3, [pc, #472]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80080f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	4972      	ldr	r1, [pc, #456]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008102:	4313      	orrs	r3, r2
 8008104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008114:	4b6d      	ldr	r3, [pc, #436]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008122:	496a      	ldr	r1, [pc, #424]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008124:	4313      	orrs	r3, r2
 8008126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008136:	4b65      	ldr	r3, [pc, #404]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008144:	4961      	ldr	r1, [pc, #388]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008146:	4313      	orrs	r3, r2
 8008148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008158:	4b5c      	ldr	r3, [pc, #368]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	4959      	ldr	r1, [pc, #356]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008168:	4313      	orrs	r3, r2
 800816a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800817a:	4b54      	ldr	r3, [pc, #336]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	4950      	ldr	r1, [pc, #320]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800819c:	4b4b      	ldr	r3, [pc, #300]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	4948      	ldr	r1, [pc, #288]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081be:	4b43      	ldr	r3, [pc, #268]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081c4:	f023 0203 	bic.w	r2, r3, #3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	493f      	ldr	r1, [pc, #252]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d028      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	4937      	ldr	r1, [pc, #220]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fe:	d106      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008200:	4b32      	ldr	r3, [pc, #200]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	4a31      	ldr	r2, [pc, #196]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800820a:	60d3      	str	r3, [r2, #12]
 800820c:	e011      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008216:	d10c      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f8a4 	bl	800836c <RCCEx_PLLSAI1_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008228:	7cfb      	ldrb	r3, [r7, #19]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800822e:	7cfb      	ldrb	r3, [r7, #19]
 8008230:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d028      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800823e:	4b23      	ldr	r3, [pc, #140]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824c:	491f      	ldr	r1, [pc, #124]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800825c:	d106      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800825e:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008268:	60d3      	str	r3, [r2, #12]
 800826a:	e011      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008274:	d10c      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3304      	adds	r3, #4
 800827a:	2101      	movs	r1, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f875 	bl	800836c <RCCEx_PLLSAI1_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008286:	7cfb      	ldrb	r3, [r7, #19]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d02b      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	4908      	ldr	r1, [pc, #32]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ba:	d109      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082bc:	4b03      	ldr	r3, [pc, #12]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	4a02      	ldr	r2, [pc, #8]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80082c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c6:	60d3      	str	r3, [r2, #12]
 80082c8:	e014      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80082ca:	bf00      	nop
 80082cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082d8:	d10c      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3304      	adds	r3, #4
 80082de:	2101      	movs	r1, #1
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f843 	bl	800836c <RCCEx_PLLSAI1_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082ea:	7cfb      	ldrb	r3, [r7, #19]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80082f0:	7cfb      	ldrb	r3, [r7, #19]
 80082f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01c      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008300:	4b19      	ldr	r3, [pc, #100]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	4916      	ldr	r1, [pc, #88]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831e:	d10c      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	2102      	movs	r1, #2
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f820 	bl	800836c <RCCEx_PLLSAI1_Config>
 800832c:	4603      	mov	r3, r0
 800832e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008330:	7cfb      	ldrb	r3, [r7, #19]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8008336:	7cfb      	ldrb	r3, [r7, #19]
 8008338:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008346:	4b08      	ldr	r3, [pc, #32]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	4904      	ldr	r1, [pc, #16]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800835c:	7cbb      	ldrb	r3, [r7, #18]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40021000 	.word	0x40021000

0800836c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800837a:	4b74      	ldr	r3, [pc, #464]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008386:	4b71      	ldr	r3, [pc, #452]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f003 0203 	and.w	r2, r3, #3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d10d      	bne.n	80083b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
       ||
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800839e:	4b6b      	ldr	r3, [pc, #428]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	091b      	lsrs	r3, r3, #4
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
       ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d047      	beq.n	8008442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	e044      	b.n	8008442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d018      	beq.n	80083f2 <RCCEx_PLLSAI1_Config+0x86>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d825      	bhi.n	8008410 <RCCEx_PLLSAI1_Config+0xa4>
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d002      	beq.n	80083ce <RCCEx_PLLSAI1_Config+0x62>
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d009      	beq.n	80083e0 <RCCEx_PLLSAI1_Config+0x74>
 80083cc:	e020      	b.n	8008410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80083ce:	4b5f      	ldr	r3, [pc, #380]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d11d      	bne.n	8008416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083de:	e01a      	b.n	8008416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80083e0:	4b5a      	ldr	r3, [pc, #360]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d116      	bne.n	800841a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f0:	e013      	b.n	800841a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80083f2:	4b56      	ldr	r3, [pc, #344]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10f      	bne.n	800841e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80083fe:	4b53      	ldr	r3, [pc, #332]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800840e:	e006      	b.n	800841e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
      break;
 8008414:	e004      	b.n	8008420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008416:	bf00      	nop
 8008418:	e002      	b.n	8008420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800841e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008426:	4b49      	ldr	r3, [pc, #292]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6819      	ldr	r1, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	3b01      	subs	r3, #1
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	430b      	orrs	r3, r1
 800843c:	4943      	ldr	r1, [pc, #268]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800843e:	4313      	orrs	r3, r2
 8008440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d17c      	bne.n	8008542 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008448:	4b40      	ldr	r3, [pc, #256]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a3f      	ldr	r2, [pc, #252]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800844e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008454:	f7fc ff24 	bl	80052a0 <HAL_GetTick>
 8008458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800845a:	e009      	b.n	8008470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800845c:	f7fc ff20 	bl	80052a0 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d902      	bls.n	8008470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	73fb      	strb	r3, [r7, #15]
        break;
 800846e:	e005      	b.n	800847c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008470:	4b36      	ldr	r3, [pc, #216]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1ef      	bne.n	800845c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d15f      	bne.n	8008542 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d110      	bne.n	80084aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008488:	4b30      	ldr	r3, [pc, #192]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6892      	ldr	r2, [r2, #8]
 8008498:	0211      	lsls	r1, r2, #8
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68d2      	ldr	r2, [r2, #12]
 800849e:	06d2      	lsls	r2, r2, #27
 80084a0:	430a      	orrs	r2, r1
 80084a2:	492a      	ldr	r1, [pc, #168]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	610b      	str	r3, [r1, #16]
 80084a8:	e027      	b.n	80084fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d112      	bne.n	80084d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084b0:	4b26      	ldr	r3, [pc, #152]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80084b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6892      	ldr	r2, [r2, #8]
 80084c0:	0211      	lsls	r1, r2, #8
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6912      	ldr	r2, [r2, #16]
 80084c6:	0852      	lsrs	r2, r2, #1
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0552      	lsls	r2, r2, #21
 80084cc:	430a      	orrs	r2, r1
 80084ce:	491f      	ldr	r1, [pc, #124]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]
 80084d4:	e011      	b.n	80084fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084d6:	4b1d      	ldr	r3, [pc, #116]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80084de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6892      	ldr	r2, [r2, #8]
 80084e6:	0211      	lsls	r1, r2, #8
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6952      	ldr	r2, [r2, #20]
 80084ec:	0852      	lsrs	r2, r2, #1
 80084ee:	3a01      	subs	r2, #1
 80084f0:	0652      	lsls	r2, r2, #25
 80084f2:	430a      	orrs	r2, r1
 80084f4:	4915      	ldr	r1, [pc, #84]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008504:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008506:	f7fc fecb 	bl	80052a0 <HAL_GetTick>
 800850a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800850c:	e009      	b.n	8008522 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800850e:	f7fc fec7 	bl	80052a0 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	d902      	bls.n	8008522 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	73fb      	strb	r3, [r7, #15]
          break;
 8008520:	e005      	b.n	800852e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008522:	4b0a      	ldr	r3, [pc, #40]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0ef      	beq.n	800850e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4903      	ldr	r1, [pc, #12]	; (800854c <RCCEx_PLLSAI1_Config+0x1e0>)
 800853e:	4313      	orrs	r3, r2
 8008540:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40021000 	.word	0x40021000

08008550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e095      	b.n	800868e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d108      	bne.n	800857c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008572:	d009      	beq.n	8008588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	61da      	str	r2, [r3, #28]
 800857a:	e005      	b.n	8008588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fc fb40 	bl	8004c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085c8:	d902      	bls.n	80085d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e002      	b.n	80085d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80085d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80085de:	d007      	beq.n	80085f0 <HAL_SPI_Init+0xa0>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085e8:	d002      	beq.n	80085f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	ea42 0103 	orr.w	r1, r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	f003 0204 	and.w	r2, r3, #4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800866c:	ea42 0103 	orr.w	r1, r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b088      	sub	sp, #32
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_SPI_Transmit+0x22>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e158      	b.n	800896a <HAL_SPI_Transmit+0x2d4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086c0:	f7fc fdee 	bl	80052a0 <HAL_GetTick>
 80086c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d002      	beq.n	80086dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
 80086d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086da:	e13d      	b.n	8008958 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_SPI_Transmit+0x52>
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086ec:	e134      	b.n	8008958 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2203      	movs	r2, #3
 80086f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	88fa      	ldrh	r2, [r7, #6]
 8008706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	88fa      	ldrh	r2, [r7, #6]
 800870c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008738:	d10f      	bne.n	800875a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008748:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008758:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d007      	beq.n	8008778 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008776:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008780:	d94b      	bls.n	800881a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_SPI_Transmit+0xfa>
 800878a:	8afb      	ldrh	r3, [r7, #22]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d13e      	bne.n	800880e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087b4:	e02b      	b.n	800880e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d112      	bne.n	80087ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	881a      	ldrh	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	1c9a      	adds	r2, r3, #2
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087e8:	e011      	b.n	800880e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ea:	f7fc fd59 	bl	80052a0 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d803      	bhi.n	8008802 <HAL_SPI_Transmit+0x16c>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d102      	bne.n	8008808 <HAL_SPI_Transmit+0x172>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d102      	bne.n	800880e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800880c:	e0a4      	b.n	8008958 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1ce      	bne.n	80087b6 <HAL_SPI_Transmit+0x120>
 8008818:	e07c      	b.n	8008914 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_SPI_Transmit+0x192>
 8008822:	8afb      	ldrh	r3, [r7, #22]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d170      	bne.n	800890a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b01      	cmp	r3, #1
 8008830:	d912      	bls.n	8008858 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	1c9a      	adds	r2, r3, #2
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b02      	subs	r3, #2
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008856:	e058      	b.n	800890a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800887e:	e044      	b.n	800890a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b02      	cmp	r3, #2
 800888c:	d12b      	bne.n	80088e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b01      	cmp	r3, #1
 8008896:	d912      	bls.n	80088be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	881a      	ldrh	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	1c9a      	adds	r2, r3, #2
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b02      	subs	r3, #2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088bc:	e025      	b.n	800890a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088e4:	e011      	b.n	800890a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e6:	f7fc fcdb 	bl	80052a0 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d803      	bhi.n	80088fe <HAL_SPI_Transmit+0x268>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fc:	d102      	bne.n	8008904 <HAL_SPI_Transmit+0x26e>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008908:	e026      	b.n	8008958 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1b5      	bne.n	8008880 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fce3 	bl	80092e4 <SPI_EndRxTxTransaction>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	77fb      	strb	r3, [r7, #31]
 8008954:	e000      	b.n	8008958 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008968:	7ffb      	ldrb	r3, [r7, #31]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b088      	sub	sp, #32
 8008976:	af02      	add	r7, sp, #8
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	4613      	mov	r3, r2
 8008980:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800898e:	d112      	bne.n	80089b6 <HAL_SPI_Receive+0x44>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10e      	bne.n	80089b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2204      	movs	r2, #4
 800899c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089a0:	88fa      	ldrh	r2, [r7, #6]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f910 	bl	8008bd2 <HAL_SPI_TransmitReceive>
 80089b2:	4603      	mov	r3, r0
 80089b4:	e109      	b.n	8008bca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <HAL_SPI_Receive+0x52>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e102      	b.n	8008bca <HAL_SPI_Receive+0x258>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089cc:	f7fc fc68 	bl	80052a0 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d002      	beq.n	80089e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80089de:	2302      	movs	r3, #2
 80089e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089e2:	e0e9      	b.n	8008bb8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Receive+0x7e>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089f4:	e0e0      	b.n	8008bb8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2204      	movs	r2, #4
 80089fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	88fa      	ldrh	r2, [r7, #6]
 8008a16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a40:	d908      	bls.n	8008a54 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	e007      	b.n	8008a64 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a6c:	d10f      	bne.n	8008a8e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a98:	2b40      	cmp	r3, #64	; 0x40
 8008a9a:	d007      	beq.n	8008aac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ab4:	d867      	bhi.n	8008b86 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ab6:	e030      	b.n	8008b1a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d117      	bne.n	8008af6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f103 020c 	add.w	r2, r3, #12
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	7812      	ldrb	r2, [r2, #0]
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008af4:	e011      	b.n	8008b1a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af6:	f7fc fbd3 	bl	80052a0 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d803      	bhi.n	8008b0e <HAL_SPI_Receive+0x19c>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d102      	bne.n	8008b14 <HAL_SPI_Receive+0x1a2>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b18:	e04e      	b.n	8008bb8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1c8      	bne.n	8008ab8 <HAL_SPI_Receive+0x146>
 8008b26:	e034      	b.n	8008b92 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d115      	bne.n	8008b62 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	b292      	uxth	r2, r2
 8008b42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	1c9a      	adds	r2, r3, #2
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008b60:	e011      	b.n	8008b86 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b62:	f7fc fb9d 	bl	80052a0 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d803      	bhi.n	8008b7a <HAL_SPI_Receive+0x208>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b78:	d102      	bne.n	8008b80 <HAL_SPI_Receive+0x20e>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b84:	e018      	b.n	8008bb8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1ca      	bne.n	8008b28 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fb4c 	bl	8009234 <SPI_EndRxTransaction>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	75fb      	strb	r3, [r7, #23]
 8008bb4:	e000      	b.n	8008bb8 <HAL_SPI_Receive+0x246>
  }

error :
 8008bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b08a      	sub	sp, #40	; 0x28
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008be0:	2301      	movs	r3, #1
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x26>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e1fb      	b.n	8008ff0 <HAL_SPI_TransmitReceive+0x41e>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c00:	f7fc fb4e 	bl	80052a0 <HAL_GetTick>
 8008c04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c14:	887b      	ldrh	r3, [r7, #2]
 8008c16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c18:	887b      	ldrh	r3, [r7, #2]
 8008c1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c1c:	7efb      	ldrb	r3, [r7, #27]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d00e      	beq.n	8008c40 <HAL_SPI_TransmitReceive+0x6e>
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c28:	d106      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x66>
 8008c32:	7efb      	ldrb	r3, [r7, #27]
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d003      	beq.n	8008c40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008c3e:	e1cd      	b.n	8008fdc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x80>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x80>
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008c58:	e1c0      	b.n	8008fdc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d003      	beq.n	8008c6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2205      	movs	r2, #5
 8008c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	887a      	ldrh	r2, [r7, #2]
 8008c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	887a      	ldrh	r2, [r7, #2]
 8008c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	887a      	ldrh	r2, [r7, #2]
 8008c94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	887a      	ldrh	r2, [r7, #2]
 8008c9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cb0:	d802      	bhi.n	8008cb8 <HAL_SPI_TransmitReceive+0xe6>
 8008cb2:	8a3b      	ldrh	r3, [r7, #16]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d908      	bls.n	8008cca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cc6:	605a      	str	r2, [r3, #4]
 8008cc8:	e007      	b.n	8008cda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	d007      	beq.n	8008cf8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d00:	d97c      	bls.n	8008dfc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_SPI_TransmitReceive+0x13e>
 8008d0a:	8a7b      	ldrh	r3, [r7, #18]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d169      	bne.n	8008de4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	881a      	ldrh	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d34:	e056      	b.n	8008de4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d11b      	bne.n	8008d7c <HAL_SPI_TransmitReceive+0x1aa>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d016      	beq.n	8008d7c <HAL_SPI_TransmitReceive+0x1aa>
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d113      	bne.n	8008d7c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	1c9a      	adds	r2, r3, #2
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d11c      	bne.n	8008dc4 <HAL_SPI_TransmitReceive+0x1f2>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d016      	beq.n	8008dc4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	b292      	uxth	r2, r2
 8008da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	1c9a      	adds	r2, r3, #2
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008dc4:	f7fc fa6c 	bl	80052a0 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d807      	bhi.n	8008de4 <HAL_SPI_TransmitReceive+0x212>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d003      	beq.n	8008de4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008de2:	e0fb      	b.n	8008fdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1a3      	bne.n	8008d36 <HAL_SPI_TransmitReceive+0x164>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d19d      	bne.n	8008d36 <HAL_SPI_TransmitReceive+0x164>
 8008dfa:	e0df      	b.n	8008fbc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_SPI_TransmitReceive+0x23a>
 8008e04:	8a7b      	ldrh	r3, [r7, #18]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	f040 80cb 	bne.w	8008fa2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d912      	bls.n	8008e3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	881a      	ldrh	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	1c9a      	adds	r2, r3, #2
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	3b02      	subs	r3, #2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e3a:	e0b2      	b.n	8008fa2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e62:	e09e      	b.n	8008fa2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d134      	bne.n	8008edc <HAL_SPI_TransmitReceive+0x30a>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02f      	beq.n	8008edc <HAL_SPI_TransmitReceive+0x30a>
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d12c      	bne.n	8008edc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d912      	bls.n	8008eb2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	881a      	ldrh	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b02      	subs	r3, #2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008eb0:	e012      	b.n	8008ed8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d148      	bne.n	8008f7c <HAL_SPI_TransmitReceive+0x3aa>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d042      	beq.n	8008f7c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d923      	bls.n	8008f4a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	1c9a      	adds	r2, r3, #2
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	3b02      	subs	r3, #2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d81f      	bhi.n	8008f78 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f46:	605a      	str	r2, [r3, #4]
 8008f48:	e016      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f103 020c 	add.w	r2, r3, #12
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f7c:	f7fc f990 	bl	80052a0 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d803      	bhi.n	8008f94 <HAL_SPI_TransmitReceive+0x3c2>
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f92:	d102      	bne.n	8008f9a <HAL_SPI_TransmitReceive+0x3c8>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008fa0:	e01c      	b.n	8008fdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f47f af5b 	bne.w	8008e64 <HAL_SPI_TransmitReceive+0x292>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f47f af54 	bne.w	8008e64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f98f 	bl	80092e4 <SPI_EndRxTxTransaction>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	661a      	str	r2, [r3, #96]	; 0x60
 8008fd8:	e000      	b.n	8008fdc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009008:	f7fc f94a 	bl	80052a0 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4413      	add	r3, r2
 8009016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009018:	f7fc f942 	bl	80052a0 <HAL_GetTick>
 800901c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	015b      	lsls	r3, r3, #5
 8009024:	0d1b      	lsrs	r3, r3, #20
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800902e:	e054      	b.n	80090da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d050      	beq.n	80090da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009038:	f7fc f932 	bl	80052a0 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	429a      	cmp	r2, r3
 8009046:	d902      	bls.n	800904e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d13d      	bne.n	80090ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800905c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009066:	d111      	bne.n	800908c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009070:	d004      	beq.n	800907c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907a:	d107      	bne.n	800908c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800908a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009094:	d10f      	bne.n	80090b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e017      	b.n	80090fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4013      	ands	r3, r2
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	bf0c      	ite	eq
 80090ea:	2301      	moveq	r3, #1
 80090ec:	2300      	movne	r3, #0
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	461a      	mov	r2, r3
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d19b      	bne.n	8009030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000174 	.word	0x20000174

08009108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800911a:	f7fc f8c1 	bl	80052a0 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	4413      	add	r3, r2
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800912a:	f7fc f8b9 	bl	80052a0 <HAL_GetTick>
 800912e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009138:	4b3d      	ldr	r3, [pc, #244]	; (8009230 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	00da      	lsls	r2, r3, #3
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	0d1b      	lsrs	r3, r3, #20
 8009148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914a:	fb02 f303 	mul.w	r3, r2, r3
 800914e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009150:	e060      	b.n	8009214 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009158:	d107      	bne.n	800916a <SPI_WaitFifoStateUntilTimeout+0x62>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009168:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	d050      	beq.n	8009214 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009172:	f7fc f895 	bl	80052a0 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917e:	429a      	cmp	r2, r3
 8009180:	d902      	bls.n	8009188 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	d13d      	bne.n	8009204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009196:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a0:	d111      	bne.n	80091c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091aa:	d004      	beq.n	80091b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b4:	d107      	bne.n	80091c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ce:	d10f      	bne.n	80091f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e010      	b.n	8009226 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3b01      	subs	r3, #1
 8009212:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4013      	ands	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d196      	bne.n	8009152 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3728      	adds	r7, #40	; 0x28
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20000174 	.word	0x20000174

08009234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af02      	add	r7, sp, #8
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009248:	d111      	bne.n	800926e <SPI_EndRxTransaction+0x3a>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009252:	d004      	beq.n	800925e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800925c:	d107      	bne.n	800926e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800926c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	2180      	movs	r1, #128	; 0x80
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff febd 	bl	8008ff8 <SPI_WaitFlagStateUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009288:	f043 0220 	orr.w	r2, r3, #32
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e023      	b.n	80092dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800929c:	d11d      	bne.n	80092da <SPI_EndRxTransaction+0xa6>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a6:	d004      	beq.n	80092b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b0:	d113      	bne.n	80092da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f7ff ff22 	bl	8009108 <SPI_WaitFifoStateUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d007      	beq.n	80092da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ce:	f043 0220 	orr.w	r2, r3, #32
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e000      	b.n	80092dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff ff03 	bl	8009108 <SPI_WaitFifoStateUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930c:	f043 0220 	orr.w	r2, r3, #32
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e027      	b.n	8009368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2200      	movs	r2, #0
 8009320:	2180      	movs	r1, #128	; 0x80
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7ff fe68 	bl	8008ff8 <SPI_WaitFlagStateUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d007      	beq.n	800933e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009332:	f043 0220 	orr.w	r2, r3, #32
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e014      	b.n	8009368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff fedc 	bl	8009108 <SPI_WaitFifoStateUntilTimeout>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935a:	f043 0220 	orr.w	r2, r3, #32
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e000      	b.n	8009368 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e04e      	b.n	8009420 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009386:	2b00      	cmp	r3, #0
 8009388:	d114      	bne.n	80093b4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fc66 	bl	8009c64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a20      	ldr	r2, [pc, #128]	; (8009428 <HAL_UART_Init+0xb8>)
 80093a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2224      	movs	r2, #36	; 0x24
 80093b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fc90 	bl	8009cf0 <UART_SetConfig>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e022      	b.n	8009420 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 ff0a 	bl	800a1fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 ff91 	bl	800a340 <UART_CheckIdleState>
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08004cad 	.word	0x08004cad

0800942c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943e:	2b20      	cmp	r3, #32
 8009440:	d178      	bne.n	8009534 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_UART_Transmit_DMA+0x22>
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e071      	b.n	8009536 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_UART_Transmit_DMA+0x34>
 800945c:	2302      	movs	r3, #2
 800945e:	e06a      	b.n	8009536 <HAL_UART_Transmit_DMA+0x10a>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2221      	movs	r2, #33	; 0x21
 800948a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d02b      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009498:	4a29      	ldr	r2, [pc, #164]	; (8009540 <HAL_UART_Transmit_DMA+0x114>)
 800949a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a0:	4a28      	ldr	r2, [pc, #160]	; (8009544 <HAL_UART_Transmit_DMA+0x118>)
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	4a27      	ldr	r2, [pc, #156]	; (8009548 <HAL_UART_Transmit_DMA+0x11c>)
 80094aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b0:	2200      	movs	r2, #0
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094bc:	4619      	mov	r1, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3328      	adds	r3, #40	; 0x28
 80094c4:	461a      	mov	r2, r3
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	f7fd faae 	bl	8006a28 <HAL_DMA_Start_IT>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00c      	beq.n	80094ec <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2210      	movs	r2, #16
 80094d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2220      	movs	r2, #32
 80094e6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e024      	b.n	8009536 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2240      	movs	r2, #64	; 0x40
 80094f2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	613b      	str	r3, [r7, #16]
   return(result);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951c:	623a      	str	r2, [r7, #32]
 800951e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69f9      	ldr	r1, [r7, #28]
 8009522:	6a3a      	ldr	r2, [r7, #32]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	61bb      	str	r3, [r7, #24]
   return(result);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e5      	bne.n	80094fc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e000      	b.n	8009536 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009534:	2302      	movs	r3, #2
  }
}
 8009536:	4618      	mov	r0, r3
 8009538:	3728      	adds	r7, #40	; 0x28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	0800a7bb 	.word	0x0800a7bb
 8009544:	0800a859 	.word	0x0800a859
 8009548:	0800a9e5 	.word	0x0800a9e5

0800954c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08a      	sub	sp, #40	; 0x28
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955e:	2b20      	cmp	r3, #32
 8009560:	d142      	bne.n	80095e8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <HAL_UART_Receive_DMA+0x22>
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e03b      	b.n	80095ea <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_UART_Receive_DMA+0x34>
 800957c:	2302      	movs	r3, #2
 800957e:	e034      	b.n	80095ea <HAL_UART_Receive_DMA+0x9e>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a18      	ldr	r2, [pc, #96]	; (80095f4 <HAL_UART_Receive_DMA+0xa8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d01f      	beq.n	80095d8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d018      	beq.n	80095d8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	613b      	str	r3, [r7, #16]
   return(result);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	623b      	str	r3, [r7, #32]
 80095c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	69f9      	ldr	r1, [r7, #28]
 80095ca:	6a3a      	ldr	r2, [r7, #32]
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e6      	bne.n	80095a6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	461a      	mov	r2, r3
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 ffbc 	bl	800a55c <UART_Start_Receive_DMA>
 80095e4:	4603      	mov	r3, r0
 80095e6:	e000      	b.n	80095ea <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80095e8:	2302      	movs	r3, #2
  }
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3728      	adds	r7, #40	; 0x28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	40008000 	.word	0x40008000

080095f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b0ba      	sub	sp, #232	; 0xe8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800961e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009622:	f640 030f 	movw	r3, #2063	; 0x80f
 8009626:	4013      	ands	r3, r2
 8009628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800962c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d115      	bne.n	8009660 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00f      	beq.n	8009660 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b00      	cmp	r3, #0
 800964a:	d009      	beq.n	8009660 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 82b2 	beq.w	8009bba <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
      }
      return;
 800965e:	e2ac      	b.n	8009bba <HAL_UART_IRQHandler+0x5c2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 811d 	beq.w	80098a4 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800966a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800967a:	4b88      	ldr	r3, [pc, #544]	; (800989c <HAL_UART_IRQHandler+0x2a4>)
 800967c:	4013      	ands	r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 8110 	beq.w	80098a4 <HAL_UART_IRQHandler+0x2ac>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d011      	beq.n	80096b4 <HAL_UART_IRQHandler+0xbc>
 8009690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2201      	movs	r2, #1
 80096a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096aa:	f043 0201 	orr.w	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d011      	beq.n	80096e4 <HAL_UART_IRQHandler+0xec>
 80096c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2202      	movs	r2, #2
 80096d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096da:	f043 0204 	orr.w	r2, r3, #4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d011      	beq.n	8009714 <HAL_UART_IRQHandler+0x11c>
 80096f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2204      	movs	r2, #4
 8009702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970a:	f043 0202 	orr.w	r2, r3, #2
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b00      	cmp	r3, #0
 800971e:	d017      	beq.n	8009750 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800972c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009730:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2208      	movs	r2, #8
 800973e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009746:	f043 0208 	orr.w	r2, r3, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009758:	2b00      	cmp	r3, #0
 800975a:	d012      	beq.n	8009782 <HAL_UART_IRQHandler+0x18a>
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00c      	beq.n	8009782 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009778:	f043 0220 	orr.w	r2, r3, #32
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 8218 	beq.w	8009bbe <HAL_UART_IRQHandler+0x5c6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800979a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979e:	f003 0320 	and.w	r3, r3, #32
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d005      	beq.n	80097da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d053      	beq.n	8009882 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 ff8a 	bl	800a6f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ea:	2b40      	cmp	r3, #64	; 0x40
 80097ec:	d143      	bne.n	8009876 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800981a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800981e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1d9      	bne.n	80097ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	2b00      	cmp	r3, #0
 8009840:	d013      	beq.n	800986a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <HAL_UART_IRQHandler+0x2a8>)
 8009848:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984e:	4618      	mov	r0, r3
 8009850:	f7fd f988 	bl	8006b64 <HAL_DMA_Abort_IT>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01d      	beq.n	8009896 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	e015      	b.n	8009896 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009874:	e00f      	b.n	8009896 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009880:	e009      	b.n	8009896 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009894:	e193      	b.n	8009bbe <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009896:	bf00      	nop
    return;
 8009898:	e191      	b.n	8009bbe <HAL_UART_IRQHandler+0x5c6>
 800989a:	bf00      	nop
 800989c:	04000120 	.word	0x04000120
 80098a0:	0800aa65 	.word	0x0800aa65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f040 814a 	bne.w	8009b42 <HAL_UART_IRQHandler+0x54a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8143 	beq.w	8009b42 <HAL_UART_IRQHandler+0x54a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 813c 	beq.w	8009b42 <HAL_UART_IRQHandler+0x54a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2210      	movs	r2, #16
 80098d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b40      	cmp	r3, #64	; 0x40
 80098de:	f040 80b6 	bne.w	8009a4e <HAL_UART_IRQHandler+0x456>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 8165 	beq.w	8009bc2 <HAL_UART_IRQHandler+0x5ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009902:	429a      	cmp	r2, r3
 8009904:	f080 815d 	bcs.w	8009bc2 <HAL_UART_IRQHandler+0x5ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800990e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 8085 	bne.w	8009a2e <HAL_UART_IRQHandler+0x436>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800993c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800994e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009952:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800995a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1da      	bne.n	8009924 <HAL_UART_IRQHandler+0x32c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800997e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009980:	f023 0301 	bic.w	r3, r3, #1
 8009984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800999a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e1      	bne.n	800996e <HAL_UART_IRQHandler+0x376>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e3      	bne.n	80099aa <HAL_UART_IRQHandler+0x3b2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2220      	movs	r2, #32
 80099e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <HAL_UART_IRQHandler+0x3f6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd f85d 	bl	8006ae8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8009a40:	b292      	uxth	r2, r2
 8009a42:	1a8a      	subs	r2, r1, r2
 8009a44:	b292      	uxth	r2, r2
 8009a46:	4611      	mov	r1, r2
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a4c:	e0b9      	b.n	8009bc2 <HAL_UART_IRQHandler+0x5ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 80ab 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8009a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 80a6 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ce>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e4      	bne.n	8009a7a <HAL_UART_IRQHandler+0x482>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3308      	adds	r3, #8
 8009ad0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8009ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e3      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x4b8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0310 	bic.w	r3, r3, #16
 8009b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	69b9      	ldr	r1, [r7, #24]
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	617b      	str	r3, [r7, #20]
   return(result);
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e4      	bne.n	8009afa <HAL_UART_IRQHandler+0x502>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b36:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b40:	e041      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d010      	beq.n	8009b70 <HAL_UART_IRQHandler+0x578>
 8009b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <HAL_UART_IRQHandler+0x578>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b62:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b6e:	e02d      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00e      	beq.n	8009b9a <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d008      	beq.n	8009b9a <HAL_UART_IRQHandler+0x5a2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01c      	beq.n	8009bca <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	4798      	blx	r3
    }
    return;
 8009b98:	e017      	b.n	8009bca <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d012      	beq.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
 8009ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00c      	beq.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
  {
    UART_EndTransmit_IT(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 ff6e 	bl	800aa94 <UART_EndTransmit_IT>
    return;
 8009bb8:	e008      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009bba:	bf00      	nop
 8009bbc:	e006      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
    return;
 8009bbe:	bf00      	nop
 8009bc0:	e004      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009bc2:	bf00      	nop
 8009bc4:	e002      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
      return;
 8009bc6:	bf00      	nop
 8009bc8:	e000      	b.n	8009bcc <HAL_UART_IRQHandler+0x5d4>
    return;
 8009bca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009bcc:	37e8      	adds	r7, #232	; 0xe8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop

08009bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a16      	ldr	r2, [pc, #88]	; (8009cc8 <UART_InitCallbacksToDefault+0x64>)
 8009c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a15      	ldr	r2, [pc, #84]	; (8009ccc <UART_InitCallbacksToDefault+0x68>)
 8009c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <UART_InitCallbacksToDefault+0x6c>)
 8009c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a13      	ldr	r2, [pc, #76]	; (8009cd4 <UART_InitCallbacksToDefault+0x70>)
 8009c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a12      	ldr	r2, [pc, #72]	; (8009cd8 <UART_InitCallbacksToDefault+0x74>)
 8009c90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <UART_InitCallbacksToDefault+0x78>)
 8009c98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a10      	ldr	r2, [pc, #64]	; (8009ce0 <UART_InitCallbacksToDefault+0x7c>)
 8009ca0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a0f      	ldr	r2, [pc, #60]	; (8009ce4 <UART_InitCallbacksToDefault+0x80>)
 8009ca8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a0e      	ldr	r2, [pc, #56]	; (8009ce8 <UART_InitCallbacksToDefault+0x84>)
 8009cb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <UART_InitCallbacksToDefault+0x88>)
 8009cb8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	08009be9 	.word	0x08009be9
 8009ccc:	08009bd5 	.word	0x08009bd5
 8009cd0:	0800356d 	.word	0x0800356d
 8009cd4:	08003589 	.word	0x08003589
 8009cd8:	08009bfd 	.word	0x08009bfd
 8009cdc:	08009c11 	.word	0x08009c11
 8009ce0:	08009c25 	.word	0x08009c25
 8009ce4:	08009c39 	.word	0x08009c39
 8009ce8:	0800aaed 	.word	0x0800aaed
 8009cec:	08009c4d 	.word	0x08009c4d

08009cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf4:	b08a      	sub	sp, #40	; 0x28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4ba5      	ldr	r3, [pc, #660]	; (8009fb4 <UART_SetConfig+0x2c4>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a9a      	ldr	r2, [pc, #616]	; (8009fb8 <UART_SetConfig+0x2c8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d004      	beq.n	8009d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a91      	ldr	r2, [pc, #580]	; (8009fbc <UART_SetConfig+0x2cc>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d126      	bne.n	8009dc8 <UART_SetConfig+0xd8>
 8009d7a:	4b91      	ldr	r3, [pc, #580]	; (8009fc0 <UART_SetConfig+0x2d0>)
 8009d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d80:	f003 0303 	and.w	r3, r3, #3
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d81b      	bhi.n	8009dc0 <UART_SetConfig+0xd0>
 8009d88:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <UART_SetConfig+0xa0>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009da1 	.word	0x08009da1
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009da9 	.word	0x08009da9
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009da6:	e0d6      	b.n	8009f56 <UART_SetConfig+0x266>
 8009da8:	2302      	movs	r3, #2
 8009daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dae:	e0d2      	b.n	8009f56 <UART_SetConfig+0x266>
 8009db0:	2304      	movs	r3, #4
 8009db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009db6:	e0ce      	b.n	8009f56 <UART_SetConfig+0x266>
 8009db8:	2308      	movs	r3, #8
 8009dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dbe:	e0ca      	b.n	8009f56 <UART_SetConfig+0x266>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dc6:	e0c6      	b.n	8009f56 <UART_SetConfig+0x266>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a7d      	ldr	r2, [pc, #500]	; (8009fc4 <UART_SetConfig+0x2d4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d138      	bne.n	8009e44 <UART_SetConfig+0x154>
 8009dd2:	4b7b      	ldr	r3, [pc, #492]	; (8009fc0 <UART_SetConfig+0x2d0>)
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	f003 030c 	and.w	r3, r3, #12
 8009ddc:	2b0c      	cmp	r3, #12
 8009dde:	d82d      	bhi.n	8009e3c <UART_SetConfig+0x14c>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0xf8>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e1d 	.word	0x08009e1d
 8009dec:	08009e3d 	.word	0x08009e3d
 8009df0:	08009e3d 	.word	0x08009e3d
 8009df4:	08009e3d 	.word	0x08009e3d
 8009df8:	08009e2d 	.word	0x08009e2d
 8009dfc:	08009e3d 	.word	0x08009e3d
 8009e00:	08009e3d 	.word	0x08009e3d
 8009e04:	08009e3d 	.word	0x08009e3d
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e3d 	.word	0x08009e3d
 8009e10:	08009e3d 	.word	0x08009e3d
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e35 	.word	0x08009e35
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e22:	e098      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e24:	2302      	movs	r3, #2
 8009e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e2a:	e094      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e32:	e090      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e34:	2308      	movs	r3, #8
 8009e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e3a:	e08c      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e3c:	2310      	movs	r3, #16
 8009e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e42:	e088      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a5f      	ldr	r2, [pc, #380]	; (8009fc8 <UART_SetConfig+0x2d8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d125      	bne.n	8009e9a <UART_SetConfig+0x1aa>
 8009e4e:	4b5c      	ldr	r3, [pc, #368]	; (8009fc0 <UART_SetConfig+0x2d0>)
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e58:	2b30      	cmp	r3, #48	; 0x30
 8009e5a:	d016      	beq.n	8009e8a <UART_SetConfig+0x19a>
 8009e5c:	2b30      	cmp	r3, #48	; 0x30
 8009e5e:	d818      	bhi.n	8009e92 <UART_SetConfig+0x1a2>
 8009e60:	2b20      	cmp	r3, #32
 8009e62:	d00a      	beq.n	8009e7a <UART_SetConfig+0x18a>
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	d814      	bhi.n	8009e92 <UART_SetConfig+0x1a2>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <UART_SetConfig+0x182>
 8009e6c:	2b10      	cmp	r3, #16
 8009e6e:	d008      	beq.n	8009e82 <UART_SetConfig+0x192>
 8009e70:	e00f      	b.n	8009e92 <UART_SetConfig+0x1a2>
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e78:	e06d      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e80:	e069      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e82:	2304      	movs	r3, #4
 8009e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e88:	e065      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e90:	e061      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e92:	2310      	movs	r3, #16
 8009e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e98:	e05d      	b.n	8009f56 <UART_SetConfig+0x266>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a4b      	ldr	r2, [pc, #300]	; (8009fcc <UART_SetConfig+0x2dc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d125      	bne.n	8009ef0 <UART_SetConfig+0x200>
 8009ea4:	4b46      	ldr	r3, [pc, #280]	; (8009fc0 <UART_SetConfig+0x2d0>)
 8009ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eae:	2bc0      	cmp	r3, #192	; 0xc0
 8009eb0:	d016      	beq.n	8009ee0 <UART_SetConfig+0x1f0>
 8009eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8009eb4:	d818      	bhi.n	8009ee8 <UART_SetConfig+0x1f8>
 8009eb6:	2b80      	cmp	r3, #128	; 0x80
 8009eb8:	d00a      	beq.n	8009ed0 <UART_SetConfig+0x1e0>
 8009eba:	2b80      	cmp	r3, #128	; 0x80
 8009ebc:	d814      	bhi.n	8009ee8 <UART_SetConfig+0x1f8>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <UART_SetConfig+0x1d8>
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	d008      	beq.n	8009ed8 <UART_SetConfig+0x1e8>
 8009ec6:	e00f      	b.n	8009ee8 <UART_SetConfig+0x1f8>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ece:	e042      	b.n	8009f56 <UART_SetConfig+0x266>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ed6:	e03e      	b.n	8009f56 <UART_SetConfig+0x266>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ede:	e03a      	b.n	8009f56 <UART_SetConfig+0x266>
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ee6:	e036      	b.n	8009f56 <UART_SetConfig+0x266>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eee:	e032      	b.n	8009f56 <UART_SetConfig+0x266>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a30      	ldr	r2, [pc, #192]	; (8009fb8 <UART_SetConfig+0x2c8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d12a      	bne.n	8009f50 <UART_SetConfig+0x260>
 8009efa:	4b31      	ldr	r3, [pc, #196]	; (8009fc0 <UART_SetConfig+0x2d0>)
 8009efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f08:	d01a      	beq.n	8009f40 <UART_SetConfig+0x250>
 8009f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f0e:	d81b      	bhi.n	8009f48 <UART_SetConfig+0x258>
 8009f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f14:	d00c      	beq.n	8009f30 <UART_SetConfig+0x240>
 8009f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f1a:	d815      	bhi.n	8009f48 <UART_SetConfig+0x258>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <UART_SetConfig+0x238>
 8009f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f24:	d008      	beq.n	8009f38 <UART_SetConfig+0x248>
 8009f26:	e00f      	b.n	8009f48 <UART_SetConfig+0x258>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f2e:	e012      	b.n	8009f56 <UART_SetConfig+0x266>
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f36:	e00e      	b.n	8009f56 <UART_SetConfig+0x266>
 8009f38:	2304      	movs	r3, #4
 8009f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f3e:	e00a      	b.n	8009f56 <UART_SetConfig+0x266>
 8009f40:	2308      	movs	r3, #8
 8009f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f46:	e006      	b.n	8009f56 <UART_SetConfig+0x266>
 8009f48:	2310      	movs	r3, #16
 8009f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f4e:	e002      	b.n	8009f56 <UART_SetConfig+0x266>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a17      	ldr	r2, [pc, #92]	; (8009fb8 <UART_SetConfig+0x2c8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	f040 808b 	bne.w	800a078 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d834      	bhi.n	8009fd4 <UART_SetConfig+0x2e4>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x280>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009fd5 	.word	0x08009fd5
 8009f78:	08009f9d 	.word	0x08009f9d
 8009f7c:	08009fd5 	.word	0x08009fd5
 8009f80:	08009fa3 	.word	0x08009fa3
 8009f84:	08009fd5 	.word	0x08009fd5
 8009f88:	08009fd5 	.word	0x08009fd5
 8009f8c:	08009fd5 	.word	0x08009fd5
 8009f90:	08009fab 	.word	0x08009fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f94:	f7fd fef2 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 8009f98:	61f8      	str	r0, [r7, #28]
        break;
 8009f9a:	e021      	b.n	8009fe0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <UART_SetConfig+0x2e0>)
 8009f9e:	61fb      	str	r3, [r7, #28]
        break;
 8009fa0:	e01e      	b.n	8009fe0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fa2:	f7fd fe53 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 8009fa6:	61f8      	str	r0, [r7, #28]
        break;
 8009fa8:	e01a      	b.n	8009fe0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fae:	61fb      	str	r3, [r7, #28]
        break;
 8009fb0:	e016      	b.n	8009fe0 <UART_SetConfig+0x2f0>
 8009fb2:	bf00      	nop
 8009fb4:	efff69f3 	.word	0xefff69f3
 8009fb8:	40008000 	.word	0x40008000
 8009fbc:	40013800 	.word	0x40013800
 8009fc0:	40021000 	.word	0x40021000
 8009fc4:	40004400 	.word	0x40004400
 8009fc8:	40004800 	.word	0x40004800
 8009fcc:	40004c00 	.word	0x40004c00
 8009fd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 80fa 	beq.w	800a1dc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	4613      	mov	r3, r2
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	4413      	add	r3, r2
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d305      	bcc.n	800a004 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	429a      	cmp	r2, r3
 800a002:	d903      	bls.n	800a00c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a00a:	e0e7      	b.n	800a1dc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	2200      	movs	r2, #0
 800a010:	461c      	mov	r4, r3
 800a012:	4615      	mov	r5, r2
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	022b      	lsls	r3, r5, #8
 800a01e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a022:	0222      	lsls	r2, r4, #8
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	6849      	ldr	r1, [r1, #4]
 800a028:	0849      	lsrs	r1, r1, #1
 800a02a:	2000      	movs	r0, #0
 800a02c:	4688      	mov	r8, r1
 800a02e:	4681      	mov	r9, r0
 800a030:	eb12 0a08 	adds.w	sl, r2, r8
 800a034:	eb43 0b09 	adc.w	fp, r3, r9
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	603b      	str	r3, [r7, #0]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a046:	4650      	mov	r0, sl
 800a048:	4659      	mov	r1, fp
 800a04a:	f7f6 fe35 	bl	8000cb8 <__aeabi_uldivmod>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4613      	mov	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05c:	d308      	bcc.n	800a070 <UART_SetConfig+0x380>
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a064:	d204      	bcs.n	800a070 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e0b5      	b.n	800a1dc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a076:	e0b1      	b.n	800a1dc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a080:	d15d      	bne.n	800a13e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800a082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a086:	2b08      	cmp	r3, #8
 800a088:	d827      	bhi.n	800a0da <UART_SetConfig+0x3ea>
 800a08a:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <UART_SetConfig+0x3a0>)
 800a08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a090:	0800a0b5 	.word	0x0800a0b5
 800a094:	0800a0bd 	.word	0x0800a0bd
 800a098:	0800a0c5 	.word	0x0800a0c5
 800a09c:	0800a0db 	.word	0x0800a0db
 800a0a0:	0800a0cb 	.word	0x0800a0cb
 800a0a4:	0800a0db 	.word	0x0800a0db
 800a0a8:	0800a0db 	.word	0x0800a0db
 800a0ac:	0800a0db 	.word	0x0800a0db
 800a0b0:	0800a0d3 	.word	0x0800a0d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0b4:	f7fd fe62 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 800a0b8:	61f8      	str	r0, [r7, #28]
        break;
 800a0ba:	e014      	b.n	800a0e6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0bc:	f7fd fe74 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800a0c0:	61f8      	str	r0, [r7, #28]
        break;
 800a0c2:	e010      	b.n	800a0e6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0c4:	4b4c      	ldr	r3, [pc, #304]	; (800a1f8 <UART_SetConfig+0x508>)
 800a0c6:	61fb      	str	r3, [r7, #28]
        break;
 800a0c8:	e00d      	b.n	800a0e6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0ca:	f7fd fdbf 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800a0ce:	61f8      	str	r0, [r7, #28]
        break;
 800a0d0:	e009      	b.n	800a0e6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d6:	61fb      	str	r3, [r7, #28]
        break;
 800a0d8:	e005      	b.n	800a0e6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a0e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d077      	beq.n	800a1dc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	005a      	lsls	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	441a      	add	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a100:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b0f      	cmp	r3, #15
 800a106:	d916      	bls.n	800a136 <UART_SetConfig+0x446>
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a10e:	d212      	bcs.n	800a136 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	b29b      	uxth	r3, r3
 800a114:	f023 030f 	bic.w	r3, r3, #15
 800a118:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	b29a      	uxth	r2, r3
 800a126:	8afb      	ldrh	r3, [r7, #22]
 800a128:	4313      	orrs	r3, r2
 800a12a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	8afa      	ldrh	r2, [r7, #22]
 800a132:	60da      	str	r2, [r3, #12]
 800a134:	e052      	b.n	800a1dc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a13c:	e04e      	b.n	800a1dc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a13e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a142:	2b08      	cmp	r3, #8
 800a144:	d827      	bhi.n	800a196 <UART_SetConfig+0x4a6>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <UART_SetConfig+0x45c>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	0800a197 	.word	0x0800a197
 800a15c:	0800a187 	.word	0x0800a187
 800a160:	0800a197 	.word	0x0800a197
 800a164:	0800a197 	.word	0x0800a197
 800a168:	0800a197 	.word	0x0800a197
 800a16c:	0800a18f 	.word	0x0800a18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a170:	f7fd fe04 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 800a174:	61f8      	str	r0, [r7, #28]
        break;
 800a176:	e014      	b.n	800a1a2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a178:	f7fd fe16 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800a17c:	61f8      	str	r0, [r7, #28]
        break;
 800a17e:	e010      	b.n	800a1a2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a180:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <UART_SetConfig+0x508>)
 800a182:	61fb      	str	r3, [r7, #28]
        break;
 800a184:	e00d      	b.n	800a1a2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a186:	f7fd fd61 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800a18a:	61f8      	str	r0, [r7, #28]
        break;
 800a18c:	e009      	b.n	800a1a2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a192:	61fb      	str	r3, [r7, #28]
        break;
 800a194:	e005      	b.n	800a1a2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a1a0:	bf00      	nop
    }

    if (pclk != 0U)
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d019      	beq.n	800a1dc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	085a      	lsrs	r2, r3, #1
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b0f      	cmp	r3, #15
 800a1c0:	d909      	bls.n	800a1d6 <UART_SetConfig+0x4e6>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c8:	d205      	bcs.n	800a1d6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	e002      	b.n	800a1dc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a1e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3728      	adds	r7, #40	; 0x28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1f6:	bf00      	nop
 800a1f8:	00f42400 	.word	0x00f42400

0800a1fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00a      	beq.n	800a226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00a      	beq.n	800a26a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d01a      	beq.n	800a312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2fa:	d10a      	bne.n	800a312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	605a      	str	r2, [r3, #4]
  }
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a350:	f7fa ffa6 	bl	80052a0 <HAL_GetTick>
 800a354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b08      	cmp	r3, #8
 800a362:	d10e      	bne.n	800a382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f82d 	bl	800a3d2 <UART_WaitOnFlagUntilTimeout>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e023      	b.n	800a3ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d10e      	bne.n	800a3ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f817 	bl	800a3d2 <UART_WaitOnFlagUntilTimeout>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e00d      	b.n	800a3ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b09c      	sub	sp, #112	; 0x70
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e2:	e0a5      	b.n	800a530 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	f000 80a1 	beq.w	800a530 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ee:	f7fa ff57 	bl	80052a0 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d302      	bcc.n	800a404 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a400:	2b00      	cmp	r3, #0
 800a402:	d13e      	bne.n	800a482 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a40c:	e853 3f00 	ldrex	r3, [r3]
 800a410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a418:	667b      	str	r3, [r7, #100]	; 0x64
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a424:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a42a:	e841 2300 	strex	r3, r2, [r1]
 800a42e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1e6      	bne.n	800a404 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3308      	adds	r3, #8
 800a43c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	f023 0301 	bic.w	r3, r3, #1
 800a44c:	663b      	str	r3, [r7, #96]	; 0x60
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a456:	64ba      	str	r2, [r7, #72]	; 0x48
 800a458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e5      	bne.n	800a436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e067      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d04f      	beq.n	800a530 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a49a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a49e:	d147      	bne.n	800a530 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4fc:	623a      	str	r2, [r7, #32]
 800a4fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	69f9      	ldr	r1, [r7, #28]
 800a502:	6a3a      	ldr	r2, [r7, #32]
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	61bb      	str	r3, [r7, #24]
   return(result);
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e5      	bne.n	800a4dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2220      	movs	r2, #32
 800a51a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2220      	movs	r2, #32
 800a520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e010      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	69da      	ldr	r2, [r3, #28]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	4013      	ands	r3, r2
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	bf0c      	ite	eq
 800a540:	2301      	moveq	r3, #1
 800a542:	2300      	movne	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	f43f af4a 	beq.w	800a3e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3770      	adds	r7, #112	; 0x70
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b096      	sub	sp, #88	; 0x58
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	88fa      	ldrh	r2, [r7, #6]
 800a574:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2222      	movs	r2, #34	; 0x22
 800a584:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d02b      	beq.n	800a5e6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a592:	4a42      	ldr	r2, [pc, #264]	; (800a69c <UART_Start_Receive_DMA+0x140>)
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59a:	4a41      	ldr	r2, [pc, #260]	; (800a6a0 <UART_Start_Receive_DMA+0x144>)
 800a59c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a2:	4a40      	ldr	r2, [pc, #256]	; (800a6a4 <UART_Start_Receive_DMA+0x148>)
 800a5a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	461a      	mov	r2, r3
 800a5c0:	88fb      	ldrh	r3, [r7, #6]
 800a5c2:	f7fc fa31 	bl	8006a28 <HAL_DMA_Start_IT>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00c      	beq.n	800a5e6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2210      	movs	r2, #16
 800a5d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e055      	b.n	800a692 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d018      	beq.n	800a628 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fe:	e853 3f00 	ldrex	r3, [r3]
 800a602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60a:	657b      	str	r3, [r7, #84]	; 0x54
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a614:	64bb      	str	r3, [r7, #72]	; 0x48
 800a616:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a61a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e6      	bne.n	800a5f6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3308      	adds	r3, #8
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	f043 0301 	orr.w	r3, r3, #1
 800a63e:	653b      	str	r3, [r7, #80]	; 0x50
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a648:	637a      	str	r2, [r7, #52]	; 0x34
 800a64a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a64e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a650:	e841 2300 	strex	r3, r2, [r1]
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e5      	bne.n	800a628 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	e853 3f00 	ldrex	r3, [r3]
 800a66a:	613b      	str	r3, [r7, #16]
   return(result);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a672:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3308      	adds	r3, #8
 800a67a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a67c:	623a      	str	r2, [r7, #32]
 800a67e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	69f9      	ldr	r1, [r7, #28]
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	61bb      	str	r3, [r7, #24]
   return(result);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e5      	bne.n	800a65c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3758      	adds	r7, #88	; 0x58
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	0800a879 	.word	0x0800a879
 800a6a0:	0800a9a5 	.word	0x0800a9a5
 800a6a4:	0800a9e5 	.word	0x0800a9e5

0800a6a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b089      	sub	sp, #36	; 0x24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	61bb      	str	r3, [r7, #24]
 800a6d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6979      	ldr	r1, [r7, #20]
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	613b      	str	r3, [r7, #16]
   return(result);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e6      	bne.n	800a6b0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a6e8:	bf00      	nop
 800a6ea:	3724      	adds	r7, #36	; 0x24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b095      	sub	sp, #84	; 0x54
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71a:	643b      	str	r3, [r7, #64]	; 0x40
 800a71c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e6      	bne.n	800a6fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3308      	adds	r3, #8
 800a734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	64bb      	str	r3, [r7, #72]	; 0x48
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e5      	bne.n	800a72e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a766:	2b01      	cmp	r3, #1
 800a768:	d118      	bne.n	800a79c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	60bb      	str	r3, [r7, #8]
   return(result);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f023 0310 	bic.w	r3, r3, #16
 800a77e:	647b      	str	r3, [r7, #68]	; 0x44
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a788:	61bb      	str	r3, [r7, #24]
 800a78a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6979      	ldr	r1, [r7, #20]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	613b      	str	r3, [r7, #16]
   return(result);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e6      	bne.n	800a76a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a7ae:	bf00      	nop
 800a7b0:	3754      	adds	r7, #84	; 0x54
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b090      	sub	sp, #64	; 0x40
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d137      	bne.n	800a846 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e5      	bne.n	800a7de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	69b9      	ldr	r1, [r7, #24]
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	e841 2300 	strex	r3, r2, [r1]
 800a83c:	617b      	str	r3, [r7, #20]
   return(result);
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e6      	bne.n	800a812 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a844:	e004      	b.n	800a850 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a84e:	4798      	blx	r3
}
 800a850:	bf00      	nop
 800a852:	3740      	adds	r7, #64	; 0x40
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a864:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a870:	bf00      	nop
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b09c      	sub	sp, #112	; 0x70
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a884:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d170      	bne.n	800a976 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a896:	2200      	movs	r2, #0
 800a898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e6      	bne.n	800a89c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	f023 0301 	bic.w	r3, r3, #1
 800a8e4:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8ee:	647a      	str	r2, [r7, #68]	; 0x44
 800a8f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e5      	bne.n	800a8ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3308      	adds	r3, #8
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	623b      	str	r3, [r7, #32]
   return(result);
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a918:	663b      	str	r3, [r7, #96]	; 0x60
 800a91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a922:	633a      	str	r2, [r7, #48]	; 0x30
 800a924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e5      	bne.n	800a902 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a938:	2220      	movs	r2, #32
 800a93a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a940:	2b01      	cmp	r3, #1
 800a942:	d118      	bne.n	800a976 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	60fb      	str	r3, [r7, #12]
   return(result);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f023 0310 	bic.w	r3, r3, #16
 800a958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a95a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	69b9      	ldr	r1, [r7, #24]
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	617b      	str	r3, [r7, #20]
   return(result);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e6      	bne.n	800a944 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d109      	bne.n	800a992 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a986:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800a98a:	4611      	mov	r1, r2
 800a98c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a98e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a990:	e004      	b.n	800a99c <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 800a992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a998:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a99a:	4798      	blx	r3
}
 800a99c:	bf00      	nop
 800a99e:	3770      	adds	r7, #112	; 0x70
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d10b      	bne.n	800a9d2 <UART_DMARxHalfCplt+0x2e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800a9c6:	0852      	lsrs	r2, r2, #1
 800a9c8:	b292      	uxth	r2, r2
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9d0:	e004      	b.n	800a9dc <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	4798      	blx	r3
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa08:	2b80      	cmp	r3, #128	; 0x80
 800aa0a:	d109      	bne.n	800aa20 <UART_DMAError+0x3c>
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2b21      	cmp	r3, #33	; 0x21
 800aa10:	d106      	bne.n	800aa20 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800aa1a:	6978      	ldr	r0, [r7, #20]
 800aa1c:	f7ff fe44 	bl	800a6a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2a:	2b40      	cmp	r3, #64	; 0x40
 800aa2c:	d109      	bne.n	800aa42 <UART_DMAError+0x5e>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b22      	cmp	r3, #34	; 0x22
 800aa32:	d106      	bne.n	800aa42 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	f7ff fe59 	bl	800a6f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa48:	f043 0210 	orr.w	r2, r3, #16
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa58:	6978      	ldr	r0, [r7, #20]
 800aa5a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5c:	bf00      	nop
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa8c:	bf00      	nop
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab0:	61fb      	str	r3, [r7, #28]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	61bb      	str	r3, [r7, #24]
 800aabc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	613b      	str	r3, [r7, #16]
   return(result);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e6      	bne.n	800aa9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	669a      	str	r2, [r3, #104]	; 0x68

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aae4:	bf00      	nop
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <__NVIC_SetPriority>:
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	db0a      	blt.n	800ab2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	490c      	ldr	r1, [pc, #48]	; (800ab4c <__NVIC_SetPriority+0x4c>)
 800ab1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab1e:	0112      	lsls	r2, r2, #4
 800ab20:	b2d2      	uxtb	r2, r2
 800ab22:	440b      	add	r3, r1
 800ab24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ab28:	e00a      	b.n	800ab40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	4908      	ldr	r1, [pc, #32]	; (800ab50 <__NVIC_SetPriority+0x50>)
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	3b04      	subs	r3, #4
 800ab38:	0112      	lsls	r2, r2, #4
 800ab3a:	b2d2      	uxtb	r2, r2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	761a      	strb	r2, [r3, #24]
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	e000e100 	.word	0xe000e100
 800ab50:	e000ed00 	.word	0xe000ed00

0800ab54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab58:	2100      	movs	r1, #0
 800ab5a:	f06f 0004 	mvn.w	r0, #4
 800ab5e:	f7ff ffcf 	bl	800ab00 <__NVIC_SetPriority>
#endif
}
 800ab62:	bf00      	nop
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab6e:	f3ef 8305 	mrs	r3, IPSR
 800ab72:	603b      	str	r3, [r7, #0]
  return(result);
 800ab74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab7a:	f06f 0305 	mvn.w	r3, #5
 800ab7e:	607b      	str	r3, [r7, #4]
 800ab80:	e00c      	b.n	800ab9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab82:	4b0a      	ldr	r3, [pc, #40]	; (800abac <osKernelInitialize+0x44>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d105      	bne.n	800ab96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab8a:	4b08      	ldr	r3, [pc, #32]	; (800abac <osKernelInitialize+0x44>)
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	e002      	b.n	800ab9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab9c:	687b      	ldr	r3, [r7, #4]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000b0c 	.word	0x20000b0c

0800abb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abb6:	f3ef 8305 	mrs	r3, IPSR
 800abba:	603b      	str	r3, [r7, #0]
  return(result);
 800abbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <osKernelStart+0x1a>
    stat = osErrorISR;
 800abc2:	f06f 0305 	mvn.w	r3, #5
 800abc6:	607b      	str	r3, [r7, #4]
 800abc8:	e010      	b.n	800abec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <osKernelStart+0x48>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d109      	bne.n	800abe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800abd2:	f7ff ffbf 	bl	800ab54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800abd6:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <osKernelStart+0x48>)
 800abd8:	2202      	movs	r2, #2
 800abda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800abdc:	f001 fbc4 	bl	800c368 <vTaskStartScheduler>
      stat = osOK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	607b      	str	r3, [r7, #4]
 800abe4:	e002      	b.n	800abec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800abe6:	f04f 33ff 	mov.w	r3, #4294967295
 800abea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000b0c 	.word	0x20000b0c

0800abfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	; 0x38
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac0c:	f3ef 8305 	mrs	r3, IPSR
 800ac10:	617b      	str	r3, [r7, #20]
  return(result);
 800ac12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d17e      	bne.n	800ad16 <osThreadNew+0x11a>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d07b      	beq.n	800ad16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac1e:	2380      	movs	r3, #128	; 0x80
 800ac20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac22:	2318      	movs	r3, #24
 800ac24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d045      	beq.n	800acc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <osThreadNew+0x48>
        name = attr->name;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <osThreadNew+0x6e>
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b38      	cmp	r3, #56	; 0x38
 800ac5c:	d805      	bhi.n	800ac6a <osThreadNew+0x6e>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <osThreadNew+0x72>
        return (NULL);
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e054      	b.n	800ad18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	089b      	lsrs	r3, r3, #2
 800ac7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00e      	beq.n	800aca4 <osThreadNew+0xa8>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	2ba7      	cmp	r3, #167	; 0xa7
 800ac8c:	d90a      	bls.n	800aca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d006      	beq.n	800aca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <osThreadNew+0xa8>
        mem = 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	61bb      	str	r3, [r7, #24]
 800aca2:	e010      	b.n	800acc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10c      	bne.n	800acc6 <osThreadNew+0xca>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d108      	bne.n	800acc6 <osThreadNew+0xca>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d104      	bne.n	800acc6 <osThreadNew+0xca>
          mem = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61bb      	str	r3, [r7, #24]
 800acc0:	e001      	b.n	800acc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d110      	bne.n	800acee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acd4:	9202      	str	r2, [sp, #8]
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6a3a      	ldr	r2, [r7, #32]
 800ace0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f001 f8d6 	bl	800be94 <xTaskCreateStatic>
 800ace8:	4603      	mov	r3, r0
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	e013      	b.n	800ad16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d110      	bne.n	800ad16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	f107 0310 	add.w	r3, r7, #16
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f001 f921 	bl	800bf4e <xTaskCreate>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <osThreadNew+0x11a>
            hTask = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ad16:	693b      	ldr	r3, [r7, #16]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3728      	adds	r7, #40	; 0x28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f002 fc6a 	bl	800d602 <pvTimerGetTimerID>
 800ad2e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	6852      	ldr	r2, [r2, #4]
 800ad3e:	4610      	mov	r0, r2
 800ad40:	4798      	blx	r3
  }
}
 800ad42:	bf00      	nop
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08c      	sub	sp, #48	; 0x30
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad60:	f3ef 8305 	mrs	r3, IPSR
 800ad64:	613b      	str	r3, [r7, #16]
  return(result);
 800ad66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d163      	bne.n	800ae34 <osTimerNew+0xe8>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d060      	beq.n	800ae34 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ad72:	2008      	movs	r0, #8
 800ad74:	f002 feb8 	bl	800dae8 <pvPortMalloc>
 800ad78:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d059      	beq.n	800ae34 <osTimerNew+0xe8>
      callb->func = func;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	e001      	b.n	800ad9c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ada0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01c      	beq.n	800ade6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <osTimerNew+0x6e>
          name = attr->name;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d006      	beq.n	800add0 <osTimerNew+0x84>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	2b2b      	cmp	r3, #43	; 0x2b
 800adc8:	d902      	bls.n	800add0 <osTimerNew+0x84>
          mem = 1;
 800adca:	2301      	movs	r3, #1
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	e00c      	b.n	800adea <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d108      	bne.n	800adea <osTimerNew+0x9e>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <osTimerNew+0x9e>
            mem = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
 800ade4:	e001      	b.n	800adea <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10c      	bne.n	800ae0a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <osTimerNew+0xf4>)
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	2101      	movs	r1, #1
 800ae00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae02:	f002 f856 	bl	800ceb2 <xTimerCreateStatic>
 800ae06:	6238      	str	r0, [r7, #32]
 800ae08:	e00b      	b.n	800ae22 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d108      	bne.n	800ae22 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ae10:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <osTimerNew+0xf4>)
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	2101      	movs	r1, #1
 800ae1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae1c:	f002 f828 	bl	800ce70 <xTimerCreate>
 800ae20:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <osTimerNew+0xe8>
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <osTimerNew+0xe8>
        vPortFree (callb);
 800ae2e:	6978      	ldr	r0, [r7, #20]
 800ae30:	f002 ff26 	bl	800dc80 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ae34:	6a3b      	ldr	r3, [r7, #32]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3728      	adds	r7, #40	; 0x28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	0800ad21 	.word	0x0800ad21

0800ae44 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b088      	sub	sp, #32
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae52:	f3ef 8305 	mrs	r3, IPSR
 800ae56:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae58:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <osTimerStart+0x22>
    stat = osErrorISR;
 800ae5e:	f06f 0305 	mvn.w	r3, #5
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e017      	b.n	800ae96 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d103      	bne.n	800ae74 <osTimerStart+0x30>
    stat = osErrorParameter;
 800ae6c:	f06f 0303 	mvn.w	r3, #3
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e010      	b.n	800ae96 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800ae74:	2300      	movs	r3, #0
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	6938      	ldr	r0, [r7, #16]
 800ae80:	f002 f890 	bl	800cfa4 <xTimerGenericCommand>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d102      	bne.n	800ae90 <osTimerStart+0x4c>
      stat = osOK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e002      	b.n	800ae96 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800ae90:	f06f 0302 	mvn.w	r3, #2
 800ae94:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ae96:	697b      	ldr	r3, [r7, #20]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeac:	f3ef 8305 	mrs	r3, IPSR
 800aeb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <osTimerStop+0x20>
    stat = osErrorISR;
 800aeb8:	f06f 0305 	mvn.w	r3, #5
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	e021      	b.n	800af04 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <osTimerStop+0x2e>
    stat = osErrorParameter;
 800aec6:	f06f 0303 	mvn.w	r3, #3
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e01a      	b.n	800af04 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800aece:	6938      	ldr	r0, [r7, #16]
 800aed0:	f002 fb6e 	bl	800d5b0 <xTimerIsTimerActive>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d103      	bne.n	800aee2 <osTimerStop+0x42>
      stat = osErrorResource;
 800aeda:	f06f 0302 	mvn.w	r3, #2
 800aede:	617b      	str	r3, [r7, #20]
 800aee0:	e010      	b.n	800af04 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800aee2:	2300      	movs	r3, #0
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	2103      	movs	r1, #3
 800aeec:	6938      	ldr	r0, [r7, #16]
 800aeee:	f002 f859 	bl	800cfa4 <xTimerGenericCommand>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d102      	bne.n	800aefe <osTimerStop+0x5e>
        stat = osOK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e002      	b.n	800af04 <osTimerStop+0x64>
      } else {
        stat = osError;
 800aefe:	f04f 33ff 	mov.w	r3, #4294967295
 800af02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800af04:	697b      	ldr	r3, [r7, #20]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af0e:	b580      	push	{r7, lr}
 800af10:	b08a      	sub	sp, #40	; 0x28
 800af12:	af02      	add	r7, sp, #8
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1e:	f3ef 8305 	mrs	r3, IPSR
 800af22:	613b      	str	r3, [r7, #16]
  return(result);
 800af24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af26:	2b00      	cmp	r3, #0
 800af28:	d175      	bne.n	800b016 <osSemaphoreNew+0x108>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d072      	beq.n	800b016 <osSemaphoreNew+0x108>
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	429a      	cmp	r2, r3
 800af36:	d86e      	bhi.n	800b016 <osSemaphoreNew+0x108>
    mem = -1;
 800af38:	f04f 33ff 	mov.w	r3, #4294967295
 800af3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d015      	beq.n	800af70 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d006      	beq.n	800af5a <osSemaphoreNew+0x4c>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	2b4f      	cmp	r3, #79	; 0x4f
 800af52:	d902      	bls.n	800af5a <osSemaphoreNew+0x4c>
        mem = 1;
 800af54:	2301      	movs	r3, #1
 800af56:	61bb      	str	r3, [r7, #24]
 800af58:	e00c      	b.n	800af74 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d108      	bne.n	800af74 <osSemaphoreNew+0x66>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d104      	bne.n	800af74 <osSemaphoreNew+0x66>
          mem = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	e001      	b.n	800af74 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d04c      	beq.n	800b016 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d128      	bne.n	800afd4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d10a      	bne.n	800af9e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	2203      	movs	r2, #3
 800af8e:	9200      	str	r2, [sp, #0]
 800af90:	2200      	movs	r2, #0
 800af92:	2100      	movs	r1, #0
 800af94:	2001      	movs	r0, #1
 800af96:	f000 fa07 	bl	800b3a8 <xQueueGenericCreateStatic>
 800af9a:	61f8      	str	r0, [r7, #28]
 800af9c:	e005      	b.n	800afaa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800af9e:	2203      	movs	r2, #3
 800afa0:	2100      	movs	r1, #0
 800afa2:	2001      	movs	r0, #1
 800afa4:	f000 fa78 	bl	800b498 <xQueueGenericCreate>
 800afa8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d022      	beq.n	800aff6 <osSemaphoreNew+0xe8>
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d01f      	beq.n	800aff6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800afb6:	2300      	movs	r3, #0
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	69f8      	ldr	r0, [r7, #28]
 800afbe:	f000 fb33 	bl	800b628 <xQueueGenericSend>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d016      	beq.n	800aff6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800afc8:	69f8      	ldr	r0, [r7, #28]
 800afca:	f000 fda7 	bl	800bb1c <vQueueDelete>
            hSemaphore = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	e010      	b.n	800aff6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d108      	bne.n	800afec <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	461a      	mov	r2, r3
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 fab5 	bl	800b552 <xQueueCreateCountingSemaphoreStatic>
 800afe8:	61f8      	str	r0, [r7, #28]
 800afea:	e004      	b.n	800aff6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 fae6 	bl	800b5c0 <xQueueCreateCountingSemaphore>
 800aff4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <osSemaphoreNew+0xfc>
          name = attr->name;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	e001      	b.n	800b00e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b00e:	6979      	ldr	r1, [r7, #20]
 800b010:	69f8      	ldr	r0, [r7, #28]
 800b012:	f000 feb7 	bl	800bd84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	; 0x28
 800b024:	af02      	add	r7, sp, #8
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b030:	f3ef 8305 	mrs	r3, IPSR
 800b034:	613b      	str	r3, [r7, #16]
  return(result);
 800b036:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d15f      	bne.n	800b0fc <osMessageQueueNew+0xdc>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d05c      	beq.n	800b0fc <osMessageQueueNew+0xdc>
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d059      	beq.n	800b0fc <osMessageQueueNew+0xdc>
    mem = -1;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d029      	beq.n	800b0a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d012      	beq.n	800b082 <osMessageQueueNew+0x62>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	2b4f      	cmp	r3, #79	; 0x4f
 800b062:	d90e      	bls.n	800b082 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	695a      	ldr	r2, [r3, #20]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	429a      	cmp	r2, r3
 800b07a:	d302      	bcc.n	800b082 <osMessageQueueNew+0x62>
        mem = 1;
 800b07c:	2301      	movs	r3, #1
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	e014      	b.n	800b0ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d110      	bne.n	800b0ac <osMessageQueueNew+0x8c>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10c      	bne.n	800b0ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b096:	2b00      	cmp	r3, #0
 800b098:	d108      	bne.n	800b0ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <osMessageQueueNew+0x8c>
          mem = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
 800b0a6:	e001      	b.n	800b0ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10b      	bne.n	800b0ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	9100      	str	r1, [sp, #0]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 f971 	bl	800b3a8 <xQueueGenericCreateStatic>
 800b0c6:	61f8      	str	r0, [r7, #28]
 800b0c8:	e008      	b.n	800b0dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d105      	bne.n	800b0dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f9df 	bl	800b498 <xQueueGenericCreate>
 800b0da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00c      	beq.n	800b0fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	e001      	b.n	800b0f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	69f8      	ldr	r0, [r7, #28]
 800b0f8:	f000 fe44 	bl	800bd84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b0fc:	69fb      	ldr	r3, [r7, #28]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3720      	adds	r7, #32
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4a07      	ldr	r2, [pc, #28]	; (800b134 <vApplicationGetIdleTaskMemory+0x2c>)
 800b118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	4a06      	ldr	r2, [pc, #24]	; (800b138 <vApplicationGetIdleTaskMemory+0x30>)
 800b11e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2280      	movs	r2, #128	; 0x80
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20000b10 	.word	0x20000b10
 800b138:	20000bb8 	.word	0x20000bb8

0800b13c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4a07      	ldr	r2, [pc, #28]	; (800b168 <vApplicationGetTimerTaskMemory+0x2c>)
 800b14c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	4a06      	ldr	r2, [pc, #24]	; (800b16c <vApplicationGetTimerTaskMemory+0x30>)
 800b152:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b15a:	601a      	str	r2, [r3, #0]
}
 800b15c:	bf00      	nop
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20000db8 	.word	0x20000db8
 800b16c:	20000e60 	.word	0x20000e60

0800b170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f103 0208 	add.w	r2, r3, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 0208 	add.w	r2, r3, #8
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f103 0208 	add.w	r2, r3, #8
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1be:	bf00      	nop
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b228:	d103      	bne.n	800b232 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e00c      	b.n	800b24c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3308      	adds	r3, #8
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e002      	b.n	800b240 <vListInsert+0x2e>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d2f6      	bcs.n	800b23a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
}
 800b278:	bf00      	nop
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6892      	ldr	r2, [r2, #8]
 800b29a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6852      	ldr	r2, [r2, #4]
 800b2a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d103      	bne.n	800b2b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b302:	f002 facf 	bl	800d8a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b312:	fb01 f303 	mul.w	r3, r1, r3
 800b316:	441a      	add	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b332:	3b01      	subs	r3, #1
 800b334:	68f9      	ldr	r1, [r7, #12]
 800b336:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b338:	fb01 f303 	mul.w	r3, r1, r3
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	22ff      	movs	r2, #255	; 0xff
 800b346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	22ff      	movs	r2, #255	; 0xff
 800b34e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d114      	bne.n	800b382 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01a      	beq.n	800b396 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3310      	adds	r3, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f001 fa99 	bl	800c89c <xTaskRemoveFromEventList>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d012      	beq.n	800b396 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <xQueueGenericReset+0xcc>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	e009      	b.n	800b396 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3310      	adds	r3, #16
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff fef2 	bl	800b170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3324      	adds	r3, #36	; 0x24
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff feed 	bl	800b170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b396:	f002 fab5 	bl	800d904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b39a:	2301      	movs	r3, #1
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	e000ed04 	.word	0xe000ed04

0800b3a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08e      	sub	sp, #56	; 0x38
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10a      	bne.n	800b3ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <xQueueGenericCreateStatic+0x52>
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <xQueueGenericCreateStatic+0x56>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <xQueueGenericCreateStatic+0x58>
 800b3fe:	2300      	movs	r3, #0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	623b      	str	r3, [r7, #32]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <xQueueGenericCreateStatic+0x7e>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <xQueueGenericCreateStatic+0x82>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <xQueueGenericCreateStatic+0x84>
 800b42a:	2300      	movs	r3, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	61fb      	str	r3, [r7, #28]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b446:	2350      	movs	r3, #80	; 0x50
 800b448:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b50      	cmp	r3, #80	; 0x50
 800b44e:	d00a      	beq.n	800b466 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	61bb      	str	r3, [r7, #24]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b466:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b47a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	68b9      	ldr	r1, [r7, #8]
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f83f 	bl	800b50c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b490:	4618      	mov	r0, r3
 800b492:	3730      	adds	r7, #48	; 0x30
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	613b      	str	r3, [r7, #16]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	3350      	adds	r3, #80	; 0x50
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f002 fb09 	bl	800dae8 <pvPortMalloc>
 800b4d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d011      	beq.n	800b502 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	3350      	adds	r3, #80	; 0x50
 800b4e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4f0:	79fa      	ldrb	r2, [r7, #7]
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 f805 	bl	800b50c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b502:	69bb      	ldr	r3, [r7, #24]
	}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d103      	bne.n	800b528 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e002      	b.n	800b52e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b53a:	2101      	movs	r1, #1
 800b53c:	69b8      	ldr	r0, [r7, #24]
 800b53e:	f7ff fecb 	bl	800b2d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b54a:	bf00      	nop
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b552:	b580      	push	{r7, lr}
 800b554:	b08a      	sub	sp, #40	; 0x28
 800b556:	af02      	add	r7, sp, #8
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	61bb      	str	r3, [r7, #24]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d90a      	bls.n	800b598 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	617b      	str	r3, [r7, #20]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b598:	2302      	movs	r3, #2
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff ff00 	bl	800b3a8 <xQueueGenericCreateStatic>
 800b5a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
	}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10a      	bne.n	800b5e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	613b      	str	r3, [r7, #16]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d90a      	bls.n	800b604 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	60fb      	str	r3, [r7, #12]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b604:	2202      	movs	r2, #2
 800b606:	2100      	movs	r1, #0
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7ff ff45 	bl	800b498 <xQueueGenericCreate>
 800b60e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b61c:	697b      	ldr	r3, [r7, #20]
	}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08e      	sub	sp, #56	; 0x38
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b636:	2300      	movs	r3, #0
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <xQueueGenericSend+0x32>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <xQueueGenericSend+0x40>
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <xQueueGenericSend+0x44>
 800b668:	2301      	movs	r3, #1
 800b66a:	e000      	b.n	800b66e <xQueueGenericSend+0x46>
 800b66c:	2300      	movs	r3, #0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <xQueueGenericSend+0x60>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d103      	bne.n	800b696 <xQueueGenericSend+0x6e>
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b692:	2b01      	cmp	r3, #1
 800b694:	d101      	bne.n	800b69a <xQueueGenericSend+0x72>
 800b696:	2301      	movs	r3, #1
 800b698:	e000      	b.n	800b69c <xQueueGenericSend+0x74>
 800b69a:	2300      	movs	r3, #0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	623b      	str	r3, [r7, #32]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6b6:	f001 fab3 	bl	800cc20 <xTaskGetSchedulerState>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <xQueueGenericSend+0x9e>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <xQueueGenericSend+0xa2>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e000      	b.n	800b6cc <xQueueGenericSend+0xa4>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10a      	bne.n	800b6e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	61fb      	str	r3, [r7, #28]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6e6:	f002 f8dd 	bl	800d8a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d302      	bcc.n	800b6fc <xQueueGenericSend+0xd4>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d129      	bne.n	800b750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	68b9      	ldr	r1, [r7, #8]
 800b700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b702:	f000 fa2e 	bl	800bb62 <prvCopyDataToQueue>
 800b706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d010      	beq.n	800b732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	3324      	adds	r3, #36	; 0x24
 800b714:	4618      	mov	r0, r3
 800b716:	f001 f8c1 	bl	800c89c <xTaskRemoveFromEventList>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d013      	beq.n	800b748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b720:	4b3f      	ldr	r3, [pc, #252]	; (800b820 <xQueueGenericSend+0x1f8>)
 800b722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	e00a      	b.n	800b748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d007      	beq.n	800b748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b738:	4b39      	ldr	r3, [pc, #228]	; (800b820 <xQueueGenericSend+0x1f8>)
 800b73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b748:	f002 f8dc 	bl	800d904 <vPortExitCritical>
				return pdPASS;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e063      	b.n	800b818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d103      	bne.n	800b75e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b756:	f002 f8d5 	bl	800d904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	e05c      	b.n	800b818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b764:	f107 0314 	add.w	r3, r7, #20
 800b768:	4618      	mov	r0, r3
 800b76a:	f001 f8fb 	bl	800c964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b76e:	2301      	movs	r3, #1
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b772:	f002 f8c7 	bl	800d904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b776:	f000 fe67 	bl	800c448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b77a:	f002 f893 	bl	800d8a4 <vPortEnterCritical>
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b784:	b25b      	sxtb	r3, r3
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d103      	bne.n	800b794 <xQueueGenericSend+0x16c>
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b79a:	b25b      	sxtb	r3, r3
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d103      	bne.n	800b7aa <xQueueGenericSend+0x182>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7aa:	f002 f8ab 	bl	800d904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7ae:	1d3a      	adds	r2, r7, #4
 800b7b0:	f107 0314 	add.w	r3, r7, #20
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 f8ea 	bl	800c990 <xTaskCheckForTimeOut>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d124      	bne.n	800b80c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7c4:	f000 fac5 	bl	800bd52 <prvIsQueueFull>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d018      	beq.n	800b800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	3310      	adds	r3, #16
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 f810 	bl	800c7fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7de:	f000 fa50 	bl	800bc82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7e2:	f000 fe3f 	bl	800c464 <xTaskResumeAll>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f47f af7c 	bne.w	800b6e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <xQueueGenericSend+0x1f8>)
 800b7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	e772      	b.n	800b6e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b802:	f000 fa3e 	bl	800bc82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b806:	f000 fe2d 	bl	800c464 <xTaskResumeAll>
 800b80a:	e76c      	b.n	800b6e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b80e:	f000 fa38 	bl	800bc82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b812:	f000 fe27 	bl	800c464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3738      	adds	r7, #56	; 0x38
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	e000ed04 	.word	0xe000ed04

0800b824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b090      	sub	sp, #64	; 0x40
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d103      	bne.n	800b860 <xQueueGenericSendFromISR+0x3c>
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <xQueueGenericSendFromISR+0x40>
 800b860:	2301      	movs	r3, #1
 800b862:	e000      	b.n	800b866 <xQueueGenericSendFromISR+0x42>
 800b864:	2300      	movs	r3, #0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d103      	bne.n	800b88e <xQueueGenericSendFromISR+0x6a>
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d101      	bne.n	800b892 <xQueueGenericSendFromISR+0x6e>
 800b88e:	2301      	movs	r3, #1
 800b890:	e000      	b.n	800b894 <xQueueGenericSendFromISR+0x70>
 800b892:	2300      	movs	r3, #0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	623b      	str	r3, [r7, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8ae:	f002 f8db 	bl	800da68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8b2:	f3ef 8211 	mrs	r2, BASEPRI
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	61fa      	str	r2, [r7, #28]
 800b8c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d302      	bcc.n	800b8e0 <xQueueGenericSendFromISR+0xbc>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d12f      	bne.n	800b940 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8f6:	f000 f934 	bl	800bb62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d112      	bne.n	800b92a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d016      	beq.n	800b93a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	3324      	adds	r3, #36	; 0x24
 800b910:	4618      	mov	r0, r3
 800b912:	f000 ffc3 	bl	800c89c <xTaskRemoveFromEventList>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	e007      	b.n	800b93a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b92a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b92e:	3301      	adds	r3, #1
 800b930:	b2db      	uxtb	r3, r3
 800b932:	b25a      	sxtb	r2, r3
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b93a:	2301      	movs	r3, #1
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b93e:	e001      	b.n	800b944 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b940:	2300      	movs	r3, #0
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b94e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b952:	4618      	mov	r0, r3
 800b954:	3740      	adds	r7, #64	; 0x40
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08c      	sub	sp, #48	; 0x30
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <xQueueReceive+0x30>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	623b      	str	r3, [r7, #32]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d103      	bne.n	800b99a <xQueueReceive+0x3e>
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <xQueueReceive+0x42>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <xQueueReceive+0x44>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <xQueueReceive+0x5e>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	61fb      	str	r3, [r7, #28]
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ba:	f001 f931 	bl	800cc20 <xTaskGetSchedulerState>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <xQueueReceive+0x6e>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <xQueueReceive+0x72>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <xQueueReceive+0x74>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueReceive+0x8e>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	61bb      	str	r3, [r7, #24]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ea:	f001 ff5b 	bl	800d8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01f      	beq.n	800ba3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9fe:	f000 f91a 	bl	800bc36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	1e5a      	subs	r2, r3, #1
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00f      	beq.n	800ba32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	3310      	adds	r3, #16
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 ff40 	bl	800c89c <xTaskRemoveFromEventList>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d007      	beq.n	800ba32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba22:	4b3d      	ldr	r3, [pc, #244]	; (800bb18 <xQueueReceive+0x1bc>)
 800ba24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba28:	601a      	str	r2, [r3, #0]
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba32:	f001 ff67 	bl	800d904 <vPortExitCritical>
				return pdPASS;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e069      	b.n	800bb0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba40:	f001 ff60 	bl	800d904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e062      	b.n	800bb0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba4e:	f107 0310 	add.w	r3, r7, #16
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 ff86 	bl	800c964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba5c:	f001 ff52 	bl	800d904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba60:	f000 fcf2 	bl	800c448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba64:	f001 ff1e 	bl	800d8a4 <vPortEnterCritical>
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba6e:	b25b      	sxtb	r3, r3
 800ba70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba74:	d103      	bne.n	800ba7e <xQueueReceive+0x122>
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba84:	b25b      	sxtb	r3, r3
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8a:	d103      	bne.n	800ba94 <xQueueReceive+0x138>
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba94:	f001 ff36 	bl	800d904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba98:	1d3a      	adds	r2, r7, #4
 800ba9a:	f107 0310 	add.w	r3, r7, #16
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 ff75 	bl	800c990 <xTaskCheckForTimeOut>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d123      	bne.n	800baf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baae:	f000 f93a 	bl	800bd26 <prvIsQueueEmpty>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d017      	beq.n	800bae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	3324      	adds	r3, #36	; 0x24
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4611      	mov	r1, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 fe9b 	bl	800c7fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac8:	f000 f8db 	bl	800bc82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bacc:	f000 fcca 	bl	800c464 <xTaskResumeAll>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d189      	bne.n	800b9ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bad6:	4b10      	ldr	r3, [pc, #64]	; (800bb18 <xQueueReceive+0x1bc>)
 800bad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	e780      	b.n	800b9ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baea:	f000 f8ca 	bl	800bc82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baee:	f000 fcb9 	bl	800c464 <xTaskResumeAll>
 800baf2:	e77a      	b.n	800b9ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf6:	f000 f8c4 	bl	800bc82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bafa:	f000 fcb3 	bl	800c464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bafe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb00:	f000 f911 	bl	800bd26 <prvIsQueueEmpty>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f43f af6f 	beq.w	800b9ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3730      	adds	r7, #48	; 0x30
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10a      	bne.n	800bb44 <vQueueDelete+0x28>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	60bb      	str	r3, [r7, #8]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 f947 	bl	800bdd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d102      	bne.n	800bb5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f002 f893 	bl	800dc80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b086      	sub	sp, #24
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10d      	bne.n	800bb9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d14d      	bne.n	800bc24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 f865 	bl	800cc5c <xTaskPriorityDisinherit>
 800bb92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	609a      	str	r2, [r3, #8]
 800bb9a:	e043      	b.n	800bc24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d119      	bne.n	800bbd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6858      	ldr	r0, [r3, #4]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	461a      	mov	r2, r3
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	f003 faf2 	bl	800f196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	441a      	add	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d32b      	bcc.n	800bc24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	605a      	str	r2, [r3, #4]
 800bbd4:	e026      	b.n	800bc24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68d8      	ldr	r0, [r3, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbde:	461a      	mov	r2, r3
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	f003 fad8 	bl	800f196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	425b      	negs	r3, r3
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	68da      	ldr	r2, [r3, #12]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d207      	bcs.n	800bc12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689a      	ldr	r2, [r3, #8]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	425b      	negs	r3, r3
 800bc0c:	441a      	add	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d105      	bne.n	800bc24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc2c:	697b      	ldr	r3, [r7, #20]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d018      	beq.n	800bc7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc50:	441a      	add	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d303      	bcc.n	800bc6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68d9      	ldr	r1, [r3, #12]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	461a      	mov	r2, r3
 800bc74:	6838      	ldr	r0, [r7, #0]
 800bc76:	f003 fa8e 	bl	800f196 <memcpy>
	}
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc8a:	f001 fe0b 	bl	800d8a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc96:	e011      	b.n	800bcbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d012      	beq.n	800bcc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3324      	adds	r3, #36	; 0x24
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 fdf9 	bl	800c89c <xTaskRemoveFromEventList>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcb0:	f000 fed0 	bl	800ca54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dce9      	bgt.n	800bc98 <prvUnlockQueue+0x16>
 800bcc4:	e000      	b.n	800bcc8 <prvUnlockQueue+0x46>
					break;
 800bcc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	22ff      	movs	r2, #255	; 0xff
 800bccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bcd0:	f001 fe18 	bl	800d904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcd4:	f001 fde6 	bl	800d8a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bce0:	e011      	b.n	800bd06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d012      	beq.n	800bd10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3310      	adds	r3, #16
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 fdd4 	bl	800c89c <xTaskRemoveFromEventList>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcfa:	f000 feab 	bl	800ca54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dce9      	bgt.n	800bce2 <prvUnlockQueue+0x60>
 800bd0e:	e000      	b.n	800bd12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	22ff      	movs	r2, #255	; 0xff
 800bd16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd1a:	f001 fdf3 	bl	800d904 <vPortExitCritical>
}
 800bd1e:	bf00      	nop
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd2e:	f001 fdb9 	bl	800d8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d102      	bne.n	800bd40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	e001      	b.n	800bd44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd44:	f001 fdde 	bl	800d904 <vPortExitCritical>

	return xReturn;
 800bd48:	68fb      	ldr	r3, [r7, #12]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd5a:	f001 fda3 	bl	800d8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d102      	bne.n	800bd70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	e001      	b.n	800bd74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd74:	f001 fdc6 	bl	800d904 <vPortExitCritical>

	return xReturn;
 800bd78:	68fb      	ldr	r3, [r7, #12]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
	...

0800bd84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e014      	b.n	800bdbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd94:	4a0f      	ldr	r2, [pc, #60]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10b      	bne.n	800bdb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bda0:	490c      	ldr	r1, [pc, #48]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdaa:	4a0a      	ldr	r2, [pc, #40]	; (800bdd4 <vQueueAddToRegistry+0x50>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdb6:	e006      	b.n	800bdc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b07      	cmp	r3, #7
 800bdc2:	d9e7      	bls.n	800bd94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20001260 	.word	0x20001260

0800bdd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	e016      	b.n	800be14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bde6:	4a10      	ldr	r2, [pc, #64]	; (800be28 <vQueueUnregisterQueue+0x50>)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	00db      	lsls	r3, r3, #3
 800bdec:	4413      	add	r3, r2
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d10b      	bne.n	800be0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bdf6:	4a0c      	ldr	r2, [pc, #48]	; (800be28 <vQueueUnregisterQueue+0x50>)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800be00:	4a09      	ldr	r2, [pc, #36]	; (800be28 <vQueueUnregisterQueue+0x50>)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	4413      	add	r3, r2
 800be08:	2200      	movs	r2, #0
 800be0a:	605a      	str	r2, [r3, #4]
				break;
 800be0c:	e006      	b.n	800be1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3301      	adds	r3, #1
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b07      	cmp	r3, #7
 800be18:	d9e5      	bls.n	800bde6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	20001260 	.word	0x20001260

0800be2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be3c:	f001 fd32 	bl	800d8a4 <vPortEnterCritical>
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be46:	b25b      	sxtb	r3, r3
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d103      	bne.n	800be56 <vQueueWaitForMessageRestricted+0x2a>
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be62:	d103      	bne.n	800be6c <vQueueWaitForMessageRestricted+0x40>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be6c:	f001 fd4a 	bl	800d904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3324      	adds	r3, #36	; 0x24
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	4618      	mov	r0, r3
 800be82:	f000 fcdf 	bl	800c844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be86:	6978      	ldr	r0, [r7, #20]
 800be88:	f7ff fefb 	bl	800bc82 <prvUnlockQueue>
	}
 800be8c:	bf00      	nop
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08e      	sub	sp, #56	; 0x38
 800be98:	af04      	add	r7, sp, #16
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <xTaskCreateStatic+0x2a>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	623b      	str	r3, [r7, #32]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xTaskCreateStatic+0x46>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	61fb      	str	r3, [r7, #28]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800beda:	23a8      	movs	r3, #168	; 0xa8
 800bedc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2ba8      	cmp	r3, #168	; 0xa8
 800bee2:	d00a      	beq.n	800befa <xTaskCreateStatic+0x66>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	61bb      	str	r3, [r7, #24]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800befa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d01e      	beq.n	800bf40 <xTaskCreateStatic+0xac>
 800bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d01b      	beq.n	800bf40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	2202      	movs	r2, #2
 800bf16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	9302      	str	r3, [sp, #8]
 800bf22:	f107 0314 	add.w	r3, r7, #20
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f850 	bl	800bfd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf3a:	f000 f8f3 	bl	800c124 <prvAddNewTaskToReadyList>
 800bf3e:	e001      	b.n	800bf44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf44:	697b      	ldr	r3, [r7, #20]
	}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3728      	adds	r7, #40	; 0x28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b08c      	sub	sp, #48	; 0x30
 800bf52:	af04      	add	r7, sp, #16
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	60b9      	str	r1, [r7, #8]
 800bf58:	603b      	str	r3, [r7, #0]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f001 fdc0 	bl	800dae8 <pvPortMalloc>
 800bf68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00e      	beq.n	800bf8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf70:	20a8      	movs	r0, #168	; 0xa8
 800bf72:	f001 fdb9 	bl	800dae8 <pvPortMalloc>
 800bf76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	631a      	str	r2, [r3, #48]	; 0x30
 800bf84:	e005      	b.n	800bf92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf86:	6978      	ldr	r0, [r7, #20]
 800bf88:	f001 fe7a 	bl	800dc80 <vPortFree>
 800bf8c:	e001      	b.n	800bf92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d017      	beq.n	800bfc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfa0:	88fa      	ldrh	r2, [r7, #6]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9303      	str	r3, [sp, #12]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68b9      	ldr	r1, [r7, #8]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f80e 	bl	800bfd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfbc:	69f8      	ldr	r0, [r7, #28]
 800bfbe:	f000 f8b1 	bl	800c124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	e002      	b.n	800bfce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfce:	69bb      	ldr	r3, [r7, #24]
	}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	461a      	mov	r2, r3
 800bff0:	21a5      	movs	r1, #165	; 0xa5
 800bff2:	f002 ffd4 	bl	800ef9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c000:	3b01      	subs	r3, #1
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	617b      	str	r3, [r7, #20]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d01f      	beq.n	800c076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c036:	2300      	movs	r3, #0
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	e012      	b.n	800c062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	4413      	add	r3, r2
 800c042:	7819      	ldrb	r1, [r3, #0]
 800c044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	3334      	adds	r3, #52	; 0x34
 800c04c:	460a      	mov	r2, r1
 800c04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d006      	beq.n	800c06a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	3301      	adds	r3, #1
 800c060:	61fb      	str	r3, [r7, #28]
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	2b0f      	cmp	r3, #15
 800c066:	d9e9      	bls.n	800c03c <prvInitialiseNewTask+0x64>
 800c068:	e000      	b.n	800c06c <prvInitialiseNewTask+0x94>
			{
				break;
 800c06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c074:	e003      	b.n	800c07e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	2200      	movs	r2, #0
 800c07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	2b37      	cmp	r3, #55	; 0x37
 800c082:	d901      	bls.n	800c088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c084:	2337      	movs	r3, #55	; 0x37
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c08c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	2200      	movs	r2, #0
 800c098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	3304      	adds	r3, #4
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff f886 	bl	800b1b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	3318      	adds	r3, #24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff f881 	bl	800b1b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d6:	3354      	adds	r3, #84	; 0x54
 800c0d8:	224c      	movs	r2, #76	; 0x4c
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f002 ff5e 	bl	800ef9e <memset>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	; (800c118 <prvInitialiseNewTask+0x140>)
 800c0e6:	659a      	str	r2, [r3, #88]	; 0x58
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	; (800c11c <prvInitialiseNewTask+0x144>)
 800c0ec:	65da      	str	r2, [r3, #92]	; 0x5c
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	4a0b      	ldr	r2, [pc, #44]	; (800c120 <prvInitialiseNewTask+0x148>)
 800c0f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	68f9      	ldr	r1, [r7, #12]
 800c0f8:	69b8      	ldr	r0, [r7, #24]
 800c0fa:	f001 faa3 	bl	800d644 <pxPortInitialiseStack>
 800c0fe:	4602      	mov	r2, r0
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c10e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c110:	bf00      	nop
 800c112:	3720      	adds	r7, #32
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20002c84 	.word	0x20002c84
 800c11c:	20002cec 	.word	0x20002cec
 800c120:	20002d54 	.word	0x20002d54

0800c124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c12c:	f001 fbba 	bl	800d8a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c130:	4b2d      	ldr	r3, [pc, #180]	; (800c1e8 <prvAddNewTaskToReadyList+0xc4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3301      	adds	r3, #1
 800c136:	4a2c      	ldr	r2, [pc, #176]	; (800c1e8 <prvAddNewTaskToReadyList+0xc4>)
 800c138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c13a:	4b2c      	ldr	r3, [pc, #176]	; (800c1ec <prvAddNewTaskToReadyList+0xc8>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d109      	bne.n	800c156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <prvAddNewTaskToReadyList+0xc8>)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c148:	4b27      	ldr	r3, [pc, #156]	; (800c1e8 <prvAddNewTaskToReadyList+0xc4>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d110      	bne.n	800c172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c150:	f000 fca4 	bl	800ca9c <prvInitialiseTaskLists>
 800c154:	e00d      	b.n	800c172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c156:	4b26      	ldr	r3, [pc, #152]	; (800c1f0 <prvAddNewTaskToReadyList+0xcc>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c15e:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <prvAddNewTaskToReadyList+0xc8>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c168:	429a      	cmp	r2, r3
 800c16a:	d802      	bhi.n	800c172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c16c:	4a1f      	ldr	r2, [pc, #124]	; (800c1ec <prvAddNewTaskToReadyList+0xc8>)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c172:	4b20      	ldr	r3, [pc, #128]	; (800c1f4 <prvAddNewTaskToReadyList+0xd0>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	4a1e      	ldr	r2, [pc, #120]	; (800c1f4 <prvAddNewTaskToReadyList+0xd0>)
 800c17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c17c:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <prvAddNewTaskToReadyList+0xd0>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c188:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <prvAddNewTaskToReadyList+0xd4>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d903      	bls.n	800c198 <prvAddNewTaskToReadyList+0x74>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c194:	4a18      	ldr	r2, [pc, #96]	; (800c1f8 <prvAddNewTaskToReadyList+0xd4>)
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4a15      	ldr	r2, [pc, #84]	; (800c1fc <prvAddNewTaskToReadyList+0xd8>)
 800c1a6:	441a      	add	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7ff f80b 	bl	800b1ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1b4:	f001 fba6 	bl	800d904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <prvAddNewTaskToReadyList+0xcc>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1c0:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <prvAddNewTaskToReadyList+0xc8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d207      	bcs.n	800c1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1ce:	4b0c      	ldr	r3, [pc, #48]	; (800c200 <prvAddNewTaskToReadyList+0xdc>)
 800c1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20001774 	.word	0x20001774
 800c1ec:	200012a0 	.word	0x200012a0
 800c1f0:	20001780 	.word	0x20001780
 800c1f4:	20001790 	.word	0x20001790
 800c1f8:	2000177c 	.word	0x2000177c
 800c1fc:	200012a4 	.word	0x200012a4
 800c200:	e000ed04 	.word	0xe000ed04

0800c204 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c204:	b580      	push	{r7, lr}
 800c206:	b08a      	sub	sp, #40	; 0x28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <vTaskDelayUntil+0x2a>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	617b      	str	r3, [r7, #20]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10a      	bne.n	800c24a <vTaskDelayUntil+0x46>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	613b      	str	r3, [r7, #16]
}
 800c246:	bf00      	nop
 800c248:	e7fe      	b.n	800c248 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c24a:	4b2a      	ldr	r3, [pc, #168]	; (800c2f4 <vTaskDelayUntil+0xf0>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <vTaskDelayUntil+0x64>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	60fb      	str	r3, [r7, #12]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c268:	f000 f8ee 	bl	800c448 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <vTaskDelayUntil+0xf4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	4413      	add	r3, r2
 800c27a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6a3a      	ldr	r2, [r7, #32]
 800c282:	429a      	cmp	r2, r3
 800c284:	d20b      	bcs.n	800c29e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	69fa      	ldr	r2, [r7, #28]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d211      	bcs.n	800c2b4 <vTaskDelayUntil+0xb0>
 800c290:	69fa      	ldr	r2, [r7, #28]
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	429a      	cmp	r2, r3
 800c296:	d90d      	bls.n	800c2b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c298:	2301      	movs	r3, #1
 800c29a:	627b      	str	r3, [r7, #36]	; 0x24
 800c29c:	e00a      	b.n	800c2b4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d303      	bcc.n	800c2b0 <vTaskDelayUntil+0xac>
 800c2a8:	69fa      	ldr	r2, [r7, #28]
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d901      	bls.n	800c2b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	69fa      	ldr	r2, [r7, #28]
 800c2b8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d006      	beq.n	800c2ce <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fd35 	bl	800cd38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c2ce:	f000 f8c9 	bl	800c464 <xTaskResumeAll>
 800c2d2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d107      	bne.n	800c2ea <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c2da:	4b08      	ldr	r3, [pc, #32]	; (800c2fc <vTaskDelayUntil+0xf8>)
 800c2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2ea:	bf00      	nop
 800c2ec:	3728      	adds	r7, #40	; 0x28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	2000179c 	.word	0x2000179c
 800c2f8:	20001778 	.word	0x20001778
 800c2fc:	e000ed04 	.word	0xe000ed04

0800c300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d017      	beq.n	800c342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <vTaskDelay+0x60>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <vTaskDelay+0x30>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	60bb      	str	r3, [r7, #8]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c330:	f000 f88a 	bl	800c448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c334:	2100      	movs	r1, #0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fcfe 	bl	800cd38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c33c:	f000 f892 	bl	800c464 <xTaskResumeAll>
 800c340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d107      	bne.n	800c358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c348:	4b06      	ldr	r3, [pc, #24]	; (800c364 <vTaskDelay+0x64>)
 800c34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c34e:	601a      	str	r2, [r3, #0]
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	2000179c 	.word	0x2000179c
 800c364:	e000ed04 	.word	0xe000ed04

0800c368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08a      	sub	sp, #40	; 0x28
 800c36c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c372:	2300      	movs	r3, #0
 800c374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c376:	463a      	mov	r2, r7
 800c378:	1d39      	adds	r1, r7, #4
 800c37a:	f107 0308 	add.w	r3, r7, #8
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe fec2 	bl	800b108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	9202      	str	r2, [sp, #8]
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	2300      	movs	r3, #0
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	460a      	mov	r2, r1
 800c396:	4924      	ldr	r1, [pc, #144]	; (800c428 <vTaskStartScheduler+0xc0>)
 800c398:	4824      	ldr	r0, [pc, #144]	; (800c42c <vTaskStartScheduler+0xc4>)
 800c39a:	f7ff fd7b 	bl	800be94 <xTaskCreateStatic>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	4a23      	ldr	r2, [pc, #140]	; (800c430 <vTaskStartScheduler+0xc8>)
 800c3a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3a4:	4b22      	ldr	r3, [pc, #136]	; (800c430 <vTaskStartScheduler+0xc8>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	617b      	str	r3, [r7, #20]
 800c3b0:	e001      	b.n	800c3b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d102      	bne.n	800c3c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3bc:	f000 fd10 	bl	800cde0 <xTimerCreateTimerTask>
 800c3c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d11b      	bne.n	800c400 <vTaskStartScheduler+0x98>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	613b      	str	r3, [r7, #16]
}
 800c3da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3dc:	4b15      	ldr	r3, [pc, #84]	; (800c434 <vTaskStartScheduler+0xcc>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3354      	adds	r3, #84	; 0x54
 800c3e2:	4a15      	ldr	r2, [pc, #84]	; (800c438 <vTaskStartScheduler+0xd0>)
 800c3e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3e6:	4b15      	ldr	r3, [pc, #84]	; (800c43c <vTaskStartScheduler+0xd4>)
 800c3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3ee:	4b14      	ldr	r3, [pc, #80]	; (800c440 <vTaskStartScheduler+0xd8>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3f4:	4b13      	ldr	r3, [pc, #76]	; (800c444 <vTaskStartScheduler+0xdc>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3fa:	f001 f9b1 	bl	800d760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3fe:	e00e      	b.n	800c41e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c406:	d10a      	bne.n	800c41e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	60fb      	str	r3, [r7, #12]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <vTaskStartScheduler+0xb4>
}
 800c41e:	bf00      	nop
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	08011a4c 	.word	0x08011a4c
 800c42c:	0800ca6d 	.word	0x0800ca6d
 800c430:	20001798 	.word	0x20001798
 800c434:	200012a0 	.word	0x200012a0
 800c438:	20000348 	.word	0x20000348
 800c43c:	20001794 	.word	0x20001794
 800c440:	20001780 	.word	0x20001780
 800c444:	20001778 	.word	0x20001778

0800c448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c448:	b480      	push	{r7}
 800c44a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c44c:	4b04      	ldr	r3, [pc, #16]	; (800c460 <vTaskSuspendAll+0x18>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3301      	adds	r3, #1
 800c452:	4a03      	ldr	r2, [pc, #12]	; (800c460 <vTaskSuspendAll+0x18>)
 800c454:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c456:	bf00      	nop
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	2000179c 	.word	0x2000179c

0800c464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c46e:	2300      	movs	r3, #0
 800c470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c472:	4b42      	ldr	r3, [pc, #264]	; (800c57c <xTaskResumeAll+0x118>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10a      	bne.n	800c490 <xTaskResumeAll+0x2c>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	603b      	str	r3, [r7, #0]
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c490:	f001 fa08 	bl	800d8a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c494:	4b39      	ldr	r3, [pc, #228]	; (800c57c <xTaskResumeAll+0x118>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3b01      	subs	r3, #1
 800c49a:	4a38      	ldr	r2, [pc, #224]	; (800c57c <xTaskResumeAll+0x118>)
 800c49c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c49e:	4b37      	ldr	r3, [pc, #220]	; (800c57c <xTaskResumeAll+0x118>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d162      	bne.n	800c56c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4a6:	4b36      	ldr	r3, [pc, #216]	; (800c580 <xTaskResumeAll+0x11c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d05e      	beq.n	800c56c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4ae:	e02f      	b.n	800c510 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4b0:	4b34      	ldr	r3, [pc, #208]	; (800c584 <xTaskResumeAll+0x120>)
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	3318      	adds	r3, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe fee1 	bl	800b284 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fedc 	bl	800b284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d0:	4b2d      	ldr	r3, [pc, #180]	; (800c588 <xTaskResumeAll+0x124>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d903      	bls.n	800c4e0 <xTaskResumeAll+0x7c>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	4a2a      	ldr	r2, [pc, #168]	; (800c588 <xTaskResumeAll+0x124>)
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4a27      	ldr	r2, [pc, #156]	; (800c58c <xTaskResumeAll+0x128>)
 800c4ee:	441a      	add	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fe fe67 	bl	800b1ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c500:	4b23      	ldr	r3, [pc, #140]	; (800c590 <xTaskResumeAll+0x12c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c506:	429a      	cmp	r2, r3
 800c508:	d302      	bcc.n	800c510 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c50a:	4b22      	ldr	r3, [pc, #136]	; (800c594 <xTaskResumeAll+0x130>)
 800c50c:	2201      	movs	r2, #1
 800c50e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c510:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <xTaskResumeAll+0x120>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1cb      	bne.n	800c4b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c51e:	f000 fb5f 	bl	800cbe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <xTaskResumeAll+0x134>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d010      	beq.n	800c550 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c52e:	f000 f847 	bl	800c5c0 <xTaskIncrementTick>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c538:	4b16      	ldr	r3, [pc, #88]	; (800c594 <xTaskResumeAll+0x130>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3b01      	subs	r3, #1
 800c542:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1f1      	bne.n	800c52e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c54a:	4b13      	ldr	r3, [pc, #76]	; (800c598 <xTaskResumeAll+0x134>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c550:	4b10      	ldr	r3, [pc, #64]	; (800c594 <xTaskResumeAll+0x130>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d009      	beq.n	800c56c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c558:	2301      	movs	r3, #1
 800c55a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c55c:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <xTaskResumeAll+0x138>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c56c:	f001 f9ca 	bl	800d904 <vPortExitCritical>

	return xAlreadyYielded;
 800c570:	68bb      	ldr	r3, [r7, #8]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2000179c 	.word	0x2000179c
 800c580:	20001774 	.word	0x20001774
 800c584:	20001734 	.word	0x20001734
 800c588:	2000177c 	.word	0x2000177c
 800c58c:	200012a4 	.word	0x200012a4
 800c590:	200012a0 	.word	0x200012a0
 800c594:	20001788 	.word	0x20001788
 800c598:	20001784 	.word	0x20001784
 800c59c:	e000ed04 	.word	0xe000ed04

0800c5a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5a6:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <xTaskGetTickCount+0x1c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5ac:	687b      	ldr	r3, [r7, #4]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	20001778 	.word	0x20001778

0800c5c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5ca:	4b4f      	ldr	r3, [pc, #316]	; (800c708 <xTaskIncrementTick+0x148>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f040 808f 	bne.w	800c6f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5d4:	4b4d      	ldr	r3, [pc, #308]	; (800c70c <xTaskIncrementTick+0x14c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5dc:	4a4b      	ldr	r2, [pc, #300]	; (800c70c <xTaskIncrementTick+0x14c>)
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d120      	bne.n	800c62a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5e8:	4b49      	ldr	r3, [pc, #292]	; (800c710 <xTaskIncrementTick+0x150>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00a      	beq.n	800c608 <xTaskIncrementTick+0x48>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	603b      	str	r3, [r7, #0]
}
 800c604:	bf00      	nop
 800c606:	e7fe      	b.n	800c606 <xTaskIncrementTick+0x46>
 800c608:	4b41      	ldr	r3, [pc, #260]	; (800c710 <xTaskIncrementTick+0x150>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	4b41      	ldr	r3, [pc, #260]	; (800c714 <xTaskIncrementTick+0x154>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a3f      	ldr	r2, [pc, #252]	; (800c710 <xTaskIncrementTick+0x150>)
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	4a3f      	ldr	r2, [pc, #252]	; (800c714 <xTaskIncrementTick+0x154>)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	4b3e      	ldr	r3, [pc, #248]	; (800c718 <xTaskIncrementTick+0x158>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	4a3d      	ldr	r2, [pc, #244]	; (800c718 <xTaskIncrementTick+0x158>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	f000 fadb 	bl	800cbe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c62a:	4b3c      	ldr	r3, [pc, #240]	; (800c71c <xTaskIncrementTick+0x15c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	429a      	cmp	r2, r3
 800c632:	d349      	bcc.n	800c6c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c634:	4b36      	ldr	r3, [pc, #216]	; (800c710 <xTaskIncrementTick+0x150>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d104      	bne.n	800c648 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c63e:	4b37      	ldr	r3, [pc, #220]	; (800c71c <xTaskIncrementTick+0x15c>)
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	601a      	str	r2, [r3, #0]
					break;
 800c646:	e03f      	b.n	800c6c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c648:	4b31      	ldr	r3, [pc, #196]	; (800c710 <xTaskIncrementTick+0x150>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d203      	bcs.n	800c668 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c660:	4a2e      	ldr	r2, [pc, #184]	; (800c71c <xTaskIncrementTick+0x15c>)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c666:	e02f      	b.n	800c6c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	3304      	adds	r3, #4
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fe fe09 	bl	800b284 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	3318      	adds	r3, #24
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fe00 	bl	800b284 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c688:	4b25      	ldr	r3, [pc, #148]	; (800c720 <xTaskIncrementTick+0x160>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d903      	bls.n	800c698 <xTaskIncrementTick+0xd8>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c694:	4a22      	ldr	r2, [pc, #136]	; (800c720 <xTaskIncrementTick+0x160>)
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4a1f      	ldr	r2, [pc, #124]	; (800c724 <xTaskIncrementTick+0x164>)
 800c6a6:	441a      	add	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	f7fe fd8b 	bl	800b1ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b8:	4b1b      	ldr	r3, [pc, #108]	; (800c728 <xTaskIncrementTick+0x168>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d3b8      	bcc.n	800c634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6c6:	e7b5      	b.n	800c634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6c8:	4b17      	ldr	r3, [pc, #92]	; (800c728 <xTaskIncrementTick+0x168>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ce:	4915      	ldr	r1, [pc, #84]	; (800c724 <xTaskIncrementTick+0x164>)
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	440b      	add	r3, r1
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d901      	bls.n	800c6e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6e4:	4b11      	ldr	r3, [pc, #68]	; (800c72c <xTaskIncrementTick+0x16c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d007      	beq.n	800c6fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	e004      	b.n	800c6fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6f2:	4b0f      	ldr	r3, [pc, #60]	; (800c730 <xTaskIncrementTick+0x170>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	4a0d      	ldr	r2, [pc, #52]	; (800c730 <xTaskIncrementTick+0x170>)
 800c6fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6fc:	697b      	ldr	r3, [r7, #20]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	2000179c 	.word	0x2000179c
 800c70c:	20001778 	.word	0x20001778
 800c710:	2000172c 	.word	0x2000172c
 800c714:	20001730 	.word	0x20001730
 800c718:	2000178c 	.word	0x2000178c
 800c71c:	20001794 	.word	0x20001794
 800c720:	2000177c 	.word	0x2000177c
 800c724:	200012a4 	.word	0x200012a4
 800c728:	200012a0 	.word	0x200012a0
 800c72c:	20001788 	.word	0x20001788
 800c730:	20001784 	.word	0x20001784

0800c734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c73a:	4b2a      	ldr	r3, [pc, #168]	; (800c7e4 <vTaskSwitchContext+0xb0>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c742:	4b29      	ldr	r3, [pc, #164]	; (800c7e8 <vTaskSwitchContext+0xb4>)
 800c744:	2201      	movs	r2, #1
 800c746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c748:	e046      	b.n	800c7d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c74a:	4b27      	ldr	r3, [pc, #156]	; (800c7e8 <vTaskSwitchContext+0xb4>)
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c750:	4b26      	ldr	r3, [pc, #152]	; (800c7ec <vTaskSwitchContext+0xb8>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	e010      	b.n	800c77a <vTaskSwitchContext+0x46>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10a      	bne.n	800c774 <vTaskSwitchContext+0x40>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	607b      	str	r3, [r7, #4]
}
 800c770:	bf00      	nop
 800c772:	e7fe      	b.n	800c772 <vTaskSwitchContext+0x3e>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3b01      	subs	r3, #1
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	491d      	ldr	r1, [pc, #116]	; (800c7f0 <vTaskSwitchContext+0xbc>)
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	440b      	add	r3, r1
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0e4      	beq.n	800c758 <vTaskSwitchContext+0x24>
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4613      	mov	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4a15      	ldr	r2, [pc, #84]	; (800c7f0 <vTaskSwitchContext+0xbc>)
 800c79a:	4413      	add	r3, r2
 800c79c:	60bb      	str	r3, [r7, #8]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	605a      	str	r2, [r3, #4]
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d104      	bne.n	800c7be <vTaskSwitchContext+0x8a>
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	685a      	ldr	r2, [r3, #4]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	605a      	str	r2, [r3, #4]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	4a0b      	ldr	r2, [pc, #44]	; (800c7f4 <vTaskSwitchContext+0xc0>)
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	4a08      	ldr	r2, [pc, #32]	; (800c7ec <vTaskSwitchContext+0xb8>)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c7ce:	4b09      	ldr	r3, [pc, #36]	; (800c7f4 <vTaskSwitchContext+0xc0>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3354      	adds	r3, #84	; 0x54
 800c7d4:	4a08      	ldr	r2, [pc, #32]	; (800c7f8 <vTaskSwitchContext+0xc4>)
 800c7d6:	6013      	str	r3, [r2, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	2000179c 	.word	0x2000179c
 800c7e8:	20001788 	.word	0x20001788
 800c7ec:	2000177c 	.word	0x2000177c
 800c7f0:	200012a4 	.word	0x200012a4
 800c7f4:	200012a0 	.word	0x200012a0
 800c7f8:	20000348 	.word	0x20000348

0800c7fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10a      	bne.n	800c822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	60fb      	str	r3, [r7, #12]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c822:	4b07      	ldr	r3, [pc, #28]	; (800c840 <vTaskPlaceOnEventList+0x44>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3318      	adds	r3, #24
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7fe fcf1 	bl	800b212 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c830:	2101      	movs	r1, #1
 800c832:	6838      	ldr	r0, [r7, #0]
 800c834:	f000 fa80 	bl	800cd38 <prvAddCurrentTaskToDelayedList>
}
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	200012a0 	.word	0x200012a0

0800c844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	617b      	str	r3, [r7, #20]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c86c:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <vTaskPlaceOnEventListRestricted+0x54>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3318      	adds	r3, #24
 800c872:	4619      	mov	r1, r3
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7fe fca8 	bl	800b1ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c880:	f04f 33ff 	mov.w	r3, #4294967295
 800c884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	68b8      	ldr	r0, [r7, #8]
 800c88a:	f000 fa55 	bl	800cd38 <prvAddCurrentTaskToDelayedList>
	}
 800c88e:	bf00      	nop
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	200012a0 	.word	0x200012a0

0800c89c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	60fb      	str	r3, [r7, #12]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	3318      	adds	r3, #24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe fcd9 	bl	800b284 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8d2:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <xTaskRemoveFromEventList+0xb0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d11d      	bne.n	800c916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fcd0 	bl	800b284 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	4b19      	ldr	r3, [pc, #100]	; (800c950 <xTaskRemoveFromEventList+0xb4>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d903      	bls.n	800c8f8 <xTaskRemoveFromEventList+0x5c>
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f4:	4a16      	ldr	r2, [pc, #88]	; (800c950 <xTaskRemoveFromEventList+0xb4>)
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4a13      	ldr	r2, [pc, #76]	; (800c954 <xTaskRemoveFromEventList+0xb8>)
 800c906:	441a      	add	r2, r3
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4619      	mov	r1, r3
 800c90e:	4610      	mov	r0, r2
 800c910:	f7fe fc5b 	bl	800b1ca <vListInsertEnd>
 800c914:	e005      	b.n	800c922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	3318      	adds	r3, #24
 800c91a:	4619      	mov	r1, r3
 800c91c:	480e      	ldr	r0, [pc, #56]	; (800c958 <xTaskRemoveFromEventList+0xbc>)
 800c91e:	f7fe fc54 	bl	800b1ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c926:	4b0d      	ldr	r3, [pc, #52]	; (800c95c <xTaskRemoveFromEventList+0xc0>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d905      	bls.n	800c93c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c930:	2301      	movs	r3, #1
 800c932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c934:	4b0a      	ldr	r3, [pc, #40]	; (800c960 <xTaskRemoveFromEventList+0xc4>)
 800c936:	2201      	movs	r2, #1
 800c938:	601a      	str	r2, [r3, #0]
 800c93a:	e001      	b.n	800c940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c940:	697b      	ldr	r3, [r7, #20]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	2000179c 	.word	0x2000179c
 800c950:	2000177c 	.word	0x2000177c
 800c954:	200012a4 	.word	0x200012a4
 800c958:	20001734 	.word	0x20001734
 800c95c:	200012a0 	.word	0x200012a0
 800c960:	20001788 	.word	0x20001788

0800c964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c96c:	4b06      	ldr	r3, [pc, #24]	; (800c988 <vTaskInternalSetTimeOutState+0x24>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c974:	4b05      	ldr	r3, [pc, #20]	; (800c98c <vTaskInternalSetTimeOutState+0x28>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	605a      	str	r2, [r3, #4]
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	2000178c 	.word	0x2000178c
 800c98c:	20001778 	.word	0x20001778

0800c990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b088      	sub	sp, #32
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10a      	bne.n	800c9d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	60fb      	str	r3, [r7, #12]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c9d2:	f000 ff67 	bl	800d8a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ca4c <xTaskCheckForTimeOut+0xbc>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d102      	bne.n	800c9f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
 800c9f4:	e023      	b.n	800ca3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	4b15      	ldr	r3, [pc, #84]	; (800ca50 <xTaskCheckForTimeOut+0xc0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d007      	beq.n	800ca12 <xTaskCheckForTimeOut+0x82>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	69ba      	ldr	r2, [r7, #24]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d302      	bcc.n	800ca12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	61fb      	str	r3, [r7, #28]
 800ca10:	e015      	b.n	800ca3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d20b      	bcs.n	800ca34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	1ad2      	subs	r2, r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff ff9b 	bl	800c964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61fb      	str	r3, [r7, #28]
 800ca32:	e004      	b.n	800ca3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2200      	movs	r2, #0
 800ca38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca3e:	f000 ff61 	bl	800d904 <vPortExitCritical>

	return xReturn;
 800ca42:	69fb      	ldr	r3, [r7, #28]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3720      	adds	r7, #32
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20001778 	.word	0x20001778
 800ca50:	2000178c 	.word	0x2000178c

0800ca54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <vTaskMissedYield+0x14>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]
}
 800ca5e:	bf00      	nop
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20001788 	.word	0x20001788

0800ca6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca74:	f000 f852 	bl	800cb1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <prvIdleTask+0x28>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d9f9      	bls.n	800ca74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <prvIdleTask+0x2c>)
 800ca82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca90:	e7f0      	b.n	800ca74 <prvIdleTask+0x8>
 800ca92:	bf00      	nop
 800ca94:	200012a4 	.word	0x200012a4
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800caa2:	2300      	movs	r3, #0
 800caa4:	607b      	str	r3, [r7, #4]
 800caa6:	e00c      	b.n	800cac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4a12      	ldr	r2, [pc, #72]	; (800cafc <prvInitialiseTaskLists+0x60>)
 800cab4:	4413      	add	r3, r2
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe fb5a 	bl	800b170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3301      	adds	r3, #1
 800cac0:	607b      	str	r3, [r7, #4]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b37      	cmp	r3, #55	; 0x37
 800cac6:	d9ef      	bls.n	800caa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cac8:	480d      	ldr	r0, [pc, #52]	; (800cb00 <prvInitialiseTaskLists+0x64>)
 800caca:	f7fe fb51 	bl	800b170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cace:	480d      	ldr	r0, [pc, #52]	; (800cb04 <prvInitialiseTaskLists+0x68>)
 800cad0:	f7fe fb4e 	bl	800b170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cad4:	480c      	ldr	r0, [pc, #48]	; (800cb08 <prvInitialiseTaskLists+0x6c>)
 800cad6:	f7fe fb4b 	bl	800b170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cada:	480c      	ldr	r0, [pc, #48]	; (800cb0c <prvInitialiseTaskLists+0x70>)
 800cadc:	f7fe fb48 	bl	800b170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cae0:	480b      	ldr	r0, [pc, #44]	; (800cb10 <prvInitialiseTaskLists+0x74>)
 800cae2:	f7fe fb45 	bl	800b170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cae6:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <prvInitialiseTaskLists+0x78>)
 800cae8:	4a05      	ldr	r2, [pc, #20]	; (800cb00 <prvInitialiseTaskLists+0x64>)
 800caea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800caec:	4b0a      	ldr	r3, [pc, #40]	; (800cb18 <prvInitialiseTaskLists+0x7c>)
 800caee:	4a05      	ldr	r2, [pc, #20]	; (800cb04 <prvInitialiseTaskLists+0x68>)
 800caf0:	601a      	str	r2, [r3, #0]
}
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	200012a4 	.word	0x200012a4
 800cb00:	20001704 	.word	0x20001704
 800cb04:	20001718 	.word	0x20001718
 800cb08:	20001734 	.word	0x20001734
 800cb0c:	20001748 	.word	0x20001748
 800cb10:	20001760 	.word	0x20001760
 800cb14:	2000172c 	.word	0x2000172c
 800cb18:	20001730 	.word	0x20001730

0800cb1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb22:	e019      	b.n	800cb58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb24:	f000 febe 	bl	800d8a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb28:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <prvCheckTasksWaitingTermination+0x50>)
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3304      	adds	r3, #4
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fba5 	bl	800b284 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <prvCheckTasksWaitingTermination+0x54>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	4a0b      	ldr	r2, [pc, #44]	; (800cb70 <prvCheckTasksWaitingTermination+0x54>)
 800cb42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb44:	4b0b      	ldr	r3, [pc, #44]	; (800cb74 <prvCheckTasksWaitingTermination+0x58>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	4a0a      	ldr	r2, [pc, #40]	; (800cb74 <prvCheckTasksWaitingTermination+0x58>)
 800cb4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb4e:	f000 fed9 	bl	800d904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f810 	bl	800cb78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb58:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <prvCheckTasksWaitingTermination+0x58>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1e1      	bne.n	800cb24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb60:	bf00      	nop
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20001748 	.word	0x20001748
 800cb70:	20001774 	.word	0x20001774
 800cb74:	2000175c 	.word	0x2000175c

0800cb78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3354      	adds	r3, #84	; 0x54
 800cb84:	4618      	mov	r0, r3
 800cb86:	f002 fa35 	bl	800eff4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d108      	bne.n	800cba6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f001 f871 	bl	800dc80 <vPortFree>
				vPortFree( pxTCB );
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f001 f86e 	bl	800dc80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cba4:	e018      	b.n	800cbd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d103      	bne.n	800cbb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 f865 	bl	800dc80 <vPortFree>
	}
 800cbb6:	e00f      	b.n	800cbd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d00a      	beq.n	800cbd8 <prvDeleteTCB+0x60>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	60fb      	str	r3, [r7, #12]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <prvDeleteTCB+0x5e>
	}
 800cbd8:	bf00      	nop
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbe6:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <prvResetNextTaskUnblockTime+0x38>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <prvResetNextTaskUnblockTime+0x3c>)
 800cbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cbf8:	e008      	b.n	800cc0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbfa:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <prvResetNextTaskUnblockTime+0x38>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	4a04      	ldr	r2, [pc, #16]	; (800cc1c <prvResetNextTaskUnblockTime+0x3c>)
 800cc0a:	6013      	str	r3, [r2, #0]
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	2000172c 	.word	0x2000172c
 800cc1c:	20001794 	.word	0x20001794

0800cc20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc26:	4b0b      	ldr	r3, [pc, #44]	; (800cc54 <xTaskGetSchedulerState+0x34>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d102      	bne.n	800cc34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	607b      	str	r3, [r7, #4]
 800cc32:	e008      	b.n	800cc46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc34:	4b08      	ldr	r3, [pc, #32]	; (800cc58 <xTaskGetSchedulerState+0x38>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d102      	bne.n	800cc42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	607b      	str	r3, [r7, #4]
 800cc40:	e001      	b.n	800cc46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc42:	2300      	movs	r3, #0
 800cc44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc46:	687b      	ldr	r3, [r7, #4]
	}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr
 800cc54:	20001780 	.word	0x20001780
 800cc58:	2000179c 	.word	0x2000179c

0800cc5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d056      	beq.n	800cd20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc72:	4b2e      	ldr	r3, [pc, #184]	; (800cd2c <xTaskPriorityDisinherit+0xd0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d00a      	beq.n	800cc92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	60fb      	str	r3, [r7, #12]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10a      	bne.n	800ccb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	60bb      	str	r3, [r7, #8]
}
 800ccac:	bf00      	nop
 800ccae:	e7fe      	b.n	800ccae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb4:	1e5a      	subs	r2, r3, #1
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d02c      	beq.n	800cd20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d128      	bne.n	800cd20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fad6 	bl	800b284 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf0:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <xTaskPriorityDisinherit+0xd4>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d903      	bls.n	800cd00 <xTaskPriorityDisinherit+0xa4>
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	4a0c      	ldr	r2, [pc, #48]	; (800cd30 <xTaskPriorityDisinherit+0xd4>)
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd04:	4613      	mov	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <xTaskPriorityDisinherit+0xd8>)
 800cd0e:	441a      	add	r2, r3
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4619      	mov	r1, r3
 800cd16:	4610      	mov	r0, r2
 800cd18:	f7fe fa57 	bl	800b1ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd20:	697b      	ldr	r3, [r7, #20]
	}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	200012a0 	.word	0x200012a0
 800cd30:	2000177c 	.word	0x2000177c
 800cd34:	200012a4 	.word	0x200012a4

0800cd38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd42:	4b21      	ldr	r3, [pc, #132]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd48:	4b20      	ldr	r3, [pc, #128]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fe fa98 	bl	800b284 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d10a      	bne.n	800cd72 <prvAddCurrentTaskToDelayedList+0x3a>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d007      	beq.n	800cd72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd62:	4b1a      	ldr	r3, [pc, #104]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3304      	adds	r3, #4
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4819      	ldr	r0, [pc, #100]	; (800cdd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd6c:	f7fe fa2d 	bl	800b1ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd70:	e026      	b.n	800cdc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4413      	add	r3, r2
 800cd78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd7a:	4b14      	ldr	r3, [pc, #80]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d209      	bcs.n	800cd9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3304      	adds	r3, #4
 800cd94:	4619      	mov	r1, r3
 800cd96:	4610      	mov	r0, r2
 800cd98:	f7fe fa3b 	bl	800b212 <vListInsert>
}
 800cd9c:	e010      	b.n	800cdc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd9e:	4b0e      	ldr	r3, [pc, #56]	; (800cdd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3304      	adds	r3, #4
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fe fa31 	bl	800b212 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdb0:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d202      	bcs.n	800cdc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cdba:	4a08      	ldr	r2, [pc, #32]	; (800cddc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	6013      	str	r3, [r2, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20001778 	.word	0x20001778
 800cdcc:	200012a0 	.word	0x200012a0
 800cdd0:	20001760 	.word	0x20001760
 800cdd4:	20001730 	.word	0x20001730
 800cdd8:	2000172c 	.word	0x2000172c
 800cddc:	20001794 	.word	0x20001794

0800cde0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b08a      	sub	sp, #40	; 0x28
 800cde4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdea:	f000 fba1 	bl	800d530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdee:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <xTimerCreateTimerTask+0x80>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d021      	beq.n	800ce3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cdfe:	1d3a      	adds	r2, r7, #4
 800ce00:	f107 0108 	add.w	r1, r7, #8
 800ce04:	f107 030c 	add.w	r3, r7, #12
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe f997 	bl	800b13c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	9202      	str	r2, [sp, #8]
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	2302      	movs	r3, #2
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	460a      	mov	r2, r1
 800ce20:	4910      	ldr	r1, [pc, #64]	; (800ce64 <xTimerCreateTimerTask+0x84>)
 800ce22:	4811      	ldr	r0, [pc, #68]	; (800ce68 <xTimerCreateTimerTask+0x88>)
 800ce24:	f7ff f836 	bl	800be94 <xTaskCreateStatic>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4a10      	ldr	r2, [pc, #64]	; (800ce6c <xTimerCreateTimerTask+0x8c>)
 800ce2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce2e:	4b0f      	ldr	r3, [pc, #60]	; (800ce6c <xTimerCreateTimerTask+0x8c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce36:	2301      	movs	r3, #1
 800ce38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	613b      	str	r3, [r7, #16]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce56:	697b      	ldr	r3, [r7, #20]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	200017d0 	.word	0x200017d0
 800ce64:	08011a54 	.word	0x08011a54
 800ce68:	0800d0d9 	.word	0x0800d0d9
 800ce6c:	200017d4 	.word	0x200017d4

0800ce70 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ce7e:	202c      	movs	r0, #44	; 0x2c
 800ce80:	f000 fe32 	bl	800dae8 <pvPortMalloc>
 800ce84:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00d      	beq.n	800cea8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	68b9      	ldr	r1, [r7, #8]
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 f843 	bl	800cf2e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cea8:	697b      	ldr	r3, [r7, #20]
	}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3718      	adds	r7, #24
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b08a      	sub	sp, #40	; 0x28
 800ceb6:	af02      	add	r7, sp, #8
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
 800cebe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cec0:	232c      	movs	r3, #44	; 0x2c
 800cec2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2b2c      	cmp	r3, #44	; 0x2c
 800cec8:	d00a      	beq.n	800cee0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	61bb      	str	r3, [r7, #24]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <xTimerCreateStatic+0x4c>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	617b      	str	r3, [r7, #20]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00d      	beq.n	800cf24 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 f805 	bl	800cf2e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cf24:	69fb      	ldr	r3, [r7, #28]
	}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b086      	sub	sp, #24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
 800cf3a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10a      	bne.n	800cf58 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	617b      	str	r3, [r7, #20]
}
 800cf54:	bf00      	nop
 800cf56:	e7fe      	b.n	800cf56 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01e      	beq.n	800cf9c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cf5e:	f000 fae7 	bl	800d530 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	6a3a      	ldr	r2, [r7, #32]
 800cf78:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe f916 	bl	800b1b0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d008      	beq.n	800cf9c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf90:	f043 0304 	orr.w	r3, r3, #4
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cf9c:	bf00      	nop
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b08a      	sub	sp, #40	; 0x28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	623b      	str	r3, [r7, #32]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cfd2:	4b1a      	ldr	r3, [pc, #104]	; (800d03c <xTimerGenericCommand+0x98>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d02a      	beq.n	800d030 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b05      	cmp	r3, #5
 800cfea:	dc18      	bgt.n	800d01e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cfec:	f7ff fe18 	bl	800cc20 <xTaskGetSchedulerState>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d109      	bne.n	800d00a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cff6:	4b11      	ldr	r3, [pc, #68]	; (800d03c <xTimerGenericCommand+0x98>)
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f107 0110 	add.w	r1, r7, #16
 800cffe:	2300      	movs	r3, #0
 800d000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d002:	f7fe fb11 	bl	800b628 <xQueueGenericSend>
 800d006:	6278      	str	r0, [r7, #36]	; 0x24
 800d008:	e012      	b.n	800d030 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d00a:	4b0c      	ldr	r3, [pc, #48]	; (800d03c <xTimerGenericCommand+0x98>)
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	f107 0110 	add.w	r1, r7, #16
 800d012:	2300      	movs	r3, #0
 800d014:	2200      	movs	r2, #0
 800d016:	f7fe fb07 	bl	800b628 <xQueueGenericSend>
 800d01a:	6278      	str	r0, [r7, #36]	; 0x24
 800d01c:	e008      	b.n	800d030 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d01e:	4b07      	ldr	r3, [pc, #28]	; (800d03c <xTimerGenericCommand+0x98>)
 800d020:	6818      	ldr	r0, [r3, #0]
 800d022:	f107 0110 	add.w	r1, r7, #16
 800d026:	2300      	movs	r3, #0
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	f7fe fbfb 	bl	800b824 <xQueueGenericSendFromISR>
 800d02e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d032:	4618      	mov	r0, r3
 800d034:	3728      	adds	r7, #40	; 0x28
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	200017d0 	.word	0x200017d0

0800d040 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d04a:	4b22      	ldr	r3, [pc, #136]	; (800d0d4 <prvProcessExpiredTimer+0x94>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3304      	adds	r3, #4
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe f913 	bl	800b284 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d064:	f003 0304 	and.w	r3, r3, #4
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d022      	beq.n	800d0b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	699a      	ldr	r2, [r3, #24]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	18d1      	adds	r1, r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	6978      	ldr	r0, [r7, #20]
 800d07a:	f000 f8d1 	bl	800d220 <prvInsertTimerInActiveList>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01f      	beq.n	800d0c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d084:	2300      	movs	r3, #0
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	2300      	movs	r3, #0
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	2100      	movs	r1, #0
 800d08e:	6978      	ldr	r0, [r7, #20]
 800d090:	f7ff ff88 	bl	800cfa4 <xTimerGenericCommand>
 800d094:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d113      	bne.n	800d0c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60fb      	str	r3, [r7, #12]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	6a1b      	ldr	r3, [r3, #32]
 800d0c8:	6978      	ldr	r0, [r7, #20]
 800d0ca:	4798      	blx	r3
}
 800d0cc:	bf00      	nop
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	200017c8 	.word	0x200017c8

0800d0d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 f857 	bl	800d198 <prvGetNextExpireTime>
 800d0ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 f803 	bl	800d0fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d0f6:	f000 f8d5 	bl	800d2a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0fa:	e7f1      	b.n	800d0e0 <prvTimerTask+0x8>

0800d0fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d106:	f7ff f99f 	bl	800c448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d10a:	f107 0308 	add.w	r3, r7, #8
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 f866 	bl	800d1e0 <prvSampleTimeNow>
 800d114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d130      	bne.n	800d17e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10a      	bne.n	800d138 <prvProcessTimerOrBlockTask+0x3c>
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	429a      	cmp	r2, r3
 800d128:	d806      	bhi.n	800d138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d12a:	f7ff f99b 	bl	800c464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ff85 	bl	800d040 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d136:	e024      	b.n	800d182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d008      	beq.n	800d150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d13e:	4b13      	ldr	r3, [pc, #76]	; (800d18c <prvProcessTimerOrBlockTask+0x90>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <prvProcessTimerOrBlockTask+0x50>
 800d148:	2301      	movs	r3, #1
 800d14a:	e000      	b.n	800d14e <prvProcessTimerOrBlockTask+0x52>
 800d14c:	2300      	movs	r3, #0
 800d14e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d150:	4b0f      	ldr	r3, [pc, #60]	; (800d190 <prvProcessTimerOrBlockTask+0x94>)
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4619      	mov	r1, r3
 800d15e:	f7fe fe65 	bl	800be2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d162:	f7ff f97f 	bl	800c464 <xTaskResumeAll>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d16c:	4b09      	ldr	r3, [pc, #36]	; (800d194 <prvProcessTimerOrBlockTask+0x98>)
 800d16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	f3bf 8f6f 	isb	sy
}
 800d17c:	e001      	b.n	800d182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d17e:	f7ff f971 	bl	800c464 <xTaskResumeAll>
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	200017cc 	.word	0x200017cc
 800d190:	200017d0 	.word	0x200017d0
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1a0:	4b0e      	ldr	r3, [pc, #56]	; (800d1dc <prvGetNextExpireTime+0x44>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <prvGetNextExpireTime+0x16>
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	e000      	b.n	800d1b0 <prvGetNextExpireTime+0x18>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d105      	bne.n	800d1c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1bc:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <prvGetNextExpireTime+0x44>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e001      	b.n	800d1cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	200017c8 	.word	0x200017c8

0800d1e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d1e8:	f7ff f9da 	bl	800c5a0 <xTaskGetTickCount>
 800d1ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d1ee:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <prvSampleTimeNow+0x3c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d205      	bcs.n	800d204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d1f8:	f000 f936 	bl	800d468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	e002      	b.n	800d20a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d20a:	4a04      	ldr	r2, [pc, #16]	; (800d21c <prvSampleTimeNow+0x3c>)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d210:	68fb      	ldr	r3, [r7, #12]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	200017d8 	.word	0x200017d8

0800d220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	429a      	cmp	r2, r3
 800d244:	d812      	bhi.n	800d26c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	1ad2      	subs	r2, r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	429a      	cmp	r2, r3
 800d252:	d302      	bcc.n	800d25a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d254:	2301      	movs	r3, #1
 800d256:	617b      	str	r3, [r7, #20]
 800d258:	e01b      	b.n	800d292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d25a:	4b10      	ldr	r3, [pc, #64]	; (800d29c <prvInsertTimerInActiveList+0x7c>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fd ffd4 	bl	800b212 <vListInsert>
 800d26a:	e012      	b.n	800d292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d206      	bcs.n	800d282 <prvInsertTimerInActiveList+0x62>
 800d274:	68ba      	ldr	r2, [r7, #8]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d302      	bcc.n	800d282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e007      	b.n	800d292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d282:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <prvInsertTimerInActiveList+0x80>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3304      	adds	r3, #4
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f7fd ffc0 	bl	800b212 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d292:	697b      	ldr	r3, [r7, #20]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	200017cc 	.word	0x200017cc
 800d2a0:	200017c8 	.word	0x200017c8

0800d2a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08e      	sub	sp, #56	; 0x38
 800d2a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2aa:	e0ca      	b.n	800d442 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	da18      	bge.n	800d2e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	61fb      	str	r3, [r7, #28]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2da:	6850      	ldr	r0, [r2, #4]
 800d2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2de:	6892      	ldr	r2, [r2, #8]
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f2c0 80ab 	blt.w	800d442 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	695b      	ldr	r3, [r3, #20]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d004      	beq.n	800d302 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	3304      	adds	r3, #4
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fd ffc1 	bl	800b284 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d302:	463b      	mov	r3, r7
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff ff6b 	bl	800d1e0 <prvSampleTimeNow>
 800d30a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b09      	cmp	r3, #9
 800d310:	f200 8096 	bhi.w	800d440 <prvProcessReceivedCommands+0x19c>
 800d314:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <prvProcessReceivedCommands+0x78>)
 800d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31a:	bf00      	nop
 800d31c:	0800d345 	.word	0x0800d345
 800d320:	0800d345 	.word	0x0800d345
 800d324:	0800d345 	.word	0x0800d345
 800d328:	0800d3b9 	.word	0x0800d3b9
 800d32c:	0800d3cd 	.word	0x0800d3cd
 800d330:	0800d417 	.word	0x0800d417
 800d334:	0800d345 	.word	0x0800d345
 800d338:	0800d345 	.word	0x0800d345
 800d33c:	0800d3b9 	.word	0x0800d3b9
 800d340:	0800d3cd 	.word	0x0800d3cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d34a:	f043 0301 	orr.w	r3, r3, #1
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	18d1      	adds	r1, r2, r3
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d364:	f7ff ff5c 	bl	800d220 <prvInsertTimerInActiveList>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d069      	beq.n	800d442 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	6a1b      	ldr	r3, [r3, #32]
 800d372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d37c:	f003 0304 	and.w	r3, r3, #4
 800d380:	2b00      	cmp	r3, #0
 800d382:	d05e      	beq.n	800d442 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	441a      	add	r2, r3
 800d38c:	2300      	movs	r3, #0
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	2300      	movs	r3, #0
 800d392:	2100      	movs	r1, #0
 800d394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d396:	f7ff fe05 	bl	800cfa4 <xTimerGenericCommand>
 800d39a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d14f      	bne.n	800d442 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	61bb      	str	r3, [r7, #24]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3be:	f023 0301 	bic.w	r3, r3, #1
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d3ca:	e03a      	b.n	800d442 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d2:	f043 0301 	orr.w	r3, r3, #1
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10a      	bne.n	800d402 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	617b      	str	r3, [r7, #20]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d408:	18d1      	adds	r1, r2, r3
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d410:	f7ff ff06 	bl	800d220 <prvInsertTimerInActiveList>
					break;
 800d414:	e015      	b.n	800d442 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d41c:	f003 0302 	and.w	r3, r3, #2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d103      	bne.n	800d42c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d426:	f000 fc2b 	bl	800dc80 <vPortFree>
 800d42a:	e00a      	b.n	800d442 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d432:	f023 0301 	bic.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d43e:	e000      	b.n	800d442 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <prvProcessReceivedCommands+0x1c0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	1d39      	adds	r1, r7, #4
 800d448:	2200      	movs	r2, #0
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fa86 	bl	800b95c <xQueueReceive>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	f47f af2a 	bne.w	800d2ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	3730      	adds	r7, #48	; 0x30
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	200017d0 	.word	0x200017d0

0800d468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d46e:	e048      	b.n	800d502 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d470:	4b2d      	ldr	r3, [pc, #180]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47a:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3304      	adds	r3, #4
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fd fefb 	bl	800b284 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d02e      	beq.n	800d502 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d90e      	bls.n	800d4d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4c2:	4b19      	ldr	r3, [pc, #100]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	f7fd fea0 	bl	800b212 <vListInsert>
 800d4d2:	e016      	b.n	800d502 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	2100      	movs	r1, #0
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7ff fd60 	bl	800cfa4 <xTimerGenericCommand>
 800d4e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	603b      	str	r3, [r7, #0]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d502:	4b09      	ldr	r3, [pc, #36]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1b1      	bne.n	800d470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d50c:	4b06      	ldr	r3, [pc, #24]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d512:	4b06      	ldr	r3, [pc, #24]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a04      	ldr	r2, [pc, #16]	; (800d528 <prvSwitchTimerLists+0xc0>)
 800d518:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d51a:	4a04      	ldr	r2, [pc, #16]	; (800d52c <prvSwitchTimerLists+0xc4>)
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	6013      	str	r3, [r2, #0]
}
 800d520:	bf00      	nop
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	200017c8 	.word	0x200017c8
 800d52c:	200017cc 	.word	0x200017cc

0800d530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d536:	f000 f9b5 	bl	800d8a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d53a:	4b15      	ldr	r3, [pc, #84]	; (800d590 <prvCheckForValidListAndQueue+0x60>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d120      	bne.n	800d584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d542:	4814      	ldr	r0, [pc, #80]	; (800d594 <prvCheckForValidListAndQueue+0x64>)
 800d544:	f7fd fe14 	bl	800b170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d548:	4813      	ldr	r0, [pc, #76]	; (800d598 <prvCheckForValidListAndQueue+0x68>)
 800d54a:	f7fd fe11 	bl	800b170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <prvCheckForValidListAndQueue+0x6c>)
 800d550:	4a10      	ldr	r2, [pc, #64]	; (800d594 <prvCheckForValidListAndQueue+0x64>)
 800d552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d554:	4b12      	ldr	r3, [pc, #72]	; (800d5a0 <prvCheckForValidListAndQueue+0x70>)
 800d556:	4a10      	ldr	r2, [pc, #64]	; (800d598 <prvCheckForValidListAndQueue+0x68>)
 800d558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d55a:	2300      	movs	r3, #0
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <prvCheckForValidListAndQueue+0x74>)
 800d560:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <prvCheckForValidListAndQueue+0x78>)
 800d562:	2110      	movs	r1, #16
 800d564:	200a      	movs	r0, #10
 800d566:	f7fd ff1f 	bl	800b3a8 <xQueueGenericCreateStatic>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4a08      	ldr	r2, [pc, #32]	; (800d590 <prvCheckForValidListAndQueue+0x60>)
 800d56e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d570:	4b07      	ldr	r3, [pc, #28]	; (800d590 <prvCheckForValidListAndQueue+0x60>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <prvCheckForValidListAndQueue+0x60>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	490b      	ldr	r1, [pc, #44]	; (800d5ac <prvCheckForValidListAndQueue+0x7c>)
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fc00 	bl	800bd84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d584:	f000 f9be 	bl	800d904 <vPortExitCritical>
}
 800d588:	bf00      	nop
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	200017d0 	.word	0x200017d0
 800d594:	200017a0 	.word	0x200017a0
 800d598:	200017b4 	.word	0x200017b4
 800d59c:	200017c8 	.word	0x200017c8
 800d5a0:	200017cc 	.word	0x200017cc
 800d5a4:	2000187c 	.word	0x2000187c
 800d5a8:	200017dc 	.word	0x200017dc
 800d5ac:	08011a5c 	.word	0x08011a5c

0800d5b0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10a      	bne.n	800d5d8 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60fb      	str	r3, [r7, #12]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d5d8:	f000 f964 	bl	800d8a4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d102      	bne.n	800d5f0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	e001      	b.n	800d5f4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d5f4:	f000 f986 	bl	800d904 <vPortExitCritical>

	return xReturn;
 800d5f8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3718      	adds	r7, #24
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b086      	sub	sp, #24
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <pvTimerGetTimerID+0x28>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	60fb      	str	r3, [r7, #12]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d62a:	f000 f93b 	bl	800d8a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d634:	f000 f966 	bl	800d904 <vPortExitCritical>

	return pvReturn;
 800d638:	693b      	ldr	r3, [r7, #16]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	3b04      	subs	r3, #4
 800d654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d65c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3b04      	subs	r3, #4
 800d662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	f023 0201 	bic.w	r2, r3, #1
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3b04      	subs	r3, #4
 800d672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d674:	4a0c      	ldr	r2, [pc, #48]	; (800d6a8 <pxPortInitialiseStack+0x64>)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	3b14      	subs	r3, #20
 800d67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3b04      	subs	r3, #4
 800d68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f06f 0202 	mvn.w	r2, #2
 800d692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3b20      	subs	r3, #32
 800d698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d69a:	68fb      	ldr	r3, [r7, #12]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	0800d6ad 	.word	0x0800d6ad

0800d6ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d6b6:	4b12      	ldr	r3, [pc, #72]	; (800d700 <prvTaskExitError+0x54>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6be:	d00a      	beq.n	800d6d6 <prvTaskExitError+0x2a>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	60fb      	str	r3, [r7, #12]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <prvTaskExitError+0x28>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	60bb      	str	r3, [r7, #8]
}
 800d6e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6ea:	bf00      	nop
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d0fc      	beq.n	800d6ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6f2:	bf00      	nop
 800d6f4:	bf00      	nop
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	20000180 	.word	0x20000180
	...

0800d710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d710:	4b07      	ldr	r3, [pc, #28]	; (800d730 <pxCurrentTCBConst2>)
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	6808      	ldr	r0, [r1, #0]
 800d716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71a:	f380 8809 	msr	PSP, r0
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f04f 0000 	mov.w	r0, #0
 800d726:	f380 8811 	msr	BASEPRI, r0
 800d72a:	4770      	bx	lr
 800d72c:	f3af 8000 	nop.w

0800d730 <pxCurrentTCBConst2>:
 800d730:	200012a0 	.word	0x200012a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop

0800d738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d738:	4808      	ldr	r0, [pc, #32]	; (800d75c <prvPortStartFirstTask+0x24>)
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	6800      	ldr	r0, [r0, #0]
 800d73e:	f380 8808 	msr	MSP, r0
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f380 8814 	msr	CONTROL, r0
 800d74a:	b662      	cpsie	i
 800d74c:	b661      	cpsie	f
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	df00      	svc	0
 800d758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d75a:	bf00      	nop
 800d75c:	e000ed08 	.word	0xe000ed08

0800d760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d766:	4b46      	ldr	r3, [pc, #280]	; (800d880 <xPortStartScheduler+0x120>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a46      	ldr	r2, [pc, #280]	; (800d884 <xPortStartScheduler+0x124>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d10a      	bne.n	800d786 <xPortStartScheduler+0x26>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	613b      	str	r3, [r7, #16]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d786:	4b3e      	ldr	r3, [pc, #248]	; (800d880 <xPortStartScheduler+0x120>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a3f      	ldr	r2, [pc, #252]	; (800d888 <xPortStartScheduler+0x128>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d10a      	bne.n	800d7a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	60fb      	str	r3, [r7, #12]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7a6:	4b39      	ldr	r3, [pc, #228]	; (800d88c <xPortStartScheduler+0x12c>)
 800d7a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	22ff      	movs	r2, #255	; 0xff
 800d7b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7c0:	78fb      	ldrb	r3, [r7, #3]
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	4b31      	ldr	r3, [pc, #196]	; (800d890 <xPortStartScheduler+0x130>)
 800d7cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7ce:	4b31      	ldr	r3, [pc, #196]	; (800d894 <xPortStartScheduler+0x134>)
 800d7d0:	2207      	movs	r2, #7
 800d7d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7d4:	e009      	b.n	800d7ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d7d6:	4b2f      	ldr	r3, [pc, #188]	; (800d894 <xPortStartScheduler+0x134>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	4a2d      	ldr	r2, [pc, #180]	; (800d894 <xPortStartScheduler+0x134>)
 800d7de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7e0:	78fb      	ldrb	r3, [r7, #3]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7ea:	78fb      	ldrb	r3, [r7, #3]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f2:	2b80      	cmp	r3, #128	; 0x80
 800d7f4:	d0ef      	beq.n	800d7d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d7f6:	4b27      	ldr	r3, [pc, #156]	; (800d894 <xPortStartScheduler+0x134>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f1c3 0307 	rsb	r3, r3, #7
 800d7fe:	2b04      	cmp	r3, #4
 800d800:	d00a      	beq.n	800d818 <xPortStartScheduler+0xb8>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	60bb      	str	r3, [r7, #8]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d818:	4b1e      	ldr	r3, [pc, #120]	; (800d894 <xPortStartScheduler+0x134>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <xPortStartScheduler+0x134>)
 800d820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d822:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <xPortStartScheduler+0x134>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d82a:	4a1a      	ldr	r2, [pc, #104]	; (800d894 <xPortStartScheduler+0x134>)
 800d82c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	b2da      	uxtb	r2, r3
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d836:	4b18      	ldr	r3, [pc, #96]	; (800d898 <xPortStartScheduler+0x138>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a17      	ldr	r2, [pc, #92]	; (800d898 <xPortStartScheduler+0x138>)
 800d83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d842:	4b15      	ldr	r3, [pc, #84]	; (800d898 <xPortStartScheduler+0x138>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a14      	ldr	r2, [pc, #80]	; (800d898 <xPortStartScheduler+0x138>)
 800d848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d84c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d84e:	f000 f8dd 	bl	800da0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d852:	4b12      	ldr	r3, [pc, #72]	; (800d89c <xPortStartScheduler+0x13c>)
 800d854:	2200      	movs	r2, #0
 800d856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d858:	f000 f8fc 	bl	800da54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d85c:	4b10      	ldr	r3, [pc, #64]	; (800d8a0 <xPortStartScheduler+0x140>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a0f      	ldr	r2, [pc, #60]	; (800d8a0 <xPortStartScheduler+0x140>)
 800d862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d868:	f7ff ff66 	bl	800d738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d86c:	f7fe ff62 	bl	800c734 <vTaskSwitchContext>
	prvTaskExitError();
 800d870:	f7ff ff1c 	bl	800d6ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	e000ed00 	.word	0xe000ed00
 800d884:	410fc271 	.word	0x410fc271
 800d888:	410fc270 	.word	0x410fc270
 800d88c:	e000e400 	.word	0xe000e400
 800d890:	200018cc 	.word	0x200018cc
 800d894:	200018d0 	.word	0x200018d0
 800d898:	e000ed20 	.word	0xe000ed20
 800d89c:	20000180 	.word	0x20000180
 800d8a0:	e000ef34 	.word	0xe000ef34

0800d8a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	607b      	str	r3, [r7, #4]
}
 800d8bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8be:	4b0f      	ldr	r3, [pc, #60]	; (800d8fc <vPortEnterCritical+0x58>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	4a0d      	ldr	r2, [pc, #52]	; (800d8fc <vPortEnterCritical+0x58>)
 800d8c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <vPortEnterCritical+0x58>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d10f      	bne.n	800d8f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8d0:	4b0b      	ldr	r3, [pc, #44]	; (800d900 <vPortEnterCritical+0x5c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	603b      	str	r3, [r7, #0]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <vPortEnterCritical+0x4a>
	}
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	20000180 	.word	0x20000180
 800d900:	e000ed04 	.word	0xe000ed04

0800d904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d90a:	4b12      	ldr	r3, [pc, #72]	; (800d954 <vPortExitCritical+0x50>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10a      	bne.n	800d928 <vPortExitCritical+0x24>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	607b      	str	r3, [r7, #4]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d928:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <vPortExitCritical+0x50>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	4a09      	ldr	r2, [pc, #36]	; (800d954 <vPortExitCritical+0x50>)
 800d930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d932:	4b08      	ldr	r3, [pc, #32]	; (800d954 <vPortExitCritical+0x50>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d105      	bne.n	800d946 <vPortExitCritical+0x42>
 800d93a:	2300      	movs	r3, #0
 800d93c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	f383 8811 	msr	BASEPRI, r3
}
 800d944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d946:	bf00      	nop
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20000180 	.word	0x20000180
	...

0800d960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d960:	f3ef 8009 	mrs	r0, PSP
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <pxCurrentTCBConst>)
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	f01e 0f10 	tst.w	lr, #16
 800d970:	bf08      	it	eq
 800d972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97a:	6010      	str	r0, [r2, #0]
 800d97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d984:	f380 8811 	msr	BASEPRI, r0
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f7fe fed0 	bl	800c734 <vTaskSwitchContext>
 800d994:	f04f 0000 	mov.w	r0, #0
 800d998:	f380 8811 	msr	BASEPRI, r0
 800d99c:	bc09      	pop	{r0, r3}
 800d99e:	6819      	ldr	r1, [r3, #0]
 800d9a0:	6808      	ldr	r0, [r1, #0]
 800d9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a6:	f01e 0f10 	tst.w	lr, #16
 800d9aa:	bf08      	it	eq
 800d9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9b0:	f380 8809 	msr	PSP, r0
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w

0800d9c0 <pxCurrentTCBConst>:
 800d9c0:	200012a0 	.word	0x200012a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop

0800d9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	607b      	str	r3, [r7, #4]
}
 800d9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9e2:	f7fe fded 	bl	800c5c0 <xTaskIncrementTick>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d003      	beq.n	800d9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9ec:	4b06      	ldr	r3, [pc, #24]	; (800da08 <xPortSysTickHandler+0x40>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f383 8811 	msr	BASEPRI, r3
}
 800d9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da10:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <vPortSetupTimerInterrupt+0x34>)
 800da12:	2200      	movs	r2, #0
 800da14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da16:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <vPortSetupTimerInterrupt+0x38>)
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da1c:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <vPortSetupTimerInterrupt+0x3c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a0a      	ldr	r2, [pc, #40]	; (800da4c <vPortSetupTimerInterrupt+0x40>)
 800da22:	fba2 2303 	umull	r2, r3, r2, r3
 800da26:	099b      	lsrs	r3, r3, #6
 800da28:	4a09      	ldr	r2, [pc, #36]	; (800da50 <vPortSetupTimerInterrupt+0x44>)
 800da2a:	3b01      	subs	r3, #1
 800da2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da2e:	4b04      	ldr	r3, [pc, #16]	; (800da40 <vPortSetupTimerInterrupt+0x34>)
 800da30:	2207      	movs	r2, #7
 800da32:	601a      	str	r2, [r3, #0]
}
 800da34:	bf00      	nop
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	e000e010 	.word	0xe000e010
 800da44:	e000e018 	.word	0xe000e018
 800da48:	20000174 	.word	0x20000174
 800da4c:	10624dd3 	.word	0x10624dd3
 800da50:	e000e014 	.word	0xe000e014

0800da54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da64 <vPortEnableVFP+0x10>
 800da58:	6801      	ldr	r1, [r0, #0]
 800da5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da5e:	6001      	str	r1, [r0, #0]
 800da60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da62:	bf00      	nop
 800da64:	e000ed88 	.word	0xe000ed88

0800da68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da6e:	f3ef 8305 	mrs	r3, IPSR
 800da72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b0f      	cmp	r3, #15
 800da78:	d914      	bls.n	800daa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da7a:	4a17      	ldr	r2, [pc, #92]	; (800dad8 <vPortValidateInterruptPriority+0x70>)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4413      	add	r3, r2
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da84:	4b15      	ldr	r3, [pc, #84]	; (800dadc <vPortValidateInterruptPriority+0x74>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	7afa      	ldrb	r2, [r7, #11]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d20a      	bcs.n	800daa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	607b      	str	r3, [r7, #4]
}
 800daa0:	bf00      	nop
 800daa2:	e7fe      	b.n	800daa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800daa4:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <vPortValidateInterruptPriority+0x78>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800daac:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <vPortValidateInterruptPriority+0x7c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d90a      	bls.n	800daca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	603b      	str	r3, [r7, #0]
}
 800dac6:	bf00      	nop
 800dac8:	e7fe      	b.n	800dac8 <vPortValidateInterruptPriority+0x60>
	}
 800daca:	bf00      	nop
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	e000e3f0 	.word	0xe000e3f0
 800dadc:	200018cc 	.word	0x200018cc
 800dae0:	e000ed0c 	.word	0xe000ed0c
 800dae4:	200018d0 	.word	0x200018d0

0800dae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08a      	sub	sp, #40	; 0x28
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800daf0:	2300      	movs	r3, #0
 800daf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800daf4:	f7fe fca8 	bl	800c448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800daf8:	4b5b      	ldr	r3, [pc, #364]	; (800dc68 <pvPortMalloc+0x180>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db00:	f000 f920 	bl	800dd44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db04:	4b59      	ldr	r3, [pc, #356]	; (800dc6c <pvPortMalloc+0x184>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4013      	ands	r3, r2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f040 8093 	bne.w	800dc38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d01d      	beq.n	800db54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db18:	2208      	movs	r2, #8
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4413      	add	r3, r2
 800db1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f003 0307 	and.w	r3, r3, #7
 800db26:	2b00      	cmp	r3, #0
 800db28:	d014      	beq.n	800db54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f023 0307 	bic.w	r3, r3, #7
 800db30:	3308      	adds	r3, #8
 800db32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f003 0307 	and.w	r3, r3, #7
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <pvPortMalloc+0x6c>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	617b      	str	r3, [r7, #20]
}
 800db50:	bf00      	nop
 800db52:	e7fe      	b.n	800db52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d06e      	beq.n	800dc38 <pvPortMalloc+0x150>
 800db5a:	4b45      	ldr	r3, [pc, #276]	; (800dc70 <pvPortMalloc+0x188>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	429a      	cmp	r2, r3
 800db62:	d869      	bhi.n	800dc38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db64:	4b43      	ldr	r3, [pc, #268]	; (800dc74 <pvPortMalloc+0x18c>)
 800db66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db68:	4b42      	ldr	r3, [pc, #264]	; (800dc74 <pvPortMalloc+0x18c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db6e:	e004      	b.n	800db7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	429a      	cmp	r2, r3
 800db82:	d903      	bls.n	800db8c <pvPortMalloc+0xa4>
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1f1      	bne.n	800db70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db8c:	4b36      	ldr	r3, [pc, #216]	; (800dc68 <pvPortMalloc+0x180>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db92:	429a      	cmp	r2, r3
 800db94:	d050      	beq.n	800dc38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2208      	movs	r2, #8
 800db9c:	4413      	add	r3, r2
 800db9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	1ad2      	subs	r2, r2, r3
 800dbb0:	2308      	movs	r3, #8
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d91f      	bls.n	800dbf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00a      	beq.n	800dbe0 <pvPortMalloc+0xf8>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	613b      	str	r3, [r7, #16]
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	1ad2      	subs	r2, r2, r3
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dbf2:	69b8      	ldr	r0, [r7, #24]
 800dbf4:	f000 f908 	bl	800de08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dbf8:	4b1d      	ldr	r3, [pc, #116]	; (800dc70 <pvPortMalloc+0x188>)
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	4a1b      	ldr	r2, [pc, #108]	; (800dc70 <pvPortMalloc+0x188>)
 800dc04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc06:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <pvPortMalloc+0x188>)
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	4b1b      	ldr	r3, [pc, #108]	; (800dc78 <pvPortMalloc+0x190>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d203      	bcs.n	800dc1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc12:	4b17      	ldr	r3, [pc, #92]	; (800dc70 <pvPortMalloc+0x188>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a18      	ldr	r2, [pc, #96]	; (800dc78 <pvPortMalloc+0x190>)
 800dc18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <pvPortMalloc+0x184>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	431a      	orrs	r2, r3
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc2e:	4b13      	ldr	r3, [pc, #76]	; (800dc7c <pvPortMalloc+0x194>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3301      	adds	r3, #1
 800dc34:	4a11      	ldr	r2, [pc, #68]	; (800dc7c <pvPortMalloc+0x194>)
 800dc36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc38:	f7fe fc14 	bl	800c464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	f003 0307 	and.w	r3, r3, #7
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00a      	beq.n	800dc5c <pvPortMalloc+0x174>
	__asm volatile
 800dc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	60fb      	str	r3, [r7, #12]
}
 800dc58:	bf00      	nop
 800dc5a:	e7fe      	b.n	800dc5a <pvPortMalloc+0x172>
	return pvReturn;
 800dc5c:	69fb      	ldr	r3, [r7, #28]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3728      	adds	r7, #40	; 0x28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20002c64 	.word	0x20002c64
 800dc6c:	20002c78 	.word	0x20002c78
 800dc70:	20002c68 	.word	0x20002c68
 800dc74:	20002c5c 	.word	0x20002c5c
 800dc78:	20002c6c 	.word	0x20002c6c
 800dc7c:	20002c70 	.word	0x20002c70

0800dc80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d04d      	beq.n	800dd2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc92:	2308      	movs	r3, #8
 800dc94:	425b      	negs	r3, r3
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	4413      	add	r3, r2
 800dc9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	4b24      	ldr	r3, [pc, #144]	; (800dd38 <vPortFree+0xb8>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4013      	ands	r3, r2
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10a      	bne.n	800dcc4 <vPortFree+0x44>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	60fb      	str	r3, [r7, #12]
}
 800dcc0:	bf00      	nop
 800dcc2:	e7fe      	b.n	800dcc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <vPortFree+0x62>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	60bb      	str	r3, [r7, #8]
}
 800dcde:	bf00      	nop
 800dce0:	e7fe      	b.n	800dce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	4b14      	ldr	r3, [pc, #80]	; (800dd38 <vPortFree+0xb8>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4013      	ands	r3, r2
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d01e      	beq.n	800dd2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d11a      	bne.n	800dd2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	4b0e      	ldr	r3, [pc, #56]	; (800dd38 <vPortFree+0xb8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	43db      	mvns	r3, r3
 800dd02:	401a      	ands	r2, r3
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd08:	f7fe fb9e 	bl	800c448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <vPortFree+0xbc>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4413      	add	r3, r2
 800dd16:	4a09      	ldr	r2, [pc, #36]	; (800dd3c <vPortFree+0xbc>)
 800dd18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd1a:	6938      	ldr	r0, [r7, #16]
 800dd1c:	f000 f874 	bl	800de08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd20:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <vPortFree+0xc0>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	4a06      	ldr	r2, [pc, #24]	; (800dd40 <vPortFree+0xc0>)
 800dd28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd2a:	f7fe fb9b 	bl	800c464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd2e:	bf00      	nop
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	20002c78 	.word	0x20002c78
 800dd3c:	20002c68 	.word	0x20002c68
 800dd40:	20002c74 	.word	0x20002c74

0800dd44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd4a:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd50:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <prvHeapInit+0xac>)
 800dd52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00c      	beq.n	800dd78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3307      	adds	r3, #7
 800dd62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f023 0307 	bic.w	r3, r3, #7
 800dd6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	4a1f      	ldr	r2, [pc, #124]	; (800ddf0 <prvHeapInit+0xac>)
 800dd74:	4413      	add	r3, r2
 800dd76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd7c:	4a1d      	ldr	r2, [pc, #116]	; (800ddf4 <prvHeapInit+0xb0>)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd82:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <prvHeapInit+0xb0>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd90:	2208      	movs	r2, #8
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	1a9b      	subs	r3, r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f023 0307 	bic.w	r3, r3, #7
 800dd9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4a15      	ldr	r2, [pc, #84]	; (800ddf8 <prvHeapInit+0xb4>)
 800dda4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dda6:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <prvHeapInit+0xb4>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ddae:	4b12      	ldr	r3, [pc, #72]	; (800ddf8 <prvHeapInit+0xb4>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	1ad2      	subs	r2, r2, r3
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <prvHeapInit+0xb4>)
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	4a0a      	ldr	r2, [pc, #40]	; (800ddfc <prvHeapInit+0xb8>)
 800ddd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	4a09      	ldr	r2, [pc, #36]	; (800de00 <prvHeapInit+0xbc>)
 800ddda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dddc:	4b09      	ldr	r3, [pc, #36]	; (800de04 <prvHeapInit+0xc0>)
 800ddde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dde2:	601a      	str	r2, [r3, #0]
}
 800dde4:	bf00      	nop
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	200018d4 	.word	0x200018d4
 800ddf4:	20002c5c 	.word	0x20002c5c
 800ddf8:	20002c64 	.word	0x20002c64
 800ddfc:	20002c6c 	.word	0x20002c6c
 800de00:	20002c68 	.word	0x20002c68
 800de04:	20002c78 	.word	0x20002c78

0800de08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de10:	4b28      	ldr	r3, [pc, #160]	; (800deb4 <prvInsertBlockIntoFreeList+0xac>)
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	e002      	b.n	800de1c <prvInsertBlockIntoFreeList+0x14>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	429a      	cmp	r2, r3
 800de24:	d8f7      	bhi.n	800de16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	4413      	add	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d108      	bne.n	800de4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	685a      	ldr	r2, [r3, #4]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	441a      	add	r2, r3
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	441a      	add	r2, r3
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d118      	bne.n	800de90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <prvInsertBlockIntoFreeList+0xb0>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d00d      	beq.n	800de86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	441a      	add	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	e008      	b.n	800de98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de86:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <prvInsertBlockIntoFreeList+0xb0>)
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	e003      	b.n	800de98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d002      	beq.n	800dea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	20002c5c 	.word	0x20002c5c
 800deb8:	20002c64 	.word	0x20002c64

0800debc <malloc>:
 800debc:	4b02      	ldr	r3, [pc, #8]	; (800dec8 <malloc+0xc>)
 800debe:	4601      	mov	r1, r0
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	f000 b82b 	b.w	800df1c <_malloc_r>
 800dec6:	bf00      	nop
 800dec8:	20000348 	.word	0x20000348

0800decc <free>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <free+0xc>)
 800dece:	4601      	mov	r1, r0
 800ded0:	6818      	ldr	r0, [r3, #0]
 800ded2:	f001 b979 	b.w	800f1c8 <_free_r>
 800ded6:	bf00      	nop
 800ded8:	20000348 	.word	0x20000348

0800dedc <sbrk_aligned>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	4e0e      	ldr	r6, [pc, #56]	; (800df18 <sbrk_aligned+0x3c>)
 800dee0:	460c      	mov	r4, r1
 800dee2:	6831      	ldr	r1, [r6, #0]
 800dee4:	4605      	mov	r5, r0
 800dee6:	b911      	cbnz	r1, 800deee <sbrk_aligned+0x12>
 800dee8:	f001 f8fe 	bl	800f0e8 <_sbrk_r>
 800deec:	6030      	str	r0, [r6, #0]
 800deee:	4621      	mov	r1, r4
 800def0:	4628      	mov	r0, r5
 800def2:	f001 f8f9 	bl	800f0e8 <_sbrk_r>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	d00a      	beq.n	800df10 <sbrk_aligned+0x34>
 800defa:	1cc4      	adds	r4, r0, #3
 800defc:	f024 0403 	bic.w	r4, r4, #3
 800df00:	42a0      	cmp	r0, r4
 800df02:	d007      	beq.n	800df14 <sbrk_aligned+0x38>
 800df04:	1a21      	subs	r1, r4, r0
 800df06:	4628      	mov	r0, r5
 800df08:	f001 f8ee 	bl	800f0e8 <_sbrk_r>
 800df0c:	3001      	adds	r0, #1
 800df0e:	d101      	bne.n	800df14 <sbrk_aligned+0x38>
 800df10:	f04f 34ff 	mov.w	r4, #4294967295
 800df14:	4620      	mov	r0, r4
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	20002c80 	.word	0x20002c80

0800df1c <_malloc_r>:
 800df1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df20:	1ccd      	adds	r5, r1, #3
 800df22:	f025 0503 	bic.w	r5, r5, #3
 800df26:	3508      	adds	r5, #8
 800df28:	2d0c      	cmp	r5, #12
 800df2a:	bf38      	it	cc
 800df2c:	250c      	movcc	r5, #12
 800df2e:	2d00      	cmp	r5, #0
 800df30:	4607      	mov	r7, r0
 800df32:	db01      	blt.n	800df38 <_malloc_r+0x1c>
 800df34:	42a9      	cmp	r1, r5
 800df36:	d905      	bls.n	800df44 <_malloc_r+0x28>
 800df38:	230c      	movs	r3, #12
 800df3a:	603b      	str	r3, [r7, #0]
 800df3c:	2600      	movs	r6, #0
 800df3e:	4630      	mov	r0, r6
 800df40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e018 <_malloc_r+0xfc>
 800df48:	f000 f868 	bl	800e01c <__malloc_lock>
 800df4c:	f8d8 3000 	ldr.w	r3, [r8]
 800df50:	461c      	mov	r4, r3
 800df52:	bb5c      	cbnz	r4, 800dfac <_malloc_r+0x90>
 800df54:	4629      	mov	r1, r5
 800df56:	4638      	mov	r0, r7
 800df58:	f7ff ffc0 	bl	800dedc <sbrk_aligned>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	4604      	mov	r4, r0
 800df60:	d155      	bne.n	800e00e <_malloc_r+0xf2>
 800df62:	f8d8 4000 	ldr.w	r4, [r8]
 800df66:	4626      	mov	r6, r4
 800df68:	2e00      	cmp	r6, #0
 800df6a:	d145      	bne.n	800dff8 <_malloc_r+0xdc>
 800df6c:	2c00      	cmp	r4, #0
 800df6e:	d048      	beq.n	800e002 <_malloc_r+0xe6>
 800df70:	6823      	ldr	r3, [r4, #0]
 800df72:	4631      	mov	r1, r6
 800df74:	4638      	mov	r0, r7
 800df76:	eb04 0903 	add.w	r9, r4, r3
 800df7a:	f001 f8b5 	bl	800f0e8 <_sbrk_r>
 800df7e:	4581      	cmp	r9, r0
 800df80:	d13f      	bne.n	800e002 <_malloc_r+0xe6>
 800df82:	6821      	ldr	r1, [r4, #0]
 800df84:	1a6d      	subs	r5, r5, r1
 800df86:	4629      	mov	r1, r5
 800df88:	4638      	mov	r0, r7
 800df8a:	f7ff ffa7 	bl	800dedc <sbrk_aligned>
 800df8e:	3001      	adds	r0, #1
 800df90:	d037      	beq.n	800e002 <_malloc_r+0xe6>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	442b      	add	r3, r5
 800df96:	6023      	str	r3, [r4, #0]
 800df98:	f8d8 3000 	ldr.w	r3, [r8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d038      	beq.n	800e012 <_malloc_r+0xf6>
 800dfa0:	685a      	ldr	r2, [r3, #4]
 800dfa2:	42a2      	cmp	r2, r4
 800dfa4:	d12b      	bne.n	800dffe <_malloc_r+0xe2>
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	605a      	str	r2, [r3, #4]
 800dfaa:	e00f      	b.n	800dfcc <_malloc_r+0xb0>
 800dfac:	6822      	ldr	r2, [r4, #0]
 800dfae:	1b52      	subs	r2, r2, r5
 800dfb0:	d41f      	bmi.n	800dff2 <_malloc_r+0xd6>
 800dfb2:	2a0b      	cmp	r2, #11
 800dfb4:	d917      	bls.n	800dfe6 <_malloc_r+0xca>
 800dfb6:	1961      	adds	r1, r4, r5
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	6025      	str	r5, [r4, #0]
 800dfbc:	bf18      	it	ne
 800dfbe:	6059      	strne	r1, [r3, #4]
 800dfc0:	6863      	ldr	r3, [r4, #4]
 800dfc2:	bf08      	it	eq
 800dfc4:	f8c8 1000 	streq.w	r1, [r8]
 800dfc8:	5162      	str	r2, [r4, r5]
 800dfca:	604b      	str	r3, [r1, #4]
 800dfcc:	4638      	mov	r0, r7
 800dfce:	f104 060b 	add.w	r6, r4, #11
 800dfd2:	f000 f829 	bl	800e028 <__malloc_unlock>
 800dfd6:	f026 0607 	bic.w	r6, r6, #7
 800dfda:	1d23      	adds	r3, r4, #4
 800dfdc:	1af2      	subs	r2, r6, r3
 800dfde:	d0ae      	beq.n	800df3e <_malloc_r+0x22>
 800dfe0:	1b9b      	subs	r3, r3, r6
 800dfe2:	50a3      	str	r3, [r4, r2]
 800dfe4:	e7ab      	b.n	800df3e <_malloc_r+0x22>
 800dfe6:	42a3      	cmp	r3, r4
 800dfe8:	6862      	ldr	r2, [r4, #4]
 800dfea:	d1dd      	bne.n	800dfa8 <_malloc_r+0x8c>
 800dfec:	f8c8 2000 	str.w	r2, [r8]
 800dff0:	e7ec      	b.n	800dfcc <_malloc_r+0xb0>
 800dff2:	4623      	mov	r3, r4
 800dff4:	6864      	ldr	r4, [r4, #4]
 800dff6:	e7ac      	b.n	800df52 <_malloc_r+0x36>
 800dff8:	4634      	mov	r4, r6
 800dffa:	6876      	ldr	r6, [r6, #4]
 800dffc:	e7b4      	b.n	800df68 <_malloc_r+0x4c>
 800dffe:	4613      	mov	r3, r2
 800e000:	e7cc      	b.n	800df9c <_malloc_r+0x80>
 800e002:	230c      	movs	r3, #12
 800e004:	603b      	str	r3, [r7, #0]
 800e006:	4638      	mov	r0, r7
 800e008:	f000 f80e 	bl	800e028 <__malloc_unlock>
 800e00c:	e797      	b.n	800df3e <_malloc_r+0x22>
 800e00e:	6025      	str	r5, [r4, #0]
 800e010:	e7dc      	b.n	800dfcc <_malloc_r+0xb0>
 800e012:	605b      	str	r3, [r3, #4]
 800e014:	deff      	udf	#255	; 0xff
 800e016:	bf00      	nop
 800e018:	20002c7c 	.word	0x20002c7c

0800e01c <__malloc_lock>:
 800e01c:	4801      	ldr	r0, [pc, #4]	; (800e024 <__malloc_lock+0x8>)
 800e01e:	f001 b8b0 	b.w	800f182 <__retarget_lock_acquire_recursive>
 800e022:	bf00      	nop
 800e024:	20002dc4 	.word	0x20002dc4

0800e028 <__malloc_unlock>:
 800e028:	4801      	ldr	r0, [pc, #4]	; (800e030 <__malloc_unlock+0x8>)
 800e02a:	f001 b8ab 	b.w	800f184 <__retarget_lock_release_recursive>
 800e02e:	bf00      	nop
 800e030:	20002dc4 	.word	0x20002dc4

0800e034 <realloc>:
 800e034:	4b02      	ldr	r3, [pc, #8]	; (800e040 <realloc+0xc>)
 800e036:	460a      	mov	r2, r1
 800e038:	4601      	mov	r1, r0
 800e03a:	6818      	ldr	r0, [r3, #0]
 800e03c:	f000 b802 	b.w	800e044 <_realloc_r>
 800e040:	20000348 	.word	0x20000348

0800e044 <_realloc_r>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	4680      	mov	r8, r0
 800e04a:	4614      	mov	r4, r2
 800e04c:	460e      	mov	r6, r1
 800e04e:	b921      	cbnz	r1, 800e05a <_realloc_r+0x16>
 800e050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	4611      	mov	r1, r2
 800e056:	f7ff bf61 	b.w	800df1c <_malloc_r>
 800e05a:	b92a      	cbnz	r2, 800e068 <_realloc_r+0x24>
 800e05c:	f001 f8b4 	bl	800f1c8 <_free_r>
 800e060:	4625      	mov	r5, r4
 800e062:	4628      	mov	r0, r5
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	f002 f911 	bl	801028e <_malloc_usable_size_r>
 800e06c:	4284      	cmp	r4, r0
 800e06e:	4607      	mov	r7, r0
 800e070:	d802      	bhi.n	800e078 <_realloc_r+0x34>
 800e072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e076:	d812      	bhi.n	800e09e <_realloc_r+0x5a>
 800e078:	4621      	mov	r1, r4
 800e07a:	4640      	mov	r0, r8
 800e07c:	f7ff ff4e 	bl	800df1c <_malloc_r>
 800e080:	4605      	mov	r5, r0
 800e082:	2800      	cmp	r0, #0
 800e084:	d0ed      	beq.n	800e062 <_realloc_r+0x1e>
 800e086:	42bc      	cmp	r4, r7
 800e088:	4622      	mov	r2, r4
 800e08a:	4631      	mov	r1, r6
 800e08c:	bf28      	it	cs
 800e08e:	463a      	movcs	r2, r7
 800e090:	f001 f881 	bl	800f196 <memcpy>
 800e094:	4631      	mov	r1, r6
 800e096:	4640      	mov	r0, r8
 800e098:	f001 f896 	bl	800f1c8 <_free_r>
 800e09c:	e7e1      	b.n	800e062 <_realloc_r+0x1e>
 800e09e:	4635      	mov	r5, r6
 800e0a0:	e7df      	b.n	800e062 <_realloc_r+0x1e>

0800e0a2 <sulp>:
 800e0a2:	b570      	push	{r4, r5, r6, lr}
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	ec45 4b10 	vmov	d0, r4, r5
 800e0ac:	4616      	mov	r6, r2
 800e0ae:	f001 ffad 	bl	801000c <__ulp>
 800e0b2:	ec51 0b10 	vmov	r0, r1, d0
 800e0b6:	b17e      	cbz	r6, 800e0d8 <sulp+0x36>
 800e0b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dd09      	ble.n	800e0d8 <sulp+0x36>
 800e0c4:	051b      	lsls	r3, r3, #20
 800e0c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e0ca:	2400      	movs	r4, #0
 800e0cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 faa8 	bl	8000628 <__aeabi_dmul>
 800e0d8:	bd70      	pop	{r4, r5, r6, pc}
 800e0da:	0000      	movs	r0, r0
 800e0dc:	0000      	movs	r0, r0
	...

0800e0e0 <_strtod_l>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	ed2d 8b02 	vpush	{d8}
 800e0e8:	b09b      	sub	sp, #108	; 0x6c
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	9216      	str	r2, [sp, #88]	; 0x58
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	f04f 0800 	mov.w	r8, #0
 800e0f8:	f04f 0900 	mov.w	r9, #0
 800e0fc:	460a      	mov	r2, r1
 800e0fe:	9215      	str	r2, [sp, #84]	; 0x54
 800e100:	7811      	ldrb	r1, [r2, #0]
 800e102:	292b      	cmp	r1, #43	; 0x2b
 800e104:	d04c      	beq.n	800e1a0 <_strtod_l+0xc0>
 800e106:	d83a      	bhi.n	800e17e <_strtod_l+0x9e>
 800e108:	290d      	cmp	r1, #13
 800e10a:	d834      	bhi.n	800e176 <_strtod_l+0x96>
 800e10c:	2908      	cmp	r1, #8
 800e10e:	d834      	bhi.n	800e17a <_strtod_l+0x9a>
 800e110:	2900      	cmp	r1, #0
 800e112:	d03d      	beq.n	800e190 <_strtod_l+0xb0>
 800e114:	2200      	movs	r2, #0
 800e116:	920a      	str	r2, [sp, #40]	; 0x28
 800e118:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e11a:	7832      	ldrb	r2, [r6, #0]
 800e11c:	2a30      	cmp	r2, #48	; 0x30
 800e11e:	f040 80b4 	bne.w	800e28a <_strtod_l+0x1aa>
 800e122:	7872      	ldrb	r2, [r6, #1]
 800e124:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e128:	2a58      	cmp	r2, #88	; 0x58
 800e12a:	d170      	bne.n	800e20e <_strtod_l+0x12e>
 800e12c:	9302      	str	r3, [sp, #8]
 800e12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e130:	9301      	str	r3, [sp, #4]
 800e132:	ab16      	add	r3, sp, #88	; 0x58
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	4a8e      	ldr	r2, [pc, #568]	; (800e370 <_strtod_l+0x290>)
 800e138:	ab17      	add	r3, sp, #92	; 0x5c
 800e13a:	a915      	add	r1, sp, #84	; 0x54
 800e13c:	4620      	mov	r0, r4
 800e13e:	f001 f8f7 	bl	800f330 <__gethex>
 800e142:	f010 070f 	ands.w	r7, r0, #15
 800e146:	4605      	mov	r5, r0
 800e148:	d005      	beq.n	800e156 <_strtod_l+0x76>
 800e14a:	2f06      	cmp	r7, #6
 800e14c:	d12a      	bne.n	800e1a4 <_strtod_l+0xc4>
 800e14e:	3601      	adds	r6, #1
 800e150:	2300      	movs	r3, #0
 800e152:	9615      	str	r6, [sp, #84]	; 0x54
 800e154:	930a      	str	r3, [sp, #40]	; 0x28
 800e156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f040 857f 	bne.w	800ec5c <_strtod_l+0xb7c>
 800e15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e160:	b1db      	cbz	r3, 800e19a <_strtod_l+0xba>
 800e162:	4642      	mov	r2, r8
 800e164:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e168:	ec43 2b10 	vmov	d0, r2, r3
 800e16c:	b01b      	add	sp, #108	; 0x6c
 800e16e:	ecbd 8b02 	vpop	{d8}
 800e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e176:	2920      	cmp	r1, #32
 800e178:	d1cc      	bne.n	800e114 <_strtod_l+0x34>
 800e17a:	3201      	adds	r2, #1
 800e17c:	e7bf      	b.n	800e0fe <_strtod_l+0x1e>
 800e17e:	292d      	cmp	r1, #45	; 0x2d
 800e180:	d1c8      	bne.n	800e114 <_strtod_l+0x34>
 800e182:	2101      	movs	r1, #1
 800e184:	910a      	str	r1, [sp, #40]	; 0x28
 800e186:	1c51      	adds	r1, r2, #1
 800e188:	9115      	str	r1, [sp, #84]	; 0x54
 800e18a:	7852      	ldrb	r2, [r2, #1]
 800e18c:	2a00      	cmp	r2, #0
 800e18e:	d1c3      	bne.n	800e118 <_strtod_l+0x38>
 800e190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e192:	9515      	str	r5, [sp, #84]	; 0x54
 800e194:	2b00      	cmp	r3, #0
 800e196:	f040 855f 	bne.w	800ec58 <_strtod_l+0xb78>
 800e19a:	4642      	mov	r2, r8
 800e19c:	464b      	mov	r3, r9
 800e19e:	e7e3      	b.n	800e168 <_strtod_l+0x88>
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	e7ef      	b.n	800e184 <_strtod_l+0xa4>
 800e1a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1a6:	b13a      	cbz	r2, 800e1b8 <_strtod_l+0xd8>
 800e1a8:	2135      	movs	r1, #53	; 0x35
 800e1aa:	a818      	add	r0, sp, #96	; 0x60
 800e1ac:	f002 f82b 	bl	8010206 <__copybits>
 800e1b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f001 fbfe 	bl	800f9b4 <_Bfree>
 800e1b8:	3f01      	subs	r7, #1
 800e1ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1bc:	2f04      	cmp	r7, #4
 800e1be:	d806      	bhi.n	800e1ce <_strtod_l+0xee>
 800e1c0:	e8df f007 	tbb	[pc, r7]
 800e1c4:	201d0314 	.word	0x201d0314
 800e1c8:	14          	.byte	0x14
 800e1c9:	00          	.byte	0x00
 800e1ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e1ce:	05e9      	lsls	r1, r5, #23
 800e1d0:	bf48      	it	mi
 800e1d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1da:	0d1b      	lsrs	r3, r3, #20
 800e1dc:	051b      	lsls	r3, r3, #20
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1b9      	bne.n	800e156 <_strtod_l+0x76>
 800e1e2:	f000 ffa3 	bl	800f12c <__errno>
 800e1e6:	2322      	movs	r3, #34	; 0x22
 800e1e8:	6003      	str	r3, [r0, #0]
 800e1ea:	e7b4      	b.n	800e156 <_strtod_l+0x76>
 800e1ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e1f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e1f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e1f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e1fc:	e7e7      	b.n	800e1ce <_strtod_l+0xee>
 800e1fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e378 <_strtod_l+0x298>
 800e202:	e7e4      	b.n	800e1ce <_strtod_l+0xee>
 800e204:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e208:	f04f 38ff 	mov.w	r8, #4294967295
 800e20c:	e7df      	b.n	800e1ce <_strtod_l+0xee>
 800e20e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	9215      	str	r2, [sp, #84]	; 0x54
 800e214:	785b      	ldrb	r3, [r3, #1]
 800e216:	2b30      	cmp	r3, #48	; 0x30
 800e218:	d0f9      	beq.n	800e20e <_strtod_l+0x12e>
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d09b      	beq.n	800e156 <_strtod_l+0x76>
 800e21e:	2301      	movs	r3, #1
 800e220:	f04f 0a00 	mov.w	sl, #0
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e228:	930b      	str	r3, [sp, #44]	; 0x2c
 800e22a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e22e:	46d3      	mov	fp, sl
 800e230:	220a      	movs	r2, #10
 800e232:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e234:	7806      	ldrb	r6, [r0, #0]
 800e236:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e23a:	b2d9      	uxtb	r1, r3
 800e23c:	2909      	cmp	r1, #9
 800e23e:	d926      	bls.n	800e28e <_strtod_l+0x1ae>
 800e240:	494c      	ldr	r1, [pc, #304]	; (800e374 <_strtod_l+0x294>)
 800e242:	2201      	movs	r2, #1
 800e244:	f000 feb3 	bl	800efae <strncmp>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d030      	beq.n	800e2ae <_strtod_l+0x1ce>
 800e24c:	2000      	movs	r0, #0
 800e24e:	4632      	mov	r2, r6
 800e250:	9005      	str	r0, [sp, #20]
 800e252:	465e      	mov	r6, fp
 800e254:	4603      	mov	r3, r0
 800e256:	2a65      	cmp	r2, #101	; 0x65
 800e258:	d001      	beq.n	800e25e <_strtod_l+0x17e>
 800e25a:	2a45      	cmp	r2, #69	; 0x45
 800e25c:	d113      	bne.n	800e286 <_strtod_l+0x1a6>
 800e25e:	b91e      	cbnz	r6, 800e268 <_strtod_l+0x188>
 800e260:	9a04      	ldr	r2, [sp, #16]
 800e262:	4302      	orrs	r2, r0
 800e264:	d094      	beq.n	800e190 <_strtod_l+0xb0>
 800e266:	2600      	movs	r6, #0
 800e268:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e26a:	1c6a      	adds	r2, r5, #1
 800e26c:	9215      	str	r2, [sp, #84]	; 0x54
 800e26e:	786a      	ldrb	r2, [r5, #1]
 800e270:	2a2b      	cmp	r2, #43	; 0x2b
 800e272:	d074      	beq.n	800e35e <_strtod_l+0x27e>
 800e274:	2a2d      	cmp	r2, #45	; 0x2d
 800e276:	d078      	beq.n	800e36a <_strtod_l+0x28a>
 800e278:	f04f 0c00 	mov.w	ip, #0
 800e27c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e280:	2909      	cmp	r1, #9
 800e282:	d97f      	bls.n	800e384 <_strtod_l+0x2a4>
 800e284:	9515      	str	r5, [sp, #84]	; 0x54
 800e286:	2700      	movs	r7, #0
 800e288:	e09e      	b.n	800e3c8 <_strtod_l+0x2e8>
 800e28a:	2300      	movs	r3, #0
 800e28c:	e7c8      	b.n	800e220 <_strtod_l+0x140>
 800e28e:	f1bb 0f08 	cmp.w	fp, #8
 800e292:	bfd8      	it	le
 800e294:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e296:	f100 0001 	add.w	r0, r0, #1
 800e29a:	bfda      	itte	le
 800e29c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e2a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800e2a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e2a6:	f10b 0b01 	add.w	fp, fp, #1
 800e2aa:	9015      	str	r0, [sp, #84]	; 0x54
 800e2ac:	e7c1      	b.n	800e232 <_strtod_l+0x152>
 800e2ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2b0:	1c5a      	adds	r2, r3, #1
 800e2b2:	9215      	str	r2, [sp, #84]	; 0x54
 800e2b4:	785a      	ldrb	r2, [r3, #1]
 800e2b6:	f1bb 0f00 	cmp.w	fp, #0
 800e2ba:	d037      	beq.n	800e32c <_strtod_l+0x24c>
 800e2bc:	9005      	str	r0, [sp, #20]
 800e2be:	465e      	mov	r6, fp
 800e2c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e2c4:	2b09      	cmp	r3, #9
 800e2c6:	d912      	bls.n	800e2ee <_strtod_l+0x20e>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e7c4      	b.n	800e256 <_strtod_l+0x176>
 800e2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	9215      	str	r2, [sp, #84]	; 0x54
 800e2d2:	785a      	ldrb	r2, [r3, #1]
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	2a30      	cmp	r2, #48	; 0x30
 800e2d8:	d0f8      	beq.n	800e2cc <_strtod_l+0x1ec>
 800e2da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e2de:	2b08      	cmp	r3, #8
 800e2e0:	f200 84c1 	bhi.w	800ec66 <_strtod_l+0xb86>
 800e2e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2e6:	9005      	str	r0, [sp, #20]
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	3a30      	subs	r2, #48	; 0x30
 800e2f0:	f100 0301 	add.w	r3, r0, #1
 800e2f4:	d014      	beq.n	800e320 <_strtod_l+0x240>
 800e2f6:	9905      	ldr	r1, [sp, #20]
 800e2f8:	4419      	add	r1, r3
 800e2fa:	9105      	str	r1, [sp, #20]
 800e2fc:	4633      	mov	r3, r6
 800e2fe:	eb00 0c06 	add.w	ip, r0, r6
 800e302:	210a      	movs	r1, #10
 800e304:	4563      	cmp	r3, ip
 800e306:	d113      	bne.n	800e330 <_strtod_l+0x250>
 800e308:	1833      	adds	r3, r6, r0
 800e30a:	2b08      	cmp	r3, #8
 800e30c:	f106 0601 	add.w	r6, r6, #1
 800e310:	4406      	add	r6, r0
 800e312:	dc1a      	bgt.n	800e34a <_strtod_l+0x26a>
 800e314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e316:	230a      	movs	r3, #10
 800e318:	fb03 2301 	mla	r3, r3, r1, r2
 800e31c:	9309      	str	r3, [sp, #36]	; 0x24
 800e31e:	2300      	movs	r3, #0
 800e320:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e322:	1c51      	adds	r1, r2, #1
 800e324:	9115      	str	r1, [sp, #84]	; 0x54
 800e326:	7852      	ldrb	r2, [r2, #1]
 800e328:	4618      	mov	r0, r3
 800e32a:	e7c9      	b.n	800e2c0 <_strtod_l+0x1e0>
 800e32c:	4658      	mov	r0, fp
 800e32e:	e7d2      	b.n	800e2d6 <_strtod_l+0x1f6>
 800e330:	2b08      	cmp	r3, #8
 800e332:	f103 0301 	add.w	r3, r3, #1
 800e336:	dc03      	bgt.n	800e340 <_strtod_l+0x260>
 800e338:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e33a:	434f      	muls	r7, r1
 800e33c:	9709      	str	r7, [sp, #36]	; 0x24
 800e33e:	e7e1      	b.n	800e304 <_strtod_l+0x224>
 800e340:	2b10      	cmp	r3, #16
 800e342:	bfd8      	it	le
 800e344:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e348:	e7dc      	b.n	800e304 <_strtod_l+0x224>
 800e34a:	2e10      	cmp	r6, #16
 800e34c:	bfdc      	itt	le
 800e34e:	230a      	movle	r3, #10
 800e350:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e354:	e7e3      	b.n	800e31e <_strtod_l+0x23e>
 800e356:	2300      	movs	r3, #0
 800e358:	9305      	str	r3, [sp, #20]
 800e35a:	2301      	movs	r3, #1
 800e35c:	e780      	b.n	800e260 <_strtod_l+0x180>
 800e35e:	f04f 0c00 	mov.w	ip, #0
 800e362:	1caa      	adds	r2, r5, #2
 800e364:	9215      	str	r2, [sp, #84]	; 0x54
 800e366:	78aa      	ldrb	r2, [r5, #2]
 800e368:	e788      	b.n	800e27c <_strtod_l+0x19c>
 800e36a:	f04f 0c01 	mov.w	ip, #1
 800e36e:	e7f8      	b.n	800e362 <_strtod_l+0x282>
 800e370:	08011b98 	.word	0x08011b98
 800e374:	08011b88 	.word	0x08011b88
 800e378:	7ff00000 	.word	0x7ff00000
 800e37c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e37e:	1c51      	adds	r1, r2, #1
 800e380:	9115      	str	r1, [sp, #84]	; 0x54
 800e382:	7852      	ldrb	r2, [r2, #1]
 800e384:	2a30      	cmp	r2, #48	; 0x30
 800e386:	d0f9      	beq.n	800e37c <_strtod_l+0x29c>
 800e388:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e38c:	2908      	cmp	r1, #8
 800e38e:	f63f af7a 	bhi.w	800e286 <_strtod_l+0x1a6>
 800e392:	3a30      	subs	r2, #48	; 0x30
 800e394:	9208      	str	r2, [sp, #32]
 800e396:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e398:	920c      	str	r2, [sp, #48]	; 0x30
 800e39a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e39c:	1c57      	adds	r7, r2, #1
 800e39e:	9715      	str	r7, [sp, #84]	; 0x54
 800e3a0:	7852      	ldrb	r2, [r2, #1]
 800e3a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e3a6:	f1be 0f09 	cmp.w	lr, #9
 800e3aa:	d938      	bls.n	800e41e <_strtod_l+0x33e>
 800e3ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e3ae:	1a7f      	subs	r7, r7, r1
 800e3b0:	2f08      	cmp	r7, #8
 800e3b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e3b6:	dc03      	bgt.n	800e3c0 <_strtod_l+0x2e0>
 800e3b8:	9908      	ldr	r1, [sp, #32]
 800e3ba:	428f      	cmp	r7, r1
 800e3bc:	bfa8      	it	ge
 800e3be:	460f      	movge	r7, r1
 800e3c0:	f1bc 0f00 	cmp.w	ip, #0
 800e3c4:	d000      	beq.n	800e3c8 <_strtod_l+0x2e8>
 800e3c6:	427f      	negs	r7, r7
 800e3c8:	2e00      	cmp	r6, #0
 800e3ca:	d14f      	bne.n	800e46c <_strtod_l+0x38c>
 800e3cc:	9904      	ldr	r1, [sp, #16]
 800e3ce:	4301      	orrs	r1, r0
 800e3d0:	f47f aec1 	bne.w	800e156 <_strtod_l+0x76>
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f47f aedb 	bne.w	800e190 <_strtod_l+0xb0>
 800e3da:	2a69      	cmp	r2, #105	; 0x69
 800e3dc:	d029      	beq.n	800e432 <_strtod_l+0x352>
 800e3de:	dc26      	bgt.n	800e42e <_strtod_l+0x34e>
 800e3e0:	2a49      	cmp	r2, #73	; 0x49
 800e3e2:	d026      	beq.n	800e432 <_strtod_l+0x352>
 800e3e4:	2a4e      	cmp	r2, #78	; 0x4e
 800e3e6:	f47f aed3 	bne.w	800e190 <_strtod_l+0xb0>
 800e3ea:	499b      	ldr	r1, [pc, #620]	; (800e658 <_strtod_l+0x578>)
 800e3ec:	a815      	add	r0, sp, #84	; 0x54
 800e3ee:	f001 f9df 	bl	800f7b0 <__match>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	f43f aecc 	beq.w	800e190 <_strtod_l+0xb0>
 800e3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b28      	cmp	r3, #40	; 0x28
 800e3fe:	d12f      	bne.n	800e460 <_strtod_l+0x380>
 800e400:	4996      	ldr	r1, [pc, #600]	; (800e65c <_strtod_l+0x57c>)
 800e402:	aa18      	add	r2, sp, #96	; 0x60
 800e404:	a815      	add	r0, sp, #84	; 0x54
 800e406:	f001 f9e7 	bl	800f7d8 <__hexnan>
 800e40a:	2805      	cmp	r0, #5
 800e40c:	d128      	bne.n	800e460 <_strtod_l+0x380>
 800e40e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e414:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e418:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e41c:	e69b      	b.n	800e156 <_strtod_l+0x76>
 800e41e:	9f08      	ldr	r7, [sp, #32]
 800e420:	210a      	movs	r1, #10
 800e422:	fb01 2107 	mla	r1, r1, r7, r2
 800e426:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e42a:	9208      	str	r2, [sp, #32]
 800e42c:	e7b5      	b.n	800e39a <_strtod_l+0x2ba>
 800e42e:	2a6e      	cmp	r2, #110	; 0x6e
 800e430:	e7d9      	b.n	800e3e6 <_strtod_l+0x306>
 800e432:	498b      	ldr	r1, [pc, #556]	; (800e660 <_strtod_l+0x580>)
 800e434:	a815      	add	r0, sp, #84	; 0x54
 800e436:	f001 f9bb 	bl	800f7b0 <__match>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	f43f aea8 	beq.w	800e190 <_strtod_l+0xb0>
 800e440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e442:	4988      	ldr	r1, [pc, #544]	; (800e664 <_strtod_l+0x584>)
 800e444:	3b01      	subs	r3, #1
 800e446:	a815      	add	r0, sp, #84	; 0x54
 800e448:	9315      	str	r3, [sp, #84]	; 0x54
 800e44a:	f001 f9b1 	bl	800f7b0 <__match>
 800e44e:	b910      	cbnz	r0, 800e456 <_strtod_l+0x376>
 800e450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e452:	3301      	adds	r3, #1
 800e454:	9315      	str	r3, [sp, #84]	; 0x54
 800e456:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e674 <_strtod_l+0x594>
 800e45a:	f04f 0800 	mov.w	r8, #0
 800e45e:	e67a      	b.n	800e156 <_strtod_l+0x76>
 800e460:	4881      	ldr	r0, [pc, #516]	; (800e668 <_strtod_l+0x588>)
 800e462:	f000 fea9 	bl	800f1b8 <nan>
 800e466:	ec59 8b10 	vmov	r8, r9, d0
 800e46a:	e674      	b.n	800e156 <_strtod_l+0x76>
 800e46c:	9b05      	ldr	r3, [sp, #20]
 800e46e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e470:	1afb      	subs	r3, r7, r3
 800e472:	f1bb 0f00 	cmp.w	fp, #0
 800e476:	bf08      	it	eq
 800e478:	46b3      	moveq	fp, r6
 800e47a:	2e10      	cmp	r6, #16
 800e47c:	9308      	str	r3, [sp, #32]
 800e47e:	4635      	mov	r5, r6
 800e480:	bfa8      	it	ge
 800e482:	2510      	movge	r5, #16
 800e484:	f7f2 f856 	bl	8000534 <__aeabi_ui2d>
 800e488:	2e09      	cmp	r6, #9
 800e48a:	4680      	mov	r8, r0
 800e48c:	4689      	mov	r9, r1
 800e48e:	dd13      	ble.n	800e4b8 <_strtod_l+0x3d8>
 800e490:	4b76      	ldr	r3, [pc, #472]	; (800e66c <_strtod_l+0x58c>)
 800e492:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e496:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e49a:	f7f2 f8c5 	bl	8000628 <__aeabi_dmul>
 800e49e:	4680      	mov	r8, r0
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	4689      	mov	r9, r1
 800e4a4:	f7f2 f846 	bl	8000534 <__aeabi_ui2d>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	f7f1 ff04 	bl	80002bc <__adddf3>
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	4689      	mov	r9, r1
 800e4b8:	2e0f      	cmp	r6, #15
 800e4ba:	dc38      	bgt.n	800e52e <_strtod_l+0x44e>
 800e4bc:	9b08      	ldr	r3, [sp, #32]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f43f ae49 	beq.w	800e156 <_strtod_l+0x76>
 800e4c4:	dd24      	ble.n	800e510 <_strtod_l+0x430>
 800e4c6:	2b16      	cmp	r3, #22
 800e4c8:	dc0b      	bgt.n	800e4e2 <_strtod_l+0x402>
 800e4ca:	4968      	ldr	r1, [pc, #416]	; (800e66c <_strtod_l+0x58c>)
 800e4cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d4:	4642      	mov	r2, r8
 800e4d6:	464b      	mov	r3, r9
 800e4d8:	f7f2 f8a6 	bl	8000628 <__aeabi_dmul>
 800e4dc:	4680      	mov	r8, r0
 800e4de:	4689      	mov	r9, r1
 800e4e0:	e639      	b.n	800e156 <_strtod_l+0x76>
 800e4e2:	9a08      	ldr	r2, [sp, #32]
 800e4e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	db20      	blt.n	800e52e <_strtod_l+0x44e>
 800e4ec:	4c5f      	ldr	r4, [pc, #380]	; (800e66c <_strtod_l+0x58c>)
 800e4ee:	f1c6 060f 	rsb	r6, r6, #15
 800e4f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e4f6:	4642      	mov	r2, r8
 800e4f8:	464b      	mov	r3, r9
 800e4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fe:	f7f2 f893 	bl	8000628 <__aeabi_dmul>
 800e502:	9b08      	ldr	r3, [sp, #32]
 800e504:	1b9e      	subs	r6, r3, r6
 800e506:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e50a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e50e:	e7e3      	b.n	800e4d8 <_strtod_l+0x3f8>
 800e510:	9b08      	ldr	r3, [sp, #32]
 800e512:	3316      	adds	r3, #22
 800e514:	db0b      	blt.n	800e52e <_strtod_l+0x44e>
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	1bdf      	subs	r7, r3, r7
 800e51a:	4b54      	ldr	r3, [pc, #336]	; (800e66c <_strtod_l+0x58c>)
 800e51c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f2 f9a8 	bl	800087c <__aeabi_ddiv>
 800e52c:	e7d6      	b.n	800e4dc <_strtod_l+0x3fc>
 800e52e:	9b08      	ldr	r3, [sp, #32]
 800e530:	1b75      	subs	r5, r6, r5
 800e532:	441d      	add	r5, r3
 800e534:	2d00      	cmp	r5, #0
 800e536:	dd70      	ble.n	800e61a <_strtod_l+0x53a>
 800e538:	f015 030f 	ands.w	r3, r5, #15
 800e53c:	d00a      	beq.n	800e554 <_strtod_l+0x474>
 800e53e:	494b      	ldr	r1, [pc, #300]	; (800e66c <_strtod_l+0x58c>)
 800e540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e544:	4642      	mov	r2, r8
 800e546:	464b      	mov	r3, r9
 800e548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e54c:	f7f2 f86c 	bl	8000628 <__aeabi_dmul>
 800e550:	4680      	mov	r8, r0
 800e552:	4689      	mov	r9, r1
 800e554:	f035 050f 	bics.w	r5, r5, #15
 800e558:	d04d      	beq.n	800e5f6 <_strtod_l+0x516>
 800e55a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e55e:	dd22      	ble.n	800e5a6 <_strtod_l+0x4c6>
 800e560:	2500      	movs	r5, #0
 800e562:	46ab      	mov	fp, r5
 800e564:	9509      	str	r5, [sp, #36]	; 0x24
 800e566:	9505      	str	r5, [sp, #20]
 800e568:	2322      	movs	r3, #34	; 0x22
 800e56a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e674 <_strtod_l+0x594>
 800e56e:	6023      	str	r3, [r4, #0]
 800e570:	f04f 0800 	mov.w	r8, #0
 800e574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	f43f aded 	beq.w	800e156 <_strtod_l+0x76>
 800e57c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e57e:	4620      	mov	r0, r4
 800e580:	f001 fa18 	bl	800f9b4 <_Bfree>
 800e584:	9905      	ldr	r1, [sp, #20]
 800e586:	4620      	mov	r0, r4
 800e588:	f001 fa14 	bl	800f9b4 <_Bfree>
 800e58c:	4659      	mov	r1, fp
 800e58e:	4620      	mov	r0, r4
 800e590:	f001 fa10 	bl	800f9b4 <_Bfree>
 800e594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e596:	4620      	mov	r0, r4
 800e598:	f001 fa0c 	bl	800f9b4 <_Bfree>
 800e59c:	4629      	mov	r1, r5
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f001 fa08 	bl	800f9b4 <_Bfree>
 800e5a4:	e5d7      	b.n	800e156 <_strtod_l+0x76>
 800e5a6:	4b32      	ldr	r3, [pc, #200]	; (800e670 <_strtod_l+0x590>)
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	112d      	asrs	r5, r5, #4
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	469a      	mov	sl, r3
 800e5b4:	2d01      	cmp	r5, #1
 800e5b6:	dc21      	bgt.n	800e5fc <_strtod_l+0x51c>
 800e5b8:	b10b      	cbz	r3, 800e5be <_strtod_l+0x4de>
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	4689      	mov	r9, r1
 800e5be:	492c      	ldr	r1, [pc, #176]	; (800e670 <_strtod_l+0x590>)
 800e5c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e5c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	464b      	mov	r3, r9
 800e5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5d0:	f7f2 f82a 	bl	8000628 <__aeabi_dmul>
 800e5d4:	4b27      	ldr	r3, [pc, #156]	; (800e674 <_strtod_l+0x594>)
 800e5d6:	460a      	mov	r2, r1
 800e5d8:	400b      	ands	r3, r1
 800e5da:	4927      	ldr	r1, [pc, #156]	; (800e678 <_strtod_l+0x598>)
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	4680      	mov	r8, r0
 800e5e0:	d8be      	bhi.n	800e560 <_strtod_l+0x480>
 800e5e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e5e6:	428b      	cmp	r3, r1
 800e5e8:	bf86      	itte	hi
 800e5ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e67c <_strtod_l+0x59c>
 800e5ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800e5f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	9304      	str	r3, [sp, #16]
 800e5fa:	e07b      	b.n	800e6f4 <_strtod_l+0x614>
 800e5fc:	07ea      	lsls	r2, r5, #31
 800e5fe:	d505      	bpl.n	800e60c <_strtod_l+0x52c>
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	f7f2 f80f 	bl	8000628 <__aeabi_dmul>
 800e60a:	2301      	movs	r3, #1
 800e60c:	9a04      	ldr	r2, [sp, #16]
 800e60e:	3208      	adds	r2, #8
 800e610:	f10a 0a01 	add.w	sl, sl, #1
 800e614:	106d      	asrs	r5, r5, #1
 800e616:	9204      	str	r2, [sp, #16]
 800e618:	e7cc      	b.n	800e5b4 <_strtod_l+0x4d4>
 800e61a:	d0ec      	beq.n	800e5f6 <_strtod_l+0x516>
 800e61c:	426d      	negs	r5, r5
 800e61e:	f015 020f 	ands.w	r2, r5, #15
 800e622:	d00a      	beq.n	800e63a <_strtod_l+0x55a>
 800e624:	4b11      	ldr	r3, [pc, #68]	; (800e66c <_strtod_l+0x58c>)
 800e626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e62a:	4640      	mov	r0, r8
 800e62c:	4649      	mov	r1, r9
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f2 f923 	bl	800087c <__aeabi_ddiv>
 800e636:	4680      	mov	r8, r0
 800e638:	4689      	mov	r9, r1
 800e63a:	112d      	asrs	r5, r5, #4
 800e63c:	d0db      	beq.n	800e5f6 <_strtod_l+0x516>
 800e63e:	2d1f      	cmp	r5, #31
 800e640:	dd1e      	ble.n	800e680 <_strtod_l+0x5a0>
 800e642:	2500      	movs	r5, #0
 800e644:	46ab      	mov	fp, r5
 800e646:	9509      	str	r5, [sp, #36]	; 0x24
 800e648:	9505      	str	r5, [sp, #20]
 800e64a:	2322      	movs	r3, #34	; 0x22
 800e64c:	f04f 0800 	mov.w	r8, #0
 800e650:	f04f 0900 	mov.w	r9, #0
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	e78d      	b.n	800e574 <_strtod_l+0x494>
 800e658:	08011b93 	.word	0x08011b93
 800e65c:	08011bac 	.word	0x08011bac
 800e660:	08011b8a 	.word	0x08011b8a
 800e664:	08011b8d 	.word	0x08011b8d
 800e668:	08011f5d 	.word	0x08011f5d
 800e66c:	08011e00 	.word	0x08011e00
 800e670:	08011dd8 	.word	0x08011dd8
 800e674:	7ff00000 	.word	0x7ff00000
 800e678:	7ca00000 	.word	0x7ca00000
 800e67c:	7fefffff 	.word	0x7fefffff
 800e680:	f015 0310 	ands.w	r3, r5, #16
 800e684:	bf18      	it	ne
 800e686:	236a      	movne	r3, #106	; 0x6a
 800e688:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ea2c <_strtod_l+0x94c>
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	4640      	mov	r0, r8
 800e690:	4649      	mov	r1, r9
 800e692:	2300      	movs	r3, #0
 800e694:	07ea      	lsls	r2, r5, #31
 800e696:	d504      	bpl.n	800e6a2 <_strtod_l+0x5c2>
 800e698:	e9da 2300 	ldrd	r2, r3, [sl]
 800e69c:	f7f1 ffc4 	bl	8000628 <__aeabi_dmul>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	106d      	asrs	r5, r5, #1
 800e6a4:	f10a 0a08 	add.w	sl, sl, #8
 800e6a8:	d1f4      	bne.n	800e694 <_strtod_l+0x5b4>
 800e6aa:	b10b      	cbz	r3, 800e6b0 <_strtod_l+0x5d0>
 800e6ac:	4680      	mov	r8, r0
 800e6ae:	4689      	mov	r9, r1
 800e6b0:	9b04      	ldr	r3, [sp, #16]
 800e6b2:	b1bb      	cbz	r3, 800e6e4 <_strtod_l+0x604>
 800e6b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e6b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	4649      	mov	r1, r9
 800e6c0:	dd10      	ble.n	800e6e4 <_strtod_l+0x604>
 800e6c2:	2b1f      	cmp	r3, #31
 800e6c4:	f340 811e 	ble.w	800e904 <_strtod_l+0x824>
 800e6c8:	2b34      	cmp	r3, #52	; 0x34
 800e6ca:	bfde      	ittt	le
 800e6cc:	f04f 33ff 	movle.w	r3, #4294967295
 800e6d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e6d4:	4093      	lslle	r3, r2
 800e6d6:	f04f 0800 	mov.w	r8, #0
 800e6da:	bfcc      	ite	gt
 800e6dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e6e0:	ea03 0901 	andle.w	r9, r3, r1
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	f7f2 fa04 	bl	8000af8 <__aeabi_dcmpeq>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d1a6      	bne.n	800e642 <_strtod_l+0x562>
 800e6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6fa:	4633      	mov	r3, r6
 800e6fc:	465a      	mov	r2, fp
 800e6fe:	4620      	mov	r0, r4
 800e700:	f001 f9c0 	bl	800fa84 <__s2b>
 800e704:	9009      	str	r0, [sp, #36]	; 0x24
 800e706:	2800      	cmp	r0, #0
 800e708:	f43f af2a 	beq.w	800e560 <_strtod_l+0x480>
 800e70c:	9a08      	ldr	r2, [sp, #32]
 800e70e:	9b05      	ldr	r3, [sp, #20]
 800e710:	2a00      	cmp	r2, #0
 800e712:	eba3 0307 	sub.w	r3, r3, r7
 800e716:	bfa8      	it	ge
 800e718:	2300      	movge	r3, #0
 800e71a:	930c      	str	r3, [sp, #48]	; 0x30
 800e71c:	2500      	movs	r5, #0
 800e71e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e722:	9312      	str	r3, [sp, #72]	; 0x48
 800e724:	46ab      	mov	fp, r5
 800e726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e728:	4620      	mov	r0, r4
 800e72a:	6859      	ldr	r1, [r3, #4]
 800e72c:	f001 f902 	bl	800f934 <_Balloc>
 800e730:	9005      	str	r0, [sp, #20]
 800e732:	2800      	cmp	r0, #0
 800e734:	f43f af18 	beq.w	800e568 <_strtod_l+0x488>
 800e738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73a:	691a      	ldr	r2, [r3, #16]
 800e73c:	3202      	adds	r2, #2
 800e73e:	f103 010c 	add.w	r1, r3, #12
 800e742:	0092      	lsls	r2, r2, #2
 800e744:	300c      	adds	r0, #12
 800e746:	f000 fd26 	bl	800f196 <memcpy>
 800e74a:	ec49 8b10 	vmov	d0, r8, r9
 800e74e:	aa18      	add	r2, sp, #96	; 0x60
 800e750:	a917      	add	r1, sp, #92	; 0x5c
 800e752:	4620      	mov	r0, r4
 800e754:	f001 fcca 	bl	80100ec <__d2b>
 800e758:	ec49 8b18 	vmov	d8, r8, r9
 800e75c:	9016      	str	r0, [sp, #88]	; 0x58
 800e75e:	2800      	cmp	r0, #0
 800e760:	f43f af02 	beq.w	800e568 <_strtod_l+0x488>
 800e764:	2101      	movs	r1, #1
 800e766:	4620      	mov	r0, r4
 800e768:	f001 fa24 	bl	800fbb4 <__i2b>
 800e76c:	4683      	mov	fp, r0
 800e76e:	2800      	cmp	r0, #0
 800e770:	f43f aefa 	beq.w	800e568 <_strtod_l+0x488>
 800e774:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e776:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e778:	2e00      	cmp	r6, #0
 800e77a:	bfab      	itete	ge
 800e77c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e77e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e780:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e782:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e786:	bfac      	ite	ge
 800e788:	eb06 0a03 	addge.w	sl, r6, r3
 800e78c:	1b9f      	sublt	r7, r3, r6
 800e78e:	9b04      	ldr	r3, [sp, #16]
 800e790:	1af6      	subs	r6, r6, r3
 800e792:	4416      	add	r6, r2
 800e794:	4ba0      	ldr	r3, [pc, #640]	; (800ea18 <_strtod_l+0x938>)
 800e796:	3e01      	subs	r6, #1
 800e798:	429e      	cmp	r6, r3
 800e79a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e79e:	f280 80c4 	bge.w	800e92a <_strtod_l+0x84a>
 800e7a2:	1b9b      	subs	r3, r3, r6
 800e7a4:	2b1f      	cmp	r3, #31
 800e7a6:	eba2 0203 	sub.w	r2, r2, r3
 800e7aa:	f04f 0101 	mov.w	r1, #1
 800e7ae:	f300 80b0 	bgt.w	800e912 <_strtod_l+0x832>
 800e7b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e7b6:	930e      	str	r3, [sp, #56]	; 0x38
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e7bc:	eb0a 0602 	add.w	r6, sl, r2
 800e7c0:	9b04      	ldr	r3, [sp, #16]
 800e7c2:	45b2      	cmp	sl, r6
 800e7c4:	4417      	add	r7, r2
 800e7c6:	441f      	add	r7, r3
 800e7c8:	4653      	mov	r3, sl
 800e7ca:	bfa8      	it	ge
 800e7cc:	4633      	movge	r3, r6
 800e7ce:	42bb      	cmp	r3, r7
 800e7d0:	bfa8      	it	ge
 800e7d2:	463b      	movge	r3, r7
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	bfc2      	ittt	gt
 800e7d8:	1af6      	subgt	r6, r6, r3
 800e7da:	1aff      	subgt	r7, r7, r3
 800e7dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd17      	ble.n	800e816 <_strtod_l+0x736>
 800e7e6:	4659      	mov	r1, fp
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f001 faa2 	bl	800fd34 <__pow5mult>
 800e7f0:	4683      	mov	fp, r0
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f43f aeb8 	beq.w	800e568 <_strtod_l+0x488>
 800e7f8:	4601      	mov	r1, r0
 800e7fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f001 f9ef 	bl	800fbe0 <__multiply>
 800e802:	900b      	str	r0, [sp, #44]	; 0x2c
 800e804:	2800      	cmp	r0, #0
 800e806:	f43f aeaf 	beq.w	800e568 <_strtod_l+0x488>
 800e80a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e80c:	4620      	mov	r0, r4
 800e80e:	f001 f8d1 	bl	800f9b4 <_Bfree>
 800e812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e814:	9316      	str	r3, [sp, #88]	; 0x58
 800e816:	2e00      	cmp	r6, #0
 800e818:	f300 808c 	bgt.w	800e934 <_strtod_l+0x854>
 800e81c:	9b08      	ldr	r3, [sp, #32]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	dd08      	ble.n	800e834 <_strtod_l+0x754>
 800e822:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e824:	9905      	ldr	r1, [sp, #20]
 800e826:	4620      	mov	r0, r4
 800e828:	f001 fa84 	bl	800fd34 <__pow5mult>
 800e82c:	9005      	str	r0, [sp, #20]
 800e82e:	2800      	cmp	r0, #0
 800e830:	f43f ae9a 	beq.w	800e568 <_strtod_l+0x488>
 800e834:	2f00      	cmp	r7, #0
 800e836:	dd08      	ble.n	800e84a <_strtod_l+0x76a>
 800e838:	9905      	ldr	r1, [sp, #20]
 800e83a:	463a      	mov	r2, r7
 800e83c:	4620      	mov	r0, r4
 800e83e:	f001 fad3 	bl	800fde8 <__lshift>
 800e842:	9005      	str	r0, [sp, #20]
 800e844:	2800      	cmp	r0, #0
 800e846:	f43f ae8f 	beq.w	800e568 <_strtod_l+0x488>
 800e84a:	f1ba 0f00 	cmp.w	sl, #0
 800e84e:	dd08      	ble.n	800e862 <_strtod_l+0x782>
 800e850:	4659      	mov	r1, fp
 800e852:	4652      	mov	r2, sl
 800e854:	4620      	mov	r0, r4
 800e856:	f001 fac7 	bl	800fde8 <__lshift>
 800e85a:	4683      	mov	fp, r0
 800e85c:	2800      	cmp	r0, #0
 800e85e:	f43f ae83 	beq.w	800e568 <_strtod_l+0x488>
 800e862:	9a05      	ldr	r2, [sp, #20]
 800e864:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e866:	4620      	mov	r0, r4
 800e868:	f001 fb46 	bl	800fef8 <__mdiff>
 800e86c:	4605      	mov	r5, r0
 800e86e:	2800      	cmp	r0, #0
 800e870:	f43f ae7a 	beq.w	800e568 <_strtod_l+0x488>
 800e874:	68c3      	ldr	r3, [r0, #12]
 800e876:	930b      	str	r3, [sp, #44]	; 0x2c
 800e878:	2300      	movs	r3, #0
 800e87a:	60c3      	str	r3, [r0, #12]
 800e87c:	4659      	mov	r1, fp
 800e87e:	f001 fb1f 	bl	800fec0 <__mcmp>
 800e882:	2800      	cmp	r0, #0
 800e884:	da60      	bge.n	800e948 <_strtod_l+0x868>
 800e886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e888:	ea53 0308 	orrs.w	r3, r3, r8
 800e88c:	f040 8084 	bne.w	800e998 <_strtod_l+0x8b8>
 800e890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e894:	2b00      	cmp	r3, #0
 800e896:	d17f      	bne.n	800e998 <_strtod_l+0x8b8>
 800e898:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e89c:	0d1b      	lsrs	r3, r3, #20
 800e89e:	051b      	lsls	r3, r3, #20
 800e8a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e8a4:	d978      	bls.n	800e998 <_strtod_l+0x8b8>
 800e8a6:	696b      	ldr	r3, [r5, #20]
 800e8a8:	b913      	cbnz	r3, 800e8b0 <_strtod_l+0x7d0>
 800e8aa:	692b      	ldr	r3, [r5, #16]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	dd73      	ble.n	800e998 <_strtod_l+0x8b8>
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f001 fa97 	bl	800fde8 <__lshift>
 800e8ba:	4659      	mov	r1, fp
 800e8bc:	4605      	mov	r5, r0
 800e8be:	f001 faff 	bl	800fec0 <__mcmp>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	dd68      	ble.n	800e998 <_strtod_l+0x8b8>
 800e8c6:	9904      	ldr	r1, [sp, #16]
 800e8c8:	4a54      	ldr	r2, [pc, #336]	; (800ea1c <_strtod_l+0x93c>)
 800e8ca:	464b      	mov	r3, r9
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	f000 8084 	beq.w	800e9da <_strtod_l+0x8fa>
 800e8d2:	ea02 0109 	and.w	r1, r2, r9
 800e8d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e8da:	dc7e      	bgt.n	800e9da <_strtod_l+0x8fa>
 800e8dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e8e0:	f77f aeb3 	ble.w	800e64a <_strtod_l+0x56a>
 800e8e4:	4b4e      	ldr	r3, [pc, #312]	; (800ea20 <_strtod_l+0x940>)
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f7f1 fe9c 	bl	8000628 <__aeabi_dmul>
 800e8f0:	4b4a      	ldr	r3, [pc, #296]	; (800ea1c <_strtod_l+0x93c>)
 800e8f2:	400b      	ands	r3, r1
 800e8f4:	4680      	mov	r8, r0
 800e8f6:	4689      	mov	r9, r1
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f47f ae3f 	bne.w	800e57c <_strtod_l+0x49c>
 800e8fe:	2322      	movs	r3, #34	; 0x22
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	e63b      	b.n	800e57c <_strtod_l+0x49c>
 800e904:	f04f 32ff 	mov.w	r2, #4294967295
 800e908:	fa02 f303 	lsl.w	r3, r2, r3
 800e90c:	ea03 0808 	and.w	r8, r3, r8
 800e910:	e6e8      	b.n	800e6e4 <_strtod_l+0x604>
 800e912:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e916:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e91a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e91e:	36e2      	adds	r6, #226	; 0xe2
 800e920:	fa01 f306 	lsl.w	r3, r1, r6
 800e924:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e928:	e748      	b.n	800e7bc <_strtod_l+0x6dc>
 800e92a:	2100      	movs	r1, #0
 800e92c:	2301      	movs	r3, #1
 800e92e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e932:	e743      	b.n	800e7bc <_strtod_l+0x6dc>
 800e934:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e936:	4632      	mov	r2, r6
 800e938:	4620      	mov	r0, r4
 800e93a:	f001 fa55 	bl	800fde8 <__lshift>
 800e93e:	9016      	str	r0, [sp, #88]	; 0x58
 800e940:	2800      	cmp	r0, #0
 800e942:	f47f af6b 	bne.w	800e81c <_strtod_l+0x73c>
 800e946:	e60f      	b.n	800e568 <_strtod_l+0x488>
 800e948:	46ca      	mov	sl, r9
 800e94a:	d171      	bne.n	800ea30 <_strtod_l+0x950>
 800e94c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e94e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e952:	b352      	cbz	r2, 800e9aa <_strtod_l+0x8ca>
 800e954:	4a33      	ldr	r2, [pc, #204]	; (800ea24 <_strtod_l+0x944>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d12a      	bne.n	800e9b0 <_strtod_l+0x8d0>
 800e95a:	9b04      	ldr	r3, [sp, #16]
 800e95c:	4641      	mov	r1, r8
 800e95e:	b1fb      	cbz	r3, 800e9a0 <_strtod_l+0x8c0>
 800e960:	4b2e      	ldr	r3, [pc, #184]	; (800ea1c <_strtod_l+0x93c>)
 800e962:	ea09 0303 	and.w	r3, r9, r3
 800e966:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e96a:	f04f 32ff 	mov.w	r2, #4294967295
 800e96e:	d81a      	bhi.n	800e9a6 <_strtod_l+0x8c6>
 800e970:	0d1b      	lsrs	r3, r3, #20
 800e972:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e976:	fa02 f303 	lsl.w	r3, r2, r3
 800e97a:	4299      	cmp	r1, r3
 800e97c:	d118      	bne.n	800e9b0 <_strtod_l+0x8d0>
 800e97e:	4b2a      	ldr	r3, [pc, #168]	; (800ea28 <_strtod_l+0x948>)
 800e980:	459a      	cmp	sl, r3
 800e982:	d102      	bne.n	800e98a <_strtod_l+0x8aa>
 800e984:	3101      	adds	r1, #1
 800e986:	f43f adef 	beq.w	800e568 <_strtod_l+0x488>
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <_strtod_l+0x93c>)
 800e98c:	ea0a 0303 	and.w	r3, sl, r3
 800e990:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e994:	f04f 0800 	mov.w	r8, #0
 800e998:	9b04      	ldr	r3, [sp, #16]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1a2      	bne.n	800e8e4 <_strtod_l+0x804>
 800e99e:	e5ed      	b.n	800e57c <_strtod_l+0x49c>
 800e9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a4:	e7e9      	b.n	800e97a <_strtod_l+0x89a>
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	e7e7      	b.n	800e97a <_strtod_l+0x89a>
 800e9aa:	ea53 0308 	orrs.w	r3, r3, r8
 800e9ae:	d08a      	beq.n	800e8c6 <_strtod_l+0x7e6>
 800e9b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9b2:	b1e3      	cbz	r3, 800e9ee <_strtod_l+0x90e>
 800e9b4:	ea13 0f0a 	tst.w	r3, sl
 800e9b8:	d0ee      	beq.n	800e998 <_strtod_l+0x8b8>
 800e9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9bc:	9a04      	ldr	r2, [sp, #16]
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	b1c3      	cbz	r3, 800e9f6 <_strtod_l+0x916>
 800e9c4:	f7ff fb6d 	bl	800e0a2 <sulp>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	ec51 0b18 	vmov	r0, r1, d8
 800e9d0:	f7f1 fc74 	bl	80002bc <__adddf3>
 800e9d4:	4680      	mov	r8, r0
 800e9d6:	4689      	mov	r9, r1
 800e9d8:	e7de      	b.n	800e998 <_strtod_l+0x8b8>
 800e9da:	4013      	ands	r3, r2
 800e9dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e9e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e9e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e9e8:	f04f 38ff 	mov.w	r8, #4294967295
 800e9ec:	e7d4      	b.n	800e998 <_strtod_l+0x8b8>
 800e9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9f0:	ea13 0f08 	tst.w	r3, r8
 800e9f4:	e7e0      	b.n	800e9b8 <_strtod_l+0x8d8>
 800e9f6:	f7ff fb54 	bl	800e0a2 <sulp>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	ec51 0b18 	vmov	r0, r1, d8
 800ea02:	f7f1 fc59 	bl	80002b8 <__aeabi_dsub>
 800ea06:	2200      	movs	r2, #0
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	4689      	mov	r9, r1
 800ea0e:	f7f2 f873 	bl	8000af8 <__aeabi_dcmpeq>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0c0      	beq.n	800e998 <_strtod_l+0x8b8>
 800ea16:	e618      	b.n	800e64a <_strtod_l+0x56a>
 800ea18:	fffffc02 	.word	0xfffffc02
 800ea1c:	7ff00000 	.word	0x7ff00000
 800ea20:	39500000 	.word	0x39500000
 800ea24:	000fffff 	.word	0x000fffff
 800ea28:	7fefffff 	.word	0x7fefffff
 800ea2c:	08011bc0 	.word	0x08011bc0
 800ea30:	4659      	mov	r1, fp
 800ea32:	4628      	mov	r0, r5
 800ea34:	f001 fbb4 	bl	80101a0 <__ratio>
 800ea38:	ec57 6b10 	vmov	r6, r7, d0
 800ea3c:	ee10 0a10 	vmov	r0, s0
 800ea40:	2200      	movs	r2, #0
 800ea42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f2 f86a 	bl	8000b20 <__aeabi_dcmple>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d071      	beq.n	800eb34 <_strtod_l+0xa54>
 800ea50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d17c      	bne.n	800eb50 <_strtod_l+0xa70>
 800ea56:	f1b8 0f00 	cmp.w	r8, #0
 800ea5a:	d15a      	bne.n	800eb12 <_strtod_l+0xa32>
 800ea5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d15d      	bne.n	800eb20 <_strtod_l+0xa40>
 800ea64:	4b90      	ldr	r3, [pc, #576]	; (800eca8 <_strtod_l+0xbc8>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f2 f84e 	bl	8000b0c <__aeabi_dcmplt>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d15c      	bne.n	800eb2e <_strtod_l+0xa4e>
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	4b8c      	ldr	r3, [pc, #560]	; (800ecac <_strtod_l+0xbcc>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f7f1 fdd4 	bl	8000628 <__aeabi_dmul>
 800ea80:	4606      	mov	r6, r0
 800ea82:	460f      	mov	r7, r1
 800ea84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ea88:	9606      	str	r6, [sp, #24]
 800ea8a:	9307      	str	r3, [sp, #28]
 800ea8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ea94:	4b86      	ldr	r3, [pc, #536]	; (800ecb0 <_strtod_l+0xbd0>)
 800ea96:	ea0a 0303 	and.w	r3, sl, r3
 800ea9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ea9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea9e:	4b85      	ldr	r3, [pc, #532]	; (800ecb4 <_strtod_l+0xbd4>)
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	f040 8090 	bne.w	800ebc6 <_strtod_l+0xae6>
 800eaa6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800eaaa:	ec49 8b10 	vmov	d0, r8, r9
 800eaae:	f001 faad 	bl	801000c <__ulp>
 800eab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eab6:	ec51 0b10 	vmov	r0, r1, d0
 800eaba:	f7f1 fdb5 	bl	8000628 <__aeabi_dmul>
 800eabe:	4642      	mov	r2, r8
 800eac0:	464b      	mov	r3, r9
 800eac2:	f7f1 fbfb 	bl	80002bc <__adddf3>
 800eac6:	460b      	mov	r3, r1
 800eac8:	4979      	ldr	r1, [pc, #484]	; (800ecb0 <_strtod_l+0xbd0>)
 800eaca:	4a7b      	ldr	r2, [pc, #492]	; (800ecb8 <_strtod_l+0xbd8>)
 800eacc:	4019      	ands	r1, r3
 800eace:	4291      	cmp	r1, r2
 800ead0:	4680      	mov	r8, r0
 800ead2:	d944      	bls.n	800eb5e <_strtod_l+0xa7e>
 800ead4:	ee18 2a90 	vmov	r2, s17
 800ead8:	4b78      	ldr	r3, [pc, #480]	; (800ecbc <_strtod_l+0xbdc>)
 800eada:	429a      	cmp	r2, r3
 800eadc:	d104      	bne.n	800eae8 <_strtod_l+0xa08>
 800eade:	ee18 3a10 	vmov	r3, s16
 800eae2:	3301      	adds	r3, #1
 800eae4:	f43f ad40 	beq.w	800e568 <_strtod_l+0x488>
 800eae8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ecbc <_strtod_l+0xbdc>
 800eaec:	f04f 38ff 	mov.w	r8, #4294967295
 800eaf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 ff5e 	bl	800f9b4 <_Bfree>
 800eaf8:	9905      	ldr	r1, [sp, #20]
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 ff5a 	bl	800f9b4 <_Bfree>
 800eb00:	4659      	mov	r1, fp
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 ff56 	bl	800f9b4 <_Bfree>
 800eb08:	4629      	mov	r1, r5
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 ff52 	bl	800f9b4 <_Bfree>
 800eb10:	e609      	b.n	800e726 <_strtod_l+0x646>
 800eb12:	f1b8 0f01 	cmp.w	r8, #1
 800eb16:	d103      	bne.n	800eb20 <_strtod_l+0xa40>
 800eb18:	f1b9 0f00 	cmp.w	r9, #0
 800eb1c:	f43f ad95 	beq.w	800e64a <_strtod_l+0x56a>
 800eb20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ec78 <_strtod_l+0xb98>
 800eb24:	4f60      	ldr	r7, [pc, #384]	; (800eca8 <_strtod_l+0xbc8>)
 800eb26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb2a:	2600      	movs	r6, #0
 800eb2c:	e7ae      	b.n	800ea8c <_strtod_l+0x9ac>
 800eb2e:	4f5f      	ldr	r7, [pc, #380]	; (800ecac <_strtod_l+0xbcc>)
 800eb30:	2600      	movs	r6, #0
 800eb32:	e7a7      	b.n	800ea84 <_strtod_l+0x9a4>
 800eb34:	4b5d      	ldr	r3, [pc, #372]	; (800ecac <_strtod_l+0xbcc>)
 800eb36:	4630      	mov	r0, r6
 800eb38:	4639      	mov	r1, r7
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f7f1 fd74 	bl	8000628 <__aeabi_dmul>
 800eb40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb42:	4606      	mov	r6, r0
 800eb44:	460f      	mov	r7, r1
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d09c      	beq.n	800ea84 <_strtod_l+0x9a4>
 800eb4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eb4e:	e79d      	b.n	800ea8c <_strtod_l+0x9ac>
 800eb50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ec80 <_strtod_l+0xba0>
 800eb54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb58:	ec57 6b17 	vmov	r6, r7, d7
 800eb5c:	e796      	b.n	800ea8c <_strtod_l+0x9ac>
 800eb5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	46ca      	mov	sl, r9
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1c2      	bne.n	800eaf0 <_strtod_l+0xa10>
 800eb6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb70:	0d1b      	lsrs	r3, r3, #20
 800eb72:	051b      	lsls	r3, r3, #20
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d1bb      	bne.n	800eaf0 <_strtod_l+0xa10>
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f7f2 f8b4 	bl	8000ce8 <__aeabi_d2lz>
 800eb80:	f7f1 fd24 	bl	80005cc <__aeabi_l2d>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 fb94 	bl	80002b8 <__aeabi_dsub>
 800eb90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb96:	ea43 0308 	orr.w	r3, r3, r8
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	460f      	mov	r7, r1
 800eba0:	d054      	beq.n	800ec4c <_strtod_l+0xb6c>
 800eba2:	a339      	add	r3, pc, #228	; (adr r3, 800ec88 <_strtod_l+0xba8>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	f7f1 ffb0 	bl	8000b0c <__aeabi_dcmplt>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	f47f ace5 	bne.w	800e57c <_strtod_l+0x49c>
 800ebb2:	a337      	add	r3, pc, #220	; (adr r3, 800ec90 <_strtod_l+0xbb0>)
 800ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb8:	4630      	mov	r0, r6
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7f1 ffc4 	bl	8000b48 <__aeabi_dcmpgt>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d095      	beq.n	800eaf0 <_strtod_l+0xa10>
 800ebc4:	e4da      	b.n	800e57c <_strtod_l+0x49c>
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	b333      	cbz	r3, 800ec18 <_strtod_l+0xb38>
 800ebca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ebd0:	d822      	bhi.n	800ec18 <_strtod_l+0xb38>
 800ebd2:	a331      	add	r3, pc, #196	; (adr r3, 800ec98 <_strtod_l+0xbb8>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	4630      	mov	r0, r6
 800ebda:	4639      	mov	r1, r7
 800ebdc:	f7f1 ffa0 	bl	8000b20 <__aeabi_dcmple>
 800ebe0:	b1a0      	cbz	r0, 800ec0c <_strtod_l+0xb2c>
 800ebe2:	4639      	mov	r1, r7
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7f1 fff7 	bl	8000bd8 <__aeabi_d2uiz>
 800ebea:	2801      	cmp	r0, #1
 800ebec:	bf38      	it	cc
 800ebee:	2001      	movcc	r0, #1
 800ebf0:	f7f1 fca0 	bl	8000534 <__aeabi_ui2d>
 800ebf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	460f      	mov	r7, r1
 800ebfa:	bb23      	cbnz	r3, 800ec46 <_strtod_l+0xb66>
 800ebfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec00:	9010      	str	r0, [sp, #64]	; 0x40
 800ec02:	9311      	str	r3, [sp, #68]	; 0x44
 800ec04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ec0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ec14:	1a9b      	subs	r3, r3, r2
 800ec16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ec1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec20:	eef0 0a68 	vmov.f32	s1, s17
 800ec24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ec28:	f001 f9f0 	bl	801000c <__ulp>
 800ec2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ec30:	ec53 2b10 	vmov	r2, r3, d0
 800ec34:	f7f1 fcf8 	bl	8000628 <__aeabi_dmul>
 800ec38:	ec53 2b18 	vmov	r2, r3, d8
 800ec3c:	f7f1 fb3e 	bl	80002bc <__adddf3>
 800ec40:	4680      	mov	r8, r0
 800ec42:	4689      	mov	r9, r1
 800ec44:	e78d      	b.n	800eb62 <_strtod_l+0xa82>
 800ec46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ec4a:	e7db      	b.n	800ec04 <_strtod_l+0xb24>
 800ec4c:	a314      	add	r3, pc, #80	; (adr r3, 800eca0 <_strtod_l+0xbc0>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	f7f1 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 800ec56:	e7b3      	b.n	800ebc0 <_strtod_l+0xae0>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ec5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	f7ff ba7c 	b.w	800e15e <_strtod_l+0x7e>
 800ec66:	2a65      	cmp	r2, #101	; 0x65
 800ec68:	f43f ab75 	beq.w	800e356 <_strtod_l+0x276>
 800ec6c:	2a45      	cmp	r2, #69	; 0x45
 800ec6e:	f43f ab72 	beq.w	800e356 <_strtod_l+0x276>
 800ec72:	2301      	movs	r3, #1
 800ec74:	f7ff bbaa 	b.w	800e3cc <_strtod_l+0x2ec>
 800ec78:	00000000 	.word	0x00000000
 800ec7c:	bff00000 	.word	0xbff00000
 800ec80:	00000000 	.word	0x00000000
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	94a03595 	.word	0x94a03595
 800ec8c:	3fdfffff 	.word	0x3fdfffff
 800ec90:	35afe535 	.word	0x35afe535
 800ec94:	3fe00000 	.word	0x3fe00000
 800ec98:	ffc00000 	.word	0xffc00000
 800ec9c:	41dfffff 	.word	0x41dfffff
 800eca0:	94a03595 	.word	0x94a03595
 800eca4:	3fcfffff 	.word	0x3fcfffff
 800eca8:	3ff00000 	.word	0x3ff00000
 800ecac:	3fe00000 	.word	0x3fe00000
 800ecb0:	7ff00000 	.word	0x7ff00000
 800ecb4:	7fe00000 	.word	0x7fe00000
 800ecb8:	7c9fffff 	.word	0x7c9fffff
 800ecbc:	7fefffff 	.word	0x7fefffff

0800ecc0 <strtod>:
 800ecc0:	460a      	mov	r2, r1
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	4802      	ldr	r0, [pc, #8]	; (800ecd0 <strtod+0x10>)
 800ecc6:	4b03      	ldr	r3, [pc, #12]	; (800ecd4 <strtod+0x14>)
 800ecc8:	6800      	ldr	r0, [r0, #0]
 800ecca:	f7ff ba09 	b.w	800e0e0 <_strtod_l>
 800ecce:	bf00      	nop
 800ecd0:	20000348 	.word	0x20000348
 800ecd4:	20000190 	.word	0x20000190

0800ecd8 <std>:
 800ecd8:	2300      	movs	r3, #0
 800ecda:	b510      	push	{r4, lr}
 800ecdc:	4604      	mov	r4, r0
 800ecde:	e9c0 3300 	strd	r3, r3, [r0]
 800ece2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ece6:	6083      	str	r3, [r0, #8]
 800ece8:	8181      	strh	r1, [r0, #12]
 800ecea:	6643      	str	r3, [r0, #100]	; 0x64
 800ecec:	81c2      	strh	r2, [r0, #14]
 800ecee:	6183      	str	r3, [r0, #24]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	2208      	movs	r2, #8
 800ecf4:	305c      	adds	r0, #92	; 0x5c
 800ecf6:	f000 f952 	bl	800ef9e <memset>
 800ecfa:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <std+0x58>)
 800ecfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <std+0x5c>)
 800ed00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed02:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <std+0x60>)
 800ed04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed06:	4b0d      	ldr	r3, [pc, #52]	; (800ed3c <std+0x64>)
 800ed08:	6323      	str	r3, [r4, #48]	; 0x30
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <std+0x68>)
 800ed0c:	6224      	str	r4, [r4, #32]
 800ed0e:	429c      	cmp	r4, r3
 800ed10:	d006      	beq.n	800ed20 <std+0x48>
 800ed12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ed16:	4294      	cmp	r4, r2
 800ed18:	d002      	beq.n	800ed20 <std+0x48>
 800ed1a:	33d0      	adds	r3, #208	; 0xd0
 800ed1c:	429c      	cmp	r4, r3
 800ed1e:	d105      	bne.n	800ed2c <std+0x54>
 800ed20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed28:	f000 ba2a 	b.w	800f180 <__retarget_lock_init_recursive>
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	bf00      	nop
 800ed30:	0800eef5 	.word	0x0800eef5
 800ed34:	0800ef1b 	.word	0x0800ef1b
 800ed38:	0800ef53 	.word	0x0800ef53
 800ed3c:	0800ef77 	.word	0x0800ef77
 800ed40:	20002c84 	.word	0x20002c84

0800ed44 <stdio_exit_handler>:
 800ed44:	4a02      	ldr	r2, [pc, #8]	; (800ed50 <stdio_exit_handler+0xc>)
 800ed46:	4903      	ldr	r1, [pc, #12]	; (800ed54 <stdio_exit_handler+0x10>)
 800ed48:	4803      	ldr	r0, [pc, #12]	; (800ed58 <stdio_exit_handler+0x14>)
 800ed4a:	f000 b869 	b.w	800ee20 <_fwalk_sglue>
 800ed4e:	bf00      	nop
 800ed50:	20000184 	.word	0x20000184
 800ed54:	08010fd5 	.word	0x08010fd5
 800ed58:	200002fc 	.word	0x200002fc

0800ed5c <cleanup_stdio>:
 800ed5c:	6841      	ldr	r1, [r0, #4]
 800ed5e:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <cleanup_stdio+0x34>)
 800ed60:	4299      	cmp	r1, r3
 800ed62:	b510      	push	{r4, lr}
 800ed64:	4604      	mov	r4, r0
 800ed66:	d001      	beq.n	800ed6c <cleanup_stdio+0x10>
 800ed68:	f002 f934 	bl	8010fd4 <_fflush_r>
 800ed6c:	68a1      	ldr	r1, [r4, #8]
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <cleanup_stdio+0x38>)
 800ed70:	4299      	cmp	r1, r3
 800ed72:	d002      	beq.n	800ed7a <cleanup_stdio+0x1e>
 800ed74:	4620      	mov	r0, r4
 800ed76:	f002 f92d 	bl	8010fd4 <_fflush_r>
 800ed7a:	68e1      	ldr	r1, [r4, #12]
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <cleanup_stdio+0x3c>)
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	d004      	beq.n	800ed8c <cleanup_stdio+0x30>
 800ed82:	4620      	mov	r0, r4
 800ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed88:	f002 b924 	b.w	8010fd4 <_fflush_r>
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	20002c84 	.word	0x20002c84
 800ed94:	20002cec 	.word	0x20002cec
 800ed98:	20002d54 	.word	0x20002d54

0800ed9c <global_stdio_init.part.0>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	4b0b      	ldr	r3, [pc, #44]	; (800edcc <global_stdio_init.part.0+0x30>)
 800eda0:	4c0b      	ldr	r4, [pc, #44]	; (800edd0 <global_stdio_init.part.0+0x34>)
 800eda2:	4a0c      	ldr	r2, [pc, #48]	; (800edd4 <global_stdio_init.part.0+0x38>)
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	4620      	mov	r0, r4
 800eda8:	2200      	movs	r2, #0
 800edaa:	2104      	movs	r1, #4
 800edac:	f7ff ff94 	bl	800ecd8 <std>
 800edb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800edb4:	2201      	movs	r2, #1
 800edb6:	2109      	movs	r1, #9
 800edb8:	f7ff ff8e 	bl	800ecd8 <std>
 800edbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800edc0:	2202      	movs	r2, #2
 800edc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc6:	2112      	movs	r1, #18
 800edc8:	f7ff bf86 	b.w	800ecd8 <std>
 800edcc:	20002dbc 	.word	0x20002dbc
 800edd0:	20002c84 	.word	0x20002c84
 800edd4:	0800ed45 	.word	0x0800ed45

0800edd8 <__sfp_lock_acquire>:
 800edd8:	4801      	ldr	r0, [pc, #4]	; (800ede0 <__sfp_lock_acquire+0x8>)
 800edda:	f000 b9d2 	b.w	800f182 <__retarget_lock_acquire_recursive>
 800edde:	bf00      	nop
 800ede0:	20002dc5 	.word	0x20002dc5

0800ede4 <__sfp_lock_release>:
 800ede4:	4801      	ldr	r0, [pc, #4]	; (800edec <__sfp_lock_release+0x8>)
 800ede6:	f000 b9cd 	b.w	800f184 <__retarget_lock_release_recursive>
 800edea:	bf00      	nop
 800edec:	20002dc5 	.word	0x20002dc5

0800edf0 <__sinit>:
 800edf0:	b510      	push	{r4, lr}
 800edf2:	4604      	mov	r4, r0
 800edf4:	f7ff fff0 	bl	800edd8 <__sfp_lock_acquire>
 800edf8:	6a23      	ldr	r3, [r4, #32]
 800edfa:	b11b      	cbz	r3, 800ee04 <__sinit+0x14>
 800edfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee00:	f7ff bff0 	b.w	800ede4 <__sfp_lock_release>
 800ee04:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <__sinit+0x28>)
 800ee06:	6223      	str	r3, [r4, #32]
 800ee08:	4b04      	ldr	r3, [pc, #16]	; (800ee1c <__sinit+0x2c>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1f5      	bne.n	800edfc <__sinit+0xc>
 800ee10:	f7ff ffc4 	bl	800ed9c <global_stdio_init.part.0>
 800ee14:	e7f2      	b.n	800edfc <__sinit+0xc>
 800ee16:	bf00      	nop
 800ee18:	0800ed5d 	.word	0x0800ed5d
 800ee1c:	20002dbc 	.word	0x20002dbc

0800ee20 <_fwalk_sglue>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4607      	mov	r7, r0
 800ee26:	4688      	mov	r8, r1
 800ee28:	4614      	mov	r4, r2
 800ee2a:	2600      	movs	r6, #0
 800ee2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee30:	f1b9 0901 	subs.w	r9, r9, #1
 800ee34:	d505      	bpl.n	800ee42 <_fwalk_sglue+0x22>
 800ee36:	6824      	ldr	r4, [r4, #0]
 800ee38:	2c00      	cmp	r4, #0
 800ee3a:	d1f7      	bne.n	800ee2c <_fwalk_sglue+0xc>
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d907      	bls.n	800ee58 <_fwalk_sglue+0x38>
 800ee48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	d003      	beq.n	800ee58 <_fwalk_sglue+0x38>
 800ee50:	4629      	mov	r1, r5
 800ee52:	4638      	mov	r0, r7
 800ee54:	47c0      	blx	r8
 800ee56:	4306      	orrs	r6, r0
 800ee58:	3568      	adds	r5, #104	; 0x68
 800ee5a:	e7e9      	b.n	800ee30 <_fwalk_sglue+0x10>

0800ee5c <siprintf>:
 800ee5c:	b40e      	push	{r1, r2, r3}
 800ee5e:	b500      	push	{lr}
 800ee60:	b09c      	sub	sp, #112	; 0x70
 800ee62:	ab1d      	add	r3, sp, #116	; 0x74
 800ee64:	9002      	str	r0, [sp, #8]
 800ee66:	9006      	str	r0, [sp, #24]
 800ee68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee6c:	4809      	ldr	r0, [pc, #36]	; (800ee94 <siprintf+0x38>)
 800ee6e:	9107      	str	r1, [sp, #28]
 800ee70:	9104      	str	r1, [sp, #16]
 800ee72:	4909      	ldr	r1, [pc, #36]	; (800ee98 <siprintf+0x3c>)
 800ee74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee78:	9105      	str	r1, [sp, #20]
 800ee7a:	6800      	ldr	r0, [r0, #0]
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	a902      	add	r1, sp, #8
 800ee80:	f001 fa74 	bl	801036c <_svfiprintf_r>
 800ee84:	9b02      	ldr	r3, [sp, #8]
 800ee86:	2200      	movs	r2, #0
 800ee88:	701a      	strb	r2, [r3, #0]
 800ee8a:	b01c      	add	sp, #112	; 0x70
 800ee8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee90:	b003      	add	sp, #12
 800ee92:	4770      	bx	lr
 800ee94:	20000348 	.word	0x20000348
 800ee98:	ffff0208 	.word	0xffff0208

0800ee9c <siscanf>:
 800ee9c:	b40e      	push	{r1, r2, r3}
 800ee9e:	b510      	push	{r4, lr}
 800eea0:	b09f      	sub	sp, #124	; 0x7c
 800eea2:	ac21      	add	r4, sp, #132	; 0x84
 800eea4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800eea8:	f854 2b04 	ldr.w	r2, [r4], #4
 800eeac:	9201      	str	r2, [sp, #4]
 800eeae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eeb2:	9004      	str	r0, [sp, #16]
 800eeb4:	9008      	str	r0, [sp, #32]
 800eeb6:	f7f1 f99d 	bl	80001f4 <strlen>
 800eeba:	4b0c      	ldr	r3, [pc, #48]	; (800eeec <siscanf+0x50>)
 800eebc:	9005      	str	r0, [sp, #20]
 800eebe:	9009      	str	r0, [sp, #36]	; 0x24
 800eec0:	930d      	str	r3, [sp, #52]	; 0x34
 800eec2:	480b      	ldr	r0, [pc, #44]	; (800eef0 <siscanf+0x54>)
 800eec4:	9a01      	ldr	r2, [sp, #4]
 800eec6:	6800      	ldr	r0, [r0, #0]
 800eec8:	9403      	str	r4, [sp, #12]
 800eeca:	2300      	movs	r3, #0
 800eecc:	9311      	str	r3, [sp, #68]	; 0x44
 800eece:	9316      	str	r3, [sp, #88]	; 0x58
 800eed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eed4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eed8:	a904      	add	r1, sp, #16
 800eeda:	4623      	mov	r3, r4
 800eedc:	f001 fb9e 	bl	801061c <__ssvfiscanf_r>
 800eee0:	b01f      	add	sp, #124	; 0x7c
 800eee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eee6:	b003      	add	sp, #12
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	0800ef17 	.word	0x0800ef17
 800eef0:	20000348 	.word	0x20000348

0800eef4 <__sread>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	460c      	mov	r4, r1
 800eef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eefc:	f000 f8e2 	bl	800f0c4 <_read_r>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	bfab      	itete	ge
 800ef04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef06:	89a3      	ldrhlt	r3, [r4, #12]
 800ef08:	181b      	addge	r3, r3, r0
 800ef0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef0e:	bfac      	ite	ge
 800ef10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef12:	81a3      	strhlt	r3, [r4, #12]
 800ef14:	bd10      	pop	{r4, pc}

0800ef16 <__seofread>:
 800ef16:	2000      	movs	r0, #0
 800ef18:	4770      	bx	lr

0800ef1a <__swrite>:
 800ef1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1e:	461f      	mov	r7, r3
 800ef20:	898b      	ldrh	r3, [r1, #12]
 800ef22:	05db      	lsls	r3, r3, #23
 800ef24:	4605      	mov	r5, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	4616      	mov	r6, r2
 800ef2a:	d505      	bpl.n	800ef38 <__swrite+0x1e>
 800ef2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef30:	2302      	movs	r3, #2
 800ef32:	2200      	movs	r2, #0
 800ef34:	f000 f8b4 	bl	800f0a0 <_lseek_r>
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef42:	81a3      	strh	r3, [r4, #12]
 800ef44:	4632      	mov	r2, r6
 800ef46:	463b      	mov	r3, r7
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4e:	f000 b8db 	b.w	800f108 <_write_r>

0800ef52 <__sseek>:
 800ef52:	b510      	push	{r4, lr}
 800ef54:	460c      	mov	r4, r1
 800ef56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef5a:	f000 f8a1 	bl	800f0a0 <_lseek_r>
 800ef5e:	1c43      	adds	r3, r0, #1
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	bf15      	itete	ne
 800ef64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef6e:	81a3      	strheq	r3, [r4, #12]
 800ef70:	bf18      	it	ne
 800ef72:	81a3      	strhne	r3, [r4, #12]
 800ef74:	bd10      	pop	{r4, pc}

0800ef76 <__sclose>:
 800ef76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7a:	f000 b82b 	b.w	800efd4 <_close_r>

0800ef7e <memcmp>:
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	3901      	subs	r1, #1
 800ef82:	4402      	add	r2, r0
 800ef84:	4290      	cmp	r0, r2
 800ef86:	d101      	bne.n	800ef8c <memcmp+0xe>
 800ef88:	2000      	movs	r0, #0
 800ef8a:	e005      	b.n	800ef98 <memcmp+0x1a>
 800ef8c:	7803      	ldrb	r3, [r0, #0]
 800ef8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	d001      	beq.n	800ef9a <memcmp+0x1c>
 800ef96:	1b18      	subs	r0, r3, r4
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	e7f2      	b.n	800ef84 <memcmp+0x6>

0800ef9e <memset>:
 800ef9e:	4402      	add	r2, r0
 800efa0:	4603      	mov	r3, r0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d100      	bne.n	800efa8 <memset+0xa>
 800efa6:	4770      	bx	lr
 800efa8:	f803 1b01 	strb.w	r1, [r3], #1
 800efac:	e7f9      	b.n	800efa2 <memset+0x4>

0800efae <strncmp>:
 800efae:	b510      	push	{r4, lr}
 800efb0:	b16a      	cbz	r2, 800efce <strncmp+0x20>
 800efb2:	3901      	subs	r1, #1
 800efb4:	1884      	adds	r4, r0, r2
 800efb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d103      	bne.n	800efca <strncmp+0x1c>
 800efc2:	42a0      	cmp	r0, r4
 800efc4:	d001      	beq.n	800efca <strncmp+0x1c>
 800efc6:	2a00      	cmp	r2, #0
 800efc8:	d1f5      	bne.n	800efb6 <strncmp+0x8>
 800efca:	1ad0      	subs	r0, r2, r3
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	4610      	mov	r0, r2
 800efd0:	e7fc      	b.n	800efcc <strncmp+0x1e>
	...

0800efd4 <_close_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d06      	ldr	r5, [pc, #24]	; (800eff0 <_close_r+0x1c>)
 800efd8:	2300      	movs	r3, #0
 800efda:	4604      	mov	r4, r0
 800efdc:	4608      	mov	r0, r1
 800efde:	602b      	str	r3, [r5, #0]
 800efe0:	f7f6 f847 	bl	8005072 <_close>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	d102      	bne.n	800efee <_close_r+0x1a>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	b103      	cbz	r3, 800efee <_close_r+0x1a>
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	20002dc0 	.word	0x20002dc0

0800eff4 <_reclaim_reent>:
 800eff4:	4b29      	ldr	r3, [pc, #164]	; (800f09c <_reclaim_reent+0xa8>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4283      	cmp	r3, r0
 800effa:	b570      	push	{r4, r5, r6, lr}
 800effc:	4604      	mov	r4, r0
 800effe:	d04b      	beq.n	800f098 <_reclaim_reent+0xa4>
 800f000:	69c3      	ldr	r3, [r0, #28]
 800f002:	b143      	cbz	r3, 800f016 <_reclaim_reent+0x22>
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d144      	bne.n	800f094 <_reclaim_reent+0xa0>
 800f00a:	69e3      	ldr	r3, [r4, #28]
 800f00c:	6819      	ldr	r1, [r3, #0]
 800f00e:	b111      	cbz	r1, 800f016 <_reclaim_reent+0x22>
 800f010:	4620      	mov	r0, r4
 800f012:	f000 f8d9 	bl	800f1c8 <_free_r>
 800f016:	6961      	ldr	r1, [r4, #20]
 800f018:	b111      	cbz	r1, 800f020 <_reclaim_reent+0x2c>
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 f8d4 	bl	800f1c8 <_free_r>
 800f020:	69e1      	ldr	r1, [r4, #28]
 800f022:	b111      	cbz	r1, 800f02a <_reclaim_reent+0x36>
 800f024:	4620      	mov	r0, r4
 800f026:	f000 f8cf 	bl	800f1c8 <_free_r>
 800f02a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f02c:	b111      	cbz	r1, 800f034 <_reclaim_reent+0x40>
 800f02e:	4620      	mov	r0, r4
 800f030:	f000 f8ca 	bl	800f1c8 <_free_r>
 800f034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f036:	b111      	cbz	r1, 800f03e <_reclaim_reent+0x4a>
 800f038:	4620      	mov	r0, r4
 800f03a:	f000 f8c5 	bl	800f1c8 <_free_r>
 800f03e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f040:	b111      	cbz	r1, 800f048 <_reclaim_reent+0x54>
 800f042:	4620      	mov	r0, r4
 800f044:	f000 f8c0 	bl	800f1c8 <_free_r>
 800f048:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f04a:	b111      	cbz	r1, 800f052 <_reclaim_reent+0x5e>
 800f04c:	4620      	mov	r0, r4
 800f04e:	f000 f8bb 	bl	800f1c8 <_free_r>
 800f052:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f054:	b111      	cbz	r1, 800f05c <_reclaim_reent+0x68>
 800f056:	4620      	mov	r0, r4
 800f058:	f000 f8b6 	bl	800f1c8 <_free_r>
 800f05c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f05e:	b111      	cbz	r1, 800f066 <_reclaim_reent+0x72>
 800f060:	4620      	mov	r0, r4
 800f062:	f000 f8b1 	bl	800f1c8 <_free_r>
 800f066:	6a23      	ldr	r3, [r4, #32]
 800f068:	b1b3      	cbz	r3, 800f098 <_reclaim_reent+0xa4>
 800f06a:	4620      	mov	r0, r4
 800f06c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f070:	4718      	bx	r3
 800f072:	5949      	ldr	r1, [r1, r5]
 800f074:	b941      	cbnz	r1, 800f088 <_reclaim_reent+0x94>
 800f076:	3504      	adds	r5, #4
 800f078:	69e3      	ldr	r3, [r4, #28]
 800f07a:	2d80      	cmp	r5, #128	; 0x80
 800f07c:	68d9      	ldr	r1, [r3, #12]
 800f07e:	d1f8      	bne.n	800f072 <_reclaim_reent+0x7e>
 800f080:	4620      	mov	r0, r4
 800f082:	f000 f8a1 	bl	800f1c8 <_free_r>
 800f086:	e7c0      	b.n	800f00a <_reclaim_reent+0x16>
 800f088:	680e      	ldr	r6, [r1, #0]
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 f89c 	bl	800f1c8 <_free_r>
 800f090:	4631      	mov	r1, r6
 800f092:	e7ef      	b.n	800f074 <_reclaim_reent+0x80>
 800f094:	2500      	movs	r5, #0
 800f096:	e7ef      	b.n	800f078 <_reclaim_reent+0x84>
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	bf00      	nop
 800f09c:	20000348 	.word	0x20000348

0800f0a0 <_lseek_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d07      	ldr	r5, [pc, #28]	; (800f0c0 <_lseek_r+0x20>)
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	4608      	mov	r0, r1
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	602a      	str	r2, [r5, #0]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	f7f6 f806 	bl	80050c0 <_lseek>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d102      	bne.n	800f0be <_lseek_r+0x1e>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	b103      	cbz	r3, 800f0be <_lseek_r+0x1e>
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	20002dc0 	.word	0x20002dc0

0800f0c4 <_read_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d07      	ldr	r5, [pc, #28]	; (800f0e4 <_read_r+0x20>)
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	602a      	str	r2, [r5, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f7f5 ff94 	bl	8005000 <_read>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_read_r+0x1e>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_read_r+0x1e>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	20002dc0 	.word	0x20002dc0

0800f0e8 <_sbrk_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4d06      	ldr	r5, [pc, #24]	; (800f104 <_sbrk_r+0x1c>)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	602b      	str	r3, [r5, #0]
 800f0f4:	f7f5 fff2 	bl	80050dc <_sbrk>
 800f0f8:	1c43      	adds	r3, r0, #1
 800f0fa:	d102      	bne.n	800f102 <_sbrk_r+0x1a>
 800f0fc:	682b      	ldr	r3, [r5, #0]
 800f0fe:	b103      	cbz	r3, 800f102 <_sbrk_r+0x1a>
 800f100:	6023      	str	r3, [r4, #0]
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	20002dc0 	.word	0x20002dc0

0800f108 <_write_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4d07      	ldr	r5, [pc, #28]	; (800f128 <_write_r+0x20>)
 800f10c:	4604      	mov	r4, r0
 800f10e:	4608      	mov	r0, r1
 800f110:	4611      	mov	r1, r2
 800f112:	2200      	movs	r2, #0
 800f114:	602a      	str	r2, [r5, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	f7f5 ff8f 	bl	800503a <_write>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d102      	bne.n	800f126 <_write_r+0x1e>
 800f120:	682b      	ldr	r3, [r5, #0]
 800f122:	b103      	cbz	r3, 800f126 <_write_r+0x1e>
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	bd38      	pop	{r3, r4, r5, pc}
 800f128:	20002dc0 	.word	0x20002dc0

0800f12c <__errno>:
 800f12c:	4b01      	ldr	r3, [pc, #4]	; (800f134 <__errno+0x8>)
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20000348 	.word	0x20000348

0800f138 <__libc_init_array>:
 800f138:	b570      	push	{r4, r5, r6, lr}
 800f13a:	4d0d      	ldr	r5, [pc, #52]	; (800f170 <__libc_init_array+0x38>)
 800f13c:	4c0d      	ldr	r4, [pc, #52]	; (800f174 <__libc_init_array+0x3c>)
 800f13e:	1b64      	subs	r4, r4, r5
 800f140:	10a4      	asrs	r4, r4, #2
 800f142:	2600      	movs	r6, #0
 800f144:	42a6      	cmp	r6, r4
 800f146:	d109      	bne.n	800f15c <__libc_init_array+0x24>
 800f148:	4d0b      	ldr	r5, [pc, #44]	; (800f178 <__libc_init_array+0x40>)
 800f14a:	4c0c      	ldr	r4, [pc, #48]	; (800f17c <__libc_init_array+0x44>)
 800f14c:	f002 fbde 	bl	801190c <_init>
 800f150:	1b64      	subs	r4, r4, r5
 800f152:	10a4      	asrs	r4, r4, #2
 800f154:	2600      	movs	r6, #0
 800f156:	42a6      	cmp	r6, r4
 800f158:	d105      	bne.n	800f166 <__libc_init_array+0x2e>
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f160:	4798      	blx	r3
 800f162:	3601      	adds	r6, #1
 800f164:	e7ee      	b.n	800f144 <__libc_init_array+0xc>
 800f166:	f855 3b04 	ldr.w	r3, [r5], #4
 800f16a:	4798      	blx	r3
 800f16c:	3601      	adds	r6, #1
 800f16e:	e7f2      	b.n	800f156 <__libc_init_array+0x1e>
 800f170:	08011f68 	.word	0x08011f68
 800f174:	08011f68 	.word	0x08011f68
 800f178:	08011f68 	.word	0x08011f68
 800f17c:	08011f6c 	.word	0x08011f6c

0800f180 <__retarget_lock_init_recursive>:
 800f180:	4770      	bx	lr

0800f182 <__retarget_lock_acquire_recursive>:
 800f182:	4770      	bx	lr

0800f184 <__retarget_lock_release_recursive>:
 800f184:	4770      	bx	lr

0800f186 <strcpy>:
 800f186:	4603      	mov	r3, r0
 800f188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f18c:	f803 2b01 	strb.w	r2, [r3], #1
 800f190:	2a00      	cmp	r2, #0
 800f192:	d1f9      	bne.n	800f188 <strcpy+0x2>
 800f194:	4770      	bx	lr

0800f196 <memcpy>:
 800f196:	440a      	add	r2, r1
 800f198:	4291      	cmp	r1, r2
 800f19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f19e:	d100      	bne.n	800f1a2 <memcpy+0xc>
 800f1a0:	4770      	bx	lr
 800f1a2:	b510      	push	{r4, lr}
 800f1a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1ac:	4291      	cmp	r1, r2
 800f1ae:	d1f9      	bne.n	800f1a4 <memcpy+0xe>
 800f1b0:	bd10      	pop	{r4, pc}
 800f1b2:	0000      	movs	r0, r0
 800f1b4:	0000      	movs	r0, r0
	...

0800f1b8 <nan>:
 800f1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f1c0 <nan+0x8>
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	00000000 	.word	0x00000000
 800f1c4:	7ff80000 	.word	0x7ff80000

0800f1c8 <_free_r>:
 800f1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d044      	beq.n	800f258 <_free_r+0x90>
 800f1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d2:	9001      	str	r0, [sp, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f1da:	bfb8      	it	lt
 800f1dc:	18e4      	addlt	r4, r4, r3
 800f1de:	f7fe ff1d 	bl	800e01c <__malloc_lock>
 800f1e2:	4a1e      	ldr	r2, [pc, #120]	; (800f25c <_free_r+0x94>)
 800f1e4:	9801      	ldr	r0, [sp, #4]
 800f1e6:	6813      	ldr	r3, [r2, #0]
 800f1e8:	b933      	cbnz	r3, 800f1f8 <_free_r+0x30>
 800f1ea:	6063      	str	r3, [r4, #4]
 800f1ec:	6014      	str	r4, [r2, #0]
 800f1ee:	b003      	add	sp, #12
 800f1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f4:	f7fe bf18 	b.w	800e028 <__malloc_unlock>
 800f1f8:	42a3      	cmp	r3, r4
 800f1fa:	d908      	bls.n	800f20e <_free_r+0x46>
 800f1fc:	6825      	ldr	r5, [r4, #0]
 800f1fe:	1961      	adds	r1, r4, r5
 800f200:	428b      	cmp	r3, r1
 800f202:	bf01      	itttt	eq
 800f204:	6819      	ldreq	r1, [r3, #0]
 800f206:	685b      	ldreq	r3, [r3, #4]
 800f208:	1949      	addeq	r1, r1, r5
 800f20a:	6021      	streq	r1, [r4, #0]
 800f20c:	e7ed      	b.n	800f1ea <_free_r+0x22>
 800f20e:	461a      	mov	r2, r3
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	b10b      	cbz	r3, 800f218 <_free_r+0x50>
 800f214:	42a3      	cmp	r3, r4
 800f216:	d9fa      	bls.n	800f20e <_free_r+0x46>
 800f218:	6811      	ldr	r1, [r2, #0]
 800f21a:	1855      	adds	r5, r2, r1
 800f21c:	42a5      	cmp	r5, r4
 800f21e:	d10b      	bne.n	800f238 <_free_r+0x70>
 800f220:	6824      	ldr	r4, [r4, #0]
 800f222:	4421      	add	r1, r4
 800f224:	1854      	adds	r4, r2, r1
 800f226:	42a3      	cmp	r3, r4
 800f228:	6011      	str	r1, [r2, #0]
 800f22a:	d1e0      	bne.n	800f1ee <_free_r+0x26>
 800f22c:	681c      	ldr	r4, [r3, #0]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	6053      	str	r3, [r2, #4]
 800f232:	440c      	add	r4, r1
 800f234:	6014      	str	r4, [r2, #0]
 800f236:	e7da      	b.n	800f1ee <_free_r+0x26>
 800f238:	d902      	bls.n	800f240 <_free_r+0x78>
 800f23a:	230c      	movs	r3, #12
 800f23c:	6003      	str	r3, [r0, #0]
 800f23e:	e7d6      	b.n	800f1ee <_free_r+0x26>
 800f240:	6825      	ldr	r5, [r4, #0]
 800f242:	1961      	adds	r1, r4, r5
 800f244:	428b      	cmp	r3, r1
 800f246:	bf04      	itt	eq
 800f248:	6819      	ldreq	r1, [r3, #0]
 800f24a:	685b      	ldreq	r3, [r3, #4]
 800f24c:	6063      	str	r3, [r4, #4]
 800f24e:	bf04      	itt	eq
 800f250:	1949      	addeq	r1, r1, r5
 800f252:	6021      	streq	r1, [r4, #0]
 800f254:	6054      	str	r4, [r2, #4]
 800f256:	e7ca      	b.n	800f1ee <_free_r+0x26>
 800f258:	b003      	add	sp, #12
 800f25a:	bd30      	pop	{r4, r5, pc}
 800f25c:	20002c7c 	.word	0x20002c7c

0800f260 <rshift>:
 800f260:	6903      	ldr	r3, [r0, #16]
 800f262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f26a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f26e:	f100 0414 	add.w	r4, r0, #20
 800f272:	dd45      	ble.n	800f300 <rshift+0xa0>
 800f274:	f011 011f 	ands.w	r1, r1, #31
 800f278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f27c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f280:	d10c      	bne.n	800f29c <rshift+0x3c>
 800f282:	f100 0710 	add.w	r7, r0, #16
 800f286:	4629      	mov	r1, r5
 800f288:	42b1      	cmp	r1, r6
 800f28a:	d334      	bcc.n	800f2f6 <rshift+0x96>
 800f28c:	1a9b      	subs	r3, r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	1eea      	subs	r2, r5, #3
 800f292:	4296      	cmp	r6, r2
 800f294:	bf38      	it	cc
 800f296:	2300      	movcc	r3, #0
 800f298:	4423      	add	r3, r4
 800f29a:	e015      	b.n	800f2c8 <rshift+0x68>
 800f29c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f2a0:	f1c1 0820 	rsb	r8, r1, #32
 800f2a4:	40cf      	lsrs	r7, r1
 800f2a6:	f105 0e04 	add.w	lr, r5, #4
 800f2aa:	46a1      	mov	r9, r4
 800f2ac:	4576      	cmp	r6, lr
 800f2ae:	46f4      	mov	ip, lr
 800f2b0:	d815      	bhi.n	800f2de <rshift+0x7e>
 800f2b2:	1a9a      	subs	r2, r3, r2
 800f2b4:	0092      	lsls	r2, r2, #2
 800f2b6:	3a04      	subs	r2, #4
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	42ae      	cmp	r6, r5
 800f2bc:	bf38      	it	cc
 800f2be:	2200      	movcc	r2, #0
 800f2c0:	18a3      	adds	r3, r4, r2
 800f2c2:	50a7      	str	r7, [r4, r2]
 800f2c4:	b107      	cbz	r7, 800f2c8 <rshift+0x68>
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	1b1a      	subs	r2, r3, r4
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f2d0:	bf08      	it	eq
 800f2d2:	2300      	moveq	r3, #0
 800f2d4:	6102      	str	r2, [r0, #16]
 800f2d6:	bf08      	it	eq
 800f2d8:	6143      	streq	r3, [r0, #20]
 800f2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2de:	f8dc c000 	ldr.w	ip, [ip]
 800f2e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800f2e6:	ea4c 0707 	orr.w	r7, ip, r7
 800f2ea:	f849 7b04 	str.w	r7, [r9], #4
 800f2ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2f2:	40cf      	lsrs	r7, r1
 800f2f4:	e7da      	b.n	800f2ac <rshift+0x4c>
 800f2f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800f2fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800f2fe:	e7c3      	b.n	800f288 <rshift+0x28>
 800f300:	4623      	mov	r3, r4
 800f302:	e7e1      	b.n	800f2c8 <rshift+0x68>

0800f304 <__hexdig_fun>:
 800f304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f308:	2b09      	cmp	r3, #9
 800f30a:	d802      	bhi.n	800f312 <__hexdig_fun+0xe>
 800f30c:	3820      	subs	r0, #32
 800f30e:	b2c0      	uxtb	r0, r0
 800f310:	4770      	bx	lr
 800f312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f316:	2b05      	cmp	r3, #5
 800f318:	d801      	bhi.n	800f31e <__hexdig_fun+0x1a>
 800f31a:	3847      	subs	r0, #71	; 0x47
 800f31c:	e7f7      	b.n	800f30e <__hexdig_fun+0xa>
 800f31e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f322:	2b05      	cmp	r3, #5
 800f324:	d801      	bhi.n	800f32a <__hexdig_fun+0x26>
 800f326:	3827      	subs	r0, #39	; 0x27
 800f328:	e7f1      	b.n	800f30e <__hexdig_fun+0xa>
 800f32a:	2000      	movs	r0, #0
 800f32c:	4770      	bx	lr
	...

0800f330 <__gethex>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	4617      	mov	r7, r2
 800f336:	680a      	ldr	r2, [r1, #0]
 800f338:	b085      	sub	sp, #20
 800f33a:	f102 0b02 	add.w	fp, r2, #2
 800f33e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f342:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f346:	4681      	mov	r9, r0
 800f348:	468a      	mov	sl, r1
 800f34a:	9302      	str	r3, [sp, #8]
 800f34c:	32fe      	adds	r2, #254	; 0xfe
 800f34e:	eb02 030b 	add.w	r3, r2, fp
 800f352:	46d8      	mov	r8, fp
 800f354:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f358:	9301      	str	r3, [sp, #4]
 800f35a:	2830      	cmp	r0, #48	; 0x30
 800f35c:	d0f7      	beq.n	800f34e <__gethex+0x1e>
 800f35e:	f7ff ffd1 	bl	800f304 <__hexdig_fun>
 800f362:	4604      	mov	r4, r0
 800f364:	2800      	cmp	r0, #0
 800f366:	d138      	bne.n	800f3da <__gethex+0xaa>
 800f368:	49a7      	ldr	r1, [pc, #668]	; (800f608 <__gethex+0x2d8>)
 800f36a:	2201      	movs	r2, #1
 800f36c:	4640      	mov	r0, r8
 800f36e:	f7ff fe1e 	bl	800efae <strncmp>
 800f372:	4606      	mov	r6, r0
 800f374:	2800      	cmp	r0, #0
 800f376:	d169      	bne.n	800f44c <__gethex+0x11c>
 800f378:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f37c:	465d      	mov	r5, fp
 800f37e:	f7ff ffc1 	bl	800f304 <__hexdig_fun>
 800f382:	2800      	cmp	r0, #0
 800f384:	d064      	beq.n	800f450 <__gethex+0x120>
 800f386:	465a      	mov	r2, fp
 800f388:	7810      	ldrb	r0, [r2, #0]
 800f38a:	2830      	cmp	r0, #48	; 0x30
 800f38c:	4690      	mov	r8, r2
 800f38e:	f102 0201 	add.w	r2, r2, #1
 800f392:	d0f9      	beq.n	800f388 <__gethex+0x58>
 800f394:	f7ff ffb6 	bl	800f304 <__hexdig_fun>
 800f398:	2301      	movs	r3, #1
 800f39a:	fab0 f480 	clz	r4, r0
 800f39e:	0964      	lsrs	r4, r4, #5
 800f3a0:	465e      	mov	r6, fp
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	4642      	mov	r2, r8
 800f3a6:	4615      	mov	r5, r2
 800f3a8:	3201      	adds	r2, #1
 800f3aa:	7828      	ldrb	r0, [r5, #0]
 800f3ac:	f7ff ffaa 	bl	800f304 <__hexdig_fun>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d1f8      	bne.n	800f3a6 <__gethex+0x76>
 800f3b4:	4994      	ldr	r1, [pc, #592]	; (800f608 <__gethex+0x2d8>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f7ff fdf8 	bl	800efae <strncmp>
 800f3be:	b978      	cbnz	r0, 800f3e0 <__gethex+0xb0>
 800f3c0:	b946      	cbnz	r6, 800f3d4 <__gethex+0xa4>
 800f3c2:	1c6e      	adds	r6, r5, #1
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	4615      	mov	r5, r2
 800f3c8:	3201      	adds	r2, #1
 800f3ca:	7828      	ldrb	r0, [r5, #0]
 800f3cc:	f7ff ff9a 	bl	800f304 <__hexdig_fun>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d1f8      	bne.n	800f3c6 <__gethex+0x96>
 800f3d4:	1b73      	subs	r3, r6, r5
 800f3d6:	009e      	lsls	r6, r3, #2
 800f3d8:	e004      	b.n	800f3e4 <__gethex+0xb4>
 800f3da:	2400      	movs	r4, #0
 800f3dc:	4626      	mov	r6, r4
 800f3de:	e7e1      	b.n	800f3a4 <__gethex+0x74>
 800f3e0:	2e00      	cmp	r6, #0
 800f3e2:	d1f7      	bne.n	800f3d4 <__gethex+0xa4>
 800f3e4:	782b      	ldrb	r3, [r5, #0]
 800f3e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f3ea:	2b50      	cmp	r3, #80	; 0x50
 800f3ec:	d13d      	bne.n	800f46a <__gethex+0x13a>
 800f3ee:	786b      	ldrb	r3, [r5, #1]
 800f3f0:	2b2b      	cmp	r3, #43	; 0x2b
 800f3f2:	d02f      	beq.n	800f454 <__gethex+0x124>
 800f3f4:	2b2d      	cmp	r3, #45	; 0x2d
 800f3f6:	d031      	beq.n	800f45c <__gethex+0x12c>
 800f3f8:	1c69      	adds	r1, r5, #1
 800f3fa:	f04f 0b00 	mov.w	fp, #0
 800f3fe:	7808      	ldrb	r0, [r1, #0]
 800f400:	f7ff ff80 	bl	800f304 <__hexdig_fun>
 800f404:	1e42      	subs	r2, r0, #1
 800f406:	b2d2      	uxtb	r2, r2
 800f408:	2a18      	cmp	r2, #24
 800f40a:	d82e      	bhi.n	800f46a <__gethex+0x13a>
 800f40c:	f1a0 0210 	sub.w	r2, r0, #16
 800f410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f414:	f7ff ff76 	bl	800f304 <__hexdig_fun>
 800f418:	f100 3cff 	add.w	ip, r0, #4294967295
 800f41c:	fa5f fc8c 	uxtb.w	ip, ip
 800f420:	f1bc 0f18 	cmp.w	ip, #24
 800f424:	d91d      	bls.n	800f462 <__gethex+0x132>
 800f426:	f1bb 0f00 	cmp.w	fp, #0
 800f42a:	d000      	beq.n	800f42e <__gethex+0xfe>
 800f42c:	4252      	negs	r2, r2
 800f42e:	4416      	add	r6, r2
 800f430:	f8ca 1000 	str.w	r1, [sl]
 800f434:	b1dc      	cbz	r4, 800f46e <__gethex+0x13e>
 800f436:	9b01      	ldr	r3, [sp, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	bf14      	ite	ne
 800f43c:	f04f 0800 	movne.w	r8, #0
 800f440:	f04f 0806 	moveq.w	r8, #6
 800f444:	4640      	mov	r0, r8
 800f446:	b005      	add	sp, #20
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	4645      	mov	r5, r8
 800f44e:	4626      	mov	r6, r4
 800f450:	2401      	movs	r4, #1
 800f452:	e7c7      	b.n	800f3e4 <__gethex+0xb4>
 800f454:	f04f 0b00 	mov.w	fp, #0
 800f458:	1ca9      	adds	r1, r5, #2
 800f45a:	e7d0      	b.n	800f3fe <__gethex+0xce>
 800f45c:	f04f 0b01 	mov.w	fp, #1
 800f460:	e7fa      	b.n	800f458 <__gethex+0x128>
 800f462:	230a      	movs	r3, #10
 800f464:	fb03 0002 	mla	r0, r3, r2, r0
 800f468:	e7d0      	b.n	800f40c <__gethex+0xdc>
 800f46a:	4629      	mov	r1, r5
 800f46c:	e7e0      	b.n	800f430 <__gethex+0x100>
 800f46e:	eba5 0308 	sub.w	r3, r5, r8
 800f472:	3b01      	subs	r3, #1
 800f474:	4621      	mov	r1, r4
 800f476:	2b07      	cmp	r3, #7
 800f478:	dc0a      	bgt.n	800f490 <__gethex+0x160>
 800f47a:	4648      	mov	r0, r9
 800f47c:	f000 fa5a 	bl	800f934 <_Balloc>
 800f480:	4604      	mov	r4, r0
 800f482:	b940      	cbnz	r0, 800f496 <__gethex+0x166>
 800f484:	4b61      	ldr	r3, [pc, #388]	; (800f60c <__gethex+0x2dc>)
 800f486:	4602      	mov	r2, r0
 800f488:	21e4      	movs	r1, #228	; 0xe4
 800f48a:	4861      	ldr	r0, [pc, #388]	; (800f610 <__gethex+0x2e0>)
 800f48c:	f001 fe58 	bl	8011140 <__assert_func>
 800f490:	3101      	adds	r1, #1
 800f492:	105b      	asrs	r3, r3, #1
 800f494:	e7ef      	b.n	800f476 <__gethex+0x146>
 800f496:	f100 0a14 	add.w	sl, r0, #20
 800f49a:	2300      	movs	r3, #0
 800f49c:	495a      	ldr	r1, [pc, #360]	; (800f608 <__gethex+0x2d8>)
 800f49e:	f8cd a004 	str.w	sl, [sp, #4]
 800f4a2:	469b      	mov	fp, r3
 800f4a4:	45a8      	cmp	r8, r5
 800f4a6:	d342      	bcc.n	800f52e <__gethex+0x1fe>
 800f4a8:	9801      	ldr	r0, [sp, #4]
 800f4aa:	f840 bb04 	str.w	fp, [r0], #4
 800f4ae:	eba0 000a 	sub.w	r0, r0, sl
 800f4b2:	1080      	asrs	r0, r0, #2
 800f4b4:	6120      	str	r0, [r4, #16]
 800f4b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f4ba:	4658      	mov	r0, fp
 800f4bc:	f000 fb2c 	bl	800fb18 <__hi0bits>
 800f4c0:	683d      	ldr	r5, [r7, #0]
 800f4c2:	eba8 0000 	sub.w	r0, r8, r0
 800f4c6:	42a8      	cmp	r0, r5
 800f4c8:	dd59      	ble.n	800f57e <__gethex+0x24e>
 800f4ca:	eba0 0805 	sub.w	r8, r0, r5
 800f4ce:	4641      	mov	r1, r8
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f000 febb 	bl	801024c <__any_on>
 800f4d6:	4683      	mov	fp, r0
 800f4d8:	b1b8      	cbz	r0, 800f50a <__gethex+0x1da>
 800f4da:	f108 33ff 	add.w	r3, r8, #4294967295
 800f4de:	1159      	asrs	r1, r3, #5
 800f4e0:	f003 021f 	and.w	r2, r3, #31
 800f4e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f4e8:	f04f 0b01 	mov.w	fp, #1
 800f4ec:	fa0b f202 	lsl.w	r2, fp, r2
 800f4f0:	420a      	tst	r2, r1
 800f4f2:	d00a      	beq.n	800f50a <__gethex+0x1da>
 800f4f4:	455b      	cmp	r3, fp
 800f4f6:	dd06      	ble.n	800f506 <__gethex+0x1d6>
 800f4f8:	f1a8 0102 	sub.w	r1, r8, #2
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fea5 	bl	801024c <__any_on>
 800f502:	2800      	cmp	r0, #0
 800f504:	d138      	bne.n	800f578 <__gethex+0x248>
 800f506:	f04f 0b02 	mov.w	fp, #2
 800f50a:	4641      	mov	r1, r8
 800f50c:	4620      	mov	r0, r4
 800f50e:	f7ff fea7 	bl	800f260 <rshift>
 800f512:	4446      	add	r6, r8
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	42b3      	cmp	r3, r6
 800f518:	da41      	bge.n	800f59e <__gethex+0x26e>
 800f51a:	4621      	mov	r1, r4
 800f51c:	4648      	mov	r0, r9
 800f51e:	f000 fa49 	bl	800f9b4 <_Bfree>
 800f522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f524:	2300      	movs	r3, #0
 800f526:	6013      	str	r3, [r2, #0]
 800f528:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f52c:	e78a      	b.n	800f444 <__gethex+0x114>
 800f52e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f532:	2a2e      	cmp	r2, #46	; 0x2e
 800f534:	d014      	beq.n	800f560 <__gethex+0x230>
 800f536:	2b20      	cmp	r3, #32
 800f538:	d106      	bne.n	800f548 <__gethex+0x218>
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	f843 bb04 	str.w	fp, [r3], #4
 800f540:	f04f 0b00 	mov.w	fp, #0
 800f544:	9301      	str	r3, [sp, #4]
 800f546:	465b      	mov	r3, fp
 800f548:	7828      	ldrb	r0, [r5, #0]
 800f54a:	9303      	str	r3, [sp, #12]
 800f54c:	f7ff feda 	bl	800f304 <__hexdig_fun>
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	f000 000f 	and.w	r0, r0, #15
 800f556:	4098      	lsls	r0, r3
 800f558:	ea4b 0b00 	orr.w	fp, fp, r0
 800f55c:	3304      	adds	r3, #4
 800f55e:	e7a1      	b.n	800f4a4 <__gethex+0x174>
 800f560:	45a8      	cmp	r8, r5
 800f562:	d8e8      	bhi.n	800f536 <__gethex+0x206>
 800f564:	2201      	movs	r2, #1
 800f566:	4628      	mov	r0, r5
 800f568:	9303      	str	r3, [sp, #12]
 800f56a:	f7ff fd20 	bl	800efae <strncmp>
 800f56e:	4926      	ldr	r1, [pc, #152]	; (800f608 <__gethex+0x2d8>)
 800f570:	9b03      	ldr	r3, [sp, #12]
 800f572:	2800      	cmp	r0, #0
 800f574:	d1df      	bne.n	800f536 <__gethex+0x206>
 800f576:	e795      	b.n	800f4a4 <__gethex+0x174>
 800f578:	f04f 0b03 	mov.w	fp, #3
 800f57c:	e7c5      	b.n	800f50a <__gethex+0x1da>
 800f57e:	da0b      	bge.n	800f598 <__gethex+0x268>
 800f580:	eba5 0800 	sub.w	r8, r5, r0
 800f584:	4621      	mov	r1, r4
 800f586:	4642      	mov	r2, r8
 800f588:	4648      	mov	r0, r9
 800f58a:	f000 fc2d 	bl	800fde8 <__lshift>
 800f58e:	eba6 0608 	sub.w	r6, r6, r8
 800f592:	4604      	mov	r4, r0
 800f594:	f100 0a14 	add.w	sl, r0, #20
 800f598:	f04f 0b00 	mov.w	fp, #0
 800f59c:	e7ba      	b.n	800f514 <__gethex+0x1e4>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	42b3      	cmp	r3, r6
 800f5a2:	dd73      	ble.n	800f68c <__gethex+0x35c>
 800f5a4:	1b9e      	subs	r6, r3, r6
 800f5a6:	42b5      	cmp	r5, r6
 800f5a8:	dc34      	bgt.n	800f614 <__gethex+0x2e4>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d023      	beq.n	800f5f8 <__gethex+0x2c8>
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	d025      	beq.n	800f600 <__gethex+0x2d0>
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d115      	bne.n	800f5e4 <__gethex+0x2b4>
 800f5b8:	42b5      	cmp	r5, r6
 800f5ba:	d113      	bne.n	800f5e4 <__gethex+0x2b4>
 800f5bc:	2d01      	cmp	r5, #1
 800f5be:	d10b      	bne.n	800f5d8 <__gethex+0x2a8>
 800f5c0:	9a02      	ldr	r2, [sp, #8]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6013      	str	r3, [r2, #0]
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	f8ca 3000 	str.w	r3, [sl]
 800f5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f5d4:	601c      	str	r4, [r3, #0]
 800f5d6:	e735      	b.n	800f444 <__gethex+0x114>
 800f5d8:	1e69      	subs	r1, r5, #1
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f000 fe36 	bl	801024c <__any_on>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d1ed      	bne.n	800f5c0 <__gethex+0x290>
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	f000 f9e4 	bl	800f9b4 <_Bfree>
 800f5ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f5f6:	e725      	b.n	800f444 <__gethex+0x114>
 800f5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1f2      	bne.n	800f5e4 <__gethex+0x2b4>
 800f5fe:	e7df      	b.n	800f5c0 <__gethex+0x290>
 800f600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1dc      	bne.n	800f5c0 <__gethex+0x290>
 800f606:	e7ed      	b.n	800f5e4 <__gethex+0x2b4>
 800f608:	08011b88 	.word	0x08011b88
 800f60c:	08011cf1 	.word	0x08011cf1
 800f610:	08011d02 	.word	0x08011d02
 800f614:	f106 38ff 	add.w	r8, r6, #4294967295
 800f618:	f1bb 0f00 	cmp.w	fp, #0
 800f61c:	d133      	bne.n	800f686 <__gethex+0x356>
 800f61e:	f1b8 0f00 	cmp.w	r8, #0
 800f622:	d004      	beq.n	800f62e <__gethex+0x2fe>
 800f624:	4641      	mov	r1, r8
 800f626:	4620      	mov	r0, r4
 800f628:	f000 fe10 	bl	801024c <__any_on>
 800f62c:	4683      	mov	fp, r0
 800f62e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f632:	2301      	movs	r3, #1
 800f634:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f638:	f008 081f 	and.w	r8, r8, #31
 800f63c:	fa03 f308 	lsl.w	r3, r3, r8
 800f640:	4213      	tst	r3, r2
 800f642:	4631      	mov	r1, r6
 800f644:	4620      	mov	r0, r4
 800f646:	bf18      	it	ne
 800f648:	f04b 0b02 	orrne.w	fp, fp, #2
 800f64c:	1bad      	subs	r5, r5, r6
 800f64e:	f7ff fe07 	bl	800f260 <rshift>
 800f652:	687e      	ldr	r6, [r7, #4]
 800f654:	f04f 0802 	mov.w	r8, #2
 800f658:	f1bb 0f00 	cmp.w	fp, #0
 800f65c:	d04a      	beq.n	800f6f4 <__gethex+0x3c4>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b02      	cmp	r3, #2
 800f662:	d016      	beq.n	800f692 <__gethex+0x362>
 800f664:	2b03      	cmp	r3, #3
 800f666:	d018      	beq.n	800f69a <__gethex+0x36a>
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d109      	bne.n	800f680 <__gethex+0x350>
 800f66c:	f01b 0f02 	tst.w	fp, #2
 800f670:	d006      	beq.n	800f680 <__gethex+0x350>
 800f672:	f8da 3000 	ldr.w	r3, [sl]
 800f676:	ea4b 0b03 	orr.w	fp, fp, r3
 800f67a:	f01b 0f01 	tst.w	fp, #1
 800f67e:	d10f      	bne.n	800f6a0 <__gethex+0x370>
 800f680:	f048 0810 	orr.w	r8, r8, #16
 800f684:	e036      	b.n	800f6f4 <__gethex+0x3c4>
 800f686:	f04f 0b01 	mov.w	fp, #1
 800f68a:	e7d0      	b.n	800f62e <__gethex+0x2fe>
 800f68c:	f04f 0801 	mov.w	r8, #1
 800f690:	e7e2      	b.n	800f658 <__gethex+0x328>
 800f692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f694:	f1c3 0301 	rsb	r3, r3, #1
 800f698:	930f      	str	r3, [sp, #60]	; 0x3c
 800f69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d0ef      	beq.n	800f680 <__gethex+0x350>
 800f6a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f6a4:	f104 0214 	add.w	r2, r4, #20
 800f6a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	4694      	mov	ip, r2
 800f6b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800f6ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f6be:	d01e      	beq.n	800f6fe <__gethex+0x3ce>
 800f6c0:	3101      	adds	r1, #1
 800f6c2:	f8cc 1000 	str.w	r1, [ip]
 800f6c6:	f1b8 0f02 	cmp.w	r8, #2
 800f6ca:	f104 0214 	add.w	r2, r4, #20
 800f6ce:	d13d      	bne.n	800f74c <__gethex+0x41c>
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	3b01      	subs	r3, #1
 800f6d4:	42ab      	cmp	r3, r5
 800f6d6:	d10b      	bne.n	800f6f0 <__gethex+0x3c0>
 800f6d8:	1169      	asrs	r1, r5, #5
 800f6da:	2301      	movs	r3, #1
 800f6dc:	f005 051f 	and.w	r5, r5, #31
 800f6e0:	fa03 f505 	lsl.w	r5, r3, r5
 800f6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6e8:	421d      	tst	r5, r3
 800f6ea:	bf18      	it	ne
 800f6ec:	f04f 0801 	movne.w	r8, #1
 800f6f0:	f048 0820 	orr.w	r8, r8, #32
 800f6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6f6:	601c      	str	r4, [r3, #0]
 800f6f8:	9b02      	ldr	r3, [sp, #8]
 800f6fa:	601e      	str	r6, [r3, #0]
 800f6fc:	e6a2      	b.n	800f444 <__gethex+0x114>
 800f6fe:	4290      	cmp	r0, r2
 800f700:	f842 3c04 	str.w	r3, [r2, #-4]
 800f704:	d8d6      	bhi.n	800f6b4 <__gethex+0x384>
 800f706:	68a2      	ldr	r2, [r4, #8]
 800f708:	4593      	cmp	fp, r2
 800f70a:	db17      	blt.n	800f73c <__gethex+0x40c>
 800f70c:	6861      	ldr	r1, [r4, #4]
 800f70e:	4648      	mov	r0, r9
 800f710:	3101      	adds	r1, #1
 800f712:	f000 f90f 	bl	800f934 <_Balloc>
 800f716:	4682      	mov	sl, r0
 800f718:	b918      	cbnz	r0, 800f722 <__gethex+0x3f2>
 800f71a:	4b1b      	ldr	r3, [pc, #108]	; (800f788 <__gethex+0x458>)
 800f71c:	4602      	mov	r2, r0
 800f71e:	2184      	movs	r1, #132	; 0x84
 800f720:	e6b3      	b.n	800f48a <__gethex+0x15a>
 800f722:	6922      	ldr	r2, [r4, #16]
 800f724:	3202      	adds	r2, #2
 800f726:	f104 010c 	add.w	r1, r4, #12
 800f72a:	0092      	lsls	r2, r2, #2
 800f72c:	300c      	adds	r0, #12
 800f72e:	f7ff fd32 	bl	800f196 <memcpy>
 800f732:	4621      	mov	r1, r4
 800f734:	4648      	mov	r0, r9
 800f736:	f000 f93d 	bl	800f9b4 <_Bfree>
 800f73a:	4654      	mov	r4, sl
 800f73c:	6922      	ldr	r2, [r4, #16]
 800f73e:	1c51      	adds	r1, r2, #1
 800f740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f744:	6121      	str	r1, [r4, #16]
 800f746:	2101      	movs	r1, #1
 800f748:	6151      	str	r1, [r2, #20]
 800f74a:	e7bc      	b.n	800f6c6 <__gethex+0x396>
 800f74c:	6921      	ldr	r1, [r4, #16]
 800f74e:	4559      	cmp	r1, fp
 800f750:	dd0b      	ble.n	800f76a <__gethex+0x43a>
 800f752:	2101      	movs	r1, #1
 800f754:	4620      	mov	r0, r4
 800f756:	f7ff fd83 	bl	800f260 <rshift>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	3601      	adds	r6, #1
 800f75e:	42b3      	cmp	r3, r6
 800f760:	f6ff aedb 	blt.w	800f51a <__gethex+0x1ea>
 800f764:	f04f 0801 	mov.w	r8, #1
 800f768:	e7c2      	b.n	800f6f0 <__gethex+0x3c0>
 800f76a:	f015 051f 	ands.w	r5, r5, #31
 800f76e:	d0f9      	beq.n	800f764 <__gethex+0x434>
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	441a      	add	r2, r3
 800f774:	f1c5 0520 	rsb	r5, r5, #32
 800f778:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f77c:	f000 f9cc 	bl	800fb18 <__hi0bits>
 800f780:	42a8      	cmp	r0, r5
 800f782:	dbe6      	blt.n	800f752 <__gethex+0x422>
 800f784:	e7ee      	b.n	800f764 <__gethex+0x434>
 800f786:	bf00      	nop
 800f788:	08011cf1 	.word	0x08011cf1

0800f78c <L_shift>:
 800f78c:	f1c2 0208 	rsb	r2, r2, #8
 800f790:	0092      	lsls	r2, r2, #2
 800f792:	b570      	push	{r4, r5, r6, lr}
 800f794:	f1c2 0620 	rsb	r6, r2, #32
 800f798:	6843      	ldr	r3, [r0, #4]
 800f79a:	6804      	ldr	r4, [r0, #0]
 800f79c:	fa03 f506 	lsl.w	r5, r3, r6
 800f7a0:	432c      	orrs	r4, r5
 800f7a2:	40d3      	lsrs	r3, r2
 800f7a4:	6004      	str	r4, [r0, #0]
 800f7a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f7aa:	4288      	cmp	r0, r1
 800f7ac:	d3f4      	bcc.n	800f798 <L_shift+0xc>
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}

0800f7b0 <__match>:
 800f7b0:	b530      	push	{r4, r5, lr}
 800f7b2:	6803      	ldr	r3, [r0, #0]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7ba:	b914      	cbnz	r4, 800f7c2 <__match+0x12>
 800f7bc:	6003      	str	r3, [r0, #0]
 800f7be:	2001      	movs	r0, #1
 800f7c0:	bd30      	pop	{r4, r5, pc}
 800f7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f7ca:	2d19      	cmp	r5, #25
 800f7cc:	bf98      	it	ls
 800f7ce:	3220      	addls	r2, #32
 800f7d0:	42a2      	cmp	r2, r4
 800f7d2:	d0f0      	beq.n	800f7b6 <__match+0x6>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e7f3      	b.n	800f7c0 <__match+0x10>

0800f7d8 <__hexnan>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	680b      	ldr	r3, [r1, #0]
 800f7de:	6801      	ldr	r1, [r0, #0]
 800f7e0:	115e      	asrs	r6, r3, #5
 800f7e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f7e6:	f013 031f 	ands.w	r3, r3, #31
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	bf18      	it	ne
 800f7ee:	3604      	addne	r6, #4
 800f7f0:	2500      	movs	r5, #0
 800f7f2:	1f37      	subs	r7, r6, #4
 800f7f4:	4682      	mov	sl, r0
 800f7f6:	4690      	mov	r8, r2
 800f7f8:	9301      	str	r3, [sp, #4]
 800f7fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f7fe:	46b9      	mov	r9, r7
 800f800:	463c      	mov	r4, r7
 800f802:	9502      	str	r5, [sp, #8]
 800f804:	46ab      	mov	fp, r5
 800f806:	784a      	ldrb	r2, [r1, #1]
 800f808:	1c4b      	adds	r3, r1, #1
 800f80a:	9303      	str	r3, [sp, #12]
 800f80c:	b342      	cbz	r2, 800f860 <__hexnan+0x88>
 800f80e:	4610      	mov	r0, r2
 800f810:	9105      	str	r1, [sp, #20]
 800f812:	9204      	str	r2, [sp, #16]
 800f814:	f7ff fd76 	bl	800f304 <__hexdig_fun>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d14f      	bne.n	800f8bc <__hexnan+0xe4>
 800f81c:	9a04      	ldr	r2, [sp, #16]
 800f81e:	9905      	ldr	r1, [sp, #20]
 800f820:	2a20      	cmp	r2, #32
 800f822:	d818      	bhi.n	800f856 <__hexnan+0x7e>
 800f824:	9b02      	ldr	r3, [sp, #8]
 800f826:	459b      	cmp	fp, r3
 800f828:	dd13      	ble.n	800f852 <__hexnan+0x7a>
 800f82a:	454c      	cmp	r4, r9
 800f82c:	d206      	bcs.n	800f83c <__hexnan+0x64>
 800f82e:	2d07      	cmp	r5, #7
 800f830:	dc04      	bgt.n	800f83c <__hexnan+0x64>
 800f832:	462a      	mov	r2, r5
 800f834:	4649      	mov	r1, r9
 800f836:	4620      	mov	r0, r4
 800f838:	f7ff ffa8 	bl	800f78c <L_shift>
 800f83c:	4544      	cmp	r4, r8
 800f83e:	d950      	bls.n	800f8e2 <__hexnan+0x10a>
 800f840:	2300      	movs	r3, #0
 800f842:	f1a4 0904 	sub.w	r9, r4, #4
 800f846:	f844 3c04 	str.w	r3, [r4, #-4]
 800f84a:	f8cd b008 	str.w	fp, [sp, #8]
 800f84e:	464c      	mov	r4, r9
 800f850:	461d      	mov	r5, r3
 800f852:	9903      	ldr	r1, [sp, #12]
 800f854:	e7d7      	b.n	800f806 <__hexnan+0x2e>
 800f856:	2a29      	cmp	r2, #41	; 0x29
 800f858:	d155      	bne.n	800f906 <__hexnan+0x12e>
 800f85a:	3102      	adds	r1, #2
 800f85c:	f8ca 1000 	str.w	r1, [sl]
 800f860:	f1bb 0f00 	cmp.w	fp, #0
 800f864:	d04f      	beq.n	800f906 <__hexnan+0x12e>
 800f866:	454c      	cmp	r4, r9
 800f868:	d206      	bcs.n	800f878 <__hexnan+0xa0>
 800f86a:	2d07      	cmp	r5, #7
 800f86c:	dc04      	bgt.n	800f878 <__hexnan+0xa0>
 800f86e:	462a      	mov	r2, r5
 800f870:	4649      	mov	r1, r9
 800f872:	4620      	mov	r0, r4
 800f874:	f7ff ff8a 	bl	800f78c <L_shift>
 800f878:	4544      	cmp	r4, r8
 800f87a:	d934      	bls.n	800f8e6 <__hexnan+0x10e>
 800f87c:	f1a8 0204 	sub.w	r2, r8, #4
 800f880:	4623      	mov	r3, r4
 800f882:	f853 1b04 	ldr.w	r1, [r3], #4
 800f886:	f842 1f04 	str.w	r1, [r2, #4]!
 800f88a:	429f      	cmp	r7, r3
 800f88c:	d2f9      	bcs.n	800f882 <__hexnan+0xaa>
 800f88e:	1b3b      	subs	r3, r7, r4
 800f890:	f023 0303 	bic.w	r3, r3, #3
 800f894:	3304      	adds	r3, #4
 800f896:	3e03      	subs	r6, #3
 800f898:	3401      	adds	r4, #1
 800f89a:	42a6      	cmp	r6, r4
 800f89c:	bf38      	it	cc
 800f89e:	2304      	movcc	r3, #4
 800f8a0:	4443      	add	r3, r8
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f843 2b04 	str.w	r2, [r3], #4
 800f8a8:	429f      	cmp	r7, r3
 800f8aa:	d2fb      	bcs.n	800f8a4 <__hexnan+0xcc>
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	b91b      	cbnz	r3, 800f8b8 <__hexnan+0xe0>
 800f8b0:	4547      	cmp	r7, r8
 800f8b2:	d126      	bne.n	800f902 <__hexnan+0x12a>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	603b      	str	r3, [r7, #0]
 800f8b8:	2005      	movs	r0, #5
 800f8ba:	e025      	b.n	800f908 <__hexnan+0x130>
 800f8bc:	3501      	adds	r5, #1
 800f8be:	2d08      	cmp	r5, #8
 800f8c0:	f10b 0b01 	add.w	fp, fp, #1
 800f8c4:	dd06      	ble.n	800f8d4 <__hexnan+0xfc>
 800f8c6:	4544      	cmp	r4, r8
 800f8c8:	d9c3      	bls.n	800f852 <__hexnan+0x7a>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f8d0:	2501      	movs	r5, #1
 800f8d2:	3c04      	subs	r4, #4
 800f8d4:	6822      	ldr	r2, [r4, #0]
 800f8d6:	f000 000f 	and.w	r0, r0, #15
 800f8da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f8de:	6020      	str	r0, [r4, #0]
 800f8e0:	e7b7      	b.n	800f852 <__hexnan+0x7a>
 800f8e2:	2508      	movs	r5, #8
 800f8e4:	e7b5      	b.n	800f852 <__hexnan+0x7a>
 800f8e6:	9b01      	ldr	r3, [sp, #4]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d0df      	beq.n	800f8ac <__hexnan+0xd4>
 800f8ec:	f1c3 0320 	rsb	r3, r3, #32
 800f8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f4:	40da      	lsrs	r2, r3
 800f8f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800f900:	e7d4      	b.n	800f8ac <__hexnan+0xd4>
 800f902:	3f04      	subs	r7, #4
 800f904:	e7d2      	b.n	800f8ac <__hexnan+0xd4>
 800f906:	2004      	movs	r0, #4
 800f908:	b007      	add	sp, #28
 800f90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f90e <__ascii_mbtowc>:
 800f90e:	b082      	sub	sp, #8
 800f910:	b901      	cbnz	r1, 800f914 <__ascii_mbtowc+0x6>
 800f912:	a901      	add	r1, sp, #4
 800f914:	b142      	cbz	r2, 800f928 <__ascii_mbtowc+0x1a>
 800f916:	b14b      	cbz	r3, 800f92c <__ascii_mbtowc+0x1e>
 800f918:	7813      	ldrb	r3, [r2, #0]
 800f91a:	600b      	str	r3, [r1, #0]
 800f91c:	7812      	ldrb	r2, [r2, #0]
 800f91e:	1e10      	subs	r0, r2, #0
 800f920:	bf18      	it	ne
 800f922:	2001      	movne	r0, #1
 800f924:	b002      	add	sp, #8
 800f926:	4770      	bx	lr
 800f928:	4610      	mov	r0, r2
 800f92a:	e7fb      	b.n	800f924 <__ascii_mbtowc+0x16>
 800f92c:	f06f 0001 	mvn.w	r0, #1
 800f930:	e7f8      	b.n	800f924 <__ascii_mbtowc+0x16>
	...

0800f934 <_Balloc>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	69c6      	ldr	r6, [r0, #28]
 800f938:	4604      	mov	r4, r0
 800f93a:	460d      	mov	r5, r1
 800f93c:	b976      	cbnz	r6, 800f95c <_Balloc+0x28>
 800f93e:	2010      	movs	r0, #16
 800f940:	f7fe fabc 	bl	800debc <malloc>
 800f944:	4602      	mov	r2, r0
 800f946:	61e0      	str	r0, [r4, #28]
 800f948:	b920      	cbnz	r0, 800f954 <_Balloc+0x20>
 800f94a:	4b18      	ldr	r3, [pc, #96]	; (800f9ac <_Balloc+0x78>)
 800f94c:	4818      	ldr	r0, [pc, #96]	; (800f9b0 <_Balloc+0x7c>)
 800f94e:	216b      	movs	r1, #107	; 0x6b
 800f950:	f001 fbf6 	bl	8011140 <__assert_func>
 800f954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f958:	6006      	str	r6, [r0, #0]
 800f95a:	60c6      	str	r6, [r0, #12]
 800f95c:	69e6      	ldr	r6, [r4, #28]
 800f95e:	68f3      	ldr	r3, [r6, #12]
 800f960:	b183      	cbz	r3, 800f984 <_Balloc+0x50>
 800f962:	69e3      	ldr	r3, [r4, #28]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f96a:	b9b8      	cbnz	r0, 800f99c <_Balloc+0x68>
 800f96c:	2101      	movs	r1, #1
 800f96e:	fa01 f605 	lsl.w	r6, r1, r5
 800f972:	1d72      	adds	r2, r6, #5
 800f974:	0092      	lsls	r2, r2, #2
 800f976:	4620      	mov	r0, r4
 800f978:	f001 fc00 	bl	801117c <_calloc_r>
 800f97c:	b160      	cbz	r0, 800f998 <_Balloc+0x64>
 800f97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f982:	e00e      	b.n	800f9a2 <_Balloc+0x6e>
 800f984:	2221      	movs	r2, #33	; 0x21
 800f986:	2104      	movs	r1, #4
 800f988:	4620      	mov	r0, r4
 800f98a:	f001 fbf7 	bl	801117c <_calloc_r>
 800f98e:	69e3      	ldr	r3, [r4, #28]
 800f990:	60f0      	str	r0, [r6, #12]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1e4      	bne.n	800f962 <_Balloc+0x2e>
 800f998:	2000      	movs	r0, #0
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	6802      	ldr	r2, [r0, #0]
 800f99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9a8:	e7f7      	b.n	800f99a <_Balloc+0x66>
 800f9aa:	bf00      	nop
 800f9ac:	08011d62 	.word	0x08011d62
 800f9b0:	08011d79 	.word	0x08011d79

0800f9b4 <_Bfree>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	69c6      	ldr	r6, [r0, #28]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b976      	cbnz	r6, 800f9dc <_Bfree+0x28>
 800f9be:	2010      	movs	r0, #16
 800f9c0:	f7fe fa7c 	bl	800debc <malloc>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	61e8      	str	r0, [r5, #28]
 800f9c8:	b920      	cbnz	r0, 800f9d4 <_Bfree+0x20>
 800f9ca:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <_Bfree+0x3c>)
 800f9cc:	4809      	ldr	r0, [pc, #36]	; (800f9f4 <_Bfree+0x40>)
 800f9ce:	218f      	movs	r1, #143	; 0x8f
 800f9d0:	f001 fbb6 	bl	8011140 <__assert_func>
 800f9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9d8:	6006      	str	r6, [r0, #0]
 800f9da:	60c6      	str	r6, [r0, #12]
 800f9dc:	b13c      	cbz	r4, 800f9ee <_Bfree+0x3a>
 800f9de:	69eb      	ldr	r3, [r5, #28]
 800f9e0:	6862      	ldr	r2, [r4, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9e8:	6021      	str	r1, [r4, #0]
 800f9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	08011d62 	.word	0x08011d62
 800f9f4:	08011d79 	.word	0x08011d79

0800f9f8 <__multadd>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	690d      	ldr	r5, [r1, #16]
 800f9fe:	4607      	mov	r7, r0
 800fa00:	460c      	mov	r4, r1
 800fa02:	461e      	mov	r6, r3
 800fa04:	f101 0c14 	add.w	ip, r1, #20
 800fa08:	2000      	movs	r0, #0
 800fa0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0e:	b299      	uxth	r1, r3
 800fa10:	fb02 6101 	mla	r1, r2, r1, r6
 800fa14:	0c1e      	lsrs	r6, r3, #16
 800fa16:	0c0b      	lsrs	r3, r1, #16
 800fa18:	fb02 3306 	mla	r3, r2, r6, r3
 800fa1c:	b289      	uxth	r1, r1
 800fa1e:	3001      	adds	r0, #1
 800fa20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa24:	4285      	cmp	r5, r0
 800fa26:	f84c 1b04 	str.w	r1, [ip], #4
 800fa2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa2e:	dcec      	bgt.n	800fa0a <__multadd+0x12>
 800fa30:	b30e      	cbz	r6, 800fa76 <__multadd+0x7e>
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	42ab      	cmp	r3, r5
 800fa36:	dc19      	bgt.n	800fa6c <__multadd+0x74>
 800fa38:	6861      	ldr	r1, [r4, #4]
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	3101      	adds	r1, #1
 800fa3e:	f7ff ff79 	bl	800f934 <_Balloc>
 800fa42:	4680      	mov	r8, r0
 800fa44:	b928      	cbnz	r0, 800fa52 <__multadd+0x5a>
 800fa46:	4602      	mov	r2, r0
 800fa48:	4b0c      	ldr	r3, [pc, #48]	; (800fa7c <__multadd+0x84>)
 800fa4a:	480d      	ldr	r0, [pc, #52]	; (800fa80 <__multadd+0x88>)
 800fa4c:	21ba      	movs	r1, #186	; 0xba
 800fa4e:	f001 fb77 	bl	8011140 <__assert_func>
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	3202      	adds	r2, #2
 800fa56:	f104 010c 	add.w	r1, r4, #12
 800fa5a:	0092      	lsls	r2, r2, #2
 800fa5c:	300c      	adds	r0, #12
 800fa5e:	f7ff fb9a 	bl	800f196 <memcpy>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4638      	mov	r0, r7
 800fa66:	f7ff ffa5 	bl	800f9b4 <_Bfree>
 800fa6a:	4644      	mov	r4, r8
 800fa6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa70:	3501      	adds	r5, #1
 800fa72:	615e      	str	r6, [r3, #20]
 800fa74:	6125      	str	r5, [r4, #16]
 800fa76:	4620      	mov	r0, r4
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	08011cf1 	.word	0x08011cf1
 800fa80:	08011d79 	.word	0x08011d79

0800fa84 <__s2b>:
 800fa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa88:	460c      	mov	r4, r1
 800fa8a:	4615      	mov	r5, r2
 800fa8c:	461f      	mov	r7, r3
 800fa8e:	2209      	movs	r2, #9
 800fa90:	3308      	adds	r3, #8
 800fa92:	4606      	mov	r6, r0
 800fa94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa98:	2100      	movs	r1, #0
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	db09      	blt.n	800fab4 <__s2b+0x30>
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7ff ff47 	bl	800f934 <_Balloc>
 800faa6:	b940      	cbnz	r0, 800faba <__s2b+0x36>
 800faa8:	4602      	mov	r2, r0
 800faaa:	4b19      	ldr	r3, [pc, #100]	; (800fb10 <__s2b+0x8c>)
 800faac:	4819      	ldr	r0, [pc, #100]	; (800fb14 <__s2b+0x90>)
 800faae:	21d3      	movs	r1, #211	; 0xd3
 800fab0:	f001 fb46 	bl	8011140 <__assert_func>
 800fab4:	0052      	lsls	r2, r2, #1
 800fab6:	3101      	adds	r1, #1
 800fab8:	e7f0      	b.n	800fa9c <__s2b+0x18>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	6143      	str	r3, [r0, #20]
 800fabe:	2d09      	cmp	r5, #9
 800fac0:	f04f 0301 	mov.w	r3, #1
 800fac4:	6103      	str	r3, [r0, #16]
 800fac6:	dd16      	ble.n	800faf6 <__s2b+0x72>
 800fac8:	f104 0909 	add.w	r9, r4, #9
 800facc:	46c8      	mov	r8, r9
 800face:	442c      	add	r4, r5
 800fad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fad4:	4601      	mov	r1, r0
 800fad6:	3b30      	subs	r3, #48	; 0x30
 800fad8:	220a      	movs	r2, #10
 800fada:	4630      	mov	r0, r6
 800fadc:	f7ff ff8c 	bl	800f9f8 <__multadd>
 800fae0:	45a0      	cmp	r8, r4
 800fae2:	d1f5      	bne.n	800fad0 <__s2b+0x4c>
 800fae4:	f1a5 0408 	sub.w	r4, r5, #8
 800fae8:	444c      	add	r4, r9
 800faea:	1b2d      	subs	r5, r5, r4
 800faec:	1963      	adds	r3, r4, r5
 800faee:	42bb      	cmp	r3, r7
 800faf0:	db04      	blt.n	800fafc <__s2b+0x78>
 800faf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf6:	340a      	adds	r4, #10
 800faf8:	2509      	movs	r5, #9
 800fafa:	e7f6      	b.n	800faea <__s2b+0x66>
 800fafc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb00:	4601      	mov	r1, r0
 800fb02:	3b30      	subs	r3, #48	; 0x30
 800fb04:	220a      	movs	r2, #10
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7ff ff76 	bl	800f9f8 <__multadd>
 800fb0c:	e7ee      	b.n	800faec <__s2b+0x68>
 800fb0e:	bf00      	nop
 800fb10:	08011cf1 	.word	0x08011cf1
 800fb14:	08011d79 	.word	0x08011d79

0800fb18 <__hi0bits>:
 800fb18:	0c03      	lsrs	r3, r0, #16
 800fb1a:	041b      	lsls	r3, r3, #16
 800fb1c:	b9d3      	cbnz	r3, 800fb54 <__hi0bits+0x3c>
 800fb1e:	0400      	lsls	r0, r0, #16
 800fb20:	2310      	movs	r3, #16
 800fb22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fb26:	bf04      	itt	eq
 800fb28:	0200      	lsleq	r0, r0, #8
 800fb2a:	3308      	addeq	r3, #8
 800fb2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fb30:	bf04      	itt	eq
 800fb32:	0100      	lsleq	r0, r0, #4
 800fb34:	3304      	addeq	r3, #4
 800fb36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fb3a:	bf04      	itt	eq
 800fb3c:	0080      	lsleq	r0, r0, #2
 800fb3e:	3302      	addeq	r3, #2
 800fb40:	2800      	cmp	r0, #0
 800fb42:	db05      	blt.n	800fb50 <__hi0bits+0x38>
 800fb44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fb48:	f103 0301 	add.w	r3, r3, #1
 800fb4c:	bf08      	it	eq
 800fb4e:	2320      	moveq	r3, #32
 800fb50:	4618      	mov	r0, r3
 800fb52:	4770      	bx	lr
 800fb54:	2300      	movs	r3, #0
 800fb56:	e7e4      	b.n	800fb22 <__hi0bits+0xa>

0800fb58 <__lo0bits>:
 800fb58:	6803      	ldr	r3, [r0, #0]
 800fb5a:	f013 0207 	ands.w	r2, r3, #7
 800fb5e:	d00c      	beq.n	800fb7a <__lo0bits+0x22>
 800fb60:	07d9      	lsls	r1, r3, #31
 800fb62:	d422      	bmi.n	800fbaa <__lo0bits+0x52>
 800fb64:	079a      	lsls	r2, r3, #30
 800fb66:	bf49      	itett	mi
 800fb68:	085b      	lsrmi	r3, r3, #1
 800fb6a:	089b      	lsrpl	r3, r3, #2
 800fb6c:	6003      	strmi	r3, [r0, #0]
 800fb6e:	2201      	movmi	r2, #1
 800fb70:	bf5c      	itt	pl
 800fb72:	6003      	strpl	r3, [r0, #0]
 800fb74:	2202      	movpl	r2, #2
 800fb76:	4610      	mov	r0, r2
 800fb78:	4770      	bx	lr
 800fb7a:	b299      	uxth	r1, r3
 800fb7c:	b909      	cbnz	r1, 800fb82 <__lo0bits+0x2a>
 800fb7e:	0c1b      	lsrs	r3, r3, #16
 800fb80:	2210      	movs	r2, #16
 800fb82:	b2d9      	uxtb	r1, r3
 800fb84:	b909      	cbnz	r1, 800fb8a <__lo0bits+0x32>
 800fb86:	3208      	adds	r2, #8
 800fb88:	0a1b      	lsrs	r3, r3, #8
 800fb8a:	0719      	lsls	r1, r3, #28
 800fb8c:	bf04      	itt	eq
 800fb8e:	091b      	lsreq	r3, r3, #4
 800fb90:	3204      	addeq	r2, #4
 800fb92:	0799      	lsls	r1, r3, #30
 800fb94:	bf04      	itt	eq
 800fb96:	089b      	lsreq	r3, r3, #2
 800fb98:	3202      	addeq	r2, #2
 800fb9a:	07d9      	lsls	r1, r3, #31
 800fb9c:	d403      	bmi.n	800fba6 <__lo0bits+0x4e>
 800fb9e:	085b      	lsrs	r3, r3, #1
 800fba0:	f102 0201 	add.w	r2, r2, #1
 800fba4:	d003      	beq.n	800fbae <__lo0bits+0x56>
 800fba6:	6003      	str	r3, [r0, #0]
 800fba8:	e7e5      	b.n	800fb76 <__lo0bits+0x1e>
 800fbaa:	2200      	movs	r2, #0
 800fbac:	e7e3      	b.n	800fb76 <__lo0bits+0x1e>
 800fbae:	2220      	movs	r2, #32
 800fbb0:	e7e1      	b.n	800fb76 <__lo0bits+0x1e>
	...

0800fbb4 <__i2b>:
 800fbb4:	b510      	push	{r4, lr}
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	2101      	movs	r1, #1
 800fbba:	f7ff febb 	bl	800f934 <_Balloc>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	b928      	cbnz	r0, 800fbce <__i2b+0x1a>
 800fbc2:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <__i2b+0x24>)
 800fbc4:	4805      	ldr	r0, [pc, #20]	; (800fbdc <__i2b+0x28>)
 800fbc6:	f240 1145 	movw	r1, #325	; 0x145
 800fbca:	f001 fab9 	bl	8011140 <__assert_func>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	6144      	str	r4, [r0, #20]
 800fbd2:	6103      	str	r3, [r0, #16]
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	bf00      	nop
 800fbd8:	08011cf1 	.word	0x08011cf1
 800fbdc:	08011d79 	.word	0x08011d79

0800fbe0 <__multiply>:
 800fbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe4:	4691      	mov	r9, r2
 800fbe6:	690a      	ldr	r2, [r1, #16]
 800fbe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	bfb8      	it	lt
 800fbf0:	460b      	movlt	r3, r1
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	bfbc      	itt	lt
 800fbf6:	464c      	movlt	r4, r9
 800fbf8:	4699      	movlt	r9, r3
 800fbfa:	6927      	ldr	r7, [r4, #16]
 800fbfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fc00:	68a3      	ldr	r3, [r4, #8]
 800fc02:	6861      	ldr	r1, [r4, #4]
 800fc04:	eb07 060a 	add.w	r6, r7, sl
 800fc08:	42b3      	cmp	r3, r6
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	bfb8      	it	lt
 800fc0e:	3101      	addlt	r1, #1
 800fc10:	f7ff fe90 	bl	800f934 <_Balloc>
 800fc14:	b930      	cbnz	r0, 800fc24 <__multiply+0x44>
 800fc16:	4602      	mov	r2, r0
 800fc18:	4b44      	ldr	r3, [pc, #272]	; (800fd2c <__multiply+0x14c>)
 800fc1a:	4845      	ldr	r0, [pc, #276]	; (800fd30 <__multiply+0x150>)
 800fc1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fc20:	f001 fa8e 	bl	8011140 <__assert_func>
 800fc24:	f100 0514 	add.w	r5, r0, #20
 800fc28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	2200      	movs	r2, #0
 800fc30:	4543      	cmp	r3, r8
 800fc32:	d321      	bcc.n	800fc78 <__multiply+0x98>
 800fc34:	f104 0314 	add.w	r3, r4, #20
 800fc38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fc3c:	f109 0314 	add.w	r3, r9, #20
 800fc40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fc44:	9202      	str	r2, [sp, #8]
 800fc46:	1b3a      	subs	r2, r7, r4
 800fc48:	3a15      	subs	r2, #21
 800fc4a:	f022 0203 	bic.w	r2, r2, #3
 800fc4e:	3204      	adds	r2, #4
 800fc50:	f104 0115 	add.w	r1, r4, #21
 800fc54:	428f      	cmp	r7, r1
 800fc56:	bf38      	it	cc
 800fc58:	2204      	movcc	r2, #4
 800fc5a:	9201      	str	r2, [sp, #4]
 800fc5c:	9a02      	ldr	r2, [sp, #8]
 800fc5e:	9303      	str	r3, [sp, #12]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d80c      	bhi.n	800fc7e <__multiply+0x9e>
 800fc64:	2e00      	cmp	r6, #0
 800fc66:	dd03      	ble.n	800fc70 <__multiply+0x90>
 800fc68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d05b      	beq.n	800fd28 <__multiply+0x148>
 800fc70:	6106      	str	r6, [r0, #16]
 800fc72:	b005      	add	sp, #20
 800fc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc78:	f843 2b04 	str.w	r2, [r3], #4
 800fc7c:	e7d8      	b.n	800fc30 <__multiply+0x50>
 800fc7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc82:	f1ba 0f00 	cmp.w	sl, #0
 800fc86:	d024      	beq.n	800fcd2 <__multiply+0xf2>
 800fc88:	f104 0e14 	add.w	lr, r4, #20
 800fc8c:	46a9      	mov	r9, r5
 800fc8e:	f04f 0c00 	mov.w	ip, #0
 800fc92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc96:	f8d9 1000 	ldr.w	r1, [r9]
 800fc9a:	fa1f fb82 	uxth.w	fp, r2
 800fc9e:	b289      	uxth	r1, r1
 800fca0:	fb0a 110b 	mla	r1, sl, fp, r1
 800fca4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fca8:	f8d9 2000 	ldr.w	r2, [r9]
 800fcac:	4461      	add	r1, ip
 800fcae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800fcb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fcba:	b289      	uxth	r1, r1
 800fcbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fcc0:	4577      	cmp	r7, lr
 800fcc2:	f849 1b04 	str.w	r1, [r9], #4
 800fcc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcca:	d8e2      	bhi.n	800fc92 <__multiply+0xb2>
 800fccc:	9a01      	ldr	r2, [sp, #4]
 800fcce:	f845 c002 	str.w	ip, [r5, r2]
 800fcd2:	9a03      	ldr	r2, [sp, #12]
 800fcd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	f1b9 0f00 	cmp.w	r9, #0
 800fcde:	d021      	beq.n	800fd24 <__multiply+0x144>
 800fce0:	6829      	ldr	r1, [r5, #0]
 800fce2:	f104 0c14 	add.w	ip, r4, #20
 800fce6:	46ae      	mov	lr, r5
 800fce8:	f04f 0a00 	mov.w	sl, #0
 800fcec:	f8bc b000 	ldrh.w	fp, [ip]
 800fcf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fcf4:	fb09 220b 	mla	r2, r9, fp, r2
 800fcf8:	4452      	add	r2, sl
 800fcfa:	b289      	uxth	r1, r1
 800fcfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fd00:	f84e 1b04 	str.w	r1, [lr], #4
 800fd04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fd08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fd0c:	f8be 1000 	ldrh.w	r1, [lr]
 800fd10:	fb09 110a 	mla	r1, r9, sl, r1
 800fd14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fd18:	4567      	cmp	r7, ip
 800fd1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fd1e:	d8e5      	bhi.n	800fcec <__multiply+0x10c>
 800fd20:	9a01      	ldr	r2, [sp, #4]
 800fd22:	50a9      	str	r1, [r5, r2]
 800fd24:	3504      	adds	r5, #4
 800fd26:	e799      	b.n	800fc5c <__multiply+0x7c>
 800fd28:	3e01      	subs	r6, #1
 800fd2a:	e79b      	b.n	800fc64 <__multiply+0x84>
 800fd2c:	08011cf1 	.word	0x08011cf1
 800fd30:	08011d79 	.word	0x08011d79

0800fd34 <__pow5mult>:
 800fd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd38:	4615      	mov	r5, r2
 800fd3a:	f012 0203 	ands.w	r2, r2, #3
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460f      	mov	r7, r1
 800fd42:	d007      	beq.n	800fd54 <__pow5mult+0x20>
 800fd44:	4c25      	ldr	r4, [pc, #148]	; (800fddc <__pow5mult+0xa8>)
 800fd46:	3a01      	subs	r2, #1
 800fd48:	2300      	movs	r3, #0
 800fd4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd4e:	f7ff fe53 	bl	800f9f8 <__multadd>
 800fd52:	4607      	mov	r7, r0
 800fd54:	10ad      	asrs	r5, r5, #2
 800fd56:	d03d      	beq.n	800fdd4 <__pow5mult+0xa0>
 800fd58:	69f4      	ldr	r4, [r6, #28]
 800fd5a:	b97c      	cbnz	r4, 800fd7c <__pow5mult+0x48>
 800fd5c:	2010      	movs	r0, #16
 800fd5e:	f7fe f8ad 	bl	800debc <malloc>
 800fd62:	4602      	mov	r2, r0
 800fd64:	61f0      	str	r0, [r6, #28]
 800fd66:	b928      	cbnz	r0, 800fd74 <__pow5mult+0x40>
 800fd68:	4b1d      	ldr	r3, [pc, #116]	; (800fde0 <__pow5mult+0xac>)
 800fd6a:	481e      	ldr	r0, [pc, #120]	; (800fde4 <__pow5mult+0xb0>)
 800fd6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fd70:	f001 f9e6 	bl	8011140 <__assert_func>
 800fd74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd78:	6004      	str	r4, [r0, #0]
 800fd7a:	60c4      	str	r4, [r0, #12]
 800fd7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fd80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd84:	b94c      	cbnz	r4, 800fd9a <__pow5mult+0x66>
 800fd86:	f240 2171 	movw	r1, #625	; 0x271
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7ff ff12 	bl	800fbb4 <__i2b>
 800fd90:	2300      	movs	r3, #0
 800fd92:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd96:	4604      	mov	r4, r0
 800fd98:	6003      	str	r3, [r0, #0]
 800fd9a:	f04f 0900 	mov.w	r9, #0
 800fd9e:	07eb      	lsls	r3, r5, #31
 800fda0:	d50a      	bpl.n	800fdb8 <__pow5mult+0x84>
 800fda2:	4639      	mov	r1, r7
 800fda4:	4622      	mov	r2, r4
 800fda6:	4630      	mov	r0, r6
 800fda8:	f7ff ff1a 	bl	800fbe0 <__multiply>
 800fdac:	4639      	mov	r1, r7
 800fdae:	4680      	mov	r8, r0
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7ff fdff 	bl	800f9b4 <_Bfree>
 800fdb6:	4647      	mov	r7, r8
 800fdb8:	106d      	asrs	r5, r5, #1
 800fdba:	d00b      	beq.n	800fdd4 <__pow5mult+0xa0>
 800fdbc:	6820      	ldr	r0, [r4, #0]
 800fdbe:	b938      	cbnz	r0, 800fdd0 <__pow5mult+0x9c>
 800fdc0:	4622      	mov	r2, r4
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7ff ff0b 	bl	800fbe0 <__multiply>
 800fdca:	6020      	str	r0, [r4, #0]
 800fdcc:	f8c0 9000 	str.w	r9, [r0]
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	e7e4      	b.n	800fd9e <__pow5mult+0x6a>
 800fdd4:	4638      	mov	r0, r7
 800fdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdda:	bf00      	nop
 800fddc:	08011ec8 	.word	0x08011ec8
 800fde0:	08011d62 	.word	0x08011d62
 800fde4:	08011d79 	.word	0x08011d79

0800fde8 <__lshift>:
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	460c      	mov	r4, r1
 800fdee:	6849      	ldr	r1, [r1, #4]
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdf6:	68a3      	ldr	r3, [r4, #8]
 800fdf8:	4607      	mov	r7, r0
 800fdfa:	4691      	mov	r9, r2
 800fdfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe00:	f108 0601 	add.w	r6, r8, #1
 800fe04:	42b3      	cmp	r3, r6
 800fe06:	db0b      	blt.n	800fe20 <__lshift+0x38>
 800fe08:	4638      	mov	r0, r7
 800fe0a:	f7ff fd93 	bl	800f934 <_Balloc>
 800fe0e:	4605      	mov	r5, r0
 800fe10:	b948      	cbnz	r0, 800fe26 <__lshift+0x3e>
 800fe12:	4602      	mov	r2, r0
 800fe14:	4b28      	ldr	r3, [pc, #160]	; (800feb8 <__lshift+0xd0>)
 800fe16:	4829      	ldr	r0, [pc, #164]	; (800febc <__lshift+0xd4>)
 800fe18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fe1c:	f001 f990 	bl	8011140 <__assert_func>
 800fe20:	3101      	adds	r1, #1
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	e7ee      	b.n	800fe04 <__lshift+0x1c>
 800fe26:	2300      	movs	r3, #0
 800fe28:	f100 0114 	add.w	r1, r0, #20
 800fe2c:	f100 0210 	add.w	r2, r0, #16
 800fe30:	4618      	mov	r0, r3
 800fe32:	4553      	cmp	r3, sl
 800fe34:	db33      	blt.n	800fe9e <__lshift+0xb6>
 800fe36:	6920      	ldr	r0, [r4, #16]
 800fe38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe3c:	f104 0314 	add.w	r3, r4, #20
 800fe40:	f019 091f 	ands.w	r9, r9, #31
 800fe44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe4c:	d02b      	beq.n	800fea6 <__lshift+0xbe>
 800fe4e:	f1c9 0e20 	rsb	lr, r9, #32
 800fe52:	468a      	mov	sl, r1
 800fe54:	2200      	movs	r2, #0
 800fe56:	6818      	ldr	r0, [r3, #0]
 800fe58:	fa00 f009 	lsl.w	r0, r0, r9
 800fe5c:	4310      	orrs	r0, r2
 800fe5e:	f84a 0b04 	str.w	r0, [sl], #4
 800fe62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe66:	459c      	cmp	ip, r3
 800fe68:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe6c:	d8f3      	bhi.n	800fe56 <__lshift+0x6e>
 800fe6e:	ebac 0304 	sub.w	r3, ip, r4
 800fe72:	3b15      	subs	r3, #21
 800fe74:	f023 0303 	bic.w	r3, r3, #3
 800fe78:	3304      	adds	r3, #4
 800fe7a:	f104 0015 	add.w	r0, r4, #21
 800fe7e:	4584      	cmp	ip, r0
 800fe80:	bf38      	it	cc
 800fe82:	2304      	movcc	r3, #4
 800fe84:	50ca      	str	r2, [r1, r3]
 800fe86:	b10a      	cbz	r2, 800fe8c <__lshift+0xa4>
 800fe88:	f108 0602 	add.w	r6, r8, #2
 800fe8c:	3e01      	subs	r6, #1
 800fe8e:	4638      	mov	r0, r7
 800fe90:	612e      	str	r6, [r5, #16]
 800fe92:	4621      	mov	r1, r4
 800fe94:	f7ff fd8e 	bl	800f9b4 <_Bfree>
 800fe98:	4628      	mov	r0, r5
 800fe9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fea2:	3301      	adds	r3, #1
 800fea4:	e7c5      	b.n	800fe32 <__lshift+0x4a>
 800fea6:	3904      	subs	r1, #4
 800fea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800feac:	f841 2f04 	str.w	r2, [r1, #4]!
 800feb0:	459c      	cmp	ip, r3
 800feb2:	d8f9      	bhi.n	800fea8 <__lshift+0xc0>
 800feb4:	e7ea      	b.n	800fe8c <__lshift+0xa4>
 800feb6:	bf00      	nop
 800feb8:	08011cf1 	.word	0x08011cf1
 800febc:	08011d79 	.word	0x08011d79

0800fec0 <__mcmp>:
 800fec0:	b530      	push	{r4, r5, lr}
 800fec2:	6902      	ldr	r2, [r0, #16]
 800fec4:	690c      	ldr	r4, [r1, #16]
 800fec6:	1b12      	subs	r2, r2, r4
 800fec8:	d10e      	bne.n	800fee8 <__mcmp+0x28>
 800feca:	f100 0314 	add.w	r3, r0, #20
 800fece:	3114      	adds	r1, #20
 800fed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fedc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fee0:	42a5      	cmp	r5, r4
 800fee2:	d003      	beq.n	800feec <__mcmp+0x2c>
 800fee4:	d305      	bcc.n	800fef2 <__mcmp+0x32>
 800fee6:	2201      	movs	r2, #1
 800fee8:	4610      	mov	r0, r2
 800feea:	bd30      	pop	{r4, r5, pc}
 800feec:	4283      	cmp	r3, r0
 800feee:	d3f3      	bcc.n	800fed8 <__mcmp+0x18>
 800fef0:	e7fa      	b.n	800fee8 <__mcmp+0x28>
 800fef2:	f04f 32ff 	mov.w	r2, #4294967295
 800fef6:	e7f7      	b.n	800fee8 <__mcmp+0x28>

0800fef8 <__mdiff>:
 800fef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	460c      	mov	r4, r1
 800fefe:	4606      	mov	r6, r0
 800ff00:	4611      	mov	r1, r2
 800ff02:	4620      	mov	r0, r4
 800ff04:	4690      	mov	r8, r2
 800ff06:	f7ff ffdb 	bl	800fec0 <__mcmp>
 800ff0a:	1e05      	subs	r5, r0, #0
 800ff0c:	d110      	bne.n	800ff30 <__mdiff+0x38>
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7ff fd0f 	bl	800f934 <_Balloc>
 800ff16:	b930      	cbnz	r0, 800ff26 <__mdiff+0x2e>
 800ff18:	4b3a      	ldr	r3, [pc, #232]	; (8010004 <__mdiff+0x10c>)
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	f240 2137 	movw	r1, #567	; 0x237
 800ff20:	4839      	ldr	r0, [pc, #228]	; (8010008 <__mdiff+0x110>)
 800ff22:	f001 f90d 	bl	8011140 <__assert_func>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	bfa4      	itt	ge
 800ff32:	4643      	movge	r3, r8
 800ff34:	46a0      	movge	r8, r4
 800ff36:	4630      	mov	r0, r6
 800ff38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff3c:	bfa6      	itte	ge
 800ff3e:	461c      	movge	r4, r3
 800ff40:	2500      	movge	r5, #0
 800ff42:	2501      	movlt	r5, #1
 800ff44:	f7ff fcf6 	bl	800f934 <_Balloc>
 800ff48:	b920      	cbnz	r0, 800ff54 <__mdiff+0x5c>
 800ff4a:	4b2e      	ldr	r3, [pc, #184]	; (8010004 <__mdiff+0x10c>)
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	f240 2145 	movw	r1, #581	; 0x245
 800ff52:	e7e5      	b.n	800ff20 <__mdiff+0x28>
 800ff54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff58:	6926      	ldr	r6, [r4, #16]
 800ff5a:	60c5      	str	r5, [r0, #12]
 800ff5c:	f104 0914 	add.w	r9, r4, #20
 800ff60:	f108 0514 	add.w	r5, r8, #20
 800ff64:	f100 0e14 	add.w	lr, r0, #20
 800ff68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff70:	f108 0210 	add.w	r2, r8, #16
 800ff74:	46f2      	mov	sl, lr
 800ff76:	2100      	movs	r1, #0
 800ff78:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ff80:	fa11 f88b 	uxtah	r8, r1, fp
 800ff84:	b299      	uxth	r1, r3
 800ff86:	0c1b      	lsrs	r3, r3, #16
 800ff88:	eba8 0801 	sub.w	r8, r8, r1
 800ff8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff94:	fa1f f888 	uxth.w	r8, r8
 800ff98:	1419      	asrs	r1, r3, #16
 800ff9a:	454e      	cmp	r6, r9
 800ff9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ffa0:	f84a 3b04 	str.w	r3, [sl], #4
 800ffa4:	d8e8      	bhi.n	800ff78 <__mdiff+0x80>
 800ffa6:	1b33      	subs	r3, r6, r4
 800ffa8:	3b15      	subs	r3, #21
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	3304      	adds	r3, #4
 800ffb0:	3415      	adds	r4, #21
 800ffb2:	42a6      	cmp	r6, r4
 800ffb4:	bf38      	it	cc
 800ffb6:	2304      	movcc	r3, #4
 800ffb8:	441d      	add	r5, r3
 800ffba:	4473      	add	r3, lr
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	462e      	mov	r6, r5
 800ffc0:	4566      	cmp	r6, ip
 800ffc2:	d30e      	bcc.n	800ffe2 <__mdiff+0xea>
 800ffc4:	f10c 0203 	add.w	r2, ip, #3
 800ffc8:	1b52      	subs	r2, r2, r5
 800ffca:	f022 0203 	bic.w	r2, r2, #3
 800ffce:	3d03      	subs	r5, #3
 800ffd0:	45ac      	cmp	ip, r5
 800ffd2:	bf38      	it	cc
 800ffd4:	2200      	movcc	r2, #0
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ffdc:	b17a      	cbz	r2, 800fffe <__mdiff+0x106>
 800ffde:	6107      	str	r7, [r0, #16]
 800ffe0:	e7a4      	b.n	800ff2c <__mdiff+0x34>
 800ffe2:	f856 8b04 	ldr.w	r8, [r6], #4
 800ffe6:	fa11 f288 	uxtah	r2, r1, r8
 800ffea:	1414      	asrs	r4, r2, #16
 800ffec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fff0:	b292      	uxth	r2, r2
 800fff2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fff6:	f84e 2b04 	str.w	r2, [lr], #4
 800fffa:	1421      	asrs	r1, r4, #16
 800fffc:	e7e0      	b.n	800ffc0 <__mdiff+0xc8>
 800fffe:	3f01      	subs	r7, #1
 8010000:	e7ea      	b.n	800ffd8 <__mdiff+0xe0>
 8010002:	bf00      	nop
 8010004:	08011cf1 	.word	0x08011cf1
 8010008:	08011d79 	.word	0x08011d79

0801000c <__ulp>:
 801000c:	b082      	sub	sp, #8
 801000e:	ed8d 0b00 	vstr	d0, [sp]
 8010012:	9a01      	ldr	r2, [sp, #4]
 8010014:	4b0f      	ldr	r3, [pc, #60]	; (8010054 <__ulp+0x48>)
 8010016:	4013      	ands	r3, r2
 8010018:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801001c:	2b00      	cmp	r3, #0
 801001e:	dc08      	bgt.n	8010032 <__ulp+0x26>
 8010020:	425b      	negs	r3, r3
 8010022:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010026:	ea4f 5223 	mov.w	r2, r3, asr #20
 801002a:	da04      	bge.n	8010036 <__ulp+0x2a>
 801002c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010030:	4113      	asrs	r3, r2
 8010032:	2200      	movs	r2, #0
 8010034:	e008      	b.n	8010048 <__ulp+0x3c>
 8010036:	f1a2 0314 	sub.w	r3, r2, #20
 801003a:	2b1e      	cmp	r3, #30
 801003c:	bfda      	itte	le
 801003e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010042:	40da      	lsrle	r2, r3
 8010044:	2201      	movgt	r2, #1
 8010046:	2300      	movs	r3, #0
 8010048:	4619      	mov	r1, r3
 801004a:	4610      	mov	r0, r2
 801004c:	ec41 0b10 	vmov	d0, r0, r1
 8010050:	b002      	add	sp, #8
 8010052:	4770      	bx	lr
 8010054:	7ff00000 	.word	0x7ff00000

08010058 <__b2d>:
 8010058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	6906      	ldr	r6, [r0, #16]
 801005e:	f100 0814 	add.w	r8, r0, #20
 8010062:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010066:	1f37      	subs	r7, r6, #4
 8010068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801006c:	4610      	mov	r0, r2
 801006e:	f7ff fd53 	bl	800fb18 <__hi0bits>
 8010072:	f1c0 0320 	rsb	r3, r0, #32
 8010076:	280a      	cmp	r0, #10
 8010078:	600b      	str	r3, [r1, #0]
 801007a:	491b      	ldr	r1, [pc, #108]	; (80100e8 <__b2d+0x90>)
 801007c:	dc15      	bgt.n	80100aa <__b2d+0x52>
 801007e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010082:	fa22 f30c 	lsr.w	r3, r2, ip
 8010086:	45b8      	cmp	r8, r7
 8010088:	ea43 0501 	orr.w	r5, r3, r1
 801008c:	bf34      	ite	cc
 801008e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010092:	2300      	movcs	r3, #0
 8010094:	3015      	adds	r0, #21
 8010096:	fa02 f000 	lsl.w	r0, r2, r0
 801009a:	fa23 f30c 	lsr.w	r3, r3, ip
 801009e:	4303      	orrs	r3, r0
 80100a0:	461c      	mov	r4, r3
 80100a2:	ec45 4b10 	vmov	d0, r4, r5
 80100a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100aa:	45b8      	cmp	r8, r7
 80100ac:	bf3a      	itte	cc
 80100ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80100b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80100b6:	2300      	movcs	r3, #0
 80100b8:	380b      	subs	r0, #11
 80100ba:	d012      	beq.n	80100e2 <__b2d+0x8a>
 80100bc:	f1c0 0120 	rsb	r1, r0, #32
 80100c0:	fa23 f401 	lsr.w	r4, r3, r1
 80100c4:	4082      	lsls	r2, r0
 80100c6:	4322      	orrs	r2, r4
 80100c8:	4547      	cmp	r7, r8
 80100ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80100ce:	bf8c      	ite	hi
 80100d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80100d4:	2200      	movls	r2, #0
 80100d6:	4083      	lsls	r3, r0
 80100d8:	40ca      	lsrs	r2, r1
 80100da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80100de:	4313      	orrs	r3, r2
 80100e0:	e7de      	b.n	80100a0 <__b2d+0x48>
 80100e2:	ea42 0501 	orr.w	r5, r2, r1
 80100e6:	e7db      	b.n	80100a0 <__b2d+0x48>
 80100e8:	3ff00000 	.word	0x3ff00000

080100ec <__d2b>:
 80100ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100f0:	460f      	mov	r7, r1
 80100f2:	2101      	movs	r1, #1
 80100f4:	ec59 8b10 	vmov	r8, r9, d0
 80100f8:	4616      	mov	r6, r2
 80100fa:	f7ff fc1b 	bl	800f934 <_Balloc>
 80100fe:	4604      	mov	r4, r0
 8010100:	b930      	cbnz	r0, 8010110 <__d2b+0x24>
 8010102:	4602      	mov	r2, r0
 8010104:	4b24      	ldr	r3, [pc, #144]	; (8010198 <__d2b+0xac>)
 8010106:	4825      	ldr	r0, [pc, #148]	; (801019c <__d2b+0xb0>)
 8010108:	f240 310f 	movw	r1, #783	; 0x30f
 801010c:	f001 f818 	bl	8011140 <__assert_func>
 8010110:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010118:	bb2d      	cbnz	r5, 8010166 <__d2b+0x7a>
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	f1b8 0300 	subs.w	r3, r8, #0
 8010120:	d026      	beq.n	8010170 <__d2b+0x84>
 8010122:	4668      	mov	r0, sp
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	f7ff fd17 	bl	800fb58 <__lo0bits>
 801012a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801012e:	b1e8      	cbz	r0, 801016c <__d2b+0x80>
 8010130:	f1c0 0320 	rsb	r3, r0, #32
 8010134:	fa02 f303 	lsl.w	r3, r2, r3
 8010138:	430b      	orrs	r3, r1
 801013a:	40c2      	lsrs	r2, r0
 801013c:	6163      	str	r3, [r4, #20]
 801013e:	9201      	str	r2, [sp, #4]
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	61a3      	str	r3, [r4, #24]
 8010144:	2b00      	cmp	r3, #0
 8010146:	bf14      	ite	ne
 8010148:	2202      	movne	r2, #2
 801014a:	2201      	moveq	r2, #1
 801014c:	6122      	str	r2, [r4, #16]
 801014e:	b1bd      	cbz	r5, 8010180 <__d2b+0x94>
 8010150:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010154:	4405      	add	r5, r0
 8010156:	603d      	str	r5, [r7, #0]
 8010158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801015c:	6030      	str	r0, [r6, #0]
 801015e:	4620      	mov	r0, r4
 8010160:	b003      	add	sp, #12
 8010162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801016a:	e7d6      	b.n	801011a <__d2b+0x2e>
 801016c:	6161      	str	r1, [r4, #20]
 801016e:	e7e7      	b.n	8010140 <__d2b+0x54>
 8010170:	a801      	add	r0, sp, #4
 8010172:	f7ff fcf1 	bl	800fb58 <__lo0bits>
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	6163      	str	r3, [r4, #20]
 801017a:	3020      	adds	r0, #32
 801017c:	2201      	movs	r2, #1
 801017e:	e7e5      	b.n	801014c <__d2b+0x60>
 8010180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010188:	6038      	str	r0, [r7, #0]
 801018a:	6918      	ldr	r0, [r3, #16]
 801018c:	f7ff fcc4 	bl	800fb18 <__hi0bits>
 8010190:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010194:	e7e2      	b.n	801015c <__d2b+0x70>
 8010196:	bf00      	nop
 8010198:	08011cf1 	.word	0x08011cf1
 801019c:	08011d79 	.word	0x08011d79

080101a0 <__ratio>:
 80101a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a4:	4688      	mov	r8, r1
 80101a6:	4669      	mov	r1, sp
 80101a8:	4681      	mov	r9, r0
 80101aa:	f7ff ff55 	bl	8010058 <__b2d>
 80101ae:	a901      	add	r1, sp, #4
 80101b0:	4640      	mov	r0, r8
 80101b2:	ec55 4b10 	vmov	r4, r5, d0
 80101b6:	f7ff ff4f 	bl	8010058 <__b2d>
 80101ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80101c2:	eba3 0c02 	sub.w	ip, r3, r2
 80101c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80101ca:	1a9b      	subs	r3, r3, r2
 80101cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80101d0:	ec51 0b10 	vmov	r0, r1, d0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	bfd6      	itet	le
 80101d8:	460a      	movle	r2, r1
 80101da:	462a      	movgt	r2, r5
 80101dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80101e0:	468b      	mov	fp, r1
 80101e2:	462f      	mov	r7, r5
 80101e4:	bfd4      	ite	le
 80101e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80101ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80101ee:	4620      	mov	r0, r4
 80101f0:	ee10 2a10 	vmov	r2, s0
 80101f4:	465b      	mov	r3, fp
 80101f6:	4639      	mov	r1, r7
 80101f8:	f7f0 fb40 	bl	800087c <__aeabi_ddiv>
 80101fc:	ec41 0b10 	vmov	d0, r0, r1
 8010200:	b003      	add	sp, #12
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010206 <__copybits>:
 8010206:	3901      	subs	r1, #1
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	1149      	asrs	r1, r1, #5
 801020c:	6914      	ldr	r4, [r2, #16]
 801020e:	3101      	adds	r1, #1
 8010210:	f102 0314 	add.w	r3, r2, #20
 8010214:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010218:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801021c:	1f05      	subs	r5, r0, #4
 801021e:	42a3      	cmp	r3, r4
 8010220:	d30c      	bcc.n	801023c <__copybits+0x36>
 8010222:	1aa3      	subs	r3, r4, r2
 8010224:	3b11      	subs	r3, #17
 8010226:	f023 0303 	bic.w	r3, r3, #3
 801022a:	3211      	adds	r2, #17
 801022c:	42a2      	cmp	r2, r4
 801022e:	bf88      	it	hi
 8010230:	2300      	movhi	r3, #0
 8010232:	4418      	add	r0, r3
 8010234:	2300      	movs	r3, #0
 8010236:	4288      	cmp	r0, r1
 8010238:	d305      	bcc.n	8010246 <__copybits+0x40>
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010240:	f845 6f04 	str.w	r6, [r5, #4]!
 8010244:	e7eb      	b.n	801021e <__copybits+0x18>
 8010246:	f840 3b04 	str.w	r3, [r0], #4
 801024a:	e7f4      	b.n	8010236 <__copybits+0x30>

0801024c <__any_on>:
 801024c:	f100 0214 	add.w	r2, r0, #20
 8010250:	6900      	ldr	r0, [r0, #16]
 8010252:	114b      	asrs	r3, r1, #5
 8010254:	4298      	cmp	r0, r3
 8010256:	b510      	push	{r4, lr}
 8010258:	db11      	blt.n	801027e <__any_on+0x32>
 801025a:	dd0a      	ble.n	8010272 <__any_on+0x26>
 801025c:	f011 011f 	ands.w	r1, r1, #31
 8010260:	d007      	beq.n	8010272 <__any_on+0x26>
 8010262:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010266:	fa24 f001 	lsr.w	r0, r4, r1
 801026a:	fa00 f101 	lsl.w	r1, r0, r1
 801026e:	428c      	cmp	r4, r1
 8010270:	d10b      	bne.n	801028a <__any_on+0x3e>
 8010272:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010276:	4293      	cmp	r3, r2
 8010278:	d803      	bhi.n	8010282 <__any_on+0x36>
 801027a:	2000      	movs	r0, #0
 801027c:	bd10      	pop	{r4, pc}
 801027e:	4603      	mov	r3, r0
 8010280:	e7f7      	b.n	8010272 <__any_on+0x26>
 8010282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010286:	2900      	cmp	r1, #0
 8010288:	d0f5      	beq.n	8010276 <__any_on+0x2a>
 801028a:	2001      	movs	r0, #1
 801028c:	e7f6      	b.n	801027c <__any_on+0x30>

0801028e <_malloc_usable_size_r>:
 801028e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010292:	1f18      	subs	r0, r3, #4
 8010294:	2b00      	cmp	r3, #0
 8010296:	bfbc      	itt	lt
 8010298:	580b      	ldrlt	r3, [r1, r0]
 801029a:	18c0      	addlt	r0, r0, r3
 801029c:	4770      	bx	lr

0801029e <__ascii_wctomb>:
 801029e:	b149      	cbz	r1, 80102b4 <__ascii_wctomb+0x16>
 80102a0:	2aff      	cmp	r2, #255	; 0xff
 80102a2:	bf85      	ittet	hi
 80102a4:	238a      	movhi	r3, #138	; 0x8a
 80102a6:	6003      	strhi	r3, [r0, #0]
 80102a8:	700a      	strbls	r2, [r1, #0]
 80102aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80102ae:	bf98      	it	ls
 80102b0:	2001      	movls	r0, #1
 80102b2:	4770      	bx	lr
 80102b4:	4608      	mov	r0, r1
 80102b6:	4770      	bx	lr

080102b8 <__ssputs_r>:
 80102b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102bc:	688e      	ldr	r6, [r1, #8]
 80102be:	461f      	mov	r7, r3
 80102c0:	42be      	cmp	r6, r7
 80102c2:	680b      	ldr	r3, [r1, #0]
 80102c4:	4682      	mov	sl, r0
 80102c6:	460c      	mov	r4, r1
 80102c8:	4690      	mov	r8, r2
 80102ca:	d82c      	bhi.n	8010326 <__ssputs_r+0x6e>
 80102cc:	898a      	ldrh	r2, [r1, #12]
 80102ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102d2:	d026      	beq.n	8010322 <__ssputs_r+0x6a>
 80102d4:	6965      	ldr	r5, [r4, #20]
 80102d6:	6909      	ldr	r1, [r1, #16]
 80102d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102dc:	eba3 0901 	sub.w	r9, r3, r1
 80102e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102e4:	1c7b      	adds	r3, r7, #1
 80102e6:	444b      	add	r3, r9
 80102e8:	106d      	asrs	r5, r5, #1
 80102ea:	429d      	cmp	r5, r3
 80102ec:	bf38      	it	cc
 80102ee:	461d      	movcc	r5, r3
 80102f0:	0553      	lsls	r3, r2, #21
 80102f2:	d527      	bpl.n	8010344 <__ssputs_r+0x8c>
 80102f4:	4629      	mov	r1, r5
 80102f6:	f7fd fe11 	bl	800df1c <_malloc_r>
 80102fa:	4606      	mov	r6, r0
 80102fc:	b360      	cbz	r0, 8010358 <__ssputs_r+0xa0>
 80102fe:	6921      	ldr	r1, [r4, #16]
 8010300:	464a      	mov	r2, r9
 8010302:	f7fe ff48 	bl	800f196 <memcpy>
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801030c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010310:	81a3      	strh	r3, [r4, #12]
 8010312:	6126      	str	r6, [r4, #16]
 8010314:	6165      	str	r5, [r4, #20]
 8010316:	444e      	add	r6, r9
 8010318:	eba5 0509 	sub.w	r5, r5, r9
 801031c:	6026      	str	r6, [r4, #0]
 801031e:	60a5      	str	r5, [r4, #8]
 8010320:	463e      	mov	r6, r7
 8010322:	42be      	cmp	r6, r7
 8010324:	d900      	bls.n	8010328 <__ssputs_r+0x70>
 8010326:	463e      	mov	r6, r7
 8010328:	6820      	ldr	r0, [r4, #0]
 801032a:	4632      	mov	r2, r6
 801032c:	4641      	mov	r1, r8
 801032e:	f000 feec 	bl	801110a <memmove>
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	1b9b      	subs	r3, r3, r6
 8010336:	60a3      	str	r3, [r4, #8]
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	4433      	add	r3, r6
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	2000      	movs	r0, #0
 8010340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010344:	462a      	mov	r2, r5
 8010346:	f7fd fe7d 	bl	800e044 <_realloc_r>
 801034a:	4606      	mov	r6, r0
 801034c:	2800      	cmp	r0, #0
 801034e:	d1e0      	bne.n	8010312 <__ssputs_r+0x5a>
 8010350:	6921      	ldr	r1, [r4, #16]
 8010352:	4650      	mov	r0, sl
 8010354:	f7fe ff38 	bl	800f1c8 <_free_r>
 8010358:	230c      	movs	r3, #12
 801035a:	f8ca 3000 	str.w	r3, [sl]
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010364:	81a3      	strh	r3, [r4, #12]
 8010366:	f04f 30ff 	mov.w	r0, #4294967295
 801036a:	e7e9      	b.n	8010340 <__ssputs_r+0x88>

0801036c <_svfiprintf_r>:
 801036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	4698      	mov	r8, r3
 8010372:	898b      	ldrh	r3, [r1, #12]
 8010374:	061b      	lsls	r3, r3, #24
 8010376:	b09d      	sub	sp, #116	; 0x74
 8010378:	4607      	mov	r7, r0
 801037a:	460d      	mov	r5, r1
 801037c:	4614      	mov	r4, r2
 801037e:	d50e      	bpl.n	801039e <_svfiprintf_r+0x32>
 8010380:	690b      	ldr	r3, [r1, #16]
 8010382:	b963      	cbnz	r3, 801039e <_svfiprintf_r+0x32>
 8010384:	2140      	movs	r1, #64	; 0x40
 8010386:	f7fd fdc9 	bl	800df1c <_malloc_r>
 801038a:	6028      	str	r0, [r5, #0]
 801038c:	6128      	str	r0, [r5, #16]
 801038e:	b920      	cbnz	r0, 801039a <_svfiprintf_r+0x2e>
 8010390:	230c      	movs	r3, #12
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	e0d0      	b.n	801053c <_svfiprintf_r+0x1d0>
 801039a:	2340      	movs	r3, #64	; 0x40
 801039c:	616b      	str	r3, [r5, #20]
 801039e:	2300      	movs	r3, #0
 80103a0:	9309      	str	r3, [sp, #36]	; 0x24
 80103a2:	2320      	movs	r3, #32
 80103a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80103ac:	2330      	movs	r3, #48	; 0x30
 80103ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010554 <_svfiprintf_r+0x1e8>
 80103b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103b6:	f04f 0901 	mov.w	r9, #1
 80103ba:	4623      	mov	r3, r4
 80103bc:	469a      	mov	sl, r3
 80103be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103c2:	b10a      	cbz	r2, 80103c8 <_svfiprintf_r+0x5c>
 80103c4:	2a25      	cmp	r2, #37	; 0x25
 80103c6:	d1f9      	bne.n	80103bc <_svfiprintf_r+0x50>
 80103c8:	ebba 0b04 	subs.w	fp, sl, r4
 80103cc:	d00b      	beq.n	80103e6 <_svfiprintf_r+0x7a>
 80103ce:	465b      	mov	r3, fp
 80103d0:	4622      	mov	r2, r4
 80103d2:	4629      	mov	r1, r5
 80103d4:	4638      	mov	r0, r7
 80103d6:	f7ff ff6f 	bl	80102b8 <__ssputs_r>
 80103da:	3001      	adds	r0, #1
 80103dc:	f000 80a9 	beq.w	8010532 <_svfiprintf_r+0x1c6>
 80103e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103e2:	445a      	add	r2, fp
 80103e4:	9209      	str	r2, [sp, #36]	; 0x24
 80103e6:	f89a 3000 	ldrb.w	r3, [sl]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 80a1 	beq.w	8010532 <_svfiprintf_r+0x1c6>
 80103f0:	2300      	movs	r3, #0
 80103f2:	f04f 32ff 	mov.w	r2, #4294967295
 80103f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103fa:	f10a 0a01 	add.w	sl, sl, #1
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	9307      	str	r3, [sp, #28]
 8010402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010406:	931a      	str	r3, [sp, #104]	; 0x68
 8010408:	4654      	mov	r4, sl
 801040a:	2205      	movs	r2, #5
 801040c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010410:	4850      	ldr	r0, [pc, #320]	; (8010554 <_svfiprintf_r+0x1e8>)
 8010412:	f7ef fefd 	bl	8000210 <memchr>
 8010416:	9a04      	ldr	r2, [sp, #16]
 8010418:	b9d8      	cbnz	r0, 8010452 <_svfiprintf_r+0xe6>
 801041a:	06d0      	lsls	r0, r2, #27
 801041c:	bf44      	itt	mi
 801041e:	2320      	movmi	r3, #32
 8010420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010424:	0711      	lsls	r1, r2, #28
 8010426:	bf44      	itt	mi
 8010428:	232b      	movmi	r3, #43	; 0x2b
 801042a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801042e:	f89a 3000 	ldrb.w	r3, [sl]
 8010432:	2b2a      	cmp	r3, #42	; 0x2a
 8010434:	d015      	beq.n	8010462 <_svfiprintf_r+0xf6>
 8010436:	9a07      	ldr	r2, [sp, #28]
 8010438:	4654      	mov	r4, sl
 801043a:	2000      	movs	r0, #0
 801043c:	f04f 0c0a 	mov.w	ip, #10
 8010440:	4621      	mov	r1, r4
 8010442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010446:	3b30      	subs	r3, #48	; 0x30
 8010448:	2b09      	cmp	r3, #9
 801044a:	d94d      	bls.n	80104e8 <_svfiprintf_r+0x17c>
 801044c:	b1b0      	cbz	r0, 801047c <_svfiprintf_r+0x110>
 801044e:	9207      	str	r2, [sp, #28]
 8010450:	e014      	b.n	801047c <_svfiprintf_r+0x110>
 8010452:	eba0 0308 	sub.w	r3, r0, r8
 8010456:	fa09 f303 	lsl.w	r3, r9, r3
 801045a:	4313      	orrs	r3, r2
 801045c:	9304      	str	r3, [sp, #16]
 801045e:	46a2      	mov	sl, r4
 8010460:	e7d2      	b.n	8010408 <_svfiprintf_r+0x9c>
 8010462:	9b03      	ldr	r3, [sp, #12]
 8010464:	1d19      	adds	r1, r3, #4
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	9103      	str	r1, [sp, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	bfbb      	ittet	lt
 801046e:	425b      	neglt	r3, r3
 8010470:	f042 0202 	orrlt.w	r2, r2, #2
 8010474:	9307      	strge	r3, [sp, #28]
 8010476:	9307      	strlt	r3, [sp, #28]
 8010478:	bfb8      	it	lt
 801047a:	9204      	strlt	r2, [sp, #16]
 801047c:	7823      	ldrb	r3, [r4, #0]
 801047e:	2b2e      	cmp	r3, #46	; 0x2e
 8010480:	d10c      	bne.n	801049c <_svfiprintf_r+0x130>
 8010482:	7863      	ldrb	r3, [r4, #1]
 8010484:	2b2a      	cmp	r3, #42	; 0x2a
 8010486:	d134      	bne.n	80104f2 <_svfiprintf_r+0x186>
 8010488:	9b03      	ldr	r3, [sp, #12]
 801048a:	1d1a      	adds	r2, r3, #4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	9203      	str	r2, [sp, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bfb8      	it	lt
 8010494:	f04f 33ff 	movlt.w	r3, #4294967295
 8010498:	3402      	adds	r4, #2
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010564 <_svfiprintf_r+0x1f8>
 80104a0:	7821      	ldrb	r1, [r4, #0]
 80104a2:	2203      	movs	r2, #3
 80104a4:	4650      	mov	r0, sl
 80104a6:	f7ef feb3 	bl	8000210 <memchr>
 80104aa:	b138      	cbz	r0, 80104bc <_svfiprintf_r+0x150>
 80104ac:	9b04      	ldr	r3, [sp, #16]
 80104ae:	eba0 000a 	sub.w	r0, r0, sl
 80104b2:	2240      	movs	r2, #64	; 0x40
 80104b4:	4082      	lsls	r2, r0
 80104b6:	4313      	orrs	r3, r2
 80104b8:	3401      	adds	r4, #1
 80104ba:	9304      	str	r3, [sp, #16]
 80104bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104c0:	4825      	ldr	r0, [pc, #148]	; (8010558 <_svfiprintf_r+0x1ec>)
 80104c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104c6:	2206      	movs	r2, #6
 80104c8:	f7ef fea2 	bl	8000210 <memchr>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d038      	beq.n	8010542 <_svfiprintf_r+0x1d6>
 80104d0:	4b22      	ldr	r3, [pc, #136]	; (801055c <_svfiprintf_r+0x1f0>)
 80104d2:	bb1b      	cbnz	r3, 801051c <_svfiprintf_r+0x1b0>
 80104d4:	9b03      	ldr	r3, [sp, #12]
 80104d6:	3307      	adds	r3, #7
 80104d8:	f023 0307 	bic.w	r3, r3, #7
 80104dc:	3308      	adds	r3, #8
 80104de:	9303      	str	r3, [sp, #12]
 80104e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e2:	4433      	add	r3, r6
 80104e4:	9309      	str	r3, [sp, #36]	; 0x24
 80104e6:	e768      	b.n	80103ba <_svfiprintf_r+0x4e>
 80104e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ec:	460c      	mov	r4, r1
 80104ee:	2001      	movs	r0, #1
 80104f0:	e7a6      	b.n	8010440 <_svfiprintf_r+0xd4>
 80104f2:	2300      	movs	r3, #0
 80104f4:	3401      	adds	r4, #1
 80104f6:	9305      	str	r3, [sp, #20]
 80104f8:	4619      	mov	r1, r3
 80104fa:	f04f 0c0a 	mov.w	ip, #10
 80104fe:	4620      	mov	r0, r4
 8010500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010504:	3a30      	subs	r2, #48	; 0x30
 8010506:	2a09      	cmp	r2, #9
 8010508:	d903      	bls.n	8010512 <_svfiprintf_r+0x1a6>
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0c6      	beq.n	801049c <_svfiprintf_r+0x130>
 801050e:	9105      	str	r1, [sp, #20]
 8010510:	e7c4      	b.n	801049c <_svfiprintf_r+0x130>
 8010512:	fb0c 2101 	mla	r1, ip, r1, r2
 8010516:	4604      	mov	r4, r0
 8010518:	2301      	movs	r3, #1
 801051a:	e7f0      	b.n	80104fe <_svfiprintf_r+0x192>
 801051c:	ab03      	add	r3, sp, #12
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	462a      	mov	r2, r5
 8010522:	4b0f      	ldr	r3, [pc, #60]	; (8010560 <_svfiprintf_r+0x1f4>)
 8010524:	a904      	add	r1, sp, #16
 8010526:	4638      	mov	r0, r7
 8010528:	f3af 8000 	nop.w
 801052c:	1c42      	adds	r2, r0, #1
 801052e:	4606      	mov	r6, r0
 8010530:	d1d6      	bne.n	80104e0 <_svfiprintf_r+0x174>
 8010532:	89ab      	ldrh	r3, [r5, #12]
 8010534:	065b      	lsls	r3, r3, #25
 8010536:	f53f af2d 	bmi.w	8010394 <_svfiprintf_r+0x28>
 801053a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801053c:	b01d      	add	sp, #116	; 0x74
 801053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010542:	ab03      	add	r3, sp, #12
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	462a      	mov	r2, r5
 8010548:	4b05      	ldr	r3, [pc, #20]	; (8010560 <_svfiprintf_r+0x1f4>)
 801054a:	a904      	add	r1, sp, #16
 801054c:	4638      	mov	r0, r7
 801054e:	f000 fa4b 	bl	80109e8 <_printf_i>
 8010552:	e7eb      	b.n	801052c <_svfiprintf_r+0x1c0>
 8010554:	08011ed4 	.word	0x08011ed4
 8010558:	08011ede 	.word	0x08011ede
 801055c:	00000000 	.word	0x00000000
 8010560:	080102b9 	.word	0x080102b9
 8010564:	08011eda 	.word	0x08011eda

08010568 <_sungetc_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	1c4b      	adds	r3, r1, #1
 801056c:	4614      	mov	r4, r2
 801056e:	d103      	bne.n	8010578 <_sungetc_r+0x10>
 8010570:	f04f 35ff 	mov.w	r5, #4294967295
 8010574:	4628      	mov	r0, r5
 8010576:	bd38      	pop	{r3, r4, r5, pc}
 8010578:	8993      	ldrh	r3, [r2, #12]
 801057a:	f023 0320 	bic.w	r3, r3, #32
 801057e:	8193      	strh	r3, [r2, #12]
 8010580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010582:	6852      	ldr	r2, [r2, #4]
 8010584:	b2cd      	uxtb	r5, r1
 8010586:	b18b      	cbz	r3, 80105ac <_sungetc_r+0x44>
 8010588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801058a:	4293      	cmp	r3, r2
 801058c:	dd08      	ble.n	80105a0 <_sungetc_r+0x38>
 801058e:	6823      	ldr	r3, [r4, #0]
 8010590:	1e5a      	subs	r2, r3, #1
 8010592:	6022      	str	r2, [r4, #0]
 8010594:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010598:	6863      	ldr	r3, [r4, #4]
 801059a:	3301      	adds	r3, #1
 801059c:	6063      	str	r3, [r4, #4]
 801059e:	e7e9      	b.n	8010574 <_sungetc_r+0xc>
 80105a0:	4621      	mov	r1, r4
 80105a2:	f000 fd78 	bl	8011096 <__submore>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d0f1      	beq.n	801058e <_sungetc_r+0x26>
 80105aa:	e7e1      	b.n	8010570 <_sungetc_r+0x8>
 80105ac:	6921      	ldr	r1, [r4, #16]
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	b151      	cbz	r1, 80105c8 <_sungetc_r+0x60>
 80105b2:	4299      	cmp	r1, r3
 80105b4:	d208      	bcs.n	80105c8 <_sungetc_r+0x60>
 80105b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80105ba:	42a9      	cmp	r1, r5
 80105bc:	d104      	bne.n	80105c8 <_sungetc_r+0x60>
 80105be:	3b01      	subs	r3, #1
 80105c0:	3201      	adds	r2, #1
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	6062      	str	r2, [r4, #4]
 80105c6:	e7d5      	b.n	8010574 <_sungetc_r+0xc>
 80105c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80105cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105d0:	6363      	str	r3, [r4, #52]	; 0x34
 80105d2:	2303      	movs	r3, #3
 80105d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80105d6:	4623      	mov	r3, r4
 80105d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80105dc:	6023      	str	r3, [r4, #0]
 80105de:	2301      	movs	r3, #1
 80105e0:	e7dc      	b.n	801059c <_sungetc_r+0x34>

080105e2 <__ssrefill_r>:
 80105e2:	b510      	push	{r4, lr}
 80105e4:	460c      	mov	r4, r1
 80105e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80105e8:	b169      	cbz	r1, 8010606 <__ssrefill_r+0x24>
 80105ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105ee:	4299      	cmp	r1, r3
 80105f0:	d001      	beq.n	80105f6 <__ssrefill_r+0x14>
 80105f2:	f7fe fde9 	bl	800f1c8 <_free_r>
 80105f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105f8:	6063      	str	r3, [r4, #4]
 80105fa:	2000      	movs	r0, #0
 80105fc:	6360      	str	r0, [r4, #52]	; 0x34
 80105fe:	b113      	cbz	r3, 8010606 <__ssrefill_r+0x24>
 8010600:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	bd10      	pop	{r4, pc}
 8010606:	6923      	ldr	r3, [r4, #16]
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	2300      	movs	r3, #0
 801060c:	6063      	str	r3, [r4, #4]
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	f043 0320 	orr.w	r3, r3, #32
 8010614:	81a3      	strh	r3, [r4, #12]
 8010616:	f04f 30ff 	mov.w	r0, #4294967295
 801061a:	e7f3      	b.n	8010604 <__ssrefill_r+0x22>

0801061c <__ssvfiscanf_r>:
 801061c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010620:	460c      	mov	r4, r1
 8010622:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010626:	2100      	movs	r1, #0
 8010628:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801062c:	49a6      	ldr	r1, [pc, #664]	; (80108c8 <__ssvfiscanf_r+0x2ac>)
 801062e:	91a0      	str	r1, [sp, #640]	; 0x280
 8010630:	f10d 0804 	add.w	r8, sp, #4
 8010634:	49a5      	ldr	r1, [pc, #660]	; (80108cc <__ssvfiscanf_r+0x2b0>)
 8010636:	4fa6      	ldr	r7, [pc, #664]	; (80108d0 <__ssvfiscanf_r+0x2b4>)
 8010638:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80108d4 <__ssvfiscanf_r+0x2b8>
 801063c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010640:	4606      	mov	r6, r0
 8010642:	91a1      	str	r1, [sp, #644]	; 0x284
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	7813      	ldrb	r3, [r2, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 815a 	beq.w	8010902 <__ssvfiscanf_r+0x2e6>
 801064e:	5cf9      	ldrb	r1, [r7, r3]
 8010650:	f011 0108 	ands.w	r1, r1, #8
 8010654:	f102 0501 	add.w	r5, r2, #1
 8010658:	d019      	beq.n	801068e <__ssvfiscanf_r+0x72>
 801065a:	6863      	ldr	r3, [r4, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	dd0f      	ble.n	8010680 <__ssvfiscanf_r+0x64>
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	781a      	ldrb	r2, [r3, #0]
 8010664:	5cba      	ldrb	r2, [r7, r2]
 8010666:	0712      	lsls	r2, r2, #28
 8010668:	d401      	bmi.n	801066e <__ssvfiscanf_r+0x52>
 801066a:	462a      	mov	r2, r5
 801066c:	e7eb      	b.n	8010646 <__ssvfiscanf_r+0x2a>
 801066e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010670:	3201      	adds	r2, #1
 8010672:	9245      	str	r2, [sp, #276]	; 0x114
 8010674:	6862      	ldr	r2, [r4, #4]
 8010676:	3301      	adds	r3, #1
 8010678:	3a01      	subs	r2, #1
 801067a:	6062      	str	r2, [r4, #4]
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	e7ec      	b.n	801065a <__ssvfiscanf_r+0x3e>
 8010680:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010682:	4621      	mov	r1, r4
 8010684:	4630      	mov	r0, r6
 8010686:	4798      	blx	r3
 8010688:	2800      	cmp	r0, #0
 801068a:	d0e9      	beq.n	8010660 <__ssvfiscanf_r+0x44>
 801068c:	e7ed      	b.n	801066a <__ssvfiscanf_r+0x4e>
 801068e:	2b25      	cmp	r3, #37	; 0x25
 8010690:	d012      	beq.n	80106b8 <__ssvfiscanf_r+0x9c>
 8010692:	469a      	mov	sl, r3
 8010694:	6863      	ldr	r3, [r4, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	f340 8091 	ble.w	80107be <__ssvfiscanf_r+0x1a2>
 801069c:	6822      	ldr	r2, [r4, #0]
 801069e:	7813      	ldrb	r3, [r2, #0]
 80106a0:	4553      	cmp	r3, sl
 80106a2:	f040 812e 	bne.w	8010902 <__ssvfiscanf_r+0x2e6>
 80106a6:	6863      	ldr	r3, [r4, #4]
 80106a8:	3b01      	subs	r3, #1
 80106aa:	6063      	str	r3, [r4, #4]
 80106ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80106ae:	3201      	adds	r2, #1
 80106b0:	3301      	adds	r3, #1
 80106b2:	6022      	str	r2, [r4, #0]
 80106b4:	9345      	str	r3, [sp, #276]	; 0x114
 80106b6:	e7d8      	b.n	801066a <__ssvfiscanf_r+0x4e>
 80106b8:	9141      	str	r1, [sp, #260]	; 0x104
 80106ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80106bc:	7853      	ldrb	r3, [r2, #1]
 80106be:	2b2a      	cmp	r3, #42	; 0x2a
 80106c0:	bf02      	ittt	eq
 80106c2:	2310      	moveq	r3, #16
 80106c4:	1c95      	addeq	r5, r2, #2
 80106c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80106c8:	220a      	movs	r2, #10
 80106ca:	46aa      	mov	sl, r5
 80106cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80106d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80106d4:	2b09      	cmp	r3, #9
 80106d6:	d91c      	bls.n	8010712 <__ssvfiscanf_r+0xf6>
 80106d8:	487e      	ldr	r0, [pc, #504]	; (80108d4 <__ssvfiscanf_r+0x2b8>)
 80106da:	2203      	movs	r2, #3
 80106dc:	f7ef fd98 	bl	8000210 <memchr>
 80106e0:	b138      	cbz	r0, 80106f2 <__ssvfiscanf_r+0xd6>
 80106e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80106e4:	eba0 0009 	sub.w	r0, r0, r9
 80106e8:	2301      	movs	r3, #1
 80106ea:	4083      	lsls	r3, r0
 80106ec:	4313      	orrs	r3, r2
 80106ee:	9341      	str	r3, [sp, #260]	; 0x104
 80106f0:	4655      	mov	r5, sl
 80106f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80106f6:	2b78      	cmp	r3, #120	; 0x78
 80106f8:	d806      	bhi.n	8010708 <__ssvfiscanf_r+0xec>
 80106fa:	2b57      	cmp	r3, #87	; 0x57
 80106fc:	d810      	bhi.n	8010720 <__ssvfiscanf_r+0x104>
 80106fe:	2b25      	cmp	r3, #37	; 0x25
 8010700:	d0c7      	beq.n	8010692 <__ssvfiscanf_r+0x76>
 8010702:	d857      	bhi.n	80107b4 <__ssvfiscanf_r+0x198>
 8010704:	2b00      	cmp	r3, #0
 8010706:	d065      	beq.n	80107d4 <__ssvfiscanf_r+0x1b8>
 8010708:	2303      	movs	r3, #3
 801070a:	9347      	str	r3, [sp, #284]	; 0x11c
 801070c:	230a      	movs	r3, #10
 801070e:	9342      	str	r3, [sp, #264]	; 0x108
 8010710:	e076      	b.n	8010800 <__ssvfiscanf_r+0x1e4>
 8010712:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010714:	fb02 1103 	mla	r1, r2, r3, r1
 8010718:	3930      	subs	r1, #48	; 0x30
 801071a:	9143      	str	r1, [sp, #268]	; 0x10c
 801071c:	4655      	mov	r5, sl
 801071e:	e7d4      	b.n	80106ca <__ssvfiscanf_r+0xae>
 8010720:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010724:	2a20      	cmp	r2, #32
 8010726:	d8ef      	bhi.n	8010708 <__ssvfiscanf_r+0xec>
 8010728:	a101      	add	r1, pc, #4	; (adr r1, 8010730 <__ssvfiscanf_r+0x114>)
 801072a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801072e:	bf00      	nop
 8010730:	080107e3 	.word	0x080107e3
 8010734:	08010709 	.word	0x08010709
 8010738:	08010709 	.word	0x08010709
 801073c:	08010841 	.word	0x08010841
 8010740:	08010709 	.word	0x08010709
 8010744:	08010709 	.word	0x08010709
 8010748:	08010709 	.word	0x08010709
 801074c:	08010709 	.word	0x08010709
 8010750:	08010709 	.word	0x08010709
 8010754:	08010709 	.word	0x08010709
 8010758:	08010709 	.word	0x08010709
 801075c:	08010857 	.word	0x08010857
 8010760:	0801083d 	.word	0x0801083d
 8010764:	080107bb 	.word	0x080107bb
 8010768:	080107bb 	.word	0x080107bb
 801076c:	080107bb 	.word	0x080107bb
 8010770:	08010709 	.word	0x08010709
 8010774:	080107f9 	.word	0x080107f9
 8010778:	08010709 	.word	0x08010709
 801077c:	08010709 	.word	0x08010709
 8010780:	08010709 	.word	0x08010709
 8010784:	08010709 	.word	0x08010709
 8010788:	08010867 	.word	0x08010867
 801078c:	08010835 	.word	0x08010835
 8010790:	080107db 	.word	0x080107db
 8010794:	08010709 	.word	0x08010709
 8010798:	08010709 	.word	0x08010709
 801079c:	08010863 	.word	0x08010863
 80107a0:	08010709 	.word	0x08010709
 80107a4:	0801083d 	.word	0x0801083d
 80107a8:	08010709 	.word	0x08010709
 80107ac:	08010709 	.word	0x08010709
 80107b0:	080107e3 	.word	0x080107e3
 80107b4:	3b45      	subs	r3, #69	; 0x45
 80107b6:	2b02      	cmp	r3, #2
 80107b8:	d8a6      	bhi.n	8010708 <__ssvfiscanf_r+0xec>
 80107ba:	2305      	movs	r3, #5
 80107bc:	e01f      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 80107be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107c0:	4621      	mov	r1, r4
 80107c2:	4630      	mov	r0, r6
 80107c4:	4798      	blx	r3
 80107c6:	2800      	cmp	r0, #0
 80107c8:	f43f af68 	beq.w	801069c <__ssvfiscanf_r+0x80>
 80107cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f040 808d 	bne.w	80108ee <__ssvfiscanf_r+0x2d2>
 80107d4:	f04f 30ff 	mov.w	r0, #4294967295
 80107d8:	e08f      	b.n	80108fa <__ssvfiscanf_r+0x2de>
 80107da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80107dc:	f042 0220 	orr.w	r2, r2, #32
 80107e0:	9241      	str	r2, [sp, #260]	; 0x104
 80107e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80107e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107e8:	9241      	str	r2, [sp, #260]	; 0x104
 80107ea:	2210      	movs	r2, #16
 80107ec:	2b6f      	cmp	r3, #111	; 0x6f
 80107ee:	9242      	str	r2, [sp, #264]	; 0x108
 80107f0:	bf34      	ite	cc
 80107f2:	2303      	movcc	r3, #3
 80107f4:	2304      	movcs	r3, #4
 80107f6:	e002      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 80107f8:	2300      	movs	r3, #0
 80107fa:	9342      	str	r3, [sp, #264]	; 0x108
 80107fc:	2303      	movs	r3, #3
 80107fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	dd3d      	ble.n	8010882 <__ssvfiscanf_r+0x266>
 8010806:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010808:	0659      	lsls	r1, r3, #25
 801080a:	d404      	bmi.n	8010816 <__ssvfiscanf_r+0x1fa>
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	781a      	ldrb	r2, [r3, #0]
 8010810:	5cba      	ldrb	r2, [r7, r2]
 8010812:	0712      	lsls	r2, r2, #28
 8010814:	d43c      	bmi.n	8010890 <__ssvfiscanf_r+0x274>
 8010816:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010818:	2b02      	cmp	r3, #2
 801081a:	dc4b      	bgt.n	80108b4 <__ssvfiscanf_r+0x298>
 801081c:	466b      	mov	r3, sp
 801081e:	4622      	mov	r2, r4
 8010820:	a941      	add	r1, sp, #260	; 0x104
 8010822:	4630      	mov	r0, r6
 8010824:	f000 fa02 	bl	8010c2c <_scanf_chars>
 8010828:	2801      	cmp	r0, #1
 801082a:	d06a      	beq.n	8010902 <__ssvfiscanf_r+0x2e6>
 801082c:	2802      	cmp	r0, #2
 801082e:	f47f af1c 	bne.w	801066a <__ssvfiscanf_r+0x4e>
 8010832:	e7cb      	b.n	80107cc <__ssvfiscanf_r+0x1b0>
 8010834:	2308      	movs	r3, #8
 8010836:	9342      	str	r3, [sp, #264]	; 0x108
 8010838:	2304      	movs	r3, #4
 801083a:	e7e0      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 801083c:	220a      	movs	r2, #10
 801083e:	e7d5      	b.n	80107ec <__ssvfiscanf_r+0x1d0>
 8010840:	4629      	mov	r1, r5
 8010842:	4640      	mov	r0, r8
 8010844:	f000 fbee 	bl	8011024 <__sccl>
 8010848:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801084e:	9341      	str	r3, [sp, #260]	; 0x104
 8010850:	4605      	mov	r5, r0
 8010852:	2301      	movs	r3, #1
 8010854:	e7d3      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 8010856:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801085c:	9341      	str	r3, [sp, #260]	; 0x104
 801085e:	2300      	movs	r3, #0
 8010860:	e7cd      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 8010862:	2302      	movs	r3, #2
 8010864:	e7cb      	b.n	80107fe <__ssvfiscanf_r+0x1e2>
 8010866:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010868:	06c3      	lsls	r3, r0, #27
 801086a:	f53f aefe 	bmi.w	801066a <__ssvfiscanf_r+0x4e>
 801086e:	9b00      	ldr	r3, [sp, #0]
 8010870:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010872:	1d19      	adds	r1, r3, #4
 8010874:	9100      	str	r1, [sp, #0]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	07c0      	lsls	r0, r0, #31
 801087a:	bf4c      	ite	mi
 801087c:	801a      	strhmi	r2, [r3, #0]
 801087e:	601a      	strpl	r2, [r3, #0]
 8010880:	e6f3      	b.n	801066a <__ssvfiscanf_r+0x4e>
 8010882:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010884:	4621      	mov	r1, r4
 8010886:	4630      	mov	r0, r6
 8010888:	4798      	blx	r3
 801088a:	2800      	cmp	r0, #0
 801088c:	d0bb      	beq.n	8010806 <__ssvfiscanf_r+0x1ea>
 801088e:	e79d      	b.n	80107cc <__ssvfiscanf_r+0x1b0>
 8010890:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010892:	3201      	adds	r2, #1
 8010894:	9245      	str	r2, [sp, #276]	; 0x114
 8010896:	6862      	ldr	r2, [r4, #4]
 8010898:	3a01      	subs	r2, #1
 801089a:	2a00      	cmp	r2, #0
 801089c:	6062      	str	r2, [r4, #4]
 801089e:	dd02      	ble.n	80108a6 <__ssvfiscanf_r+0x28a>
 80108a0:	3301      	adds	r3, #1
 80108a2:	6023      	str	r3, [r4, #0]
 80108a4:	e7b2      	b.n	801080c <__ssvfiscanf_r+0x1f0>
 80108a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80108a8:	4621      	mov	r1, r4
 80108aa:	4630      	mov	r0, r6
 80108ac:	4798      	blx	r3
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d0ac      	beq.n	801080c <__ssvfiscanf_r+0x1f0>
 80108b2:	e78b      	b.n	80107cc <__ssvfiscanf_r+0x1b0>
 80108b4:	2b04      	cmp	r3, #4
 80108b6:	dc0f      	bgt.n	80108d8 <__ssvfiscanf_r+0x2bc>
 80108b8:	466b      	mov	r3, sp
 80108ba:	4622      	mov	r2, r4
 80108bc:	a941      	add	r1, sp, #260	; 0x104
 80108be:	4630      	mov	r0, r6
 80108c0:	f000 fa0e 	bl	8010ce0 <_scanf_i>
 80108c4:	e7b0      	b.n	8010828 <__ssvfiscanf_r+0x20c>
 80108c6:	bf00      	nop
 80108c8:	08010569 	.word	0x08010569
 80108cc:	080105e3 	.word	0x080105e3
 80108d0:	08011be9 	.word	0x08011be9
 80108d4:	08011eda 	.word	0x08011eda
 80108d8:	4b0b      	ldr	r3, [pc, #44]	; (8010908 <__ssvfiscanf_r+0x2ec>)
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f43f aec5 	beq.w	801066a <__ssvfiscanf_r+0x4e>
 80108e0:	466b      	mov	r3, sp
 80108e2:	4622      	mov	r2, r4
 80108e4:	a941      	add	r1, sp, #260	; 0x104
 80108e6:	4630      	mov	r0, r6
 80108e8:	f3af 8000 	nop.w
 80108ec:	e79c      	b.n	8010828 <__ssvfiscanf_r+0x20c>
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108f4:	bf18      	it	ne
 80108f6:	f04f 30ff 	movne.w	r0, #4294967295
 80108fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80108fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010902:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010904:	e7f9      	b.n	80108fa <__ssvfiscanf_r+0x2de>
 8010906:	bf00      	nop
 8010908:	00000000 	.word	0x00000000

0801090c <_printf_common>:
 801090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010910:	4616      	mov	r6, r2
 8010912:	4699      	mov	r9, r3
 8010914:	688a      	ldr	r2, [r1, #8]
 8010916:	690b      	ldr	r3, [r1, #16]
 8010918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801091c:	4293      	cmp	r3, r2
 801091e:	bfb8      	it	lt
 8010920:	4613      	movlt	r3, r2
 8010922:	6033      	str	r3, [r6, #0]
 8010924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010928:	4607      	mov	r7, r0
 801092a:	460c      	mov	r4, r1
 801092c:	b10a      	cbz	r2, 8010932 <_printf_common+0x26>
 801092e:	3301      	adds	r3, #1
 8010930:	6033      	str	r3, [r6, #0]
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	0699      	lsls	r1, r3, #26
 8010936:	bf42      	ittt	mi
 8010938:	6833      	ldrmi	r3, [r6, #0]
 801093a:	3302      	addmi	r3, #2
 801093c:	6033      	strmi	r3, [r6, #0]
 801093e:	6825      	ldr	r5, [r4, #0]
 8010940:	f015 0506 	ands.w	r5, r5, #6
 8010944:	d106      	bne.n	8010954 <_printf_common+0x48>
 8010946:	f104 0a19 	add.w	sl, r4, #25
 801094a:	68e3      	ldr	r3, [r4, #12]
 801094c:	6832      	ldr	r2, [r6, #0]
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	42ab      	cmp	r3, r5
 8010952:	dc26      	bgt.n	80109a2 <_printf_common+0x96>
 8010954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010958:	1e13      	subs	r3, r2, #0
 801095a:	6822      	ldr	r2, [r4, #0]
 801095c:	bf18      	it	ne
 801095e:	2301      	movne	r3, #1
 8010960:	0692      	lsls	r2, r2, #26
 8010962:	d42b      	bmi.n	80109bc <_printf_common+0xb0>
 8010964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010968:	4649      	mov	r1, r9
 801096a:	4638      	mov	r0, r7
 801096c:	47c0      	blx	r8
 801096e:	3001      	adds	r0, #1
 8010970:	d01e      	beq.n	80109b0 <_printf_common+0xa4>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	f003 0306 	and.w	r3, r3, #6
 801097a:	2b04      	cmp	r3, #4
 801097c:	bf02      	ittt	eq
 801097e:	68e5      	ldreq	r5, [r4, #12]
 8010980:	6833      	ldreq	r3, [r6, #0]
 8010982:	1aed      	subeq	r5, r5, r3
 8010984:	68a3      	ldr	r3, [r4, #8]
 8010986:	bf0c      	ite	eq
 8010988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801098c:	2500      	movne	r5, #0
 801098e:	4293      	cmp	r3, r2
 8010990:	bfc4      	itt	gt
 8010992:	1a9b      	subgt	r3, r3, r2
 8010994:	18ed      	addgt	r5, r5, r3
 8010996:	2600      	movs	r6, #0
 8010998:	341a      	adds	r4, #26
 801099a:	42b5      	cmp	r5, r6
 801099c:	d11a      	bne.n	80109d4 <_printf_common+0xc8>
 801099e:	2000      	movs	r0, #0
 80109a0:	e008      	b.n	80109b4 <_printf_common+0xa8>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4652      	mov	r2, sl
 80109a6:	4649      	mov	r1, r9
 80109a8:	4638      	mov	r0, r7
 80109aa:	47c0      	blx	r8
 80109ac:	3001      	adds	r0, #1
 80109ae:	d103      	bne.n	80109b8 <_printf_common+0xac>
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	3501      	adds	r5, #1
 80109ba:	e7c6      	b.n	801094a <_printf_common+0x3e>
 80109bc:	18e1      	adds	r1, r4, r3
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	2030      	movs	r0, #48	; 0x30
 80109c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109c6:	4422      	add	r2, r4
 80109c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109d0:	3302      	adds	r3, #2
 80109d2:	e7c7      	b.n	8010964 <_printf_common+0x58>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4622      	mov	r2, r4
 80109d8:	4649      	mov	r1, r9
 80109da:	4638      	mov	r0, r7
 80109dc:	47c0      	blx	r8
 80109de:	3001      	adds	r0, #1
 80109e0:	d0e6      	beq.n	80109b0 <_printf_common+0xa4>
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7d9      	b.n	801099a <_printf_common+0x8e>
	...

080109e8 <_printf_i>:
 80109e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	7e0f      	ldrb	r7, [r1, #24]
 80109ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109f0:	2f78      	cmp	r7, #120	; 0x78
 80109f2:	4691      	mov	r9, r2
 80109f4:	4680      	mov	r8, r0
 80109f6:	460c      	mov	r4, r1
 80109f8:	469a      	mov	sl, r3
 80109fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109fe:	d807      	bhi.n	8010a10 <_printf_i+0x28>
 8010a00:	2f62      	cmp	r7, #98	; 0x62
 8010a02:	d80a      	bhi.n	8010a1a <_printf_i+0x32>
 8010a04:	2f00      	cmp	r7, #0
 8010a06:	f000 80d4 	beq.w	8010bb2 <_printf_i+0x1ca>
 8010a0a:	2f58      	cmp	r7, #88	; 0x58
 8010a0c:	f000 80c0 	beq.w	8010b90 <_printf_i+0x1a8>
 8010a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a18:	e03a      	b.n	8010a90 <_printf_i+0xa8>
 8010a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a1e:	2b15      	cmp	r3, #21
 8010a20:	d8f6      	bhi.n	8010a10 <_printf_i+0x28>
 8010a22:	a101      	add	r1, pc, #4	; (adr r1, 8010a28 <_printf_i+0x40>)
 8010a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a28:	08010a81 	.word	0x08010a81
 8010a2c:	08010a95 	.word	0x08010a95
 8010a30:	08010a11 	.word	0x08010a11
 8010a34:	08010a11 	.word	0x08010a11
 8010a38:	08010a11 	.word	0x08010a11
 8010a3c:	08010a11 	.word	0x08010a11
 8010a40:	08010a95 	.word	0x08010a95
 8010a44:	08010a11 	.word	0x08010a11
 8010a48:	08010a11 	.word	0x08010a11
 8010a4c:	08010a11 	.word	0x08010a11
 8010a50:	08010a11 	.word	0x08010a11
 8010a54:	08010b99 	.word	0x08010b99
 8010a58:	08010ac1 	.word	0x08010ac1
 8010a5c:	08010b53 	.word	0x08010b53
 8010a60:	08010a11 	.word	0x08010a11
 8010a64:	08010a11 	.word	0x08010a11
 8010a68:	08010bbb 	.word	0x08010bbb
 8010a6c:	08010a11 	.word	0x08010a11
 8010a70:	08010ac1 	.word	0x08010ac1
 8010a74:	08010a11 	.word	0x08010a11
 8010a78:	08010a11 	.word	0x08010a11
 8010a7c:	08010b5b 	.word	0x08010b5b
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	602a      	str	r2, [r5, #0]
 8010a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a90:	2301      	movs	r3, #1
 8010a92:	e09f      	b.n	8010bd4 <_printf_i+0x1ec>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	682b      	ldr	r3, [r5, #0]
 8010a98:	0607      	lsls	r7, r0, #24
 8010a9a:	f103 0104 	add.w	r1, r3, #4
 8010a9e:	6029      	str	r1, [r5, #0]
 8010aa0:	d501      	bpl.n	8010aa6 <_printf_i+0xbe>
 8010aa2:	681e      	ldr	r6, [r3, #0]
 8010aa4:	e003      	b.n	8010aae <_printf_i+0xc6>
 8010aa6:	0646      	lsls	r6, r0, #25
 8010aa8:	d5fb      	bpl.n	8010aa2 <_printf_i+0xba>
 8010aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010aae:	2e00      	cmp	r6, #0
 8010ab0:	da03      	bge.n	8010aba <_printf_i+0xd2>
 8010ab2:	232d      	movs	r3, #45	; 0x2d
 8010ab4:	4276      	negs	r6, r6
 8010ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aba:	485a      	ldr	r0, [pc, #360]	; (8010c24 <_printf_i+0x23c>)
 8010abc:	230a      	movs	r3, #10
 8010abe:	e012      	b.n	8010ae6 <_printf_i+0xfe>
 8010ac0:	682b      	ldr	r3, [r5, #0]
 8010ac2:	6820      	ldr	r0, [r4, #0]
 8010ac4:	1d19      	adds	r1, r3, #4
 8010ac6:	6029      	str	r1, [r5, #0]
 8010ac8:	0605      	lsls	r5, r0, #24
 8010aca:	d501      	bpl.n	8010ad0 <_printf_i+0xe8>
 8010acc:	681e      	ldr	r6, [r3, #0]
 8010ace:	e002      	b.n	8010ad6 <_printf_i+0xee>
 8010ad0:	0641      	lsls	r1, r0, #25
 8010ad2:	d5fb      	bpl.n	8010acc <_printf_i+0xe4>
 8010ad4:	881e      	ldrh	r6, [r3, #0]
 8010ad6:	4853      	ldr	r0, [pc, #332]	; (8010c24 <_printf_i+0x23c>)
 8010ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8010ada:	bf0c      	ite	eq
 8010adc:	2308      	moveq	r3, #8
 8010ade:	230a      	movne	r3, #10
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ae6:	6865      	ldr	r5, [r4, #4]
 8010ae8:	60a5      	str	r5, [r4, #8]
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	bfa2      	ittt	ge
 8010aee:	6821      	ldrge	r1, [r4, #0]
 8010af0:	f021 0104 	bicge.w	r1, r1, #4
 8010af4:	6021      	strge	r1, [r4, #0]
 8010af6:	b90e      	cbnz	r6, 8010afc <_printf_i+0x114>
 8010af8:	2d00      	cmp	r5, #0
 8010afa:	d04b      	beq.n	8010b94 <_printf_i+0x1ac>
 8010afc:	4615      	mov	r5, r2
 8010afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b02:	fb03 6711 	mls	r7, r3, r1, r6
 8010b06:	5dc7      	ldrb	r7, [r0, r7]
 8010b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b0c:	4637      	mov	r7, r6
 8010b0e:	42bb      	cmp	r3, r7
 8010b10:	460e      	mov	r6, r1
 8010b12:	d9f4      	bls.n	8010afe <_printf_i+0x116>
 8010b14:	2b08      	cmp	r3, #8
 8010b16:	d10b      	bne.n	8010b30 <_printf_i+0x148>
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	07de      	lsls	r6, r3, #31
 8010b1c:	d508      	bpl.n	8010b30 <_printf_i+0x148>
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	6861      	ldr	r1, [r4, #4]
 8010b22:	4299      	cmp	r1, r3
 8010b24:	bfde      	ittt	le
 8010b26:	2330      	movle	r3, #48	; 0x30
 8010b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b30:	1b52      	subs	r2, r2, r5
 8010b32:	6122      	str	r2, [r4, #16]
 8010b34:	f8cd a000 	str.w	sl, [sp]
 8010b38:	464b      	mov	r3, r9
 8010b3a:	aa03      	add	r2, sp, #12
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4640      	mov	r0, r8
 8010b40:	f7ff fee4 	bl	801090c <_printf_common>
 8010b44:	3001      	adds	r0, #1
 8010b46:	d14a      	bne.n	8010bde <_printf_i+0x1f6>
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	b004      	add	sp, #16
 8010b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	f043 0320 	orr.w	r3, r3, #32
 8010b58:	6023      	str	r3, [r4, #0]
 8010b5a:	4833      	ldr	r0, [pc, #204]	; (8010c28 <_printf_i+0x240>)
 8010b5c:	2778      	movs	r7, #120	; 0x78
 8010b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	6829      	ldr	r1, [r5, #0]
 8010b66:	061f      	lsls	r7, r3, #24
 8010b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b6c:	d402      	bmi.n	8010b74 <_printf_i+0x18c>
 8010b6e:	065f      	lsls	r7, r3, #25
 8010b70:	bf48      	it	mi
 8010b72:	b2b6      	uxthmi	r6, r6
 8010b74:	07df      	lsls	r7, r3, #31
 8010b76:	bf48      	it	mi
 8010b78:	f043 0320 	orrmi.w	r3, r3, #32
 8010b7c:	6029      	str	r1, [r5, #0]
 8010b7e:	bf48      	it	mi
 8010b80:	6023      	strmi	r3, [r4, #0]
 8010b82:	b91e      	cbnz	r6, 8010b8c <_printf_i+0x1a4>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	f023 0320 	bic.w	r3, r3, #32
 8010b8a:	6023      	str	r3, [r4, #0]
 8010b8c:	2310      	movs	r3, #16
 8010b8e:	e7a7      	b.n	8010ae0 <_printf_i+0xf8>
 8010b90:	4824      	ldr	r0, [pc, #144]	; (8010c24 <_printf_i+0x23c>)
 8010b92:	e7e4      	b.n	8010b5e <_printf_i+0x176>
 8010b94:	4615      	mov	r5, r2
 8010b96:	e7bd      	b.n	8010b14 <_printf_i+0x12c>
 8010b98:	682b      	ldr	r3, [r5, #0]
 8010b9a:	6826      	ldr	r6, [r4, #0]
 8010b9c:	6961      	ldr	r1, [r4, #20]
 8010b9e:	1d18      	adds	r0, r3, #4
 8010ba0:	6028      	str	r0, [r5, #0]
 8010ba2:	0635      	lsls	r5, r6, #24
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	d501      	bpl.n	8010bac <_printf_i+0x1c4>
 8010ba8:	6019      	str	r1, [r3, #0]
 8010baa:	e002      	b.n	8010bb2 <_printf_i+0x1ca>
 8010bac:	0670      	lsls	r0, r6, #25
 8010bae:	d5fb      	bpl.n	8010ba8 <_printf_i+0x1c0>
 8010bb0:	8019      	strh	r1, [r3, #0]
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	6123      	str	r3, [r4, #16]
 8010bb6:	4615      	mov	r5, r2
 8010bb8:	e7bc      	b.n	8010b34 <_printf_i+0x14c>
 8010bba:	682b      	ldr	r3, [r5, #0]
 8010bbc:	1d1a      	adds	r2, r3, #4
 8010bbe:	602a      	str	r2, [r5, #0]
 8010bc0:	681d      	ldr	r5, [r3, #0]
 8010bc2:	6862      	ldr	r2, [r4, #4]
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f7ef fb22 	bl	8000210 <memchr>
 8010bcc:	b108      	cbz	r0, 8010bd2 <_printf_i+0x1ea>
 8010bce:	1b40      	subs	r0, r0, r5
 8010bd0:	6060      	str	r0, [r4, #4]
 8010bd2:	6863      	ldr	r3, [r4, #4]
 8010bd4:	6123      	str	r3, [r4, #16]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bdc:	e7aa      	b.n	8010b34 <_printf_i+0x14c>
 8010bde:	6923      	ldr	r3, [r4, #16]
 8010be0:	462a      	mov	r2, r5
 8010be2:	4649      	mov	r1, r9
 8010be4:	4640      	mov	r0, r8
 8010be6:	47d0      	blx	sl
 8010be8:	3001      	adds	r0, #1
 8010bea:	d0ad      	beq.n	8010b48 <_printf_i+0x160>
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	079b      	lsls	r3, r3, #30
 8010bf0:	d413      	bmi.n	8010c1a <_printf_i+0x232>
 8010bf2:	68e0      	ldr	r0, [r4, #12]
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	4298      	cmp	r0, r3
 8010bf8:	bfb8      	it	lt
 8010bfa:	4618      	movlt	r0, r3
 8010bfc:	e7a6      	b.n	8010b4c <_printf_i+0x164>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	4632      	mov	r2, r6
 8010c02:	4649      	mov	r1, r9
 8010c04:	4640      	mov	r0, r8
 8010c06:	47d0      	blx	sl
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d09d      	beq.n	8010b48 <_printf_i+0x160>
 8010c0c:	3501      	adds	r5, #1
 8010c0e:	68e3      	ldr	r3, [r4, #12]
 8010c10:	9903      	ldr	r1, [sp, #12]
 8010c12:	1a5b      	subs	r3, r3, r1
 8010c14:	42ab      	cmp	r3, r5
 8010c16:	dcf2      	bgt.n	8010bfe <_printf_i+0x216>
 8010c18:	e7eb      	b.n	8010bf2 <_printf_i+0x20a>
 8010c1a:	2500      	movs	r5, #0
 8010c1c:	f104 0619 	add.w	r6, r4, #25
 8010c20:	e7f5      	b.n	8010c0e <_printf_i+0x226>
 8010c22:	bf00      	nop
 8010c24:	08011ee5 	.word	0x08011ee5
 8010c28:	08011ef6 	.word	0x08011ef6

08010c2c <_scanf_chars>:
 8010c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c30:	4615      	mov	r5, r2
 8010c32:	688a      	ldr	r2, [r1, #8]
 8010c34:	4680      	mov	r8, r0
 8010c36:	460c      	mov	r4, r1
 8010c38:	b932      	cbnz	r2, 8010c48 <_scanf_chars+0x1c>
 8010c3a:	698a      	ldr	r2, [r1, #24]
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	bf0c      	ite	eq
 8010c40:	2201      	moveq	r2, #1
 8010c42:	f04f 32ff 	movne.w	r2, #4294967295
 8010c46:	608a      	str	r2, [r1, #8]
 8010c48:	6822      	ldr	r2, [r4, #0]
 8010c4a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010cdc <_scanf_chars+0xb0>
 8010c4e:	06d1      	lsls	r1, r2, #27
 8010c50:	bf5f      	itttt	pl
 8010c52:	681a      	ldrpl	r2, [r3, #0]
 8010c54:	1d11      	addpl	r1, r2, #4
 8010c56:	6019      	strpl	r1, [r3, #0]
 8010c58:	6816      	ldrpl	r6, [r2, #0]
 8010c5a:	2700      	movs	r7, #0
 8010c5c:	69a0      	ldr	r0, [r4, #24]
 8010c5e:	b188      	cbz	r0, 8010c84 <_scanf_chars+0x58>
 8010c60:	2801      	cmp	r0, #1
 8010c62:	d107      	bne.n	8010c74 <_scanf_chars+0x48>
 8010c64:	682a      	ldr	r2, [r5, #0]
 8010c66:	7811      	ldrb	r1, [r2, #0]
 8010c68:	6962      	ldr	r2, [r4, #20]
 8010c6a:	5c52      	ldrb	r2, [r2, r1]
 8010c6c:	b952      	cbnz	r2, 8010c84 <_scanf_chars+0x58>
 8010c6e:	2f00      	cmp	r7, #0
 8010c70:	d031      	beq.n	8010cd6 <_scanf_chars+0xaa>
 8010c72:	e022      	b.n	8010cba <_scanf_chars+0x8e>
 8010c74:	2802      	cmp	r0, #2
 8010c76:	d120      	bne.n	8010cba <_scanf_chars+0x8e>
 8010c78:	682b      	ldr	r3, [r5, #0]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010c80:	071b      	lsls	r3, r3, #28
 8010c82:	d41a      	bmi.n	8010cba <_scanf_chars+0x8e>
 8010c84:	6823      	ldr	r3, [r4, #0]
 8010c86:	06da      	lsls	r2, r3, #27
 8010c88:	bf5e      	ittt	pl
 8010c8a:	682b      	ldrpl	r3, [r5, #0]
 8010c8c:	781b      	ldrbpl	r3, [r3, #0]
 8010c8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010c92:	682a      	ldr	r2, [r5, #0]
 8010c94:	686b      	ldr	r3, [r5, #4]
 8010c96:	3201      	adds	r2, #1
 8010c98:	602a      	str	r2, [r5, #0]
 8010c9a:	68a2      	ldr	r2, [r4, #8]
 8010c9c:	3b01      	subs	r3, #1
 8010c9e:	3a01      	subs	r2, #1
 8010ca0:	606b      	str	r3, [r5, #4]
 8010ca2:	3701      	adds	r7, #1
 8010ca4:	60a2      	str	r2, [r4, #8]
 8010ca6:	b142      	cbz	r2, 8010cba <_scanf_chars+0x8e>
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dcd7      	bgt.n	8010c5c <_scanf_chars+0x30>
 8010cac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	4640      	mov	r0, r8
 8010cb4:	4798      	blx	r3
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d0d0      	beq.n	8010c5c <_scanf_chars+0x30>
 8010cba:	6823      	ldr	r3, [r4, #0]
 8010cbc:	f013 0310 	ands.w	r3, r3, #16
 8010cc0:	d105      	bne.n	8010cce <_scanf_chars+0xa2>
 8010cc2:	68e2      	ldr	r2, [r4, #12]
 8010cc4:	3201      	adds	r2, #1
 8010cc6:	60e2      	str	r2, [r4, #12]
 8010cc8:	69a2      	ldr	r2, [r4, #24]
 8010cca:	b102      	cbz	r2, 8010cce <_scanf_chars+0xa2>
 8010ccc:	7033      	strb	r3, [r6, #0]
 8010cce:	6923      	ldr	r3, [r4, #16]
 8010cd0:	443b      	add	r3, r7
 8010cd2:	6123      	str	r3, [r4, #16]
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cda:	bf00      	nop
 8010cdc:	08011be9 	.word	0x08011be9

08010ce0 <_scanf_i>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	4698      	mov	r8, r3
 8010ce6:	4b74      	ldr	r3, [pc, #464]	; (8010eb8 <_scanf_i+0x1d8>)
 8010ce8:	460c      	mov	r4, r1
 8010cea:	4682      	mov	sl, r0
 8010cec:	4616      	mov	r6, r2
 8010cee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	ab03      	add	r3, sp, #12
 8010cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010cfa:	4b70      	ldr	r3, [pc, #448]	; (8010ebc <_scanf_i+0x1dc>)
 8010cfc:	69a1      	ldr	r1, [r4, #24]
 8010cfe:	4a70      	ldr	r2, [pc, #448]	; (8010ec0 <_scanf_i+0x1e0>)
 8010d00:	2903      	cmp	r1, #3
 8010d02:	bf18      	it	ne
 8010d04:	461a      	movne	r2, r3
 8010d06:	68a3      	ldr	r3, [r4, #8]
 8010d08:	9201      	str	r2, [sp, #4]
 8010d0a:	1e5a      	subs	r2, r3, #1
 8010d0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010d10:	bf88      	it	hi
 8010d12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010d16:	4627      	mov	r7, r4
 8010d18:	bf82      	ittt	hi
 8010d1a:	eb03 0905 	addhi.w	r9, r3, r5
 8010d1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010d22:	60a3      	strhi	r3, [r4, #8]
 8010d24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010d28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010d2c:	bf98      	it	ls
 8010d2e:	f04f 0900 	movls.w	r9, #0
 8010d32:	6023      	str	r3, [r4, #0]
 8010d34:	463d      	mov	r5, r7
 8010d36:	f04f 0b00 	mov.w	fp, #0
 8010d3a:	6831      	ldr	r1, [r6, #0]
 8010d3c:	ab03      	add	r3, sp, #12
 8010d3e:	7809      	ldrb	r1, [r1, #0]
 8010d40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010d44:	2202      	movs	r2, #2
 8010d46:	f7ef fa63 	bl	8000210 <memchr>
 8010d4a:	b328      	cbz	r0, 8010d98 <_scanf_i+0xb8>
 8010d4c:	f1bb 0f01 	cmp.w	fp, #1
 8010d50:	d159      	bne.n	8010e06 <_scanf_i+0x126>
 8010d52:	6862      	ldr	r2, [r4, #4]
 8010d54:	b92a      	cbnz	r2, 8010d62 <_scanf_i+0x82>
 8010d56:	6822      	ldr	r2, [r4, #0]
 8010d58:	2308      	movs	r3, #8
 8010d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d5e:	6063      	str	r3, [r4, #4]
 8010d60:	6022      	str	r2, [r4, #0]
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010d68:	6022      	str	r2, [r4, #0]
 8010d6a:	68a2      	ldr	r2, [r4, #8]
 8010d6c:	1e51      	subs	r1, r2, #1
 8010d6e:	60a1      	str	r1, [r4, #8]
 8010d70:	b192      	cbz	r2, 8010d98 <_scanf_i+0xb8>
 8010d72:	6832      	ldr	r2, [r6, #0]
 8010d74:	1c51      	adds	r1, r2, #1
 8010d76:	6031      	str	r1, [r6, #0]
 8010d78:	7812      	ldrb	r2, [r2, #0]
 8010d7a:	f805 2b01 	strb.w	r2, [r5], #1
 8010d7e:	6872      	ldr	r2, [r6, #4]
 8010d80:	3a01      	subs	r2, #1
 8010d82:	2a00      	cmp	r2, #0
 8010d84:	6072      	str	r2, [r6, #4]
 8010d86:	dc07      	bgt.n	8010d98 <_scanf_i+0xb8>
 8010d88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	4650      	mov	r0, sl
 8010d90:	4790      	blx	r2
 8010d92:	2800      	cmp	r0, #0
 8010d94:	f040 8085 	bne.w	8010ea2 <_scanf_i+0x1c2>
 8010d98:	f10b 0b01 	add.w	fp, fp, #1
 8010d9c:	f1bb 0f03 	cmp.w	fp, #3
 8010da0:	d1cb      	bne.n	8010d3a <_scanf_i+0x5a>
 8010da2:	6863      	ldr	r3, [r4, #4]
 8010da4:	b90b      	cbnz	r3, 8010daa <_scanf_i+0xca>
 8010da6:	230a      	movs	r3, #10
 8010da8:	6063      	str	r3, [r4, #4]
 8010daa:	6863      	ldr	r3, [r4, #4]
 8010dac:	4945      	ldr	r1, [pc, #276]	; (8010ec4 <_scanf_i+0x1e4>)
 8010dae:	6960      	ldr	r0, [r4, #20]
 8010db0:	1ac9      	subs	r1, r1, r3
 8010db2:	f000 f937 	bl	8011024 <__sccl>
 8010db6:	f04f 0b00 	mov.w	fp, #0
 8010dba:	68a3      	ldr	r3, [r4, #8]
 8010dbc:	6822      	ldr	r2, [r4, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d03d      	beq.n	8010e3e <_scanf_i+0x15e>
 8010dc2:	6831      	ldr	r1, [r6, #0]
 8010dc4:	6960      	ldr	r0, [r4, #20]
 8010dc6:	f891 c000 	ldrb.w	ip, [r1]
 8010dca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d035      	beq.n	8010e3e <_scanf_i+0x15e>
 8010dd2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010dd6:	d124      	bne.n	8010e22 <_scanf_i+0x142>
 8010dd8:	0510      	lsls	r0, r2, #20
 8010dda:	d522      	bpl.n	8010e22 <_scanf_i+0x142>
 8010ddc:	f10b 0b01 	add.w	fp, fp, #1
 8010de0:	f1b9 0f00 	cmp.w	r9, #0
 8010de4:	d003      	beq.n	8010dee <_scanf_i+0x10e>
 8010de6:	3301      	adds	r3, #1
 8010de8:	f109 39ff 	add.w	r9, r9, #4294967295
 8010dec:	60a3      	str	r3, [r4, #8]
 8010dee:	6873      	ldr	r3, [r6, #4]
 8010df0:	3b01      	subs	r3, #1
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	6073      	str	r3, [r6, #4]
 8010df6:	dd1b      	ble.n	8010e30 <_scanf_i+0x150>
 8010df8:	6833      	ldr	r3, [r6, #0]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	6033      	str	r3, [r6, #0]
 8010dfe:	68a3      	ldr	r3, [r4, #8]
 8010e00:	3b01      	subs	r3, #1
 8010e02:	60a3      	str	r3, [r4, #8]
 8010e04:	e7d9      	b.n	8010dba <_scanf_i+0xda>
 8010e06:	f1bb 0f02 	cmp.w	fp, #2
 8010e0a:	d1ae      	bne.n	8010d6a <_scanf_i+0x8a>
 8010e0c:	6822      	ldr	r2, [r4, #0]
 8010e0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010e12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010e16:	d1bf      	bne.n	8010d98 <_scanf_i+0xb8>
 8010e18:	2310      	movs	r3, #16
 8010e1a:	6063      	str	r3, [r4, #4]
 8010e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010e20:	e7a2      	b.n	8010d68 <_scanf_i+0x88>
 8010e22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010e26:	6022      	str	r2, [r4, #0]
 8010e28:	780b      	ldrb	r3, [r1, #0]
 8010e2a:	f805 3b01 	strb.w	r3, [r5], #1
 8010e2e:	e7de      	b.n	8010dee <_scanf_i+0x10e>
 8010e30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e34:	4631      	mov	r1, r6
 8010e36:	4650      	mov	r0, sl
 8010e38:	4798      	blx	r3
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0df      	beq.n	8010dfe <_scanf_i+0x11e>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	05d9      	lsls	r1, r3, #23
 8010e42:	d50d      	bpl.n	8010e60 <_scanf_i+0x180>
 8010e44:	42bd      	cmp	r5, r7
 8010e46:	d909      	bls.n	8010e5c <_scanf_i+0x17c>
 8010e48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e50:	4632      	mov	r2, r6
 8010e52:	4650      	mov	r0, sl
 8010e54:	4798      	blx	r3
 8010e56:	f105 39ff 	add.w	r9, r5, #4294967295
 8010e5a:	464d      	mov	r5, r9
 8010e5c:	42bd      	cmp	r5, r7
 8010e5e:	d028      	beq.n	8010eb2 <_scanf_i+0x1d2>
 8010e60:	6822      	ldr	r2, [r4, #0]
 8010e62:	f012 0210 	ands.w	r2, r2, #16
 8010e66:	d113      	bne.n	8010e90 <_scanf_i+0x1b0>
 8010e68:	702a      	strb	r2, [r5, #0]
 8010e6a:	6863      	ldr	r3, [r4, #4]
 8010e6c:	9e01      	ldr	r6, [sp, #4]
 8010e6e:	4639      	mov	r1, r7
 8010e70:	4650      	mov	r0, sl
 8010e72:	47b0      	blx	r6
 8010e74:	f8d8 3000 	ldr.w	r3, [r8]
 8010e78:	6821      	ldr	r1, [r4, #0]
 8010e7a:	1d1a      	adds	r2, r3, #4
 8010e7c:	f8c8 2000 	str.w	r2, [r8]
 8010e80:	f011 0f20 	tst.w	r1, #32
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	d00f      	beq.n	8010ea8 <_scanf_i+0x1c8>
 8010e88:	6018      	str	r0, [r3, #0]
 8010e8a:	68e3      	ldr	r3, [r4, #12]
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	60e3      	str	r3, [r4, #12]
 8010e90:	6923      	ldr	r3, [r4, #16]
 8010e92:	1bed      	subs	r5, r5, r7
 8010e94:	445d      	add	r5, fp
 8010e96:	442b      	add	r3, r5
 8010e98:	6123      	str	r3, [r4, #16]
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	b007      	add	sp, #28
 8010e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea2:	f04f 0b00 	mov.w	fp, #0
 8010ea6:	e7ca      	b.n	8010e3e <_scanf_i+0x15e>
 8010ea8:	07ca      	lsls	r2, r1, #31
 8010eaa:	bf4c      	ite	mi
 8010eac:	8018      	strhmi	r0, [r3, #0]
 8010eae:	6018      	strpl	r0, [r3, #0]
 8010eb0:	e7eb      	b.n	8010e8a <_scanf_i+0x1aa>
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	e7f2      	b.n	8010e9c <_scanf_i+0x1bc>
 8010eb6:	bf00      	nop
 8010eb8:	08011a64 	.word	0x08011a64
 8010ebc:	08011395 	.word	0x08011395
 8010ec0:	080112ad 	.word	0x080112ad
 8010ec4:	08011f17 	.word	0x08011f17

08010ec8 <__sflush_r>:
 8010ec8:	898a      	ldrh	r2, [r1, #12]
 8010eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ece:	4605      	mov	r5, r0
 8010ed0:	0710      	lsls	r0, r2, #28
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	d458      	bmi.n	8010f88 <__sflush_r+0xc0>
 8010ed6:	684b      	ldr	r3, [r1, #4]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dc05      	bgt.n	8010ee8 <__sflush_r+0x20>
 8010edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	dc02      	bgt.n	8010ee8 <__sflush_r+0x20>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010eea:	2e00      	cmp	r6, #0
 8010eec:	d0f9      	beq.n	8010ee2 <__sflush_r+0x1a>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ef4:	682f      	ldr	r7, [r5, #0]
 8010ef6:	6a21      	ldr	r1, [r4, #32]
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	d032      	beq.n	8010f62 <__sflush_r+0x9a>
 8010efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010efe:	89a3      	ldrh	r3, [r4, #12]
 8010f00:	075a      	lsls	r2, r3, #29
 8010f02:	d505      	bpl.n	8010f10 <__sflush_r+0x48>
 8010f04:	6863      	ldr	r3, [r4, #4]
 8010f06:	1ac0      	subs	r0, r0, r3
 8010f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f0a:	b10b      	cbz	r3, 8010f10 <__sflush_r+0x48>
 8010f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f0e:	1ac0      	subs	r0, r0, r3
 8010f10:	2300      	movs	r3, #0
 8010f12:	4602      	mov	r2, r0
 8010f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f16:	6a21      	ldr	r1, [r4, #32]
 8010f18:	4628      	mov	r0, r5
 8010f1a:	47b0      	blx	r6
 8010f1c:	1c43      	adds	r3, r0, #1
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	d106      	bne.n	8010f30 <__sflush_r+0x68>
 8010f22:	6829      	ldr	r1, [r5, #0]
 8010f24:	291d      	cmp	r1, #29
 8010f26:	d82b      	bhi.n	8010f80 <__sflush_r+0xb8>
 8010f28:	4a29      	ldr	r2, [pc, #164]	; (8010fd0 <__sflush_r+0x108>)
 8010f2a:	410a      	asrs	r2, r1
 8010f2c:	07d6      	lsls	r6, r2, #31
 8010f2e:	d427      	bmi.n	8010f80 <__sflush_r+0xb8>
 8010f30:	2200      	movs	r2, #0
 8010f32:	6062      	str	r2, [r4, #4]
 8010f34:	04d9      	lsls	r1, r3, #19
 8010f36:	6922      	ldr	r2, [r4, #16]
 8010f38:	6022      	str	r2, [r4, #0]
 8010f3a:	d504      	bpl.n	8010f46 <__sflush_r+0x7e>
 8010f3c:	1c42      	adds	r2, r0, #1
 8010f3e:	d101      	bne.n	8010f44 <__sflush_r+0x7c>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	b903      	cbnz	r3, 8010f46 <__sflush_r+0x7e>
 8010f44:	6560      	str	r0, [r4, #84]	; 0x54
 8010f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f48:	602f      	str	r7, [r5, #0]
 8010f4a:	2900      	cmp	r1, #0
 8010f4c:	d0c9      	beq.n	8010ee2 <__sflush_r+0x1a>
 8010f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f52:	4299      	cmp	r1, r3
 8010f54:	d002      	beq.n	8010f5c <__sflush_r+0x94>
 8010f56:	4628      	mov	r0, r5
 8010f58:	f7fe f936 	bl	800f1c8 <_free_r>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	6360      	str	r0, [r4, #52]	; 0x34
 8010f60:	e7c0      	b.n	8010ee4 <__sflush_r+0x1c>
 8010f62:	2301      	movs	r3, #1
 8010f64:	4628      	mov	r0, r5
 8010f66:	47b0      	blx	r6
 8010f68:	1c41      	adds	r1, r0, #1
 8010f6a:	d1c8      	bne.n	8010efe <__sflush_r+0x36>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d0c5      	beq.n	8010efe <__sflush_r+0x36>
 8010f72:	2b1d      	cmp	r3, #29
 8010f74:	d001      	beq.n	8010f7a <__sflush_r+0xb2>
 8010f76:	2b16      	cmp	r3, #22
 8010f78:	d101      	bne.n	8010f7e <__sflush_r+0xb6>
 8010f7a:	602f      	str	r7, [r5, #0]
 8010f7c:	e7b1      	b.n	8010ee2 <__sflush_r+0x1a>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f84:	81a3      	strh	r3, [r4, #12]
 8010f86:	e7ad      	b.n	8010ee4 <__sflush_r+0x1c>
 8010f88:	690f      	ldr	r7, [r1, #16]
 8010f8a:	2f00      	cmp	r7, #0
 8010f8c:	d0a9      	beq.n	8010ee2 <__sflush_r+0x1a>
 8010f8e:	0793      	lsls	r3, r2, #30
 8010f90:	680e      	ldr	r6, [r1, #0]
 8010f92:	bf08      	it	eq
 8010f94:	694b      	ldreq	r3, [r1, #20]
 8010f96:	600f      	str	r7, [r1, #0]
 8010f98:	bf18      	it	ne
 8010f9a:	2300      	movne	r3, #0
 8010f9c:	eba6 0807 	sub.w	r8, r6, r7
 8010fa0:	608b      	str	r3, [r1, #8]
 8010fa2:	f1b8 0f00 	cmp.w	r8, #0
 8010fa6:	dd9c      	ble.n	8010ee2 <__sflush_r+0x1a>
 8010fa8:	6a21      	ldr	r1, [r4, #32]
 8010faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fac:	4643      	mov	r3, r8
 8010fae:	463a      	mov	r2, r7
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	47b0      	blx	r6
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	dc06      	bgt.n	8010fc6 <__sflush_r+0xfe>
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fbe:	81a3      	strh	r3, [r4, #12]
 8010fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc4:	e78e      	b.n	8010ee4 <__sflush_r+0x1c>
 8010fc6:	4407      	add	r7, r0
 8010fc8:	eba8 0800 	sub.w	r8, r8, r0
 8010fcc:	e7e9      	b.n	8010fa2 <__sflush_r+0xda>
 8010fce:	bf00      	nop
 8010fd0:	dfbffffe 	.word	0xdfbffffe

08010fd4 <_fflush_r>:
 8010fd4:	b538      	push	{r3, r4, r5, lr}
 8010fd6:	690b      	ldr	r3, [r1, #16]
 8010fd8:	4605      	mov	r5, r0
 8010fda:	460c      	mov	r4, r1
 8010fdc:	b913      	cbnz	r3, 8010fe4 <_fflush_r+0x10>
 8010fde:	2500      	movs	r5, #0
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}
 8010fe4:	b118      	cbz	r0, 8010fee <_fflush_r+0x1a>
 8010fe6:	6a03      	ldr	r3, [r0, #32]
 8010fe8:	b90b      	cbnz	r3, 8010fee <_fflush_r+0x1a>
 8010fea:	f7fd ff01 	bl	800edf0 <__sinit>
 8010fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d0f3      	beq.n	8010fde <_fflush_r+0xa>
 8010ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ff8:	07d0      	lsls	r0, r2, #31
 8010ffa:	d404      	bmi.n	8011006 <_fflush_r+0x32>
 8010ffc:	0599      	lsls	r1, r3, #22
 8010ffe:	d402      	bmi.n	8011006 <_fflush_r+0x32>
 8011000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011002:	f7fe f8be 	bl	800f182 <__retarget_lock_acquire_recursive>
 8011006:	4628      	mov	r0, r5
 8011008:	4621      	mov	r1, r4
 801100a:	f7ff ff5d 	bl	8010ec8 <__sflush_r>
 801100e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011010:	07da      	lsls	r2, r3, #31
 8011012:	4605      	mov	r5, r0
 8011014:	d4e4      	bmi.n	8010fe0 <_fflush_r+0xc>
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	059b      	lsls	r3, r3, #22
 801101a:	d4e1      	bmi.n	8010fe0 <_fflush_r+0xc>
 801101c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801101e:	f7fe f8b1 	bl	800f184 <__retarget_lock_release_recursive>
 8011022:	e7dd      	b.n	8010fe0 <_fflush_r+0xc>

08011024 <__sccl>:
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	780b      	ldrb	r3, [r1, #0]
 8011028:	4604      	mov	r4, r0
 801102a:	2b5e      	cmp	r3, #94	; 0x5e
 801102c:	bf0b      	itete	eq
 801102e:	784b      	ldrbeq	r3, [r1, #1]
 8011030:	1c4a      	addne	r2, r1, #1
 8011032:	1c8a      	addeq	r2, r1, #2
 8011034:	2100      	movne	r1, #0
 8011036:	bf08      	it	eq
 8011038:	2101      	moveq	r1, #1
 801103a:	3801      	subs	r0, #1
 801103c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011040:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011044:	42a8      	cmp	r0, r5
 8011046:	d1fb      	bne.n	8011040 <__sccl+0x1c>
 8011048:	b90b      	cbnz	r3, 801104e <__sccl+0x2a>
 801104a:	1e50      	subs	r0, r2, #1
 801104c:	bd70      	pop	{r4, r5, r6, pc}
 801104e:	f081 0101 	eor.w	r1, r1, #1
 8011052:	54e1      	strb	r1, [r4, r3]
 8011054:	4610      	mov	r0, r2
 8011056:	4602      	mov	r2, r0
 8011058:	f812 5b01 	ldrb.w	r5, [r2], #1
 801105c:	2d2d      	cmp	r5, #45	; 0x2d
 801105e:	d005      	beq.n	801106c <__sccl+0x48>
 8011060:	2d5d      	cmp	r5, #93	; 0x5d
 8011062:	d016      	beq.n	8011092 <__sccl+0x6e>
 8011064:	2d00      	cmp	r5, #0
 8011066:	d0f1      	beq.n	801104c <__sccl+0x28>
 8011068:	462b      	mov	r3, r5
 801106a:	e7f2      	b.n	8011052 <__sccl+0x2e>
 801106c:	7846      	ldrb	r6, [r0, #1]
 801106e:	2e5d      	cmp	r6, #93	; 0x5d
 8011070:	d0fa      	beq.n	8011068 <__sccl+0x44>
 8011072:	42b3      	cmp	r3, r6
 8011074:	dcf8      	bgt.n	8011068 <__sccl+0x44>
 8011076:	3002      	adds	r0, #2
 8011078:	461a      	mov	r2, r3
 801107a:	3201      	adds	r2, #1
 801107c:	4296      	cmp	r6, r2
 801107e:	54a1      	strb	r1, [r4, r2]
 8011080:	dcfb      	bgt.n	801107a <__sccl+0x56>
 8011082:	1af2      	subs	r2, r6, r3
 8011084:	3a01      	subs	r2, #1
 8011086:	1c5d      	adds	r5, r3, #1
 8011088:	42b3      	cmp	r3, r6
 801108a:	bfa8      	it	ge
 801108c:	2200      	movge	r2, #0
 801108e:	18ab      	adds	r3, r5, r2
 8011090:	e7e1      	b.n	8011056 <__sccl+0x32>
 8011092:	4610      	mov	r0, r2
 8011094:	e7da      	b.n	801104c <__sccl+0x28>

08011096 <__submore>:
 8011096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801109a:	460c      	mov	r4, r1
 801109c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801109e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a2:	4299      	cmp	r1, r3
 80110a4:	d11d      	bne.n	80110e2 <__submore+0x4c>
 80110a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80110aa:	f7fc ff37 	bl	800df1c <_malloc_r>
 80110ae:	b918      	cbnz	r0, 80110b8 <__submore+0x22>
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295
 80110b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80110be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80110c2:	6360      	str	r0, [r4, #52]	; 0x34
 80110c4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80110c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80110cc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80110d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80110d4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80110d8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80110dc:	6020      	str	r0, [r4, #0]
 80110de:	2000      	movs	r0, #0
 80110e0:	e7e8      	b.n	80110b4 <__submore+0x1e>
 80110e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80110e4:	0077      	lsls	r7, r6, #1
 80110e6:	463a      	mov	r2, r7
 80110e8:	f7fc ffac 	bl	800e044 <_realloc_r>
 80110ec:	4605      	mov	r5, r0
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d0de      	beq.n	80110b0 <__submore+0x1a>
 80110f2:	eb00 0806 	add.w	r8, r0, r6
 80110f6:	4601      	mov	r1, r0
 80110f8:	4632      	mov	r2, r6
 80110fa:	4640      	mov	r0, r8
 80110fc:	f7fe f84b 	bl	800f196 <memcpy>
 8011100:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011104:	f8c4 8000 	str.w	r8, [r4]
 8011108:	e7e9      	b.n	80110de <__submore+0x48>

0801110a <memmove>:
 801110a:	4288      	cmp	r0, r1
 801110c:	b510      	push	{r4, lr}
 801110e:	eb01 0402 	add.w	r4, r1, r2
 8011112:	d902      	bls.n	801111a <memmove+0x10>
 8011114:	4284      	cmp	r4, r0
 8011116:	4623      	mov	r3, r4
 8011118:	d807      	bhi.n	801112a <memmove+0x20>
 801111a:	1e43      	subs	r3, r0, #1
 801111c:	42a1      	cmp	r1, r4
 801111e:	d008      	beq.n	8011132 <memmove+0x28>
 8011120:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011124:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011128:	e7f8      	b.n	801111c <memmove+0x12>
 801112a:	4402      	add	r2, r0
 801112c:	4601      	mov	r1, r0
 801112e:	428a      	cmp	r2, r1
 8011130:	d100      	bne.n	8011134 <memmove+0x2a>
 8011132:	bd10      	pop	{r4, pc}
 8011134:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011138:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801113c:	e7f7      	b.n	801112e <memmove+0x24>
	...

08011140 <__assert_func>:
 8011140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011142:	4614      	mov	r4, r2
 8011144:	461a      	mov	r2, r3
 8011146:	4b09      	ldr	r3, [pc, #36]	; (801116c <__assert_func+0x2c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4605      	mov	r5, r0
 801114c:	68d8      	ldr	r0, [r3, #12]
 801114e:	b14c      	cbz	r4, 8011164 <__assert_func+0x24>
 8011150:	4b07      	ldr	r3, [pc, #28]	; (8011170 <__assert_func+0x30>)
 8011152:	9100      	str	r1, [sp, #0]
 8011154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011158:	4906      	ldr	r1, [pc, #24]	; (8011174 <__assert_func+0x34>)
 801115a:	462b      	mov	r3, r5
 801115c:	f000 f91c 	bl	8011398 <fiprintf>
 8011160:	f000 f92c 	bl	80113bc <abort>
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <__assert_func+0x38>)
 8011166:	461c      	mov	r4, r3
 8011168:	e7f3      	b.n	8011152 <__assert_func+0x12>
 801116a:	bf00      	nop
 801116c:	20000348 	.word	0x20000348
 8011170:	08011f22 	.word	0x08011f22
 8011174:	08011f2f 	.word	0x08011f2f
 8011178:	08011f5d 	.word	0x08011f5d

0801117c <_calloc_r>:
 801117c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801117e:	fba1 2402 	umull	r2, r4, r1, r2
 8011182:	b94c      	cbnz	r4, 8011198 <_calloc_r+0x1c>
 8011184:	4611      	mov	r1, r2
 8011186:	9201      	str	r2, [sp, #4]
 8011188:	f7fc fec8 	bl	800df1c <_malloc_r>
 801118c:	9a01      	ldr	r2, [sp, #4]
 801118e:	4605      	mov	r5, r0
 8011190:	b930      	cbnz	r0, 80111a0 <_calloc_r+0x24>
 8011192:	4628      	mov	r0, r5
 8011194:	b003      	add	sp, #12
 8011196:	bd30      	pop	{r4, r5, pc}
 8011198:	220c      	movs	r2, #12
 801119a:	6002      	str	r2, [r0, #0]
 801119c:	2500      	movs	r5, #0
 801119e:	e7f8      	b.n	8011192 <_calloc_r+0x16>
 80111a0:	4621      	mov	r1, r4
 80111a2:	f7fd fefc 	bl	800ef9e <memset>
 80111a6:	e7f4      	b.n	8011192 <_calloc_r+0x16>

080111a8 <_strtol_l.constprop.0>:
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ae:	d001      	beq.n	80111b4 <_strtol_l.constprop.0+0xc>
 80111b0:	2b24      	cmp	r3, #36	; 0x24
 80111b2:	d906      	bls.n	80111c2 <_strtol_l.constprop.0+0x1a>
 80111b4:	f7fd ffba 	bl	800f12c <__errno>
 80111b8:	2316      	movs	r3, #22
 80111ba:	6003      	str	r3, [r0, #0]
 80111bc:	2000      	movs	r0, #0
 80111be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80112a8 <_strtol_l.constprop.0+0x100>
 80111c6:	460d      	mov	r5, r1
 80111c8:	462e      	mov	r6, r5
 80111ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80111d2:	f017 0708 	ands.w	r7, r7, #8
 80111d6:	d1f7      	bne.n	80111c8 <_strtol_l.constprop.0+0x20>
 80111d8:	2c2d      	cmp	r4, #45	; 0x2d
 80111da:	d132      	bne.n	8011242 <_strtol_l.constprop.0+0x9a>
 80111dc:	782c      	ldrb	r4, [r5, #0]
 80111de:	2701      	movs	r7, #1
 80111e0:	1cb5      	adds	r5, r6, #2
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d05b      	beq.n	801129e <_strtol_l.constprop.0+0xf6>
 80111e6:	2b10      	cmp	r3, #16
 80111e8:	d109      	bne.n	80111fe <_strtol_l.constprop.0+0x56>
 80111ea:	2c30      	cmp	r4, #48	; 0x30
 80111ec:	d107      	bne.n	80111fe <_strtol_l.constprop.0+0x56>
 80111ee:	782c      	ldrb	r4, [r5, #0]
 80111f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80111f4:	2c58      	cmp	r4, #88	; 0x58
 80111f6:	d14d      	bne.n	8011294 <_strtol_l.constprop.0+0xec>
 80111f8:	786c      	ldrb	r4, [r5, #1]
 80111fa:	2310      	movs	r3, #16
 80111fc:	3502      	adds	r5, #2
 80111fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011202:	f108 38ff 	add.w	r8, r8, #4294967295
 8011206:	f04f 0e00 	mov.w	lr, #0
 801120a:	fbb8 f9f3 	udiv	r9, r8, r3
 801120e:	4676      	mov	r6, lr
 8011210:	fb03 8a19 	mls	sl, r3, r9, r8
 8011214:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011218:	f1bc 0f09 	cmp.w	ip, #9
 801121c:	d816      	bhi.n	801124c <_strtol_l.constprop.0+0xa4>
 801121e:	4664      	mov	r4, ip
 8011220:	42a3      	cmp	r3, r4
 8011222:	dd24      	ble.n	801126e <_strtol_l.constprop.0+0xc6>
 8011224:	f1be 3fff 	cmp.w	lr, #4294967295
 8011228:	d008      	beq.n	801123c <_strtol_l.constprop.0+0x94>
 801122a:	45b1      	cmp	r9, r6
 801122c:	d31c      	bcc.n	8011268 <_strtol_l.constprop.0+0xc0>
 801122e:	d101      	bne.n	8011234 <_strtol_l.constprop.0+0x8c>
 8011230:	45a2      	cmp	sl, r4
 8011232:	db19      	blt.n	8011268 <_strtol_l.constprop.0+0xc0>
 8011234:	fb06 4603 	mla	r6, r6, r3, r4
 8011238:	f04f 0e01 	mov.w	lr, #1
 801123c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011240:	e7e8      	b.n	8011214 <_strtol_l.constprop.0+0x6c>
 8011242:	2c2b      	cmp	r4, #43	; 0x2b
 8011244:	bf04      	itt	eq
 8011246:	782c      	ldrbeq	r4, [r5, #0]
 8011248:	1cb5      	addeq	r5, r6, #2
 801124a:	e7ca      	b.n	80111e2 <_strtol_l.constprop.0+0x3a>
 801124c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011250:	f1bc 0f19 	cmp.w	ip, #25
 8011254:	d801      	bhi.n	801125a <_strtol_l.constprop.0+0xb2>
 8011256:	3c37      	subs	r4, #55	; 0x37
 8011258:	e7e2      	b.n	8011220 <_strtol_l.constprop.0+0x78>
 801125a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801125e:	f1bc 0f19 	cmp.w	ip, #25
 8011262:	d804      	bhi.n	801126e <_strtol_l.constprop.0+0xc6>
 8011264:	3c57      	subs	r4, #87	; 0x57
 8011266:	e7db      	b.n	8011220 <_strtol_l.constprop.0+0x78>
 8011268:	f04f 3eff 	mov.w	lr, #4294967295
 801126c:	e7e6      	b.n	801123c <_strtol_l.constprop.0+0x94>
 801126e:	f1be 3fff 	cmp.w	lr, #4294967295
 8011272:	d105      	bne.n	8011280 <_strtol_l.constprop.0+0xd8>
 8011274:	2322      	movs	r3, #34	; 0x22
 8011276:	6003      	str	r3, [r0, #0]
 8011278:	4646      	mov	r6, r8
 801127a:	b942      	cbnz	r2, 801128e <_strtol_l.constprop.0+0xe6>
 801127c:	4630      	mov	r0, r6
 801127e:	e79e      	b.n	80111be <_strtol_l.constprop.0+0x16>
 8011280:	b107      	cbz	r7, 8011284 <_strtol_l.constprop.0+0xdc>
 8011282:	4276      	negs	r6, r6
 8011284:	2a00      	cmp	r2, #0
 8011286:	d0f9      	beq.n	801127c <_strtol_l.constprop.0+0xd4>
 8011288:	f1be 0f00 	cmp.w	lr, #0
 801128c:	d000      	beq.n	8011290 <_strtol_l.constprop.0+0xe8>
 801128e:	1e69      	subs	r1, r5, #1
 8011290:	6011      	str	r1, [r2, #0]
 8011292:	e7f3      	b.n	801127c <_strtol_l.constprop.0+0xd4>
 8011294:	2430      	movs	r4, #48	; 0x30
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1b1      	bne.n	80111fe <_strtol_l.constprop.0+0x56>
 801129a:	2308      	movs	r3, #8
 801129c:	e7af      	b.n	80111fe <_strtol_l.constprop.0+0x56>
 801129e:	2c30      	cmp	r4, #48	; 0x30
 80112a0:	d0a5      	beq.n	80111ee <_strtol_l.constprop.0+0x46>
 80112a2:	230a      	movs	r3, #10
 80112a4:	e7ab      	b.n	80111fe <_strtol_l.constprop.0+0x56>
 80112a6:	bf00      	nop
 80112a8:	08011be9 	.word	0x08011be9

080112ac <_strtol_r>:
 80112ac:	f7ff bf7c 	b.w	80111a8 <_strtol_l.constprop.0>

080112b0 <_strtoul_l.constprop.0>:
 80112b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112b4:	4f36      	ldr	r7, [pc, #216]	; (8011390 <_strtoul_l.constprop.0+0xe0>)
 80112b6:	4686      	mov	lr, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	4628      	mov	r0, r5
 80112bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112c0:	5d3e      	ldrb	r6, [r7, r4]
 80112c2:	f016 0608 	ands.w	r6, r6, #8
 80112c6:	d1f8      	bne.n	80112ba <_strtoul_l.constprop.0+0xa>
 80112c8:	2c2d      	cmp	r4, #45	; 0x2d
 80112ca:	d130      	bne.n	801132e <_strtoul_l.constprop.0+0x7e>
 80112cc:	782c      	ldrb	r4, [r5, #0]
 80112ce:	2601      	movs	r6, #1
 80112d0:	1c85      	adds	r5, r0, #2
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d057      	beq.n	8011386 <_strtoul_l.constprop.0+0xd6>
 80112d6:	2b10      	cmp	r3, #16
 80112d8:	d109      	bne.n	80112ee <_strtoul_l.constprop.0+0x3e>
 80112da:	2c30      	cmp	r4, #48	; 0x30
 80112dc:	d107      	bne.n	80112ee <_strtoul_l.constprop.0+0x3e>
 80112de:	7828      	ldrb	r0, [r5, #0]
 80112e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80112e4:	2858      	cmp	r0, #88	; 0x58
 80112e6:	d149      	bne.n	801137c <_strtoul_l.constprop.0+0xcc>
 80112e8:	786c      	ldrb	r4, [r5, #1]
 80112ea:	2310      	movs	r3, #16
 80112ec:	3502      	adds	r5, #2
 80112ee:	f04f 38ff 	mov.w	r8, #4294967295
 80112f2:	2700      	movs	r7, #0
 80112f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80112f8:	fb03 f908 	mul.w	r9, r3, r8
 80112fc:	ea6f 0909 	mvn.w	r9, r9
 8011300:	4638      	mov	r0, r7
 8011302:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011306:	f1bc 0f09 	cmp.w	ip, #9
 801130a:	d815      	bhi.n	8011338 <_strtoul_l.constprop.0+0x88>
 801130c:	4664      	mov	r4, ip
 801130e:	42a3      	cmp	r3, r4
 8011310:	dd23      	ble.n	801135a <_strtoul_l.constprop.0+0xaa>
 8011312:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011316:	d007      	beq.n	8011328 <_strtoul_l.constprop.0+0x78>
 8011318:	4580      	cmp	r8, r0
 801131a:	d31b      	bcc.n	8011354 <_strtoul_l.constprop.0+0xa4>
 801131c:	d101      	bne.n	8011322 <_strtoul_l.constprop.0+0x72>
 801131e:	45a1      	cmp	r9, r4
 8011320:	db18      	blt.n	8011354 <_strtoul_l.constprop.0+0xa4>
 8011322:	fb00 4003 	mla	r0, r0, r3, r4
 8011326:	2701      	movs	r7, #1
 8011328:	f815 4b01 	ldrb.w	r4, [r5], #1
 801132c:	e7e9      	b.n	8011302 <_strtoul_l.constprop.0+0x52>
 801132e:	2c2b      	cmp	r4, #43	; 0x2b
 8011330:	bf04      	itt	eq
 8011332:	782c      	ldrbeq	r4, [r5, #0]
 8011334:	1c85      	addeq	r5, r0, #2
 8011336:	e7cc      	b.n	80112d2 <_strtoul_l.constprop.0+0x22>
 8011338:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801133c:	f1bc 0f19 	cmp.w	ip, #25
 8011340:	d801      	bhi.n	8011346 <_strtoul_l.constprop.0+0x96>
 8011342:	3c37      	subs	r4, #55	; 0x37
 8011344:	e7e3      	b.n	801130e <_strtoul_l.constprop.0+0x5e>
 8011346:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801134a:	f1bc 0f19 	cmp.w	ip, #25
 801134e:	d804      	bhi.n	801135a <_strtoul_l.constprop.0+0xaa>
 8011350:	3c57      	subs	r4, #87	; 0x57
 8011352:	e7dc      	b.n	801130e <_strtoul_l.constprop.0+0x5e>
 8011354:	f04f 37ff 	mov.w	r7, #4294967295
 8011358:	e7e6      	b.n	8011328 <_strtoul_l.constprop.0+0x78>
 801135a:	1c7b      	adds	r3, r7, #1
 801135c:	d106      	bne.n	801136c <_strtoul_l.constprop.0+0xbc>
 801135e:	2322      	movs	r3, #34	; 0x22
 8011360:	f8ce 3000 	str.w	r3, [lr]
 8011364:	4638      	mov	r0, r7
 8011366:	b932      	cbnz	r2, 8011376 <_strtoul_l.constprop.0+0xc6>
 8011368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801136c:	b106      	cbz	r6, 8011370 <_strtoul_l.constprop.0+0xc0>
 801136e:	4240      	negs	r0, r0
 8011370:	2a00      	cmp	r2, #0
 8011372:	d0f9      	beq.n	8011368 <_strtoul_l.constprop.0+0xb8>
 8011374:	b107      	cbz	r7, 8011378 <_strtoul_l.constprop.0+0xc8>
 8011376:	1e69      	subs	r1, r5, #1
 8011378:	6011      	str	r1, [r2, #0]
 801137a:	e7f5      	b.n	8011368 <_strtoul_l.constprop.0+0xb8>
 801137c:	2430      	movs	r4, #48	; 0x30
 801137e:	2b00      	cmp	r3, #0
 8011380:	d1b5      	bne.n	80112ee <_strtoul_l.constprop.0+0x3e>
 8011382:	2308      	movs	r3, #8
 8011384:	e7b3      	b.n	80112ee <_strtoul_l.constprop.0+0x3e>
 8011386:	2c30      	cmp	r4, #48	; 0x30
 8011388:	d0a9      	beq.n	80112de <_strtoul_l.constprop.0+0x2e>
 801138a:	230a      	movs	r3, #10
 801138c:	e7af      	b.n	80112ee <_strtoul_l.constprop.0+0x3e>
 801138e:	bf00      	nop
 8011390:	08011be9 	.word	0x08011be9

08011394 <_strtoul_r>:
 8011394:	f7ff bf8c 	b.w	80112b0 <_strtoul_l.constprop.0>

08011398 <fiprintf>:
 8011398:	b40e      	push	{r1, r2, r3}
 801139a:	b503      	push	{r0, r1, lr}
 801139c:	4601      	mov	r1, r0
 801139e:	ab03      	add	r3, sp, #12
 80113a0:	4805      	ldr	r0, [pc, #20]	; (80113b8 <fiprintf+0x20>)
 80113a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113a6:	6800      	ldr	r0, [r0, #0]
 80113a8:	9301      	str	r3, [sp, #4]
 80113aa:	f000 f837 	bl	801141c <_vfiprintf_r>
 80113ae:	b002      	add	sp, #8
 80113b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113b4:	b003      	add	sp, #12
 80113b6:	4770      	bx	lr
 80113b8:	20000348 	.word	0x20000348

080113bc <abort>:
 80113bc:	b508      	push	{r3, lr}
 80113be:	2006      	movs	r0, #6
 80113c0:	f000 fa04 	bl	80117cc <raise>
 80113c4:	2001      	movs	r0, #1
 80113c6:	f7f3 fe11 	bl	8004fec <_exit>

080113ca <__sfputc_r>:
 80113ca:	6893      	ldr	r3, [r2, #8]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	b410      	push	{r4}
 80113d2:	6093      	str	r3, [r2, #8]
 80113d4:	da08      	bge.n	80113e8 <__sfputc_r+0x1e>
 80113d6:	6994      	ldr	r4, [r2, #24]
 80113d8:	42a3      	cmp	r3, r4
 80113da:	db01      	blt.n	80113e0 <__sfputc_r+0x16>
 80113dc:	290a      	cmp	r1, #10
 80113de:	d103      	bne.n	80113e8 <__sfputc_r+0x1e>
 80113e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e4:	f000 b934 	b.w	8011650 <__swbuf_r>
 80113e8:	6813      	ldr	r3, [r2, #0]
 80113ea:	1c58      	adds	r0, r3, #1
 80113ec:	6010      	str	r0, [r2, #0]
 80113ee:	7019      	strb	r1, [r3, #0]
 80113f0:	4608      	mov	r0, r1
 80113f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <__sfputs_r>:
 80113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fa:	4606      	mov	r6, r0
 80113fc:	460f      	mov	r7, r1
 80113fe:	4614      	mov	r4, r2
 8011400:	18d5      	adds	r5, r2, r3
 8011402:	42ac      	cmp	r4, r5
 8011404:	d101      	bne.n	801140a <__sfputs_r+0x12>
 8011406:	2000      	movs	r0, #0
 8011408:	e007      	b.n	801141a <__sfputs_r+0x22>
 801140a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801140e:	463a      	mov	r2, r7
 8011410:	4630      	mov	r0, r6
 8011412:	f7ff ffda 	bl	80113ca <__sfputc_r>
 8011416:	1c43      	adds	r3, r0, #1
 8011418:	d1f3      	bne.n	8011402 <__sfputs_r+0xa>
 801141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801141c <_vfiprintf_r>:
 801141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011420:	460d      	mov	r5, r1
 8011422:	b09d      	sub	sp, #116	; 0x74
 8011424:	4614      	mov	r4, r2
 8011426:	4698      	mov	r8, r3
 8011428:	4606      	mov	r6, r0
 801142a:	b118      	cbz	r0, 8011434 <_vfiprintf_r+0x18>
 801142c:	6a03      	ldr	r3, [r0, #32]
 801142e:	b90b      	cbnz	r3, 8011434 <_vfiprintf_r+0x18>
 8011430:	f7fd fcde 	bl	800edf0 <__sinit>
 8011434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011436:	07d9      	lsls	r1, r3, #31
 8011438:	d405      	bmi.n	8011446 <_vfiprintf_r+0x2a>
 801143a:	89ab      	ldrh	r3, [r5, #12]
 801143c:	059a      	lsls	r2, r3, #22
 801143e:	d402      	bmi.n	8011446 <_vfiprintf_r+0x2a>
 8011440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011442:	f7fd fe9e 	bl	800f182 <__retarget_lock_acquire_recursive>
 8011446:	89ab      	ldrh	r3, [r5, #12]
 8011448:	071b      	lsls	r3, r3, #28
 801144a:	d501      	bpl.n	8011450 <_vfiprintf_r+0x34>
 801144c:	692b      	ldr	r3, [r5, #16]
 801144e:	b99b      	cbnz	r3, 8011478 <_vfiprintf_r+0x5c>
 8011450:	4629      	mov	r1, r5
 8011452:	4630      	mov	r0, r6
 8011454:	f000 f93a 	bl	80116cc <__swsetup_r>
 8011458:	b170      	cbz	r0, 8011478 <_vfiprintf_r+0x5c>
 801145a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801145c:	07dc      	lsls	r4, r3, #31
 801145e:	d504      	bpl.n	801146a <_vfiprintf_r+0x4e>
 8011460:	f04f 30ff 	mov.w	r0, #4294967295
 8011464:	b01d      	add	sp, #116	; 0x74
 8011466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146a:	89ab      	ldrh	r3, [r5, #12]
 801146c:	0598      	lsls	r0, r3, #22
 801146e:	d4f7      	bmi.n	8011460 <_vfiprintf_r+0x44>
 8011470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011472:	f7fd fe87 	bl	800f184 <__retarget_lock_release_recursive>
 8011476:	e7f3      	b.n	8011460 <_vfiprintf_r+0x44>
 8011478:	2300      	movs	r3, #0
 801147a:	9309      	str	r3, [sp, #36]	; 0x24
 801147c:	2320      	movs	r3, #32
 801147e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011482:	f8cd 800c 	str.w	r8, [sp, #12]
 8011486:	2330      	movs	r3, #48	; 0x30
 8011488:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801163c <_vfiprintf_r+0x220>
 801148c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011490:	f04f 0901 	mov.w	r9, #1
 8011494:	4623      	mov	r3, r4
 8011496:	469a      	mov	sl, r3
 8011498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801149c:	b10a      	cbz	r2, 80114a2 <_vfiprintf_r+0x86>
 801149e:	2a25      	cmp	r2, #37	; 0x25
 80114a0:	d1f9      	bne.n	8011496 <_vfiprintf_r+0x7a>
 80114a2:	ebba 0b04 	subs.w	fp, sl, r4
 80114a6:	d00b      	beq.n	80114c0 <_vfiprintf_r+0xa4>
 80114a8:	465b      	mov	r3, fp
 80114aa:	4622      	mov	r2, r4
 80114ac:	4629      	mov	r1, r5
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff ffa2 	bl	80113f8 <__sfputs_r>
 80114b4:	3001      	adds	r0, #1
 80114b6:	f000 80a9 	beq.w	801160c <_vfiprintf_r+0x1f0>
 80114ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114bc:	445a      	add	r2, fp
 80114be:	9209      	str	r2, [sp, #36]	; 0x24
 80114c0:	f89a 3000 	ldrb.w	r3, [sl]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f000 80a1 	beq.w	801160c <_vfiprintf_r+0x1f0>
 80114ca:	2300      	movs	r3, #0
 80114cc:	f04f 32ff 	mov.w	r2, #4294967295
 80114d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114d4:	f10a 0a01 	add.w	sl, sl, #1
 80114d8:	9304      	str	r3, [sp, #16]
 80114da:	9307      	str	r3, [sp, #28]
 80114dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114e0:	931a      	str	r3, [sp, #104]	; 0x68
 80114e2:	4654      	mov	r4, sl
 80114e4:	2205      	movs	r2, #5
 80114e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ea:	4854      	ldr	r0, [pc, #336]	; (801163c <_vfiprintf_r+0x220>)
 80114ec:	f7ee fe90 	bl	8000210 <memchr>
 80114f0:	9a04      	ldr	r2, [sp, #16]
 80114f2:	b9d8      	cbnz	r0, 801152c <_vfiprintf_r+0x110>
 80114f4:	06d1      	lsls	r1, r2, #27
 80114f6:	bf44      	itt	mi
 80114f8:	2320      	movmi	r3, #32
 80114fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114fe:	0713      	lsls	r3, r2, #28
 8011500:	bf44      	itt	mi
 8011502:	232b      	movmi	r3, #43	; 0x2b
 8011504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011508:	f89a 3000 	ldrb.w	r3, [sl]
 801150c:	2b2a      	cmp	r3, #42	; 0x2a
 801150e:	d015      	beq.n	801153c <_vfiprintf_r+0x120>
 8011510:	9a07      	ldr	r2, [sp, #28]
 8011512:	4654      	mov	r4, sl
 8011514:	2000      	movs	r0, #0
 8011516:	f04f 0c0a 	mov.w	ip, #10
 801151a:	4621      	mov	r1, r4
 801151c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011520:	3b30      	subs	r3, #48	; 0x30
 8011522:	2b09      	cmp	r3, #9
 8011524:	d94d      	bls.n	80115c2 <_vfiprintf_r+0x1a6>
 8011526:	b1b0      	cbz	r0, 8011556 <_vfiprintf_r+0x13a>
 8011528:	9207      	str	r2, [sp, #28]
 801152a:	e014      	b.n	8011556 <_vfiprintf_r+0x13a>
 801152c:	eba0 0308 	sub.w	r3, r0, r8
 8011530:	fa09 f303 	lsl.w	r3, r9, r3
 8011534:	4313      	orrs	r3, r2
 8011536:	9304      	str	r3, [sp, #16]
 8011538:	46a2      	mov	sl, r4
 801153a:	e7d2      	b.n	80114e2 <_vfiprintf_r+0xc6>
 801153c:	9b03      	ldr	r3, [sp, #12]
 801153e:	1d19      	adds	r1, r3, #4
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	9103      	str	r1, [sp, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	bfbb      	ittet	lt
 8011548:	425b      	neglt	r3, r3
 801154a:	f042 0202 	orrlt.w	r2, r2, #2
 801154e:	9307      	strge	r3, [sp, #28]
 8011550:	9307      	strlt	r3, [sp, #28]
 8011552:	bfb8      	it	lt
 8011554:	9204      	strlt	r2, [sp, #16]
 8011556:	7823      	ldrb	r3, [r4, #0]
 8011558:	2b2e      	cmp	r3, #46	; 0x2e
 801155a:	d10c      	bne.n	8011576 <_vfiprintf_r+0x15a>
 801155c:	7863      	ldrb	r3, [r4, #1]
 801155e:	2b2a      	cmp	r3, #42	; 0x2a
 8011560:	d134      	bne.n	80115cc <_vfiprintf_r+0x1b0>
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	1d1a      	adds	r2, r3, #4
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	9203      	str	r2, [sp, #12]
 801156a:	2b00      	cmp	r3, #0
 801156c:	bfb8      	it	lt
 801156e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011572:	3402      	adds	r4, #2
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801164c <_vfiprintf_r+0x230>
 801157a:	7821      	ldrb	r1, [r4, #0]
 801157c:	2203      	movs	r2, #3
 801157e:	4650      	mov	r0, sl
 8011580:	f7ee fe46 	bl	8000210 <memchr>
 8011584:	b138      	cbz	r0, 8011596 <_vfiprintf_r+0x17a>
 8011586:	9b04      	ldr	r3, [sp, #16]
 8011588:	eba0 000a 	sub.w	r0, r0, sl
 801158c:	2240      	movs	r2, #64	; 0x40
 801158e:	4082      	lsls	r2, r0
 8011590:	4313      	orrs	r3, r2
 8011592:	3401      	adds	r4, #1
 8011594:	9304      	str	r3, [sp, #16]
 8011596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801159a:	4829      	ldr	r0, [pc, #164]	; (8011640 <_vfiprintf_r+0x224>)
 801159c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115a0:	2206      	movs	r2, #6
 80115a2:	f7ee fe35 	bl	8000210 <memchr>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d03f      	beq.n	801162a <_vfiprintf_r+0x20e>
 80115aa:	4b26      	ldr	r3, [pc, #152]	; (8011644 <_vfiprintf_r+0x228>)
 80115ac:	bb1b      	cbnz	r3, 80115f6 <_vfiprintf_r+0x1da>
 80115ae:	9b03      	ldr	r3, [sp, #12]
 80115b0:	3307      	adds	r3, #7
 80115b2:	f023 0307 	bic.w	r3, r3, #7
 80115b6:	3308      	adds	r3, #8
 80115b8:	9303      	str	r3, [sp, #12]
 80115ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115bc:	443b      	add	r3, r7
 80115be:	9309      	str	r3, [sp, #36]	; 0x24
 80115c0:	e768      	b.n	8011494 <_vfiprintf_r+0x78>
 80115c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80115c6:	460c      	mov	r4, r1
 80115c8:	2001      	movs	r0, #1
 80115ca:	e7a6      	b.n	801151a <_vfiprintf_r+0xfe>
 80115cc:	2300      	movs	r3, #0
 80115ce:	3401      	adds	r4, #1
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	4619      	mov	r1, r3
 80115d4:	f04f 0c0a 	mov.w	ip, #10
 80115d8:	4620      	mov	r0, r4
 80115da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115de:	3a30      	subs	r2, #48	; 0x30
 80115e0:	2a09      	cmp	r2, #9
 80115e2:	d903      	bls.n	80115ec <_vfiprintf_r+0x1d0>
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d0c6      	beq.n	8011576 <_vfiprintf_r+0x15a>
 80115e8:	9105      	str	r1, [sp, #20]
 80115ea:	e7c4      	b.n	8011576 <_vfiprintf_r+0x15a>
 80115ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80115f0:	4604      	mov	r4, r0
 80115f2:	2301      	movs	r3, #1
 80115f4:	e7f0      	b.n	80115d8 <_vfiprintf_r+0x1bc>
 80115f6:	ab03      	add	r3, sp, #12
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	462a      	mov	r2, r5
 80115fc:	4b12      	ldr	r3, [pc, #72]	; (8011648 <_vfiprintf_r+0x22c>)
 80115fe:	a904      	add	r1, sp, #16
 8011600:	4630      	mov	r0, r6
 8011602:	f3af 8000 	nop.w
 8011606:	4607      	mov	r7, r0
 8011608:	1c78      	adds	r0, r7, #1
 801160a:	d1d6      	bne.n	80115ba <_vfiprintf_r+0x19e>
 801160c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801160e:	07d9      	lsls	r1, r3, #31
 8011610:	d405      	bmi.n	801161e <_vfiprintf_r+0x202>
 8011612:	89ab      	ldrh	r3, [r5, #12]
 8011614:	059a      	lsls	r2, r3, #22
 8011616:	d402      	bmi.n	801161e <_vfiprintf_r+0x202>
 8011618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801161a:	f7fd fdb3 	bl	800f184 <__retarget_lock_release_recursive>
 801161e:	89ab      	ldrh	r3, [r5, #12]
 8011620:	065b      	lsls	r3, r3, #25
 8011622:	f53f af1d 	bmi.w	8011460 <_vfiprintf_r+0x44>
 8011626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011628:	e71c      	b.n	8011464 <_vfiprintf_r+0x48>
 801162a:	ab03      	add	r3, sp, #12
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	462a      	mov	r2, r5
 8011630:	4b05      	ldr	r3, [pc, #20]	; (8011648 <_vfiprintf_r+0x22c>)
 8011632:	a904      	add	r1, sp, #16
 8011634:	4630      	mov	r0, r6
 8011636:	f7ff f9d7 	bl	80109e8 <_printf_i>
 801163a:	e7e4      	b.n	8011606 <_vfiprintf_r+0x1ea>
 801163c:	08011ed4 	.word	0x08011ed4
 8011640:	08011ede 	.word	0x08011ede
 8011644:	00000000 	.word	0x00000000
 8011648:	080113f9 	.word	0x080113f9
 801164c:	08011eda 	.word	0x08011eda

08011650 <__swbuf_r>:
 8011650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011652:	460e      	mov	r6, r1
 8011654:	4614      	mov	r4, r2
 8011656:	4605      	mov	r5, r0
 8011658:	b118      	cbz	r0, 8011662 <__swbuf_r+0x12>
 801165a:	6a03      	ldr	r3, [r0, #32]
 801165c:	b90b      	cbnz	r3, 8011662 <__swbuf_r+0x12>
 801165e:	f7fd fbc7 	bl	800edf0 <__sinit>
 8011662:	69a3      	ldr	r3, [r4, #24]
 8011664:	60a3      	str	r3, [r4, #8]
 8011666:	89a3      	ldrh	r3, [r4, #12]
 8011668:	071a      	lsls	r2, r3, #28
 801166a:	d525      	bpl.n	80116b8 <__swbuf_r+0x68>
 801166c:	6923      	ldr	r3, [r4, #16]
 801166e:	b31b      	cbz	r3, 80116b8 <__swbuf_r+0x68>
 8011670:	6823      	ldr	r3, [r4, #0]
 8011672:	6922      	ldr	r2, [r4, #16]
 8011674:	1a98      	subs	r0, r3, r2
 8011676:	6963      	ldr	r3, [r4, #20]
 8011678:	b2f6      	uxtb	r6, r6
 801167a:	4283      	cmp	r3, r0
 801167c:	4637      	mov	r7, r6
 801167e:	dc04      	bgt.n	801168a <__swbuf_r+0x3a>
 8011680:	4621      	mov	r1, r4
 8011682:	4628      	mov	r0, r5
 8011684:	f7ff fca6 	bl	8010fd4 <_fflush_r>
 8011688:	b9e0      	cbnz	r0, 80116c4 <__swbuf_r+0x74>
 801168a:	68a3      	ldr	r3, [r4, #8]
 801168c:	3b01      	subs	r3, #1
 801168e:	60a3      	str	r3, [r4, #8]
 8011690:	6823      	ldr	r3, [r4, #0]
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	6022      	str	r2, [r4, #0]
 8011696:	701e      	strb	r6, [r3, #0]
 8011698:	6962      	ldr	r2, [r4, #20]
 801169a:	1c43      	adds	r3, r0, #1
 801169c:	429a      	cmp	r2, r3
 801169e:	d004      	beq.n	80116aa <__swbuf_r+0x5a>
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	07db      	lsls	r3, r3, #31
 80116a4:	d506      	bpl.n	80116b4 <__swbuf_r+0x64>
 80116a6:	2e0a      	cmp	r6, #10
 80116a8:	d104      	bne.n	80116b4 <__swbuf_r+0x64>
 80116aa:	4621      	mov	r1, r4
 80116ac:	4628      	mov	r0, r5
 80116ae:	f7ff fc91 	bl	8010fd4 <_fflush_r>
 80116b2:	b938      	cbnz	r0, 80116c4 <__swbuf_r+0x74>
 80116b4:	4638      	mov	r0, r7
 80116b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116b8:	4621      	mov	r1, r4
 80116ba:	4628      	mov	r0, r5
 80116bc:	f000 f806 	bl	80116cc <__swsetup_r>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d0d5      	beq.n	8011670 <__swbuf_r+0x20>
 80116c4:	f04f 37ff 	mov.w	r7, #4294967295
 80116c8:	e7f4      	b.n	80116b4 <__swbuf_r+0x64>
	...

080116cc <__swsetup_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4b2a      	ldr	r3, [pc, #168]	; (8011778 <__swsetup_r+0xac>)
 80116d0:	4605      	mov	r5, r0
 80116d2:	6818      	ldr	r0, [r3, #0]
 80116d4:	460c      	mov	r4, r1
 80116d6:	b118      	cbz	r0, 80116e0 <__swsetup_r+0x14>
 80116d8:	6a03      	ldr	r3, [r0, #32]
 80116da:	b90b      	cbnz	r3, 80116e0 <__swsetup_r+0x14>
 80116dc:	f7fd fb88 	bl	800edf0 <__sinit>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116e6:	0718      	lsls	r0, r3, #28
 80116e8:	d422      	bmi.n	8011730 <__swsetup_r+0x64>
 80116ea:	06d9      	lsls	r1, r3, #27
 80116ec:	d407      	bmi.n	80116fe <__swsetup_r+0x32>
 80116ee:	2309      	movs	r3, #9
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116f6:	81a3      	strh	r3, [r4, #12]
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	e034      	b.n	8011768 <__swsetup_r+0x9c>
 80116fe:	0758      	lsls	r0, r3, #29
 8011700:	d512      	bpl.n	8011728 <__swsetup_r+0x5c>
 8011702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011704:	b141      	cbz	r1, 8011718 <__swsetup_r+0x4c>
 8011706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801170a:	4299      	cmp	r1, r3
 801170c:	d002      	beq.n	8011714 <__swsetup_r+0x48>
 801170e:	4628      	mov	r0, r5
 8011710:	f7fd fd5a 	bl	800f1c8 <_free_r>
 8011714:	2300      	movs	r3, #0
 8011716:	6363      	str	r3, [r4, #52]	; 0x34
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	2300      	movs	r3, #0
 8011722:	6063      	str	r3, [r4, #4]
 8011724:	6923      	ldr	r3, [r4, #16]
 8011726:	6023      	str	r3, [r4, #0]
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	f043 0308 	orr.w	r3, r3, #8
 801172e:	81a3      	strh	r3, [r4, #12]
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	b94b      	cbnz	r3, 8011748 <__swsetup_r+0x7c>
 8011734:	89a3      	ldrh	r3, [r4, #12]
 8011736:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801173a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801173e:	d003      	beq.n	8011748 <__swsetup_r+0x7c>
 8011740:	4621      	mov	r1, r4
 8011742:	4628      	mov	r0, r5
 8011744:	f000 f884 	bl	8011850 <__smakebuf_r>
 8011748:	89a0      	ldrh	r0, [r4, #12]
 801174a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801174e:	f010 0301 	ands.w	r3, r0, #1
 8011752:	d00a      	beq.n	801176a <__swsetup_r+0x9e>
 8011754:	2300      	movs	r3, #0
 8011756:	60a3      	str	r3, [r4, #8]
 8011758:	6963      	ldr	r3, [r4, #20]
 801175a:	425b      	negs	r3, r3
 801175c:	61a3      	str	r3, [r4, #24]
 801175e:	6923      	ldr	r3, [r4, #16]
 8011760:	b943      	cbnz	r3, 8011774 <__swsetup_r+0xa8>
 8011762:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011766:	d1c4      	bne.n	80116f2 <__swsetup_r+0x26>
 8011768:	bd38      	pop	{r3, r4, r5, pc}
 801176a:	0781      	lsls	r1, r0, #30
 801176c:	bf58      	it	pl
 801176e:	6963      	ldrpl	r3, [r4, #20]
 8011770:	60a3      	str	r3, [r4, #8]
 8011772:	e7f4      	b.n	801175e <__swsetup_r+0x92>
 8011774:	2000      	movs	r0, #0
 8011776:	e7f7      	b.n	8011768 <__swsetup_r+0x9c>
 8011778:	20000348 	.word	0x20000348

0801177c <_raise_r>:
 801177c:	291f      	cmp	r1, #31
 801177e:	b538      	push	{r3, r4, r5, lr}
 8011780:	4604      	mov	r4, r0
 8011782:	460d      	mov	r5, r1
 8011784:	d904      	bls.n	8011790 <_raise_r+0x14>
 8011786:	2316      	movs	r3, #22
 8011788:	6003      	str	r3, [r0, #0]
 801178a:	f04f 30ff 	mov.w	r0, #4294967295
 801178e:	bd38      	pop	{r3, r4, r5, pc}
 8011790:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011792:	b112      	cbz	r2, 801179a <_raise_r+0x1e>
 8011794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011798:	b94b      	cbnz	r3, 80117ae <_raise_r+0x32>
 801179a:	4620      	mov	r0, r4
 801179c:	f000 f830 	bl	8011800 <_getpid_r>
 80117a0:	462a      	mov	r2, r5
 80117a2:	4601      	mov	r1, r0
 80117a4:	4620      	mov	r0, r4
 80117a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117aa:	f000 b817 	b.w	80117dc <_kill_r>
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	d00a      	beq.n	80117c8 <_raise_r+0x4c>
 80117b2:	1c59      	adds	r1, r3, #1
 80117b4:	d103      	bne.n	80117be <_raise_r+0x42>
 80117b6:	2316      	movs	r3, #22
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	2001      	movs	r0, #1
 80117bc:	e7e7      	b.n	801178e <_raise_r+0x12>
 80117be:	2400      	movs	r4, #0
 80117c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117c4:	4628      	mov	r0, r5
 80117c6:	4798      	blx	r3
 80117c8:	2000      	movs	r0, #0
 80117ca:	e7e0      	b.n	801178e <_raise_r+0x12>

080117cc <raise>:
 80117cc:	4b02      	ldr	r3, [pc, #8]	; (80117d8 <raise+0xc>)
 80117ce:	4601      	mov	r1, r0
 80117d0:	6818      	ldr	r0, [r3, #0]
 80117d2:	f7ff bfd3 	b.w	801177c <_raise_r>
 80117d6:	bf00      	nop
 80117d8:	20000348 	.word	0x20000348

080117dc <_kill_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4d07      	ldr	r5, [pc, #28]	; (80117fc <_kill_r+0x20>)
 80117e0:	2300      	movs	r3, #0
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	4611      	mov	r1, r2
 80117e8:	602b      	str	r3, [r5, #0]
 80117ea:	f7f3 fbef 	bl	8004fcc <_kill>
 80117ee:	1c43      	adds	r3, r0, #1
 80117f0:	d102      	bne.n	80117f8 <_kill_r+0x1c>
 80117f2:	682b      	ldr	r3, [r5, #0]
 80117f4:	b103      	cbz	r3, 80117f8 <_kill_r+0x1c>
 80117f6:	6023      	str	r3, [r4, #0]
 80117f8:	bd38      	pop	{r3, r4, r5, pc}
 80117fa:	bf00      	nop
 80117fc:	20002dc0 	.word	0x20002dc0

08011800 <_getpid_r>:
 8011800:	f7f3 bbdc 	b.w	8004fbc <_getpid>

08011804 <__swhatbuf_r>:
 8011804:	b570      	push	{r4, r5, r6, lr}
 8011806:	460c      	mov	r4, r1
 8011808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180c:	2900      	cmp	r1, #0
 801180e:	b096      	sub	sp, #88	; 0x58
 8011810:	4615      	mov	r5, r2
 8011812:	461e      	mov	r6, r3
 8011814:	da0d      	bge.n	8011832 <__swhatbuf_r+0x2e>
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	f013 0f80 	tst.w	r3, #128	; 0x80
 801181c:	f04f 0100 	mov.w	r1, #0
 8011820:	bf0c      	ite	eq
 8011822:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011826:	2340      	movne	r3, #64	; 0x40
 8011828:	2000      	movs	r0, #0
 801182a:	6031      	str	r1, [r6, #0]
 801182c:	602b      	str	r3, [r5, #0]
 801182e:	b016      	add	sp, #88	; 0x58
 8011830:	bd70      	pop	{r4, r5, r6, pc}
 8011832:	466a      	mov	r2, sp
 8011834:	f000 f848 	bl	80118c8 <_fstat_r>
 8011838:	2800      	cmp	r0, #0
 801183a:	dbec      	blt.n	8011816 <__swhatbuf_r+0x12>
 801183c:	9901      	ldr	r1, [sp, #4]
 801183e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011842:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011846:	4259      	negs	r1, r3
 8011848:	4159      	adcs	r1, r3
 801184a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801184e:	e7eb      	b.n	8011828 <__swhatbuf_r+0x24>

08011850 <__smakebuf_r>:
 8011850:	898b      	ldrh	r3, [r1, #12]
 8011852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011854:	079d      	lsls	r5, r3, #30
 8011856:	4606      	mov	r6, r0
 8011858:	460c      	mov	r4, r1
 801185a:	d507      	bpl.n	801186c <__smakebuf_r+0x1c>
 801185c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011860:	6023      	str	r3, [r4, #0]
 8011862:	6123      	str	r3, [r4, #16]
 8011864:	2301      	movs	r3, #1
 8011866:	6163      	str	r3, [r4, #20]
 8011868:	b002      	add	sp, #8
 801186a:	bd70      	pop	{r4, r5, r6, pc}
 801186c:	ab01      	add	r3, sp, #4
 801186e:	466a      	mov	r2, sp
 8011870:	f7ff ffc8 	bl	8011804 <__swhatbuf_r>
 8011874:	9900      	ldr	r1, [sp, #0]
 8011876:	4605      	mov	r5, r0
 8011878:	4630      	mov	r0, r6
 801187a:	f7fc fb4f 	bl	800df1c <_malloc_r>
 801187e:	b948      	cbnz	r0, 8011894 <__smakebuf_r+0x44>
 8011880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011884:	059a      	lsls	r2, r3, #22
 8011886:	d4ef      	bmi.n	8011868 <__smakebuf_r+0x18>
 8011888:	f023 0303 	bic.w	r3, r3, #3
 801188c:	f043 0302 	orr.w	r3, r3, #2
 8011890:	81a3      	strh	r3, [r4, #12]
 8011892:	e7e3      	b.n	801185c <__smakebuf_r+0xc>
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	6020      	str	r0, [r4, #0]
 8011898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801189c:	81a3      	strh	r3, [r4, #12]
 801189e:	9b00      	ldr	r3, [sp, #0]
 80118a0:	6163      	str	r3, [r4, #20]
 80118a2:	9b01      	ldr	r3, [sp, #4]
 80118a4:	6120      	str	r0, [r4, #16]
 80118a6:	b15b      	cbz	r3, 80118c0 <__smakebuf_r+0x70>
 80118a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118ac:	4630      	mov	r0, r6
 80118ae:	f000 f81d 	bl	80118ec <_isatty_r>
 80118b2:	b128      	cbz	r0, 80118c0 <__smakebuf_r+0x70>
 80118b4:	89a3      	ldrh	r3, [r4, #12]
 80118b6:	f023 0303 	bic.w	r3, r3, #3
 80118ba:	f043 0301 	orr.w	r3, r3, #1
 80118be:	81a3      	strh	r3, [r4, #12]
 80118c0:	89a3      	ldrh	r3, [r4, #12]
 80118c2:	431d      	orrs	r5, r3
 80118c4:	81a5      	strh	r5, [r4, #12]
 80118c6:	e7cf      	b.n	8011868 <__smakebuf_r+0x18>

080118c8 <_fstat_r>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4d07      	ldr	r5, [pc, #28]	; (80118e8 <_fstat_r+0x20>)
 80118cc:	2300      	movs	r3, #0
 80118ce:	4604      	mov	r4, r0
 80118d0:	4608      	mov	r0, r1
 80118d2:	4611      	mov	r1, r2
 80118d4:	602b      	str	r3, [r5, #0]
 80118d6:	f7f3 fbd8 	bl	800508a <_fstat>
 80118da:	1c43      	adds	r3, r0, #1
 80118dc:	d102      	bne.n	80118e4 <_fstat_r+0x1c>
 80118de:	682b      	ldr	r3, [r5, #0]
 80118e0:	b103      	cbz	r3, 80118e4 <_fstat_r+0x1c>
 80118e2:	6023      	str	r3, [r4, #0]
 80118e4:	bd38      	pop	{r3, r4, r5, pc}
 80118e6:	bf00      	nop
 80118e8:	20002dc0 	.word	0x20002dc0

080118ec <_isatty_r>:
 80118ec:	b538      	push	{r3, r4, r5, lr}
 80118ee:	4d06      	ldr	r5, [pc, #24]	; (8011908 <_isatty_r+0x1c>)
 80118f0:	2300      	movs	r3, #0
 80118f2:	4604      	mov	r4, r0
 80118f4:	4608      	mov	r0, r1
 80118f6:	602b      	str	r3, [r5, #0]
 80118f8:	f7f3 fbd7 	bl	80050aa <_isatty>
 80118fc:	1c43      	adds	r3, r0, #1
 80118fe:	d102      	bne.n	8011906 <_isatty_r+0x1a>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	b103      	cbz	r3, 8011906 <_isatty_r+0x1a>
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	20002dc0 	.word	0x20002dc0

0801190c <_init>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	bf00      	nop
 8011910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011912:	bc08      	pop	{r3}
 8011914:	469e      	mov	lr, r3
 8011916:	4770      	bx	lr

08011918 <_fini>:
 8011918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191a:	bf00      	nop
 801191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801191e:	bc08      	pop	{r3}
 8011920:	469e      	mov	lr, r3
 8011922:	4770      	bx	lr
