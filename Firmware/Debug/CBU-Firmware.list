
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08010398  08010398  00020398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109c8  080109c8  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080109c8  080109c8  000209c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109d0  080109d0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109d0  080109d0  000209d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109d4  080109d4  000209d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080109d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000185c  20000208  08010be0  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a64  08010be0  00031a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021983  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cb  00000000  00000000  00051bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00055e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  00057ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028400  00000000  00000000  00059618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7ae  00000000  00000000  00081a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2128  00000000  00000000  000a01c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001922ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e7c  00000000  00000000  00192340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801037c 	.word	0x0801037c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0801037c 	.word	0x0801037c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <readyToRead>:
#include "bluetooth.h"
#define MAX_JSON_BYTE_SIZE 128



void readyToRead( BLE_interface* ble, uint8_t* rx_buff){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(ble->huart, rx_buff, sizeof(rx_buff));// Sending in normal mode
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f007 fd3a 	bl	8008ab4 <HAL_UART_Receive_IT>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <case_insensitive_strcmp+0x16>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800105e:	2301      	movs	r3, #1
 8001060:	e056      	b.n	8001110 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d10d      	bne.n	8001086 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800106a:	2300      	movs	r3, #0
 800106c:	e050      	b.n	8001110 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e04a      	b.n	8001110 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3301      	adds	r3, #1
 8001090:	4a22      	ldr	r2, [pc, #136]	; (800111c <case_insensitive_strcmp+0xd4>)
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d103      	bne.n	80010a6 <case_insensitive_strcmp+0x5e>
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f103 0220 	add.w	r2, r3, #32
 80010a4:	e000      	b.n	80010a8 <case_insensitive_strcmp+0x60>
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	491a      	ldr	r1, [pc, #104]	; (800111c <case_insensitive_strcmp+0xd4>)
 80010b4:	440b      	add	r3, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <case_insensitive_strcmp+0x7e>
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	3320      	adds	r3, #32
 80010c4:	e000      	b.n	80010c8 <case_insensitive_strcmp+0x80>
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d0d0      	beq.n	800106e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	737b      	strb	r3, [r7, #13]
 80010d2:	7b7b      	ldrb	r3, [r7, #13]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <case_insensitive_strcmp+0xd4>)
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d103      	bne.n	80010ec <case_insensitive_strcmp+0xa4>
 80010e4:	7b7b      	ldrb	r3, [r7, #13]
 80010e6:	f103 0220 	add.w	r2, r3, #32
 80010ea:	e000      	b.n	80010ee <case_insensitive_strcmp+0xa6>
 80010ec:	7b7a      	ldrb	r2, [r7, #13]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4908      	ldr	r1, [pc, #32]	; (800111c <case_insensitive_strcmp+0xd4>)
 80010fa:	440b      	add	r3, r1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <case_insensitive_strcmp+0xc4>
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	3320      	adds	r3, #32
 800110a:	e000      	b.n	800110e <case_insensitive_strcmp+0xc6>
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	0801057c 	.word	0x0801057c

08001120 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <cJSON_strdup+0x1c>
    {
        return NULL;
 8001138:	2300      	movs	r3, #0
 800113a:	e015      	b.n	8001168 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f859 	bl	80001f4 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	4798      	blx	r3
 8001150:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <cJSON_strdup+0x3c>
    {
        return NULL;
 8001158:	2300      	movs	r3, #0
 800115a:	e005      	b.n	8001168 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f00b fcb9 	bl	800cad8 <memcpy>

    return copy;
 8001166:	68bb      	ldr	r3, [r7, #8]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	4798      	blx	r3
 8001180:	60f8      	str	r0, [r7, #12]
    if (node)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001188:	2228      	movs	r2, #40	; 0x28
 800118a:	2100      	movs	r1, #0
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f00b fcb1 	bl	800caf4 <memset>
    }

    return node;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80011a8:	e037      	b.n	800121a <cJSON_Delete+0x7e>
    {
        next = item->next;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d108      	bne.n	80011ce <cJSON_Delete+0x32>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffe7 	bl	800119c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <cJSON_Delete+0x52>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <cJSON_Delete+0x90>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6912      	ldr	r2, [r2, #16]
 80011ea:	4610      	mov	r0, r2
 80011ec:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <cJSON_Delete+0x72>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <cJSON_Delete+0x90>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6a12      	ldr	r2, [r2, #32]
 800120a:	4610      	mov	r0, r2
 800120c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <cJSON_Delete+0x90>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
        item = next;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1c4      	bne.n	80011aa <cJSON_Delete+0xe>
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001234:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b098      	sub	sp, #96	; 0x60
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    double number = 0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800125a:	f7ff ffe9 	bl	8001230 <get_decimal_point>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <parse_number+0x36>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <parse_number+0x3a>
    {
        return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e0c6      	b.n	8001408 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800127a:	2300      	movs	r3, #0
 800127c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800127e:	e063      	b.n	8001348 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128a:	440b      	add	r3, r1
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b45      	cmp	r3, #69	; 0x45
 8001292:	dc3d      	bgt.n	8001310 <parse_number+0xd0>
 8001294:	2b2b      	cmp	r3, #43	; 0x2b
 8001296:	db66      	blt.n	8001366 <parse_number+0x126>
 8001298:	3b2b      	subs	r3, #43	; 0x2b
 800129a:	2b1a      	cmp	r3, #26
 800129c:	d863      	bhi.n	8001366 <parse_number+0x126>
 800129e:	a201      	add	r2, pc, #4	; (adr r2, 80012a4 <parse_number+0x64>)
 80012a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a4:	08001315 	.word	0x08001315
 80012a8:	08001367 	.word	0x08001367
 80012ac:	08001315 	.word	0x08001315
 80012b0:	08001333 	.word	0x08001333
 80012b4:	08001367 	.word	0x08001367
 80012b8:	08001315 	.word	0x08001315
 80012bc:	08001315 	.word	0x08001315
 80012c0:	08001315 	.word	0x08001315
 80012c4:	08001315 	.word	0x08001315
 80012c8:	08001315 	.word	0x08001315
 80012cc:	08001315 	.word	0x08001315
 80012d0:	08001315 	.word	0x08001315
 80012d4:	08001315 	.word	0x08001315
 80012d8:	08001315 	.word	0x08001315
 80012dc:	08001315 	.word	0x08001315
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001367 	.word	0x08001367
 8001300:	08001367 	.word	0x08001367
 8001304:	08001367 	.word	0x08001367
 8001308:	08001367 	.word	0x08001367
 800130c:	08001315 	.word	0x08001315
 8001310:	2b65      	cmp	r3, #101	; 0x65
 8001312:	d128      	bne.n	8001366 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6899      	ldr	r1, [r3, #8]
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	440b      	add	r3, r1
 8001320:	4413      	add	r3, r2
 8001322:	7819      	ldrb	r1, [r3, #0]
 8001324:	f107 0208 	add.w	r2, r7, #8
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	4413      	add	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
                break;
 8001330:	e007      	b.n	8001342 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001332:	f107 0208 	add.w	r2, r7, #8
 8001336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001338:	4413      	add	r3, r2
 800133a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800133e:	701a      	strb	r2, [r3, #0]
                break;
 8001340:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001344:	3301      	adds	r3, #1
 8001346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134a:	2b3e      	cmp	r3, #62	; 0x3e
 800134c:	d80d      	bhi.n	800136a <parse_number+0x12a>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <parse_number+0x12a>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	441a      	add	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d38d      	bcc.n	8001280 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001364:	e001      	b.n	800136a <parse_number+0x12a>
                goto loop_end;
 8001366:	bf00      	nop
 8001368:	e000      	b.n	800136c <parse_number+0x12c>
loop_end:
 800136a:	bf00      	nop
    number_c_string[i] = '\0';
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001372:	4413      	add	r3, r2
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001378:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fb7e 	bl	800da84 <strtod>
 8001388:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800138c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	429a      	cmp	r2, r3
 8001394:	d101      	bne.n	800139a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001396:	2300      	movs	r3, #0
 8001398:	e036      	b.n	8001408 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80013a0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80013a4:	a31b      	add	r3, pc, #108	; (adr r3, 8001414 <parse_number+0x1d4>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013ae:	f7ff fbc1 	bl	8000b34 <__aeabi_dcmpge>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	e015      	b.n	80013ee <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <parse_number+0x1d0>)
 80013c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013cc:	f7ff fba8 	bl	8000b20 <__aeabi_dcmple>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	e006      	b.n	80013ee <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80013e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013e4:	f7ff fbd0 	bl	8000b88 <__aeabi_d2iz>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2208      	movs	r2, #8
 80013f2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013fa:	f107 0208 	add.w	r2, r7, #8
 80013fe:	1a8a      	subs	r2, r1, r2
 8001400:	441a      	add	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	609a      	str	r2, [r3, #8]
    return true;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3760      	adds	r7, #96	; 0x60
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	c1e00000 	.word	0xc1e00000
 8001414:	ffc00000 	.word	0xffc00000
 8001418:	41dfffff 	.word	0x41dfffff

0800141c <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <ensure+0x20>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <ensure+0x24>
    {
        return NULL;
 800143c:	2300      	movs	r3, #0
 800143e:	e083      	b.n	8001548 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <ensure+0x3c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d301      	bcc.n	8001458 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001454:	2300      	movs	r3, #0
 8001456:	e077      	b.n	8001548 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	da01      	bge.n	8001462 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800145e:	2300      	movs	r3, #0
 8001460:	e072      	b.n	8001548 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	3301      	adds	r3, #1
 800146c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d805      	bhi.n	8001484 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4413      	add	r3, r2
 8001482:	e061      	b.n	8001548 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <ensure+0x74>
        return NULL;
 800148c:	2300      	movs	r3, #0
 800148e:	e05b      	b.n	8001548 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001496:	d308      	bcc.n	80014aa <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db03      	blt.n	80014a6 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800149e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	e004      	b.n	80014b0 <ensure+0x94>
        }
        else
        {
            return NULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e04e      	b.n	8001548 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d018      	beq.n	80014ea <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	4610      	mov	r0, r2
 80014c4:	4798      	blx	r3
 80014c6:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d132      	bne.n	8001534 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4798      	blx	r3
            p->length = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

            return NULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e02e      	b.n	8001548 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	4798      	blx	r3
 80014f2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10d      	bne.n	8001516 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	4610      	mov	r0, r2
 8001504:	4798      	blx	r3
            p->length = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

            return NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	e018      	b.n	8001548 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	461a      	mov	r2, r3
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f00b fad8 	bl	800cad8 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	4610      	mov	r0, r2
 8001532:	4798      	blx	r3
    }
    p->length = newsize;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4413      	add	r3, r2
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d013      	beq.n	800158a <update_offset+0x3a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00f      	beq.n	800158a <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689c      	ldr	r4, [r3, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7fe fe3a 	bl	80001f4 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	18e2      	adds	r2, r4, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e000      	b.n	800158c <update_offset+0x3c>
        return;
 800158a:	bf00      	nop
}
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
	...

08001594 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001598:	b087      	sub	sp, #28
 800159a:	af00      	add	r7, sp, #0
 800159c:	ed87 0b02 	vstr	d0, [r7, #8]
 80015a0:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	68fe      	ldr	r6, [r7, #12]
 80015a8:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	687e      	ldr	r6, [r7, #4]
 80015b0:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80015b4:	f7ff fac8 	bl	8000b48 <__aeabi_dcmpgt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <compare_double+0x34>
 80015be:	68bc      	ldr	r4, [r7, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015c6:	e003      	b.n	80015d0 <compare_double+0x3c>
 80015c8:	683c      	ldr	r4, [r7, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80015d0:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80015d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015dc:	f7fe fe6c 	bl	80002b8 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4690      	mov	r8, r2
 80015e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <compare_double+0x8c>)
 80015f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f4:	f7ff f818 	bl	8000628 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	2101      	movs	r1, #1
 80015fe:	460c      	mov	r4, r1
 8001600:	4640      	mov	r0, r8
 8001602:	4649      	mov	r1, r9
 8001604:	f7ff fa8c 	bl	8000b20 <__aeabi_dcmple>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <compare_double+0x7e>
 800160e:	2300      	movs	r3, #0
 8001610:	461c      	mov	r4, r3
 8001612:	b2e3      	uxtb	r3, r4
}
 8001614:	4618      	mov	r0, r3
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161e:	bf00      	nop
 8001620:	3cb00000 	.word	0x3cb00000

08001624 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b093      	sub	sp, #76	; 0x4c
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001638:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800165a:	f7ff fde9 	bl	8001230 <get_decimal_point>
 800165e:	4603      	mov	r3, r0
 8001660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <print_number+0x56>
    {
        return false;
 8001676:	2300      	movs	r3, #0
 8001678:	e0b4      	b.n	80017e4 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800167a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800167e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001682:	f7ff fa6b 	bl	8000b5c <__aeabi_dcmpun>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d121      	bne.n	80016d0 <print_number+0xac>
 800168c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001694:	2301      	movs	r3, #1
 8001696:	461e      	mov	r6, r3
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <print_number+0x1c8>)
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7ff fa5b 	bl	8000b5c <__aeabi_dcmpun>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10b      	bne.n	80016c4 <print_number+0xa0>
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <print_number+0x1c8>)
 80016b2:	4620      	mov	r0, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f7ff fa33 	bl	8000b20 <__aeabi_dcmple>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <print_number+0xa0>
 80016c0:	2300      	movs	r3, #0
 80016c2:	461e      	mov	r6, r3
 80016c4:	b2f3      	uxtb	r3, r6
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4946      	ldr	r1, [pc, #280]	; (80017f0 <print_number+0x1cc>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fb0c 	bl	800ccf4 <siprintf>
 80016dc:	6478      	str	r0, [r7, #68]	; 0x44
 80016de:	e03f      	b.n	8001760 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff35 	bl	8000554 <__aeabi_i2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016f2:	f7ff fa01 	bl	8000af8 <__aeabi_dcmpeq>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	493b      	ldr	r1, [pc, #236]	; (80017f4 <print_number+0x1d0>)
 8001706:	4618      	mov	r0, r3
 8001708:	f00b faf4 	bl	800ccf4 <siprintf>
 800170c:	6478      	str	r0, [r7, #68]	; 0x44
 800170e:	e027      	b.n	8001760 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001710:	f107 0014 	add.w	r0, r7, #20
 8001714:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001718:	4937      	ldr	r1, [pc, #220]	; (80017f8 <print_number+0x1d4>)
 800171a:	f00b faeb 	bl	800ccf4 <siprintf>
 800171e:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4934      	ldr	r1, [pc, #208]	; (80017fc <print_number+0x1d8>)
 800172a:	4618      	mov	r0, r3
 800172c:	f00b fb02 	bl	800cd34 <siscanf>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10c      	bne.n	8001750 <print_number+0x12c>
 8001736:	ed97 7b02 	vldr	d7, [r7, #8]
 800173a:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800173e:	eeb0 0a47 	vmov.f32	s0, s14
 8001742:	eef0 0a67 	vmov.f32	s1, s15
 8001746:	f7ff ff25 	bl	8001594 <compare_double>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001750:	f107 0014 	add.w	r0, r7, #20
 8001754:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <print_number+0x1dc>)
 800175a:	f00b facb 	bl	800ccf4 <siprintf>
 800175e:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001762:	2b00      	cmp	r3, #0
 8001764:	db02      	blt.n	800176c <print_number+0x148>
 8001766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001768:	2b19      	cmp	r3, #25
 800176a:	dd01      	ble.n	8001770 <print_number+0x14c>
    {
        return false;
 800176c:	2300      	movs	r3, #0
 800176e:	e039      	b.n	80017e4 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001772:	3301      	adds	r3, #1
 8001774:	4619      	mov	r1, r3
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f7ff fe50 	bl	800141c <ensure>
 800177c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800177e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <print_number+0x164>
    {
        return false;
 8001784:	2300      	movs	r3, #0
 8001786:	e02d      	b.n	80017e4 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001788:	2300      	movs	r3, #0
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
 800178c:	e01a      	b.n	80017c4 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800178e:	f107 0214 	add.w	r2, r7, #20
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800179c:	429a      	cmp	r2, r3
 800179e:	d105      	bne.n	80017ac <print_number+0x188>
        {
            output_pointer[i] = '.';
 80017a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a4:	4413      	add	r3, r2
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	701a      	strb	r2, [r3, #0]
            continue;
 80017aa:	e008      	b.n	80017be <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80017ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b0:	4413      	add	r3, r2
 80017b2:	f107 0114 	add.w	r1, r7, #20
 80017b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017b8:	440a      	add	r2, r1
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80017be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c0:	3301      	adds	r3, #1
 80017c2:	643b      	str	r3, [r7, #64]	; 0x40
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3e0      	bcc.n	800178e <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80017cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017dc:	441a      	add	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	609a      	str	r2, [r3, #8]

    return true;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	374c      	adds	r7, #76	; 0x4c
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	7fefffff 	.word	0x7fefffff
 80017f0:	080103a4 	.word	0x080103a4
 80017f4:	080103ac 	.word	0x080103ac
 80017f8:	080103b0 	.word	0x080103b0
 80017fc:	080103b8 	.word	0x080103b8
 8001800:	080103bc 	.word	0x080103bc

08001804 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	e04c      	b.n	80018b4 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b2f      	cmp	r3, #47	; 0x2f
 8001824:	d90f      	bls.n	8001846 <parse_hex4+0x42>
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b39      	cmp	r3, #57	; 0x39
 8001830:	d809      	bhi.n	8001846 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	3b30      	subs	r3, #48	; 0x30
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e02d      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d90f      	bls.n	8001872 <parse_hex4+0x6e>
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b46      	cmp	r3, #70	; 0x46
 800185c:	d809      	bhi.n	8001872 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	3b37      	subs	r3, #55	; 0x37
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e017      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b60      	cmp	r3, #96	; 0x60
 800187c:	d90f      	bls.n	800189e <parse_hex4+0x9a>
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b66      	cmp	r3, #102	; 0x66
 8001888:	d809      	bhi.n	800189e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	3b57      	subs	r3, #87	; 0x57
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e001      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	e00c      	b.n	80018bc <parse_hex4+0xb8>
        }

        if (i < 3)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d802      	bhi.n	80018ae <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d9af      	bls.n	800181a <parse_hex4+0x16>
        }
    }

    return h;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b05      	cmp	r3, #5
 8001900:	f340 80b7 	ble.w	8001a72 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3302      	adds	r3, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff7b 	bl	8001804 <parse_hex4>
 800190e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001916:	d304      	bcc.n	8001922 <utf16_literal_to_utf8+0x5a>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800191e:	f0c0 80aa 	bcc.w	8001a76 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001928:	d337      	bcc.n	800199a <utf16_literal_to_utf8+0xd2>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001930:	d233      	bcs.n	800199a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	3306      	adds	r3, #6
 8001936:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800193c:	230c      	movs	r3, #12
 800193e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b05      	cmp	r3, #5
 800194a:	f340 8096 	ble.w	8001a7a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b5c      	cmp	r3, #92	; 0x5c
 8001954:	f040 8093 	bne.w	8001a7e <utf16_literal_to_utf8+0x1b6>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b75      	cmp	r3, #117	; 0x75
 8001960:	f040 808d 	bne.w	8001a7e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3302      	adds	r3, #2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff4b 	bl	8001804 <parse_hex4>
 800196e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001976:	f0c0 8084 	bcc.w	8001a82 <utf16_literal_to_utf8+0x1ba>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001980:	d27f      	bcs.n	8001a82 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	029a      	lsls	r2, r3, #10
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <utf16_literal_to_utf8+0x1cc>)
 8001988:	4013      	ands	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001990:	4313      	orrs	r3, r2
 8001992:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001998:	e004      	b.n	80019a4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800199a:	2306      	movs	r3, #6
 800199c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	2b7f      	cmp	r3, #127	; 0x7f
 80019a8:	d803      	bhi.n	80019b2 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019b0:	e01f      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b8:	d206      	bcs.n	80019c8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80019c0:	23c0      	movs	r3, #192	; 0xc0
 80019c2:	f887 3020 	strb.w	r3, [r7, #32]
 80019c6:	e014      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d206      	bcs.n	80019de <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80019d0:	2303      	movs	r3, #3
 80019d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80019d6:	23e0      	movs	r3, #224	; 0xe0
 80019d8:	f887 3020 	strb.w	r3, [r7, #32]
 80019dc:	e009      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019e4:	d24f      	bcs.n	8001a86 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019e6:	2304      	movs	r3, #4
 80019e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019ec:	23f0      	movs	r3, #240	; 0xf0
 80019ee:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019fc:	e015      	b.n	8001a2a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a10:	440b      	add	r3, r1
 8001a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001a20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a24:	3b01      	subs	r3, #1
 8001a26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e5      	bne.n	80019fe <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d909      	bls.n	8001a4e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a66:	441a      	add	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a70:	e00b      	b.n	8001a8a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e008      	b.n	8001a88 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a76:	bf00      	nop
 8001a78:	e006      	b.n	8001a88 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a7a:	bf00      	nop
 8001a7c:	e004      	b.n	8001a88 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a7e:	bf00      	nop
 8001a80:	e002      	b.n	8001a88 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a86:	bf00      	nop

fail:
    return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	000ffc00 	.word	0x000ffc00

08001a98 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b22      	cmp	r3, #34	; 0x22
 8001ad4:	f040 8102 	bne.w	8001cdc <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ae0:	e017      	b.n	8001b12 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b5c      	cmp	r3, #92	; 0x5c
 8001ae8:	d110      	bne.n	8001b0c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	f080 80f0 	bcs.w	8001ce0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a3a      	ldr	r2, [r7, #32]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d203      	bcs.n	8001b2c <parse_string+0x94>
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b22      	cmp	r3, #34	; 0x22
 8001b2a:	d1da      	bne.n	8001ae2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	f080 80d2 	bcs.w	8001ce4 <parse_string+0x24c>
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b22      	cmp	r3, #34	; 0x22
 8001b46:	f040 80cd 	bne.w	8001ce4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4413      	add	r3, r2
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	3201      	adds	r2, #1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4798      	blx	r3
 8001b6c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80b9 	beq.w	8001ce8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b7a:	e093      	b.n	8001ca4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b5c      	cmp	r3, #92	; 0x5c
 8001b82:	d008      	beq.n	8001b96 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	1c53      	adds	r3, r2, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1c59      	adds	r1, r3, #1
 8001b8e:	60f9      	str	r1, [r7, #12]
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e086      	b.n	8001ca4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b9a:	6a3a      	ldr	r2, [r7, #32]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f340 80a3 	ble.w	8001cec <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b75      	cmp	r3, #117	; 0x75
 8001bae:	f300 809f 	bgt.w	8001cf0 <parse_string+0x258>
 8001bb2:	2b5c      	cmp	r3, #92	; 0x5c
 8001bb4:	da04      	bge.n	8001bc0 <parse_string+0x128>
 8001bb6:	2b22      	cmp	r3, #34	; 0x22
 8001bb8:	d05c      	beq.n	8001c74 <parse_string+0x1dc>
 8001bba:	2b2f      	cmp	r3, #47	; 0x2f
 8001bbc:	d05a      	beq.n	8001c74 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001bbe:	e097      	b.n	8001cf0 <parse_string+0x258>
            switch (input_pointer[1])
 8001bc0:	3b5c      	subs	r3, #92	; 0x5c
 8001bc2:	2b19      	cmp	r3, #25
 8001bc4:	f200 8094 	bhi.w	8001cf0 <parse_string+0x258>
 8001bc8:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <parse_string+0x138>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001c75 	.word	0x08001c75
 8001bd4:	08001cf1 	.word	0x08001cf1
 8001bd8:	08001cf1 	.word	0x08001cf1
 8001bdc:	08001cf1 	.word	0x08001cf1
 8001be0:	08001cf1 	.word	0x08001cf1
 8001be4:	08001cf1 	.word	0x08001cf1
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001cf1 	.word	0x08001cf1
 8001bf0:	08001cf1 	.word	0x08001cf1
 8001bf4:	08001cf1 	.word	0x08001cf1
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	08001cf1 	.word	0x08001cf1
 8001c00:	08001cf1 	.word	0x08001cf1
 8001c04:	08001cf1 	.word	0x08001cf1
 8001c08:	08001cf1 	.word	0x08001cf1
 8001c0c:	08001cf1 	.word	0x08001cf1
 8001c10:	08001cf1 	.word	0x08001cf1
 8001c14:	08001cf1 	.word	0x08001cf1
 8001c18:	08001c51 	.word	0x08001c51
 8001c1c:	08001cf1 	.word	0x08001cf1
 8001c20:	08001cf1 	.word	0x08001cf1
 8001c24:	08001cf1 	.word	0x08001cf1
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001cf1 	.word	0x08001cf1
 8001c30:	08001c69 	.word	0x08001c69
 8001c34:	08001c83 	.word	0x08001c83
                    *output_pointer++ = '\b';
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60fa      	str	r2, [r7, #12]
 8001c3e:	2208      	movs	r2, #8
 8001c40:	701a      	strb	r2, [r3, #0]
                    break;
 8001c42:	e02b      	b.n	8001c9c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60fa      	str	r2, [r7, #12]
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c4e:	e025      	b.n	8001c9c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60fa      	str	r2, [r7, #12]
 8001c56:	220a      	movs	r2, #10
 8001c58:	701a      	strb	r2, [r3, #0]
                    break;
 8001c5a:	e01f      	b.n	8001c9c <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60fa      	str	r2, [r7, #12]
 8001c62:	220d      	movs	r2, #13
 8001c64:	701a      	strb	r2, [r3, #0]
                    break;
 8001c66:	e019      	b.n	8001c9c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60fa      	str	r2, [r7, #12]
 8001c6e:	2209      	movs	r2, #9
 8001c70:	701a      	strb	r2, [r3, #0]
                    break;
 8001c72:	e013      	b.n	8001c9c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60fa      	str	r2, [r7, #12]
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	7852      	ldrb	r2, [r2, #1]
 8001c7e:	701a      	strb	r2, [r3, #0]
                    break;
 8001c80:	e00c      	b.n	8001c9c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c8c:	f7ff fe1c 	bl	80018c8 <utf16_literal_to_utf8>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02c      	beq.n	8001cf4 <parse_string+0x25c>
                    break;
 8001c9a:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	4413      	add	r3, r2
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f4ff af67 	bcc.w	8001b7c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a3a      	ldr	r2, [r7, #32]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]

    return true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01e      	b.n	8001d1a <parse_string+0x282>
        goto fail;
 8001cdc:	bf00      	nop
 8001cde:	e00a      	b.n	8001cf6 <parse_string+0x25e>
                    goto fail;
 8001ce0:	bf00      	nop
 8001ce2:	e008      	b.n	8001cf6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001ce4:	bf00      	nop
 8001ce6:	e006      	b.n	8001cf6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001ce8:	bf00      	nop
 8001cea:	e004      	b.n	8001cf6 <parse_string+0x25e>
                goto fail;
 8001cec:	bf00      	nop
 8001cee:	e002      	b.n	8001cf6 <parse_string+0x25e>
                    goto fail;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <parse_string+0x25e>
                        goto fail;
 8001cf4:	bf00      	nop

fail:
    if (output != NULL)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	69f8      	ldr	r0, [r7, #28]
 8001d02:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop

08001d24 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <print_string_ptr+0x28>
    {
        return false;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e110      	b.n	8001f6e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d111      	bne.n	8001d76 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d52:	2103      	movs	r1, #3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff fb61 	bl	800141c <ensure>
 8001d5a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <print_string_ptr+0x42>
        {
            return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e103      	b.n	8001f6e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4a83      	ldr	r2, [pc, #524]	; (8001f78 <print_string_ptr+0x254>)
 8001d6a:	8811      	ldrh	r1, [r2, #0]
 8001d6c:	7892      	ldrb	r2, [r2, #2]
 8001d6e:	8019      	strh	r1, [r3, #0]
 8001d70:	709a      	strb	r2, [r3, #2]

        return true;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0fb      	b.n	8001f6e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e023      	b.n	8001dc4 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b22      	cmp	r3, #34	; 0x22
 8001d82:	dc0e      	bgt.n	8001da2 <print_string_ptr+0x7e>
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	db12      	blt.n	8001dae <print_string_ptr+0x8a>
 8001d88:	3b08      	subs	r3, #8
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <print_string_ptr+0x258>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <print_string_ptr+0x82>
 8001da0:	e005      	b.n	8001dae <print_string_ptr+0x8a>
 8001da2:	2b5c      	cmp	r3, #92	; 0x5c
 8001da4:	d103      	bne.n	8001dae <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
                break;
 8001dac:	e007      	b.n	8001dbe <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b1f      	cmp	r3, #31
 8001db4:	d802      	bhi.n	8001dbc <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3305      	adds	r3, #5
 8001dba:	617b      	str	r3, [r7, #20]
                }
                break;
 8001dbc:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1d7      	bne.n	8001d7c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	4619      	mov	r1, r3
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f7ff fb1b 	bl	800141c <ensure>
 8001de6:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <print_string_ptr+0xce>
    {
        return false;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e0bd      	b.n	8001f6e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d117      	bne.n	8001e28 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2222      	movs	r2, #34	; 0x22
 8001dfc:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	3301      	adds	r3, #1
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00a fe66 	bl	800cad8 <memcpy>
        output[output_length + 1] = '\"';
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	2222      	movs	r2, #34	; 0x22
 8001e16:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

        return true;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0a2      	b.n	8001f6e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2222      	movs	r2, #34	; 0x22
 8001e2c:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e087      	b.n	8001f4a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b1f      	cmp	r3, #31
 8001e40:	d90c      	bls.n	8001e5c <print_string_ptr+0x138>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b22      	cmp	r3, #34	; 0x22
 8001e48:	d008      	beq.n	8001e5c <print_string_ptr+0x138>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b5c      	cmp	r3, #92	; 0x5c
 8001e50:	d004      	beq.n	8001e5c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e070      	b.n	8001f3e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	61ba      	str	r2, [r7, #24]
 8001e62:	225c      	movs	r2, #92	; 0x5c
 8001e64:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b22      	cmp	r3, #34	; 0x22
 8001e6c:	dc3e      	bgt.n	8001eec <print_string_ptr+0x1c8>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	db5a      	blt.n	8001f28 <print_string_ptr+0x204>
 8001e72:	3b08      	subs	r3, #8
 8001e74:	2b1a      	cmp	r3, #26
 8001e76:	d857      	bhi.n	8001f28 <print_string_ptr+0x204>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <print_string_ptr+0x15c>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001f01 	.word	0x08001f01
 8001e84:	08001f21 	.word	0x08001f21
 8001e88:	08001f11 	.word	0x08001f11
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f09 	.word	0x08001f09
 8001e94:	08001f19 	.word	0x08001f19
 8001e98:	08001f29 	.word	0x08001f29
 8001e9c:	08001f29 	.word	0x08001f29
 8001ea0:	08001f29 	.word	0x08001f29
 8001ea4:	08001f29 	.word	0x08001f29
 8001ea8:	08001f29 	.word	0x08001f29
 8001eac:	08001f29 	.word	0x08001f29
 8001eb0:	08001f29 	.word	0x08001f29
 8001eb4:	08001f29 	.word	0x08001f29
 8001eb8:	08001f29 	.word	0x08001f29
 8001ebc:	08001f29 	.word	0x08001f29
 8001ec0:	08001f29 	.word	0x08001f29
 8001ec4:	08001f29 	.word	0x08001f29
 8001ec8:	08001f29 	.word	0x08001f29
 8001ecc:	08001f29 	.word	0x08001f29
 8001ed0:	08001f29 	.word	0x08001f29
 8001ed4:	08001f29 	.word	0x08001f29
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	08001f29 	.word	0x08001f29
 8001ee0:	08001f29 	.word	0x08001f29
 8001ee4:	08001f29 	.word	0x08001f29
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	2b5c      	cmp	r3, #92	; 0x5c
 8001eee:	d11b      	bne.n	8001f28 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	225c      	movs	r2, #92	; 0x5c
 8001ef4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ef6:	e022      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2222      	movs	r2, #34	; 0x22
 8001efc:	701a      	strb	r2, [r3, #0]
                    break;
 8001efe:	e01e      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2262      	movs	r2, #98	; 0x62
 8001f04:	701a      	strb	r2, [r3, #0]
                    break;
 8001f06:	e01a      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2266      	movs	r2, #102	; 0x66
 8001f0c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f0e:	e016      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	226e      	movs	r2, #110	; 0x6e
 8001f14:	701a      	strb	r2, [r3, #0]
                    break;
 8001f16:	e012      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2272      	movs	r2, #114	; 0x72
 8001f1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f1e:	e00e      	b.n	8001f3e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2274      	movs	r2, #116	; 0x74
 8001f24:	701a      	strb	r2, [r3, #0]
                    break;
 8001f26:	e00a      	b.n	8001f3e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4914      	ldr	r1, [pc, #80]	; (8001f80 <print_string_ptr+0x25c>)
 8001f30:	69b8      	ldr	r0, [r7, #24]
 8001f32:	f00a fedf 	bl	800ccf4 <siprintf>
                    output_pointer += 4;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	61bb      	str	r3, [r7, #24]
                    break;
 8001f3c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f af73 	bne.w	8001e3a <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2222      	movs	r2, #34	; 0x22
 8001f5e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3302      	adds	r3, #2
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]

    return true;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	080103c4 	.word	0x080103c4
 8001f7c:	04000037 	.word	0x04000037
 8001f80:	080103c8 	.word	0x080103c8

08001f84 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fec5 	bl	8001d24 <print_string_ptr>
 8001f9a:	4603      	mov	r3, r0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <buffer_skip_whitespace+0x16>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e02c      	b.n	8002018 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <buffer_skip_whitespace+0x2c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d306      	bcc.n	8001fde <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	e021      	b.n	8002018 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <buffer_skip_whitespace+0x5c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <buffer_skip_whitespace+0x5c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d9e9      	bls.n	8001fd4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d104      	bne.n	8002016 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <skip_utf8_bom+0x1e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <skip_utf8_bom+0x1e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	e01c      	b.n	8002080 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d018      	beq.n	800207e <skip_utf8_bom+0x5a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	1d1a      	adds	r2, r3, #4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d211      	bcs.n	800207e <skip_utf8_bom+0x5a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4413      	add	r3, r2
 8002064:	2203      	movs	r2, #3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <skip_utf8_bom+0x64>)
 8002068:	4618      	mov	r0, r3
 800206a:	f00a fed4 	bl	800ce16 <strncmp>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	1cda      	adds	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	080103d0 	.word	0x080103d0

0800208c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	e00c      	b.n	80020bc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7fe f8a6 	bl	80001f4 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f805 	bl	80020c4 <cJSON_ParseWithLengthOpts>
 80020ba:	4603      	mov	r3, r0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	615a      	str	r2, [r3, #20]
 80020e4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d042      	beq.n	8002182 <cJSON_ParseWithLengthOpts+0xbe>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03f      	beq.n	8002182 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800210e:	4a39      	ldr	r2, [pc, #228]	; (80021f4 <cJSON_ParseWithLengthOpts+0x130>)
 8002110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002114:	ca07      	ldmia	r2, {r0, r1, r2}
 8002116:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800211a:	4836      	ldr	r0, [pc, #216]	; (80021f4 <cJSON_ParseWithLengthOpts+0x130>)
 800211c:	f7ff f828 	bl	8001170 <cJSON_New_Item>
 8002120:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02e      	beq.n	8002186 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002128:	f107 0318 	add.w	r3, r7, #24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff79 	bl	8002024 <skip_utf8_bom>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff35 	bl	8001fa4 <buffer_skip_whitespace>
 800213a:	4603      	mov	r3, r0
 800213c:	4619      	mov	r1, r3
 800213e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002140:	f000 f8fc 	bl	800233c <parse_value>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01f      	beq.n	800218a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff25 	bl	8001fa4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d215      	bcs.n	800218e <cJSON_ParseWithLengthOpts+0xca>
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	e031      	b.n	80021e6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002182:	bf00      	nop
 8002184:	e004      	b.n	8002190 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002186:	bf00      	nop
 8002188:	e002      	b.n	8002190 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800218e:	bf00      	nop

fail:
    if (item != NULL)
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002198:	f7ff f800 	bl	800119c <cJSON_Delete>
    }

    if (value != NULL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80021aa:	6a3a      	ldr	r2, [r7, #32]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d202      	bcs.n	80021b8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e005      	b.n	80021c4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <cJSON_ParseWithLengthOpts+0x12c>)
 80021d6:	461a      	mov	r2, r3
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021e0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3738      	adds	r7, #56	; 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000224 	.word	0x20000224
 80021f4:	20000000 	.word	0x20000000

080021f8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff41 	bl	800208c <cJSON_ParseWithOpts>
 800220a:	4603      	mov	r3, r0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	2224      	movs	r2, #36	; 0x24
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f00a fc61 	bl	800caf4 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a38      	ldr	r2, [pc, #224]	; (8002318 <print+0x104>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4610      	mov	r0, r2
 800223c:	4798      	blx	r3
 800223e:	4603      	mov	r3, r0
 8002240:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <print+0x104>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	ca07      	ldmia	r2, {r0, r1, r2}
 8002254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f955 	bl	8002514 <print_value>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d039      	beq.n	80022e4 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f96b 	bl	8001550 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	6938      	ldr	r0, [r7, #16]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	3201      	adds	r2, #1
 800228c:	4611      	mov	r1, r2
 800228e:	4798      	blx	r3
 8002290:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	d027      	beq.n	80022e8 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e01e      	b.n	80022dc <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	3201      	adds	r2, #1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4798      	blx	r3
 80022aa:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01c      	beq.n	80022ec <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	bf28      	it	cs
 80022be:	4613      	movcs	r3, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022c4:	f00a fc08 	bl	800cad8 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022cc:	4413      	add	r3, r2
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4610      	mov	r0, r2
 80022da:	4798      	blx	r3
    }

    return printed;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	e016      	b.n	800230e <print+0xfa>
        goto fail;
 80022e0:	bf00      	nop
 80022e2:	e004      	b.n	80022ee <print+0xda>
        goto fail;
 80022e4:	bf00      	nop
 80022e6:	e002      	b.n	80022ee <print+0xda>
            goto fail;
 80022e8:	bf00      	nop
 80022ea:	e000      	b.n	80022ee <print+0xda>
            goto fail;
 80022ec:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4610      	mov	r0, r2
 80022fc:	4798      	blx	r3
    }

    if (printed != NULL)
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <print+0xf8>
    {
        hooks->deallocate(printed);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800230a:	4798      	blx	r3
    }

    return NULL;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3738      	adds	r7, #56	; 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	08010480 	.word	0x08010480

0800231c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <cJSON_Print+0x1c>)
 8002326:	2101      	movs	r1, #1
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff73 	bl	8002214 <print>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000000 	.word	0x20000000

0800233c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <parse_value+0x18>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <parse_value+0x1c>
    {
        return false; /* no input */
 8002354:	2300      	movs	r3, #0
 8002356:	e0d2      	b.n	80024fe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01d      	beq.n	800239a <parse_value+0x5e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	1d1a      	adds	r2, r3, #4
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d816      	bhi.n	800239a <parse_value+0x5e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4413      	add	r3, r2
 8002376:	2204      	movs	r2, #4
 8002378:	4963      	ldr	r1, [pc, #396]	; (8002508 <parse_value+0x1cc>)
 800237a:	4618      	mov	r0, r3
 800237c:	f00a fd4b 	bl	800ce16 <strncmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	609a      	str	r2, [r3, #8]
        return true;
 8002396:	2301      	movs	r3, #1
 8002398:	e0b1      	b.n	80024fe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01d      	beq.n	80023dc <parse_value+0xa0>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	1d5a      	adds	r2, r3, #5
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d816      	bhi.n	80023dc <parse_value+0xa0>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	2205      	movs	r2, #5
 80023ba:	4954      	ldr	r1, [pc, #336]	; (800250c <parse_value+0x1d0>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f00a fd2a 	bl	800ce16 <strncmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	1d5a      	adds	r2, r3, #5
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]
        return true;
 80023d8:	2301      	movs	r3, #1
 80023da:	e090      	b.n	80024fe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <parse_value+0xe8>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d819      	bhi.n	8002424 <parse_value+0xe8>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	2204      	movs	r2, #4
 80023fc:	4944      	ldr	r1, [pc, #272]	; (8002510 <parse_value+0x1d4>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f00a fd09 	bl	800ce16 <strncmp>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	609a      	str	r2, [r3, #8]
        return true;
 8002420:	2301      	movs	r3, #1
 8002422:	e06c      	b.n	80024fe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d013      	beq.n	8002452 <parse_value+0x116>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d20d      	bcs.n	8002452 <parse_value+0x116>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b22      	cmp	r3, #34	; 0x22
 8002444:	d105      	bne.n	8002452 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fb25 	bl	8001a98 <parse_string>
 800244e:	4603      	mov	r3, r0
 8002450:	e055      	b.n	80024fe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <parse_value+0x164>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	d21d      	bcs.n	80024a0 <parse_value+0x164>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b2d      	cmp	r3, #45	; 0x2d
 8002472:	d00f      	beq.n	8002494 <parse_value+0x158>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b2f      	cmp	r3, #47	; 0x2f
 8002482:	d90d      	bls.n	80024a0 <parse_value+0x164>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b39      	cmp	r3, #57	; 0x39
 8002492:	d805      	bhi.n	80024a0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fed2 	bl	8001240 <parse_number>
 800249c:	4603      	mov	r3, r0
 800249e:	e02e      	b.n	80024fe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d013      	beq.n	80024ce <parse_value+0x192>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d20d      	bcs.n	80024ce <parse_value+0x192>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b5b      	cmp	r3, #91	; 0x5b
 80024c0:	d105      	bne.n	80024ce <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f909 	bl	80026dc <parse_array>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e017      	b.n	80024fe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <parse_value+0x1c0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d20d      	bcs.n	80024fc <parse_value+0x1c0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b7b      	cmp	r3, #123	; 0x7b
 80024ee:	d105      	bne.n	80024fc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa3c 	bl	8002970 <parse_object>
 80024f8:	4603      	mov	r3, r0
 80024fa:	e000      	b.n	80024fe <parse_value+0x1c2>
    }

    return false;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	080103a4 	.word	0x080103a4
 800250c:	080103d4 	.word	0x080103d4
 8002510:	080103dc 	.word	0x080103dc

08002514 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <print_value+0x1a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <print_value+0x1e>
    {
        return false;
 800252e:	2300      	movs	r3, #0
 8002530:	e0c9      	b.n	80026c6 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	f000 808e 	beq.w	800265a <print_value+0x146>
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	f300 80c0 	bgt.w	80026c4 <print_value+0x1b0>
 8002544:	2b20      	cmp	r3, #32
 8002546:	dc49      	bgt.n	80025dc <print_value+0xc8>
 8002548:	2b00      	cmp	r3, #0
 800254a:	f340 80bb 	ble.w	80026c4 <print_value+0x1b0>
 800254e:	3b01      	subs	r3, #1
 8002550:	2b1f      	cmp	r3, #31
 8002552:	f200 80b7 	bhi.w	80026c4 <print_value+0x1b0>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <print_value+0x48>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	08002607 	.word	0x08002607
 8002560:	0800262b 	.word	0x0800262b
 8002564:	080026c5 	.word	0x080026c5
 8002568:	080025e3 	.word	0x080025e3
 800256c:	080026c5 	.word	0x080026c5
 8002570:	080026c5 	.word	0x080026c5
 8002574:	080026c5 	.word	0x080026c5
 8002578:	0800264f 	.word	0x0800264f
 800257c:	080026c5 	.word	0x080026c5
 8002580:	080026c5 	.word	0x080026c5
 8002584:	080026c5 	.word	0x080026c5
 8002588:	080026c5 	.word	0x080026c5
 800258c:	080026c5 	.word	0x080026c5
 8002590:	080026c5 	.word	0x080026c5
 8002594:	080026c5 	.word	0x080026c5
 8002598:	080026a1 	.word	0x080026a1
 800259c:	080026c5 	.word	0x080026c5
 80025a0:	080026c5 	.word	0x080026c5
 80025a4:	080026c5 	.word	0x080026c5
 80025a8:	080026c5 	.word	0x080026c5
 80025ac:	080026c5 	.word	0x080026c5
 80025b0:	080026c5 	.word	0x080026c5
 80025b4:	080026c5 	.word	0x080026c5
 80025b8:	080026c5 	.word	0x080026c5
 80025bc:	080026c5 	.word	0x080026c5
 80025c0:	080026c5 	.word	0x080026c5
 80025c4:	080026c5 	.word	0x080026c5
 80025c8:	080026c5 	.word	0x080026c5
 80025cc:	080026c5 	.word	0x080026c5
 80025d0:	080026c5 	.word	0x080026c5
 80025d4:	080026c5 	.word	0x080026c5
 80025d8:	080026ad 	.word	0x080026ad
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d06b      	beq.n	80026b8 <print_value+0x1a4>
 80025e0:	e070      	b.n	80026c4 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025e2:	2105      	movs	r1, #5
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	f7fe ff19 	bl	800141c <ensure>
 80025ea:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <print_value+0xe2>
            {
                return false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e067      	b.n	80026c6 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a35      	ldr	r2, [pc, #212]	; (80026d0 <print_value+0x1bc>)
 80025fa:	6810      	ldr	r0, [r2, #0]
 80025fc:	6018      	str	r0, [r3, #0]
 80025fe:	7912      	ldrb	r2, [r2, #4]
 8002600:	711a      	strb	r2, [r3, #4]
            return true;
 8002602:	2301      	movs	r3, #1
 8002604:	e05f      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002606:	2106      	movs	r1, #6
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f7fe ff07 	bl	800141c <ensure>
 800260e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <print_value+0x106>
            {
                return false;
 8002616:	2300      	movs	r3, #0
 8002618:	e055      	b.n	80026c6 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <print_value+0x1c0>)
 800261e:	6810      	ldr	r0, [r2, #0]
 8002620:	6018      	str	r0, [r3, #0]
 8002622:	8892      	ldrh	r2, [r2, #4]
 8002624:	809a      	strh	r2, [r3, #4]
            return true;
 8002626:	2301      	movs	r3, #1
 8002628:	e04d      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800262a:	2105      	movs	r1, #5
 800262c:	6838      	ldr	r0, [r7, #0]
 800262e:	f7fe fef5 	bl	800141c <ensure>
 8002632:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <print_value+0x12a>
            {
                return false;
 800263a:	2300      	movs	r3, #0
 800263c:	e043      	b.n	80026c6 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <print_value+0x1c4>)
 8002642:	6810      	ldr	r0, [r2, #0]
 8002644:	6018      	str	r0, [r3, #0]
 8002646:	7912      	ldrb	r2, [r2, #4]
 8002648:	711a      	strb	r2, [r3, #4]
            return true;
 800264a:	2301      	movs	r3, #1
 800264c:	e03b      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe ffe7 	bl	8001624 <print_number>
 8002656:	4603      	mov	r3, r0
 8002658:	e035      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <print_value+0x156>
            {
                return false;
 8002666:	2300      	movs	r3, #0
 8002668:	e02d      	b.n	80026c6 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd fdc0 	bl	80001f4 <strlen>
 8002674:	4603      	mov	r3, r0
 8002676:	3301      	adds	r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f7fe fecd 	bl	800141c <ensure>
 8002682:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <print_value+0x17a>
            {
                return false;
 800268a:	2300      	movs	r3, #0
 800268c:	e01b      	b.n	80026c6 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	4619      	mov	r1, r3
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f00a fa1e 	bl	800cad8 <memcpy>
            return true;
 800269c:	2301      	movs	r3, #1
 800269e:	e012      	b.n	80026c6 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fc6e 	bl	8001f84 <print_string>
 80026a8:	4603      	mov	r3, r0
 80026aa:	e00c      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8d8 	bl	8002864 <print_array>
 80026b4:	4603      	mov	r3, r0
 80026b6:	e006      	b.n	80026c6 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa57 	bl	8002b6e <print_object>
 80026c0:	4603      	mov	r3, r0
 80026c2:	e000      	b.n	80026c6 <print_value+0x1b2>

        default:
            return false;
 80026c4:	2300      	movs	r3, #0
    }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	080103a4 	.word	0x080103a4
 80026d4:	080103d4 	.word	0x080103d4
 80026d8:	080103dc 	.word	0x080103dc

080026dc <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f6:	d301      	bcc.n	80026fc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026f8:	2300      	movs	r3, #0
 80026fa:	e0af      	b.n	800285c <parse_array+0x180>
    }
    input_buffer->depth++;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b5b      	cmp	r3, #91	; 0x5b
 8002714:	f040 8094 	bne.w	8002840 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f7ff fc3e 	bl	8001fa4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <parse_array+0x6e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	d207      	bcs.n	800274a <parse_array+0x6e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b5d      	cmp	r3, #93	; 0x5d
 8002748:	d061      	beq.n	800280e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <parse_array+0x80>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d305      	bcc.n	8002768 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	609a      	str	r2, [r3, #8]
        goto fail;
 8002766:	e072      	b.n	800284e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3310      	adds	r3, #16
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fcfa 	bl	8001170 <cJSON_New_Item>
 800277c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05f      	beq.n	8002844 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e007      	b.n	80027a4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f7ff fbf8 	bl	8001fa4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	6938      	ldr	r0, [r7, #16]
 80027b8:	f7ff fdc0 	bl	800233c <parse_value>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d042      	beq.n	8002848 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	f7ff fbee 	bl	8001fa4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <parse_array+0x10e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d207      	bcs.n	80027ea <parse_array+0x10e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b2c      	cmp	r3, #44	; 0x2c
 80027e8:	d0c3      	beq.n	8002772 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02d      	beq.n	800284c <parse_array+0x170>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d227      	bcs.n	800284c <parse_array+0x170>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b5d      	cmp	r3, #93	; 0x5d
 800280a:	d11f      	bne.n	800284c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800280c:	e000      	b.n	8002810 <parse_array+0x134>
        goto success;
 800280e:	bf00      	nop
    input_buffer->depth--;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <parse_array+0x14a>
        head->prev = current_item;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]

    return true;
 800283c:	2301      	movs	r3, #1
 800283e:	e00d      	b.n	800285c <parse_array+0x180>
        goto fail;
 8002840:	bf00      	nop
 8002842:	e004      	b.n	800284e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002844:	bf00      	nop
 8002846:	e002      	b.n	800284e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <parse_array+0x172>
        goto fail; /* expected end of array */
 800284c:	bf00      	nop

fail:
    if (head != NULL)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002854:	6978      	ldr	r0, [r7, #20]
 8002856:	f7fe fca1 	bl	800119c <cJSON_Delete>
    }

    return false;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <print_array+0x22>
    {
        return false;
 8002882:	2300      	movs	r3, #0
 8002884:	e070      	b.n	8002968 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002886:	2101      	movs	r1, #1
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f7fe fdc7 	bl	800141c <ensure>
 800288e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <print_array+0x36>
    {
        return false;
 8002896:	2300      	movs	r3, #0
 8002898:	e066      	b.n	8002968 <print_array+0x104>
    }

    *output_pointer = '[';
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	225b      	movs	r2, #91	; 0x5b
 800289e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80028b4:	e03d      	b.n	8002932 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	6938      	ldr	r0, [r7, #16]
 80028ba:	f7ff fe2b 	bl	8002514 <print_value>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <print_array+0x64>
        {
            return false;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e04f      	b.n	8002968 <print_array+0x104>
        }
        update_offset(output_buffer);
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f7fe fe41 	bl	8001550 <update_offset>
        if (current_element->next)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d02a      	beq.n	800292c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <print_array+0x7e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e000      	b.n	80028e4 <print_array+0x80>
 80028e2:	2301      	movs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f7fe fd95 	bl	800141c <ensure>
 80028f2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <print_array+0x9a>
            {
                return false;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e034      	b.n	8002968 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	617a      	str	r2, [r7, #20]
 8002904:	222c      	movs	r2, #44	; 0x2c
 8002906:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	617a      	str	r2, [r7, #20]
 8002916:	2220      	movs	r2, #32
 8002918:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	441a      	add	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1be      	bne.n	80028b6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002938:	2102      	movs	r1, #2
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f7fe fd6e 	bl	800141c <ensure>
 8002940:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <print_array+0xe8>
    {
        return false;
 8002948:	2300      	movs	r3, #0
 800294a:	e00d      	b.n	8002968 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	617a      	str	r2, [r7, #20]
 8002952:	225d      	movs	r2, #93	; 0x5d
 8002954:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	60da      	str	r2, [r3, #12]

    return true;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298a:	d301      	bcc.n	8002990 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800298c:	2300      	movs	r3, #0
 800298e:	e0ea      	b.n	8002b66 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80d0 	beq.w	8002b42 <parse_object+0x1d2>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	f080 80c9 	bcs.w	8002b42 <parse_object+0x1d2>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b7b      	cmp	r3, #123	; 0x7b
 80029be:	f040 80c0 	bne.w	8002b42 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f7ff fae9 	bl	8001fa4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <parse_object+0x86>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d208      	bcs.n	80029f6 <parse_object+0x86>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b7d      	cmp	r3, #125	; 0x7d
 80029f2:	f000 808d 	beq.w	8002b10 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <parse_object+0x98>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d305      	bcc.n	8002a14 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	609a      	str	r2, [r3, #8]
        goto fail;
 8002a12:	e0a1      	b.n	8002b58 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3310      	adds	r3, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fba4 	bl	8001170 <cJSON_New_Item>
 8002a28:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 808a 	beq.w	8002b46 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e007      	b.n	8002a52 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a5c:	6838      	ldr	r0, [r7, #0]
 8002a5e:	f7ff faa1 	bl	8001fa4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	6938      	ldr	r0, [r7, #16]
 8002a66:	f7ff f817 	bl	8001a98 <parse_string>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d06c      	beq.n	8002b4a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a70:	6838      	ldr	r0, [r7, #0]
 8002a72:	f7ff fa97 	bl	8001fa4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d061      	beq.n	8002b4e <parse_object+0x1de>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d25b      	bcs.n	8002b4e <parse_object+0x1de>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b3a      	cmp	r3, #58	; 0x3a
 8002aa4:	d153      	bne.n	8002b4e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002ab0:	6838      	ldr	r0, [r7, #0]
 8002ab2:	f7ff fa77 	bl	8001fa4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	6938      	ldr	r0, [r7, #16]
 8002aba:	f7ff fc3f 	bl	800233c <parse_value>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d046      	beq.n	8002b52 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f7ff fa6d 	bl	8001fa4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <parse_object+0x17c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d207      	bcs.n	8002aec <parse_object+0x17c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b2c      	cmp	r3, #44	; 0x2c
 8002aea:	d098      	beq.n	8002a1e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d031      	beq.n	8002b56 <parse_object+0x1e6>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d22b      	bcs.n	8002b56 <parse_object+0x1e6>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b7d      	cmp	r3, #125	; 0x7d
 8002b0c:	d123      	bne.n	8002b56 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002b0e:	e000      	b.n	8002b12 <parse_object+0x1a2>
        goto success; /* empty object */
 8002b10:	bf00      	nop
    input_buffer->depth--;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <parse_object+0x1b8>
        head->prev = current_item;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2240      	movs	r2, #64	; 0x40
 8002b2c:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	609a      	str	r2, [r3, #8]
    return true;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e011      	b.n	8002b66 <parse_object+0x1f6>
        goto fail; /* not an object */
 8002b42:	bf00      	nop
 8002b44:	e008      	b.n	8002b58 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002b46:	bf00      	nop
 8002b48:	e006      	b.n	8002b58 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002b56:	bf00      	nop

fail:
    if (head != NULL)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7fe fb1c 	bl	800119c <cJSON_Delete>
    }

    return false;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <print_object+0x22>
    {
        return false;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e108      	b.n	8002da2 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <print_object+0x2e>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e000      	b.n	8002b9e <print_object+0x30>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f7fe fc38 	bl	800141c <ensure>
 8002bac:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <print_object+0x4a>
    {
        return false;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e0f4      	b.n	8002da2 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	227b      	movs	r2, #123	; 0x7b
 8002bc0:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	61fa      	str	r2, [r7, #28]
 8002bda:	220a      	movs	r2, #10
 8002bdc:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	441a      	add	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bea:	e0a0      	b.n	8002d2e <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d022      	beq.n	8002c3a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f7fe fc0e 	bl	800141c <ensure>
 8002c00:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <print_object+0x9e>
            {
                return false;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e0ca      	b.n	8002da2 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e007      	b.n	8002c22 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	2209      	movs	r2, #9
 8002c1a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3f2      	bcc.n	8002c12 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	441a      	add	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f86f 	bl	8001d24 <print_string_ptr>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <print_object+0xe2>
        {
            return false;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e0a8      	b.n	8002da2 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f7fe fc7d 	bl	8001550 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <print_object+0xf4>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e000      	b.n	8002c64 <print_object+0xf6>
 8002c62:	2301      	movs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f7fe fbd7 	bl	800141c <ensure>
 8002c6e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <print_object+0x10c>
        {
            return false;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e093      	b.n	8002da2 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	61fa      	str	r2, [r7, #28]
 8002c80:	223a      	movs	r2, #58	; 0x3a
 8002c82:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	2209      	movs	r2, #9
 8002c94:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	69b8      	ldr	r0, [r7, #24]
 8002ca6:	f7ff fc35 	bl	8002514 <print_value>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <print_object+0x146>
        {
            return false;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e076      	b.n	8002da2 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f7fe fc4b 	bl	8001550 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <print_object+0x158>
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	e000      	b.n	8002cc8 <print_object+0x15a>
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <print_object+0x166>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <print_object+0x168>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6838      	ldr	r0, [r7, #0]
 8002ce2:	f7fe fb9b 	bl	800141c <ensure>
 8002ce6:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <print_object+0x184>
        {
            return false;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e057      	b.n	8002da2 <print_object+0x234>
        }
        if (current_item->next)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	222c      	movs	r2, #44	; 0x2c
 8002d02:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	61fa      	str	r2, [r7, #28]
 8002d12:	220a      	movs	r2, #10
 8002d14:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	441a      	add	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f af5b 	bne.w	8002bec <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <print_object+0x1d8>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	e000      	b.n	8002d48 <print_object+0x1da>
 8002d46:	2302      	movs	r3, #2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f7fe fb66 	bl	800141c <ensure>
 8002d50:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <print_object+0x1ee>
    {
        return false;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e022      	b.n	8002da2 <print_object+0x234>
    }
    if (output_buffer->format)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e007      	b.n	8002d7a <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	2209      	movs	r2, #9
 8002d72:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	3301      	adds	r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3f1      	bcc.n	8002d6a <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	61fa      	str	r2, [r7, #28]
 8002d8c:	227d      	movs	r2, #125	; 0x7d
 8002d8e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	1e5a      	subs	r2, r3, #1
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	60da      	str	r2, [r3, #12]

    return true;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <get_object_item+0x1c>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <get_object_item+0x20>
    {
        return NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e033      	b.n	8002e32 <get_object_item+0x88>
    }

    current_element = object->child;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d017      	beq.n	8002e06 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dd6:	e002      	b.n	8002dde <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <get_object_item+0x74>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d018      	beq.n	8002e1e <get_object_item+0x74>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68b8      	ldr	r0, [r7, #8]
 8002df4:	f7fd f9f4 	bl	80001e0 <strcmp>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ec      	bne.n	8002dd8 <get_object_item+0x2e>
 8002dfe:	e00e      	b.n	8002e1e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <get_object_item+0x74>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4619      	mov	r1, r3
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7fe f918 	bl	8001048 <case_insensitive_strcmp>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <get_object_item+0x82>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <get_object_item+0x86>
        return NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <get_object_item+0x88>
    }

    return current_element;
 8002e30:	697b      	ldr	r3, [r7, #20]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ffae 	bl	8002daa <get_object_item>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <add_item_to_array+0x22>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <add_item_to_array+0x22>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d101      	bne.n	8002ea0 <add_item_to_array+0x26>
    {
        return false;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e01e      	b.n	8002ede <add_item_to_array+0x64>
    }

    child = array->child;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e00d      	b.n	8002edc <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ffc2 	bl	8002e58 <suffix_object>
            array->child->prev = item;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002eee:	687b      	ldr	r3, [r7, #4]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <add_item_to_object+0x30>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <add_item_to_object+0x30>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <add_item_to_object+0x30>
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d101      	bne.n	8002f30 <add_item_to_object+0x34>
    {
        return false;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e036      	b.n	8002f9e <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002f36:	68b8      	ldr	r0, [r7, #8]
 8002f38:	f7ff ffd5 	bl	8002ee6 <cast_away_const>
 8002f3c:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e00e      	b.n	8002f68 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7fe f8e7 	bl	8001120 <cJSON_strdup>
 8002f52:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <add_item_to_object+0x62>
        {
            return false;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e01f      	b.n	8002f9e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f66:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <add_item_to_object+0x8c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6a12      	ldr	r2, [r2, #32]
 8002f84:	4610      	mov	r0, r2
 8002f86:	4798      	blx	r3
    }

    item->string = new_key;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff ff6f 	bl	8002e7a <add_item_to_array>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002fb6:	ed97 0b00 	vldr	d0, [r7]
 8002fba:	f000 f819 	bl	8002ff0 <cJSON_CreateNumber>
 8002fbe:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <cJSON_AddNumberToObject+0x44>)
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff ff96 	bl	8002efc <add_item_to_object>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	e003      	b.n	8002fe2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7fe f8de 	bl	800119c <cJSON_Delete>
    return NULL;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002ffa:	481f      	ldr	r0, [pc, #124]	; (8003078 <cJSON_CreateNumber+0x88>)
 8002ffc:	f7fe f8b8 	bl	8001170 <cJSON_New_Item>
 8003000:	60f8      	str	r0, [r7, #12]
    if(item)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02c      	beq.n	8003062 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2208      	movs	r2, #8
 800300c:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003014:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003018:	a315      	add	r3, pc, #84	; (adr r3, 8003070 <cJSON_CreateNumber+0x80>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003022:	f7fd fd87 	bl	8000b34 <__aeabi_dcmpge>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003032:	615a      	str	r2, [r3, #20]
 8003034:	e015      	b.n	8003062 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <cJSON_CreateNumber+0x8c>)
 800303c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003040:	f7fd fd6e 	bl	8000b20 <__aeabi_dcmple>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003050:	615a      	str	r2, [r3, #20]
 8003052:	e006      	b.n	8003062 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8003054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003058:	f7fd fd96 	bl	8000b88 <__aeabi_d2iz>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	f3af 8000 	nop.w
 8003070:	ffc00000 	.word	0xffc00000
 8003074:	41dfffff 	.word	0x41dfffff
 8003078:	20000000 	.word	0x20000000
 800307c:	c1e00000 	.word	0xc1e00000

08003080 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003086:	4807      	ldr	r0, [pc, #28]	; (80030a4 <cJSON_CreateObject+0x24>)
 8003088:	f7fe f872 	bl	8001170 <cJSON_New_Item>
 800308c:	6078      	str	r0, [r7, #4]
    if (item)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	60da      	str	r2, [r3, #12]
    }

    return item;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000000 	.word	0x20000000

080030a8 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <cJSON_IsBool+0x12>
    {
        return false;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e008      	b.n	80030cc <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <cJSON_IsNumber+0x12>
    {
        return false;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e007      	b.n	80030fa <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <cJSON_IsObject+0x12>
    {
        return false;
 8003114:	2300      	movs	r3, #0
 8003116:	e007      	b.n	8003128 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <deserializeJSON>:
 * This function takes a JSON string and fills a GameInfo struct with the deserialized information.
 *
 * @param json_data The JSON data to be deserialized.
 * @param info Pointer to the GameInfo struct to store the deserialized information.
 */
void deserializeJSON(const char* json_data, struct GameInfo* info) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	; 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_data);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff f85a 	bl	80021f8 <cJSON_Parse>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

    // Who is JSON?

    if (root == NULL) {
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d079      	beq.n	8003240 <deserializeJSON+0x10c>
        // Handle the error here, e.g., set default values or return.
        return;
    }

    cJSON *team1_json = cJSON_GetObjectItem(root, "team1");
 800314c:	493e      	ldr	r1, [pc, #248]	; (8003248 <deserializeJSON+0x114>)
 800314e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003150:	f7ff fe73 	bl	8002e3a <cJSON_GetObjectItem>
 8003154:	6238      	str	r0, [r7, #32]
    cJSON *team2_json = cJSON_GetObjectItem(root, "team2");
 8003156:	493d      	ldr	r1, [pc, #244]	; (800324c <deserializeJSON+0x118>)
 8003158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800315a:	f7ff fe6e 	bl	8002e3a <cJSON_GetObjectItem>
 800315e:	61f8      	str	r0, [r7, #28]
    cJSON *end_of_round_json = cJSON_GetObjectItem(root, "end_of_round");
 8003160:	493b      	ldr	r1, [pc, #236]	; (8003250 <deserializeJSON+0x11c>)
 8003162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003164:	f7ff fe69 	bl	8002e3a <cJSON_GetObjectItem>
 8003168:	61b8      	str	r0, [r7, #24]

    if (team1_json && cJSON_IsObject(team1_json)) {
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d029      	beq.n	80031c4 <deserializeJSON+0x90>
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f7ff ffc8 	bl	8003106 <cJSON_IsObject>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <deserializeJSON+0x90>
        cJSON *score_json = cJSON_GetObjectItem(team1_json, "score");
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <deserializeJSON+0x120>)
 800317e:	6a38      	ldr	r0, [r7, #32]
 8003180:	f7ff fe5b 	bl	8002e3a <cJSON_GetObjectItem>
 8003184:	6178      	str	r0, [r7, #20]
        cJSON *state_json = cJSON_GetObjectItem(team1_json, "state");
 8003186:	4934      	ldr	r1, [pc, #208]	; (8003258 <deserializeJSON+0x124>)
 8003188:	6a38      	ldr	r0, [r7, #32]
 800318a:	f7ff fe56 	bl	8002e3a <cJSON_GetObjectItem>
 800318e:	6138      	str	r0, [r7, #16]

        if (score_json && cJSON_IsNumber(score_json)) {
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <deserializeJSON+0x76>
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff9e 	bl	80030d8 <cJSON_IsNumber>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <deserializeJSON+0x76>
            info->team1.score = score_json->valueint;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	601a      	str	r2, [r3, #0]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <deserializeJSON+0x90>
 80031b0:	6938      	ldr	r0, [r7, #16]
 80031b2:	f7ff ff91 	bl	80030d8 <cJSON_IsNumber>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <deserializeJSON+0x90>
            info->team1.state = state_json->valueint;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	605a      	str	r2, [r3, #4]
        }
    }

    if (team2_json && cJSON_IsObject(team2_json)) {
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d029      	beq.n	800321e <deserializeJSON+0xea>
 80031ca:	69f8      	ldr	r0, [r7, #28]
 80031cc:	f7ff ff9b 	bl	8003106 <cJSON_IsObject>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <deserializeJSON+0xea>
        cJSON *score_json = cJSON_GetObjectItem(team2_json, "score");
 80031d6:	491f      	ldr	r1, [pc, #124]	; (8003254 <deserializeJSON+0x120>)
 80031d8:	69f8      	ldr	r0, [r7, #28]
 80031da:	f7ff fe2e 	bl	8002e3a <cJSON_GetObjectItem>
 80031de:	60f8      	str	r0, [r7, #12]
        cJSON *state_json = cJSON_GetObjectItem(team2_json, "state");
 80031e0:	491d      	ldr	r1, [pc, #116]	; (8003258 <deserializeJSON+0x124>)
 80031e2:	69f8      	ldr	r0, [r7, #28]
 80031e4:	f7ff fe29 	bl	8002e3a <cJSON_GetObjectItem>
 80031e8:	60b8      	str	r0, [r7, #8]

        if (score_json && cJSON_IsNumber(score_json)) {
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <deserializeJSON+0xd0>
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ff71 	bl	80030d8 <cJSON_IsNumber>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <deserializeJSON+0xd0>
            info->team2.score = score_json->valueint;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	609a      	str	r2, [r3, #8]
        }

        if (state_json && cJSON_IsNumber(state_json)) {
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <deserializeJSON+0xea>
 800320a:	68b8      	ldr	r0, [r7, #8]
 800320c:	f7ff ff64 	bl	80030d8 <cJSON_IsNumber>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <deserializeJSON+0xea>
            info->team2.state = state_json->valueint;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	60da      	str	r2, [r3, #12]
        }
    }
    if (end_of_round_json && cJSON_IsBool(end_of_round_json)) {
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <deserializeJSON+0x104>
 8003224:	69b8      	ldr	r0, [r7, #24]
 8003226:	f7ff ff3f 	bl	80030a8 <cJSON_IsBool>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <deserializeJSON+0x104>
        info->end_of_round = end_of_round_json->valueint;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	611a      	str	r2, [r3, #16]
    }

    cJSON_Delete(root);
 8003238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800323a:	f7fd ffaf 	bl	800119c <cJSON_Delete>
 800323e:	e000      	b.n	8003242 <deserializeJSON+0x10e>
        return;
 8003240:	bf00      	nop
}
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	080103e4 	.word	0x080103e4
 800324c:	080103ec 	.word	0x080103ec
 8003250:	080103f4 	.word	0x080103f4
 8003254:	08010404 	.word	0x08010404
 8003258:	0801040c 	.word	0x0801040c

0800325c <serializeJSON>:
 * This function takes a broadcast packet and serializes it into a JSON and stores it in a char array.
 *
 * @param packet Pointer to he JSON data to be seralized.
 * @param data Pointer to the string storing the serialized JSON information.
 */
void serializeJSON(BroadcastPacket* data, char* dst ){
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]

	 cJSON* json = cJSON_CreateObject();
 8003266:	f7ff ff0b 	bl	8003080 <cJSON_CreateObject>
 800326a:	60f8      	str	r0, [r7, #12]

	    if (json == NULL) {
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02e      	beq.n	80032d0 <serializeJSON+0x74>
//	        fprintf(stderr, "Failed to create JSON object.\n");
	        return NULL;
	    }

	    cJSON_AddNumberToObject(json, "battery", data->batteryVoltage); // battery voltage
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f95c 	bl	8000534 <__aeabi_ui2d>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	ec43 2b10 	vmov	d0, r2, r3
 8003284:	4914      	ldr	r1, [pc, #80]	; (80032d8 <serializeJSON+0x7c>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fe8e 	bl	8002fa8 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team1d", data->team0DeltaScore); // Team0 score delta
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f94f 	bl	8000534 <__aeabi_ui2d>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	ec43 2b10 	vmov	d0, r2, r3
 800329e:	490f      	ldr	r1, [pc, #60]	; (80032dc <serializeJSON+0x80>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff fe81 	bl	8002fa8 <cJSON_AddNumberToObject>
	    cJSON_AddNumberToObject(json, "team2d", data->team1DeltaScore);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f942 	bl	8000534 <__aeabi_ui2d>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	ec43 2b10 	vmov	d0, r2, r3
 80032b8:	4909      	ldr	r1, [pc, #36]	; (80032e0 <serializeJSON+0x84>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff fe74 	bl	8002fa8 <cJSON_AddNumberToObject>

	    dst = cJSON_Print(json);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff f82b 	bl	800231c <cJSON_Print>
 80032c6:	6038      	str	r0, [r7, #0]
	    cJSON_Delete(json);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7fd ff67 	bl	800119c <cJSON_Delete>

	    return dst;
 80032ce:	e000      	b.n	80032d2 <serializeJSON+0x76>
	        return NULL;
 80032d0:	bf00      	nop


}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	08010414 	.word	0x08010414
 80032dc:	0801041c 	.word	0x0801041c
 80032e0:	08010424 	.word	0x08010424

080032e4 <select_rfid_channel>:


/**
 * channel index is 0 indexed, 0-11
 */
uint8_t select_rfid_channel(uint8_t channel_index) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
	channel_index++;
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	3301      	adds	r3, #1
 80032f2:	71fb      	strb	r3, [r7, #7]

	// lol I originally wrote this to be 1 indexed, so I added
	// channel_index++ to make it 0 indexed, the rest of the
	// logic is 1 indexed though

	if (channel_index < 1 || channel_index > 12) {
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <select_rfid_channel+0x1c>
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d901      	bls.n	8003304 <select_rfid_channel+0x20>
		return 1;  // Invalid switch index
 8003300:	2301      	movs	r3, #1
 8003302:	e0d1      	b.n	80034a8 <select_rfid_channel+0x1c4>
	}

	// Set U2.4
	uint8_t switch_refdes = 0;  // U2.X for 1st layer switch
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
	if (channel_index <= 4) {
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d80e      	bhi.n	800332c <select_rfid_channel+0x48>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003314:	4866      	ldr	r0, [pc, #408]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003316:	f003 fa4d 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003320:	4863      	ldr	r0, [pc, #396]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003322:	f003 fa47 	bl	80067b4 <HAL_GPIO_WritePin>
		switch_refdes = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e01f      	b.n	800336c <select_rfid_channel+0x88>
	}
	else if (channel_index <= 8) {
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b08      	cmp	r3, #8
 8003330:	d80e      	bhi.n	8003350 <select_rfid_channel+0x6c>
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003332:	2201      	movs	r2, #1
 8003334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003338:	485d      	ldr	r0, [pc, #372]	; (80034b0 <select_rfid_channel+0x1cc>)
 800333a:	f003 fa3b 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 1);
 800333e:	2201      	movs	r2, #1
 8003340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003344:	485a      	ldr	r0, [pc, #360]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003346:	f003 fa35 	bl	80067b4 <HAL_GPIO_WritePin>
		switch_refdes = 2;
 800334a:	2302      	movs	r3, #2
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e00d      	b.n	800336c <select_rfid_channel+0x88>
	}
	else { // if channel_index <= 12
		HAL_GPIO_WritePin(SEL6_GPIO_Port, SEL6_Pin, 1);
 8003350:	2201      	movs	r2, #1
 8003352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003356:	4856      	ldr	r0, [pc, #344]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003358:	f003 fa2c 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, 0);
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003362:	4853      	ldr	r0, [pc, #332]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003364:	f003 fa26 	bl	80067b4 <HAL_GPIO_WritePin>
		switch_refdes = 3;
 8003368:	2303      	movs	r3, #3
 800336a:	73fb      	strb	r3, [r7, #15]
	}

	// The pattern on each 2nd layer switch is the same, use multiplexing
	uint8_t V0 = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	73bb      	strb	r3, [r7, #14]
	uint8_t V1 = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	737b      	strb	r3, [r7, #13]
	if (channel_index % 4 == 0) {  // 4, 8, 12
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <select_rfid_channel+0xa6>
		V0 = 1;
 8003380:	2301      	movs	r3, #1
 8003382:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	737b      	strb	r3, [r7, #13]
 8003388:	e019      	b.n	80033be <select_rfid_channel+0xda>
	}
	else if (channel_index % 4 == 1) {  // 1, 5, 9
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d104      	bne.n	80033a0 <select_rfid_channel+0xbc>
		V0 = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	73bb      	strb	r3, [r7, #14]
		V1 = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	737b      	strb	r3, [r7, #13]
 800339e:	e00e      	b.n	80033be <select_rfid_channel+0xda>
	}
	else if (channel_index % 4 == 2) {  // 2, 6, 10
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d104      	bne.n	80033b6 <select_rfid_channel+0xd2>
		V0 = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	737b      	strb	r3, [r7, #13]
 80033b4:	e003      	b.n	80033be <select_rfid_channel+0xda>
	}
	else {  // if channel_index % 4 == 3  // 3, 7, 11
		V0 = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73bb      	strb	r3, [r7, #14]
		V1 = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	737b      	strb	r3, [r7, #13]
	}

	// The other switches' V0/V1 are don't care, but set them to 0 anyways
	switch(switch_refdes) {
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d04c      	beq.n	800345e <select_rfid_channel+0x17a>
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	dc6d      	bgt.n	80034a4 <select_rfid_channel+0x1c0>
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d002      	beq.n	80033d2 <select_rfid_channel+0xee>
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d023      	beq.n	8003418 <select_rfid_channel+0x134>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
		break;
	default:
		break;
 80033d0:	e068      	b.n	80034a4 <select_rfid_channel+0x1c0>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, V0);
 80033d2:	7bbb      	ldrb	r3, [r7, #14]
 80033d4:	461a      	mov	r2, r3
 80033d6:	2104      	movs	r1, #4
 80033d8:	4836      	ldr	r0, [pc, #216]	; (80034b4 <select_rfid_channel+0x1d0>)
 80033da:	f003 f9eb 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, V1);
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	461a      	mov	r2, r3
 80033e2:	2102      	movs	r1, #2
 80033e4:	4833      	ldr	r0, [pc, #204]	; (80034b4 <select_rfid_channel+0x1d0>)
 80033e6:	f003 f9e5 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f0:	482f      	ldr	r0, [pc, #188]	; (80034b0 <select_rfid_channel+0x1cc>)
 80033f2:	f003 f9df 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fc:	482c      	ldr	r0, [pc, #176]	; (80034b0 <select_rfid_channel+0x1cc>)
 80033fe:	f003 f9d9 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	482b      	ldr	r0, [pc, #172]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003408:	f003 f9d4 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	4828      	ldr	r0, [pc, #160]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003412:	f003 f9cf 	bl	80067b4 <HAL_GPIO_WritePin>
		break;
 8003416:	e046      	b.n	80034a6 <select_rfid_channel+0x1c2>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2104      	movs	r1, #4
 800341c:	4825      	ldr	r0, [pc, #148]	; (80034b4 <select_rfid_channel+0x1d0>)
 800341e:	f003 f9c9 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2102      	movs	r1, #2
 8003426:	4823      	ldr	r0, [pc, #140]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003428:	f003 f9c4 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, V0);
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	461a      	mov	r2, r3
 8003430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003434:	481e      	ldr	r0, [pc, #120]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003436:	f003 f9bd 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, V1);
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003442:	481b      	ldr	r0, [pc, #108]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003444:	f003 f9b6 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	4819      	ldr	r0, [pc, #100]	; (80034b4 <select_rfid_channel+0x1d0>)
 800344e:	f003 f9b1 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4817      	ldr	r0, [pc, #92]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003458:	f003 f9ac 	bl	80067b4 <HAL_GPIO_WritePin>
		break;
 800345c:	e023      	b.n	80034a6 <select_rfid_channel+0x1c2>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2104      	movs	r1, #4
 8003462:	4814      	ldr	r0, [pc, #80]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003464:	f003 f9a6 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	2102      	movs	r1, #2
 800346c:	4811      	ldr	r0, [pc, #68]	; (80034b4 <select_rfid_channel+0x1d0>)
 800346e:	f003 f9a1 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <select_rfid_channel+0x1cc>)
 800347a:	f003 f99b 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL3_GPIO_Port, SEL3_Pin, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003484:	480a      	ldr	r0, [pc, #40]	; (80034b0 <select_rfid_channel+0x1cc>)
 8003486:	f003 f995 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL4_GPIO_Port, SEL4_Pin, V0);
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	461a      	mov	r2, r3
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <select_rfid_channel+0x1d0>)
 8003492:	f003 f98f 	bl	80067b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL5_GPIO_Port, SEL5_Pin, V1);
 8003496:	7b7b      	ldrb	r3, [r7, #13]
 8003498:	461a      	mov	r2, r3
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <select_rfid_channel+0x1d0>)
 800349e:	f003 f989 	bl	80067b4 <HAL_GPIO_WritePin>
		break;
 80034a2:	e000      	b.n	80034a6 <select_rfid_channel+0x1c2>
		break;
 80034a4:	bf00      	nop
	}

	return 0;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	48000400 	.word	0x48000400
 80034b4:	48000800 	.word	0x48000800

080034b8 <reader_irq_pulse>:


// UPDATE ALL THESE TO INCLUDE DELAYUNTIL or OSDELAY
volatile st25r95_handle reader_handler;

void reader_irq_pulse() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_RESET);
 80034bc:	2200      	movs	r2, #0
 80034be:	2110      	movs	r1, #16
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <reader_irq_pulse+0x38>)
 80034c2:	f003 f977 	bl	80067b4 <HAL_GPIO_WritePin>
  // HAL_delay(1);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(1)); // delay 1 ms
 80034c6:	f008 fa05 	bl	800b8d4 <xTaskGetTickCount>
 80034ca:	4603      	mov	r3, r0
 80034cc:	3301      	adds	r3, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f008 f920 	bl	800b714 <vTaskDelay>
  HAL_GPIO_WritePin(RFID_NIRQ_IN_PORT, RFID_NIRQ_IN_PIN, GPIO_PIN_SET);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2110      	movs	r1, #16
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <reader_irq_pulse+0x38>)
 80034da:	f003 f96b 	bl	80067b4 <HAL_GPIO_WritePin>
  // HAL_delay(8);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(8)); // delay 8 ms
 80034de:	f008 f9f9 	bl	800b8d4 <xTaskGetTickCount>
 80034e2:	4603      	mov	r3, r0
 80034e4:	3308      	adds	r3, #8
 80034e6:	4618      	mov	r0, r3
 80034e8:	f008 f914 	bl	800b714 <vTaskDelay>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	48000800 	.word	0x48000800

080034f4 <reader_nss>:

void reader_nss(uint8_t enable)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	2110      	movs	r1, #16
 800350e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003512:	f003 f94f 	bl	80067b4 <HAL_GPIO_WritePin>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <reader_tx>:

int reader_tx(uint8_t *data, size_t len)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b29a      	uxth	r2, r3
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <reader_tx+0x28>)
 8003536:	f004 fbf2 	bl	8007d1e <HAL_SPI_Transmit>
 800353a:	4603      	mov	r3, r0
 800353c:	60fb      	str	r3, [r7, #12]
  return ret;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200002dc 	.word	0x200002dc

0800354c <reader_rx>:

int reader_rx(uint8_t *data, size_t len)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  int ret = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b29a      	uxth	r2, r3
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <reader_rx+0x28>)
 8003562:	f004 fd4a 	bl	8007ffa <HAL_SPI_Receive>
 8003566:	4603      	mov	r3, r0
 8003568:	60fb      	str	r3, [r7, #12]
  return ret;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200002dc 	.word	0x200002dc

08003578 <st25_card_callback>:
    reader_handler.irq_flag = 1;
  }
}

void st25_card_callback(uint8_t *uid)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  //HAL_Delay(uid[0]);
  vTaskDelay(xTaskGetTickCount() + pdMS_TO_TICKS(uid[0])); // delay uid[0]
 8003580:	f008 f9a8 	bl	800b8d4 <xTaskGetTickCount>
 8003584:	4602      	mov	r2, r0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4905      	ldr	r1, [pc, #20]	; (80035ac <st25_card_callback+0x34>)
 8003596:	fba1 1303 	umull	r1, r3, r1, r3
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	4413      	add	r3, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f008 f8b8 	bl	800b714 <vTaskDelay>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b6:	f001 f977 	bl	80048a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035ba:	f000 f8c5 	bl	8003748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035be:	f000 fa39 	bl	8003a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80035c2:	f000 fa19 	bl	80039f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035c6:	f000 f9e7 	bl	8003998 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80035ca:	f000 f9b5 	bl	8003938 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80035ce:	f000 f90d 	bl	80037ec <MX_ADC1_Init>
  MX_SPI1_Init();
 80035d2:	f000 f973 	bl	80038bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // RFID INITIALIZATION
  reader_handler.protocol = ST25_PROTOCOL_14443A;
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <main+0x138>)
 80035d8:	2202      	movs	r2, #2
 80035da:	705a      	strb	r2, [r3, #1]
  reader_handler.tx_speed = ST25_26K_106K; // datarate used by 14443A
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <main+0x138>)
 80035de:	2200      	movs	r2, #0
 80035e0:	70da      	strb	r2, [r3, #3]
  reader_handler.rx_speed = ST25_26K_106K; // same for up and downlinks
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <main+0x138>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	711a      	strb	r2, [r3, #4]
  reader_handler.timerw = 0x58;
 80035e8:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <main+0x138>)
 80035ea:	2258      	movs	r2, #88	; 0x58
 80035ec:	715a      	strb	r2, [r3, #5]
  reader_handler.ARC = 0xD1;
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <main+0x138>)
 80035f0:	22d1      	movs	r2, #209	; 0xd1
 80035f2:	719a      	strb	r2, [r3, #6]
  reader_handler.irq_flag = 0;
 80035f4:	4b3c      	ldr	r3, [pc, #240]	; (80036e8 <main+0x138>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	745a      	strb	r2, [r3, #17]

  /* Bind BSP Functions */
  reader_handler.nss = reader_nss;
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <main+0x138>)
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <main+0x13c>)
 80035fe:	619a      	str	r2, [r3, #24]
  reader_handler.tx = reader_tx;
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <main+0x138>)
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <main+0x140>)
 8003604:	61da      	str	r2, [r3, #28]
  reader_handler.rx = reader_rx;
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <main+0x138>)
 8003608:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <main+0x144>)
 800360a:	621a      	str	r2, [r3, #32]
  reader_handler.irq_pulse = reader_irq_pulse;
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <main+0x138>)
 800360e:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <main+0x148>)
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
  reader_handler.callback = st25_card_callback;
 8003612:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <main+0x138>)
 8003614:	4a39      	ldr	r2, [pc, #228]	; (80036fc <main+0x14c>)
 8003616:	615a      	str	r2, [r3, #20]

  st25r95_init(&reader_handler);
 8003618:	4833      	ldr	r0, [pc, #204]	; (80036e8 <main+0x138>)
 800361a:	f000 fc75 	bl	8003f08 <st25r95_init>
  st25r95_calibrate(&reader_handler);
 800361e:	4832      	ldr	r0, [pc, #200]	; (80036e8 <main+0x138>)
 8003620:	f000 fd8e 	bl	8004140 <st25r95_calibrate>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003624:	f006 fd3c 	bl	800a0a0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BluetoothRX */
  BluetoothRXHandle = osSemaphoreNew(1, 1, &BluetoothRX_attributes);
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <main+0x150>)
 800362a:	2101      	movs	r1, #1
 800362c:	2001      	movs	r0, #1
 800362e:	f006 fe08 	bl	800a242 <osSemaphoreNew>
 8003632:	4603      	mov	r3, r0
 8003634:	4a33      	ldr	r2, [pc, #204]	; (8003704 <main+0x154>)
 8003636:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003638:	4a33      	ldr	r2, [pc, #204]	; (8003708 <main+0x158>)
 800363a:	2100      	movs	r1, #0
 800363c:	4833      	ldr	r0, [pc, #204]	; (800370c <main+0x15c>)
 800363e:	f006 fd53 	bl	800a0e8 <osThreadNew>
 8003642:	4603      	mov	r3, r0
 8003644:	4a32      	ldr	r2, [pc, #200]	; (8003710 <main+0x160>)
 8003646:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <main+0x164>)
 800364a:	2100      	movs	r1, #0
 800364c:	4832      	ldr	r0, [pc, #200]	; (8003718 <main+0x168>)
 800364e:	f006 fd4b 	bl	800a0e8 <osThreadNew>
 8003652:	4603      	mov	r3, r0
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <main+0x16c>)
 8003656:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothRXTask */
  BluetoothRXTaskHandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothRXTask_attributes);
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <main+0x170>)
 800365a:	2100      	movs	r1, #0
 800365c:	4831      	ldr	r0, [pc, #196]	; (8003724 <main+0x174>)
 800365e:	f006 fd43 	bl	800a0e8 <osThreadNew>
 8003662:	4603      	mov	r3, r0
 8003664:	4a30      	ldr	r2, [pc, #192]	; (8003728 <main+0x178>)
 8003666:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 8003668:	4a30      	ldr	r2, [pc, #192]	; (800372c <main+0x17c>)
 800366a:	2100      	movs	r1, #0
 800366c:	4830      	ldr	r0, [pc, #192]	; (8003730 <main+0x180>)
 800366e:	f006 fd3b 	bl	800a0e8 <osThreadNew>
 8003672:	4603      	mov	r3, r0
 8003674:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <main+0x184>)
 8003676:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  	  if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 8003678:	2102      	movs	r1, #2
 800367a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800367e:	f003 f881 	bl	8006784 <HAL_GPIO_ReadPin>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d103      	bne.n	8003690 <main+0xe0>
  		  CBU_ID[3] = '1';
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <main+0x188>)
 800368a:	2231      	movs	r2, #49	; 0x31
 800368c:	70da      	strb	r2, [r3, #3]
 800368e:	e002      	b.n	8003696 <main+0xe6>
  	  } else {
  		  CBU_ID[3] = '0';
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <main+0x188>)
 8003692:	2230      	movs	r2, #48	; 0x30
 8003694:	70da      	strb	r2, [r3, #3]
  	  }

  	  ble.huart = &huart1;
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <main+0x18c>)
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <main+0x190>)
 800369a:	601a      	str	r2, [r3, #0]
  	  ble.cs_base = BLE_CS_PORT;
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <main+0x18c>)
 800369e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80036a2:	605a      	str	r2, [r3, #4]
  	  ble.cs_pin = BLE_CS_PIN;
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <main+0x18c>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	811a      	strh	r2, [r3, #8]
  	  ble.name = CBU_ID;
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <main+0x18c>)
 80036ac:	4a22      	ldr	r2, [pc, #136]	; (8003738 <main+0x188>)
 80036ae:	60da      	str	r2, [r3, #12]
  	  ble.mutex = &BluetoothRXHandle;
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <main+0x18c>)
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <main+0x154>)
 80036b4:	611a      	str	r2, [r3, #16]
//	  for(volatile int i = 0; i  <40000; i++)
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
//  }
  	  for(;;){
	   for(uint8_t i = 0; i < 12;  i++){
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]
 80036ba:	e010      	b.n	80036de <main+0x12e>
			  select_rfid_channel(i);
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe10 	bl	80032e4 <select_rfid_channel>
			  for(volatile int x = 0; x  <1000000; x++);
 80036c4:	2300      	movs	r3, #0
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	e002      	b.n	80036d0 <main+0x120>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <main+0x194>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	ddf8      	ble.n	80036ca <main+0x11a>
	   for(uint8_t i = 0; i < 12;  i++){
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	3301      	adds	r3, #1
 80036dc:	71fb      	strb	r3, [r7, #7]
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2b0b      	cmp	r3, #11
 80036e2:	d9eb      	bls.n	80036bc <main+0x10c>
 80036e4:	e7e7      	b.n	80036b6 <main+0x106>
 80036e6:	bf00      	nop
 80036e8:	200006f8 	.word	0x200006f8
 80036ec:	080034f5 	.word	0x080034f5
 80036f0:	08003521 	.word	0x08003521
 80036f4:	0800354d 	.word	0x0800354d
 80036f8:	080034b9 	.word	0x080034b9
 80036fc:	08003579 	.word	0x08003579
 8003700:	08010514 	.word	0x08010514
 8003704:	200004b8 	.word	0x200004b8
 8003708:	08010484 	.word	0x08010484
 800370c:	08003b85 	.word	0x08003b85
 8003710:	200004a8 	.word	0x200004a8
 8003714:	080104a8 	.word	0x080104a8
 8003718:	08003b95 	.word	0x08003b95
 800371c:	200004ac 	.word	0x200004ac
 8003720:	080104cc 	.word	0x080104cc
 8003724:	08003bf1 	.word	0x08003bf1
 8003728:	200004b0 	.word	0x200004b0
 800372c:	080104f0 	.word	0x080104f0
 8003730:	08003c61 	.word	0x08003c61
 8003734:	200004b4 	.word	0x200004b4
 8003738:	2000000c 	.word	0x2000000c
 800373c:	200004c8 	.word	0x200004c8
 8003740:	20000340 	.word	0x20000340
 8003744:	000f423f 	.word	0x000f423f

08003748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b096      	sub	sp, #88	; 0x58
 800374c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	2244      	movs	r2, #68	; 0x44
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f009 f9cc 	bl	800caf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800375c:	463b      	mov	r3, r7
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800376a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800376e:	f003 f847 	bl	8006800 <HAL_PWREx_ControlVoltageScaling>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003778:	f000 fad4 	bl	8003d24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800377c:	2302      	movs	r3, #2
 800377e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003784:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003786:	2340      	movs	r3, #64	; 0x40
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800378a:	2302      	movs	r3, #2
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800378e:	2302      	movs	r3, #2
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003796:	230a      	movs	r3, #10
 8003798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800379a:	2307      	movs	r3, #7
 800379c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800379e:	2302      	movs	r3, #2
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037a2:	2302      	movs	r3, #2
 80037a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 f87e 	bl	80068ac <HAL_RCC_OscConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80037b6:	f000 fab5 	bl	8003d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ba:	230f      	movs	r3, #15
 80037bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037be:	2303      	movs	r3, #3
 80037c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037ce:	463b      	mov	r3, r7
 80037d0:	2104      	movs	r1, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fc7e 	bl	80070d4 <HAL_RCC_ClockConfig>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037de:	f000 faa1 	bl	8003d24 <Error_Handler>
  }
}
 80037e2:	bf00      	nop
 80037e4:	3758      	adds	r7, #88	; 0x58
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037f2:	463b      	mov	r3, r7
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
 8003800:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003802:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <MX_ADC1_Init+0xc8>)
 8003806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8003808:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800380a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800380e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003824:	2204      	movs	r2, #4
 8003826:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800382a:	2200      	movs	r2, #0
 800382c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003830:	2201      	movs	r2, #1
 8003832:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003836:	2201      	movs	r2, #1
 8003838:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003844:	2200      	movs	r2, #0
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800384a:	2200      	movs	r2, #0
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003866:	2204      	movs	r2, #4
 8003868:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800386a:	4811      	ldr	r0, [pc, #68]	; (80038b0 <MX_ADC1_Init+0xc4>)
 800386c:	f001 fa98 	bl	8004da0 <HAL_ADC_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003876:	f000 fa55 	bl	8003d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <MX_ADC1_Init+0xcc>)
 800387c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800387e:	2306      	movs	r3, #6
 8003880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003886:	237f      	movs	r3, #127	; 0x7f
 8003888:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800388a:	2304      	movs	r3, #4
 800388c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <MX_ADC1_Init+0xc4>)
 8003898:	f001 fc70 	bl	800517c <HAL_ADC_ConfigChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80038a2:	f000 fa3f 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000022c 	.word	0x2000022c
 80038b4:	50040000 	.word	0x50040000
 80038b8:	cb840000 	.word	0xcb840000

080038bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <MX_SPI1_Init+0x74>)
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <MX_SPI1_Init+0x78>)
 80038c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <MX_SPI1_Init+0x74>)
 80038c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <MX_SPI1_Init+0x74>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <MX_SPI1_Init+0x74>)
 80038d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80038da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <MX_SPI1_Init+0x74>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <MX_SPI1_Init+0x74>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <MX_SPI1_Init+0x74>)
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <MX_SPI1_Init+0x74>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <MX_SPI1_Init+0x74>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <MX_SPI1_Init+0x74>)
 80038fe:	2200      	movs	r2, #0
 8003900:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <MX_SPI1_Init+0x74>)
 8003904:	2200      	movs	r2, #0
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <MX_SPI1_Init+0x74>)
 800390a:	2207      	movs	r2, #7
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <MX_SPI1_Init+0x74>)
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MX_SPI1_Init+0x74>)
 8003916:	2208      	movs	r2, #8
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <MX_SPI1_Init+0x74>)
 800391c:	f004 f95c 	bl	8007bd8 <HAL_SPI_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003926:	f000 f9fd 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200002dc 	.word	0x200002dc
 8003934:	40013000 	.word	0x40013000

08003938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <MX_USART1_UART_Init+0x58>)
 800393e:	4a15      	ldr	r2, [pc, #84]	; (8003994 <MX_USART1_UART_Init+0x5c>)
 8003940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003944:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <MX_USART1_UART_Init+0x58>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_USART1_UART_Init+0x58>)
 800395e:	220c      	movs	r2, #12
 8003960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_USART1_UART_Init+0x58>)
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_USART1_UART_Init+0x58>)
 8003976:	2200      	movs	r2, #0
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_USART1_UART_Init+0x58>)
 800397c:	f005 f83c 	bl	80089f8 <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003986:	f000 f9cd 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000340 	.word	0x20000340
 8003994:	40013800 	.word	0x40013800

08003998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <MX_USART2_UART_Init+0x5c>)
 80039a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80039a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039be:	220c      	movs	r2, #12
 80039c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <MX_USART2_UART_Init+0x58>)
 80039dc:	f005 f80c 	bl	80089f8 <HAL_UART_Init>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039e6:	f000 f99d 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200003f4 	.word	0x200003f4
 80039f4:	40004400 	.word	0x40004400

080039f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <MX_DMA_Init+0x38>)
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <MX_DMA_Init+0x38>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6493      	str	r3, [r2, #72]	; 0x48
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <MX_DMA_Init+0x38>)
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2105      	movs	r1, #5
 8003a1a:	200b      	movs	r0, #11
 8003a1c:	f002 fa8b 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a20:	200b      	movs	r0, #11
 8003a22:	f002 faa4 	bl	8005f6e <HAL_NVIC_EnableIRQ>

}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <MX_GPIO_Init+0x114>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	21c6      	movs	r1, #198	; 0xc6
 8003aae:	4827      	ldr	r0, [pc, #156]	; (8003b4c <MX_GPIO_Init+0x118>)
 8003ab0:	f002 fe80 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abc:	f002 fe7a 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8003ac6:	4822      	ldr	r0, [pc, #136]	; (8003b50 <MX_GPIO_Init+0x11c>)
 8003ac8:	f002 fe74 	bl	80067b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ad2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481a      	ldr	r0, [pc, #104]	; (8003b4c <MX_GPIO_Init+0x118>)
 8003ae4:	f002 fcd4 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8003ae8:	23c6      	movs	r3, #198	; 0xc6
 8003aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4619      	mov	r1, r3
 8003afe:	4813      	ldr	r0, [pc, #76]	; (8003b4c <MX_GPIO_Init+0x118>)
 8003b00:	f002 fcc6 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b04:	2310      	movs	r3, #16
 8003b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1e:	f002 fcb7 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8003b22:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003b26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b30:	2300      	movs	r3, #0
 8003b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4805      	ldr	r0, [pc, #20]	; (8003b50 <MX_GPIO_Init+0x11c>)
 8003b3c:	f002 fca8 	bl	8006490 <HAL_GPIO_Init>

}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	48000800 	.word	0x48000800
 8003b50:	48000400 	.word	0x48000400

08003b54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	readyToRead(&ble, rx_buffer);
 8003b5c:	4906      	ldr	r1, [pc, #24]	; (8003b78 <HAL_UART_RxCpltCallback+0x24>)
 8003b5e:	4807      	ldr	r0, [pc, #28]	; (8003b7c <HAL_UART_RxCpltCallback+0x28>)
 8003b60:	f7fd fa62 	bl	8001028 <readyToRead>
	osSemaphoreRelease(BluetoothRXHandle);
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_UART_RxCpltCallback+0x2c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f006 fc45 	bl	800a3f8 <osSemaphoreRelease>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200004e4 	.word	0x200004e4
 8003b7c:	200004c8 	.word	0x200004c8
 8003b80:	200004b8 	.word	0x200004b8

08003b84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f006 fb3d 	bl	800a20c <osDelay>
 8003b92:	e7fb      	b.n	8003b8c <StartDefaultTask+0x8>

08003b94 <StartRFIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 8003b9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003ba0:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8003ba2:	f007 fe97 	bl	800b8d4 <xTaskGetTickCount>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	613b      	str	r3, [r7, #16]

	uint8_t team0RawScore = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
	uint8_t team1RawScore = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
	for(;;)
		// osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
	{
		RFID_readArray();
 8003bb2:	f000 f8eb 	bl	8003d8c <RFID_readArray>

		calculateRawScore(&team0RawScore, false);
 8003bb6:	f107 030f 	add.w	r3, r7, #15
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f8b7 	bl	8003d30 <calculateRawScore>
		calculateRawScore(&team1RawScore, true); // true to move BagStatus pointer to the Team 1 section
 8003bc2:	f107 030e 	add.w	r3, r7, #14
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f8b1 	bl	8003d30 <calculateRawScore>

		broadcastPacket.team0DeltaScore = team0RawScore;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <StartRFIDTask+0x58>)
 8003bd4:	605a      	str	r2, [r3, #4]
		broadcastPacket.team1DeltaScore = team1RawScore;
 8003bd6:	7bbb      	ldrb	r3, [r7, #14]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <StartRFIDTask+0x58>)
 8003bdc:	609a      	str	r2, [r3, #8]


//		broadcast(tx_buf, (uint32_t) 2, &ble);

		vTaskDelayUntil( &xLastWakeTime, period );
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f007 fd17 	bl	800b618 <vTaskDelayUntil>
		RFID_readArray();
 8003bea:	e7e2      	b.n	8003bb2 <StartRFIDTask+0x1e>
 8003bec:	200004bc 	.word	0x200004bc

08003bf0 <StartBluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0c4      	sub	sp, #272	; 0x110
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bfe:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartBluetoothTask */

	uint8_t rx_buff[RX_BUFF_SIZE];
	uint32_t size = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

 /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <StartBluetoothTask+0x60>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f006 fba0 	bl	800a354 <osSemaphoreAcquire>
	  deserializeJSON((char*)rx_buff, &gameInfo);
 8003c14:	f107 0308 	add.w	r3, r7, #8
 8003c18:	490e      	ldr	r1, [pc, #56]	; (8003c54 <StartBluetoothTask+0x64>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fa8a 	bl	8003134 <deserializeJSON>
	  if (gameInfo.end_of_round){ //TODO: verify we only want to send at end of round
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <StartBluetoothTask+0x64>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <StartBluetoothTask+0x16>
		  // Alternatively, we could have an extra element in the JSON like a boolean so whenever it isnt set, we know only to care about the battery voltage
		  for(uint32_t i = 0; i < 300; i++){
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c2e:	e008      	b.n	8003c42 <StartBluetoothTask+0x52>
			  serializeJSON(&broadcastPacket,tx_buffer);
 8003c30:	4909      	ldr	r1, [pc, #36]	; (8003c58 <StartBluetoothTask+0x68>)
 8003c32:	480a      	ldr	r0, [pc, #40]	; (8003c5c <StartBluetoothTask+0x6c>)
 8003c34:	f7ff fb12 	bl	800325c <serializeJSON>
		  for(uint32_t i = 0; i < 300; i++){
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003c4a:	d3f1      	bcc.n	8003c30 <StartBluetoothTask+0x40>
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8003c4c:	e7db      	b.n	8003c06 <StartBluetoothTask+0x16>
 8003c4e:	bf00      	nop
 8003c50:	200004b8 	.word	0x200004b8
 8003c54:	200006e4 	.word	0x200006e4
 8003c58:	200005e4 	.word	0x200005e4
 8003c5c:	200004bc 	.word	0x200004bc

08003c60 <StartBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8003c68:	f247 5330 	movw	r3, #30000	; 0x7530
 8003c6c:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 8003c6e:	f007 fe31 	bl	800b8d4 <xTaskGetTickCount>
 8003c72:	4603      	mov	r3, r0
 8003c74:	617b      	str	r3, [r7, #20]

	uint32_t rawVBat = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
	float VBat = 0.0;
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
	uint32_t VBat_conv = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003c84:	217f      	movs	r1, #127	; 0x7f
 8003c86:	4824      	ldr	r0, [pc, #144]	; (8003d18 <StartBatteryTask+0xb8>)
 8003c88:	f002 f81a 	bl	8005cc0 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawVBat, 1);
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	2201      	movs	r2, #1
 8003c92:	4619      	mov	r1, r3
 8003c94:	4820      	ldr	r0, [pc, #128]	; (8003d18 <StartBatteryTask+0xb8>)
 8003c96:	f001 f9cf 	bl	8005038 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {

	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cac:	ee17 0a90 	vmov	r0, s15
 8003cb0:	f7fc fc62 	bl	8000578 <__aeabi_f2d>
 8003cb4:	a316      	add	r3, pc, #88	; (adr r3, 8003d10 <StartBatteryTask+0xb0>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f7fc fcb5 	bl	8000628 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <StartBatteryTask+0xbc>)
 8003ccc:	f7fc fdd6 	bl	800087c <__aeabi_ddiv>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f7fc ff9e 	bl	8000c18 <__aeabi_d2f>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60fb      	str	r3, [r7, #12]
	  VBat_conv = *((uint32_t*)&VBat);
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
	  tx_buf[0] = VBat_conv & 0xFF000000;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	723b      	strb	r3, [r7, #8]
	  tx_buf[1] = VBat_conv & 0x00FF0000;
 8003cec:	2300      	movs	r3, #0
 8003cee:	727b      	strb	r3, [r7, #9]
	  tx_buf[2] = VBat_conv & 0x0000FF00;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	72bb      	strb	r3, [r7, #10]
	  tx_buf[3] = VBat_conv & 0x000000FF;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	72fb      	strb	r3, [r7, #11]

	  broadcastPacket.batteryVoltage = tx_buf;
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <StartBatteryTask+0xc0>)
 8003d00:	6013      	str	r3, [r2, #0]
//	  broadcast(tx_buf, (uint32_t) 4, &ble);

	  vTaskDelayUntil( &xLastWakeTime, period );
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	69f9      	ldr	r1, [r7, #28]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f007 fc85 	bl	800b618 <vTaskDelayUntil>
	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8003d0e:	e7c4      	b.n	8003c9a <StartBatteryTask+0x3a>
 8003d10:	66666666 	.word	0x66666666
 8003d14:	400a6666 	.word	0x400a6666
 8003d18:	2000022c 	.word	0x2000022c
 8003d1c:	40b00000 	.word	0x40b00000
 8003d20:	200004bc 	.word	0x200004bc

08003d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d28:	b672      	cpsid	i
}
 8003d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <Error_Handler+0x8>
	...

08003d30 <calculateRawScore>:
BeanBag_interface BagInfo[8];

// global variable for tracking the status of each bag
uint8_t BagStatus[8] = {0,0,0,0,0,0,0,0};

void calculateRawScore(uint8_t* teamRawScore, bool isTeam1) {
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <calculateRawScore+0x58>)
 8003d3e:	60fb      	str	r3, [r7, #12]

	if (isTeam1) bag_p +=4;
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <calculateRawScore+0x1c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]

	// Team 0 routine
	for (int i = 0; i < 4; ++i) {
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	e00c      	b.n	8003d72 <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	440b      	add	r3, r1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	ddef      	ble.n	8003d58 <calculateRawScore+0x28>
	}

}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000720 	.word	0x20000720

08003d8c <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(void) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0

	for(uint8_t row = 0; row < 3; row++){
 8003d92:	2300      	movs	r3, #0
 8003d94:	71fb      	strb	r3, [r7, #7]
 8003d96:	e03c      	b.n	8003e12 <RFID_readArray+0x86>
		// iterate through sel6 and sel7
	    HAL_GPIO_WritePin(SEL_PORT, sel[6], (row >> 1) & 0b01);
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	481e      	ldr	r0, [pc, #120]	; (8003e24 <RFID_readArray+0x98>)
 8003daa:	f002 fd03 	bl	80067b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEL_PORT, sel[7], (row & 0b01) );
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	481a      	ldr	r0, [pc, #104]	; (8003e24 <RFID_readArray+0x98>)
 8003dbc:	f002 fcfa 	bl	80067b4 <HAL_GPIO_WritePin>

		for(uint8_t column = 0; column < 4; column++){
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	71bb      	strb	r3, [r7, #6]
 8003dc4:	e01f      	b.n	8003e06 <RFID_readArray+0x7a>
			// iterate through each element in the row
			HAL_GPIO_WritePin(SEL_PORT, sel[row*2], (column >> 1) & 0b01);
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <RFID_readArray+0x9c>)
 8003dcc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003dd0:	79bb      	ldrb	r3, [r7, #6]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4811      	ldr	r0, [pc, #68]	; (8003e24 <RFID_readArray+0x98>)
 8003de0:	f002 fce8 	bl	80067b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEL_PORT, sel[row*2 + 1], (column & 0b01) );
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <RFID_readArray+0x9c>)
 8003dec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003df0:	79bb      	ldrb	r3, [r7, #6]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	480a      	ldr	r0, [pc, #40]	; (8003e24 <RFID_readArray+0x98>)
 8003dfc:	f002 fcda 	bl	80067b4 <HAL_GPIO_WritePin>
		for(uint8_t column = 0; column < 4; column++){
 8003e00:	79bb      	ldrb	r3, [r7, #6]
 8003e02:	3301      	adds	r3, #1
 8003e04:	71bb      	strb	r3, [r7, #6]
 8003e06:	79bb      	ldrb	r3, [r7, #6]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d9dc      	bls.n	8003dc6 <RFID_readArray+0x3a>
	for(uint8_t row = 0; row < 3; row++){
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d9bf      	bls.n	8003d98 <RFID_readArray+0xc>

			// Now read from selected antenna

		}
	}
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	48000400 	.word	0x48000400
 8003e28:	08010524 	.word	0x08010524

08003e2c <st25r95_spi_tx>:
#include "st25r95.h"

volatile static uint8_t tx_buffer[256];
volatile static size_t tx_len;

void st25r95_spi_tx(st25r95_handle *handler) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  handler->tx(tx_buffer, tx_len);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <st25r95_spi_tx+0x24>)
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <st25r95_spi_tx+0x28>)
 8003e40:	4798      	blx	r3
  tx_len = 0;
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <st25r95_spi_tx+0x24>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000828 	.word	0x20000828
 8003e54:	20000728 	.word	0x20000728

08003e58 <st25r95_spi_byte>:

void st25r95_spi_byte(st25r95_handle *handler, uint8_t data) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
  tx_len = 1;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <st25r95_spi_byte+0x28>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 8003e6a:	4a06      	ldr	r2, [pc, #24]	; (8003e84 <st25r95_spi_byte+0x2c>)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	7013      	strb	r3, [r2, #0]
  st25r95_spi_tx(handler);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffdb 	bl	8003e2c <st25r95_spi_tx>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000828 	.word	0x20000828
 8003e84:	20000728 	.word	0x20000728

08003e88 <st25r95_response>:
      st25r95_idle(handler);
    }
  }
}

uint8_t *st25r95_response(st25r95_handle *handler) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  while (handler->irq_flag == 0);
 8003e90:	bf00      	nop
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7c5b      	ldrb	r3, [r3, #17]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0fa      	beq.n	8003e92 <st25r95_response+0xa>
  handler->irq_flag = 0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	745a      	strb	r2, [r3, #17]
  static uint8_t rx_data[256];
  handler->nss(1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ffd3 	bl	8003e58 <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4810      	ldr	r0, [pc, #64]	; (8003efc <st25r95_response+0x74>)
 8003eba:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <st25r95_response+0x74>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b55      	cmp	r3, #85	; 0x55
 8003ec2:	d105      	bne.n	8003ed0 <st25r95_response+0x48>
    handler->nss(0);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2000      	movs	r0, #0
 8003eca:	4798      	blx	r3
    return rx_data;
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <st25r95_response+0x74>)
 8003ece:	e011      	b.n	8003ef4 <st25r95_response+0x6c>
  }
  handler->rx(rx_data + 1, 1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <st25r95_response+0x78>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4808      	ldr	r0, [pc, #32]	; (8003f04 <st25r95_response+0x7c>)
 8003ee2:	4a06      	ldr	r2, [pc, #24]	; (8003efc <st25r95_response+0x74>)
 8003ee4:	7852      	ldrb	r2, [r2, #1]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4798      	blx	r3
  handler->nss(0);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	4798      	blx	r3
  return rx_data;
 8003ef2:	4b02      	ldr	r3, [pc, #8]	; (8003efc <st25r95_response+0x74>)
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2000082c 	.word	0x2000082c
 8003f00:	2000082d 	.word	0x2000082d
 8003f04:	2000082e 	.word	0x2000082e

08003f08 <st25r95_init>:

void st25r95_init(st25r95_handle *handler) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  st25r95_reset(handler);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f823 	bl	8003f5c <st25r95_reset>
  handler->irq_pulse();
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
  switch (handler->protocol) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d110      	bne.n	8003f4c <st25r95_init+0x44>
    case ST25_PROTOCOL_14443A:
      st25r95_14443A(handler);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f85a 	bl	8003fe4 <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	795b      	ldrb	r3, [r3, #5]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f890 	bl	800405c <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	799b      	ldrb	r3, [r3, #6]
 8003f40:	461a      	mov	r2, r3
 8003f42:	2101      	movs	r1, #1
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8c1 	bl	80040cc <st25r95_write_ARC>
      break;
 8003f4a:	e003      	b.n	8003f54 <st25r95_init+0x4c>
    default:
      st25r95_off(handler);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f819 	bl	8003f84 <st25r95_off>
      break;
 8003f52:	bf00      	nop
  }
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <st25r95_reset>:

void st25r95_reset(st25r95_handle *handler) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  handler->nss(1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2001      	movs	r0, #1
 8003f6a:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff72 	bl	8003e58 <st25r95_spi_byte>
  handler->nss(0);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	4798      	blx	r3
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <st25r95_off>:
  if (res[0] != 0) return ST25_INVALID_DEVICE;
  if (!(res[2] == 'N' && res[3] == 'F' && res[4] == 'C')) return ST25_INVALID_DEVICE;
  return ST25_OK;
}

st25r95_status_t st25r95_off(st25r95_handle *handler) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <st25r95_off+0x58>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <st25r95_off+0x58>)
 8003f94:	2202      	movs	r2, #2
 8003f96:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <st25r95_off+0x58>)
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <st25r95_off+0x58>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0;
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <st25r95_off+0x58>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <st25r95_off+0x5c>)
 8003fac:	2205      	movs	r2, #5
 8003fae:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff37 	bl	8003e2c <st25r95_spi_tx>
  handler->nss(0);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ff5e 	bl	8003e88 <st25r95_response>
 8003fcc:	60f8      	str	r0, [r7, #12]
  return res[0];
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000728 	.word	0x20000728
 8003fe0:	20000828 	.word	0x20000828

08003fe4 <st25r95_14443A>:

st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  tx_buffer[0] = ST25_SEND;
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <st25r95_14443A+0x70>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_PS;
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <st25r95_14443A+0x70>)
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <st25r95_14443A+0x70>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <st25r95_14443A+0x70>)
 8004000:	2202      	movs	r2, #2
 8004002:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	78db      	ldrb	r3, [r3, #3]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	b25a      	sxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	791b      	ldrb	r3, [r3, #4]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	b25b      	sxtb	r3, r3
 8004014:	4313      	orrs	r3, r2
 8004016:	b25b      	sxtb	r3, r3
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <st25r95_14443A+0x70>)
 800401c:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <st25r95_14443A+0x74>)
 8004020:	2205      	movs	r2, #5
 8004022:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2001      	movs	r0, #1
 800402a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fefd 	bl	8003e2c <st25r95_spi_tx>
  handler->nss(0);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2000      	movs	r0, #0
 8004038:	4798      	blx	r3

  handler->protocol = ST25_PROTOCOL_14443A;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	705a      	strb	r2, [r3, #1]

  uint8_t *res = st25r95_response(handler);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff21 	bl	8003e88 <st25r95_response>
 8004046:	60f8      	str	r0, [r7, #12]
  return res[0];
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	781b      	ldrb	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000728 	.word	0x20000728
 8004058:	20000828 	.word	0x20000828

0800405c <st25r95_write_timerw>:
  uint8_t *res = st25r95_response(handler);
  if (res[0] == ST25_OK) *data = res[2];
  return res[0];
}

st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  tx_buffer[0] = ST25_SEND;
 8004068:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <st25r95_write_timerw+0x68>)
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <st25r95_write_timerw+0x68>)
 8004070:	2209      	movs	r2, #9
 8004072:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <st25r95_write_timerw+0x68>)
 8004076:	2204      	movs	r2, #4
 8004078:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <st25r95_write_timerw+0x68>)
 800407c:	223a      	movs	r2, #58	; 0x3a
 800407e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x0;
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <st25r95_write_timerw+0x68>)
 8004082:	2200      	movs	r2, #0
 8004084:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = data;
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <st25r95_write_timerw+0x68>)
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = 0x4;
 800408c:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <st25r95_write_timerw+0x68>)
 800408e:	2204      	movs	r2, #4
 8004090:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <st25r95_write_timerw+0x6c>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2001      	movs	r0, #1
 800409e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fec3 	bl	8003e2c <st25r95_spi_tx>
  handler->nss(0);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2000      	movs	r0, #0
 80040ac:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff feea 	bl	8003e88 <st25r95_response>
 80040b4:	60f8      	str	r0, [r7, #12]
  return res[0];
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	781b      	ldrb	r3, [r3, #0]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000728 	.word	0x20000728
 80040c8:	20000828 	.word	0x20000828

080040cc <st25r95_write_ARC>:

  uint8_t *res = st25r95_response(handler);
  return res[0];
}

st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
 80040d8:	4613      	mov	r3, r2
 80040da:	70bb      	strb	r3, [r7, #2]
  tx_buffer[0] = ST25_SEND;
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = ST25_WR;
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040e4:	2209      	movs	r2, #9
 80040e6:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x4;
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040ea:	2204      	movs	r2, #4
 80040ec:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x68;
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040f0:	2268      	movs	r2, #104	; 0x68
 80040f2:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x1;
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = index;
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <st25r95_write_ARC+0x6c>)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	7153      	strb	r3, [r2, #5]
  tx_buffer[6] = data;
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <st25r95_write_ARC+0x6c>)
 8004102:	78bb      	ldrb	r3, [r7, #2]
 8004104:	7193      	strb	r3, [r2, #6]
  tx_len = 7;
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <st25r95_write_ARC+0x70>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]

  handler->nss(1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2001      	movs	r0, #1
 8004112:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe89 	bl	8003e2c <st25r95_spi_tx>
  handler->nss(0);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2000      	movs	r0, #0
 8004120:	4798      	blx	r3

  uint8_t *res = st25r95_response(handler);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff feb0 	bl	8003e88 <st25r95_response>
 8004128:	60f8      	str	r0, [r7, #12]
  return res[0];
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	781b      	ldrb	r3, [r3, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000728 	.word	0x20000728
 800413c:	20000828 	.word	0x20000828

08004140 <st25r95_calibrate>:
  handler->nss(0);

  handler->state = ST25_STATE_IDLE;
}

void st25r95_calibrate(st25r95_handle *handler) {
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    0x01,
  };

  static uint8_t *res;

  for (uint8_t i = 0; i < 9; i++) {
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e0bf      	b.n	80042ce <st25r95_calibrate+0x18e>
    tx_len = 17;
 800414e:	4b66      	ldr	r3, [pc, #408]	; (80042e8 <st25r95_calibrate+0x1a8>)
 8004150:	2211      	movs	r2, #17
 8004152:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <st25r95_calibrate+0x1ac>)
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004158:	4614      	mov	r4, r2
 800415a:	461d      	mov	r5, r3
 800415c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800415e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	7023      	strb	r3, [r4, #0]
    handler->nss(1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2001      	movs	r0, #1
 800416a:	4798      	blx	r3
    st25r95_spi_tx(handler);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe5d 	bl	8003e2c <st25r95_spi_tx>
    handler->nss(0);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2000      	movs	r0, #0
 8004178:	4798      	blx	r3

    res = st25r95_response(handler);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fe84 	bl	8003e88 <st25r95_response>
 8004180:	4603      	mov	r3, r0
 8004182:	4a5c      	ldr	r2, [pc, #368]	; (80042f4 <st25r95_calibrate+0x1b4>)
 8004184:	6013      	str	r3, [r2, #0]
    if (res[0] == 0x00 && res[1] == 0x01) {
 8004186:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <st25r95_calibrate+0x1b4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 809a 	bne.w	80042c6 <st25r95_calibrate+0x186>
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <st25r95_calibrate+0x1b4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	f040 8093 	bne.w	80042c6 <st25r95_calibrate+0x186>
      if (res[2] == 0x02) {
 80041a0:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <st25r95_calibrate+0x1b4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3302      	adds	r3, #2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d13e      	bne.n	800422a <st25r95_calibrate+0xea>
        switch (i - 1) {
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	f200 8089 	bhi.w	80042c8 <st25r95_calibrate+0x188>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <st25r95_calibrate+0x7c>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041dd 	.word	0x080041dd
 80041c0:	080042c9 	.word	0x080042c9
 80041c4:	080041e5 	.word	0x080041e5
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	08004201 	.word	0x08004201
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	0800421d 	.word	0x0800421d
 80041d8:	080042c9 	.word	0x080042c9
          case 0:
            calibrate_data[14] = 0xFC;
 80041dc:	4b44      	ldr	r3, [pc, #272]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80041de:	22fc      	movs	r2, #252	; 0xfc
 80041e0:	739a      	strb	r2, [r3, #14]
            break;
 80041e2:	e071      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 1:
            break;
          case 2:
            calibrate_data[14] += 0x40;
 80041e4:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80041e6:	7b9b      	ldrb	r3, [r3, #14]
 80041e8:	3340      	adds	r3, #64	; 0x40
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80041ee:	739a      	strb	r2, [r3, #14]
            break;
 80041f0:	e06a      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] += 0x20;
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80041f4:	7b9b      	ldrb	r3, [r3, #14]
 80041f6:	3320      	adds	r3, #32
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80041fc:	739a      	strb	r2, [r3, #14]
            break;
 80041fe:	e063      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] += 0x10;
 8004200:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004202:	7b9b      	ldrb	r3, [r3, #14]
 8004204:	3310      	adds	r3, #16
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800420a:	739a      	strb	r2, [r3, #14]
            break;
 800420c:	e05c      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] += 0x08;
 800420e:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004210:	7b9b      	ldrb	r3, [r3, #14]
 8004212:	3308      	adds	r3, #8
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004218:	739a      	strb	r2, [r3, #14]
            break;
 800421a:	e055      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] += 0x04;
 800421c:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800421e:	7b9b      	ldrb	r3, [r3, #14]
 8004220:	3304      	adds	r3, #4
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004226:	739a      	strb	r2, [r3, #14]
            break;
 8004228:	e04e      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 7:
            break;
        }
      } else if (res[2] == 0x01) {
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <st25r95_calibrate+0x1b4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3302      	adds	r3, #2
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d147      	bne.n	80042c6 <st25r95_calibrate+0x186>
        switch (i - 1) {
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	3b01      	subs	r3, #1
 800423a:	2b07      	cmp	r3, #7
 800423c:	d844      	bhi.n	80042c8 <st25r95_calibrate+0x188>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <st25r95_calibrate+0x104>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	080042c9 	.word	0x080042c9
 8004248:	08004265 	.word	0x08004265
 800424c:	08004273 	.word	0x08004273
 8004250:	08004281 	.word	0x08004281
 8004254:	0800428f 	.word	0x0800428f
 8004258:	0800429d 	.word	0x0800429d
 800425c:	080042ab 	.word	0x080042ab
 8004260:	080042b9 	.word	0x080042b9
          case 0:
            break;
          case 1:
            calibrate_data[14] -= 0x80;
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004266:	7b9b      	ldrb	r3, [r3, #14]
 8004268:	3b80      	subs	r3, #128	; 0x80
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800426e:	739a      	strb	r2, [r3, #14]
            break;
 8004270:	e02a      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 2:
            calibrate_data[14] -= 0x40;
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004274:	7b9b      	ldrb	r3, [r3, #14]
 8004276:	3b40      	subs	r3, #64	; 0x40
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800427c:	739a      	strb	r2, [r3, #14]
            break;
 800427e:	e023      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 3:
            calibrate_data[14] -= 0x20;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004282:	7b9b      	ldrb	r3, [r3, #14]
 8004284:	3b20      	subs	r3, #32
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800428a:	739a      	strb	r2, [r3, #14]
            break;
 800428c:	e01c      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 4:
            calibrate_data[14] -= 0x10;
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004290:	7b9b      	ldrb	r3, [r3, #14]
 8004292:	3b10      	subs	r3, #16
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <st25r95_calibrate+0x1b0>)
 8004298:	739a      	strb	r2, [r3, #14]
            break;
 800429a:	e015      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 5:
            calibrate_data[14] -= 0x08;
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <st25r95_calibrate+0x1b0>)
 800429e:	7b9b      	ldrb	r3, [r3, #14]
 80042a0:	3b08      	subs	r3, #8
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042a6:	739a      	strb	r2, [r3, #14]
            break;
 80042a8:	e00e      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 6:
            calibrate_data[14] -= 0x04;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042ac:	7b9b      	ldrb	r3, [r3, #14]
 80042ae:	3b04      	subs	r3, #4
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042b4:	739a      	strb	r2, [r3, #14]
            break;
 80042b6:	e007      	b.n	80042c8 <st25r95_calibrate+0x188>
          case 7:
            calibrate_data[14] -= 0x04;
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042ba:	7b9b      	ldrb	r3, [r3, #14]
 80042bc:	3b04      	subs	r3, #4
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042c2:	739a      	strb	r2, [r3, #14]
            break;
 80042c4:	e000      	b.n	80042c8 <st25r95_calibrate+0x188>
        }
      }
 80042c6:	bf00      	nop
  for (uint8_t i = 0; i < 9; i++) {
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	3301      	adds	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	f67f af3c 	bls.w	800414e <st25r95_calibrate+0xe>
    }
  }

  handler->DACRef = calibrate_data[14];
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <st25r95_calibrate+0x1b0>)
 80042d8:	7b9a      	ldrb	r2, [r3, #14]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	709a      	strb	r2, [r3, #2]
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bdb0      	pop	{r4, r5, r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000828 	.word	0x20000828
 80042ec:	20000728 	.word	0x20000728
 80042f0:	20000010 	.word	0x20000010
 80042f4:	2000092c 	.word	0x2000092c

080042f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_MspInit+0x4c>)
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	4a10      	ldr	r2, [pc, #64]	; (8004344 <HAL_MspInit+0x4c>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6613      	str	r3, [r2, #96]	; 0x60
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <HAL_MspInit+0x4c>)
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_MspInit+0x4c>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_MspInit+0x4c>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_MspInit+0x4c>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800432e:	2200      	movs	r2, #0
 8004330:	210f      	movs	r1, #15
 8004332:	f06f 0001 	mvn.w	r0, #1
 8004336:	f001 fdfe 	bl	8005f36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b09e      	sub	sp, #120	; 0x78
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	2268      	movs	r2, #104	; 0x68
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f008 fbcb 	bl	800caf4 <memset>
  if(hadc->Instance==ADC1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2e      	ldr	r2, [pc, #184]	; (800441c <HAL_ADC_MspInit+0xd4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d155      	bne.n	8004414 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800436c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800436e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8004374:	2302      	movs	r3, #2
 8004376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800437c:	2308      	movs	r3, #8
 800437e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004380:	2307      	movs	r3, #7
 8004382:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004384:	2302      	movs	r3, #2
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004388:	2302      	movs	r3, #2
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800438c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004392:	f107 0310 	add.w	r3, r7, #16
 8004396:	4618      	mov	r0, r3
 8004398:	f003 f8c0 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80043a2:	f7ff fcbf 	bl	8003d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_ADC_MspInit+0xd8>)
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_ADC_MspInit+0xd8>)
 80043ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_ADC_MspInit+0xd8>)
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_ADC_MspInit+0xe0>)
 80043c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d0:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043ee:	2220      	movs	r2, #32
 80043f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043f8:	480a      	ldr	r0, [pc, #40]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 80043fa:	f001 fdd3 	bl	8005fa4 <HAL_DMA_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004404:	f7ff fc8e 	bl	8003d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a06      	ldr	r2, [pc, #24]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 800440c:	651a      	str	r2, [r3, #80]	; 0x50
 800440e:	4a05      	ldr	r2, [pc, #20]	; (8004424 <HAL_ADC_MspInit+0xdc>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004414:	bf00      	nop
 8004416:	3778      	adds	r7, #120	; 0x78
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	50040000 	.word	0x50040000
 8004420:	40021000 	.word	0x40021000
 8004424:	20000294 	.word	0x20000294
 8004428:	40020008 	.word	0x40020008

0800442c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <HAL_SPI_MspInit+0x7c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d128      	bne.n	80044a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_SPI_MspInit+0x80>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_SPI_MspInit+0x80>)
 8004454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004458:	6613      	str	r3, [r2, #96]	; 0x60
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <HAL_SPI_MspInit+0x80>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_SPI_MspInit+0x80>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_SPI_MspInit+0x80>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_SPI_MspInit+0x80>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800447e:	23c2      	movs	r3, #194	; 0xc2
 8004480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448a:	2303      	movs	r3, #3
 800448c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800448e:	2305      	movs	r3, #5
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800449c:	f001 fff8 	bl	8006490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80044a0:	bf00      	nop
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013000 	.word	0x40013000
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b0a6      	sub	sp, #152	; 0x98
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	2268      	movs	r2, #104	; 0x68
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f008 fb0f 	bl	800caf4 <memset>
  if(huart->Instance==USART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <HAL_UART_MspInit+0x158>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d145      	bne.n	800456c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044e0:	2301      	movs	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80044e4:	2300      	movs	r3, #0
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	4618      	mov	r0, r3
 80044ee:	f003 f815 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044f8:	f7ff fc14 	bl	8003d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044fc:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_UART_MspInit+0x15c>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	4a42      	ldr	r2, [pc, #264]	; (800460c <HAL_UART_MspInit+0x15c>)
 8004502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004506:	6613      	str	r3, [r2, #96]	; 0x60
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <HAL_UART_MspInit+0x15c>)
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_UART_MspInit+0x15c>)
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	4a3c      	ldr	r2, [pc, #240]	; (800460c <HAL_UART_MspInit+0x15c>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004520:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_UART_MspInit+0x15c>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800452c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004534:	2302      	movs	r3, #2
 8004536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004540:	2303      	movs	r3, #3
 8004542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004546:	2307      	movs	r3, #7
 8004548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004550:	4619      	mov	r1, r3
 8004552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004556:	f001 ff9b 	bl	8006490 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800455a:	2200      	movs	r2, #0
 800455c:	2105      	movs	r1, #5
 800455e:	2025      	movs	r0, #37	; 0x25
 8004560:	f001 fce9 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004564:	2025      	movs	r0, #37	; 0x25
 8004566:	f001 fd02 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800456a:	e048      	b.n	80045fe <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a27      	ldr	r2, [pc, #156]	; (8004610 <HAL_UART_MspInit+0x160>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d143      	bne.n	80045fe <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004576:	2302      	movs	r3, #2
 8004578:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800457a:	2300      	movs	r3, #0
 800457c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4618      	mov	r0, r3
 8004584:	f002 ffca 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800458e:	f7ff fbc9 	bl	8003d24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_UART_MspInit+0x15c>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_UART_MspInit+0x15c>)
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_UART_MspInit+0x15c>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <HAL_UART_MspInit+0x15c>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_UART_MspInit+0x15c>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_UART_MspInit+0x15c>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80045c2:	230c      	movs	r3, #12
 80045c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c8:	2302      	movs	r3, #2
 80045ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d4:	2303      	movs	r3, #3
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045da:	2307      	movs	r3, #7
 80045dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80045e4:	4619      	mov	r1, r3
 80045e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ea:	f001 ff51 	bl	8006490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2105      	movs	r1, #5
 80045f2:	2026      	movs	r0, #38	; 0x26
 80045f4:	f001 fc9f 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045f8:	2026      	movs	r0, #38	; 0x26
 80045fa:	f001 fcb8 	bl	8005f6e <HAL_NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3798      	adds	r7, #152	; 0x98
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40013800 	.word	0x40013800
 800460c:	40021000 	.word	0x40021000
 8004610:	40004400 	.word	0x40004400

08004614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004618:	e7fe      	b.n	8004618 <NMI_Handler+0x4>

0800461a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800461e:	e7fe      	b.n	800461e <HardFault_Handler+0x4>

08004620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004624:	e7fe      	b.n	8004624 <MemManage_Handler+0x4>

08004626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800462a:	e7fe      	b.n	800462a <BusFault_Handler+0x4>

0800462c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004630:	e7fe      	b.n	8004630 <UsageFault_Handler+0x4>

08004632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004644:	f000 f98c 	bl	8004960 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004648:	f007 fbde 	bl	800be08 <xTaskGetSchedulerState>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004652:	f007 fec1 	bl	800c3d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <DMA1_Channel1_IRQHandler+0x10>)
 8004662:	f001 fe36 	bl	80062d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000294 	.word	0x20000294

08004670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <USART1_IRQHandler+0x10>)
 8004676:	f004 fa73 	bl	8008b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000340 	.word	0x20000340

08004684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004688:	4804      	ldr	r0, [pc, #16]	; (800469c <USART2_IRQHandler+0x18>)
 800468a:	f004 fa69 	bl	8008b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  osSemaphoreRelease(BluetoothRXHandle);
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <USART2_IRQHandler+0x1c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f005 feb0 	bl	800a3f8 <osSemaphoreRelease>
  /* USER CODE END USART2_IRQn 1 */
}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200003f4 	.word	0x200003f4
 80046a0:	200004b8 	.word	0x200004b8

080046a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return 1;
 80046a8:	2301      	movs	r3, #1
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <_kill>:

int _kill(int pid, int sig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046be:	f008 f8d7 	bl	800c870 <__errno>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2216      	movs	r2, #22
 80046c6:	601a      	str	r2, [r3, #0]
  return -1;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_exit>:

void _exit (int status)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ffe7 	bl	80046b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046e6:	e7fe      	b.n	80046e6 <_exit+0x12>

080046e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e00a      	b.n	8004710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046fa:	f3af 8000 	nop.w
 80046fe:	4601      	mov	r1, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	60ba      	str	r2, [r7, #8]
 8004706:	b2ca      	uxtb	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	3301      	adds	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	dbf0      	blt.n	80046fa <_read+0x12>
  }

  return len;
 8004718:	687b      	ldr	r3, [r7, #4]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e009      	b.n	8004748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	60ba      	str	r2, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3301      	adds	r3, #1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	dbf1      	blt.n	8004734 <_write+0x12>
  }
  return len;
 8004750:	687b      	ldr	r3, [r7, #4]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <_close>:

int _close(int file)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004782:	605a      	str	r2, [r3, #4]
  return 0;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <_isatty>:

int _isatty(int file)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800479a:	2301      	movs	r3, #1
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047cc:	4a14      	ldr	r2, [pc, #80]	; (8004820 <_sbrk+0x5c>)
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <_sbrk+0x60>)
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <_sbrk+0x64>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <_sbrk+0x64>)
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <_sbrk+0x68>)
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <_sbrk+0x64>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d207      	bcs.n	8004804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047f4:	f008 f83c 	bl	800c870 <__errno>
 80047f8:	4603      	mov	r3, r0
 80047fa:	220c      	movs	r2, #12
 80047fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e009      	b.n	8004818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <_sbrk+0x64>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <_sbrk+0x64>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <_sbrk+0x64>)
 8004814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20028000 	.word	0x20028000
 8004824:	00000400 	.word	0x00000400
 8004828:	20000930 	.word	0x20000930
 800482c:	20001a68 	.word	0x20001a68

08004830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <SystemInit+0x20>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <SystemInit+0x20>)
 800483c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <Reset_Handler>:
 8004854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800488c <LoopForever+0x2>
 8004858:	f7ff ffea 	bl	8004830 <SystemInit>
 800485c:	480c      	ldr	r0, [pc, #48]	; (8004890 <LoopForever+0x6>)
 800485e:	490d      	ldr	r1, [pc, #52]	; (8004894 <LoopForever+0xa>)
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <LoopForever+0xe>)
 8004862:	2300      	movs	r3, #0
 8004864:	e002      	b.n	800486c <LoopCopyDataInit>

08004866 <CopyDataInit>:
 8004866:	58d4      	ldr	r4, [r2, r3]
 8004868:	50c4      	str	r4, [r0, r3]
 800486a:	3304      	adds	r3, #4

0800486c <LoopCopyDataInit>:
 800486c:	18c4      	adds	r4, r0, r3
 800486e:	428c      	cmp	r4, r1
 8004870:	d3f9      	bcc.n	8004866 <CopyDataInit>
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <LoopForever+0x12>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	; (80048a0 <LoopForever+0x16>)
 8004876:	2300      	movs	r3, #0
 8004878:	e001      	b.n	800487e <LoopFillZerobss>

0800487a <FillZerobss>:
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	3204      	adds	r2, #4

0800487e <LoopFillZerobss>:
 800487e:	42a2      	cmp	r2, r4
 8004880:	d3fb      	bcc.n	800487a <FillZerobss>
 8004882:	f008 f8f1 	bl	800ca68 <__libc_init_array>
 8004886:	f7fe fe93 	bl	80035b0 <main>

0800488a <LoopForever>:
 800488a:	e7fe      	b.n	800488a <LoopForever>
 800488c:	20028000 	.word	0x20028000
 8004890:	20000000 	.word	0x20000000
 8004894:	20000208 	.word	0x20000208
 8004898:	080109d8 	.word	0x080109d8
 800489c:	20000208 	.word	0x20000208
 80048a0:	20001a64 	.word	0x20001a64

080048a4 <ADC1_IRQHandler>:
 80048a4:	e7fe      	b.n	80048a4 <ADC1_IRQHandler>
	...

080048a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <HAL_Init+0x3c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <HAL_Init+0x3c>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048be:	2003      	movs	r0, #3
 80048c0:	f001 fb2e 	bl	8005f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048c4:	200f      	movs	r0, #15
 80048c6:	f000 f80f 	bl	80048e8 <HAL_InitTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	71fb      	strb	r3, [r7, #7]
 80048d4:	e001      	b.n	80048da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048d6:	f7ff fd0f 	bl	80042f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048da:	79fb      	ldrb	r3, [r7, #7]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40022000 	.word	0x40022000

080048e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <HAL_InitTick+0x6c>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d023      	beq.n	8004944 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_InitTick+0x70>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <HAL_InitTick+0x6c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	4619      	mov	r1, r3
 8004906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800490a:	fbb3 f3f1 	udiv	r3, r3, r1
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fb39 	bl	8005f8a <HAL_SYSTICK_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d809      	bhi.n	8004938 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004924:	2200      	movs	r2, #0
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	f001 fb03 	bl	8005f36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_InitTick+0x74>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e007      	b.n	8004948 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e004      	b.n	8004948 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e001      	b.n	8004948 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2000002c 	.word	0x2000002c
 8004958:	20000024 	.word	0x20000024
 800495c:	20000028 	.word	0x20000028

08004960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_IncTick+0x20>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_IncTick+0x24>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_IncTick+0x24>)
 8004972:	6013      	str	r3, [r2, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	2000002c 	.word	0x2000002c
 8004984:	20000934 	.word	0x20000934

08004988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return uwTick;
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_GetTick+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000934 	.word	0x20000934

080049a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3360      	adds	r3, #96	; 0x60
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <LL_ADC_SetOffset+0x44>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	03fff000 	.word	0x03fff000

08004a50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3360      	adds	r3, #96	; 0x60
 8004a5e:	461a      	mov	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3360      	adds	r3, #96	; 0x60
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	615a      	str	r2, [r3, #20]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3330      	adds	r3, #48	; 0x30
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	4413      	add	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	211f      	movs	r1, #31
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	401a      	ands	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0e9b      	lsrs	r3, r3, #26
 8004b36:	f003 011f 	and.w	r1, r3, #31
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	431a      	orrs	r2, r3
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b087      	sub	sp, #28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3314      	adds	r3, #20
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0e5b      	lsrs	r3, r3, #25
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	4413      	add	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	0d1b      	lsrs	r3, r3, #20
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2107      	movs	r1, #7
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	0d1b      	lsrs	r3, r3, #20
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0318 	and.w	r3, r3, #24
 8004bce:	4908      	ldr	r1, [pc, #32]	; (8004bf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004bd0:	40d9      	lsrs	r1, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	0007ffff 	.word	0x0007ffff

08004bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6093      	str	r3, [r2, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d101      	bne.n	8004c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7c:	d101      	bne.n	8004c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ccc:	f043 0202 	orr.w	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <LL_ADC_IsEnabled+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_ADC_IsEnabled+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d101      	bne.n	8004d1e <LL_ADC_IsDisableOngoing+0x18>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <LL_ADC_IsDisableOngoing+0x1a>
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d101      	bne.n	8004d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d101      	bne.n	8004d92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e12f      	b.n	800501a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fabd 	bl	8004348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ff19 	bl	8004c18 <LL_ADC_IsDeepPowerDownEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff feff 	bl	8004bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ff34 	bl	8004c68 <LL_ADC_IsInternalRegulatorEnabled>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d115      	bne.n	8004e32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff18 	bl	8004c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e10:	4b84      	ldr	r3, [pc, #528]	; (8005024 <HAL_ADC_Init+0x284>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	4a84      	ldr	r2, [pc, #528]	; (8005028 <HAL_ADC_Init+0x288>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	3301      	adds	r3, #1
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e24:	e002      	b.n	8004e2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f9      	bne.n	8004e26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff16 	bl	8004c68 <LL_ADC_IsInternalRegulatorEnabled>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f043 0210 	orr.w	r2, r3, #16
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	f043 0201 	orr.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff76 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 8004e68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 80c8 	bne.w	8005008 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80c4 	bne.w	8005008 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e88:	f043 0202 	orr.w	r2, r3, #2
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff23 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea0:	4862      	ldr	r0, [pc, #392]	; (800502c <HAL_ADC_Init+0x28c>)
 8004ea2:	f7ff ff1d 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	485f      	ldr	r0, [pc, #380]	; (8005030 <HAL_ADC_Init+0x290>)
 8004eb4:	f7ff fd74 	bl	80049a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7e5b      	ldrb	r3, [r3, #25]
 8004ebc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ec2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004ec8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004ece:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d106      	bne.n	8004ef4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	3b01      	subs	r3, #1
 8004eec:	045b      	lsls	r3, r3, #17
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_ADC_Init+0x294>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff13 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 8004f2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff20 	bl	8004d7a <LL_ADC_INJ_IsConversionOngoing>
 8004f3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d140      	bne.n	8004fc4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13d      	bne.n	8004fc4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f52:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6a:	f023 0306 	bic.w	r3, r3, #6
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d118      	bne.n	8004fb4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f98:	4311      	orrs	r1, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f9e:	4311      	orrs	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	611a      	str	r2, [r3, #16]
 8004fb2:	e007      	b.n	8004fc4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10c      	bne.n	8004fe6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f023 010f 	bic.w	r1, r3, #15
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	1e5a      	subs	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe4:	e007      	b.n	8004ff6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 020f 	bic.w	r2, r2, #15
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	659a      	str	r2, [r3, #88]	; 0x58
 8005006:	e007      	b.n	8005018 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005018:	7ffb      	ldrb	r3, [r7, #31]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000024 	.word	0x20000024
 8005028:	053e2d63 	.word	0x053e2d63
 800502c:	50040000 	.word	0x50040000
 8005030:	50040300 	.word	0x50040300
 8005034:	fff0c007 	.word	0xfff0c007

08005038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fe83 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d167      	bne.n	8005124 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_ADC_Start_DMA+0x2a>
 800505e:	2302      	movs	r3, #2
 8005060:	e063      	b.n	800512a <HAL_ADC_Start_DMA+0xf2>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fc82 	bl	8005974 <ADC_Enable>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d14f      	bne.n	800511a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	f023 0206 	bic.w	r2, r3, #6
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80050a6:	e002      	b.n	80050ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	4a20      	ldr	r2, [pc, #128]	; (8005134 <HAL_ADC_Start_DMA+0xfc>)
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_ADC_Start_DMA+0x100>)
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_ADC_Start_DMA+0x104>)
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	221c      	movs	r2, #28
 80050cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0210 	orr.w	r2, r2, #16
 80050e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3340      	adds	r3, #64	; 0x40
 8005100:	4619      	mov	r1, r3
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f001 f805 	bl	8006114 <HAL_DMA_Start_IT>
 800510a:	4603      	mov	r3, r0
 800510c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fe0a 	bl	8004d2c <LL_ADC_REG_StartConversion>
 8005118:	e006      	b.n	8005128 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005122:	e001      	b.n	8005128 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005124:	2302      	movs	r3, #2
 8005126:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005128:	7dfb      	ldrb	r3, [r7, #23]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	08005b3f 	.word	0x08005b3f
 8005138:	08005c17 	.word	0x08005c17
 800513c:	08005c33 	.word	0x08005c33

08005140 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0b6      	sub	sp, #216	; 0xd8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_ADC_ConfigChannel+0x22>
 800519a:	2302      	movs	r3, #2
 800519c:	e3d5      	b.n	800594a <HAL_ADC_ConfigChannel+0x7ce>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fdd2 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 83ba 	bne.w	800592c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b05      	cmp	r3, #5
 80051be:	d824      	bhi.n	800520a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	3b02      	subs	r3, #2
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d81b      	bhi.n	8005202 <HAL_ADC_ConfigChannel+0x86>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_ADC_ConfigChannel+0x54>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051e9 	.word	0x080051e9
 80051d8:	080051f1 	.word	0x080051f1
 80051dc:	080051f9 	.word	0x080051f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	220c      	movs	r2, #12
 80051e4:	605a      	str	r2, [r3, #4]
          break;
 80051e6:	e011      	b.n	800520c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2212      	movs	r2, #18
 80051ec:	605a      	str	r2, [r3, #4]
          break;
 80051ee:	e00d      	b.n	800520c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2218      	movs	r2, #24
 80051f4:	605a      	str	r2, [r3, #4]
          break;
 80051f6:	e009      	b.n	800520c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fe:	605a      	str	r2, [r3, #4]
          break;
 8005200:	e004      	b.n	800520c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2206      	movs	r2, #6
 8005206:	605a      	str	r2, [r3, #4]
          break;
 8005208:	e000      	b.n	800520c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800520a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	f7ff fc70 	bl	8004afe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fd96 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 8005228:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fda2 	bl	8004d7a <LL_ADC_INJ_IsConversionOngoing>
 8005236:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800523a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 81c1 	bne.w	80055c6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 81bc 	bne.w	80055c6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005256:	d10f      	bne.n	8005278 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	4619      	mov	r1, r3
 8005264:	f7ff fc77 	bl	8004b56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fc1e 	bl	8004ab2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005276:	e00e      	b.n	8005296 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	461a      	mov	r2, r3
 8005286:	f7ff fc66 	bl	8004b56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fc0e 	bl	8004ab2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d00a      	beq.n	80052ce <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6919      	ldr	r1, [r3, #16]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052c8:	f7ff fb9e 	bl	8004a08 <LL_ADC_SetOffset>
 80052cc:	e17b      	b.n	80055c6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fbbb 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 80052da:	4603      	mov	r3, r0
 80052dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x17e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fbb0 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 80052f0:	4603      	mov	r3, r0
 80052f2:	0e9b      	lsrs	r3, r3, #26
 80052f4:	f003 021f 	and.w	r2, r3, #31
 80052f8:	e01e      	b.n	8005338 <HAL_ADC_ConfigChannel+0x1bc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fba5 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 8005306:	4603      	mov	r3, r0
 8005308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005328:	2320      	movs	r3, #32
 800532a:	e004      	b.n	8005336 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800532c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005330:	fab3 f383 	clz	r3, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d4>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	e018      	b.n	8005382 <HAL_ADC_ConfigChannel+0x206>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800536c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e004      	b.n	8005382 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005378:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800537c:	fab3 f383 	clz	r3, r3
 8005380:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005382:	429a      	cmp	r2, r3
 8005384:	d106      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fb74 	bl	8004a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fb58 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x244>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fb4d 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 80053b6:	4603      	mov	r3, r0
 80053b8:	0e9b      	lsrs	r3, r3, #26
 80053ba:	f003 021f 	and.w	r2, r3, #31
 80053be:	e01e      	b.n	80053fe <HAL_ADC_ConfigChannel+0x282>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fb42 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80053de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80053e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80053ee:	2320      	movs	r3, #32
 80053f0:	e004      	b.n	80053fc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80053f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x29a>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0e9b      	lsrs	r3, r3, #26
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	e018      	b.n	8005448 <HAL_ADC_ConfigChannel+0x2cc>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800542a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800542e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e004      	b.n	8005448 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800543e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005448:	429a      	cmp	r2, r3
 800544a:	d106      	bne.n	800545a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2200      	movs	r2, #0
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fb11 	bl	8004a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff faf5 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 8005466:	4603      	mov	r3, r0
 8005468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x30a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2102      	movs	r1, #2
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff faea 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 800547c:	4603      	mov	r3, r0
 800547e:	0e9b      	lsrs	r3, r3, #26
 8005480:	f003 021f 	and.w	r2, r3, #31
 8005484:	e01e      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x348>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2102      	movs	r1, #2
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fadf 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80054a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80054ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e004      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80054b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x360>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	0e9b      	lsrs	r3, r3, #26
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	e016      	b.n	800550a <HAL_ADC_ConfigChannel+0x38e>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054e8:	fa93 f3a3 	rbit	r3, r3
 80054ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80054ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80054fc:	2320      	movs	r3, #32
 80054fe:	e004      	b.n	800550a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800550a:	429a      	cmp	r2, r3
 800550c:	d106      	bne.n	800551c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	2102      	movs	r1, #2
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fab0 	bl	8004a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2103      	movs	r1, #3
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fa94 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 8005528:	4603      	mov	r3, r0
 800552a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x3cc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2103      	movs	r1, #3
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fa89 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 800553e:	4603      	mov	r3, r0
 8005540:	0e9b      	lsrs	r3, r3, #26
 8005542:	f003 021f 	and.w	r2, r3, #31
 8005546:	e017      	b.n	8005578 <HAL_ADC_ConfigChannel+0x3fc>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2103      	movs	r1, #3
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fa7e 	bl	8004a50 <LL_ADC_GetOffsetChannel>
 8005554:	4603      	mov	r3, r0
 8005556:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005562:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800556a:	2320      	movs	r3, #32
 800556c:	e003      	b.n	8005576 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800556e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x414>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	0e9b      	lsrs	r3, r3, #26
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	e011      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x438>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005598:	fa93 f3a3 	rbit	r3, r3
 800559c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800559e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80055a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80055a8:	2320      	movs	r3, #32
 80055aa:	e003      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d106      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2200      	movs	r2, #0
 80055be:	2103      	movs	r1, #3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fa5b 	bl	8004a7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fb88 	bl	8004ce0 <LL_ADC_IsEnabled>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 8140 	bne.w	8005858 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	461a      	mov	r2, r3
 80055e6:	f7ff fae1 	bl	8004bac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4a8f      	ldr	r2, [pc, #572]	; (800582c <HAL_ADC_ConfigChannel+0x6b0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	f040 8131 	bne.w	8005858 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <HAL_ADC_ConfigChannel+0x4a2>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	0e9b      	lsrs	r3, r3, #26
 800560c:	3301      	adds	r3, #1
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2b09      	cmp	r3, #9
 8005614:	bf94      	ite	ls
 8005616:	2301      	movls	r3, #1
 8005618:	2300      	movhi	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e019      	b.n	8005652 <HAL_ADC_ConfigChannel+0x4d6>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800562c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800562e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005636:	2320      	movs	r3, #32
 8005638:	e003      	b.n	8005642 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800563a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	3301      	adds	r3, #1
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2b09      	cmp	r3, #9
 800564a:	bf94      	ite	ls
 800564c:	2301      	movls	r3, #1
 800564e:	2300      	movhi	r3, #0
 8005650:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005652:	2b00      	cmp	r3, #0
 8005654:	d079      	beq.n	800574a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <HAL_ADC_ConfigChannel+0x4f6>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	0e9b      	lsrs	r3, r3, #26
 8005668:	3301      	adds	r3, #1
 800566a:	069b      	lsls	r3, r3, #26
 800566c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005670:	e015      	b.n	800569e <HAL_ADC_ConfigChannel+0x522>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567a:	fa93 f3a3 	rbit	r3, r3
 800567e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800568a:	2320      	movs	r3, #32
 800568c:	e003      	b.n	8005696 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800568e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	3301      	adds	r3, #1
 8005698:	069b      	lsls	r3, r3, #26
 800569a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_ADC_ConfigChannel+0x542>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	0e9b      	lsrs	r3, r3, #26
 80056b0:	3301      	adds	r3, #1
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	e017      	b.n	80056ee <HAL_ADC_ConfigChannel+0x572>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80056cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80056d6:	2320      	movs	r3, #32
 80056d8:	e003      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80056da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056dc:	fab3 f383 	clz	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	ea42 0103 	orr.w	r1, r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x598>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	0e9b      	lsrs	r3, r3, #26
 8005704:	3301      	adds	r3, #1
 8005706:	f003 021f 	and.w	r2, r3, #31
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	051b      	lsls	r3, r3, #20
 8005712:	e018      	b.n	8005746 <HAL_ADC_ConfigChannel+0x5ca>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800572c:	2320      	movs	r3, #32
 800572e:	e003      	b.n	8005738 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	fab3 f383 	clz	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3301      	adds	r3, #1
 800573a:	f003 021f 	and.w	r2, r3, #31
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005746:	430b      	orrs	r3, r1
 8005748:	e081      	b.n	800584e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x5ea>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	0e9b      	lsrs	r3, r3, #26
 800575c:	3301      	adds	r3, #1
 800575e:	069b      	lsls	r3, r3, #26
 8005760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005764:	e015      	b.n	8005792 <HAL_ADC_ConfigChannel+0x616>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800577e:	2320      	movs	r3, #32
 8005780:	e003      	b.n	800578a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	fab3 f383 	clz	r3, r3
 8005788:	b2db      	uxtb	r3, r3
 800578a:	3301      	adds	r3, #1
 800578c:	069b      	lsls	r3, r3, #26
 800578e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x636>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	0e9b      	lsrs	r3, r3, #26
 80057a4:	3301      	adds	r3, #1
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2101      	movs	r1, #1
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	e017      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x666>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	61fb      	str	r3, [r7, #28]
  return result;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80057ca:	2320      	movs	r3, #32
 80057cc:	e003      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	fab3 f383 	clz	r3, r3
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	ea42 0103 	orr.w	r1, r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_ADC_ConfigChannel+0x692>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0e9b      	lsrs	r3, r3, #26
 80057f8:	3301      	adds	r3, #1
 80057fa:	f003 021f 	and.w	r2, r3, #31
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	3b1e      	subs	r3, #30
 8005806:	051b      	lsls	r3, r3, #20
 8005808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800580c:	e01e      	b.n	800584c <HAL_ADC_ConfigChannel+0x6d0>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fa93 f3a3 	rbit	r3, r3
 800581a:	613b      	str	r3, [r7, #16]
  return result;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005826:	2320      	movs	r3, #32
 8005828:	e006      	b.n	8005838 <HAL_ADC_ConfigChannel+0x6bc>
 800582a:	bf00      	nop
 800582c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	fab3 f383 	clz	r3, r3
 8005836:	b2db      	uxtb	r3, r3
 8005838:	3301      	adds	r3, #1
 800583a:	f003 021f 	and.w	r2, r3, #31
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	3b1e      	subs	r3, #30
 8005846:	051b      	lsls	r3, r3, #20
 8005848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800584c:	430b      	orrs	r3, r1
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	4619      	mov	r1, r3
 8005854:	f7ff f97f 	bl	8004b56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <HAL_ADC_ConfigChannel+0x7d8>)
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d06c      	beq.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005864:	483c      	ldr	r0, [pc, #240]	; (8005958 <HAL_ADC_ConfigChannel+0x7dc>)
 8005866:	f7ff f8c1 	bl	80049ec <LL_ADC_GetCommonPathInternalCh>
 800586a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a3a      	ldr	r2, [pc, #232]	; (800595c <HAL_ADC_ConfigChannel+0x7e0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d127      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800587c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d121      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	; (8005960 <HAL_ADC_ConfigChannel+0x7e4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d157      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800588e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005892:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005896:	4619      	mov	r1, r3
 8005898:	482f      	ldr	r0, [pc, #188]	; (8005958 <HAL_ADC_ConfigChannel+0x7dc>)
 800589a:	f7ff f894 	bl	80049c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <HAL_ADC_ConfigChannel+0x7e8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	099b      	lsrs	r3, r3, #6
 80058a4:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_ADC_ConfigChannel+0x7ec>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	099b      	lsrs	r3, r3, #6
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	4613      	mov	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058b8:	e002      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b01      	subs	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f9      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c6:	e03a      	b.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <HAL_ADC_ConfigChannel+0x7f0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d113      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x77e>
 80058d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_ADC_ConfigChannel+0x7e4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d12a      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058f0:	4619      	mov	r1, r3
 80058f2:	4819      	ldr	r0, [pc, #100]	; (8005958 <HAL_ADC_ConfigChannel+0x7dc>)
 80058f4:	f7ff f867 	bl	80049c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058f8:	e021      	b.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <HAL_ADC_ConfigChannel+0x7f4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d11c      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a12      	ldr	r2, [pc, #72]	; (8005960 <HAL_ADC_ConfigChannel+0x7e4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800591a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800591e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005922:	4619      	mov	r1, r3
 8005924:	480c      	ldr	r0, [pc, #48]	; (8005958 <HAL_ADC_ConfigChannel+0x7dc>)
 8005926:	f7ff f84e 	bl	80049c6 <LL_ADC_SetCommonPathInternalCh>
 800592a:	e008      	b.n	800593e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005946:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800594a:	4618      	mov	r0, r3
 800594c:	37d8      	adds	r7, #216	; 0xd8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	80080000 	.word	0x80080000
 8005958:	50040300 	.word	0x50040300
 800595c:	c7520000 	.word	0xc7520000
 8005960:	50040000 	.word	0x50040000
 8005964:	20000024 	.word	0x20000024
 8005968:	053e2d63 	.word	0x053e2d63
 800596c:	cb840000 	.word	0xcb840000
 8005970:	80000001 	.word	0x80000001

08005974 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff f9ab 	bl	8004ce0 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d169      	bne.n	8005a64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <ADC_Enable+0xfc>)
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	f043 0210 	orr.w	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e055      	b.n	8005a66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff f966 	bl	8004c90 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059c4:	482b      	ldr	r0, [pc, #172]	; (8005a74 <ADC_Enable+0x100>)
 80059c6:	f7ff f811 	bl	80049ec <LL_ADC_GetCommonPathInternalCh>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <ADC_Enable+0x104>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	099b      	lsrs	r3, r3, #6
 80059da:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <ADC_Enable+0x108>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	099b      	lsrs	r3, r3, #6
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80059ee:	e002      	b.n	80059f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f9      	bne.n	80059f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059fc:	f7fe ffc4 	bl	8004988 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a02:	e028      	b.n	8005a56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff f969 	bl	8004ce0 <LL_ADC_IsEnabled>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff f939 	bl	8004c90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a1e:	f7fe ffb3 	bl	8004988 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d914      	bls.n	8005a56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00d      	beq.n	8005a56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	f043 0210 	orr.w	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e007      	b.n	8005a66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d1cf      	bne.n	8005a04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	8000003f 	.word	0x8000003f
 8005a74:	50040300 	.word	0x50040300
 8005a78:	20000024 	.word	0x20000024
 8005a7c:	053e2d63 	.word	0x053e2d63

08005a80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f93a 	bl	8004d06 <LL_ADC_IsDisableOngoing>
 8005a92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff f921 	bl	8004ce0 <LL_ADC_IsEnabled>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d047      	beq.n	8005b34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d144      	bne.n	8005b34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 030d 	and.w	r3, r3, #13
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d10c      	bne.n	8005ad2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff f8fb 	bl	8004cb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005aca:	f7fe ff5d 	bl	8004988 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ad0:	e029      	b.n	8005b26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	f043 0210 	orr.w	r2, r3, #16
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e023      	b.n	8005b36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005aee:	f7fe ff4b 	bl	8004988 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d914      	bls.n	8005b26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	f043 0210 	orr.w	r2, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	f043 0201 	orr.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e007      	b.n	8005b36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1dc      	bne.n	8005aee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d14b      	bne.n	8005bf0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d021      	beq.n	8005bb6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fe ffae 	bl	8004ad8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d032      	beq.n	8005be8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d12b      	bne.n	8005be8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d11f      	bne.n	8005be8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f043 0201 	orr.w	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8005bb4:	e018      	b.n	8005be8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff faa9 	bl	8005140 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bee:	e00e      	b.n	8005c0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fab3 	bl	8005168 <HAL_ADC_ErrorCallback>
}
 8005c02:	e004      	b.n	8005c0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fa95 	bl	8005154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	f043 0204 	orr.w	r2, r3, #4
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fa85 	bl	8005168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <LL_ADC_StartCalibration>:
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <LL_ADC_IsCalibrationOnGoing>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d101      	bne.n	8005cb2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADCEx_Calibration_Start+0x1c>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e04d      	b.n	8005d78 <HAL_ADCEx_Calibration_Start+0xb8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fecb 	bl	8005a80 <ADC_Disable>
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d136      	bne.n	8005d62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cfc:	f023 0302 	bic.w	r3, r3, #2
 8005d00:	f043 0202 	orr.w	r2, r3, #2
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ffa9 	bl	8005c66 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d14:	e014      	b.n	8005d40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005d22:	d30d      	bcc.n	8005d40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	f023 0312 	bic.w	r3, r3, #18
 8005d2c:	f043 0210 	orr.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e01b      	b.n	8005d78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ffa7 	bl	8005c98 <LL_ADC_IsCalibrationOnGoing>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e2      	bne.n	8005d16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	f023 0303 	bic.w	r3, r3, #3
 8005d58:	f043 0201 	orr.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005d60:	e005      	b.n	8005d6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	f043 0210 	orr.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0307 	and.w	r3, r3, #7
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db0b      	blt.n	8005e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	4907      	ldr	r1, [pc, #28]	; (8005e1c <__NVIC_EnableIRQ+0x38>)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2001      	movs	r0, #1
 8005e06:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	e000e100 	.word	0xe000e100

08005e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	db0a      	blt.n	8005e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	490c      	ldr	r1, [pc, #48]	; (8005e6c <__NVIC_SetPriority+0x4c>)
 8005e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3e:	0112      	lsls	r2, r2, #4
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	440b      	add	r3, r1
 8005e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e48:	e00a      	b.n	8005e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4908      	ldr	r1, [pc, #32]	; (8005e70 <__NVIC_SetPriority+0x50>)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3b04      	subs	r3, #4
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	761a      	strb	r2, [r3, #24]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000e100 	.word	0xe000e100
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f1c3 0307 	rsb	r3, r3, #7
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf28      	it	cs
 8005e92:	2304      	movcs	r3, #4
 8005e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d902      	bls.n	8005ea4 <NVIC_EncodePriority+0x30>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3b03      	subs	r3, #3
 8005ea2:	e000      	b.n	8005ea6 <NVIC_EncodePriority+0x32>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	43d9      	mvns	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ecc:	4313      	orrs	r3, r2
         );
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3724      	adds	r7, #36	; 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eec:	d301      	bcc.n	8005ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e00f      	b.n	8005f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <SysTick_Config+0x40>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005efa:	210f      	movs	r1, #15
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	f7ff ff8e 	bl	8005e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <SysTick_Config+0x40>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f0a:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <SysTick_Config+0x40>)
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000e010 	.word	0xe000e010

08005f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff29 	bl	8005d80 <__NVIC_SetPriorityGrouping>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f48:	f7ff ff3e 	bl	8005dc8 <__NVIC_GetPriorityGrouping>
 8005f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ff8e 	bl	8005e74 <NVIC_EncodePriority>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff5d 	bl	8005e20 <__NVIC_SetPriority>
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff31 	bl	8005de4 <__NVIC_EnableIRQ>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ffa2 	bl	8005edc <SysTick_Config>
 8005f98:	4603      	mov	r3, r0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e098      	b.n	80060e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4b4d      	ldr	r3, [pc, #308]	; (80060f4 <HAL_DMA_Init+0x150>)
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d80f      	bhi.n	8005fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b4b      	ldr	r3, [pc, #300]	; (80060f8 <HAL_DMA_Init+0x154>)
 8005fca:	4413      	add	r3, r2
 8005fcc:	4a4b      	ldr	r2, [pc, #300]	; (80060fc <HAL_DMA_Init+0x158>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	009a      	lsls	r2, r3, #2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a48      	ldr	r2, [pc, #288]	; (8006100 <HAL_DMA_Init+0x15c>)
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
 8005fe0:	e00e      	b.n	8006000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b46      	ldr	r3, [pc, #280]	; (8006104 <HAL_DMA_Init+0x160>)
 8005fea:	4413      	add	r3, r2
 8005fec:	4a43      	ldr	r2, [pc, #268]	; (80060fc <HAL_DMA_Init+0x158>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	009a      	lsls	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a42      	ldr	r2, [pc, #264]	; (8006108 <HAL_DMA_Init+0x164>)
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800603c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800605a:	d039      	beq.n	80060d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	4a27      	ldr	r2, [pc, #156]	; (8006100 <HAL_DMA_Init+0x15c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d11a      	bne.n	800609c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <HAL_DMA_Init+0x168>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	f003 031c 	and.w	r3, r3, #28
 8006072:	210f      	movs	r1, #15
 8006074:	fa01 f303 	lsl.w	r3, r1, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	4924      	ldr	r1, [pc, #144]	; (800610c <HAL_DMA_Init+0x168>)
 800607c:	4013      	ands	r3, r2
 800607e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006080:	4b22      	ldr	r3, [pc, #136]	; (800610c <HAL_DMA_Init+0x168>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	f003 031c 	and.w	r3, r3, #28
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	491d      	ldr	r1, [pc, #116]	; (800610c <HAL_DMA_Init+0x168>)
 8006096:	4313      	orrs	r3, r2
 8006098:	600b      	str	r3, [r1, #0]
 800609a:	e019      	b.n	80060d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800609c:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <HAL_DMA_Init+0x16c>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	f003 031c 	and.w	r3, r3, #28
 80060a8:	210f      	movs	r1, #15
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	43db      	mvns	r3, r3
 80060b0:	4917      	ldr	r1, [pc, #92]	; (8006110 <HAL_DMA_Init+0x16c>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <HAL_DMA_Init+0x16c>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f003 031c 	and.w	r3, r3, #28
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	4911      	ldr	r1, [pc, #68]	; (8006110 <HAL_DMA_Init+0x16c>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40020407 	.word	0x40020407
 80060f8:	bffdfff8 	.word	0xbffdfff8
 80060fc:	cccccccd 	.word	0xcccccccd
 8006100:	40020000 	.word	0x40020000
 8006104:	bffdfbf8 	.word	0xbffdfbf8
 8006108:	40020400 	.word	0x40020400
 800610c:	400200a8 	.word	0x400200a8
 8006110:	400204a8 	.word	0x400204a8

08006114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_DMA_Start_IT+0x20>
 8006130:	2302      	movs	r3, #2
 8006132:	e04b      	b.n	80061cc <HAL_DMA_Start_IT+0xb8>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d13a      	bne.n	80061be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f95f 	bl	8006430 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 020e 	orr.w	r2, r2, #14
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e00f      	b.n	80061ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 020a 	orr.w	r2, r2, #10
 80061aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e005      	b.n	80061ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
 80061c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d008      	beq.n	80061fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2204      	movs	r2, #4
 80061f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e022      	b.n	8006244 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 020e 	bic.w	r2, r2, #14
 800620c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	f003 021c 	and.w	r2, r3, #28
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2101      	movs	r1, #1
 800622c:	fa01 f202 	lsl.w	r2, r1, r2
 8006230:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d005      	beq.n	8006274 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e029      	b.n	80062c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 020e 	bic.w	r2, r2, #14
 8006282:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	f003 021c 	and.w	r2, r3, #28
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2101      	movs	r1, #1
 80062a2:	fa01 f202 	lsl.w	r2, r1, r2
 80062a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
    }
  }
  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f003 031c 	and.w	r3, r3, #28
 80062f2:	2204      	movs	r2, #4
 80062f4:	409a      	lsls	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d026      	beq.n	800634c <HAL_DMA_IRQHandler+0x7a>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d021      	beq.n	800634c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f003 021c 	and.w	r2, r3, #28
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2104      	movs	r1, #4
 8006334:	fa01 f202 	lsl.w	r2, r1, r2
 8006338:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	2b00      	cmp	r3, #0
 8006340:	d071      	beq.n	8006426 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800634a:	e06c      	b.n	8006426 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	f003 031c 	and.w	r3, r3, #28
 8006354:	2202      	movs	r2, #2
 8006356:	409a      	lsls	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02e      	beq.n	80063be <HAL_DMA_IRQHandler+0xec>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d029      	beq.n	80063be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 020a 	bic.w	r2, r2, #10
 8006386:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006394:	f003 021c 	and.w	r2, r3, #28
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2102      	movs	r1, #2
 800639e:	fa01 f202 	lsl.w	r2, r1, r2
 80063a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d038      	beq.n	8006426 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80063bc:	e033      	b.n	8006426 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	f003 031c 	and.w	r3, r3, #28
 80063c6:	2208      	movs	r2, #8
 80063c8:	409a      	lsls	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d02a      	beq.n	8006428 <HAL_DMA_IRQHandler+0x156>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d025      	beq.n	8006428 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 020e 	bic.w	r2, r2, #14
 80063ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	f003 021c 	and.w	r2, r3, #28
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2101      	movs	r1, #1
 80063fa:	fa01 f202 	lsl.w	r2, r1, r2
 80063fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006426:	bf00      	nop
 8006428:	bf00      	nop
}
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	f003 021c 	and.w	r2, r3, #28
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2101      	movs	r1, #1
 800644c:	fa01 f202 	lsl.w	r2, r1, r2
 8006450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b10      	cmp	r3, #16
 8006460:	d108      	bne.n	8006474 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006472:	e007      	b.n	8006484 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800649e:	e154      	b.n	800674a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2101      	movs	r1, #1
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8146 	beq.w	8006744 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d005      	beq.n	80064d0 <HAL_GPIO_Init+0x40>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d130      	bne.n	8006532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	2203      	movs	r2, #3
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4013      	ands	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006506:	2201      	movs	r2, #1
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4013      	ands	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	f003 0201 	and.w	r2, r3, #1
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d017      	beq.n	800656e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	2203      	movs	r2, #3
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43db      	mvns	r3, r3
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d123      	bne.n	80065c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	08da      	lsrs	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3208      	adds	r2, #8
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	220f      	movs	r2, #15
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4013      	ands	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	08da      	lsrs	r2, r3, #3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3208      	adds	r2, #8
 80065bc:	6939      	ldr	r1, [r7, #16]
 80065be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	2203      	movs	r2, #3
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4013      	ands	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0203 	and.w	r2, r3, #3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80a0 	beq.w	8006744 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006604:	4b58      	ldr	r3, [pc, #352]	; (8006768 <HAL_GPIO_Init+0x2d8>)
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	4a57      	ldr	r2, [pc, #348]	; (8006768 <HAL_GPIO_Init+0x2d8>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6613      	str	r3, [r2, #96]	; 0x60
 8006610:	4b55      	ldr	r3, [pc, #340]	; (8006768 <HAL_GPIO_Init+0x2d8>)
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <HAL_GPIO_Init+0x2dc>)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	3302      	adds	r3, #2
 8006624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	220f      	movs	r2, #15
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	43db      	mvns	r3, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4013      	ands	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006646:	d019      	beq.n	800667c <HAL_GPIO_Init+0x1ec>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a49      	ldr	r2, [pc, #292]	; (8006770 <HAL_GPIO_Init+0x2e0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_GPIO_Init+0x1e8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a48      	ldr	r2, [pc, #288]	; (8006774 <HAL_GPIO_Init+0x2e4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00d      	beq.n	8006674 <HAL_GPIO_Init+0x1e4>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a47      	ldr	r2, [pc, #284]	; (8006778 <HAL_GPIO_Init+0x2e8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_Init+0x1e0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a46      	ldr	r2, [pc, #280]	; (800677c <HAL_GPIO_Init+0x2ec>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_GPIO_Init+0x1dc>
 8006668:	2304      	movs	r3, #4
 800666a:	e008      	b.n	800667e <HAL_GPIO_Init+0x1ee>
 800666c:	2307      	movs	r3, #7
 800666e:	e006      	b.n	800667e <HAL_GPIO_Init+0x1ee>
 8006670:	2303      	movs	r3, #3
 8006672:	e004      	b.n	800667e <HAL_GPIO_Init+0x1ee>
 8006674:	2302      	movs	r3, #2
 8006676:	e002      	b.n	800667e <HAL_GPIO_Init+0x1ee>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <HAL_GPIO_Init+0x1ee>
 800667c:	2300      	movs	r3, #0
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	f002 0203 	and.w	r2, r2, #3
 8006684:	0092      	lsls	r2, r2, #2
 8006686:	4093      	lsls	r3, r2
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800668e:	4937      	ldr	r1, [pc, #220]	; (800676c <HAL_GPIO_Init+0x2dc>)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	3302      	adds	r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800669c:	4b38      	ldr	r3, [pc, #224]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	43db      	mvns	r3, r3
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4013      	ands	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	43db      	mvns	r3, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4013      	ands	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066ea:	4a25      	ldr	r2, [pc, #148]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80066f0:	4b23      	ldr	r3, [pc, #140]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4013      	ands	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006714:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800671a:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	43db      	mvns	r3, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4013      	ands	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <HAL_GPIO_Init+0x2f0>)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3301      	adds	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	f47f aea3 	bne.w	80064a0 <HAL_GPIO_Init+0x10>
  }
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40021000 	.word	0x40021000
 800676c:	40010000 	.word	0x40010000
 8006770:	48000400 	.word	0x48000400
 8006774:	48000800 	.word	0x48000800
 8006778:	48000c00 	.word	0x48000c00
 800677c:	48001000 	.word	0x48001000
 8006780:	40010400 	.word	0x40010400

08006784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e001      	b.n	80067a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
 80067c0:	4613      	mov	r3, r2
 80067c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067c4:	787b      	ldrb	r3, [r7, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067d0:	e002      	b.n	80067d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067d2:	887a      	ldrh	r2, [r7, #2]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <HAL_PWREx_GetVoltageRange+0x18>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40007000 	.word	0x40007000

08006800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680e:	d130      	bne.n	8006872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681c:	d038      	beq.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800681e:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006826:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800682c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800682e:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2232      	movs	r2, #50	; 0x32
 8006834:	fb02 f303 	mul.w	r3, r2, r3
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	0c9b      	lsrs	r3, r3, #18
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006844:	e002      	b.n	800684c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b01      	subs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800684c:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006858:	d102      	bne.n	8006860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f2      	bne.n	8006846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d110      	bne.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e00f      	b.n	8006892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d007      	beq.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006888:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800688a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800688e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40007000 	.word	0x40007000
 80068a4:	20000024 	.word	0x20000024
 80068a8:	431bde83 	.word	0x431bde83

080068ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f000 bc02 	b.w	80070c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068c0:	4b96      	ldr	r3, [pc, #600]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 030c 	and.w	r3, r3, #12
 80068c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ca:	4b94      	ldr	r3, [pc, #592]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80e4 	beq.w	8006aaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_RCC_OscConfig+0x4c>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b0c      	cmp	r3, #12
 80068ec:	f040 808b 	bne.w	8006a06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	f040 8087 	bne.w	8006a06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068f8:	4b88      	ldr	r3, [pc, #544]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <HAL_RCC_OscConfig+0x64>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e3d9      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	4b81      	ldr	r3, [pc, #516]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_RCC_OscConfig+0x7e>
 8006920:	4b7e      	ldr	r3, [pc, #504]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006928:	e005      	b.n	8006936 <HAL_RCC_OscConfig+0x8a>
 800692a:	4b7c      	ldr	r3, [pc, #496]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 800692c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006936:	4293      	cmp	r3, r2
 8006938:	d223      	bcs.n	8006982 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fd8c 	bl	800745c <RCC_SetFlashLatencyFromMSIRange>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e3ba      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800694e:	4b73      	ldr	r3, [pc, #460]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a72      	ldr	r2, [pc, #456]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b70      	ldr	r3, [pc, #448]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	496d      	ldr	r1, [pc, #436]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800696c:	4b6b      	ldr	r3, [pc, #428]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	4968      	ldr	r1, [pc, #416]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	e025      	b.n	80069ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006982:	4b66      	ldr	r3, [pc, #408]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a65      	ldr	r2, [pc, #404]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4b63      	ldr	r3, [pc, #396]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	4960      	ldr	r1, [pc, #384]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069a0:	4b5e      	ldr	r3, [pc, #376]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	495b      	ldr	r1, [pc, #364]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fd4c 	bl	800745c <RCC_SetFlashLatencyFromMSIRange>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e37a      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069ce:	f000 fc81 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b51      	ldr	r3, [pc, #324]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	4950      	ldr	r1, [pc, #320]	; (8006b20 <HAL_RCC_OscConfig+0x274>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	4a4e      	ldr	r2, [pc, #312]	; (8006b24 <HAL_RCC_OscConfig+0x278>)
 80069ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <HAL_RCC_OscConfig+0x27c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd ff78 	bl	80048e8 <HAL_InitTick>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d052      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	e35e      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d032      	beq.n	8006a74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a0e:	4b43      	ldr	r3, [pc, #268]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a1a:	f7fd ffb5 	bl	8004988 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a22:	f7fd ffb1 	bl	8004988 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e347      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a34:	4b39      	ldr	r3, [pc, #228]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a40:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a35      	ldr	r2, [pc, #212]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a46:	f043 0308 	orr.w	r3, r3, #8
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b33      	ldr	r3, [pc, #204]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	4930      	ldr	r1, [pc, #192]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	492b      	ldr	r1, [pc, #172]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	604b      	str	r3, [r1, #4]
 8006a72:	e01a      	b.n	8006aaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a74:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a80:	f7fd ff82 	bl	8004988 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a88:	f7fd ff7e 	bl	8004988 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e314      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a9a:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x1dc>
 8006aa6:	e000      	b.n	8006aaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d073      	beq.n	8006b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x21c>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d063      	beq.n	8006b9c <HAL_RCC_OscConfig+0x2f0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d15f      	bne.n	8006b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e2f1      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x24c>
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a0b      	ldr	r2, [pc, #44]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e025      	b.n	8006b44 <HAL_RCC_OscConfig+0x298>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b00:	d114      	bne.n	8006b2c <HAL_RCC_OscConfig+0x280>
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a05      	ldr	r2, [pc, #20]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a02      	ldr	r2, [pc, #8]	; (8006b1c <HAL_RCC_OscConfig+0x270>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e013      	b.n	8006b44 <HAL_RCC_OscConfig+0x298>
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	08010534 	.word	0x08010534
 8006b24:	20000024 	.word	0x20000024
 8006b28:	20000028 	.word	0x20000028
 8006b2c:	4ba0      	ldr	r3, [pc, #640]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a9f      	ldr	r2, [pc, #636]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	4b9d      	ldr	r3, [pc, #628]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a9c      	ldr	r2, [pc, #624]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d013      	beq.n	8006b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fd ff1c 	bl	8004988 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b54:	f7fd ff18 	bl	8004988 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	; 0x64
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e2ae      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b66:	4b92      	ldr	r3, [pc, #584]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x2a8>
 8006b72:	e014      	b.n	8006b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fd ff08 	bl	8004988 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b7c:	f7fd ff04 	bl	8004988 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	; 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e29a      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b8e:	4b88      	ldr	r3, [pc, #544]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x2d0>
 8006b9a:	e000      	b.n	8006b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d060      	beq.n	8006c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_OscConfig+0x310>
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b0c      	cmp	r3, #12
 8006bb4:	d119      	bne.n	8006bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d116      	bne.n	8006bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bbc:	4b7c      	ldr	r3, [pc, #496]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x328>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e277      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd4:	4b76      	ldr	r3, [pc, #472]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	4973      	ldr	r1, [pc, #460]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be8:	e040      	b.n	8006c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d023      	beq.n	8006c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf2:	4b6f      	ldr	r3, [pc, #444]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6e      	ldr	r2, [pc, #440]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fd fec3 	bl	8004988 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c06:	f7fd febf 	bl	8004988 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e255      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c18:	4b65      	ldr	r3, [pc, #404]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c24:	4b62      	ldr	r3, [pc, #392]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	495f      	ldr	r1, [pc, #380]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]
 8006c38:	e018      	b.n	8006c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c3a:	4b5d      	ldr	r3, [pc, #372]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a5c      	ldr	r2, [pc, #368]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fd fe9f 	bl	8004988 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fd fe9b 	bl	8004988 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e231      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c60:	4b53      	ldr	r3, [pc, #332]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d03c      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01c      	beq.n	8006cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c80:	4b4b      	ldr	r3, [pc, #300]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c86:	4a4a      	ldr	r2, [pc, #296]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fd fe7a 	bl	8004988 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fd fe76 	bl	8004988 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e20c      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006caa:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0ef      	beq.n	8006c98 <HAL_RCC_OscConfig+0x3ec>
 8006cb8:	e01b      	b.n	8006cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cc0:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cca:	f7fd fe5d 	bl	8004988 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd2:	f7fd fe59 	bl	8004988 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e1ef      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ef      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80a6 	beq.w	8006e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d00:	2300      	movs	r3, #0
 8006d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d04:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10d      	bne.n	8006d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d2c:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <HAL_RCC_OscConfig+0x508>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d118      	bne.n	8006d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <HAL_RCC_OscConfig+0x508>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <HAL_RCC_OscConfig+0x508>)
 8006d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d44:	f7fd fe20 	bl	8004988 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d4c:	f7fd fe1c 	bl	8004988 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e1b2      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <HAL_RCC_OscConfig+0x508>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d108      	bne.n	8006d84 <HAL_RCC_OscConfig+0x4d8>
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	4a0d      	ldr	r2, [pc, #52]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d82:	e029      	b.n	8006dd8 <HAL_RCC_OscConfig+0x52c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b05      	cmp	r3, #5
 8006d8a:	d115      	bne.n	8006db8 <HAL_RCC_OscConfig+0x50c>
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	4a07      	ldr	r2, [pc, #28]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	4a03      	ldr	r2, [pc, #12]	; (8006db0 <HAL_RCC_OscConfig+0x504>)
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dac:	e014      	b.n	8006dd8 <HAL_RCC_OscConfig+0x52c>
 8006dae:	bf00      	nop
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40007000 	.word	0x40007000
 8006db8:	4b9a      	ldr	r3, [pc, #616]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	4a99      	ldr	r2, [pc, #612]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dc8:	4b96      	ldr	r3, [pc, #600]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dce:	4a95      	ldr	r2, [pc, #596]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d016      	beq.n	8006e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de0:	f7fd fdd2 	bl	8004988 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de8:	f7fd fdce 	bl	8004988 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e162      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfe:	4b89      	ldr	r3, [pc, #548]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0ed      	beq.n	8006de8 <HAL_RCC_OscConfig+0x53c>
 8006e0c:	e015      	b.n	8006e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0e:	f7fd fdbb 	bl	8004988 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e14:	e00a      	b.n	8006e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e16:	f7fd fdb7 	bl	8004988 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e14b      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e2c:	4b7d      	ldr	r3, [pc, #500]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ed      	bne.n	8006e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e40:	4b78      	ldr	r3, [pc, #480]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e44:	4a77      	ldr	r2, [pc, #476]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03c      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01c      	beq.n	8006e9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e60:	4b70      	ldr	r3, [pc, #448]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e66:	4a6f      	ldr	r2, [pc, #444]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fd fd8a 	bl	8004988 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e78:	f7fd fd86 	bl	8004988 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e11c      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e8a:	4b66      	ldr	r3, [pc, #408]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ef      	beq.n	8006e78 <HAL_RCC_OscConfig+0x5cc>
 8006e98:	e01b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e9a:	4b62      	ldr	r3, [pc, #392]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ea0:	4a60      	ldr	r2, [pc, #384]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eaa:	f7fd fd6d 	bl	8004988 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb2:	f7fd fd69 	bl	8004988 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e0ff      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ec4:	4b57      	ldr	r3, [pc, #348]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1ef      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 80f3 	beq.w	80070c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f040 80c9 	bne.w	8007078 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ee6:	4b4f      	ldr	r3, [pc, #316]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f003 0203 	and.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d12c      	bne.n	8006f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	3b01      	subs	r3, #1
 8006f06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d123      	bne.n	8006f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d11b      	bne.n	8006f54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d113      	bne.n	8006f54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d109      	bne.n	8006f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d06b      	beq.n	800702c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d062      	beq.n	8007020 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f5a:	4b32      	ldr	r3, [pc, #200]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e0ac      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f6a:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f76:	f7fd fd07 	bl	8004988 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7e:	f7fd fd03 	bl	8004988 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e099      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f90:	4b24      	ldr	r3, [pc, #144]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f0      	bne.n	8006f7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9c:	4b21      	ldr	r3, [pc, #132]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	4b21      	ldr	r3, [pc, #132]	; (8007028 <HAL_RCC_OscConfig+0x77c>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006fac:	3a01      	subs	r2, #1
 8006fae:	0112      	lsls	r2, r2, #4
 8006fb0:	4311      	orrs	r1, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fb6:	0212      	lsls	r2, r2, #8
 8006fb8:	4311      	orrs	r1, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fbe:	0852      	lsrs	r2, r2, #1
 8006fc0:	3a01      	subs	r2, #1
 8006fc2:	0552      	lsls	r2, r2, #21
 8006fc4:	4311      	orrs	r1, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fca:	0852      	lsrs	r2, r2, #1
 8006fcc:	3a01      	subs	r2, #1
 8006fce:	0652      	lsls	r2, r2, #25
 8006fd0:	4311      	orrs	r1, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fd6:	06d2      	lsls	r2, r2, #27
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	4912      	ldr	r1, [pc, #72]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006fe0:	4b10      	ldr	r3, [pc, #64]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a0c      	ldr	r2, [pc, #48]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8006ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ff8:	f7fd fcc6 	bl	8004988 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007000:	f7fd fcc2 	bl	8004988 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e058      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <HAL_RCC_OscConfig+0x778>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800701e:	e050      	b.n	80070c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e04f      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
 8007024:	40021000 	.word	0x40021000
 8007028:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800702c:	4b27      	ldr	r3, [pc, #156]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d144      	bne.n	80070c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a23      	ldr	r2, [pc, #140]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 800703e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007044:	4b21      	ldr	r3, [pc, #132]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 800704a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800704e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007050:	f7fd fc9a 	bl	8004988 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007058:	f7fd fc96 	bl	8004988 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e02c      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <HAL_RCC_OscConfig+0x7ac>
 8007076:	e024      	b.n	80070c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b0c      	cmp	r3, #12
 800707c:	d01f      	beq.n	80070be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a12      	ldr	r2, [pc, #72]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 8007084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708a:	f7fd fc7d 	bl	8004988 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007092:	f7fd fc79 	bl	8004988 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e00f      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f0      	bne.n	8007092 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	4905      	ldr	r1, [pc, #20]	; (80070cc <HAL_RCC_OscConfig+0x820>)
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <HAL_RCC_OscConfig+0x824>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	60cb      	str	r3, [r1, #12]
 80070bc:	e001      	b.n	80070c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40021000 	.word	0x40021000
 80070d0:	feeefffc 	.word	0xfeeefffc

080070d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0e7      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070e8:	4b75      	ldr	r3, [pc, #468]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d910      	bls.n	8007118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b72      	ldr	r3, [pc, #456]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f023 0207 	bic.w	r2, r3, #7
 80070fe:	4970      	ldr	r1, [pc, #448]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007106:	4b6e      	ldr	r3, [pc, #440]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0cf      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	4b66      	ldr	r3, [pc, #408]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007130:	429a      	cmp	r2, r3
 8007132:	d908      	bls.n	8007146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	4b63      	ldr	r3, [pc, #396]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4960      	ldr	r1, [pc, #384]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04c      	beq.n	80071ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800715a:	4b5a      	ldr	r3, [pc, #360]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d121      	bne.n	80071aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e0a6      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d107      	bne.n	8007182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007172:	4b54      	ldr	r3, [pc, #336]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d115      	bne.n	80071aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e09a      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800718a:	4b4e      	ldr	r3, [pc, #312]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e08e      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800719a:	4b4a      	ldr	r3, [pc, #296]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e086      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071aa:	4b46      	ldr	r3, [pc, #280]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4943      	ldr	r1, [pc, #268]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071bc:	f7fd fbe4 	bl	8004988 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c2:	e00a      	b.n	80071da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c4:	f7fd fbe0 	bl	8004988 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e06e      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071da:	4b3a      	ldr	r3, [pc, #232]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 020c 	and.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1eb      	bne.n	80071c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	4b31      	ldr	r3, [pc, #196]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007204:	429a      	cmp	r2, r3
 8007206:	d208      	bcs.n	800721a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007208:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	492b      	ldr	r1, [pc, #172]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800721a:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d210      	bcs.n	800724a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007228:	4b25      	ldr	r3, [pc, #148]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 0207 	bic.w	r2, r3, #7
 8007230:	4923      	ldr	r1, [pc, #140]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007238:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <HAL_RCC_ClockConfig+0x1ec>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d001      	beq.n	800724a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e036      	b.n	80072b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007256:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	4918      	ldr	r1, [pc, #96]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	4910      	ldr	r1, [pc, #64]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007284:	4313      	orrs	r3, r2
 8007286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007288:	f000 f824 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	490b      	ldr	r1, [pc, #44]	; (80072c8 <HAL_RCC_ClockConfig+0x1f4>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
 80072a4:	4a09      	ldr	r2, [pc, #36]	; (80072cc <HAL_RCC_ClockConfig+0x1f8>)
 80072a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_RCC_ClockConfig+0x1fc>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fd fb1b 	bl	80048e8 <HAL_InitTick>
 80072b2:	4603      	mov	r3, r0
 80072b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40022000 	.word	0x40022000
 80072c4:	40021000 	.word	0x40021000
 80072c8:	08010534 	.word	0x08010534
 80072cc:	20000024 	.word	0x20000024
 80072d0:	20000028 	.word	0x20000028

080072d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b089      	sub	sp, #36	; 0x24
 80072d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 030c 	and.w	r3, r3, #12
 80072ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072ec:	4b3b      	ldr	r3, [pc, #236]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_RCC_GetSysClockFreq+0x34>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b0c      	cmp	r3, #12
 8007300:	d121      	bne.n	8007346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d11e      	bne.n	8007346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007308:	4b34      	ldr	r3, [pc, #208]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d107      	bne.n	8007324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007314:	4b31      	ldr	r3, [pc, #196]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800731a:	0a1b      	lsrs	r3, r3, #8
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e005      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007324:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007330:	4a2b      	ldr	r2, [pc, #172]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10d      	bne.n	800735c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007344:	e00a      	b.n	800735c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d102      	bne.n	8007352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e004      	b.n	800735c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d101      	bne.n	800735c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007358:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800735a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d134      	bne.n	80073cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d003      	beq.n	800737a <HAL_RCC_GetSysClockFreq+0xa6>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d003      	beq.n	8007380 <HAL_RCC_GetSysClockFreq+0xac>
 8007378:	e005      	b.n	8007386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800737a:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800737c:	617b      	str	r3, [r7, #20]
      break;
 800737e:	e005      	b.n	800738c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007382:	617b      	str	r3, [r7, #20]
      break;
 8007384:	e002      	b.n	800738c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	617b      	str	r3, [r7, #20]
      break;
 800738a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800738c:	4b13      	ldr	r3, [pc, #76]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	091b      	lsrs	r3, r3, #4
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	3301      	adds	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800739a:	4b10      	ldr	r3, [pc, #64]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	fb03 f202 	mul.w	r2, r3, r2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <HAL_RCC_GetSysClockFreq+0x108>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	0e5b      	lsrs	r3, r3, #25
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	3301      	adds	r3, #1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80073cc:	69bb      	ldr	r3, [r7, #24]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3724      	adds	r7, #36	; 0x24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40021000 	.word	0x40021000
 80073e0:	0801054c 	.word	0x0801054c
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	007a1200 	.word	0x007a1200

080073ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073f0:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_RCC_GetHCLKFreq+0x14>)
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000024 	.word	0x20000024

08007404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007408:	f7ff fff0 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	4904      	ldr	r1, [pc, #16]	; (800742c <HAL_RCC_GetPCLK1Freq+0x28>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007424:	4618      	mov	r0, r3
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	08010544 	.word	0x08010544

08007430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007434:	f7ff ffda 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007438:	4602      	mov	r2, r0
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	0adb      	lsrs	r3, r3, #11
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	4904      	ldr	r1, [pc, #16]	; (8007458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007446:	5ccb      	ldrb	r3, [r1, r3]
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40021000 	.word	0x40021000
 8007458:	08010544 	.word	0x08010544

0800745c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007468:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800746a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007474:	f7ff f9b6 	bl	80067e4 <HAL_PWREx_GetVoltageRange>
 8007478:	6178      	str	r0, [r7, #20]
 800747a:	e014      	b.n	80074a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800747e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007480:	4a24      	ldr	r2, [pc, #144]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007486:	6593      	str	r3, [r2, #88]	; 0x58
 8007488:	4b22      	ldr	r3, [pc, #136]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007494:	f7ff f9a6 	bl	80067e4 <HAL_PWREx_GetVoltageRange>
 8007498:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d10b      	bne.n	80074c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d919      	bls.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2ba0      	cmp	r3, #160	; 0xa0
 80074b8:	d902      	bls.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074ba:	2302      	movs	r3, #2
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e013      	b.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074c0:	2301      	movs	r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	e010      	b.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b80      	cmp	r3, #128	; 0x80
 80074ca:	d902      	bls.n	80074d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80074cc:	2303      	movs	r3, #3
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e00a      	b.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d102      	bne.n	80074de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074d8:	2302      	movs	r3, #2
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	e004      	b.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b70      	cmp	r3, #112	; 0x70
 80074e2:	d101      	bne.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074e4:	2301      	movs	r3, #1
 80074e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f023 0207 	bic.w	r2, r3, #7
 80074f0:	4909      	ldr	r1, [pc, #36]	; (8007518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	d001      	beq.n	800750a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40021000 	.word	0x40021000
 8007518:	40022000 	.word	0x40022000

0800751c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007524:	2300      	movs	r3, #0
 8007526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007528:	2300      	movs	r3, #0
 800752a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007534:	2b00      	cmp	r3, #0
 8007536:	d031      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007540:	d01a      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007546:	d814      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800754c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007550:	d10f      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007552:	4b5d      	ldr	r3, [pc, #372]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	4a5c      	ldr	r2, [pc, #368]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800755e:	e00c      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa44 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007570:	e003      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	74fb      	strb	r3, [r7, #19]
      break;
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007580:	4b51      	ldr	r3, [pc, #324]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758e:	494e      	ldr	r1, [pc, #312]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007596:	e001      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 809e 	beq.w	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075aa:	2300      	movs	r3, #0
 80075ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075ae:	4b46      	ldr	r3, [pc, #280]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c4:	4b40      	ldr	r3, [pc, #256]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6593      	str	r3, [r2, #88]	; 0x58
 80075d0:	4b3d      	ldr	r3, [pc, #244]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075dc:	2301      	movs	r3, #1
 80075de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e0:	4b3a      	ldr	r3, [pc, #232]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a39      	ldr	r2, [pc, #228]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075ec:	f7fd f9cc 	bl	8004988 <HAL_GetTick>
 80075f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075f2:	e009      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f4:	f7fd f9c8 	bl	8004988 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d902      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	74fb      	strb	r3, [r7, #19]
        break;
 8007606:	e005      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007608:	4b30      	ldr	r3, [pc, #192]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0ef      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007614:	7cfb      	ldrb	r3, [r7, #19]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d15a      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800761a:	4b2b      	ldr	r3, [pc, #172]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007624:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01e      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	429a      	cmp	r2, r3
 8007634:	d019      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007640:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007642:	4b21      	ldr	r3, [pc, #132]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800764a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007652:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800765a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800765e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d016      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007674:	f7fd f988 	bl	8004988 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800767a:	e00b      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767c:	f7fd f984 	bl	8004988 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d902      	bls.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	74fb      	strb	r3, [r7, #19]
            break;
 8007692:	e006      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0ec      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b6:	4904      	ldr	r1, [pc, #16]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076be:	e009      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076c0:	7cfb      	ldrb	r3, [r7, #19]
 80076c2:	74bb      	strb	r3, [r7, #18]
 80076c4:	e006      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80076c6:	bf00      	nop
 80076c8:	40021000 	.word	0x40021000
 80076cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076d4:	7c7b      	ldrb	r3, [r7, #17]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d105      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076da:	4b9e      	ldr	r3, [pc, #632]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	4a9d      	ldr	r2, [pc, #628]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076f2:	4b98      	ldr	r3, [pc, #608]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	f023 0203 	bic.w	r2, r3, #3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	4994      	ldr	r1, [pc, #592]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007714:	4b8f      	ldr	r3, [pc, #572]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f023 020c 	bic.w	r2, r3, #12
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	498c      	ldr	r1, [pc, #560]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007736:	4b87      	ldr	r3, [pc, #540]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	4983      	ldr	r1, [pc, #524]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007758:	4b7e      	ldr	r3, [pc, #504]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	497b      	ldr	r1, [pc, #492]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800777a:	4b76      	ldr	r3, [pc, #472]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	4972      	ldr	r1, [pc, #456]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800779c:	4b6d      	ldr	r3, [pc, #436]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	496a      	ldr	r1, [pc, #424]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077be:	4b65      	ldr	r3, [pc, #404]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077cc:	4961      	ldr	r1, [pc, #388]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077e0:	4b5c      	ldr	r3, [pc, #368]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	4959      	ldr	r1, [pc, #356]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007802:	4b54      	ldr	r3, [pc, #336]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	4950      	ldr	r1, [pc, #320]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007824:	4b4b      	ldr	r3, [pc, #300]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	4948      	ldr	r1, [pc, #288]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007846:	4b43      	ldr	r3, [pc, #268]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800784c:	f023 0203 	bic.w	r2, r3, #3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	493f      	ldr	r1, [pc, #252]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d028      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007868:	4b3a      	ldr	r3, [pc, #232]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007876:	4937      	ldr	r1, [pc, #220]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007886:	d106      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007888:	4b32      	ldr	r3, [pc, #200]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4a31      	ldr	r2, [pc, #196]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800788e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007892:	60d3      	str	r3, [r2, #12]
 8007894:	e011      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800789e:	d10c      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	2101      	movs	r1, #1
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f8a4 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80078b6:	7cfb      	ldrb	r3, [r7, #19]
 80078b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d028      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	491f      	ldr	r1, [pc, #124]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e4:	d106      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e6:	4b1b      	ldr	r3, [pc, #108]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078f0:	60d3      	str	r3, [r2, #12]
 80078f2:	e011      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fc:	d10c      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3304      	adds	r3, #4
 8007902:	2101      	movs	r1, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f875 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800790e:	7cfb      	ldrb	r3, [r7, #19]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007914:	7cfb      	ldrb	r3, [r7, #19]
 8007916:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	4908      	ldr	r1, [pc, #32]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007942:	d109      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007944:	4b03      	ldr	r3, [pc, #12]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4a02      	ldr	r2, [pc, #8]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800794a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800794e:	60d3      	str	r3, [r2, #12]
 8007950:	e014      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8007952:	bf00      	nop
 8007954:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007960:	d10c      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	2101      	movs	r1, #1
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f843 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007972:	7cfb      	ldrb	r3, [r7, #19]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007978:	7cfb      	ldrb	r3, [r7, #19]
 800797a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01c      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007988:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800798a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007996:	4916      	ldr	r1, [pc, #88]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a6:	d10c      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3304      	adds	r3, #4
 80079ac:	2102      	movs	r1, #2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f820 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079b8:	7cfb      	ldrb	r3, [r7, #19]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079dc:	4904      	ldr	r1, [pc, #16]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40021000 	.word	0x40021000

080079f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a02:	4b74      	ldr	r3, [pc, #464]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a0e:	4b71      	ldr	r3, [pc, #452]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f003 0203 	and.w	r2, r3, #3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d10d      	bne.n	8007a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
       ||
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a26:	4b6b      	ldr	r3, [pc, #428]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	091b      	lsrs	r3, r3, #4
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
       ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d047      	beq.n	8007aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
 8007a3e:	e044      	b.n	8007aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d018      	beq.n	8007a7a <RCCEx_PLLSAI1_Config+0x86>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d825      	bhi.n	8007a98 <RCCEx_PLLSAI1_Config+0xa4>
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d002      	beq.n	8007a56 <RCCEx_PLLSAI1_Config+0x62>
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d009      	beq.n	8007a68 <RCCEx_PLLSAI1_Config+0x74>
 8007a54:	e020      	b.n	8007a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a56:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d11d      	bne.n	8007a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a66:	e01a      	b.n	8007a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a68:	4b5a      	ldr	r3, [pc, #360]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a78:	e013      	b.n	8007aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a7a:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10f      	bne.n	8007aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a86:	4b53      	ldr	r3, [pc, #332]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a96:	e006      	b.n	8007aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9c:	e004      	b.n	8007aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e002      	b.n	8007aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10d      	bne.n	8007aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aae:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	4943      	ldr	r1, [pc, #268]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d17c      	bne.n	8007bca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ad0:	4b40      	ldr	r3, [pc, #256]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3f      	ldr	r2, [pc, #252]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007adc:	f7fc ff54 	bl	8004988 <HAL_GetTick>
 8007ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ae2:	e009      	b.n	8007af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ae4:	f7fc ff50 	bl	8004988 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d902      	bls.n	8007af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	73fb      	strb	r3, [r7, #15]
        break;
 8007af6:	e005      	b.n	8007b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007af8:	4b36      	ldr	r3, [pc, #216]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1ef      	bne.n	8007ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d15f      	bne.n	8007bca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d110      	bne.n	8007b32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b10:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6892      	ldr	r2, [r2, #8]
 8007b20:	0211      	lsls	r1, r2, #8
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	68d2      	ldr	r2, [r2, #12]
 8007b26:	06d2      	lsls	r2, r2, #27
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	492a      	ldr	r1, [pc, #168]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	610b      	str	r3, [r1, #16]
 8007b30:	e027      	b.n	8007b82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d112      	bne.n	8007b5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b38:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6892      	ldr	r2, [r2, #8]
 8007b48:	0211      	lsls	r1, r2, #8
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6912      	ldr	r2, [r2, #16]
 8007b4e:	0852      	lsrs	r2, r2, #1
 8007b50:	3a01      	subs	r2, #1
 8007b52:	0552      	lsls	r2, r2, #21
 8007b54:	430a      	orrs	r2, r1
 8007b56:	491f      	ldr	r1, [pc, #124]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	610b      	str	r3, [r1, #16]
 8007b5c:	e011      	b.n	8007b82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6892      	ldr	r2, [r2, #8]
 8007b6e:	0211      	lsls	r1, r2, #8
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6952      	ldr	r2, [r2, #20]
 8007b74:	0852      	lsrs	r2, r2, #1
 8007b76:	3a01      	subs	r2, #1
 8007b78:	0652      	lsls	r2, r2, #25
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	4915      	ldr	r1, [pc, #84]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8e:	f7fc fefb 	bl	8004988 <HAL_GetTick>
 8007b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b94:	e009      	b.n	8007baa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b96:	f7fc fef7 	bl	8004988 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d902      	bls.n	8007baa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba8:	e005      	b.n	8007bb6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0ef      	beq.n	8007b96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	4903      	ldr	r1, [pc, #12]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40021000 	.word	0x40021000

08007bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e095      	b.n	8007d16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d108      	bne.n	8007c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfa:	d009      	beq.n	8007c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	61da      	str	r2, [r3, #28]
 8007c02:	e005      	b.n	8007c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fc fbfe 	bl	800442c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c50:	d902      	bls.n	8007c58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	e002      	b.n	8007c5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c66:	d007      	beq.n	8007c78 <HAL_SPI_Init+0xa0>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c70:	d002      	beq.n	8007c78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	ea42 0103 	orr.w	r1, r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	0c1b      	lsrs	r3, r3, #16
 8007cd4:	f003 0204 	and.w	r2, r3, #4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007cf4:	ea42 0103 	orr.w	r1, r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b088      	sub	sp, #32
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_SPI_Transmit+0x22>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e158      	b.n	8007ff2 <HAL_SPI_Transmit+0x2d4>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d48:	f7fc fe1e 	bl	8004988 <HAL_GetTick>
 8007d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d002      	beq.n	8007d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
 8007d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d62:	e13d      	b.n	8007fe0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_SPI_Transmit+0x52>
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d74:	e134      	b.n	8007fe0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	d10f      	bne.n	8007de2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d007      	beq.n	8007e00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e08:	d94b      	bls.n	8007ea2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_SPI_Transmit+0xfa>
 8007e12:	8afb      	ldrh	r3, [r7, #22]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d13e      	bne.n	8007e96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	1c9a      	adds	r2, r3, #2
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e3c:	e02b      	b.n	8007e96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d112      	bne.n	8007e72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e70:	e011      	b.n	8007e96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e72:	f7fc fd89 	bl	8004988 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d803      	bhi.n	8007e8a <HAL_SPI_Transmit+0x16c>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e88:	d102      	bne.n	8007e90 <HAL_SPI_Transmit+0x172>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e94:	e0a4      	b.n	8007fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ce      	bne.n	8007e3e <HAL_SPI_Transmit+0x120>
 8007ea0:	e07c      	b.n	8007f9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <HAL_SPI_Transmit+0x192>
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d170      	bne.n	8007f92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d912      	bls.n	8007ee0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	881a      	ldrh	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b02      	subs	r3, #2
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ede:	e058      	b.n	8007f92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007f06:	e044      	b.n	8007f92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d12b      	bne.n	8007f6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d912      	bls.n	8007f46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	881a      	ldrh	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	1c9a      	adds	r2, r3, #2
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3b02      	subs	r3, #2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f44:	e025      	b.n	8007f92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f6c:	e011      	b.n	8007f92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f6e:	f7fc fd0b 	bl	8004988 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d803      	bhi.n	8007f86 <HAL_SPI_Transmit+0x268>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d102      	bne.n	8007f8c <HAL_SPI_Transmit+0x26e>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f90:	e026      	b.n	8007fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1b5      	bne.n	8007f08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fce3 	bl	800896c <SPI_EndRxTxTransaction>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e000      	b.n	8007fe0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b088      	sub	sp, #32
 8007ffe:	af02      	add	r7, sp, #8
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008016:	d112      	bne.n	800803e <HAL_SPI_Receive+0x44>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10e      	bne.n	800803e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2204      	movs	r2, #4
 8008024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f910 	bl	800825a <HAL_SPI_TransmitReceive>
 800803a:	4603      	mov	r3, r0
 800803c:	e109      	b.n	8008252 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_SPI_Receive+0x52>
 8008048:	2302      	movs	r3, #2
 800804a:	e102      	b.n	8008252 <HAL_SPI_Receive+0x258>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008054:	f7fc fc98 	bl	8004988 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b01      	cmp	r3, #1
 8008064:	d002      	beq.n	800806c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008066:	2302      	movs	r3, #2
 8008068:	75fb      	strb	r3, [r7, #23]
    goto error;
 800806a:	e0e9      	b.n	8008240 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <HAL_SPI_Receive+0x7e>
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800807c:	e0e0      	b.n	8008240 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2204      	movs	r2, #4
 8008082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080c8:	d908      	bls.n	80080dc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	e007      	b.n	80080ec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	d10f      	bne.n	8008116 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008114:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d007      	beq.n	8008134 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008132:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800813c:	d867      	bhi.n	800820e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800813e:	e030      	b.n	80081a2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	d117      	bne.n	800817e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f103 020c 	add.w	r2, r3, #12
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	7812      	ldrb	r2, [r2, #0]
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008170:	b29b      	uxth	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800817c:	e011      	b.n	80081a2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800817e:	f7fc fc03 	bl	8004988 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d803      	bhi.n	8008196 <HAL_SPI_Receive+0x19c>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008194:	d102      	bne.n	800819c <HAL_SPI_Receive+0x1a2>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081a0:	e04e      	b.n	8008240 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1c8      	bne.n	8008140 <HAL_SPI_Receive+0x146>
 80081ae:	e034      	b.n	800821a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d115      	bne.n	80081ea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	b292      	uxth	r2, r2
 80081ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	1c9a      	adds	r2, r3, #2
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081dc:	b29b      	uxth	r3, r3
 80081de:	3b01      	subs	r3, #1
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80081e8:	e011      	b.n	800820e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ea:	f7fc fbcd 	bl	8004988 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d803      	bhi.n	8008202 <HAL_SPI_Receive+0x208>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008200:	d102      	bne.n	8008208 <HAL_SPI_Receive+0x20e>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800820c:	e018      	b.n	8008240 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1ca      	bne.n	80081b0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fb4c 	bl	80088bc <SPI_EndRxTransaction>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
 800823c:	e000      	b.n	8008240 <HAL_SPI_Receive+0x246>
  }

error :
 800823e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b08a      	sub	sp, #40	; 0x28
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008268:	2301      	movs	r3, #1
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_SPI_TransmitReceive+0x26>
 800827c:	2302      	movs	r3, #2
 800827e:	e1fb      	b.n	8008678 <HAL_SPI_TransmitReceive+0x41e>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008288:	f7fc fb7e 	bl	8004988 <HAL_GetTick>
 800828c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008294:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800829c:	887b      	ldrh	r3, [r7, #2]
 800829e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80082a0:	887b      	ldrh	r3, [r7, #2]
 80082a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082a4:	7efb      	ldrb	r3, [r7, #27]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d00e      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x6e>
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b0:	d106      	bne.n	80082c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <HAL_SPI_TransmitReceive+0x66>
 80082ba:	7efb      	ldrb	r3, [r7, #27]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d003      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
 80082c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80082c6:	e1cd      	b.n	8008664 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_SPI_TransmitReceive+0x80>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <HAL_SPI_TransmitReceive+0x80>
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80082e0:	e1c0      	b.n	8008664 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d003      	beq.n	80082f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2205      	movs	r2, #5
 80082f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	887a      	ldrh	r2, [r7, #2]
 8008306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	887a      	ldrh	r2, [r7, #2]
 800830e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	887a      	ldrh	r2, [r7, #2]
 800831c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	887a      	ldrh	r2, [r7, #2]
 8008322:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008338:	d802      	bhi.n	8008340 <HAL_SPI_TransmitReceive+0xe6>
 800833a:	8a3b      	ldrh	r3, [r7, #16]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d908      	bls.n	8008352 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800834e:	605a      	str	r2, [r3, #4]
 8008350:	e007      	b.n	8008362 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008360:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d007      	beq.n	8008380 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800837e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008388:	d97c      	bls.n	8008484 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_SPI_TransmitReceive+0x13e>
 8008392:	8a7b      	ldrh	r3, [r7, #18]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d169      	bne.n	800846c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	881a      	ldrh	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	1c9a      	adds	r2, r3, #2
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083bc:	e056      	b.n	800846c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d11b      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1aa>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <HAL_SPI_TransmitReceive+0x1aa>
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d113      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	881a      	ldrh	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	1c9a      	adds	r2, r3, #2
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d11c      	bne.n	800844c <HAL_SPI_TransmitReceive+0x1f2>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008418:	b29b      	uxth	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d016      	beq.n	800844c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	b292      	uxth	r2, r2
 800842a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	1c9a      	adds	r2, r3, #2
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008448:	2301      	movs	r3, #1
 800844a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800844c:	f7fc fa9c 	bl	8004988 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008458:	429a      	cmp	r2, r3
 800845a:	d807      	bhi.n	800846c <HAL_SPI_TransmitReceive+0x212>
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d003      	beq.n	800846c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800846a:	e0fb      	b.n	8008664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1a3      	bne.n	80083be <HAL_SPI_TransmitReceive+0x164>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d19d      	bne.n	80083be <HAL_SPI_TransmitReceive+0x164>
 8008482:	e0df      	b.n	8008644 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_SPI_TransmitReceive+0x23a>
 800848c:	8a7b      	ldrh	r3, [r7, #18]
 800848e:	2b01      	cmp	r3, #1
 8008490:	f040 80cb 	bne.w	800862a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b01      	cmp	r3, #1
 800849c:	d912      	bls.n	80084c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	881a      	ldrh	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	1c9a      	adds	r2, r3, #2
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b02      	subs	r3, #2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084c2:	e0b2      	b.n	800862a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ea:	e09e      	b.n	800862a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d134      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x30a>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d02f      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x30a>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b01      	cmp	r3, #1
 8008508:	d12c      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850e:	b29b      	uxth	r3, r3
 8008510:	2b01      	cmp	r3, #1
 8008512:	d912      	bls.n	800853a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	881a      	ldrh	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	1c9a      	adds	r2, r3, #2
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b02      	subs	r3, #2
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008538:	e012      	b.n	8008560 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	330c      	adds	r3, #12
 8008544:	7812      	ldrb	r2, [r2, #0]
 8008546:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008556:	b29b      	uxth	r3, r3
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b01      	cmp	r3, #1
 8008570:	d148      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x3aa>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d042      	beq.n	8008604 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b01      	cmp	r3, #1
 8008588:	d923      	bls.n	80085d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	b292      	uxth	r2, r2
 8008596:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	1c9a      	adds	r2, r3, #2
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b02      	subs	r3, #2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d81f      	bhi.n	8008600 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	e016      	b.n	8008600 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f103 020c 	add.w	r2, r3, #12
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	b2d2      	uxtb	r2, r2
 80085e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008604:	f7fc f9c0 	bl	8004988 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008610:	429a      	cmp	r2, r3
 8008612:	d803      	bhi.n	800861c <HAL_SPI_TransmitReceive+0x3c2>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d102      	bne.n	8008622 <HAL_SPI_TransmitReceive+0x3c8>
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008628:	e01c      	b.n	8008664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	f47f af5b 	bne.w	80084ec <HAL_SPI_TransmitReceive+0x292>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	f47f af54 	bne.w	80084ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f98f 	bl	800896c <SPI_EndRxTxTransaction>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d006      	beq.n	8008662 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2220      	movs	r2, #32
 800865e:	661a      	str	r2, [r3, #96]	; 0x60
 8008660:	e000      	b.n	8008664 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008678:	4618      	mov	r0, r3
 800867a:	3728      	adds	r7, #40	; 0x28
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	4613      	mov	r3, r2
 800868e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008690:	f7fc f97a 	bl	8004988 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	4413      	add	r3, r2
 800869e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086a0:	f7fc f972 	bl	8004988 <HAL_GetTick>
 80086a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086a6:	4b39      	ldr	r3, [pc, #228]	; (800878c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	015b      	lsls	r3, r3, #5
 80086ac:	0d1b      	lsrs	r3, r3, #20
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	fb02 f303 	mul.w	r3, r2, r3
 80086b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086b6:	e054      	b.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d050      	beq.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c0:	f7fc f962 	bl	8004988 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d902      	bls.n	80086d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d13d      	bne.n	8008752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ee:	d111      	bne.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f8:	d004      	beq.n	8008704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008702:	d107      	bne.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871c:	d10f      	bne.n	800873e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800873c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e017      	b.n	8008782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	3b01      	subs	r3, #1
 8008760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4013      	ands	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	bf0c      	ite	eq
 8008772:	2301      	moveq	r3, #1
 8008774:	2300      	movne	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	429a      	cmp	r2, r3
 800877e:	d19b      	bne.n	80086b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000024 	.word	0x20000024

08008790 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087a2:	f7fc f8f1 	bl	8004988 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	4413      	add	r3, r2
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80087b2:	f7fc f8e9 	bl	8004988 <HAL_GetTick>
 80087b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	330c      	adds	r3, #12
 80087be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087c0:	4b3d      	ldr	r3, [pc, #244]	; (80088b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	00da      	lsls	r2, r3, #3
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	0d1b      	lsrs	r3, r3, #20
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087d8:	e060      	b.n	800889c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087e0:	d107      	bne.n	80087f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d050      	beq.n	800889c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087fa:	f7fc f8c5 	bl	8004988 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008806:	429a      	cmp	r2, r3
 8008808:	d902      	bls.n	8008810 <SPI_WaitFifoStateUntilTimeout+0x80>
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d13d      	bne.n	800888c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800881e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008828:	d111      	bne.n	800884e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008832:	d004      	beq.n	800883e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883c:	d107      	bne.n	800884e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008856:	d10f      	bne.n	8008878 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008876:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e010      	b.n	80088ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	3b01      	subs	r3, #1
 800889a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4013      	ands	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d196      	bne.n	80087da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3728      	adds	r7, #40	; 0x28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000024 	.word	0x20000024

080088bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088d0:	d111      	bne.n	80088f6 <SPI_EndRxTransaction+0x3a>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088da:	d004      	beq.n	80088e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088e4:	d107      	bne.n	80088f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2180      	movs	r1, #128	; 0x80
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff febd 	bl	8008680 <SPI_WaitFlagStateUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008910:	f043 0220 	orr.w	r2, r3, #32
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e023      	b.n	8008964 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008924:	d11d      	bne.n	8008962 <SPI_EndRxTransaction+0xa6>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892e:	d004      	beq.n	800893a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008938:	d113      	bne.n	8008962 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff ff22 	bl	8008790 <SPI_WaitFifoStateUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e000      	b.n	8008964 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff ff03 	bl	8008790 <SPI_WaitFifoStateUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008994:	f043 0220 	orr.w	r2, r3, #32
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e027      	b.n	80089f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2200      	movs	r2, #0
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fe68 	bl	8008680 <SPI_WaitFlagStateUntilTimeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ba:	f043 0220 	orr.w	r2, r3, #32
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e014      	b.n	80089f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff fedc 	bl	8008790 <SPI_WaitFifoStateUntilTimeout>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e2:	f043 0220 	orr.w	r2, r3, #32
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e000      	b.n	80089f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e04e      	b.n	8008aa8 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d114      	bne.n	8008a3c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbe0 	bl	80091e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a20      	ldr	r2, [pc, #128]	; (8008ab0 <HAL_UART_Init+0xb8>)
 8008a2e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2224      	movs	r2, #36	; 0x24
 8008a40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0201 	bic.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc0a 	bl	800926c <UART_SetConfig>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e022      	b.n	8008aa8 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fe84 	bl	8009778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 ff0b 	bl	80098bc <UART_CheckIdleState>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	080044b1 	.word	0x080044b1

08008ab4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d142      	bne.n	8008b50 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_UART_Receive_IT+0x22>
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e03b      	b.n	8008b52 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_UART_Receive_IT+0x34>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e034      	b.n	8008b52 <HAL_UART_Receive_IT+0x9e>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <HAL_UART_Receive_IT+0xa8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01f      	beq.n	8008b40 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d018      	beq.n	8008b40 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	623b      	str	r3, [r7, #32]
 8008b2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	69f9      	ldr	r1, [r7, #28]
 8008b32:	6a3a      	ldr	r2, [r7, #32]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	461a      	mov	r2, r3
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 ffc6 	bl	8009ad8 <UART_Start_Receive_IT>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	e000      	b.n	8008b52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b50:	2302      	movs	r3, #2
  }
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3728      	adds	r7, #40	; 0x28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40008000 	.word	0x40008000

08008b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b0ba      	sub	sp, #232	; 0xe8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b8e:	4013      	ands	r3, r2
 8008b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d115      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 82b2 	beq.w	8009122 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
      }
      return;
 8008bc6:	e2ac      	b.n	8009122 <HAL_UART_IRQHandler+0x5c2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 811d 	beq.w	8008e0c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008be2:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_UART_IRQHandler+0x2a4>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8110 	beq.w	8008e0c <HAL_UART_IRQHandler+0x2ac>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d011      	beq.n	8008c1c <HAL_UART_IRQHandler+0xbc>
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d011      	beq.n	8008c4c <HAL_UART_IRQHandler+0xec>
 8008c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c42:	f043 0204 	orr.w	r2, r3, #4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d011      	beq.n	8008c7c <HAL_UART_IRQHandler+0x11c>
 8008c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c72:	f043 0202 	orr.w	r2, r3, #2
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cae:	f043 0208 	orr.w	r2, r3, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d012      	beq.n	8008cea <HAL_UART_IRQHandler+0x18a>
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00c      	beq.n	8008cea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ce0:	f043 0220 	orr.w	r2, r3, #32
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8218 	beq.w	8009126 <HAL_UART_IRQHandler+0x5c6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00d      	beq.n	8008d1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b40      	cmp	r3, #64	; 0x40
 8008d34:	d005      	beq.n	8008d42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d053      	beq.n	8008dea <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 ff92 	bl	8009c6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d143      	bne.n	8008dde <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1d9      	bne.n	8008d56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d013      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <HAL_UART_IRQHandler+0x2a8>)
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd fa4a 	bl	8006250 <HAL_DMA_Abort_IT>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01d      	beq.n	8008dfe <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	e015      	b.n	8008dfe <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ddc:	e00f      	b.n	8008dfe <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de8:	e009      	b.n	8008dfe <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008dfc:	e193      	b.n	8009126 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dfe:	bf00      	nop
    return;
 8008e00:	e191      	b.n	8009126 <HAL_UART_IRQHandler+0x5c6>
 8008e02:	bf00      	nop
 8008e04:	04000120 	.word	0x04000120
 8008e08:	08009d33 	.word	0x08009d33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	f040 814a 	bne.w	80090aa <HAL_UART_IRQHandler+0x54a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1a:	f003 0310 	and.w	r3, r3, #16
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8143 	beq.w	80090aa <HAL_UART_IRQHandler+0x54a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 813c 	beq.w	80090aa <HAL_UART_IRQHandler+0x54a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2210      	movs	r2, #16
 8008e38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b40      	cmp	r3, #64	; 0x40
 8008e46:	f040 80b6 	bne.w	8008fb6 <HAL_UART_IRQHandler+0x456>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8165 	beq.w	800912a <HAL_UART_IRQHandler+0x5ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	f080 815d 	bcs.w	800912a <HAL_UART_IRQHandler+0x5ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f040 8085 	bne.w	8008f96 <HAL_UART_IRQHandler+0x436>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008eba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1da      	bne.n	8008e8c <HAL_UART_IRQHandler+0x32c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008efe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e1      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x376>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3308      	adds	r3, #8
 8008f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e3      	bne.n	8008f12 <HAL_UART_IRQHandler+0x3b2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f78:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e4      	bne.n	8008f56 <HAL_UART_IRQHandler+0x3f6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fd f91f 	bl	80061d4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	1a8a      	subs	r2, r1, r2
 8008fac:	b292      	uxth	r2, r2
 8008fae:	4611      	mov	r1, r2
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fb4:	e0b9      	b.n	800912a <HAL_UART_IRQHandler+0x5ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80ab 	beq.w	800912e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8008fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80a6 	beq.w	800912e <HAL_UART_IRQHandler+0x5ce>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009004:	647b      	str	r3, [r7, #68]	; 0x44
 8009006:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800900a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e4      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x482>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	623b      	str	r3, [r7, #32]
   return(result);
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800903c:	633a      	str	r2, [r7, #48]	; 0x30
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e3      	bne.n	8009018 <HAL_UART_IRQHandler+0x4b8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0310 	bic.w	r3, r3, #16
 8009076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	617b      	str	r3, [r7, #20]
   return(result);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e4      	bne.n	8009062 <HAL_UART_IRQHandler+0x502>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800909e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80090a2:	4611      	mov	r1, r2
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090a8:	e041      	b.n	800912e <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d010      	beq.n	80090d8 <HAL_UART_IRQHandler+0x578>
 80090b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_UART_IRQHandler+0x578>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090ca:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090d6:	e02d      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00e      	beq.n	8009102 <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80090e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <HAL_UART_IRQHandler+0x5a2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01c      	beq.n	8009132 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
    }
    return;
 8009100:	e017      	b.n	8009132 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910a:	2b00      	cmp	r3, #0
 800910c:	d012      	beq.n	8009134 <HAL_UART_IRQHandler+0x5d4>
 800910e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00c      	beq.n	8009134 <HAL_UART_IRQHandler+0x5d4>
  {
    UART_EndTransmit_IT(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fe21 	bl	8009d62 <UART_EndTransmit_IT>
    return;
 8009120:	e008      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
      return;
 8009122:	bf00      	nop
 8009124:	e006      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
    return;
 8009126:	bf00      	nop
 8009128:	e004      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
      return;
 800912a:	bf00      	nop
 800912c:	e002      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
      return;
 800912e:	bf00      	nop
 8009130:	e000      	b.n	8009134 <HAL_UART_IRQHandler+0x5d4>
    return;
 8009132:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009134:	37e8      	adds	r7, #232	; 0xe8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop

0800913c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a16      	ldr	r2, [pc, #88]	; (8009244 <UART_InitCallbacksToDefault+0x64>)
 80091ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a15      	ldr	r2, [pc, #84]	; (8009248 <UART_InitCallbacksToDefault+0x68>)
 80091f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a14      	ldr	r2, [pc, #80]	; (800924c <UART_InitCallbacksToDefault+0x6c>)
 80091fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a13      	ldr	r2, [pc, #76]	; (8009250 <UART_InitCallbacksToDefault+0x70>)
 8009204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a12      	ldr	r2, [pc, #72]	; (8009254 <UART_InitCallbacksToDefault+0x74>)
 800920c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a11      	ldr	r2, [pc, #68]	; (8009258 <UART_InitCallbacksToDefault+0x78>)
 8009214:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a10      	ldr	r2, [pc, #64]	; (800925c <UART_InitCallbacksToDefault+0x7c>)
 800921c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a0f      	ldr	r2, [pc, #60]	; (8009260 <UART_InitCallbacksToDefault+0x80>)
 8009224:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a0e      	ldr	r2, [pc, #56]	; (8009264 <UART_InitCallbacksToDefault+0x84>)
 800922c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_FIFOEN)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
#endif /* USART_CR1_FIFOEN */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a0d      	ldr	r2, [pc, #52]	; (8009268 <UART_InitCallbacksToDefault+0x88>)
 8009234:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	08009151 	.word	0x08009151
 8009248:	0800913d 	.word	0x0800913d
 800924c:	08009165 	.word	0x08009165
 8009250:	08003b55 	.word	0x08003b55
 8009254:	08009179 	.word	0x08009179
 8009258:	0800918d 	.word	0x0800918d
 800925c:	080091a1 	.word	0x080091a1
 8009260:	080091b5 	.word	0x080091b5
 8009264:	0800a08b 	.word	0x0800a08b
 8009268:	080091c9 	.word	0x080091c9

0800926c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800926c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009270:	b08a      	sub	sp, #40	; 0x28
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	431a      	orrs	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	431a      	orrs	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	4313      	orrs	r3, r2
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4ba5      	ldr	r3, [pc, #660]	; (8009530 <UART_SetConfig+0x2c4>)
 800929c:	4013      	ands	r3, r2
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	6812      	ldr	r2, [r2, #0]
 80092a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a4:	430b      	orrs	r3, r1
 80092a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a9a      	ldr	r2, [pc, #616]	; (8009534 <UART_SetConfig+0x2c8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d004      	beq.n	80092d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d4:	4313      	orrs	r3, r2
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e8:	430a      	orrs	r2, r1
 80092ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a91      	ldr	r2, [pc, #580]	; (8009538 <UART_SetConfig+0x2cc>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d126      	bne.n	8009344 <UART_SetConfig+0xd8>
 80092f6:	4b91      	ldr	r3, [pc, #580]	; (800953c <UART_SetConfig+0x2d0>)
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b03      	cmp	r3, #3
 8009302:	d81b      	bhi.n	800933c <UART_SetConfig+0xd0>
 8009304:	a201      	add	r2, pc, #4	; (adr r2, 800930c <UART_SetConfig+0xa0>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	0800931d 	.word	0x0800931d
 8009310:	0800932d 	.word	0x0800932d
 8009314:	08009325 	.word	0x08009325
 8009318:	08009335 	.word	0x08009335
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009322:	e0d6      	b.n	80094d2 <UART_SetConfig+0x266>
 8009324:	2302      	movs	r3, #2
 8009326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932a:	e0d2      	b.n	80094d2 <UART_SetConfig+0x266>
 800932c:	2304      	movs	r3, #4
 800932e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009332:	e0ce      	b.n	80094d2 <UART_SetConfig+0x266>
 8009334:	2308      	movs	r3, #8
 8009336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800933a:	e0ca      	b.n	80094d2 <UART_SetConfig+0x266>
 800933c:	2310      	movs	r3, #16
 800933e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009342:	e0c6      	b.n	80094d2 <UART_SetConfig+0x266>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a7d      	ldr	r2, [pc, #500]	; (8009540 <UART_SetConfig+0x2d4>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d138      	bne.n	80093c0 <UART_SetConfig+0x154>
 800934e:	4b7b      	ldr	r3, [pc, #492]	; (800953c <UART_SetConfig+0x2d0>)
 8009350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009354:	f003 030c 	and.w	r3, r3, #12
 8009358:	2b0c      	cmp	r3, #12
 800935a:	d82d      	bhi.n	80093b8 <UART_SetConfig+0x14c>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <UART_SetConfig+0xf8>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009399 	.word	0x08009399
 8009368:	080093b9 	.word	0x080093b9
 800936c:	080093b9 	.word	0x080093b9
 8009370:	080093b9 	.word	0x080093b9
 8009374:	080093a9 	.word	0x080093a9
 8009378:	080093b9 	.word	0x080093b9
 800937c:	080093b9 	.word	0x080093b9
 8009380:	080093b9 	.word	0x080093b9
 8009384:	080093a1 	.word	0x080093a1
 8009388:	080093b9 	.word	0x080093b9
 800938c:	080093b9 	.word	0x080093b9
 8009390:	080093b9 	.word	0x080093b9
 8009394:	080093b1 	.word	0x080093b1
 8009398:	2300      	movs	r3, #0
 800939a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800939e:	e098      	b.n	80094d2 <UART_SetConfig+0x266>
 80093a0:	2302      	movs	r3, #2
 80093a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093a6:	e094      	b.n	80094d2 <UART_SetConfig+0x266>
 80093a8:	2304      	movs	r3, #4
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093ae:	e090      	b.n	80094d2 <UART_SetConfig+0x266>
 80093b0:	2308      	movs	r3, #8
 80093b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093b6:	e08c      	b.n	80094d2 <UART_SetConfig+0x266>
 80093b8:	2310      	movs	r3, #16
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093be:	e088      	b.n	80094d2 <UART_SetConfig+0x266>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a5f      	ldr	r2, [pc, #380]	; (8009544 <UART_SetConfig+0x2d8>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d125      	bne.n	8009416 <UART_SetConfig+0x1aa>
 80093ca:	4b5c      	ldr	r3, [pc, #368]	; (800953c <UART_SetConfig+0x2d0>)
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093d4:	2b30      	cmp	r3, #48	; 0x30
 80093d6:	d016      	beq.n	8009406 <UART_SetConfig+0x19a>
 80093d8:	2b30      	cmp	r3, #48	; 0x30
 80093da:	d818      	bhi.n	800940e <UART_SetConfig+0x1a2>
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d00a      	beq.n	80093f6 <UART_SetConfig+0x18a>
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d814      	bhi.n	800940e <UART_SetConfig+0x1a2>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <UART_SetConfig+0x182>
 80093e8:	2b10      	cmp	r3, #16
 80093ea:	d008      	beq.n	80093fe <UART_SetConfig+0x192>
 80093ec:	e00f      	b.n	800940e <UART_SetConfig+0x1a2>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093f4:	e06d      	b.n	80094d2 <UART_SetConfig+0x266>
 80093f6:	2302      	movs	r3, #2
 80093f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093fc:	e069      	b.n	80094d2 <UART_SetConfig+0x266>
 80093fe:	2304      	movs	r3, #4
 8009400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009404:	e065      	b.n	80094d2 <UART_SetConfig+0x266>
 8009406:	2308      	movs	r3, #8
 8009408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800940c:	e061      	b.n	80094d2 <UART_SetConfig+0x266>
 800940e:	2310      	movs	r3, #16
 8009410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009414:	e05d      	b.n	80094d2 <UART_SetConfig+0x266>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a4b      	ldr	r2, [pc, #300]	; (8009548 <UART_SetConfig+0x2dc>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d125      	bne.n	800946c <UART_SetConfig+0x200>
 8009420:	4b46      	ldr	r3, [pc, #280]	; (800953c <UART_SetConfig+0x2d0>)
 8009422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800942a:	2bc0      	cmp	r3, #192	; 0xc0
 800942c:	d016      	beq.n	800945c <UART_SetConfig+0x1f0>
 800942e:	2bc0      	cmp	r3, #192	; 0xc0
 8009430:	d818      	bhi.n	8009464 <UART_SetConfig+0x1f8>
 8009432:	2b80      	cmp	r3, #128	; 0x80
 8009434:	d00a      	beq.n	800944c <UART_SetConfig+0x1e0>
 8009436:	2b80      	cmp	r3, #128	; 0x80
 8009438:	d814      	bhi.n	8009464 <UART_SetConfig+0x1f8>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <UART_SetConfig+0x1d8>
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d008      	beq.n	8009454 <UART_SetConfig+0x1e8>
 8009442:	e00f      	b.n	8009464 <UART_SetConfig+0x1f8>
 8009444:	2300      	movs	r3, #0
 8009446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800944a:	e042      	b.n	80094d2 <UART_SetConfig+0x266>
 800944c:	2302      	movs	r3, #2
 800944e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009452:	e03e      	b.n	80094d2 <UART_SetConfig+0x266>
 8009454:	2304      	movs	r3, #4
 8009456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800945a:	e03a      	b.n	80094d2 <UART_SetConfig+0x266>
 800945c:	2308      	movs	r3, #8
 800945e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009462:	e036      	b.n	80094d2 <UART_SetConfig+0x266>
 8009464:	2310      	movs	r3, #16
 8009466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800946a:	e032      	b.n	80094d2 <UART_SetConfig+0x266>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a30      	ldr	r2, [pc, #192]	; (8009534 <UART_SetConfig+0x2c8>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d12a      	bne.n	80094cc <UART_SetConfig+0x260>
 8009476:	4b31      	ldr	r3, [pc, #196]	; (800953c <UART_SetConfig+0x2d0>)
 8009478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009484:	d01a      	beq.n	80094bc <UART_SetConfig+0x250>
 8009486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800948a:	d81b      	bhi.n	80094c4 <UART_SetConfig+0x258>
 800948c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009490:	d00c      	beq.n	80094ac <UART_SetConfig+0x240>
 8009492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009496:	d815      	bhi.n	80094c4 <UART_SetConfig+0x258>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <UART_SetConfig+0x238>
 800949c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094a0:	d008      	beq.n	80094b4 <UART_SetConfig+0x248>
 80094a2:	e00f      	b.n	80094c4 <UART_SetConfig+0x258>
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094aa:	e012      	b.n	80094d2 <UART_SetConfig+0x266>
 80094ac:	2302      	movs	r3, #2
 80094ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094b2:	e00e      	b.n	80094d2 <UART_SetConfig+0x266>
 80094b4:	2304      	movs	r3, #4
 80094b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ba:	e00a      	b.n	80094d2 <UART_SetConfig+0x266>
 80094bc:	2308      	movs	r3, #8
 80094be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094c2:	e006      	b.n	80094d2 <UART_SetConfig+0x266>
 80094c4:	2310      	movs	r3, #16
 80094c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ca:	e002      	b.n	80094d2 <UART_SetConfig+0x266>
 80094cc:	2310      	movs	r3, #16
 80094ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a17      	ldr	r2, [pc, #92]	; (8009534 <UART_SetConfig+0x2c8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	f040 808b 	bne.w	80095f4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d834      	bhi.n	8009550 <UART_SetConfig+0x2e4>
 80094e6:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <UART_SetConfig+0x280>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009551 	.word	0x08009551
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009551 	.word	0x08009551
 80094fc:	0800951f 	.word	0x0800951f
 8009500:	08009551 	.word	0x08009551
 8009504:	08009551 	.word	0x08009551
 8009508:	08009551 	.word	0x08009551
 800950c:	08009527 	.word	0x08009527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009510:	f7fd ff78 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8009514:	61f8      	str	r0, [r7, #28]
        break;
 8009516:	e021      	b.n	800955c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009518:	4b0c      	ldr	r3, [pc, #48]	; (800954c <UART_SetConfig+0x2e0>)
 800951a:	61fb      	str	r3, [r7, #28]
        break;
 800951c:	e01e      	b.n	800955c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800951e:	f7fd fed9 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8009522:	61f8      	str	r0, [r7, #28]
        break;
 8009524:	e01a      	b.n	800955c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800952a:	61fb      	str	r3, [r7, #28]
        break;
 800952c:	e016      	b.n	800955c <UART_SetConfig+0x2f0>
 800952e:	bf00      	nop
 8009530:	efff69f3 	.word	0xefff69f3
 8009534:	40008000 	.word	0x40008000
 8009538:	40013800 	.word	0x40013800
 800953c:	40021000 	.word	0x40021000
 8009540:	40004400 	.word	0x40004400
 8009544:	40004800 	.word	0x40004800
 8009548:	40004c00 	.word	0x40004c00
 800954c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800955a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 80fa 	beq.w	8009758 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	4613      	mov	r3, r2
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	4413      	add	r3, r2
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	429a      	cmp	r2, r3
 8009572:	d305      	bcc.n	8009580 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	429a      	cmp	r2, r3
 800957e:	d903      	bls.n	8009588 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009586:	e0e7      	b.n	8009758 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	2200      	movs	r2, #0
 800958c:	461c      	mov	r4, r3
 800958e:	4615      	mov	r5, r2
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	022b      	lsls	r3, r5, #8
 800959a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800959e:	0222      	lsls	r2, r4, #8
 80095a0:	68f9      	ldr	r1, [r7, #12]
 80095a2:	6849      	ldr	r1, [r1, #4]
 80095a4:	0849      	lsrs	r1, r1, #1
 80095a6:	2000      	movs	r0, #0
 80095a8:	4688      	mov	r8, r1
 80095aa:	4681      	mov	r9, r0
 80095ac:	eb12 0a08 	adds.w	sl, r2, r8
 80095b0:	eb43 0b09 	adc.w	fp, r3, r9
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c2:	4650      	mov	r0, sl
 80095c4:	4659      	mov	r1, fp
 80095c6:	f7f7 fb77 	bl	8000cb8 <__aeabi_uldivmod>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4613      	mov	r3, r2
 80095d0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095d8:	d308      	bcc.n	80095ec <UART_SetConfig+0x380>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e0:	d204      	bcs.n	80095ec <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e0b5      	b.n	8009758 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80095f2:	e0b1      	b.n	8009758 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fc:	d15d      	bne.n	80096ba <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80095fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009602:	2b08      	cmp	r3, #8
 8009604:	d827      	bhi.n	8009656 <UART_SetConfig+0x3ea>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <UART_SetConfig+0x3a0>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009631 	.word	0x08009631
 8009610:	08009639 	.word	0x08009639
 8009614:	08009641 	.word	0x08009641
 8009618:	08009657 	.word	0x08009657
 800961c:	08009647 	.word	0x08009647
 8009620:	08009657 	.word	0x08009657
 8009624:	08009657 	.word	0x08009657
 8009628:	08009657 	.word	0x08009657
 800962c:	0800964f 	.word	0x0800964f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009630:	f7fd fee8 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8009634:	61f8      	str	r0, [r7, #28]
        break;
 8009636:	e014      	b.n	8009662 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009638:	f7fd fefa 	bl	8007430 <HAL_RCC_GetPCLK2Freq>
 800963c:	61f8      	str	r0, [r7, #28]
        break;
 800963e:	e010      	b.n	8009662 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009640:	4b4c      	ldr	r3, [pc, #304]	; (8009774 <UART_SetConfig+0x508>)
 8009642:	61fb      	str	r3, [r7, #28]
        break;
 8009644:	e00d      	b.n	8009662 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009646:	f7fd fe45 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 800964a:	61f8      	str	r0, [r7, #28]
        break;
 800964c:	e009      	b.n	8009662 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800964e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009652:	61fb      	str	r3, [r7, #28]
        break;
 8009654:	e005      	b.n	8009662 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d077      	beq.n	8009758 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	005a      	lsls	r2, r3, #1
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	085b      	lsrs	r3, r3, #1
 8009672:	441a      	add	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	fbb2 f3f3 	udiv	r3, r2, r3
 800967c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b0f      	cmp	r3, #15
 8009682:	d916      	bls.n	80096b2 <UART_SetConfig+0x446>
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968a:	d212      	bcs.n	80096b2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f023 030f 	bic.w	r3, r3, #15
 8009694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	b29b      	uxth	r3, r3
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	8afb      	ldrh	r3, [r7, #22]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	8afa      	ldrh	r2, [r7, #22]
 80096ae:	60da      	str	r2, [r3, #12]
 80096b0:	e052      	b.n	8009758 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096b8:	e04e      	b.n	8009758 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d827      	bhi.n	8009712 <UART_SetConfig+0x4a6>
 80096c2:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0x45c>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096ed 	.word	0x080096ed
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096fd 	.word	0x080096fd
 80096d4:	08009713 	.word	0x08009713
 80096d8:	08009703 	.word	0x08009703
 80096dc:	08009713 	.word	0x08009713
 80096e0:	08009713 	.word	0x08009713
 80096e4:	08009713 	.word	0x08009713
 80096e8:	0800970b 	.word	0x0800970b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ec:	f7fd fe8a 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 80096f0:	61f8      	str	r0, [r7, #28]
        break;
 80096f2:	e014      	b.n	800971e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096f4:	f7fd fe9c 	bl	8007430 <HAL_RCC_GetPCLK2Freq>
 80096f8:	61f8      	str	r0, [r7, #28]
        break;
 80096fa:	e010      	b.n	800971e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096fc:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <UART_SetConfig+0x508>)
 80096fe:	61fb      	str	r3, [r7, #28]
        break;
 8009700:	e00d      	b.n	800971e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009702:	f7fd fde7 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8009706:	61f8      	str	r0, [r7, #28]
        break;
 8009708:	e009      	b.n	800971e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800970e:	61fb      	str	r3, [r7, #28]
        break;
 8009710:	e005      	b.n	800971e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800971c:	bf00      	nop
    }

    if (pclk != 0U)
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d019      	beq.n	8009758 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	085a      	lsrs	r2, r3, #1
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	441a      	add	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	fbb2 f3f3 	udiv	r3, r2, r3
 8009736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b0f      	cmp	r3, #15
 800973c:	d909      	bls.n	8009752 <UART_SetConfig+0x4e6>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009744:	d205      	bcs.n	8009752 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60da      	str	r2, [r3, #12]
 8009750:	e002      	b.n	8009758 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009764:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009768:	4618      	mov	r0, r3
 800976a:	3728      	adds	r7, #40	; 0x28
 800976c:	46bd      	mov	sp, r7
 800976e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009772:	bf00      	nop
 8009774:	00f42400 	.word	0x00f42400

08009778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01a      	beq.n	800988e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009876:	d10a      	bne.n	800988e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098cc:	f7fb f85c 	bl	8004988 <HAL_GetTick>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d10e      	bne.n	80098fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f82d 	bl	800994e <UART_WaitOnFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e023      	b.n	8009946 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d10e      	bne.n	800992a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800990c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f817 	bl	800994e <UART_WaitOnFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e00d      	b.n	8009946 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2220      	movs	r2, #32
 8009934:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b09c      	sub	sp, #112	; 0x70
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800995e:	e0a5      	b.n	8009aac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	f000 80a1 	beq.w	8009aac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800996a:	f7fb f80d 	bl	8004988 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009976:	429a      	cmp	r2, r3
 8009978:	d302      	bcc.n	8009980 <UART_WaitOnFlagUntilTimeout+0x32>
 800997a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800997c:	2b00      	cmp	r3, #0
 800997e:	d13e      	bne.n	80099fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800998e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009994:	667b      	str	r3, [r7, #100]	; 0x64
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800999e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e6      	bne.n	8009980 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3308      	adds	r3, #8
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	663b      	str	r3, [r7, #96]	; 0x60
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3308      	adds	r3, #8
 80099d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80099d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e5      	bne.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2220      	movs	r2, #32
 80099ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e067      	b.n	8009ace <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d04f      	beq.n	8009aac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a1a:	d147      	bne.n	8009aac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a24:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a44:	637b      	str	r3, [r7, #52]	; 0x34
 8009a46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e6      	bne.n	8009a26 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	613b      	str	r3, [r7, #16]
   return(result);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a78:	623a      	str	r2, [r7, #32]
 8009a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	69f9      	ldr	r1, [r7, #28]
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e5      	bne.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2220      	movs	r2, #32
 8009a96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e010      	b.n	8009ace <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	69da      	ldr	r2, [r3, #28]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	bf0c      	ite	eq
 8009abc:	2301      	moveq	r3, #1
 8009abe:	2300      	movne	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	f43f af4a 	beq.w	8009960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3770      	adds	r7, #112	; 0x70
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b097      	sub	sp, #92	; 0x5c
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	d10e      	bne.n	8009b2a <UART_Start_Receive_IT+0x52>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <UART_Start_Receive_IT+0x48>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b1e:	e02d      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b28:	e028      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <UART_Start_Receive_IT+0x76>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <UART_Start_Receive_IT+0x6c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b42:	e01b      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	227f      	movs	r2, #127	; 0x7f
 8009b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b4c:	e016      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b56:	d10d      	bne.n	8009b74 <UART_Start_Receive_IT+0x9c>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <UART_Start_Receive_IT+0x92>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	227f      	movs	r2, #127	; 0x7f
 8009b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b68:	e008      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	223f      	movs	r2, #63	; 0x3f
 8009b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b72:	e003      	b.n	8009b7c <UART_Start_Receive_IT+0xa4>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2222      	movs	r2, #34	; 0x22
 8009b88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	f043 0301 	orr.w	r3, r3, #1
 8009ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009baa:	64ba      	str	r2, [r7, #72]	; 0x48
 8009bac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e5      	bne.n	8009b8a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc6:	d107      	bne.n	8009bd8 <UART_Start_Receive_IT+0x100>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a24      	ldr	r2, [pc, #144]	; (8009c64 <UART_Start_Receive_IT+0x18c>)
 8009bd4:	665a      	str	r2, [r3, #100]	; 0x64
 8009bd6:	e002      	b.n	8009bde <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4a23      	ldr	r2, [pc, #140]	; (8009c68 <UART_Start_Receive_IT+0x190>)
 8009bdc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d019      	beq.n	8009c22 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e6      	bne.n	8009bee <UART_Start_Receive_IT+0x116>
 8009c20:	e018      	b.n	8009c54 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	e853 3f00 	ldrex	r3, [r3]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f043 0320 	orr.w	r3, r3, #32
 8009c36:	653b      	str	r3, [r7, #80]	; 0x50
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c40:	623b      	str	r3, [r7, #32]
 8009c42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	69f9      	ldr	r1, [r7, #28]
 8009c46:	6a3a      	ldr	r2, [r7, #32]
 8009c48:	e841 2300 	strex	r3, r2, [r1]
 8009c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e6      	bne.n	8009c22 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	375c      	adds	r7, #92	; 0x5c
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	08009f23 	.word	0x08009f23
 8009c68:	08009dbb 	.word	0x08009dbb

08009c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b095      	sub	sp, #84	; 0x54
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c92:	643b      	str	r3, [r7, #64]	; 0x40
 8009c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e6      	bne.n	8009c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e5      	bne.n	8009ca6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d118      	bne.n	8009d14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f023 0310 	bic.w	r3, r3, #16
 8009cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e6      	bne.n	8009ce2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2220      	movs	r2, #32
 8009d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009d26:	bf00      	nop
 8009d28:	3754      	adds	r7, #84	; 0x54
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b088      	sub	sp, #32
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d7e:	61fb      	str	r3, [r7, #28]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	61bb      	str	r3, [r7, #24]
 8009d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	6979      	ldr	r1, [r7, #20]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	613b      	str	r3, [r7, #16]
   return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e6      	bne.n	8009d6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	669a      	str	r2, [r3, #104]	; 0x68

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009db2:	bf00      	nop
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b096      	sub	sp, #88	; 0x58
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd0:	2b22      	cmp	r3, #34	; 0x22
 8009dd2:	f040 8098 	bne.w	8009f06 <UART_RxISR_8BIT+0x14c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ddc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009de0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009de4:	b2d9      	uxtb	r1, r3
 8009de6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df0:	400a      	ands	r2, r1
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d17d      	bne.n	8009f1a <UART_RxISR_8BIT+0x160>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e32:	653b      	str	r3, [r7, #80]	; 0x50
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e6      	bne.n	8009e1e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	f023 0301 	bic.w	r3, r3, #1
 8009e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e70:	633a      	str	r2, [r7, #48]	; 0x30
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e5      	bne.n	8009e50 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d130      	bne.n	8009efa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0310 	bic.w	r3, r3, #16
 8009eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ebc:	61fb      	str	r3, [r7, #28]
 8009ebe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e6      	bne.n	8009e9e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b10      	cmp	r3, #16
 8009edc:	d103      	bne.n	8009ee6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2210      	movs	r2, #16
 8009ee4:	621a      	str	r2, [r3, #32]
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ef8:	e00f      	b.n	8009f1a <UART_RxISR_8BIT+0x160>
        huart->RxCpltCallback(huart);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	4798      	blx	r3
}
 8009f04:	e009      	b.n	8009f1a <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	8b1b      	ldrh	r3, [r3, #24]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0208 	orr.w	r2, r2, #8
 8009f16:	b292      	uxth	r2, r2
 8009f18:	831a      	strh	r2, [r3, #24]
}
 8009f1a:	bf00      	nop
 8009f1c:	3758      	adds	r7, #88	; 0x58
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b096      	sub	sp, #88	; 0x58
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f38:	2b22      	cmp	r3, #34	; 0x22
 8009f3a:	f040 8098 	bne.w	800a06e <UART_RxISR_16BIT+0x14c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f4e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f56:	4013      	ands	r3, r2
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	1c9a      	adds	r2, r3, #2
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d17d      	bne.n	800a082 <UART_RxISR_16BIT+0x160>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	e853 3f00 	ldrex	r3, [r3]
 8009fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe0:	e841 2300 	strex	r3, r2, [r1]
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1e5      	bne.n	8009fb8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d130      	bne.n	800a062 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	e853 3f00 	ldrex	r3, [r3]
 800a012:	60bb      	str	r3, [r7, #8]
   return(result);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f023 0310 	bic.w	r3, r3, #16
 800a01a:	647b      	str	r3, [r7, #68]	; 0x44
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	e841 2300 	strex	r3, r2, [r1]
 800a030:	613b      	str	r3, [r7, #16]
   return(result);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e6      	bne.n	800a006 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f003 0310 	and.w	r3, r3, #16
 800a042:	2b10      	cmp	r3, #16
 800a044:	d103      	bne.n	800a04e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2210      	movs	r2, #16
 800a04c:	621a      	str	r2, [r3, #32]
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800a05a:	4611      	mov	r1, r2
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a060:	e00f      	b.n	800a082 <UART_RxISR_16BIT+0x160>
        huart->RxCpltCallback(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
}
 800a06c:	e009      	b.n	800a082 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	8b1b      	ldrh	r3, [r3, #24]
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0208 	orr.w	r2, r2, #8
 800a07e:	b292      	uxth	r2, r2
 800a080:	831a      	strh	r2, [r3, #24]
}
 800a082:	bf00      	nop
 800a084:	3758      	adds	r7, #88	; 0x58
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
	...

0800a0a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a6:	f3ef 8305 	mrs	r3, IPSR
 800a0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a0ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0b2:	f06f 0305 	mvn.w	r3, #5
 800a0b6:	607b      	str	r3, [r7, #4]
 800a0b8:	e00c      	b.n	800a0d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0ba:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <osKernelInitialize+0x44>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d105      	bne.n	800a0ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0c2:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <osKernelInitialize+0x44>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e002      	b.n	800a0d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0d4:	687b      	ldr	r3, [r7, #4]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000938 	.word	0x20000938

0800a0e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08e      	sub	sp, #56	; 0x38
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f8:	f3ef 8305 	mrs	r3, IPSR
 800a0fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a100:	2b00      	cmp	r3, #0
 800a102:	d17e      	bne.n	800a202 <osThreadNew+0x11a>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d07b      	beq.n	800a202 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a10a:	2380      	movs	r3, #128	; 0x80
 800a10c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a10e:	2318      	movs	r3, #24
 800a110:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
 800a11a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d045      	beq.n	800a1ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <osThreadNew+0x48>
        name = attr->name;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <osThreadNew+0x6e>
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2b38      	cmp	r3, #56	; 0x38
 800a148:	d805      	bhi.n	800a156 <osThreadNew+0x6e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <osThreadNew+0x72>
        return (NULL);
 800a156:	2300      	movs	r3, #0
 800a158:	e054      	b.n	800a204 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	089b      	lsrs	r3, r3, #2
 800a168:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00e      	beq.n	800a190 <osThreadNew+0xa8>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	2bbb      	cmp	r3, #187	; 0xbb
 800a178:	d90a      	bls.n	800a190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <osThreadNew+0xa8>
        mem = 1;
 800a18a:	2301      	movs	r3, #1
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e010      	b.n	800a1b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10c      	bne.n	800a1b2 <osThreadNew+0xca>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d108      	bne.n	800a1b2 <osThreadNew+0xca>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d104      	bne.n	800a1b2 <osThreadNew+0xca>
          mem = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61bb      	str	r3, [r7, #24]
 800a1ac:	e001      	b.n	800a1b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d110      	bne.n	800a1da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1c0:	9202      	str	r2, [sp, #8]
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6a3a      	ldr	r2, [r7, #32]
 800a1cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f001 f86a 	bl	800b2a8 <xTaskCreateStatic>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	e013      	b.n	800a202 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d110      	bne.n	800a202 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	f107 0310 	add.w	r3, r7, #16
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f001 f8b5 	bl	800b362 <xTaskCreate>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d001      	beq.n	800a202 <osThreadNew+0x11a>
            hTask = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a202:	693b      	ldr	r3, [r7, #16]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3728      	adds	r7, #40	; 0x28
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a214:	f3ef 8305 	mrs	r3, IPSR
 800a218:	60bb      	str	r3, [r7, #8]
  return(result);
 800a21a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <osDelay+0x1c>
    stat = osErrorISR;
 800a220:	f06f 0305 	mvn.w	r3, #5
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e007      	b.n	800a238 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 fa6e 	bl	800b714 <vTaskDelay>
    }
  }

  return (stat);
 800a238:	68fb      	ldr	r3, [r7, #12]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a242:	b580      	push	{r7, lr}
 800a244:	b08a      	sub	sp, #40	; 0x28
 800a246:	af02      	add	r7, sp, #8
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a252:	f3ef 8305 	mrs	r3, IPSR
 800a256:	613b      	str	r3, [r7, #16]
  return(result);
 800a258:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d175      	bne.n	800a34a <osSemaphoreNew+0x108>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d072      	beq.n	800a34a <osSemaphoreNew+0x108>
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d86e      	bhi.n	800a34a <osSemaphoreNew+0x108>
    mem = -1;
 800a26c:	f04f 33ff 	mov.w	r3, #4294967295
 800a270:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d015      	beq.n	800a2a4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d006      	beq.n	800a28e <osSemaphoreNew+0x4c>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2b4f      	cmp	r3, #79	; 0x4f
 800a286:	d902      	bls.n	800a28e <osSemaphoreNew+0x4c>
        mem = 1;
 800a288:	2301      	movs	r3, #1
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	e00c      	b.n	800a2a8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d108      	bne.n	800a2a8 <osSemaphoreNew+0x66>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <osSemaphoreNew+0x66>
          mem = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61bb      	str	r3, [r7, #24]
 800a2a2:	e001      	b.n	800a2a8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d04c      	beq.n	800a34a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d128      	bne.n	800a308 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d10a      	bne.n	800a2d2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	9200      	str	r2, [sp, #0]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	f000 f9f5 	bl	800a6b8 <xQueueGenericCreateStatic>
 800a2ce:	61f8      	str	r0, [r7, #28]
 800a2d0:	e005      	b.n	800a2de <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f000 fa66 	bl	800a7a8 <xQueueGenericCreate>
 800a2dc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d022      	beq.n	800a32a <osSemaphoreNew+0xe8>
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01f      	beq.n	800a32a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	69f8      	ldr	r0, [r7, #28]
 800a2f2:	f000 fb21 	bl	800a938 <xQueueGenericSend>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d016      	beq.n	800a32a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a2fc:	69f8      	ldr	r0, [r7, #28]
 800a2fe:	f000 fe33 	bl	800af68 <vQueueDelete>
            hSemaphore = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	e010      	b.n	800a32a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d108      	bne.n	800a320 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	461a      	mov	r2, r3
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 faa3 	bl	800a862 <xQueueCreateCountingSemaphoreStatic>
 800a31c:	61f8      	str	r0, [r7, #28]
 800a31e:	e004      	b.n	800a32a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 fad4 	bl	800a8d0 <xQueueCreateCountingSemaphore>
 800a328:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00c      	beq.n	800a34a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e001      	b.n	800a342 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	69f8      	ldr	r0, [r7, #28]
 800a346:	f000 ff5b 	bl	800b200 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a34a:	69fb      	ldr	r3, [r7, #28]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d103      	bne.n	800a374 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a36c:	f06f 0303 	mvn.w	r3, #3
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	e039      	b.n	800a3e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a374:	f3ef 8305 	mrs	r3, IPSR
 800a378:	60fb      	str	r3, [r7, #12]
  return(result);
 800a37a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d022      	beq.n	800a3c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a386:	f06f 0303 	mvn.w	r3, #3
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	e02c      	b.n	800a3e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	461a      	mov	r2, r3
 800a398:	2100      	movs	r1, #0
 800a39a:	6938      	ldr	r0, [r7, #16]
 800a39c:	f000 fd64 	bl	800ae68 <xQueueReceiveFromISR>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d003      	beq.n	800a3ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a3a6:	f06f 0302 	mvn.w	r3, #2
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e01c      	b.n	800a3e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d019      	beq.n	800a3e8 <osSemaphoreAcquire+0x94>
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <osSemaphoreAcquire+0xa0>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	e010      	b.n	800a3e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6938      	ldr	r0, [r7, #16]
 800a3ca:	f000 fc41 	bl	800ac50 <xQueueSemaphoreTake>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d009      	beq.n	800a3e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a3da:	f06f 0301 	mvn.w	r3, #1
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	e002      	b.n	800a3e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a3e2:	f06f 0302 	mvn.w	r3, #2
 800a3e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a3e8:	697b      	ldr	r3, [r7, #20]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a40e:	f06f 0303 	mvn.w	r3, #3
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e02c      	b.n	800a470 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a416:	f3ef 8305 	mrs	r3, IPSR
 800a41a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a41c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01a      	beq.n	800a458 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	4619      	mov	r1, r3
 800a42c:	6938      	ldr	r0, [r7, #16]
 800a42e:	f000 fb81 	bl	800ab34 <xQueueGiveFromISR>
 800a432:	4603      	mov	r3, r0
 800a434:	2b01      	cmp	r3, #1
 800a436:	d003      	beq.n	800a440 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a438:	f06f 0302 	mvn.w	r3, #2
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e017      	b.n	800a470 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d014      	beq.n	800a470 <osSemaphoreRelease+0x78>
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <osSemaphoreRelease+0x84>)
 800a448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	e00b      	b.n	800a470 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a458:	2300      	movs	r3, #0
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f000 fa6a 	bl	800a938 <xQueueGenericSend>
 800a464:	4603      	mov	r3, r0
 800a466:	2b01      	cmp	r3, #1
 800a468:	d002      	beq.n	800a470 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a46a:	f06f 0302 	mvn.w	r3, #2
 800a46e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a470:	697b      	ldr	r3, [r7, #20]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f103 0208 	add.w	r2, r3, #8
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f103 0208 	add.w	r2, r3, #8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f103 0208 	add.w	r2, r3, #8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	601a      	str	r2, [r3, #0]
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a538:	d103      	bne.n	800a542 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e00c      	b.n	800a55c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3308      	adds	r3, #8
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e002      	b.n	800a550 <vListInsert+0x2e>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d2f6      	bcs.n	800a54a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
}
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6892      	ldr	r2, [r2, #8]
 800a5aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	6852      	ldr	r2, [r2, #4]
 800a5b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d103      	bne.n	800a5c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	1e5a      	subs	r2, r3, #1
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a612:	f001 fe51 	bl	800c2b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a622:	fb01 f303 	mul.w	r3, r1, r3
 800a626:	441a      	add	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	3b01      	subs	r3, #1
 800a644:	68f9      	ldr	r1, [r7, #12]
 800a646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	441a      	add	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	22ff      	movs	r2, #255	; 0xff
 800a65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d114      	bne.n	800a692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01a      	beq.n	800a6a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3310      	adds	r3, #16
 800a674:	4618      	mov	r0, r3
 800a676:	f001 fa7f 	bl	800bb78 <xTaskRemoveFromEventList>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d012      	beq.n	800a6a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a680:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <xQueueGenericReset+0xcc>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	e009      	b.n	800a6a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fef2 	bl	800a480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3324      	adds	r3, #36	; 0x24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff feed 	bl	800a480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6a6:	f001 fe37 	bl	800c318 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6aa:	2301      	movs	r3, #1
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08e      	sub	sp, #56	; 0x38
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <xQueueGenericCreateStatic+0x52>
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <xQueueGenericCreateStatic+0x56>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <xQueueGenericCreateStatic+0x58>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	623b      	str	r3, [r7, #32]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <xQueueGenericCreateStatic+0x7e>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <xQueueGenericCreateStatic+0x82>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <xQueueGenericCreateStatic+0x84>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	61fb      	str	r3, [r7, #28]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a756:	2350      	movs	r3, #80	; 0x50
 800a758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b50      	cmp	r3, #80	; 0x50
 800a75e:	d00a      	beq.n	800a776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61bb      	str	r3, [r7, #24]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a776:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a78a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4613      	mov	r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	68b9      	ldr	r1, [r7, #8]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 f83f 	bl	800a81c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3730      	adds	r7, #48	; 0x30
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10a      	bne.n	800a7d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	613b      	str	r3, [r7, #16]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	fb02 f303 	mul.w	r3, r2, r3
 800a7da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	3350      	adds	r3, #80	; 0x50
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f001 fe5b 	bl	800c49c <pvPortMalloc>
 800a7e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d011      	beq.n	800a812 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	3350      	adds	r3, #80	; 0x50
 800a7f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a800:	79fa      	ldrb	r2, [r7, #7]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4613      	mov	r3, r2
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f805 	bl	800a81c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a812:	69bb      	ldr	r3, [r7, #24]
	}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e002      	b.n	800a83e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a84a:	2101      	movs	r1, #1
 800a84c:	69b8      	ldr	r0, [r7, #24]
 800a84e:	f7ff fecb 	bl	800a5e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a862:	b580      	push	{r7, lr}
 800a864:	b08a      	sub	sp, #40	; 0x28
 800a866:	af02      	add	r7, sp, #8
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	61bb      	str	r3, [r7, #24]
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d90a      	bls.n	800a8a8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	617b      	str	r3, [r7, #20]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff ff00 	bl	800a6b8 <xQueueGenericCreateStatic>
 800a8b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a8c6:	69fb      	ldr	r3, [r7, #28]
	}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d90a      	bls.n	800a914 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	60fb      	str	r3, [r7, #12]
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a914:	2202      	movs	r2, #2
 800a916:	2100      	movs	r1, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff45 	bl	800a7a8 <xQueueGenericCreate>
 800a91e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a92c:	697b      	ldr	r3, [r7, #20]
	}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	; 0x38
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a946:	2300      	movs	r3, #0
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10a      	bne.n	800a96a <xQueueGenericSend+0x32>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d103      	bne.n	800a978 <xQueueGenericSend+0x40>
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <xQueueGenericSend+0x44>
 800a978:	2301      	movs	r3, #1
 800a97a:	e000      	b.n	800a97e <xQueueGenericSend+0x46>
 800a97c:	2300      	movs	r3, #0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <xQueueGenericSend+0x60>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d103      	bne.n	800a9a6 <xQueueGenericSend+0x6e>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <xQueueGenericSend+0x72>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <xQueueGenericSend+0x74>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	623b      	str	r3, [r7, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9c6:	f001 fa1f 	bl	800be08 <xTaskGetSchedulerState>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <xQueueGenericSend+0x9e>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <xQueueGenericSend+0xa2>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <xQueueGenericSend+0xa4>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	61fb      	str	r3, [r7, #28]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9f6:	f001 fc5f 	bl	800c2b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d302      	bcc.n	800aa0c <xQueueGenericSend+0xd4>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d129      	bne.n	800aa60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa12:	f000 fae4 	bl	800afde <prvCopyDataToQueue>
 800aa16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d010      	beq.n	800aa42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	3324      	adds	r3, #36	; 0x24
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 f8a7 	bl	800bb78 <xTaskRemoveFromEventList>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d013      	beq.n	800aa58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa30:	4b3f      	ldr	r3, [pc, #252]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800aa32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	e00a      	b.n	800aa58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b39      	ldr	r3, [pc, #228]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa58:	f001 fc5e 	bl	800c318 <vPortExitCritical>
				return pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e063      	b.n	800ab28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa66:	f001 fc57 	bl	800c318 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e05c      	b.n	800ab28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 f8e1 	bl	800bc40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa82:	f001 fc49 	bl	800c318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa86:	f000 fe79 	bl	800b77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa8a:	f001 fc15 	bl	800c2b8 <vPortEnterCritical>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <xQueueGenericSend+0x16c>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab0:	d103      	bne.n	800aaba <xQueueGenericSend+0x182>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaba:	f001 fc2d 	bl	800c318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0314 	add.w	r3, r7, #20
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 f8d0 	bl	800bc6c <xTaskCheckForTimeOut>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d124      	bne.n	800ab1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aad4:	f000 fb7b 	bl	800b1ce <prvIsQueueFull>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d018      	beq.n	800ab10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	3310      	adds	r3, #16
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 f822 	bl	800bb30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aaec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaee:	f000 fb06 	bl	800b0fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aaf2:	f000 fe51 	bl	800b798 <xTaskResumeAll>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f47f af7c 	bne.w	800a9f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aafe:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800ab00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	e772      	b.n	800a9f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab12:	f000 faf4 	bl	800b0fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab16:	f000 fe3f 	bl	800b798 <xTaskResumeAll>
 800ab1a:	e76c      	b.n	800a9f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab1e:	f000 faee 	bl	800b0fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab22:	f000 fe39 	bl	800b798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3738      	adds	r7, #56	; 0x38
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	e000ed04 	.word	0xe000ed04

0800ab34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08e      	sub	sp, #56	; 0x38
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	623b      	str	r3, [r7, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	61fb      	str	r3, [r7, #28]
}
 800ab78:	bf00      	nop
 800ab7a:	e7fe      	b.n	800ab7a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d103      	bne.n	800ab8c <xQueueGiveFromISR+0x58>
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <xQueueGiveFromISR+0x5c>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e000      	b.n	800ab92 <xQueueGiveFromISR+0x5e>
 800ab90:	2300      	movs	r3, #0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <xQueueGiveFromISR+0x78>
	__asm volatile
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	61bb      	str	r3, [r7, #24]
}
 800aba8:	bf00      	nop
 800abaa:	e7fe      	b.n	800abaa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abac:	f001 fc36 	bl	800c41c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abb0:	f3ef 8211 	mrs	r2, BASEPRI
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	617a      	str	r2, [r7, #20]
 800abc6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd8:	429a      	cmp	r2, r3
 800abda:	d22b      	bcs.n	800ac34 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d112      	bne.n	800ac1e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d016      	beq.n	800ac2e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	3324      	adds	r3, #36	; 0x24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 ffb7 	bl	800bb78 <xTaskRemoveFromEventList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00e      	beq.n	800ac2e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00b      	beq.n	800ac2e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	e007      	b.n	800ac2e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac22:	3301      	adds	r3, #1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	b25a      	sxtb	r2, r3
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
 800ac32:	e001      	b.n	800ac38 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3738      	adds	r7, #56	; 0x38
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08e      	sub	sp, #56	; 0x38
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	623b      	str	r3, [r7, #32]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	61fb      	str	r3, [r7, #28]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aca0:	f001 f8b2 	bl	800be08 <xTaskGetSchedulerState>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <xQueueSemaphoreTake+0x60>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <xQueueSemaphoreTake+0x64>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e000      	b.n	800acb6 <xQueueSemaphoreTake+0x66>
 800acb4:	2300      	movs	r3, #0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61bb      	str	r3, [r7, #24]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acd0:	f001 faf2 	bl	800c2b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d024      	beq.n	800ad2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	1e5a      	subs	r2, r3, #1
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800acf0:	f001 fa00 	bl	800c0f4 <pvTaskIncrementMutexHeldCount>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00f      	beq.n	800ad22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	3310      	adds	r3, #16
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 ff36 	bl	800bb78 <xTaskRemoveFromEventList>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad12:	4b54      	ldr	r3, [pc, #336]	; (800ae64 <xQueueSemaphoreTake+0x214>)
 800ad14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad22:	f001 faf9 	bl	800c318 <vPortExitCritical>
				return pdPASS;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e097      	b.n	800ae5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d111      	bne.n	800ad54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	617b      	str	r3, [r7, #20]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad4c:	f001 fae4 	bl	800c318 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad50:	2300      	movs	r3, #0
 800ad52:	e082      	b.n	800ae5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad5a:	f107 030c 	add.w	r3, r7, #12
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 ff6e 	bl	800bc40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad68:	f001 fad6 	bl	800c318 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad6c:	f000 fd06 	bl	800b77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad70:	f001 faa2 	bl	800c2b8 <vPortEnterCritical>
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad80:	d103      	bne.n	800ad8a <xQueueSemaphoreTake+0x13a>
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad90:	b25b      	sxtb	r3, r3
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d103      	bne.n	800ada0 <xQueueSemaphoreTake+0x150>
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada0:	f001 faba 	bl	800c318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ada4:	463a      	mov	r2, r7
 800ada6:	f107 030c 	add.w	r3, r7, #12
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f000 ff5d 	bl	800bc6c <xTaskCheckForTimeOut>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d132      	bne.n	800ae1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adba:	f000 f9f2 	bl	800b1a2 <prvIsQueueEmpty>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d026      	beq.n	800ae12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d109      	bne.n	800ade0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800adcc:	f001 fa74 	bl	800c2b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f835 	bl	800be44 <xTaskPriorityInherit>
 800adda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800addc:	f001 fa9c 	bl	800c318 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	3324      	adds	r3, #36	; 0x24
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fea1 	bl	800bb30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf0:	f000 f985 	bl	800b0fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adf4:	f000 fcd0 	bl	800b798 <xTaskResumeAll>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f47f af68 	bne.w	800acd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae00:	4b18      	ldr	r3, [pc, #96]	; (800ae64 <xQueueSemaphoreTake+0x214>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	e75e      	b.n	800acd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae14:	f000 f973 	bl	800b0fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae18:	f000 fcbe 	bl	800b798 <xTaskResumeAll>
 800ae1c:	e758      	b.n	800acd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae20:	f000 f96d 	bl	800b0fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae24:	f000 fcb8 	bl	800b798 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae2a:	f000 f9ba 	bl	800b1a2 <prvIsQueueEmpty>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f43f af4d 	beq.w	800acd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00d      	beq.n	800ae58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae3c:	f001 fa3c 	bl	800c2b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae42:	f000 f8b4 	bl	800afae <prvGetDisinheritPriorityAfterTimeout>
 800ae46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 f8ce 	bl	800bff0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae54:	f001 fa60 	bl	800c318 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3738      	adds	r7, #56	; 0x38
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08e      	sub	sp, #56	; 0x38
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	623b      	str	r3, [r7, #32]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <xQueueReceiveFromISR+0x3a>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <xQueueReceiveFromISR+0x3e>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <xQueueReceiveFromISR+0x40>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	61fb      	str	r3, [r7, #28]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aec2:	f001 faab 	bl	800c41c <vPortValidateInterruptPriority>
	__asm volatile
 800aec6:	f3ef 8211 	mrs	r2, BASEPRI
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	61ba      	str	r2, [r7, #24]
 800aedc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aede:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d02f      	beq.n	800af4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aef8:	68b9      	ldr	r1, [r7, #8]
 800aefa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefc:	f000 f8d9 	bl	800b0b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	1e5a      	subs	r2, r3, #1
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d112      	bne.n	800af38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d016      	beq.n	800af48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	3310      	adds	r3, #16
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fe2a 	bl	800bb78 <xTaskRemoveFromEventList>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00e      	beq.n	800af48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	e007      	b.n	800af48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af3c:	3301      	adds	r3, #1
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	b25a      	sxtb	r2, r3
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af48:	2301      	movs	r3, #1
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
 800af4c:	e001      	b.n	800af52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af4e:	2300      	movs	r3, #0
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f383 8811 	msr	BASEPRI, r3
}
 800af5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af60:	4618      	mov	r0, r3
 800af62:	3738      	adds	r7, #56	; 0x38
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10a      	bne.n	800af90 <vQueueDelete+0x28>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	60bb      	str	r3, [r7, #8]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 f95f 	bl	800b254 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f001 fb47 	bl	800c634 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d006      	beq.n	800afcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	e001      	b.n	800afd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afd0:	68fb      	ldr	r3, [r7, #12]
	}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10d      	bne.n	800b018 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d14d      	bne.n	800b0a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 ff83 	bl	800bf14 <xTaskPriorityDisinherit>
 800b00e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	609a      	str	r2, [r3, #8]
 800b016:	e043      	b.n	800b0a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d119      	bne.n	800b052 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6858      	ldr	r0, [r3, #4]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	461a      	mov	r2, r3
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	f001 fd55 	bl	800cad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b036:	441a      	add	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	429a      	cmp	r2, r3
 800b046:	d32b      	bcc.n	800b0a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	605a      	str	r2, [r3, #4]
 800b050:	e026      	b.n	800b0a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68d8      	ldr	r0, [r3, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	461a      	mov	r2, r3
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	f001 fd3b 	bl	800cad8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	68da      	ldr	r2, [r3, #12]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	425b      	negs	r3, r3
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d207      	bcs.n	800b08e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	425b      	negs	r3, r3
 800b088:	441a      	add	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d105      	bne.n	800b0a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0a8:	697b      	ldr	r3, [r7, #20]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d018      	beq.n	800b0f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68da      	ldr	r2, [r3, #12]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0cc:	441a      	add	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d303      	bcc.n	800b0e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68d9      	ldr	r1, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6838      	ldr	r0, [r7, #0]
 800b0f2:	f001 fcf1 	bl	800cad8 <memcpy>
	}
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b106:	f001 f8d7 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b110:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b112:	e011      	b.n	800b138 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d012      	beq.n	800b142 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3324      	adds	r3, #36	; 0x24
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fd29 	bl	800bb78 <xTaskRemoveFromEventList>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b12c:	f000 fe00 	bl	800bd30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	3b01      	subs	r3, #1
 800b134:	b2db      	uxtb	r3, r3
 800b136:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dce9      	bgt.n	800b114 <prvUnlockQueue+0x16>
 800b140:	e000      	b.n	800b144 <prvUnlockQueue+0x46>
					break;
 800b142:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	22ff      	movs	r2, #255	; 0xff
 800b148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b14c:	f001 f8e4 	bl	800c318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b150:	f001 f8b2 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b15a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b15c:	e011      	b.n	800b182 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d012      	beq.n	800b18c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3310      	adds	r3, #16
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fd04 	bl	800bb78 <xTaskRemoveFromEventList>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b176:	f000 fddb 	bl	800bd30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b186:	2b00      	cmp	r3, #0
 800b188:	dce9      	bgt.n	800b15e <prvUnlockQueue+0x60>
 800b18a:	e000      	b.n	800b18e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b18c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b196:	f001 f8bf 	bl	800c318 <vPortExitCritical>
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1aa:	f001 f885 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e001      	b.n	800b1c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1c0:	f001 f8aa 	bl	800c318 <vPortExitCritical>

	return xReturn;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1d6:	f001 f86f 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d102      	bne.n	800b1ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	e001      	b.n	800b1f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f0:	f001 f892 	bl	800c318 <vPortExitCritical>

	return xReturn;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	e014      	b.n	800b23a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b210:	4a0f      	ldr	r2, [pc, #60]	; (800b250 <vQueueAddToRegistry+0x50>)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b21c:	490c      	ldr	r1, [pc, #48]	; (800b250 <vQueueAddToRegistry+0x50>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b226:	4a0a      	ldr	r2, [pc, #40]	; (800b250 <vQueueAddToRegistry+0x50>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	4413      	add	r3, r2
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b232:	e006      	b.n	800b242 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b07      	cmp	r3, #7
 800b23e:	d9e7      	bls.n	800b210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	2000093c 	.word	0x2000093c

0800b254 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	e016      	b.n	800b290 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b262:	4a10      	ldr	r2, [pc, #64]	; (800b2a4 <vQueueUnregisterQueue+0x50>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	4413      	add	r3, r2
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d10b      	bne.n	800b28a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b272:	4a0c      	ldr	r2, [pc, #48]	; (800b2a4 <vQueueUnregisterQueue+0x50>)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2100      	movs	r1, #0
 800b278:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b27c:	4a09      	ldr	r2, [pc, #36]	; (800b2a4 <vQueueUnregisterQueue+0x50>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	00db      	lsls	r3, r3, #3
 800b282:	4413      	add	r3, r2
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
				break;
 800b288:	e006      	b.n	800b298 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b07      	cmp	r3, #7
 800b294:	d9e5      	bls.n	800b262 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b296:	bf00      	nop
 800b298:	bf00      	nop
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	2000093c 	.word	0x2000093c

0800b2a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08e      	sub	sp, #56	; 0x38
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	623b      	str	r3, [r7, #32]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <xTaskCreateStatic+0x46>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	61fb      	str	r3, [r7, #28]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2ee:	23bc      	movs	r3, #188	; 0xbc
 800b2f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2bbc      	cmp	r3, #188	; 0xbc
 800b2f6:	d00a      	beq.n	800b30e <xTaskCreateStatic+0x66>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	61bb      	str	r3, [r7, #24]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b30e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	2b00      	cmp	r3, #0
 800b314:	d01e      	beq.n	800b354 <xTaskCreateStatic+0xac>
 800b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01b      	beq.n	800b354 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	2202      	movs	r2, #2
 800b32a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b32e:	2300      	movs	r3, #0
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	9302      	str	r3, [sp, #8]
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	68b9      	ldr	r1, [r7, #8]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 f850 	bl	800b3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b34e:	f000 f8f3 	bl	800b538 <prvAddNewTaskToReadyList>
 800b352:	e001      	b.n	800b358 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b358:	697b      	ldr	r3, [r7, #20]
	}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3728      	adds	r7, #40	; 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b362:	b580      	push	{r7, lr}
 800b364:	b08c      	sub	sp, #48	; 0x30
 800b366:	af04      	add	r7, sp, #16
 800b368:	60f8      	str	r0, [r7, #12]
 800b36a:	60b9      	str	r1, [r7, #8]
 800b36c:	603b      	str	r3, [r7, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4618      	mov	r0, r3
 800b378:	f001 f890 	bl	800c49c <pvPortMalloc>
 800b37c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00e      	beq.n	800b3a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b384:	20bc      	movs	r0, #188	; 0xbc
 800b386:	f001 f889 	bl	800c49c <pvPortMalloc>
 800b38a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	631a      	str	r2, [r3, #48]	; 0x30
 800b398:	e005      	b.n	800b3a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b39a:	6978      	ldr	r0, [r7, #20]
 800b39c:	f001 f94a 	bl	800c634 <vPortFree>
 800b3a0:	e001      	b.n	800b3a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d017      	beq.n	800b3dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3b4:	88fa      	ldrh	r2, [r7, #6]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9303      	str	r3, [sp, #12]
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	9302      	str	r3, [sp, #8]
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68b9      	ldr	r1, [r7, #8]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 f80e 	bl	800b3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3d0:	69f8      	ldr	r0, [r7, #28]
 800b3d2:	f000 f8b1 	bl	800b538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	61bb      	str	r3, [r7, #24]
 800b3da:	e002      	b.n	800b3e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3720      	adds	r7, #32
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	461a      	mov	r2, r3
 800b404:	21a5      	movs	r1, #165	; 0xa5
 800b406:	f001 fb75 	bl	800caf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b414:	3b01      	subs	r3, #1
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f023 0307 	bic.w	r3, r3, #7
 800b422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	617b      	str	r3, [r7, #20]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d01f      	beq.n	800b48a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b44a:	2300      	movs	r3, #0
 800b44c:	61fb      	str	r3, [r7, #28]
 800b44e:	e012      	b.n	800b476 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	4413      	add	r3, r2
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	4413      	add	r3, r2
 800b45e:	3334      	adds	r3, #52	; 0x34
 800b460:	460a      	mov	r2, r1
 800b462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d006      	beq.n	800b47e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	3301      	adds	r3, #1
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	2b0f      	cmp	r3, #15
 800b47a:	d9e9      	bls.n	800b450 <prvInitialiseNewTask+0x64>
 800b47c:	e000      	b.n	800b480 <prvInitialiseNewTask+0x94>
			{
				break;
 800b47e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b488:	e003      	b.n	800b492 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	2b37      	cmp	r3, #55	; 0x37
 800b496:	d901      	bls.n	800b49c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b498:	2337      	movs	r3, #55	; 0x37
 800b49a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff f804 	bl	800a4c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	3318      	adds	r3, #24
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe ffff 	bl	800a4c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	3354      	adds	r3, #84	; 0x54
 800b4ec:	2260      	movs	r2, #96	; 0x60
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 faff 	bl	800caf4 <memset>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	4a0c      	ldr	r2, [pc, #48]	; (800b52c <prvInitialiseNewTask+0x140>)
 800b4fa:	659a      	str	r2, [r3, #88]	; 0x58
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	; (800b530 <prvInitialiseNewTask+0x144>)
 800b500:	65da      	str	r2, [r3, #92]	; 0x5c
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	4a0b      	ldr	r2, [pc, #44]	; (800b534 <prvInitialiseNewTask+0x148>)
 800b506:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	68f9      	ldr	r1, [r7, #12]
 800b50c:	69b8      	ldr	r0, [r7, #24]
 800b50e:	f000 fe59 	bl	800c1c4 <pxPortInitialiseStack>
 800b512:	4602      	mov	r2, r0
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b524:	bf00      	nop
 800b526:	3720      	adds	r7, #32
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	080106a0 	.word	0x080106a0
 800b530:	080106c0 	.word	0x080106c0
 800b534:	08010680 	.word	0x08010680

0800b538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b540:	f000 feba 	bl	800c2b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b544:	4b2d      	ldr	r3, [pc, #180]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	4a2c      	ldr	r2, [pc, #176]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b54c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b54e:	4b2c      	ldr	r3, [pc, #176]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d109      	bne.n	800b56a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b556:	4a2a      	ldr	r2, [pc, #168]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b55c:	4b27      	ldr	r3, [pc, #156]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d110      	bne.n	800b586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b564:	f000 fbf0 	bl	800bd48 <prvInitialiseTaskLists>
 800b568:	e00d      	b.n	800b586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b56a:	4b26      	ldr	r3, [pc, #152]	; (800b604 <prvAddNewTaskToReadyList+0xcc>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d109      	bne.n	800b586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b572:	4b23      	ldr	r3, [pc, #140]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d802      	bhi.n	800b586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b580:	4a1f      	ldr	r2, [pc, #124]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b586:	4b20      	ldr	r3, [pc, #128]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b58e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b590:	4b1d      	ldr	r3, [pc, #116]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59c:	4b1b      	ldr	r3, [pc, #108]	; (800b60c <prvAddNewTaskToReadyList+0xd4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d903      	bls.n	800b5ac <prvAddNewTaskToReadyList+0x74>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	4a18      	ldr	r2, [pc, #96]	; (800b60c <prvAddNewTaskToReadyList+0xd4>)
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4a15      	ldr	r2, [pc, #84]	; (800b610 <prvAddNewTaskToReadyList+0xd8>)
 800b5ba:	441a      	add	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f7fe ff89 	bl	800a4da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5c8:	f000 fea6 	bl	800c318 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <prvAddNewTaskToReadyList+0xcc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d207      	bcs.n	800b5f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5e2:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <prvAddNewTaskToReadyList+0xdc>)
 800b5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000e4c 	.word	0x20000e4c
 800b600:	2000097c 	.word	0x2000097c
 800b604:	20000e58 	.word	0x20000e58
 800b608:	20000e68 	.word	0x20000e68
 800b60c:	20000e54 	.word	0x20000e54
 800b610:	20000980 	.word	0x20000980
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	617b      	str	r3, [r7, #20]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <vTaskDelayUntil+0x46>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	613b      	str	r3, [r7, #16]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b65e:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <vTaskDelayUntil+0xf0>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <vTaskDelayUntil+0x64>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60fb      	str	r3, [r7, #12]
}
 800b678:	bf00      	nop
 800b67a:	e7fe      	b.n	800b67a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b67c:	f000 f87e 	bl	800b77c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b680:	4b22      	ldr	r3, [pc, #136]	; (800b70c <vTaskDelayUntil+0xf4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4413      	add	r3, r2
 800b68e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6a3a      	ldr	r2, [r7, #32]
 800b696:	429a      	cmp	r2, r3
 800b698:	d20b      	bcs.n	800b6b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69fa      	ldr	r2, [r7, #28]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d211      	bcs.n	800b6c8 <vTaskDelayUntil+0xb0>
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d90d      	bls.n	800b6c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b0:	e00a      	b.n	800b6c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d303      	bcc.n	800b6c4 <vTaskDelayUntil+0xac>
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d901      	bls.n	800b6c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fd1d 	bl	800c11c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b6e2:	f000 f859 	bl	800b798 <xTaskResumeAll>
 800b6e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b6ee:	4b08      	ldr	r3, [pc, #32]	; (800b710 <vTaskDelayUntil+0xf8>)
 800b6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6fe:	bf00      	nop
 800b700:	3728      	adds	r7, #40	; 0x28
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000e70 	.word	0x20000e70
 800b70c:	20000e50 	.word	0x20000e50
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d017      	beq.n	800b756 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b726:	4b13      	ldr	r3, [pc, #76]	; (800b774 <vTaskDelay+0x60>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <vTaskDelay+0x30>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60bb      	str	r3, [r7, #8]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b744:	f000 f81a 	bl	800b77c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fce6 	bl	800c11c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b750:	f000 f822 	bl	800b798 <xTaskResumeAll>
 800b754:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d107      	bne.n	800b76c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <vTaskDelay+0x64>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000e70 	.word	0x20000e70
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b780:	4b04      	ldr	r3, [pc, #16]	; (800b794 <vTaskSuspendAll+0x18>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	4a03      	ldr	r2, [pc, #12]	; (800b794 <vTaskSuspendAll+0x18>)
 800b788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b78a:	bf00      	nop
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20000e70 	.word	0x20000e70

0800b798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7a6:	4b42      	ldr	r3, [pc, #264]	; (800b8b0 <xTaskResumeAll+0x118>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	603b      	str	r3, [r7, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7c4:	f000 fd78 	bl	800c2b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7c8:	4b39      	ldr	r3, [pc, #228]	; (800b8b0 <xTaskResumeAll+0x118>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a38      	ldr	r2, [pc, #224]	; (800b8b0 <xTaskResumeAll+0x118>)
 800b7d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7d2:	4b37      	ldr	r3, [pc, #220]	; (800b8b0 <xTaskResumeAll+0x118>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d162      	bne.n	800b8a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7da:	4b36      	ldr	r3, [pc, #216]	; (800b8b4 <xTaskResumeAll+0x11c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d05e      	beq.n	800b8a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7e2:	e02f      	b.n	800b844 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e4:	4b34      	ldr	r3, [pc, #208]	; (800b8b8 <xTaskResumeAll+0x120>)
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3318      	adds	r3, #24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fecf 	bl	800a594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe feca 	bl	800a594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b804:	4b2d      	ldr	r3, [pc, #180]	; (800b8bc <xTaskResumeAll+0x124>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d903      	bls.n	800b814 <xTaskResumeAll+0x7c>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b810:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <xTaskResumeAll+0x124>)
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b818:	4613      	mov	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4a27      	ldr	r2, [pc, #156]	; (800b8c0 <xTaskResumeAll+0x128>)
 800b822:	441a      	add	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fe55 	bl	800a4da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4b23      	ldr	r3, [pc, #140]	; (800b8c4 <xTaskResumeAll+0x12c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d302      	bcc.n	800b844 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b83e:	4b22      	ldr	r3, [pc, #136]	; (800b8c8 <xTaskResumeAll+0x130>)
 800b840:	2201      	movs	r2, #1
 800b842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b844:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <xTaskResumeAll+0x120>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1cb      	bne.n	800b7e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b852:	f000 fab9 	bl	800bdc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b856:	4b1d      	ldr	r3, [pc, #116]	; (800b8cc <xTaskResumeAll+0x134>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d010      	beq.n	800b884 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b862:	f000 f847 	bl	800b8f4 <xTaskIncrementTick>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b86c:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <xTaskResumeAll+0x130>)
 800b86e:	2201      	movs	r2, #1
 800b870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3b01      	subs	r3, #1
 800b876:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1f1      	bne.n	800b862 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <xTaskResumeAll+0x134>)
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b884:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <xTaskResumeAll+0x130>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d009      	beq.n	800b8a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b88c:	2301      	movs	r3, #1
 800b88e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <xTaskResumeAll+0x138>)
 800b892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8a0:	f000 fd3a 	bl	800c318 <vPortExitCritical>

	return xAlreadyYielded;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000e70 	.word	0x20000e70
 800b8b4:	20000e4c 	.word	0x20000e4c
 800b8b8:	20000e10 	.word	0x20000e10
 800b8bc:	20000e54 	.word	0x20000e54
 800b8c0:	20000980 	.word	0x20000980
 800b8c4:	2000097c 	.word	0x2000097c
 800b8c8:	20000e60 	.word	0x20000e60
 800b8cc:	20000e5c 	.word	0x20000e5c
 800b8d0:	e000ed04 	.word	0xe000ed04

0800b8d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <xTaskGetTickCount+0x1c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8e0:	687b      	ldr	r3, [r7, #4]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	20000e50 	.word	0x20000e50

0800b8f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8fe:	4b4f      	ldr	r3, [pc, #316]	; (800ba3c <xTaskIncrementTick+0x148>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	f040 808f 	bne.w	800ba26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b908:	4b4d      	ldr	r3, [pc, #308]	; (800ba40 <xTaskIncrementTick+0x14c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b910:	4a4b      	ldr	r2, [pc, #300]	; (800ba40 <xTaskIncrementTick+0x14c>)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d120      	bne.n	800b95e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b91c:	4b49      	ldr	r3, [pc, #292]	; (800ba44 <xTaskIncrementTick+0x150>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00a      	beq.n	800b93c <xTaskIncrementTick+0x48>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	603b      	str	r3, [r7, #0]
}
 800b938:	bf00      	nop
 800b93a:	e7fe      	b.n	800b93a <xTaskIncrementTick+0x46>
 800b93c:	4b41      	ldr	r3, [pc, #260]	; (800ba44 <xTaskIncrementTick+0x150>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	4b41      	ldr	r3, [pc, #260]	; (800ba48 <xTaskIncrementTick+0x154>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a3f      	ldr	r2, [pc, #252]	; (800ba44 <xTaskIncrementTick+0x150>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	4a3f      	ldr	r2, [pc, #252]	; (800ba48 <xTaskIncrementTick+0x154>)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	4b3e      	ldr	r3, [pc, #248]	; (800ba4c <xTaskIncrementTick+0x158>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3301      	adds	r3, #1
 800b956:	4a3d      	ldr	r2, [pc, #244]	; (800ba4c <xTaskIncrementTick+0x158>)
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	f000 fa35 	bl	800bdc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b95e:	4b3c      	ldr	r3, [pc, #240]	; (800ba50 <xTaskIncrementTick+0x15c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	429a      	cmp	r2, r3
 800b966:	d349      	bcc.n	800b9fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b968:	4b36      	ldr	r3, [pc, #216]	; (800ba44 <xTaskIncrementTick+0x150>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d104      	bne.n	800b97c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b972:	4b37      	ldr	r3, [pc, #220]	; (800ba50 <xTaskIncrementTick+0x15c>)
 800b974:	f04f 32ff 	mov.w	r2, #4294967295
 800b978:	601a      	str	r2, [r3, #0]
					break;
 800b97a:	e03f      	b.n	800b9fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b97c:	4b31      	ldr	r3, [pc, #196]	; (800ba44 <xTaskIncrementTick+0x150>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d203      	bcs.n	800b99c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b994:	4a2e      	ldr	r2, [pc, #184]	; (800ba50 <xTaskIncrementTick+0x15c>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b99a:	e02f      	b.n	800b9fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fdf7 	bl	800a594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3318      	adds	r3, #24
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fdee 	bl	800a594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4b25      	ldr	r3, [pc, #148]	; (800ba54 <xTaskIncrementTick+0x160>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <xTaskIncrementTick+0xd8>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a22      	ldr	r2, [pc, #136]	; (800ba54 <xTaskIncrementTick+0x160>)
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4a1f      	ldr	r2, [pc, #124]	; (800ba58 <xTaskIncrementTick+0x164>)
 800b9da:	441a      	add	r2, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7fe fd79 	bl	800a4da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ba5c <xTaskIncrementTick+0x168>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d3b8      	bcc.n	800b968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9fa:	e7b5      	b.n	800b968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9fc:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <xTaskIncrementTick+0x168>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	4915      	ldr	r1, [pc, #84]	; (800ba58 <xTaskIncrementTick+0x164>)
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d901      	bls.n	800ba18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba18:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <xTaskIncrementTick+0x16c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
 800ba24:	e004      	b.n	800ba30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <xTaskIncrementTick+0x170>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	4a0d      	ldr	r2, [pc, #52]	; (800ba64 <xTaskIncrementTick+0x170>)
 800ba2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba30:	697b      	ldr	r3, [r7, #20]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000e70 	.word	0x20000e70
 800ba40:	20000e50 	.word	0x20000e50
 800ba44:	20000e08 	.word	0x20000e08
 800ba48:	20000e0c 	.word	0x20000e0c
 800ba4c:	20000e64 	.word	0x20000e64
 800ba50:	20000e6c 	.word	0x20000e6c
 800ba54:	20000e54 	.word	0x20000e54
 800ba58:	20000980 	.word	0x20000980
 800ba5c:	2000097c 	.word	0x2000097c
 800ba60:	20000e60 	.word	0x20000e60
 800ba64:	20000e5c 	.word	0x20000e5c

0800ba68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba6e:	4b2a      	ldr	r3, [pc, #168]	; (800bb18 <vTaskSwitchContext+0xb0>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba76:	4b29      	ldr	r3, [pc, #164]	; (800bb1c <vTaskSwitchContext+0xb4>)
 800ba78:	2201      	movs	r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba7c:	e046      	b.n	800bb0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ba7e:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <vTaskSwitchContext+0xb4>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba84:	4b26      	ldr	r3, [pc, #152]	; (800bb20 <vTaskSwitchContext+0xb8>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	e010      	b.n	800baae <vTaskSwitchContext+0x46>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	607b      	str	r3, [r7, #4]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <vTaskSwitchContext+0x3e>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3b01      	subs	r3, #1
 800baac:	60fb      	str	r3, [r7, #12]
 800baae:	491d      	ldr	r1, [pc, #116]	; (800bb24 <vTaskSwitchContext+0xbc>)
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	440b      	add	r3, r1
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0e4      	beq.n	800ba8c <vTaskSwitchContext+0x24>
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	4613      	mov	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4a15      	ldr	r2, [pc, #84]	; (800bb24 <vTaskSwitchContext+0xbc>)
 800bace:	4413      	add	r3, r2
 800bad0:	60bb      	str	r3, [r7, #8]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	605a      	str	r2, [r3, #4]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	3308      	adds	r3, #8
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d104      	bne.n	800baf2 <vTaskSwitchContext+0x8a>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	605a      	str	r2, [r3, #4]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	4a0b      	ldr	r2, [pc, #44]	; (800bb28 <vTaskSwitchContext+0xc0>)
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <vTaskSwitchContext+0xb8>)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb02:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <vTaskSwitchContext+0xc0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3354      	adds	r3, #84	; 0x54
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <vTaskSwitchContext+0xc4>)
 800bb0a:	6013      	str	r3, [r2, #0]
}
 800bb0c:	bf00      	nop
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	20000e70 	.word	0x20000e70
 800bb1c:	20000e60 	.word	0x20000e60
 800bb20:	20000e54 	.word	0x20000e54
 800bb24:	20000980 	.word	0x20000980
 800bb28:	2000097c 	.word	0x2000097c
 800bb2c:	20000034 	.word	0x20000034

0800bb30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	60fb      	str	r3, [r7, #12]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb56:	4b07      	ldr	r3, [pc, #28]	; (800bb74 <vTaskPlaceOnEventList+0x44>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3318      	adds	r3, #24
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7fe fcdf 	bl	800a522 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb64:	2101      	movs	r1, #1
 800bb66:	6838      	ldr	r0, [r7, #0]
 800bb68:	f000 fad8 	bl	800c11c <prvAddCurrentTaskToDelayedList>
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	2000097c 	.word	0x2000097c

0800bb78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10a      	bne.n	800bba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	60fb      	str	r3, [r7, #12]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	3318      	adds	r3, #24
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fcf3 	bl	800a594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbae:	4b1e      	ldr	r3, [pc, #120]	; (800bc28 <xTaskRemoveFromEventList+0xb0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d11d      	bne.n	800bbf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe fcea 	bl	800a594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <xTaskRemoveFromEventList+0xb4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d903      	bls.n	800bbd4 <xTaskRemoveFromEventList+0x5c>
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	4a16      	ldr	r2, [pc, #88]	; (800bc2c <xTaskRemoveFromEventList+0xb4>)
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4a13      	ldr	r2, [pc, #76]	; (800bc30 <xTaskRemoveFromEventList+0xb8>)
 800bbe2:	441a      	add	r2, r3
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe fc75 	bl	800a4da <vListInsertEnd>
 800bbf0:	e005      	b.n	800bbfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	3318      	adds	r3, #24
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	480e      	ldr	r0, [pc, #56]	; (800bc34 <xTaskRemoveFromEventList+0xbc>)
 800bbfa:	f7fe fc6e 	bl	800a4da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc02:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <xTaskRemoveFromEventList+0xc0>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d905      	bls.n	800bc18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <xTaskRemoveFromEventList+0xc4>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	e001      	b.n	800bc1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc1c:	697b      	ldr	r3, [r7, #20]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20000e70 	.word	0x20000e70
 800bc2c:	20000e54 	.word	0x20000e54
 800bc30:	20000980 	.word	0x20000980
 800bc34:	20000e10 	.word	0x20000e10
 800bc38:	2000097c 	.word	0x2000097c
 800bc3c:	20000e60 	.word	0x20000e60

0800bc40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc48:	4b06      	ldr	r3, [pc, #24]	; (800bc64 <vTaskInternalSetTimeOutState+0x24>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <vTaskInternalSetTimeOutState+0x28>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	605a      	str	r2, [r3, #4]
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	20000e64 	.word	0x20000e64
 800bc68:	20000e50 	.word	0x20000e50

0800bc6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	613b      	str	r3, [r7, #16]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	60fb      	str	r3, [r7, #12]
}
 800bcaa:	bf00      	nop
 800bcac:	e7fe      	b.n	800bcac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bcae:	f000 fb03 	bl	800c2b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <xTaskCheckForTimeOut+0xbc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcca:	d102      	bne.n	800bcd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bccc:	2300      	movs	r3, #0
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	e023      	b.n	800bd1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	4b15      	ldr	r3, [pc, #84]	; (800bd2c <xTaskCheckForTimeOut+0xc0>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d007      	beq.n	800bcee <xTaskCheckForTimeOut+0x82>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d302      	bcc.n	800bcee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bce8:	2301      	movs	r3, #1
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	e015      	b.n	800bd1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d20b      	bcs.n	800bd10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ff9b 	bl	800bc40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	61fb      	str	r3, [r7, #28]
 800bd0e:	e004      	b.n	800bd1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd16:	2301      	movs	r3, #1
 800bd18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd1a:	f000 fafd 	bl	800c318 <vPortExitCritical>

	return xReturn;
 800bd1e:	69fb      	ldr	r3, [r7, #28]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3720      	adds	r7, #32
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20000e50 	.word	0x20000e50
 800bd2c:	20000e64 	.word	0x20000e64

0800bd30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd30:	b480      	push	{r7}
 800bd32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd34:	4b03      	ldr	r3, [pc, #12]	; (800bd44 <vTaskMissedYield+0x14>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	20000e60 	.word	0x20000e60

0800bd48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd4e:	2300      	movs	r3, #0
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	e00c      	b.n	800bd6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4a12      	ldr	r2, [pc, #72]	; (800bda8 <prvInitialiseTaskLists+0x60>)
 800bd60:	4413      	add	r3, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fb8c 	bl	800a480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b37      	cmp	r3, #55	; 0x37
 800bd72:	d9ef      	bls.n	800bd54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd74:	480d      	ldr	r0, [pc, #52]	; (800bdac <prvInitialiseTaskLists+0x64>)
 800bd76:	f7fe fb83 	bl	800a480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd7a:	480d      	ldr	r0, [pc, #52]	; (800bdb0 <prvInitialiseTaskLists+0x68>)
 800bd7c:	f7fe fb80 	bl	800a480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd80:	480c      	ldr	r0, [pc, #48]	; (800bdb4 <prvInitialiseTaskLists+0x6c>)
 800bd82:	f7fe fb7d 	bl	800a480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd86:	480c      	ldr	r0, [pc, #48]	; (800bdb8 <prvInitialiseTaskLists+0x70>)
 800bd88:	f7fe fb7a 	bl	800a480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd8c:	480b      	ldr	r0, [pc, #44]	; (800bdbc <prvInitialiseTaskLists+0x74>)
 800bd8e:	f7fe fb77 	bl	800a480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd92:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <prvInitialiseTaskLists+0x78>)
 800bd94:	4a05      	ldr	r2, [pc, #20]	; (800bdac <prvInitialiseTaskLists+0x64>)
 800bd96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <prvInitialiseTaskLists+0x7c>)
 800bd9a:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <prvInitialiseTaskLists+0x68>)
 800bd9c:	601a      	str	r2, [r3, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20000980 	.word	0x20000980
 800bdac:	20000de0 	.word	0x20000de0
 800bdb0:	20000df4 	.word	0x20000df4
 800bdb4:	20000e10 	.word	0x20000e10
 800bdb8:	20000e24 	.word	0x20000e24
 800bdbc:	20000e38 	.word	0x20000e38
 800bdc0:	20000e08 	.word	0x20000e08
 800bdc4:	20000e0c 	.word	0x20000e0c

0800bdc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdce:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <prvResetNextTaskUnblockTime+0x38>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <prvResetNextTaskUnblockTime+0x3c>)
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bde0:	e008      	b.n	800bdf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde2:	4b07      	ldr	r3, [pc, #28]	; (800be00 <prvResetNextTaskUnblockTime+0x38>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	4a04      	ldr	r2, [pc, #16]	; (800be04 <prvResetNextTaskUnblockTime+0x3c>)
 800bdf2:	6013      	str	r3, [r2, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20000e08 	.word	0x20000e08
 800be04:	20000e6c 	.word	0x20000e6c

0800be08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be0e:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <xTaskGetSchedulerState+0x34>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d102      	bne.n	800be1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be16:	2301      	movs	r3, #1
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	e008      	b.n	800be2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be1c:	4b08      	ldr	r3, [pc, #32]	; (800be40 <xTaskGetSchedulerState+0x38>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be24:	2302      	movs	r3, #2
 800be26:	607b      	str	r3, [r7, #4]
 800be28:	e001      	b.n	800be2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be2a:	2300      	movs	r3, #0
 800be2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be2e:	687b      	ldr	r3, [r7, #4]
	}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20000e58 	.word	0x20000e58
 800be40:	20000e70 	.word	0x20000e70

0800be44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d051      	beq.n	800befe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5e:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <xTaskPriorityInherit+0xc4>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	429a      	cmp	r2, r3
 800be66:	d241      	bcs.n	800beec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	db06      	blt.n	800be7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <xTaskPriorityInherit+0xc4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6959      	ldr	r1, [r3, #20]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4a1f      	ldr	r2, [pc, #124]	; (800bf0c <xTaskPriorityInherit+0xc8>)
 800be90:	4413      	add	r3, r2
 800be92:	4299      	cmp	r1, r3
 800be94:	d122      	bne.n	800bedc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	3304      	adds	r3, #4
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fb7a 	bl	800a594 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bea0:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <xTaskPriorityInherit+0xc4>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	4b18      	ldr	r3, [pc, #96]	; (800bf10 <xTaskPriorityInherit+0xcc>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d903      	bls.n	800bebe <xTaskPriorityInherit+0x7a>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	4a15      	ldr	r2, [pc, #84]	; (800bf10 <xTaskPriorityInherit+0xcc>)
 800bebc:	6013      	str	r3, [r2, #0]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec2:	4613      	mov	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4a10      	ldr	r2, [pc, #64]	; (800bf0c <xTaskPriorityInherit+0xc8>)
 800becc:	441a      	add	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7fe fb00 	bl	800a4da <vListInsertEnd>
 800beda:	e004      	b.n	800bee6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <xTaskPriorityInherit+0xc4>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bee6:	2301      	movs	r3, #1
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	e008      	b.n	800befe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bef0:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <xTaskPriorityInherit+0xc4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d201      	bcs.n	800befe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800befa:	2301      	movs	r3, #1
 800befc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800befe:	68fb      	ldr	r3, [r7, #12]
	}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	2000097c 	.word	0x2000097c
 800bf0c:	20000980 	.word	0x20000980
 800bf10:	20000e54 	.word	0x20000e54

0800bf14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf20:	2300      	movs	r3, #0
 800bf22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d056      	beq.n	800bfd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf2a:	4b2e      	ldr	r3, [pc, #184]	; (800bfe4 <xTaskPriorityDisinherit+0xd0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d00a      	beq.n	800bf4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	60fb      	str	r3, [r7, #12]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	60bb      	str	r3, [r7, #8]
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d02c      	beq.n	800bfd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d128      	bne.n	800bfd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fb02 	bl	800a594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <xTaskPriorityDisinherit+0xd4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d903      	bls.n	800bfb8 <xTaskPriorityDisinherit+0xa4>
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <xTaskPriorityDisinherit+0xd4>)
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4a09      	ldr	r2, [pc, #36]	; (800bfec <xTaskPriorityDisinherit+0xd8>)
 800bfc6:	441a      	add	r2, r3
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe fa83 	bl	800a4da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfd8:	697b      	ldr	r3, [r7, #20]
	}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000097c 	.word	0x2000097c
 800bfe8:	20000e54 	.word	0x20000e54
 800bfec:	20000980 	.word	0x20000980

0800bff0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bffe:	2301      	movs	r3, #1
 800c000:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d06a      	beq.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60fb      	str	r3, [r7, #12]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d902      	bls.n	800c036 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e002      	b.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	69fa      	ldr	r2, [r7, #28]
 800c042:	429a      	cmp	r2, r3
 800c044:	d04b      	beq.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d146      	bne.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c050:	4b25      	ldr	r3, [pc, #148]	; (800c0e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	429a      	cmp	r2, r3
 800c058:	d10a      	bne.n	800c070 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	60bb      	str	r3, [r7, #8]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	69fa      	ldr	r2, [r7, #28]
 800c07a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	db04      	blt.n	800c08e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	6959      	ldr	r1, [r3, #20]
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4a13      	ldr	r2, [pc, #76]	; (800c0ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c09e:	4413      	add	r3, r2
 800c0a0:	4299      	cmp	r1, r3
 800c0a2:	d11c      	bne.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe fa73 	bl	800a594 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d903      	bls.n	800c0c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	4a0c      	ldr	r2, [pc, #48]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4a07      	ldr	r2, [pc, #28]	; (800c0ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0d0:	441a      	add	r2, r3
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f7fe f9fe 	bl	800a4da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0de:	bf00      	nop
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2000097c 	.word	0x2000097c
 800c0ec:	20000980 	.word	0x20000980
 800c0f0:	20000e54 	.word	0x20000e54

0800c0f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c0f8:	4b07      	ldr	r3, [pc, #28]	; (800c118 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d004      	beq.n	800c10a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c100:	4b05      	ldr	r3, [pc, #20]	; (800c118 <pvTaskIncrementMutexHeldCount+0x24>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c106:	3201      	adds	r2, #1
 800c108:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c10a:	4b03      	ldr	r3, [pc, #12]	; (800c118 <pvTaskIncrementMutexHeldCount+0x24>)
 800c10c:	681b      	ldr	r3, [r3, #0]
	}
 800c10e:	4618      	mov	r0, r3
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	2000097c 	.word	0x2000097c

0800c11c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c126:	4b21      	ldr	r3, [pc, #132]	; (800c1ac <prvAddCurrentTaskToDelayedList+0x90>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c12c:	4b20      	ldr	r3, [pc, #128]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3304      	adds	r3, #4
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fa2e 	bl	800a594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13e:	d10a      	bne.n	800c156 <prvAddCurrentTaskToDelayedList+0x3a>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c146:	4b1a      	ldr	r3, [pc, #104]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3304      	adds	r3, #4
 800c14c:	4619      	mov	r1, r3
 800c14e:	4819      	ldr	r0, [pc, #100]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c150:	f7fe f9c3 	bl	800a4da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c154:	e026      	b.n	800c1a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4413      	add	r3, r2
 800c15c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c15e:	4b14      	ldr	r3, [pc, #80]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d209      	bcs.n	800c182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c16e:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3304      	adds	r3, #4
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fe f9d1 	bl	800a522 <vListInsert>
}
 800c180:	e010      	b.n	800c1a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c182:	4b0e      	ldr	r3, [pc, #56]	; (800c1bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	f7fe f9c7 	bl	800a522 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c194:	4b0a      	ldr	r3, [pc, #40]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d202      	bcs.n	800c1a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c19e:	4a08      	ldr	r2, [pc, #32]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	6013      	str	r3, [r2, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20000e50 	.word	0x20000e50
 800c1b0:	2000097c 	.word	0x2000097c
 800c1b4:	20000e38 	.word	0x20000e38
 800c1b8:	20000e0c 	.word	0x20000e0c
 800c1bc:	20000e08 	.word	0x20000e08
 800c1c0:	20000e6c 	.word	0x20000e6c

0800c1c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b04      	subs	r3, #4
 800c1d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f023 0201 	bic.w	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3b04      	subs	r3, #4
 800c1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1f4:	4a0c      	ldr	r2, [pc, #48]	; (800c228 <pxPortInitialiseStack+0x64>)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3b14      	subs	r3, #20
 800c1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3b04      	subs	r3, #4
 800c20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f06f 0202 	mvn.w	r2, #2
 800c212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3b20      	subs	r3, #32
 800c218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c21a:	68fb      	ldr	r3, [r7, #12]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	0800c22d 	.word	0x0800c22d

0800c22c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c236:	4b12      	ldr	r3, [pc, #72]	; (800c280 <prvTaskExitError+0x54>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d00a      	beq.n	800c256 <prvTaskExitError+0x2a>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <prvTaskExitError+0x28>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60bb      	str	r3, [r7, #8]
}
 800c268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c26a:	bf00      	nop
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0fc      	beq.n	800c26c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c272:	bf00      	nop
 800c274:	bf00      	nop
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	20000030 	.word	0x20000030
	...

0800c290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <pxCurrentTCBConst2>)
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	6808      	ldr	r0, [r1, #0]
 800c296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	f380 8809 	msr	PSP, r0
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8811 	msr	BASEPRI, r0
 800c2aa:	4770      	bx	lr
 800c2ac:	f3af 8000 	nop.w

0800c2b0 <pxCurrentTCBConst2>:
 800c2b0:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop

0800c2b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <vPortEnterCritical+0x58>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	4a0d      	ldr	r2, [pc, #52]	; (800c310 <vPortEnterCritical+0x58>)
 800c2da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2dc:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <vPortEnterCritical+0x58>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d10f      	bne.n	800c304 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2e4:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <vPortEnterCritical+0x5c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00a      	beq.n	800c304 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	603b      	str	r3, [r7, #0]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <vPortEnterCritical+0x4a>
	}
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	20000030 	.word	0x20000030
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c31e:	4b12      	ldr	r3, [pc, #72]	; (800c368 <vPortExitCritical+0x50>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <vPortExitCritical+0x24>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	607b      	str	r3, [r7, #4]
}
 800c338:	bf00      	nop
 800c33a:	e7fe      	b.n	800c33a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c33c:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <vPortExitCritical+0x50>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3b01      	subs	r3, #1
 800c342:	4a09      	ldr	r2, [pc, #36]	; (800c368 <vPortExitCritical+0x50>)
 800c344:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c346:	4b08      	ldr	r3, [pc, #32]	; (800c368 <vPortExitCritical+0x50>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d105      	bne.n	800c35a <vPortExitCritical+0x42>
 800c34e:	2300      	movs	r3, #0
 800c350:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	f383 8811 	msr	BASEPRI, r3
}
 800c358:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	20000030 	.word	0x20000030
 800c36c:	00000000 	.word	0x00000000

0800c370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c370:	f3ef 8009 	mrs	r0, PSP
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	4b15      	ldr	r3, [pc, #84]	; (800c3d0 <pxCurrentTCBConst>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f01e 0f10 	tst.w	lr, #16
 800c380:	bf08      	it	eq
 800c382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	6010      	str	r0, [r2, #0]
 800c38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c394:	f380 8811 	msr	BASEPRI, r0
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f7ff fb62 	bl	800ba68 <vTaskSwitchContext>
 800c3a4:	f04f 0000 	mov.w	r0, #0
 800c3a8:	f380 8811 	msr	BASEPRI, r0
 800c3ac:	bc09      	pop	{r0, r3}
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	6808      	ldr	r0, [r1, #0]
 800c3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b6:	f01e 0f10 	tst.w	lr, #16
 800c3ba:	bf08      	it	eq
 800c3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3c0:	f380 8809 	msr	PSP, r0
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <pxCurrentTCBConst>:
 800c3d0:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	607b      	str	r3, [r7, #4]
}
 800c3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3f2:	f7ff fa7f 	bl	800b8f4 <xTaskIncrementTick>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3fc:	4b06      	ldr	r3, [pc, #24]	; (800c418 <xPortSysTickHandler+0x40>)
 800c3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	2300      	movs	r3, #0
 800c406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	f383 8811 	msr	BASEPRI, r3
}
 800c40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c422:	f3ef 8305 	mrs	r3, IPSR
 800c426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b0f      	cmp	r3, #15
 800c42c:	d914      	bls.n	800c458 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c42e:	4a17      	ldr	r2, [pc, #92]	; (800c48c <vPortValidateInterruptPriority+0x70>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c438:	4b15      	ldr	r3, [pc, #84]	; (800c490 <vPortValidateInterruptPriority+0x74>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	7afa      	ldrb	r2, [r7, #11]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d20a      	bcs.n	800c458 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	607b      	str	r3, [r7, #4]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c458:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <vPortValidateInterruptPriority+0x78>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c460:	4b0d      	ldr	r3, [pc, #52]	; (800c498 <vPortValidateInterruptPriority+0x7c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d90a      	bls.n	800c47e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	603b      	str	r3, [r7, #0]
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <vPortValidateInterruptPriority+0x60>
	}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	e000e3f0 	.word	0xe000e3f0
 800c490:	20000e74 	.word	0x20000e74
 800c494:	e000ed0c 	.word	0xe000ed0c
 800c498:	20000e78 	.word	0x20000e78

0800c49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4a8:	f7ff f968 	bl	800b77c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4ac:	4b5b      	ldr	r3, [pc, #364]	; (800c61c <pvPortMalloc+0x180>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4b4:	f000 f920 	bl	800c6f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4b8:	4b59      	ldr	r3, [pc, #356]	; (800c620 <pvPortMalloc+0x184>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 8093 	bne.w	800c5ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01d      	beq.n	800c508 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4cc:	2208      	movs	r2, #8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d014      	beq.n	800c508 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <pvPortMalloc+0x6c>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	617b      	str	r3, [r7, #20]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d06e      	beq.n	800c5ec <pvPortMalloc+0x150>
 800c50e:	4b45      	ldr	r3, [pc, #276]	; (800c624 <pvPortMalloc+0x188>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d869      	bhi.n	800c5ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c518:	4b43      	ldr	r3, [pc, #268]	; (800c628 <pvPortMalloc+0x18c>)
 800c51a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c51c:	4b42      	ldr	r3, [pc, #264]	; (800c628 <pvPortMalloc+0x18c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c522:	e004      	b.n	800c52e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d903      	bls.n	800c540 <pvPortMalloc+0xa4>
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1f1      	bne.n	800c524 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c540:	4b36      	ldr	r3, [pc, #216]	; (800c61c <pvPortMalloc+0x180>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c546:	429a      	cmp	r2, r3
 800c548:	d050      	beq.n	800c5ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2208      	movs	r2, #8
 800c550:	4413      	add	r3, r2
 800c552:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1ad2      	subs	r2, r2, r3
 800c564:	2308      	movs	r3, #8
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	429a      	cmp	r2, r3
 800c56a:	d91f      	bls.n	800c5ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <pvPortMalloc+0xf8>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	613b      	str	r3, [r7, #16]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5a6:	69b8      	ldr	r0, [r7, #24]
 800c5a8:	f000 f908 	bl	800c7bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5ac:	4b1d      	ldr	r3, [pc, #116]	; (800c624 <pvPortMalloc+0x188>)
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	4a1b      	ldr	r2, [pc, #108]	; (800c624 <pvPortMalloc+0x188>)
 800c5b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ba:	4b1a      	ldr	r3, [pc, #104]	; (800c624 <pvPortMalloc+0x188>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b1b      	ldr	r3, [pc, #108]	; (800c62c <pvPortMalloc+0x190>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d203      	bcs.n	800c5ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5c6:	4b17      	ldr	r3, [pc, #92]	; (800c624 <pvPortMalloc+0x188>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a18      	ldr	r2, [pc, #96]	; (800c62c <pvPortMalloc+0x190>)
 800c5cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	4b13      	ldr	r3, [pc, #76]	; (800c620 <pvPortMalloc+0x184>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5e2:	4b13      	ldr	r3, [pc, #76]	; (800c630 <pvPortMalloc+0x194>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	4a11      	ldr	r2, [pc, #68]	; (800c630 <pvPortMalloc+0x194>)
 800c5ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5ec:	f7ff f8d4 	bl	800b798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <pvPortMalloc+0x174>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	60fb      	str	r3, [r7, #12]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <pvPortMalloc+0x172>
	return pvReturn;
 800c610:	69fb      	ldr	r3, [r7, #28]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3728      	adds	r7, #40	; 0x28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20001a3c 	.word	0x20001a3c
 800c620:	20001a50 	.word	0x20001a50
 800c624:	20001a40 	.word	0x20001a40
 800c628:	20001a34 	.word	0x20001a34
 800c62c:	20001a44 	.word	0x20001a44
 800c630:	20001a48 	.word	0x20001a48

0800c634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d04d      	beq.n	800c6e2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c646:	2308      	movs	r3, #8
 800c648:	425b      	negs	r3, r3
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4413      	add	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	4b24      	ldr	r3, [pc, #144]	; (800c6ec <vPortFree+0xb8>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4013      	ands	r3, r2
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <vPortFree+0x44>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60fb      	str	r3, [r7, #12]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <vPortFree+0x62>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60bb      	str	r3, [r7, #8]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	685a      	ldr	r2, [r3, #4]
 800c69a:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <vPortFree+0xb8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d01e      	beq.n	800c6e2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d11a      	bne.n	800c6e2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <vPortFree+0xb8>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	43db      	mvns	r3, r3
 800c6b6:	401a      	ands	r2, r3
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6bc:	f7ff f85e 	bl	800b77c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	; (800c6f0 <vPortFree+0xbc>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	4a09      	ldr	r2, [pc, #36]	; (800c6f0 <vPortFree+0xbc>)
 800c6cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6ce:	6938      	ldr	r0, [r7, #16]
 800c6d0:	f000 f874 	bl	800c7bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6d4:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <vPortFree+0xc0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	4a06      	ldr	r2, [pc, #24]	; (800c6f4 <vPortFree+0xc0>)
 800c6dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6de:	f7ff f85b 	bl	800b798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6e2:	bf00      	nop
 800c6e4:	3718      	adds	r7, #24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20001a50 	.word	0x20001a50
 800c6f0:	20001a40 	.word	0x20001a40
 800c6f4:	20001a4c 	.word	0x20001a4c

0800c6f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c704:	4b27      	ldr	r3, [pc, #156]	; (800c7a4 <prvHeapInit+0xac>)
 800c706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f003 0307 	and.w	r3, r3, #7
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00c      	beq.n	800c72c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3307      	adds	r3, #7
 800c716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0307 	bic.w	r3, r3, #7
 800c71e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	4a1f      	ldr	r2, [pc, #124]	; (800c7a4 <prvHeapInit+0xac>)
 800c728:	4413      	add	r3, r2
 800c72a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c730:	4a1d      	ldr	r2, [pc, #116]	; (800c7a8 <prvHeapInit+0xb0>)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c736:	4b1c      	ldr	r3, [pc, #112]	; (800c7a8 <prvHeapInit+0xb0>)
 800c738:	2200      	movs	r2, #0
 800c73a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	4413      	add	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c744:	2208      	movs	r2, #8
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	1a9b      	subs	r3, r3, r2
 800c74a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f023 0307 	bic.w	r3, r3, #7
 800c752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4a15      	ldr	r2, [pc, #84]	; (800c7ac <prvHeapInit+0xb4>)
 800c758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c75a:	4b14      	ldr	r3, [pc, #80]	; (800c7ac <prvHeapInit+0xb4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2200      	movs	r2, #0
 800c760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c762:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <prvHeapInit+0xb4>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	1ad2      	subs	r2, r2, r3
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c778:	4b0c      	ldr	r3, [pc, #48]	; (800c7ac <prvHeapInit+0xb4>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4a0a      	ldr	r2, [pc, #40]	; (800c7b0 <prvHeapInit+0xb8>)
 800c786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	4a09      	ldr	r2, [pc, #36]	; (800c7b4 <prvHeapInit+0xbc>)
 800c78e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c790:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <prvHeapInit+0xc0>)
 800c792:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c796:	601a      	str	r2, [r3, #0]
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	20000e7c 	.word	0x20000e7c
 800c7a8:	20001a34 	.word	0x20001a34
 800c7ac:	20001a3c 	.word	0x20001a3c
 800c7b0:	20001a44 	.word	0x20001a44
 800c7b4:	20001a40 	.word	0x20001a40
 800c7b8:	20001a50 	.word	0x20001a50

0800c7bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7c4:	4b28      	ldr	r3, [pc, #160]	; (800c868 <prvInsertBlockIntoFreeList+0xac>)
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	e002      	b.n	800c7d0 <prvInsertBlockIntoFreeList+0x14>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d8f7      	bhi.n	800c7ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d108      	bne.n	800c7fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	441a      	add	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d118      	bne.n	800c844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	4b15      	ldr	r3, [pc, #84]	; (800c86c <prvInsertBlockIntoFreeList+0xb0>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d00d      	beq.n	800c83a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	441a      	add	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	e008      	b.n	800c84c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c83a:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <prvInsertBlockIntoFreeList+0xb0>)
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
 800c842:	e003      	b.n	800c84c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d002      	beq.n	800c85a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c85a:	bf00      	nop
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	20001a34 	.word	0x20001a34
 800c86c:	20001a3c 	.word	0x20001a3c

0800c870 <__errno>:
 800c870:	4b01      	ldr	r3, [pc, #4]	; (800c878 <__errno+0x8>)
 800c872:	6818      	ldr	r0, [r3, #0]
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	20000034 	.word	0x20000034

0800c87c <std>:
 800c87c:	2300      	movs	r3, #0
 800c87e:	b510      	push	{r4, lr}
 800c880:	4604      	mov	r4, r0
 800c882:	e9c0 3300 	strd	r3, r3, [r0]
 800c886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c88a:	6083      	str	r3, [r0, #8]
 800c88c:	8181      	strh	r1, [r0, #12]
 800c88e:	6643      	str	r3, [r0, #100]	; 0x64
 800c890:	81c2      	strh	r2, [r0, #14]
 800c892:	6183      	str	r3, [r0, #24]
 800c894:	4619      	mov	r1, r3
 800c896:	2208      	movs	r2, #8
 800c898:	305c      	adds	r0, #92	; 0x5c
 800c89a:	f000 f92b 	bl	800caf4 <memset>
 800c89e:	4b05      	ldr	r3, [pc, #20]	; (800c8b4 <std+0x38>)
 800c8a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c8a2:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <std+0x3c>)
 800c8a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8a6:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <std+0x40>)
 800c8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <std+0x44>)
 800c8ac:	6224      	str	r4, [r4, #32]
 800c8ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800cd8d 	.word	0x0800cd8d
 800c8b8:	0800cdb3 	.word	0x0800cdb3
 800c8bc:	0800cdeb 	.word	0x0800cdeb
 800c8c0:	0800ce0f 	.word	0x0800ce0f

0800c8c4 <_cleanup_r>:
 800c8c4:	4901      	ldr	r1, [pc, #4]	; (800c8cc <_cleanup_r+0x8>)
 800c8c6:	f000 b8af 	b.w	800ca28 <_fwalk_reent>
 800c8ca:	bf00      	nop
 800c8cc:	0800dbed 	.word	0x0800dbed

0800c8d0 <__sfmoreglue>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	2268      	movs	r2, #104	; 0x68
 800c8d4:	1e4d      	subs	r5, r1, #1
 800c8d6:	4355      	muls	r5, r2
 800c8d8:	460e      	mov	r6, r1
 800c8da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8de:	f000 f97d 	bl	800cbdc <_malloc_r>
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	b140      	cbz	r0, 800c8f8 <__sfmoreglue+0x28>
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c8ec:	300c      	adds	r0, #12
 800c8ee:	60a0      	str	r0, [r4, #8]
 800c8f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8f4:	f000 f8fe 	bl	800caf4 <memset>
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}

0800c8fc <__sfp_lock_acquire>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	; (800c904 <__sfp_lock_acquire+0x8>)
 800c8fe:	f000 b8d8 	b.w	800cab2 <__retarget_lock_acquire_recursive>
 800c902:	bf00      	nop
 800c904:	20001a55 	.word	0x20001a55

0800c908 <__sfp_lock_release>:
 800c908:	4801      	ldr	r0, [pc, #4]	; (800c910 <__sfp_lock_release+0x8>)
 800c90a:	f000 b8d3 	b.w	800cab4 <__retarget_lock_release_recursive>
 800c90e:	bf00      	nop
 800c910:	20001a55 	.word	0x20001a55

0800c914 <__sinit_lock_acquire>:
 800c914:	4801      	ldr	r0, [pc, #4]	; (800c91c <__sinit_lock_acquire+0x8>)
 800c916:	f000 b8cc 	b.w	800cab2 <__retarget_lock_acquire_recursive>
 800c91a:	bf00      	nop
 800c91c:	20001a56 	.word	0x20001a56

0800c920 <__sinit_lock_release>:
 800c920:	4801      	ldr	r0, [pc, #4]	; (800c928 <__sinit_lock_release+0x8>)
 800c922:	f000 b8c7 	b.w	800cab4 <__retarget_lock_release_recursive>
 800c926:	bf00      	nop
 800c928:	20001a56 	.word	0x20001a56

0800c92c <__sinit>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	4604      	mov	r4, r0
 800c930:	f7ff fff0 	bl	800c914 <__sinit_lock_acquire>
 800c934:	69a3      	ldr	r3, [r4, #24]
 800c936:	b11b      	cbz	r3, 800c940 <__sinit+0x14>
 800c938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c93c:	f7ff bff0 	b.w	800c920 <__sinit_lock_release>
 800c940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c944:	6523      	str	r3, [r4, #80]	; 0x50
 800c946:	4b13      	ldr	r3, [pc, #76]	; (800c994 <__sinit+0x68>)
 800c948:	4a13      	ldr	r2, [pc, #76]	; (800c998 <__sinit+0x6c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c94e:	42a3      	cmp	r3, r4
 800c950:	bf04      	itt	eq
 800c952:	2301      	moveq	r3, #1
 800c954:	61a3      	streq	r3, [r4, #24]
 800c956:	4620      	mov	r0, r4
 800c958:	f000 f820 	bl	800c99c <__sfp>
 800c95c:	6060      	str	r0, [r4, #4]
 800c95e:	4620      	mov	r0, r4
 800c960:	f000 f81c 	bl	800c99c <__sfp>
 800c964:	60a0      	str	r0, [r4, #8]
 800c966:	4620      	mov	r0, r4
 800c968:	f000 f818 	bl	800c99c <__sfp>
 800c96c:	2200      	movs	r2, #0
 800c96e:	60e0      	str	r0, [r4, #12]
 800c970:	2104      	movs	r1, #4
 800c972:	6860      	ldr	r0, [r4, #4]
 800c974:	f7ff ff82 	bl	800c87c <std>
 800c978:	68a0      	ldr	r0, [r4, #8]
 800c97a:	2201      	movs	r2, #1
 800c97c:	2109      	movs	r1, #9
 800c97e:	f7ff ff7d 	bl	800c87c <std>
 800c982:	68e0      	ldr	r0, [r4, #12]
 800c984:	2202      	movs	r2, #2
 800c986:	2112      	movs	r1, #18
 800c988:	f7ff ff78 	bl	800c87c <std>
 800c98c:	2301      	movs	r3, #1
 800c98e:	61a3      	str	r3, [r4, #24]
 800c990:	e7d2      	b.n	800c938 <__sinit+0xc>
 800c992:	bf00      	nop
 800c994:	080106e0 	.word	0x080106e0
 800c998:	0800c8c5 	.word	0x0800c8c5

0800c99c <__sfp>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	4607      	mov	r7, r0
 800c9a0:	f7ff ffac 	bl	800c8fc <__sfp_lock_acquire>
 800c9a4:	4b1e      	ldr	r3, [pc, #120]	; (800ca20 <__sfp+0x84>)
 800c9a6:	681e      	ldr	r6, [r3, #0]
 800c9a8:	69b3      	ldr	r3, [r6, #24]
 800c9aa:	b913      	cbnz	r3, 800c9b2 <__sfp+0x16>
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff ffbd 	bl	800c92c <__sinit>
 800c9b2:	3648      	adds	r6, #72	; 0x48
 800c9b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	d503      	bpl.n	800c9c4 <__sfp+0x28>
 800c9bc:	6833      	ldr	r3, [r6, #0]
 800c9be:	b30b      	cbz	r3, 800ca04 <__sfp+0x68>
 800c9c0:	6836      	ldr	r6, [r6, #0]
 800c9c2:	e7f7      	b.n	800c9b4 <__sfp+0x18>
 800c9c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9c8:	b9d5      	cbnz	r5, 800ca00 <__sfp+0x64>
 800c9ca:	4b16      	ldr	r3, [pc, #88]	; (800ca24 <__sfp+0x88>)
 800c9cc:	60e3      	str	r3, [r4, #12]
 800c9ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c9d4:	f000 f86c 	bl	800cab0 <__retarget_lock_init_recursive>
 800c9d8:	f7ff ff96 	bl	800c908 <__sfp_lock_release>
 800c9dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9e4:	6025      	str	r5, [r4, #0]
 800c9e6:	61a5      	str	r5, [r4, #24]
 800c9e8:	2208      	movs	r2, #8
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9f0:	f000 f880 	bl	800caf4 <memset>
 800c9f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca00:	3468      	adds	r4, #104	; 0x68
 800ca02:	e7d9      	b.n	800c9b8 <__sfp+0x1c>
 800ca04:	2104      	movs	r1, #4
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7ff ff62 	bl	800c8d0 <__sfmoreglue>
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	6030      	str	r0, [r6, #0]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d1d5      	bne.n	800c9c0 <__sfp+0x24>
 800ca14:	f7ff ff78 	bl	800c908 <__sfp_lock_release>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	e7ee      	b.n	800c9fc <__sfp+0x60>
 800ca1e:	bf00      	nop
 800ca20:	080106e0 	.word	0x080106e0
 800ca24:	ffff0001 	.word	0xffff0001

0800ca28 <_fwalk_reent>:
 800ca28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	4688      	mov	r8, r1
 800ca30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca34:	2700      	movs	r7, #0
 800ca36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca3a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca3e:	d505      	bpl.n	800ca4c <_fwalk_reent+0x24>
 800ca40:	6824      	ldr	r4, [r4, #0]
 800ca42:	2c00      	cmp	r4, #0
 800ca44:	d1f7      	bne.n	800ca36 <_fwalk_reent+0xe>
 800ca46:	4638      	mov	r0, r7
 800ca48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4c:	89ab      	ldrh	r3, [r5, #12]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d907      	bls.n	800ca62 <_fwalk_reent+0x3a>
 800ca52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca56:	3301      	adds	r3, #1
 800ca58:	d003      	beq.n	800ca62 <_fwalk_reent+0x3a>
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	47c0      	blx	r8
 800ca60:	4307      	orrs	r7, r0
 800ca62:	3568      	adds	r5, #104	; 0x68
 800ca64:	e7e9      	b.n	800ca3a <_fwalk_reent+0x12>
	...

0800ca68 <__libc_init_array>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	4d0d      	ldr	r5, [pc, #52]	; (800caa0 <__libc_init_array+0x38>)
 800ca6c:	4c0d      	ldr	r4, [pc, #52]	; (800caa4 <__libc_init_array+0x3c>)
 800ca6e:	1b64      	subs	r4, r4, r5
 800ca70:	10a4      	asrs	r4, r4, #2
 800ca72:	2600      	movs	r6, #0
 800ca74:	42a6      	cmp	r6, r4
 800ca76:	d109      	bne.n	800ca8c <__libc_init_array+0x24>
 800ca78:	4d0b      	ldr	r5, [pc, #44]	; (800caa8 <__libc_init_array+0x40>)
 800ca7a:	4c0c      	ldr	r4, [pc, #48]	; (800caac <__libc_init_array+0x44>)
 800ca7c:	f003 fc7e 	bl	801037c <_init>
 800ca80:	1b64      	subs	r4, r4, r5
 800ca82:	10a4      	asrs	r4, r4, #2
 800ca84:	2600      	movs	r6, #0
 800ca86:	42a6      	cmp	r6, r4
 800ca88:	d105      	bne.n	800ca96 <__libc_init_array+0x2e>
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca90:	4798      	blx	r3
 800ca92:	3601      	adds	r6, #1
 800ca94:	e7ee      	b.n	800ca74 <__libc_init_array+0xc>
 800ca96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca9a:	4798      	blx	r3
 800ca9c:	3601      	adds	r6, #1
 800ca9e:	e7f2      	b.n	800ca86 <__libc_init_array+0x1e>
 800caa0:	080109d0 	.word	0x080109d0
 800caa4:	080109d0 	.word	0x080109d0
 800caa8:	080109d0 	.word	0x080109d0
 800caac:	080109d4 	.word	0x080109d4

0800cab0 <__retarget_lock_init_recursive>:
 800cab0:	4770      	bx	lr

0800cab2 <__retarget_lock_acquire_recursive>:
 800cab2:	4770      	bx	lr

0800cab4 <__retarget_lock_release_recursive>:
 800cab4:	4770      	bx	lr
	...

0800cab8 <malloc>:
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <malloc+0xc>)
 800caba:	4601      	mov	r1, r0
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	f000 b88d 	b.w	800cbdc <_malloc_r>
 800cac2:	bf00      	nop
 800cac4:	20000034 	.word	0x20000034

0800cac8 <free>:
 800cac8:	4b02      	ldr	r3, [pc, #8]	; (800cad4 <free+0xc>)
 800caca:	4601      	mov	r1, r0
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	f000 b819 	b.w	800cb04 <_free_r>
 800cad2:	bf00      	nop
 800cad4:	20000034 	.word	0x20000034

0800cad8 <memcpy>:
 800cad8:	440a      	add	r2, r1
 800cada:	4291      	cmp	r1, r2
 800cadc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae0:	d100      	bne.n	800cae4 <memcpy+0xc>
 800cae2:	4770      	bx	lr
 800cae4:	b510      	push	{r4, lr}
 800cae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caee:	4291      	cmp	r1, r2
 800caf0:	d1f9      	bne.n	800cae6 <memcpy+0xe>
 800caf2:	bd10      	pop	{r4, pc}

0800caf4 <memset>:
 800caf4:	4402      	add	r2, r0
 800caf6:	4603      	mov	r3, r0
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d100      	bne.n	800cafe <memset+0xa>
 800cafc:	4770      	bx	lr
 800cafe:	f803 1b01 	strb.w	r1, [r3], #1
 800cb02:	e7f9      	b.n	800caf8 <memset+0x4>

0800cb04 <_free_r>:
 800cb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb06:	2900      	cmp	r1, #0
 800cb08:	d044      	beq.n	800cb94 <_free_r+0x90>
 800cb0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0e:	9001      	str	r0, [sp, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f1a1 0404 	sub.w	r4, r1, #4
 800cb16:	bfb8      	it	lt
 800cb18:	18e4      	addlt	r4, r4, r3
 800cb1a:	f001 fc37 	bl	800e38c <__malloc_lock>
 800cb1e:	4a1e      	ldr	r2, [pc, #120]	; (800cb98 <_free_r+0x94>)
 800cb20:	9801      	ldr	r0, [sp, #4]
 800cb22:	6813      	ldr	r3, [r2, #0]
 800cb24:	b933      	cbnz	r3, 800cb34 <_free_r+0x30>
 800cb26:	6063      	str	r3, [r4, #4]
 800cb28:	6014      	str	r4, [r2, #0]
 800cb2a:	b003      	add	sp, #12
 800cb2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb30:	f001 bc32 	b.w	800e398 <__malloc_unlock>
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	d908      	bls.n	800cb4a <_free_r+0x46>
 800cb38:	6825      	ldr	r5, [r4, #0]
 800cb3a:	1961      	adds	r1, r4, r5
 800cb3c:	428b      	cmp	r3, r1
 800cb3e:	bf01      	itttt	eq
 800cb40:	6819      	ldreq	r1, [r3, #0]
 800cb42:	685b      	ldreq	r3, [r3, #4]
 800cb44:	1949      	addeq	r1, r1, r5
 800cb46:	6021      	streq	r1, [r4, #0]
 800cb48:	e7ed      	b.n	800cb26 <_free_r+0x22>
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	b10b      	cbz	r3, 800cb54 <_free_r+0x50>
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	d9fa      	bls.n	800cb4a <_free_r+0x46>
 800cb54:	6811      	ldr	r1, [r2, #0]
 800cb56:	1855      	adds	r5, r2, r1
 800cb58:	42a5      	cmp	r5, r4
 800cb5a:	d10b      	bne.n	800cb74 <_free_r+0x70>
 800cb5c:	6824      	ldr	r4, [r4, #0]
 800cb5e:	4421      	add	r1, r4
 800cb60:	1854      	adds	r4, r2, r1
 800cb62:	42a3      	cmp	r3, r4
 800cb64:	6011      	str	r1, [r2, #0]
 800cb66:	d1e0      	bne.n	800cb2a <_free_r+0x26>
 800cb68:	681c      	ldr	r4, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	6053      	str	r3, [r2, #4]
 800cb6e:	4421      	add	r1, r4
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	e7da      	b.n	800cb2a <_free_r+0x26>
 800cb74:	d902      	bls.n	800cb7c <_free_r+0x78>
 800cb76:	230c      	movs	r3, #12
 800cb78:	6003      	str	r3, [r0, #0]
 800cb7a:	e7d6      	b.n	800cb2a <_free_r+0x26>
 800cb7c:	6825      	ldr	r5, [r4, #0]
 800cb7e:	1961      	adds	r1, r4, r5
 800cb80:	428b      	cmp	r3, r1
 800cb82:	bf04      	itt	eq
 800cb84:	6819      	ldreq	r1, [r3, #0]
 800cb86:	685b      	ldreq	r3, [r3, #4]
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	bf04      	itt	eq
 800cb8c:	1949      	addeq	r1, r1, r5
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	6054      	str	r4, [r2, #4]
 800cb92:	e7ca      	b.n	800cb2a <_free_r+0x26>
 800cb94:	b003      	add	sp, #12
 800cb96:	bd30      	pop	{r4, r5, pc}
 800cb98:	20001a58 	.word	0x20001a58

0800cb9c <sbrk_aligned>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	4e0e      	ldr	r6, [pc, #56]	; (800cbd8 <sbrk_aligned+0x3c>)
 800cba0:	460c      	mov	r4, r1
 800cba2:	6831      	ldr	r1, [r6, #0]
 800cba4:	4605      	mov	r5, r0
 800cba6:	b911      	cbnz	r1, 800cbae <sbrk_aligned+0x12>
 800cba8:	f000 f894 	bl	800ccd4 <_sbrk_r>
 800cbac:	6030      	str	r0, [r6, #0]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f000 f88f 	bl	800ccd4 <_sbrk_r>
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	d00a      	beq.n	800cbd0 <sbrk_aligned+0x34>
 800cbba:	1cc4      	adds	r4, r0, #3
 800cbbc:	f024 0403 	bic.w	r4, r4, #3
 800cbc0:	42a0      	cmp	r0, r4
 800cbc2:	d007      	beq.n	800cbd4 <sbrk_aligned+0x38>
 800cbc4:	1a21      	subs	r1, r4, r0
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f000 f884 	bl	800ccd4 <_sbrk_r>
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d101      	bne.n	800cbd4 <sbrk_aligned+0x38>
 800cbd0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	20001a5c 	.word	0x20001a5c

0800cbdc <_malloc_r>:
 800cbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe0:	1ccd      	adds	r5, r1, #3
 800cbe2:	f025 0503 	bic.w	r5, r5, #3
 800cbe6:	3508      	adds	r5, #8
 800cbe8:	2d0c      	cmp	r5, #12
 800cbea:	bf38      	it	cc
 800cbec:	250c      	movcc	r5, #12
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	4607      	mov	r7, r0
 800cbf2:	db01      	blt.n	800cbf8 <_malloc_r+0x1c>
 800cbf4:	42a9      	cmp	r1, r5
 800cbf6:	d905      	bls.n	800cc04 <_malloc_r+0x28>
 800cbf8:	230c      	movs	r3, #12
 800cbfa:	603b      	str	r3, [r7, #0]
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	4630      	mov	r0, r6
 800cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc04:	4e2e      	ldr	r6, [pc, #184]	; (800ccc0 <_malloc_r+0xe4>)
 800cc06:	f001 fbc1 	bl	800e38c <__malloc_lock>
 800cc0a:	6833      	ldr	r3, [r6, #0]
 800cc0c:	461c      	mov	r4, r3
 800cc0e:	bb34      	cbnz	r4, 800cc5e <_malloc_r+0x82>
 800cc10:	4629      	mov	r1, r5
 800cc12:	4638      	mov	r0, r7
 800cc14:	f7ff ffc2 	bl	800cb9c <sbrk_aligned>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	d14d      	bne.n	800ccba <_malloc_r+0xde>
 800cc1e:	6834      	ldr	r4, [r6, #0]
 800cc20:	4626      	mov	r6, r4
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	d140      	bne.n	800cca8 <_malloc_r+0xcc>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	4631      	mov	r1, r6
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	eb04 0803 	add.w	r8, r4, r3
 800cc30:	f000 f850 	bl	800ccd4 <_sbrk_r>
 800cc34:	4580      	cmp	r8, r0
 800cc36:	d13a      	bne.n	800ccae <_malloc_r+0xd2>
 800cc38:	6821      	ldr	r1, [r4, #0]
 800cc3a:	3503      	adds	r5, #3
 800cc3c:	1a6d      	subs	r5, r5, r1
 800cc3e:	f025 0503 	bic.w	r5, r5, #3
 800cc42:	3508      	adds	r5, #8
 800cc44:	2d0c      	cmp	r5, #12
 800cc46:	bf38      	it	cc
 800cc48:	250c      	movcc	r5, #12
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f7ff ffa5 	bl	800cb9c <sbrk_aligned>
 800cc52:	3001      	adds	r0, #1
 800cc54:	d02b      	beq.n	800ccae <_malloc_r+0xd2>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	442b      	add	r3, r5
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	e00e      	b.n	800cc7c <_malloc_r+0xa0>
 800cc5e:	6822      	ldr	r2, [r4, #0]
 800cc60:	1b52      	subs	r2, r2, r5
 800cc62:	d41e      	bmi.n	800cca2 <_malloc_r+0xc6>
 800cc64:	2a0b      	cmp	r2, #11
 800cc66:	d916      	bls.n	800cc96 <_malloc_r+0xba>
 800cc68:	1961      	adds	r1, r4, r5
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	6025      	str	r5, [r4, #0]
 800cc6e:	bf18      	it	ne
 800cc70:	6059      	strne	r1, [r3, #4]
 800cc72:	6863      	ldr	r3, [r4, #4]
 800cc74:	bf08      	it	eq
 800cc76:	6031      	streq	r1, [r6, #0]
 800cc78:	5162      	str	r2, [r4, r5]
 800cc7a:	604b      	str	r3, [r1, #4]
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f104 060b 	add.w	r6, r4, #11
 800cc82:	f001 fb89 	bl	800e398 <__malloc_unlock>
 800cc86:	f026 0607 	bic.w	r6, r6, #7
 800cc8a:	1d23      	adds	r3, r4, #4
 800cc8c:	1af2      	subs	r2, r6, r3
 800cc8e:	d0b6      	beq.n	800cbfe <_malloc_r+0x22>
 800cc90:	1b9b      	subs	r3, r3, r6
 800cc92:	50a3      	str	r3, [r4, r2]
 800cc94:	e7b3      	b.n	800cbfe <_malloc_r+0x22>
 800cc96:	6862      	ldr	r2, [r4, #4]
 800cc98:	42a3      	cmp	r3, r4
 800cc9a:	bf0c      	ite	eq
 800cc9c:	6032      	streq	r2, [r6, #0]
 800cc9e:	605a      	strne	r2, [r3, #4]
 800cca0:	e7ec      	b.n	800cc7c <_malloc_r+0xa0>
 800cca2:	4623      	mov	r3, r4
 800cca4:	6864      	ldr	r4, [r4, #4]
 800cca6:	e7b2      	b.n	800cc0e <_malloc_r+0x32>
 800cca8:	4634      	mov	r4, r6
 800ccaa:	6876      	ldr	r6, [r6, #4]
 800ccac:	e7b9      	b.n	800cc22 <_malloc_r+0x46>
 800ccae:	230c      	movs	r3, #12
 800ccb0:	603b      	str	r3, [r7, #0]
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f001 fb70 	bl	800e398 <__malloc_unlock>
 800ccb8:	e7a1      	b.n	800cbfe <_malloc_r+0x22>
 800ccba:	6025      	str	r5, [r4, #0]
 800ccbc:	e7de      	b.n	800cc7c <_malloc_r+0xa0>
 800ccbe:	bf00      	nop
 800ccc0:	20001a58 	.word	0x20001a58

0800ccc4 <realloc>:
 800ccc4:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <realloc+0xc>)
 800ccc6:	460a      	mov	r2, r1
 800ccc8:	4601      	mov	r1, r0
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	f002 b841 	b.w	800ed52 <_realloc_r>
 800ccd0:	20000034 	.word	0x20000034

0800ccd4 <_sbrk_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	; (800ccf0 <_sbrk_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f7 fd70 	bl	80047c4 <_sbrk>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_sbrk_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_sbrk_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	20001a60 	.word	0x20001a60

0800ccf4 <siprintf>:
 800ccf4:	b40e      	push	{r1, r2, r3}
 800ccf6:	b500      	push	{lr}
 800ccf8:	b09c      	sub	sp, #112	; 0x70
 800ccfa:	ab1d      	add	r3, sp, #116	; 0x74
 800ccfc:	9002      	str	r0, [sp, #8]
 800ccfe:	9006      	str	r0, [sp, #24]
 800cd00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd04:	4809      	ldr	r0, [pc, #36]	; (800cd2c <siprintf+0x38>)
 800cd06:	9107      	str	r1, [sp, #28]
 800cd08:	9104      	str	r1, [sp, #16]
 800cd0a:	4909      	ldr	r1, [pc, #36]	; (800cd30 <siprintf+0x3c>)
 800cd0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd10:	9105      	str	r1, [sp, #20]
 800cd12:	6800      	ldr	r0, [r0, #0]
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	a902      	add	r1, sp, #8
 800cd18:	f002 f8a6 	bl	800ee68 <_svfiprintf_r>
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	701a      	strb	r2, [r3, #0]
 800cd22:	b01c      	add	sp, #112	; 0x70
 800cd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd28:	b003      	add	sp, #12
 800cd2a:	4770      	bx	lr
 800cd2c:	20000034 	.word	0x20000034
 800cd30:	ffff0208 	.word	0xffff0208

0800cd34 <siscanf>:
 800cd34:	b40e      	push	{r1, r2, r3}
 800cd36:	b510      	push	{r4, lr}
 800cd38:	b09f      	sub	sp, #124	; 0x7c
 800cd3a:	ac21      	add	r4, sp, #132	; 0x84
 800cd3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cd40:	f854 2b04 	ldr.w	r2, [r4], #4
 800cd44:	9201      	str	r2, [sp, #4]
 800cd46:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cd4a:	9004      	str	r0, [sp, #16]
 800cd4c:	9008      	str	r0, [sp, #32]
 800cd4e:	f7f3 fa51 	bl	80001f4 <strlen>
 800cd52:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <siscanf+0x50>)
 800cd54:	9005      	str	r0, [sp, #20]
 800cd56:	9009      	str	r0, [sp, #36]	; 0x24
 800cd58:	930d      	str	r3, [sp, #52]	; 0x34
 800cd5a:	480b      	ldr	r0, [pc, #44]	; (800cd88 <siscanf+0x54>)
 800cd5c:	9a01      	ldr	r2, [sp, #4]
 800cd5e:	6800      	ldr	r0, [r0, #0]
 800cd60:	9403      	str	r4, [sp, #12]
 800cd62:	2300      	movs	r3, #0
 800cd64:	9311      	str	r3, [sp, #68]	; 0x44
 800cd66:	9316      	str	r3, [sp, #88]	; 0x58
 800cd68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cd70:	a904      	add	r1, sp, #16
 800cd72:	4623      	mov	r3, r4
 800cd74:	f002 f9d2 	bl	800f11c <__ssvfiscanf_r>
 800cd78:	b01f      	add	sp, #124	; 0x7c
 800cd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7e:	b003      	add	sp, #12
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	0800cdaf 	.word	0x0800cdaf
 800cd88:	20000034 	.word	0x20000034

0800cd8c <__sread>:
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	460c      	mov	r4, r1
 800cd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd94:	f002 fe20 	bl	800f9d8 <_read_r>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	bfab      	itete	ge
 800cd9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd9e:	89a3      	ldrhlt	r3, [r4, #12]
 800cda0:	181b      	addge	r3, r3, r0
 800cda2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cda6:	bfac      	ite	ge
 800cda8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdaa:	81a3      	strhlt	r3, [r4, #12]
 800cdac:	bd10      	pop	{r4, pc}

0800cdae <__seofread>:
 800cdae:	2000      	movs	r0, #0
 800cdb0:	4770      	bx	lr

0800cdb2 <__swrite>:
 800cdb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	898b      	ldrh	r3, [r1, #12]
 800cdba:	05db      	lsls	r3, r3, #23
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	4616      	mov	r6, r2
 800cdc2:	d505      	bpl.n	800cdd0 <__swrite+0x1e>
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	2302      	movs	r3, #2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f001 faba 	bl	800e344 <_lseek_r>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdda:	81a3      	strh	r3, [r4, #12]
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	4628      	mov	r0, r5
 800cde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cde6:	f000 be59 	b.w	800da9c <_write_r>

0800cdea <__sseek>:
 800cdea:	b510      	push	{r4, lr}
 800cdec:	460c      	mov	r4, r1
 800cdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf2:	f001 faa7 	bl	800e344 <_lseek_r>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	bf15      	itete	ne
 800cdfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce06:	81a3      	strheq	r3, [r4, #12]
 800ce08:	bf18      	it	ne
 800ce0a:	81a3      	strhne	r3, [r4, #12]
 800ce0c:	bd10      	pop	{r4, pc}

0800ce0e <__sclose>:
 800ce0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce12:	f000 be55 	b.w	800dac0 <_close_r>

0800ce16 <strncmp>:
 800ce16:	b510      	push	{r4, lr}
 800ce18:	b17a      	cbz	r2, 800ce3a <strncmp+0x24>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	3901      	subs	r1, #1
 800ce1e:	1884      	adds	r4, r0, r2
 800ce20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce28:	4290      	cmp	r0, r2
 800ce2a:	d101      	bne.n	800ce30 <strncmp+0x1a>
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	d101      	bne.n	800ce34 <strncmp+0x1e>
 800ce30:	1a80      	subs	r0, r0, r2
 800ce32:	bd10      	pop	{r4, pc}
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d1f3      	bne.n	800ce20 <strncmp+0xa>
 800ce38:	e7fa      	b.n	800ce30 <strncmp+0x1a>
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	e7f9      	b.n	800ce32 <strncmp+0x1c>

0800ce3e <sulp>:
 800ce3e:	b570      	push	{r4, r5, r6, lr}
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	ec45 4b10 	vmov	d0, r4, r5
 800ce48:	4616      	mov	r6, r2
 800ce4a:	f001 fe1d 	bl	800ea88 <__ulp>
 800ce4e:	ec51 0b10 	vmov	r0, r1, d0
 800ce52:	b17e      	cbz	r6, 800ce74 <sulp+0x36>
 800ce54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dd09      	ble.n	800ce74 <sulp+0x36>
 800ce60:	051b      	lsls	r3, r3, #20
 800ce62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ce66:	2400      	movs	r4, #0
 800ce68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	462b      	mov	r3, r5
 800ce70:	f7f3 fbda 	bl	8000628 <__aeabi_dmul>
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce78 <_strtod_l>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	ed2d 8b02 	vpush	{d8}
 800ce80:	b09d      	sub	sp, #116	; 0x74
 800ce82:	461f      	mov	r7, r3
 800ce84:	2300      	movs	r3, #0
 800ce86:	9318      	str	r3, [sp, #96]	; 0x60
 800ce88:	4ba2      	ldr	r3, [pc, #648]	; (800d114 <_strtod_l+0x29c>)
 800ce8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	9305      	str	r3, [sp, #20]
 800ce90:	4604      	mov	r4, r0
 800ce92:	4618      	mov	r0, r3
 800ce94:	4688      	mov	r8, r1
 800ce96:	f7f3 f9ad 	bl	80001f4 <strlen>
 800ce9a:	f04f 0a00 	mov.w	sl, #0
 800ce9e:	4605      	mov	r5, r0
 800cea0:	f04f 0b00 	mov.w	fp, #0
 800cea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceaa:	781a      	ldrb	r2, [r3, #0]
 800ceac:	2a2b      	cmp	r2, #43	; 0x2b
 800ceae:	d04e      	beq.n	800cf4e <_strtod_l+0xd6>
 800ceb0:	d83b      	bhi.n	800cf2a <_strtod_l+0xb2>
 800ceb2:	2a0d      	cmp	r2, #13
 800ceb4:	d834      	bhi.n	800cf20 <_strtod_l+0xa8>
 800ceb6:	2a08      	cmp	r2, #8
 800ceb8:	d834      	bhi.n	800cf24 <_strtod_l+0xac>
 800ceba:	2a00      	cmp	r2, #0
 800cebc:	d03e      	beq.n	800cf3c <_strtod_l+0xc4>
 800cebe:	2300      	movs	r3, #0
 800cec0:	930a      	str	r3, [sp, #40]	; 0x28
 800cec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cec4:	7833      	ldrb	r3, [r6, #0]
 800cec6:	2b30      	cmp	r3, #48	; 0x30
 800cec8:	f040 80b0 	bne.w	800d02c <_strtod_l+0x1b4>
 800cecc:	7873      	ldrb	r3, [r6, #1]
 800cece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ced2:	2b58      	cmp	r3, #88	; 0x58
 800ced4:	d168      	bne.n	800cfa8 <_strtod_l+0x130>
 800ced6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	ab18      	add	r3, sp, #96	; 0x60
 800cedc:	9702      	str	r7, [sp, #8]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	4a8d      	ldr	r2, [pc, #564]	; (800d118 <_strtod_l+0x2a0>)
 800cee2:	ab19      	add	r3, sp, #100	; 0x64
 800cee4:	a917      	add	r1, sp, #92	; 0x5c
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 ff24 	bl	800dd34 <__gethex>
 800ceec:	f010 0707 	ands.w	r7, r0, #7
 800cef0:	4605      	mov	r5, r0
 800cef2:	d005      	beq.n	800cf00 <_strtod_l+0x88>
 800cef4:	2f06      	cmp	r7, #6
 800cef6:	d12c      	bne.n	800cf52 <_strtod_l+0xda>
 800cef8:	3601      	adds	r6, #1
 800cefa:	2300      	movs	r3, #0
 800cefc:	9617      	str	r6, [sp, #92]	; 0x5c
 800cefe:	930a      	str	r3, [sp, #40]	; 0x28
 800cf00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f040 8590 	bne.w	800da28 <_strtod_l+0xbb0>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0a:	b1eb      	cbz	r3, 800cf48 <_strtod_l+0xd0>
 800cf0c:	4652      	mov	r2, sl
 800cf0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf12:	ec43 2b10 	vmov	d0, r2, r3
 800cf16:	b01d      	add	sp, #116	; 0x74
 800cf18:	ecbd 8b02 	vpop	{d8}
 800cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	2a20      	cmp	r2, #32
 800cf22:	d1cc      	bne.n	800cebe <_strtod_l+0x46>
 800cf24:	3301      	adds	r3, #1
 800cf26:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf28:	e7be      	b.n	800cea8 <_strtod_l+0x30>
 800cf2a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf2c:	d1c7      	bne.n	800cebe <_strtod_l+0x46>
 800cf2e:	2201      	movs	r2, #1
 800cf30:	920a      	str	r2, [sp, #40]	; 0x28
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1c2      	bne.n	800cec2 <_strtod_l+0x4a>
 800cf3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 856e 	bne.w	800da24 <_strtod_l+0xbac>
 800cf48:	4652      	mov	r2, sl
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	e7e1      	b.n	800cf12 <_strtod_l+0x9a>
 800cf4e:	2200      	movs	r2, #0
 800cf50:	e7ee      	b.n	800cf30 <_strtod_l+0xb8>
 800cf52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf54:	b13a      	cbz	r2, 800cf66 <_strtod_l+0xee>
 800cf56:	2135      	movs	r1, #53	; 0x35
 800cf58:	a81a      	add	r0, sp, #104	; 0x68
 800cf5a:	f001 fea0 	bl	800ec9e <__copybits>
 800cf5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf60:	4620      	mov	r0, r4
 800cf62:	f001 fa5f 	bl	800e424 <_Bfree>
 800cf66:	3f01      	subs	r7, #1
 800cf68:	2f04      	cmp	r7, #4
 800cf6a:	d806      	bhi.n	800cf7a <_strtod_l+0x102>
 800cf6c:	e8df f007 	tbb	[pc, r7]
 800cf70:	1714030a 	.word	0x1714030a
 800cf74:	0a          	.byte	0x0a
 800cf75:	00          	.byte	0x00
 800cf76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cf7a:	0728      	lsls	r0, r5, #28
 800cf7c:	d5c0      	bpl.n	800cf00 <_strtod_l+0x88>
 800cf7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cf82:	e7bd      	b.n	800cf00 <_strtod_l+0x88>
 800cf84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cf88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cf8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf96:	e7f0      	b.n	800cf7a <_strtod_l+0x102>
 800cf98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d11c <_strtod_l+0x2a4>
 800cf9c:	e7ed      	b.n	800cf7a <_strtod_l+0x102>
 800cf9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cfa2:	f04f 3aff 	mov.w	sl, #4294967295
 800cfa6:	e7e8      	b.n	800cf7a <_strtod_l+0x102>
 800cfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfae:	785b      	ldrb	r3, [r3, #1]
 800cfb0:	2b30      	cmp	r3, #48	; 0x30
 800cfb2:	d0f9      	beq.n	800cfa8 <_strtod_l+0x130>
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d0a3      	beq.n	800cf00 <_strtod_l+0x88>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	f04f 0900 	mov.w	r9, #0
 800cfbe:	9304      	str	r3, [sp, #16]
 800cfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfc2:	9308      	str	r3, [sp, #32]
 800cfc4:	f8cd 901c 	str.w	r9, [sp, #28]
 800cfc8:	464f      	mov	r7, r9
 800cfca:	220a      	movs	r2, #10
 800cfcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cfce:	7806      	ldrb	r6, [r0, #0]
 800cfd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cfd4:	b2d9      	uxtb	r1, r3
 800cfd6:	2909      	cmp	r1, #9
 800cfd8:	d92a      	bls.n	800d030 <_strtod_l+0x1b8>
 800cfda:	9905      	ldr	r1, [sp, #20]
 800cfdc:	462a      	mov	r2, r5
 800cfde:	f7ff ff1a 	bl	800ce16 <strncmp>
 800cfe2:	b398      	cbz	r0, 800d04c <_strtod_l+0x1d4>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	4632      	mov	r2, r6
 800cfe8:	463d      	mov	r5, r7
 800cfea:	9005      	str	r0, [sp, #20]
 800cfec:	4603      	mov	r3, r0
 800cfee:	2a65      	cmp	r2, #101	; 0x65
 800cff0:	d001      	beq.n	800cff6 <_strtod_l+0x17e>
 800cff2:	2a45      	cmp	r2, #69	; 0x45
 800cff4:	d118      	bne.n	800d028 <_strtod_l+0x1b0>
 800cff6:	b91d      	cbnz	r5, 800d000 <_strtod_l+0x188>
 800cff8:	9a04      	ldr	r2, [sp, #16]
 800cffa:	4302      	orrs	r2, r0
 800cffc:	d09e      	beq.n	800cf3c <_strtod_l+0xc4>
 800cffe:	2500      	movs	r5, #0
 800d000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d004:	f108 0201 	add.w	r2, r8, #1
 800d008:	9217      	str	r2, [sp, #92]	; 0x5c
 800d00a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d00e:	2a2b      	cmp	r2, #43	; 0x2b
 800d010:	d075      	beq.n	800d0fe <_strtod_l+0x286>
 800d012:	2a2d      	cmp	r2, #45	; 0x2d
 800d014:	d07b      	beq.n	800d10e <_strtod_l+0x296>
 800d016:	f04f 0c00 	mov.w	ip, #0
 800d01a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d01e:	2909      	cmp	r1, #9
 800d020:	f240 8082 	bls.w	800d128 <_strtod_l+0x2b0>
 800d024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d028:	2600      	movs	r6, #0
 800d02a:	e09d      	b.n	800d168 <_strtod_l+0x2f0>
 800d02c:	2300      	movs	r3, #0
 800d02e:	e7c4      	b.n	800cfba <_strtod_l+0x142>
 800d030:	2f08      	cmp	r7, #8
 800d032:	bfd8      	it	le
 800d034:	9907      	ldrle	r1, [sp, #28]
 800d036:	f100 0001 	add.w	r0, r0, #1
 800d03a:	bfda      	itte	le
 800d03c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d040:	9307      	strle	r3, [sp, #28]
 800d042:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d046:	3701      	adds	r7, #1
 800d048:	9017      	str	r0, [sp, #92]	; 0x5c
 800d04a:	e7bf      	b.n	800cfcc <_strtod_l+0x154>
 800d04c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d04e:	195a      	adds	r2, r3, r5
 800d050:	9217      	str	r2, [sp, #92]	; 0x5c
 800d052:	5d5a      	ldrb	r2, [r3, r5]
 800d054:	2f00      	cmp	r7, #0
 800d056:	d037      	beq.n	800d0c8 <_strtod_l+0x250>
 800d058:	9005      	str	r0, [sp, #20]
 800d05a:	463d      	mov	r5, r7
 800d05c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d060:	2b09      	cmp	r3, #9
 800d062:	d912      	bls.n	800d08a <_strtod_l+0x212>
 800d064:	2301      	movs	r3, #1
 800d066:	e7c2      	b.n	800cfee <_strtod_l+0x176>
 800d068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d06e:	785a      	ldrb	r2, [r3, #1]
 800d070:	3001      	adds	r0, #1
 800d072:	2a30      	cmp	r2, #48	; 0x30
 800d074:	d0f8      	beq.n	800d068 <_strtod_l+0x1f0>
 800d076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d07a:	2b08      	cmp	r3, #8
 800d07c:	f200 84d9 	bhi.w	800da32 <_strtod_l+0xbba>
 800d080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d082:	9005      	str	r0, [sp, #20]
 800d084:	2000      	movs	r0, #0
 800d086:	9308      	str	r3, [sp, #32]
 800d088:	4605      	mov	r5, r0
 800d08a:	3a30      	subs	r2, #48	; 0x30
 800d08c:	f100 0301 	add.w	r3, r0, #1
 800d090:	d014      	beq.n	800d0bc <_strtod_l+0x244>
 800d092:	9905      	ldr	r1, [sp, #20]
 800d094:	4419      	add	r1, r3
 800d096:	9105      	str	r1, [sp, #20]
 800d098:	462b      	mov	r3, r5
 800d09a:	eb00 0e05 	add.w	lr, r0, r5
 800d09e:	210a      	movs	r1, #10
 800d0a0:	4573      	cmp	r3, lr
 800d0a2:	d113      	bne.n	800d0cc <_strtod_l+0x254>
 800d0a4:	182b      	adds	r3, r5, r0
 800d0a6:	2b08      	cmp	r3, #8
 800d0a8:	f105 0501 	add.w	r5, r5, #1
 800d0ac:	4405      	add	r5, r0
 800d0ae:	dc1c      	bgt.n	800d0ea <_strtod_l+0x272>
 800d0b0:	9907      	ldr	r1, [sp, #28]
 800d0b2:	230a      	movs	r3, #10
 800d0b4:	fb03 2301 	mla	r3, r3, r1, r2
 800d0b8:	9307      	str	r3, [sp, #28]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0be:	1c51      	adds	r1, r2, #1
 800d0c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d0c2:	7852      	ldrb	r2, [r2, #1]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	e7c9      	b.n	800d05c <_strtod_l+0x1e4>
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	e7d2      	b.n	800d072 <_strtod_l+0x1fa>
 800d0cc:	2b08      	cmp	r3, #8
 800d0ce:	dc04      	bgt.n	800d0da <_strtod_l+0x262>
 800d0d0:	9e07      	ldr	r6, [sp, #28]
 800d0d2:	434e      	muls	r6, r1
 800d0d4:	9607      	str	r6, [sp, #28]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	e7e2      	b.n	800d0a0 <_strtod_l+0x228>
 800d0da:	f103 0c01 	add.w	ip, r3, #1
 800d0de:	f1bc 0f10 	cmp.w	ip, #16
 800d0e2:	bfd8      	it	le
 800d0e4:	fb01 f909 	mulle.w	r9, r1, r9
 800d0e8:	e7f5      	b.n	800d0d6 <_strtod_l+0x25e>
 800d0ea:	2d10      	cmp	r5, #16
 800d0ec:	bfdc      	itt	le
 800d0ee:	230a      	movle	r3, #10
 800d0f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d0f4:	e7e1      	b.n	800d0ba <_strtod_l+0x242>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e77c      	b.n	800cff8 <_strtod_l+0x180>
 800d0fe:	f04f 0c00 	mov.w	ip, #0
 800d102:	f108 0202 	add.w	r2, r8, #2
 800d106:	9217      	str	r2, [sp, #92]	; 0x5c
 800d108:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d10c:	e785      	b.n	800d01a <_strtod_l+0x1a2>
 800d10e:	f04f 0c01 	mov.w	ip, #1
 800d112:	e7f6      	b.n	800d102 <_strtod_l+0x28a>
 800d114:	080107b8 	.word	0x080107b8
 800d118:	080106f0 	.word	0x080106f0
 800d11c:	7ff00000 	.word	0x7ff00000
 800d120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d122:	1c51      	adds	r1, r2, #1
 800d124:	9117      	str	r1, [sp, #92]	; 0x5c
 800d126:	7852      	ldrb	r2, [r2, #1]
 800d128:	2a30      	cmp	r2, #48	; 0x30
 800d12a:	d0f9      	beq.n	800d120 <_strtod_l+0x2a8>
 800d12c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d130:	2908      	cmp	r1, #8
 800d132:	f63f af79 	bhi.w	800d028 <_strtod_l+0x1b0>
 800d136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d13a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d13c:	9206      	str	r2, [sp, #24]
 800d13e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d140:	1c51      	adds	r1, r2, #1
 800d142:	9117      	str	r1, [sp, #92]	; 0x5c
 800d144:	7852      	ldrb	r2, [r2, #1]
 800d146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d14a:	2e09      	cmp	r6, #9
 800d14c:	d937      	bls.n	800d1be <_strtod_l+0x346>
 800d14e:	9e06      	ldr	r6, [sp, #24]
 800d150:	1b89      	subs	r1, r1, r6
 800d152:	2908      	cmp	r1, #8
 800d154:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d158:	dc02      	bgt.n	800d160 <_strtod_l+0x2e8>
 800d15a:	4576      	cmp	r6, lr
 800d15c:	bfa8      	it	ge
 800d15e:	4676      	movge	r6, lr
 800d160:	f1bc 0f00 	cmp.w	ip, #0
 800d164:	d000      	beq.n	800d168 <_strtod_l+0x2f0>
 800d166:	4276      	negs	r6, r6
 800d168:	2d00      	cmp	r5, #0
 800d16a:	d14d      	bne.n	800d208 <_strtod_l+0x390>
 800d16c:	9904      	ldr	r1, [sp, #16]
 800d16e:	4301      	orrs	r1, r0
 800d170:	f47f aec6 	bne.w	800cf00 <_strtod_l+0x88>
 800d174:	2b00      	cmp	r3, #0
 800d176:	f47f aee1 	bne.w	800cf3c <_strtod_l+0xc4>
 800d17a:	2a69      	cmp	r2, #105	; 0x69
 800d17c:	d027      	beq.n	800d1ce <_strtod_l+0x356>
 800d17e:	dc24      	bgt.n	800d1ca <_strtod_l+0x352>
 800d180:	2a49      	cmp	r2, #73	; 0x49
 800d182:	d024      	beq.n	800d1ce <_strtod_l+0x356>
 800d184:	2a4e      	cmp	r2, #78	; 0x4e
 800d186:	f47f aed9 	bne.w	800cf3c <_strtod_l+0xc4>
 800d18a:	499f      	ldr	r1, [pc, #636]	; (800d408 <_strtod_l+0x590>)
 800d18c:	a817      	add	r0, sp, #92	; 0x5c
 800d18e:	f001 f829 	bl	800e1e4 <__match>
 800d192:	2800      	cmp	r0, #0
 800d194:	f43f aed2 	beq.w	800cf3c <_strtod_l+0xc4>
 800d198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b28      	cmp	r3, #40	; 0x28
 800d19e:	d12d      	bne.n	800d1fc <_strtod_l+0x384>
 800d1a0:	499a      	ldr	r1, [pc, #616]	; (800d40c <_strtod_l+0x594>)
 800d1a2:	aa1a      	add	r2, sp, #104	; 0x68
 800d1a4:	a817      	add	r0, sp, #92	; 0x5c
 800d1a6:	f001 f831 	bl	800e20c <__hexnan>
 800d1aa:	2805      	cmp	r0, #5
 800d1ac:	d126      	bne.n	800d1fc <_strtod_l+0x384>
 800d1ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d1b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d1b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d1bc:	e6a0      	b.n	800cf00 <_strtod_l+0x88>
 800d1be:	210a      	movs	r1, #10
 800d1c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d1c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d1c8:	e7b9      	b.n	800d13e <_strtod_l+0x2c6>
 800d1ca:	2a6e      	cmp	r2, #110	; 0x6e
 800d1cc:	e7db      	b.n	800d186 <_strtod_l+0x30e>
 800d1ce:	4990      	ldr	r1, [pc, #576]	; (800d410 <_strtod_l+0x598>)
 800d1d0:	a817      	add	r0, sp, #92	; 0x5c
 800d1d2:	f001 f807 	bl	800e1e4 <__match>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f43f aeb0 	beq.w	800cf3c <_strtod_l+0xc4>
 800d1dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1de:	498d      	ldr	r1, [pc, #564]	; (800d414 <_strtod_l+0x59c>)
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	a817      	add	r0, sp, #92	; 0x5c
 800d1e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1e6:	f000 fffd 	bl	800e1e4 <__match>
 800d1ea:	b910      	cbnz	r0, 800d1f2 <_strtod_l+0x37a>
 800d1ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d424 <_strtod_l+0x5ac>
 800d1f6:	f04f 0a00 	mov.w	sl, #0
 800d1fa:	e681      	b.n	800cf00 <_strtod_l+0x88>
 800d1fc:	4886      	ldr	r0, [pc, #536]	; (800d418 <_strtod_l+0x5a0>)
 800d1fe:	f002 fbff 	bl	800fa00 <nan>
 800d202:	ec5b ab10 	vmov	sl, fp, d0
 800d206:	e67b      	b.n	800cf00 <_strtod_l+0x88>
 800d208:	9b05      	ldr	r3, [sp, #20]
 800d20a:	9807      	ldr	r0, [sp, #28]
 800d20c:	1af3      	subs	r3, r6, r3
 800d20e:	2f00      	cmp	r7, #0
 800d210:	bf08      	it	eq
 800d212:	462f      	moveq	r7, r5
 800d214:	2d10      	cmp	r5, #16
 800d216:	9306      	str	r3, [sp, #24]
 800d218:	46a8      	mov	r8, r5
 800d21a:	bfa8      	it	ge
 800d21c:	f04f 0810 	movge.w	r8, #16
 800d220:	f7f3 f988 	bl	8000534 <__aeabi_ui2d>
 800d224:	2d09      	cmp	r5, #9
 800d226:	4682      	mov	sl, r0
 800d228:	468b      	mov	fp, r1
 800d22a:	dd13      	ble.n	800d254 <_strtod_l+0x3dc>
 800d22c:	4b7b      	ldr	r3, [pc, #492]	; (800d41c <_strtod_l+0x5a4>)
 800d22e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d232:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d236:	f7f3 f9f7 	bl	8000628 <__aeabi_dmul>
 800d23a:	4682      	mov	sl, r0
 800d23c:	4648      	mov	r0, r9
 800d23e:	468b      	mov	fp, r1
 800d240:	f7f3 f978 	bl	8000534 <__aeabi_ui2d>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4650      	mov	r0, sl
 800d24a:	4659      	mov	r1, fp
 800d24c:	f7f3 f836 	bl	80002bc <__adddf3>
 800d250:	4682      	mov	sl, r0
 800d252:	468b      	mov	fp, r1
 800d254:	2d0f      	cmp	r5, #15
 800d256:	dc38      	bgt.n	800d2ca <_strtod_l+0x452>
 800d258:	9b06      	ldr	r3, [sp, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f43f ae50 	beq.w	800cf00 <_strtod_l+0x88>
 800d260:	dd24      	ble.n	800d2ac <_strtod_l+0x434>
 800d262:	2b16      	cmp	r3, #22
 800d264:	dc0b      	bgt.n	800d27e <_strtod_l+0x406>
 800d266:	496d      	ldr	r1, [pc, #436]	; (800d41c <_strtod_l+0x5a4>)
 800d268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d270:	4652      	mov	r2, sl
 800d272:	465b      	mov	r3, fp
 800d274:	f7f3 f9d8 	bl	8000628 <__aeabi_dmul>
 800d278:	4682      	mov	sl, r0
 800d27a:	468b      	mov	fp, r1
 800d27c:	e640      	b.n	800cf00 <_strtod_l+0x88>
 800d27e:	9a06      	ldr	r2, [sp, #24]
 800d280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d284:	4293      	cmp	r3, r2
 800d286:	db20      	blt.n	800d2ca <_strtod_l+0x452>
 800d288:	4c64      	ldr	r4, [pc, #400]	; (800d41c <_strtod_l+0x5a4>)
 800d28a:	f1c5 050f 	rsb	r5, r5, #15
 800d28e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d292:	4652      	mov	r2, sl
 800d294:	465b      	mov	r3, fp
 800d296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29a:	f7f3 f9c5 	bl	8000628 <__aeabi_dmul>
 800d29e:	9b06      	ldr	r3, [sp, #24]
 800d2a0:	1b5d      	subs	r5, r3, r5
 800d2a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2aa:	e7e3      	b.n	800d274 <_strtod_l+0x3fc>
 800d2ac:	9b06      	ldr	r3, [sp, #24]
 800d2ae:	3316      	adds	r3, #22
 800d2b0:	db0b      	blt.n	800d2ca <_strtod_l+0x452>
 800d2b2:	9b05      	ldr	r3, [sp, #20]
 800d2b4:	1b9e      	subs	r6, r3, r6
 800d2b6:	4b59      	ldr	r3, [pc, #356]	; (800d41c <_strtod_l+0x5a4>)
 800d2b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d2bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2c0:	4650      	mov	r0, sl
 800d2c2:	4659      	mov	r1, fp
 800d2c4:	f7f3 fada 	bl	800087c <__aeabi_ddiv>
 800d2c8:	e7d6      	b.n	800d278 <_strtod_l+0x400>
 800d2ca:	9b06      	ldr	r3, [sp, #24]
 800d2cc:	eba5 0808 	sub.w	r8, r5, r8
 800d2d0:	4498      	add	r8, r3
 800d2d2:	f1b8 0f00 	cmp.w	r8, #0
 800d2d6:	dd74      	ble.n	800d3c2 <_strtod_l+0x54a>
 800d2d8:	f018 030f 	ands.w	r3, r8, #15
 800d2dc:	d00a      	beq.n	800d2f4 <_strtod_l+0x47c>
 800d2de:	494f      	ldr	r1, [pc, #316]	; (800d41c <_strtod_l+0x5a4>)
 800d2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2e4:	4652      	mov	r2, sl
 800d2e6:	465b      	mov	r3, fp
 800d2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ec:	f7f3 f99c 	bl	8000628 <__aeabi_dmul>
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	468b      	mov	fp, r1
 800d2f4:	f038 080f 	bics.w	r8, r8, #15
 800d2f8:	d04f      	beq.n	800d39a <_strtod_l+0x522>
 800d2fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d2fe:	dd22      	ble.n	800d346 <_strtod_l+0x4ce>
 800d300:	2500      	movs	r5, #0
 800d302:	462e      	mov	r6, r5
 800d304:	9507      	str	r5, [sp, #28]
 800d306:	9505      	str	r5, [sp, #20]
 800d308:	2322      	movs	r3, #34	; 0x22
 800d30a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d424 <_strtod_l+0x5ac>
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	f04f 0a00 	mov.w	sl, #0
 800d314:	9b07      	ldr	r3, [sp, #28]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f43f adf2 	beq.w	800cf00 <_strtod_l+0x88>
 800d31c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d31e:	4620      	mov	r0, r4
 800d320:	f001 f880 	bl	800e424 <_Bfree>
 800d324:	9905      	ldr	r1, [sp, #20]
 800d326:	4620      	mov	r0, r4
 800d328:	f001 f87c 	bl	800e424 <_Bfree>
 800d32c:	4631      	mov	r1, r6
 800d32e:	4620      	mov	r0, r4
 800d330:	f001 f878 	bl	800e424 <_Bfree>
 800d334:	9907      	ldr	r1, [sp, #28]
 800d336:	4620      	mov	r0, r4
 800d338:	f001 f874 	bl	800e424 <_Bfree>
 800d33c:	4629      	mov	r1, r5
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 f870 	bl	800e424 <_Bfree>
 800d344:	e5dc      	b.n	800cf00 <_strtod_l+0x88>
 800d346:	4b36      	ldr	r3, [pc, #216]	; (800d420 <_strtod_l+0x5a8>)
 800d348:	9304      	str	r3, [sp, #16]
 800d34a:	2300      	movs	r3, #0
 800d34c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	4699      	mov	r9, r3
 800d356:	f1b8 0f01 	cmp.w	r8, #1
 800d35a:	dc21      	bgt.n	800d3a0 <_strtod_l+0x528>
 800d35c:	b10b      	cbz	r3, 800d362 <_strtod_l+0x4ea>
 800d35e:	4682      	mov	sl, r0
 800d360:	468b      	mov	fp, r1
 800d362:	4b2f      	ldr	r3, [pc, #188]	; (800d420 <_strtod_l+0x5a8>)
 800d364:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d368:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d36c:	4652      	mov	r2, sl
 800d36e:	465b      	mov	r3, fp
 800d370:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d374:	f7f3 f958 	bl	8000628 <__aeabi_dmul>
 800d378:	4b2a      	ldr	r3, [pc, #168]	; (800d424 <_strtod_l+0x5ac>)
 800d37a:	460a      	mov	r2, r1
 800d37c:	400b      	ands	r3, r1
 800d37e:	492a      	ldr	r1, [pc, #168]	; (800d428 <_strtod_l+0x5b0>)
 800d380:	428b      	cmp	r3, r1
 800d382:	4682      	mov	sl, r0
 800d384:	d8bc      	bhi.n	800d300 <_strtod_l+0x488>
 800d386:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d38a:	428b      	cmp	r3, r1
 800d38c:	bf86      	itte	hi
 800d38e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d42c <_strtod_l+0x5b4>
 800d392:	f04f 3aff 	movhi.w	sl, #4294967295
 800d396:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d39a:	2300      	movs	r3, #0
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	e084      	b.n	800d4aa <_strtod_l+0x632>
 800d3a0:	f018 0f01 	tst.w	r8, #1
 800d3a4:	d005      	beq.n	800d3b2 <_strtod_l+0x53a>
 800d3a6:	9b04      	ldr	r3, [sp, #16]
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	f7f3 f93c 	bl	8000628 <__aeabi_dmul>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	9a04      	ldr	r2, [sp, #16]
 800d3b4:	3208      	adds	r2, #8
 800d3b6:	f109 0901 	add.w	r9, r9, #1
 800d3ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d3be:	9204      	str	r2, [sp, #16]
 800d3c0:	e7c9      	b.n	800d356 <_strtod_l+0x4de>
 800d3c2:	d0ea      	beq.n	800d39a <_strtod_l+0x522>
 800d3c4:	f1c8 0800 	rsb	r8, r8, #0
 800d3c8:	f018 020f 	ands.w	r2, r8, #15
 800d3cc:	d00a      	beq.n	800d3e4 <_strtod_l+0x56c>
 800d3ce:	4b13      	ldr	r3, [pc, #76]	; (800d41c <_strtod_l+0x5a4>)
 800d3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f3 fa4e 	bl	800087c <__aeabi_ddiv>
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	468b      	mov	fp, r1
 800d3e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d3e8:	d0d7      	beq.n	800d39a <_strtod_l+0x522>
 800d3ea:	f1b8 0f1f 	cmp.w	r8, #31
 800d3ee:	dd1f      	ble.n	800d430 <_strtod_l+0x5b8>
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	462e      	mov	r6, r5
 800d3f4:	9507      	str	r5, [sp, #28]
 800d3f6:	9505      	str	r5, [sp, #20]
 800d3f8:	2322      	movs	r3, #34	; 0x22
 800d3fa:	f04f 0a00 	mov.w	sl, #0
 800d3fe:	f04f 0b00 	mov.w	fp, #0
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	e786      	b.n	800d314 <_strtod_l+0x49c>
 800d406:	bf00      	nop
 800d408:	080106ed 	.word	0x080106ed
 800d40c:	08010704 	.word	0x08010704
 800d410:	080106e4 	.word	0x080106e4
 800d414:	080106e7 	.word	0x080106e7
 800d418:	080109c5 	.word	0x080109c5
 800d41c:	08010868 	.word	0x08010868
 800d420:	08010840 	.word	0x08010840
 800d424:	7ff00000 	.word	0x7ff00000
 800d428:	7ca00000 	.word	0x7ca00000
 800d42c:	7fefffff 	.word	0x7fefffff
 800d430:	f018 0310 	ands.w	r3, r8, #16
 800d434:	bf18      	it	ne
 800d436:	236a      	movne	r3, #106	; 0x6a
 800d438:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d7e8 <_strtod_l+0x970>
 800d43c:	9304      	str	r3, [sp, #16]
 800d43e:	4650      	mov	r0, sl
 800d440:	4659      	mov	r1, fp
 800d442:	2300      	movs	r3, #0
 800d444:	f018 0f01 	tst.w	r8, #1
 800d448:	d004      	beq.n	800d454 <_strtod_l+0x5dc>
 800d44a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d44e:	f7f3 f8eb 	bl	8000628 <__aeabi_dmul>
 800d452:	2301      	movs	r3, #1
 800d454:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d458:	f109 0908 	add.w	r9, r9, #8
 800d45c:	d1f2      	bne.n	800d444 <_strtod_l+0x5cc>
 800d45e:	b10b      	cbz	r3, 800d464 <_strtod_l+0x5ec>
 800d460:	4682      	mov	sl, r0
 800d462:	468b      	mov	fp, r1
 800d464:	9b04      	ldr	r3, [sp, #16]
 800d466:	b1c3      	cbz	r3, 800d49a <_strtod_l+0x622>
 800d468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d46c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d470:	2b00      	cmp	r3, #0
 800d472:	4659      	mov	r1, fp
 800d474:	dd11      	ble.n	800d49a <_strtod_l+0x622>
 800d476:	2b1f      	cmp	r3, #31
 800d478:	f340 8124 	ble.w	800d6c4 <_strtod_l+0x84c>
 800d47c:	2b34      	cmp	r3, #52	; 0x34
 800d47e:	bfde      	ittt	le
 800d480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d484:	f04f 33ff 	movle.w	r3, #4294967295
 800d488:	fa03 f202 	lslle.w	r2, r3, r2
 800d48c:	f04f 0a00 	mov.w	sl, #0
 800d490:	bfcc      	ite	gt
 800d492:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d496:	ea02 0b01 	andle.w	fp, r2, r1
 800d49a:	2200      	movs	r2, #0
 800d49c:	2300      	movs	r3, #0
 800d49e:	4650      	mov	r0, sl
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	f7f3 fb29 	bl	8000af8 <__aeabi_dcmpeq>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d1a2      	bne.n	800d3f0 <_strtod_l+0x578>
 800d4aa:	9b07      	ldr	r3, [sp, #28]
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	9908      	ldr	r1, [sp, #32]
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	463a      	mov	r2, r7
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f001 f81d 	bl	800e4f4 <__s2b>
 800d4ba:	9007      	str	r0, [sp, #28]
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f43f af1f 	beq.w	800d300 <_strtod_l+0x488>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	1b9e      	subs	r6, r3, r6
 800d4c6:	9b06      	ldr	r3, [sp, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bfb4      	ite	lt
 800d4cc:	4633      	movlt	r3, r6
 800d4ce:	2300      	movge	r3, #0
 800d4d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d4d2:	9b06      	ldr	r3, [sp, #24]
 800d4d4:	2500      	movs	r5, #0
 800d4d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d4da:	9312      	str	r3, [sp, #72]	; 0x48
 800d4dc:	462e      	mov	r6, r5
 800d4de:	9b07      	ldr	r3, [sp, #28]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	6859      	ldr	r1, [r3, #4]
 800d4e4:	f000 ff5e 	bl	800e3a4 <_Balloc>
 800d4e8:	9005      	str	r0, [sp, #20]
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	f43f af0c 	beq.w	800d308 <_strtod_l+0x490>
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	691a      	ldr	r2, [r3, #16]
 800d4f4:	3202      	adds	r2, #2
 800d4f6:	f103 010c 	add.w	r1, r3, #12
 800d4fa:	0092      	lsls	r2, r2, #2
 800d4fc:	300c      	adds	r0, #12
 800d4fe:	f7ff faeb 	bl	800cad8 <memcpy>
 800d502:	ec4b ab10 	vmov	d0, sl, fp
 800d506:	aa1a      	add	r2, sp, #104	; 0x68
 800d508:	a919      	add	r1, sp, #100	; 0x64
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 fb38 	bl	800eb80 <__d2b>
 800d510:	ec4b ab18 	vmov	d8, sl, fp
 800d514:	9018      	str	r0, [sp, #96]	; 0x60
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f aef6 	beq.w	800d308 <_strtod_l+0x490>
 800d51c:	2101      	movs	r1, #1
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 f882 	bl	800e628 <__i2b>
 800d524:	4606      	mov	r6, r0
 800d526:	2800      	cmp	r0, #0
 800d528:	f43f aeee 	beq.w	800d308 <_strtod_l+0x490>
 800d52c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d52e:	9904      	ldr	r1, [sp, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfab      	itete	ge
 800d534:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d536:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d538:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d53a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d53e:	bfac      	ite	ge
 800d540:	eb03 0902 	addge.w	r9, r3, r2
 800d544:	1ad7      	sublt	r7, r2, r3
 800d546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d548:	eba3 0801 	sub.w	r8, r3, r1
 800d54c:	4490      	add	r8, r2
 800d54e:	4ba1      	ldr	r3, [pc, #644]	; (800d7d4 <_strtod_l+0x95c>)
 800d550:	f108 38ff 	add.w	r8, r8, #4294967295
 800d554:	4598      	cmp	r8, r3
 800d556:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d55a:	f280 80c7 	bge.w	800d6ec <_strtod_l+0x874>
 800d55e:	eba3 0308 	sub.w	r3, r3, r8
 800d562:	2b1f      	cmp	r3, #31
 800d564:	eba2 0203 	sub.w	r2, r2, r3
 800d568:	f04f 0101 	mov.w	r1, #1
 800d56c:	f300 80b1 	bgt.w	800d6d2 <_strtod_l+0x85a>
 800d570:	fa01 f303 	lsl.w	r3, r1, r3
 800d574:	930d      	str	r3, [sp, #52]	; 0x34
 800d576:	2300      	movs	r3, #0
 800d578:	9308      	str	r3, [sp, #32]
 800d57a:	eb09 0802 	add.w	r8, r9, r2
 800d57e:	9b04      	ldr	r3, [sp, #16]
 800d580:	45c1      	cmp	r9, r8
 800d582:	4417      	add	r7, r2
 800d584:	441f      	add	r7, r3
 800d586:	464b      	mov	r3, r9
 800d588:	bfa8      	it	ge
 800d58a:	4643      	movge	r3, r8
 800d58c:	42bb      	cmp	r3, r7
 800d58e:	bfa8      	it	ge
 800d590:	463b      	movge	r3, r7
 800d592:	2b00      	cmp	r3, #0
 800d594:	bfc2      	ittt	gt
 800d596:	eba8 0803 	subgt.w	r8, r8, r3
 800d59a:	1aff      	subgt	r7, r7, r3
 800d59c:	eba9 0903 	subgt.w	r9, r9, r3
 800d5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dd17      	ble.n	800d5d6 <_strtod_l+0x75e>
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f001 f8fc 	bl	800e7a8 <__pow5mult>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	f43f aea8 	beq.w	800d308 <_strtod_l+0x490>
 800d5b8:	4601      	mov	r1, r0
 800d5ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f001 f849 	bl	800e654 <__multiply>
 800d5c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	f43f ae9f 	beq.w	800d308 <_strtod_l+0x490>
 800d5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f000 ff29 	bl	800e424 <_Bfree>
 800d5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5d4:	9318      	str	r3, [sp, #96]	; 0x60
 800d5d6:	f1b8 0f00 	cmp.w	r8, #0
 800d5da:	f300 808c 	bgt.w	800d6f6 <_strtod_l+0x87e>
 800d5de:	9b06      	ldr	r3, [sp, #24]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dd08      	ble.n	800d5f6 <_strtod_l+0x77e>
 800d5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5e6:	9905      	ldr	r1, [sp, #20]
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f001 f8dd 	bl	800e7a8 <__pow5mult>
 800d5ee:	9005      	str	r0, [sp, #20]
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	f43f ae89 	beq.w	800d308 <_strtod_l+0x490>
 800d5f6:	2f00      	cmp	r7, #0
 800d5f8:	dd08      	ble.n	800d60c <_strtod_l+0x794>
 800d5fa:	9905      	ldr	r1, [sp, #20]
 800d5fc:	463a      	mov	r2, r7
 800d5fe:	4620      	mov	r0, r4
 800d600:	f001 f92c 	bl	800e85c <__lshift>
 800d604:	9005      	str	r0, [sp, #20]
 800d606:	2800      	cmp	r0, #0
 800d608:	f43f ae7e 	beq.w	800d308 <_strtod_l+0x490>
 800d60c:	f1b9 0f00 	cmp.w	r9, #0
 800d610:	dd08      	ble.n	800d624 <_strtod_l+0x7ac>
 800d612:	4631      	mov	r1, r6
 800d614:	464a      	mov	r2, r9
 800d616:	4620      	mov	r0, r4
 800d618:	f001 f920 	bl	800e85c <__lshift>
 800d61c:	4606      	mov	r6, r0
 800d61e:	2800      	cmp	r0, #0
 800d620:	f43f ae72 	beq.w	800d308 <_strtod_l+0x490>
 800d624:	9a05      	ldr	r2, [sp, #20]
 800d626:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d628:	4620      	mov	r0, r4
 800d62a:	f001 f9a3 	bl	800e974 <__mdiff>
 800d62e:	4605      	mov	r5, r0
 800d630:	2800      	cmp	r0, #0
 800d632:	f43f ae69 	beq.w	800d308 <_strtod_l+0x490>
 800d636:	68c3      	ldr	r3, [r0, #12]
 800d638:	930b      	str	r3, [sp, #44]	; 0x2c
 800d63a:	2300      	movs	r3, #0
 800d63c:	60c3      	str	r3, [r0, #12]
 800d63e:	4631      	mov	r1, r6
 800d640:	f001 f97c 	bl	800e93c <__mcmp>
 800d644:	2800      	cmp	r0, #0
 800d646:	da60      	bge.n	800d70a <_strtod_l+0x892>
 800d648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d64a:	ea53 030a 	orrs.w	r3, r3, sl
 800d64e:	f040 8082 	bne.w	800d756 <_strtod_l+0x8de>
 800d652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d656:	2b00      	cmp	r3, #0
 800d658:	d17d      	bne.n	800d756 <_strtod_l+0x8de>
 800d65a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d65e:	0d1b      	lsrs	r3, r3, #20
 800d660:	051b      	lsls	r3, r3, #20
 800d662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d666:	d976      	bls.n	800d756 <_strtod_l+0x8de>
 800d668:	696b      	ldr	r3, [r5, #20]
 800d66a:	b913      	cbnz	r3, 800d672 <_strtod_l+0x7fa>
 800d66c:	692b      	ldr	r3, [r5, #16]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	dd71      	ble.n	800d756 <_strtod_l+0x8de>
 800d672:	4629      	mov	r1, r5
 800d674:	2201      	movs	r2, #1
 800d676:	4620      	mov	r0, r4
 800d678:	f001 f8f0 	bl	800e85c <__lshift>
 800d67c:	4631      	mov	r1, r6
 800d67e:	4605      	mov	r5, r0
 800d680:	f001 f95c 	bl	800e93c <__mcmp>
 800d684:	2800      	cmp	r0, #0
 800d686:	dd66      	ble.n	800d756 <_strtod_l+0x8de>
 800d688:	9904      	ldr	r1, [sp, #16]
 800d68a:	4a53      	ldr	r2, [pc, #332]	; (800d7d8 <_strtod_l+0x960>)
 800d68c:	465b      	mov	r3, fp
 800d68e:	2900      	cmp	r1, #0
 800d690:	f000 8081 	beq.w	800d796 <_strtod_l+0x91e>
 800d694:	ea02 010b 	and.w	r1, r2, fp
 800d698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d69c:	dc7b      	bgt.n	800d796 <_strtod_l+0x91e>
 800d69e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d6a2:	f77f aea9 	ble.w	800d3f8 <_strtod_l+0x580>
 800d6a6:	4b4d      	ldr	r3, [pc, #308]	; (800d7dc <_strtod_l+0x964>)
 800d6a8:	4650      	mov	r0, sl
 800d6aa:	4659      	mov	r1, fp
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f7f2 ffbb 	bl	8000628 <__aeabi_dmul>
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	4303      	orrs	r3, r0
 800d6b6:	bf08      	it	eq
 800d6b8:	2322      	moveq	r3, #34	; 0x22
 800d6ba:	4682      	mov	sl, r0
 800d6bc:	468b      	mov	fp, r1
 800d6be:	bf08      	it	eq
 800d6c0:	6023      	streq	r3, [r4, #0]
 800d6c2:	e62b      	b.n	800d31c <_strtod_l+0x4a4>
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6cc:	ea03 0a0a 	and.w	sl, r3, sl
 800d6d0:	e6e3      	b.n	800d49a <_strtod_l+0x622>
 800d6d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d6d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d6da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d6de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d6e2:	fa01 f308 	lsl.w	r3, r1, r8
 800d6e6:	9308      	str	r3, [sp, #32]
 800d6e8:	910d      	str	r1, [sp, #52]	; 0x34
 800d6ea:	e746      	b.n	800d57a <_strtod_l+0x702>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9308      	str	r3, [sp, #32]
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d6f4:	e741      	b.n	800d57a <_strtod_l+0x702>
 800d6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f001 f8ae 	bl	800e85c <__lshift>
 800d700:	9018      	str	r0, [sp, #96]	; 0x60
 800d702:	2800      	cmp	r0, #0
 800d704:	f47f af6b 	bne.w	800d5de <_strtod_l+0x766>
 800d708:	e5fe      	b.n	800d308 <_strtod_l+0x490>
 800d70a:	465f      	mov	r7, fp
 800d70c:	d16e      	bne.n	800d7ec <_strtod_l+0x974>
 800d70e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d714:	b342      	cbz	r2, 800d768 <_strtod_l+0x8f0>
 800d716:	4a32      	ldr	r2, [pc, #200]	; (800d7e0 <_strtod_l+0x968>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d128      	bne.n	800d76e <_strtod_l+0x8f6>
 800d71c:	9b04      	ldr	r3, [sp, #16]
 800d71e:	4651      	mov	r1, sl
 800d720:	b1eb      	cbz	r3, 800d75e <_strtod_l+0x8e6>
 800d722:	4b2d      	ldr	r3, [pc, #180]	; (800d7d8 <_strtod_l+0x960>)
 800d724:	403b      	ands	r3, r7
 800d726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295
 800d72e:	d819      	bhi.n	800d764 <_strtod_l+0x8ec>
 800d730:	0d1b      	lsrs	r3, r3, #20
 800d732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d736:	fa02 f303 	lsl.w	r3, r2, r3
 800d73a:	4299      	cmp	r1, r3
 800d73c:	d117      	bne.n	800d76e <_strtod_l+0x8f6>
 800d73e:	4b29      	ldr	r3, [pc, #164]	; (800d7e4 <_strtod_l+0x96c>)
 800d740:	429f      	cmp	r7, r3
 800d742:	d102      	bne.n	800d74a <_strtod_l+0x8d2>
 800d744:	3101      	adds	r1, #1
 800d746:	f43f addf 	beq.w	800d308 <_strtod_l+0x490>
 800d74a:	4b23      	ldr	r3, [pc, #140]	; (800d7d8 <_strtod_l+0x960>)
 800d74c:	403b      	ands	r3, r7
 800d74e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d752:	f04f 0a00 	mov.w	sl, #0
 800d756:	9b04      	ldr	r3, [sp, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1a4      	bne.n	800d6a6 <_strtod_l+0x82e>
 800d75c:	e5de      	b.n	800d31c <_strtod_l+0x4a4>
 800d75e:	f04f 33ff 	mov.w	r3, #4294967295
 800d762:	e7ea      	b.n	800d73a <_strtod_l+0x8c2>
 800d764:	4613      	mov	r3, r2
 800d766:	e7e8      	b.n	800d73a <_strtod_l+0x8c2>
 800d768:	ea53 030a 	orrs.w	r3, r3, sl
 800d76c:	d08c      	beq.n	800d688 <_strtod_l+0x810>
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	b1db      	cbz	r3, 800d7aa <_strtod_l+0x932>
 800d772:	423b      	tst	r3, r7
 800d774:	d0ef      	beq.n	800d756 <_strtod_l+0x8de>
 800d776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d778:	9a04      	ldr	r2, [sp, #16]
 800d77a:	4650      	mov	r0, sl
 800d77c:	4659      	mov	r1, fp
 800d77e:	b1c3      	cbz	r3, 800d7b2 <_strtod_l+0x93a>
 800d780:	f7ff fb5d 	bl	800ce3e <sulp>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	ec51 0b18 	vmov	r0, r1, d8
 800d78c:	f7f2 fd96 	bl	80002bc <__adddf3>
 800d790:	4682      	mov	sl, r0
 800d792:	468b      	mov	fp, r1
 800d794:	e7df      	b.n	800d756 <_strtod_l+0x8de>
 800d796:	4013      	ands	r3, r2
 800d798:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d79c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7a4:	f04f 3aff 	mov.w	sl, #4294967295
 800d7a8:	e7d5      	b.n	800d756 <_strtod_l+0x8de>
 800d7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7ac:	ea13 0f0a 	tst.w	r3, sl
 800d7b0:	e7e0      	b.n	800d774 <_strtod_l+0x8fc>
 800d7b2:	f7ff fb44 	bl	800ce3e <sulp>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	ec51 0b18 	vmov	r0, r1, d8
 800d7be:	f7f2 fd7b 	bl	80002b8 <__aeabi_dsub>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4682      	mov	sl, r0
 800d7c8:	468b      	mov	fp, r1
 800d7ca:	f7f3 f995 	bl	8000af8 <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d0c1      	beq.n	800d756 <_strtod_l+0x8de>
 800d7d2:	e611      	b.n	800d3f8 <_strtod_l+0x580>
 800d7d4:	fffffc02 	.word	0xfffffc02
 800d7d8:	7ff00000 	.word	0x7ff00000
 800d7dc:	39500000 	.word	0x39500000
 800d7e0:	000fffff 	.word	0x000fffff
 800d7e4:	7fefffff 	.word	0x7fefffff
 800d7e8:	08010718 	.word	0x08010718
 800d7ec:	4631      	mov	r1, r6
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f001 fa22 	bl	800ec38 <__ratio>
 800d7f4:	ec59 8b10 	vmov	r8, r9, d0
 800d7f8:	ee10 0a10 	vmov	r0, s0
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d802:	4649      	mov	r1, r9
 800d804:	f7f3 f98c 	bl	8000b20 <__aeabi_dcmple>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d07a      	beq.n	800d902 <_strtod_l+0xa8a>
 800d80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d04a      	beq.n	800d8a8 <_strtod_l+0xa30>
 800d812:	4b95      	ldr	r3, [pc, #596]	; (800da68 <_strtod_l+0xbf0>)
 800d814:	2200      	movs	r2, #0
 800d816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d81a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800da68 <_strtod_l+0xbf0>
 800d81e:	f04f 0800 	mov.w	r8, #0
 800d822:	4b92      	ldr	r3, [pc, #584]	; (800da6c <_strtod_l+0xbf4>)
 800d824:	403b      	ands	r3, r7
 800d826:	930d      	str	r3, [sp, #52]	; 0x34
 800d828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d82a:	4b91      	ldr	r3, [pc, #580]	; (800da70 <_strtod_l+0xbf8>)
 800d82c:	429a      	cmp	r2, r3
 800d82e:	f040 80b0 	bne.w	800d992 <_strtod_l+0xb1a>
 800d832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d836:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d83a:	ec4b ab10 	vmov	d0, sl, fp
 800d83e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d842:	f001 f921 	bl	800ea88 <__ulp>
 800d846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d84a:	ec53 2b10 	vmov	r2, r3, d0
 800d84e:	f7f2 feeb 	bl	8000628 <__aeabi_dmul>
 800d852:	4652      	mov	r2, sl
 800d854:	465b      	mov	r3, fp
 800d856:	f7f2 fd31 	bl	80002bc <__adddf3>
 800d85a:	460b      	mov	r3, r1
 800d85c:	4983      	ldr	r1, [pc, #524]	; (800da6c <_strtod_l+0xbf4>)
 800d85e:	4a85      	ldr	r2, [pc, #532]	; (800da74 <_strtod_l+0xbfc>)
 800d860:	4019      	ands	r1, r3
 800d862:	4291      	cmp	r1, r2
 800d864:	4682      	mov	sl, r0
 800d866:	d960      	bls.n	800d92a <_strtod_l+0xab2>
 800d868:	ee18 3a90 	vmov	r3, s17
 800d86c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d870:	4293      	cmp	r3, r2
 800d872:	d104      	bne.n	800d87e <_strtod_l+0xa06>
 800d874:	ee18 3a10 	vmov	r3, s16
 800d878:	3301      	adds	r3, #1
 800d87a:	f43f ad45 	beq.w	800d308 <_strtod_l+0x490>
 800d87e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800da80 <_strtod_l+0xc08>
 800d882:	f04f 3aff 	mov.w	sl, #4294967295
 800d886:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 fdcb 	bl	800e424 <_Bfree>
 800d88e:	9905      	ldr	r1, [sp, #20]
 800d890:	4620      	mov	r0, r4
 800d892:	f000 fdc7 	bl	800e424 <_Bfree>
 800d896:	4631      	mov	r1, r6
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 fdc3 	bl	800e424 <_Bfree>
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 fdbf 	bl	800e424 <_Bfree>
 800d8a6:	e61a      	b.n	800d4de <_strtod_l+0x666>
 800d8a8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ac:	d11b      	bne.n	800d8e6 <_strtod_l+0xa6e>
 800d8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8b2:	b9f3      	cbnz	r3, 800d8f2 <_strtod_l+0xa7a>
 800d8b4:	4b6c      	ldr	r3, [pc, #432]	; (800da68 <_strtod_l+0xbf0>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	f7f3 f926 	bl	8000b0c <__aeabi_dcmplt>
 800d8c0:	b9d0      	cbnz	r0, 800d8f8 <_strtod_l+0xa80>
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	4b6c      	ldr	r3, [pc, #432]	; (800da78 <_strtod_l+0xc00>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f7f2 fead 	bl	8000628 <__aeabi_dmul>
 800d8ce:	4680      	mov	r8, r0
 800d8d0:	4689      	mov	r9, r1
 800d8d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d8d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d8da:	9315      	str	r3, [sp, #84]	; 0x54
 800d8dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d8e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d8e4:	e79d      	b.n	800d822 <_strtod_l+0x9aa>
 800d8e6:	f1ba 0f01 	cmp.w	sl, #1
 800d8ea:	d102      	bne.n	800d8f2 <_strtod_l+0xa7a>
 800d8ec:	2f00      	cmp	r7, #0
 800d8ee:	f43f ad83 	beq.w	800d3f8 <_strtod_l+0x580>
 800d8f2:	4b62      	ldr	r3, [pc, #392]	; (800da7c <_strtod_l+0xc04>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	e78e      	b.n	800d816 <_strtod_l+0x99e>
 800d8f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800da78 <_strtod_l+0xc00>
 800d8fc:	f04f 0800 	mov.w	r8, #0
 800d900:	e7e7      	b.n	800d8d2 <_strtod_l+0xa5a>
 800d902:	4b5d      	ldr	r3, [pc, #372]	; (800da78 <_strtod_l+0xc00>)
 800d904:	4640      	mov	r0, r8
 800d906:	4649      	mov	r1, r9
 800d908:	2200      	movs	r2, #0
 800d90a:	f7f2 fe8d 	bl	8000628 <__aeabi_dmul>
 800d90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d910:	4680      	mov	r8, r0
 800d912:	4689      	mov	r9, r1
 800d914:	b933      	cbnz	r3, 800d924 <_strtod_l+0xaac>
 800d916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d91a:	900e      	str	r0, [sp, #56]	; 0x38
 800d91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d91e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d922:	e7dd      	b.n	800d8e0 <_strtod_l+0xa68>
 800d924:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d928:	e7f9      	b.n	800d91e <_strtod_l+0xaa6>
 800d92a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d92e:	9b04      	ldr	r3, [sp, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1a8      	bne.n	800d886 <_strtod_l+0xa0e>
 800d934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d93a:	0d1b      	lsrs	r3, r3, #20
 800d93c:	051b      	lsls	r3, r3, #20
 800d93e:	429a      	cmp	r2, r3
 800d940:	d1a1      	bne.n	800d886 <_strtod_l+0xa0e>
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	f7f3 f9cf 	bl	8000ce8 <__aeabi_d2lz>
 800d94a:	f7f2 fe3f 	bl	80005cc <__aeabi_l2d>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fcaf 	bl	80002b8 <__aeabi_dsub>
 800d95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d95c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d960:	ea43 030a 	orr.w	r3, r3, sl
 800d964:	4313      	orrs	r3, r2
 800d966:	4680      	mov	r8, r0
 800d968:	4689      	mov	r9, r1
 800d96a:	d055      	beq.n	800da18 <_strtod_l+0xba0>
 800d96c:	a336      	add	r3, pc, #216	; (adr r3, 800da48 <_strtod_l+0xbd0>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	f7f3 f8cb 	bl	8000b0c <__aeabi_dcmplt>
 800d976:	2800      	cmp	r0, #0
 800d978:	f47f acd0 	bne.w	800d31c <_strtod_l+0x4a4>
 800d97c:	a334      	add	r3, pc, #208	; (adr r3, 800da50 <_strtod_l+0xbd8>)
 800d97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	f7f3 f8df 	bl	8000b48 <__aeabi_dcmpgt>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	f43f af7b 	beq.w	800d886 <_strtod_l+0xa0e>
 800d990:	e4c4      	b.n	800d31c <_strtod_l+0x4a4>
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	b333      	cbz	r3, 800d9e4 <_strtod_l+0xb6c>
 800d996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d99c:	d822      	bhi.n	800d9e4 <_strtod_l+0xb6c>
 800d99e:	a32e      	add	r3, pc, #184	; (adr r3, 800da58 <_strtod_l+0xbe0>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f3 f8ba 	bl	8000b20 <__aeabi_dcmple>
 800d9ac:	b1a0      	cbz	r0, 800d9d8 <_strtod_l+0xb60>
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	4640      	mov	r0, r8
 800d9b2:	f7f3 f911 	bl	8000bd8 <__aeabi_d2uiz>
 800d9b6:	2801      	cmp	r0, #1
 800d9b8:	bf38      	it	cc
 800d9ba:	2001      	movcc	r0, #1
 800d9bc:	f7f2 fdba 	bl	8000534 <__aeabi_ui2d>
 800d9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	4689      	mov	r9, r1
 800d9c6:	bb23      	cbnz	r3, 800da12 <_strtod_l+0xb9a>
 800d9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9cc:	9010      	str	r0, [sp, #64]	; 0x40
 800d9ce:	9311      	str	r3, [sp, #68]	; 0x44
 800d9d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d9e0:	1a9b      	subs	r3, r3, r2
 800d9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ec:	eef0 0a68 	vmov.f32	s1, s17
 800d9f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d9f4:	f001 f848 	bl	800ea88 <__ulp>
 800d9f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9fc:	ec53 2b10 	vmov	r2, r3, d0
 800da00:	f7f2 fe12 	bl	8000628 <__aeabi_dmul>
 800da04:	ec53 2b18 	vmov	r2, r3, d8
 800da08:	f7f2 fc58 	bl	80002bc <__adddf3>
 800da0c:	4682      	mov	sl, r0
 800da0e:	468b      	mov	fp, r1
 800da10:	e78d      	b.n	800d92e <_strtod_l+0xab6>
 800da12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800da16:	e7db      	b.n	800d9d0 <_strtod_l+0xb58>
 800da18:	a311      	add	r3, pc, #68	; (adr r3, 800da60 <_strtod_l+0xbe8>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f3 f875 	bl	8000b0c <__aeabi_dcmplt>
 800da22:	e7b2      	b.n	800d98a <_strtod_l+0xb12>
 800da24:	2300      	movs	r3, #0
 800da26:	930a      	str	r3, [sp, #40]	; 0x28
 800da28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	f7ff ba6b 	b.w	800cf08 <_strtod_l+0x90>
 800da32:	2a65      	cmp	r2, #101	; 0x65
 800da34:	f43f ab5f 	beq.w	800d0f6 <_strtod_l+0x27e>
 800da38:	2a45      	cmp	r2, #69	; 0x45
 800da3a:	f43f ab5c 	beq.w	800d0f6 <_strtod_l+0x27e>
 800da3e:	2301      	movs	r3, #1
 800da40:	f7ff bb94 	b.w	800d16c <_strtod_l+0x2f4>
 800da44:	f3af 8000 	nop.w
 800da48:	94a03595 	.word	0x94a03595
 800da4c:	3fdfffff 	.word	0x3fdfffff
 800da50:	35afe535 	.word	0x35afe535
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	ffc00000 	.word	0xffc00000
 800da5c:	41dfffff 	.word	0x41dfffff
 800da60:	94a03595 	.word	0x94a03595
 800da64:	3fcfffff 	.word	0x3fcfffff
 800da68:	3ff00000 	.word	0x3ff00000
 800da6c:	7ff00000 	.word	0x7ff00000
 800da70:	7fe00000 	.word	0x7fe00000
 800da74:	7c9fffff 	.word	0x7c9fffff
 800da78:	3fe00000 	.word	0x3fe00000
 800da7c:	bff00000 	.word	0xbff00000
 800da80:	7fefffff 	.word	0x7fefffff

0800da84 <strtod>:
 800da84:	460a      	mov	r2, r1
 800da86:	4601      	mov	r1, r0
 800da88:	4802      	ldr	r0, [pc, #8]	; (800da94 <strtod+0x10>)
 800da8a:	4b03      	ldr	r3, [pc, #12]	; (800da98 <strtod+0x14>)
 800da8c:	6800      	ldr	r0, [r0, #0]
 800da8e:	f7ff b9f3 	b.w	800ce78 <_strtod_l>
 800da92:	bf00      	nop
 800da94:	20000034 	.word	0x20000034
 800da98:	2000009c 	.word	0x2000009c

0800da9c <_write_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4d07      	ldr	r5, [pc, #28]	; (800dabc <_write_r+0x20>)
 800daa0:	4604      	mov	r4, r0
 800daa2:	4608      	mov	r0, r1
 800daa4:	4611      	mov	r1, r2
 800daa6:	2200      	movs	r2, #0
 800daa8:	602a      	str	r2, [r5, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	f7f6 fe39 	bl	8004722 <_write>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	d102      	bne.n	800daba <_write_r+0x1e>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	b103      	cbz	r3, 800daba <_write_r+0x1e>
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	20001a60 	.word	0x20001a60

0800dac0 <_close_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d06      	ldr	r5, [pc, #24]	; (800dadc <_close_r+0x1c>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f6 fe45 	bl	800475a <_close>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_close_r+0x1a>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_close_r+0x1a>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	20001a60 	.word	0x20001a60

0800dae0 <__sflush_r>:
 800dae0:	898a      	ldrh	r2, [r1, #12]
 800dae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae6:	4605      	mov	r5, r0
 800dae8:	0710      	lsls	r0, r2, #28
 800daea:	460c      	mov	r4, r1
 800daec:	d458      	bmi.n	800dba0 <__sflush_r+0xc0>
 800daee:	684b      	ldr	r3, [r1, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	dc05      	bgt.n	800db00 <__sflush_r+0x20>
 800daf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dc02      	bgt.n	800db00 <__sflush_r+0x20>
 800dafa:	2000      	movs	r0, #0
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db02:	2e00      	cmp	r6, #0
 800db04:	d0f9      	beq.n	800dafa <__sflush_r+0x1a>
 800db06:	2300      	movs	r3, #0
 800db08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db0c:	682f      	ldr	r7, [r5, #0]
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	d032      	beq.n	800db78 <__sflush_r+0x98>
 800db12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	075a      	lsls	r2, r3, #29
 800db18:	d505      	bpl.n	800db26 <__sflush_r+0x46>
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	1ac0      	subs	r0, r0, r3
 800db1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db20:	b10b      	cbz	r3, 800db26 <__sflush_r+0x46>
 800db22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db24:	1ac0      	subs	r0, r0, r3
 800db26:	2300      	movs	r3, #0
 800db28:	4602      	mov	r2, r0
 800db2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db2c:	6a21      	ldr	r1, [r4, #32]
 800db2e:	4628      	mov	r0, r5
 800db30:	47b0      	blx	r6
 800db32:	1c43      	adds	r3, r0, #1
 800db34:	89a3      	ldrh	r3, [r4, #12]
 800db36:	d106      	bne.n	800db46 <__sflush_r+0x66>
 800db38:	6829      	ldr	r1, [r5, #0]
 800db3a:	291d      	cmp	r1, #29
 800db3c:	d82c      	bhi.n	800db98 <__sflush_r+0xb8>
 800db3e:	4a2a      	ldr	r2, [pc, #168]	; (800dbe8 <__sflush_r+0x108>)
 800db40:	40ca      	lsrs	r2, r1
 800db42:	07d6      	lsls	r6, r2, #31
 800db44:	d528      	bpl.n	800db98 <__sflush_r+0xb8>
 800db46:	2200      	movs	r2, #0
 800db48:	6062      	str	r2, [r4, #4]
 800db4a:	04d9      	lsls	r1, r3, #19
 800db4c:	6922      	ldr	r2, [r4, #16]
 800db4e:	6022      	str	r2, [r4, #0]
 800db50:	d504      	bpl.n	800db5c <__sflush_r+0x7c>
 800db52:	1c42      	adds	r2, r0, #1
 800db54:	d101      	bne.n	800db5a <__sflush_r+0x7a>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	b903      	cbnz	r3, 800db5c <__sflush_r+0x7c>
 800db5a:	6560      	str	r0, [r4, #84]	; 0x54
 800db5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db5e:	602f      	str	r7, [r5, #0]
 800db60:	2900      	cmp	r1, #0
 800db62:	d0ca      	beq.n	800dafa <__sflush_r+0x1a>
 800db64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <__sflush_r+0x92>
 800db6c:	4628      	mov	r0, r5
 800db6e:	f7fe ffc9 	bl	800cb04 <_free_r>
 800db72:	2000      	movs	r0, #0
 800db74:	6360      	str	r0, [r4, #52]	; 0x34
 800db76:	e7c1      	b.n	800dafc <__sflush_r+0x1c>
 800db78:	6a21      	ldr	r1, [r4, #32]
 800db7a:	2301      	movs	r3, #1
 800db7c:	4628      	mov	r0, r5
 800db7e:	47b0      	blx	r6
 800db80:	1c41      	adds	r1, r0, #1
 800db82:	d1c7      	bne.n	800db14 <__sflush_r+0x34>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c4      	beq.n	800db14 <__sflush_r+0x34>
 800db8a:	2b1d      	cmp	r3, #29
 800db8c:	d001      	beq.n	800db92 <__sflush_r+0xb2>
 800db8e:	2b16      	cmp	r3, #22
 800db90:	d101      	bne.n	800db96 <__sflush_r+0xb6>
 800db92:	602f      	str	r7, [r5, #0]
 800db94:	e7b1      	b.n	800dafa <__sflush_r+0x1a>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	e7ad      	b.n	800dafc <__sflush_r+0x1c>
 800dba0:	690f      	ldr	r7, [r1, #16]
 800dba2:	2f00      	cmp	r7, #0
 800dba4:	d0a9      	beq.n	800dafa <__sflush_r+0x1a>
 800dba6:	0793      	lsls	r3, r2, #30
 800dba8:	680e      	ldr	r6, [r1, #0]
 800dbaa:	bf08      	it	eq
 800dbac:	694b      	ldreq	r3, [r1, #20]
 800dbae:	600f      	str	r7, [r1, #0]
 800dbb0:	bf18      	it	ne
 800dbb2:	2300      	movne	r3, #0
 800dbb4:	eba6 0807 	sub.w	r8, r6, r7
 800dbb8:	608b      	str	r3, [r1, #8]
 800dbba:	f1b8 0f00 	cmp.w	r8, #0
 800dbbe:	dd9c      	ble.n	800dafa <__sflush_r+0x1a>
 800dbc0:	6a21      	ldr	r1, [r4, #32]
 800dbc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbc4:	4643      	mov	r3, r8
 800dbc6:	463a      	mov	r2, r7
 800dbc8:	4628      	mov	r0, r5
 800dbca:	47b0      	blx	r6
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	dc06      	bgt.n	800dbde <__sflush_r+0xfe>
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	e78e      	b.n	800dafc <__sflush_r+0x1c>
 800dbde:	4407      	add	r7, r0
 800dbe0:	eba8 0800 	sub.w	r8, r8, r0
 800dbe4:	e7e9      	b.n	800dbba <__sflush_r+0xda>
 800dbe6:	bf00      	nop
 800dbe8:	20400001 	.word	0x20400001

0800dbec <_fflush_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	690b      	ldr	r3, [r1, #16]
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	b913      	cbnz	r3, 800dbfc <_fflush_r+0x10>
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	b118      	cbz	r0, 800dc06 <_fflush_r+0x1a>
 800dbfe:	6983      	ldr	r3, [r0, #24]
 800dc00:	b90b      	cbnz	r3, 800dc06 <_fflush_r+0x1a>
 800dc02:	f7fe fe93 	bl	800c92c <__sinit>
 800dc06:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <_fflush_r+0x6c>)
 800dc08:	429c      	cmp	r4, r3
 800dc0a:	d11b      	bne.n	800dc44 <_fflush_r+0x58>
 800dc0c:	686c      	ldr	r4, [r5, #4]
 800dc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0ef      	beq.n	800dbf6 <_fflush_r+0xa>
 800dc16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc18:	07d0      	lsls	r0, r2, #31
 800dc1a:	d404      	bmi.n	800dc26 <_fflush_r+0x3a>
 800dc1c:	0599      	lsls	r1, r3, #22
 800dc1e:	d402      	bmi.n	800dc26 <_fflush_r+0x3a>
 800dc20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc22:	f7fe ff46 	bl	800cab2 <__retarget_lock_acquire_recursive>
 800dc26:	4628      	mov	r0, r5
 800dc28:	4621      	mov	r1, r4
 800dc2a:	f7ff ff59 	bl	800dae0 <__sflush_r>
 800dc2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc30:	07da      	lsls	r2, r3, #31
 800dc32:	4605      	mov	r5, r0
 800dc34:	d4e0      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	059b      	lsls	r3, r3, #22
 800dc3a:	d4dd      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc3e:	f7fe ff39 	bl	800cab4 <__retarget_lock_release_recursive>
 800dc42:	e7d9      	b.n	800dbf8 <_fflush_r+0xc>
 800dc44:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <_fflush_r+0x70>)
 800dc46:	429c      	cmp	r4, r3
 800dc48:	d101      	bne.n	800dc4e <_fflush_r+0x62>
 800dc4a:	68ac      	ldr	r4, [r5, #8]
 800dc4c:	e7df      	b.n	800dc0e <_fflush_r+0x22>
 800dc4e:	4b04      	ldr	r3, [pc, #16]	; (800dc60 <_fflush_r+0x74>)
 800dc50:	429c      	cmp	r4, r3
 800dc52:	bf08      	it	eq
 800dc54:	68ec      	ldreq	r4, [r5, #12]
 800dc56:	e7da      	b.n	800dc0e <_fflush_r+0x22>
 800dc58:	080106a0 	.word	0x080106a0
 800dc5c:	080106c0 	.word	0x080106c0
 800dc60:	08010680 	.word	0x08010680

0800dc64 <rshift>:
 800dc64:	6903      	ldr	r3, [r0, #16]
 800dc66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc72:	f100 0414 	add.w	r4, r0, #20
 800dc76:	dd45      	ble.n	800dd04 <rshift+0xa0>
 800dc78:	f011 011f 	ands.w	r1, r1, #31
 800dc7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc84:	d10c      	bne.n	800dca0 <rshift+0x3c>
 800dc86:	f100 0710 	add.w	r7, r0, #16
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	42b1      	cmp	r1, r6
 800dc8e:	d334      	bcc.n	800dcfa <rshift+0x96>
 800dc90:	1a9b      	subs	r3, r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	1eea      	subs	r2, r5, #3
 800dc96:	4296      	cmp	r6, r2
 800dc98:	bf38      	it	cc
 800dc9a:	2300      	movcc	r3, #0
 800dc9c:	4423      	add	r3, r4
 800dc9e:	e015      	b.n	800dccc <rshift+0x68>
 800dca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dca4:	f1c1 0820 	rsb	r8, r1, #32
 800dca8:	40cf      	lsrs	r7, r1
 800dcaa:	f105 0e04 	add.w	lr, r5, #4
 800dcae:	46a1      	mov	r9, r4
 800dcb0:	4576      	cmp	r6, lr
 800dcb2:	46f4      	mov	ip, lr
 800dcb4:	d815      	bhi.n	800dce2 <rshift+0x7e>
 800dcb6:	1a9a      	subs	r2, r3, r2
 800dcb8:	0092      	lsls	r2, r2, #2
 800dcba:	3a04      	subs	r2, #4
 800dcbc:	3501      	adds	r5, #1
 800dcbe:	42ae      	cmp	r6, r5
 800dcc0:	bf38      	it	cc
 800dcc2:	2200      	movcc	r2, #0
 800dcc4:	18a3      	adds	r3, r4, r2
 800dcc6:	50a7      	str	r7, [r4, r2]
 800dcc8:	b107      	cbz	r7, 800dccc <rshift+0x68>
 800dcca:	3304      	adds	r3, #4
 800dccc:	1b1a      	subs	r2, r3, r4
 800dcce:	42a3      	cmp	r3, r4
 800dcd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dcd4:	bf08      	it	eq
 800dcd6:	2300      	moveq	r3, #0
 800dcd8:	6102      	str	r2, [r0, #16]
 800dcda:	bf08      	it	eq
 800dcdc:	6143      	streq	r3, [r0, #20]
 800dcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce2:	f8dc c000 	ldr.w	ip, [ip]
 800dce6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcea:	ea4c 0707 	orr.w	r7, ip, r7
 800dcee:	f849 7b04 	str.w	r7, [r9], #4
 800dcf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcf6:	40cf      	lsrs	r7, r1
 800dcf8:	e7da      	b.n	800dcb0 <rshift+0x4c>
 800dcfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd02:	e7c3      	b.n	800dc8c <rshift+0x28>
 800dd04:	4623      	mov	r3, r4
 800dd06:	e7e1      	b.n	800dccc <rshift+0x68>

0800dd08 <__hexdig_fun>:
 800dd08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd0c:	2b09      	cmp	r3, #9
 800dd0e:	d802      	bhi.n	800dd16 <__hexdig_fun+0xe>
 800dd10:	3820      	subs	r0, #32
 800dd12:	b2c0      	uxtb	r0, r0
 800dd14:	4770      	bx	lr
 800dd16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d801      	bhi.n	800dd22 <__hexdig_fun+0x1a>
 800dd1e:	3847      	subs	r0, #71	; 0x47
 800dd20:	e7f7      	b.n	800dd12 <__hexdig_fun+0xa>
 800dd22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd26:	2b05      	cmp	r3, #5
 800dd28:	d801      	bhi.n	800dd2e <__hexdig_fun+0x26>
 800dd2a:	3827      	subs	r0, #39	; 0x27
 800dd2c:	e7f1      	b.n	800dd12 <__hexdig_fun+0xa>
 800dd2e:	2000      	movs	r0, #0
 800dd30:	4770      	bx	lr
	...

0800dd34 <__gethex>:
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	ed2d 8b02 	vpush	{d8}
 800dd3c:	b089      	sub	sp, #36	; 0x24
 800dd3e:	ee08 0a10 	vmov	s16, r0
 800dd42:	9304      	str	r3, [sp, #16]
 800dd44:	4bb4      	ldr	r3, [pc, #720]	; (800e018 <__gethex+0x2e4>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	468b      	mov	fp, r1
 800dd4e:	4690      	mov	r8, r2
 800dd50:	f7f2 fa50 	bl	80001f4 <strlen>
 800dd54:	9b01      	ldr	r3, [sp, #4]
 800dd56:	f8db 2000 	ldr.w	r2, [fp]
 800dd5a:	4403      	add	r3, r0
 800dd5c:	4682      	mov	sl, r0
 800dd5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dd62:	9305      	str	r3, [sp, #20]
 800dd64:	1c93      	adds	r3, r2, #2
 800dd66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dd6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd6e:	32fe      	adds	r2, #254	; 0xfe
 800dd70:	18d1      	adds	r1, r2, r3
 800dd72:	461f      	mov	r7, r3
 800dd74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd78:	9100      	str	r1, [sp, #0]
 800dd7a:	2830      	cmp	r0, #48	; 0x30
 800dd7c:	d0f8      	beq.n	800dd70 <__gethex+0x3c>
 800dd7e:	f7ff ffc3 	bl	800dd08 <__hexdig_fun>
 800dd82:	4604      	mov	r4, r0
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d13a      	bne.n	800ddfe <__gethex+0xca>
 800dd88:	9901      	ldr	r1, [sp, #4]
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff f842 	bl	800ce16 <strncmp>
 800dd92:	4605      	mov	r5, r0
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d168      	bne.n	800de6a <__gethex+0x136>
 800dd98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dd9c:	eb07 060a 	add.w	r6, r7, sl
 800dda0:	f7ff ffb2 	bl	800dd08 <__hexdig_fun>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d062      	beq.n	800de6e <__gethex+0x13a>
 800dda8:	4633      	mov	r3, r6
 800ddaa:	7818      	ldrb	r0, [r3, #0]
 800ddac:	2830      	cmp	r0, #48	; 0x30
 800ddae:	461f      	mov	r7, r3
 800ddb0:	f103 0301 	add.w	r3, r3, #1
 800ddb4:	d0f9      	beq.n	800ddaa <__gethex+0x76>
 800ddb6:	f7ff ffa7 	bl	800dd08 <__hexdig_fun>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	fab0 f480 	clz	r4, r0
 800ddc0:	0964      	lsrs	r4, r4, #5
 800ddc2:	4635      	mov	r5, r6
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	463a      	mov	r2, r7
 800ddc8:	4616      	mov	r6, r2
 800ddca:	3201      	adds	r2, #1
 800ddcc:	7830      	ldrb	r0, [r6, #0]
 800ddce:	f7ff ff9b 	bl	800dd08 <__hexdig_fun>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d1f8      	bne.n	800ddc8 <__gethex+0x94>
 800ddd6:	9901      	ldr	r1, [sp, #4]
 800ddd8:	4652      	mov	r2, sl
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff f81b 	bl	800ce16 <strncmp>
 800dde0:	b980      	cbnz	r0, 800de04 <__gethex+0xd0>
 800dde2:	b94d      	cbnz	r5, 800ddf8 <__gethex+0xc4>
 800dde4:	eb06 050a 	add.w	r5, r6, sl
 800dde8:	462a      	mov	r2, r5
 800ddea:	4616      	mov	r6, r2
 800ddec:	3201      	adds	r2, #1
 800ddee:	7830      	ldrb	r0, [r6, #0]
 800ddf0:	f7ff ff8a 	bl	800dd08 <__hexdig_fun>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d1f8      	bne.n	800ddea <__gethex+0xb6>
 800ddf8:	1bad      	subs	r5, r5, r6
 800ddfa:	00ad      	lsls	r5, r5, #2
 800ddfc:	e004      	b.n	800de08 <__gethex+0xd4>
 800ddfe:	2400      	movs	r4, #0
 800de00:	4625      	mov	r5, r4
 800de02:	e7e0      	b.n	800ddc6 <__gethex+0x92>
 800de04:	2d00      	cmp	r5, #0
 800de06:	d1f7      	bne.n	800ddf8 <__gethex+0xc4>
 800de08:	7833      	ldrb	r3, [r6, #0]
 800de0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de0e:	2b50      	cmp	r3, #80	; 0x50
 800de10:	d13b      	bne.n	800de8a <__gethex+0x156>
 800de12:	7873      	ldrb	r3, [r6, #1]
 800de14:	2b2b      	cmp	r3, #43	; 0x2b
 800de16:	d02c      	beq.n	800de72 <__gethex+0x13e>
 800de18:	2b2d      	cmp	r3, #45	; 0x2d
 800de1a:	d02e      	beq.n	800de7a <__gethex+0x146>
 800de1c:	1c71      	adds	r1, r6, #1
 800de1e:	f04f 0900 	mov.w	r9, #0
 800de22:	7808      	ldrb	r0, [r1, #0]
 800de24:	f7ff ff70 	bl	800dd08 <__hexdig_fun>
 800de28:	1e43      	subs	r3, r0, #1
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b18      	cmp	r3, #24
 800de2e:	d82c      	bhi.n	800de8a <__gethex+0x156>
 800de30:	f1a0 0210 	sub.w	r2, r0, #16
 800de34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de38:	f7ff ff66 	bl	800dd08 <__hexdig_fun>
 800de3c:	1e43      	subs	r3, r0, #1
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b18      	cmp	r3, #24
 800de42:	d91d      	bls.n	800de80 <__gethex+0x14c>
 800de44:	f1b9 0f00 	cmp.w	r9, #0
 800de48:	d000      	beq.n	800de4c <__gethex+0x118>
 800de4a:	4252      	negs	r2, r2
 800de4c:	4415      	add	r5, r2
 800de4e:	f8cb 1000 	str.w	r1, [fp]
 800de52:	b1e4      	cbz	r4, 800de8e <__gethex+0x15a>
 800de54:	9b00      	ldr	r3, [sp, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	bf14      	ite	ne
 800de5a:	2700      	movne	r7, #0
 800de5c:	2706      	moveq	r7, #6
 800de5e:	4638      	mov	r0, r7
 800de60:	b009      	add	sp, #36	; 0x24
 800de62:	ecbd 8b02 	vpop	{d8}
 800de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6a:	463e      	mov	r6, r7
 800de6c:	4625      	mov	r5, r4
 800de6e:	2401      	movs	r4, #1
 800de70:	e7ca      	b.n	800de08 <__gethex+0xd4>
 800de72:	f04f 0900 	mov.w	r9, #0
 800de76:	1cb1      	adds	r1, r6, #2
 800de78:	e7d3      	b.n	800de22 <__gethex+0xee>
 800de7a:	f04f 0901 	mov.w	r9, #1
 800de7e:	e7fa      	b.n	800de76 <__gethex+0x142>
 800de80:	230a      	movs	r3, #10
 800de82:	fb03 0202 	mla	r2, r3, r2, r0
 800de86:	3a10      	subs	r2, #16
 800de88:	e7d4      	b.n	800de34 <__gethex+0x100>
 800de8a:	4631      	mov	r1, r6
 800de8c:	e7df      	b.n	800de4e <__gethex+0x11a>
 800de8e:	1bf3      	subs	r3, r6, r7
 800de90:	3b01      	subs	r3, #1
 800de92:	4621      	mov	r1, r4
 800de94:	2b07      	cmp	r3, #7
 800de96:	dc0b      	bgt.n	800deb0 <__gethex+0x17c>
 800de98:	ee18 0a10 	vmov	r0, s16
 800de9c:	f000 fa82 	bl	800e3a4 <_Balloc>
 800dea0:	4604      	mov	r4, r0
 800dea2:	b940      	cbnz	r0, 800deb6 <__gethex+0x182>
 800dea4:	4b5d      	ldr	r3, [pc, #372]	; (800e01c <__gethex+0x2e8>)
 800dea6:	4602      	mov	r2, r0
 800dea8:	21de      	movs	r1, #222	; 0xde
 800deaa:	485d      	ldr	r0, [pc, #372]	; (800e020 <__gethex+0x2ec>)
 800deac:	f001 ff28 	bl	800fd00 <__assert_func>
 800deb0:	3101      	adds	r1, #1
 800deb2:	105b      	asrs	r3, r3, #1
 800deb4:	e7ee      	b.n	800de94 <__gethex+0x160>
 800deb6:	f100 0914 	add.w	r9, r0, #20
 800deba:	f04f 0b00 	mov.w	fp, #0
 800debe:	f1ca 0301 	rsb	r3, sl, #1
 800dec2:	f8cd 9008 	str.w	r9, [sp, #8]
 800dec6:	f8cd b000 	str.w	fp, [sp]
 800deca:	9306      	str	r3, [sp, #24]
 800decc:	42b7      	cmp	r7, r6
 800dece:	d340      	bcc.n	800df52 <__gethex+0x21e>
 800ded0:	9802      	ldr	r0, [sp, #8]
 800ded2:	9b00      	ldr	r3, [sp, #0]
 800ded4:	f840 3b04 	str.w	r3, [r0], #4
 800ded8:	eba0 0009 	sub.w	r0, r0, r9
 800dedc:	1080      	asrs	r0, r0, #2
 800dede:	0146      	lsls	r6, r0, #5
 800dee0:	6120      	str	r0, [r4, #16]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 fb50 	bl	800e588 <__hi0bits>
 800dee8:	1a30      	subs	r0, r6, r0
 800deea:	f8d8 6000 	ldr.w	r6, [r8]
 800deee:	42b0      	cmp	r0, r6
 800def0:	dd63      	ble.n	800dfba <__gethex+0x286>
 800def2:	1b87      	subs	r7, r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	4620      	mov	r0, r4
 800def8:	f000 fef4 	bl	800ece4 <__any_on>
 800defc:	4682      	mov	sl, r0
 800defe:	b1a8      	cbz	r0, 800df2c <__gethex+0x1f8>
 800df00:	1e7b      	subs	r3, r7, #1
 800df02:	1159      	asrs	r1, r3, #5
 800df04:	f003 021f 	and.w	r2, r3, #31
 800df08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df0c:	f04f 0a01 	mov.w	sl, #1
 800df10:	fa0a f202 	lsl.w	r2, sl, r2
 800df14:	420a      	tst	r2, r1
 800df16:	d009      	beq.n	800df2c <__gethex+0x1f8>
 800df18:	4553      	cmp	r3, sl
 800df1a:	dd05      	ble.n	800df28 <__gethex+0x1f4>
 800df1c:	1eb9      	subs	r1, r7, #2
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 fee0 	bl	800ece4 <__any_on>
 800df24:	2800      	cmp	r0, #0
 800df26:	d145      	bne.n	800dfb4 <__gethex+0x280>
 800df28:	f04f 0a02 	mov.w	sl, #2
 800df2c:	4639      	mov	r1, r7
 800df2e:	4620      	mov	r0, r4
 800df30:	f7ff fe98 	bl	800dc64 <rshift>
 800df34:	443d      	add	r5, r7
 800df36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df3a:	42ab      	cmp	r3, r5
 800df3c:	da4c      	bge.n	800dfd8 <__gethex+0x2a4>
 800df3e:	ee18 0a10 	vmov	r0, s16
 800df42:	4621      	mov	r1, r4
 800df44:	f000 fa6e 	bl	800e424 <_Bfree>
 800df48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df4a:	2300      	movs	r3, #0
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	27a3      	movs	r7, #163	; 0xa3
 800df50:	e785      	b.n	800de5e <__gethex+0x12a>
 800df52:	1e73      	subs	r3, r6, #1
 800df54:	9a05      	ldr	r2, [sp, #20]
 800df56:	9303      	str	r3, [sp, #12]
 800df58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d019      	beq.n	800df94 <__gethex+0x260>
 800df60:	f1bb 0f20 	cmp.w	fp, #32
 800df64:	d107      	bne.n	800df76 <__gethex+0x242>
 800df66:	9b02      	ldr	r3, [sp, #8]
 800df68:	9a00      	ldr	r2, [sp, #0]
 800df6a:	f843 2b04 	str.w	r2, [r3], #4
 800df6e:	9302      	str	r3, [sp, #8]
 800df70:	2300      	movs	r3, #0
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	469b      	mov	fp, r3
 800df76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df7a:	f7ff fec5 	bl	800dd08 <__hexdig_fun>
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	f000 000f 	and.w	r0, r0, #15
 800df84:	fa00 f00b 	lsl.w	r0, r0, fp
 800df88:	4303      	orrs	r3, r0
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	f10b 0b04 	add.w	fp, fp, #4
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	e00d      	b.n	800dfb0 <__gethex+0x27c>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	9a06      	ldr	r2, [sp, #24]
 800df98:	4413      	add	r3, r2
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	d3e0      	bcc.n	800df60 <__gethex+0x22c>
 800df9e:	4618      	mov	r0, r3
 800dfa0:	9901      	ldr	r1, [sp, #4]
 800dfa2:	9307      	str	r3, [sp, #28]
 800dfa4:	4652      	mov	r2, sl
 800dfa6:	f7fe ff36 	bl	800ce16 <strncmp>
 800dfaa:	9b07      	ldr	r3, [sp, #28]
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d1d7      	bne.n	800df60 <__gethex+0x22c>
 800dfb0:	461e      	mov	r6, r3
 800dfb2:	e78b      	b.n	800decc <__gethex+0x198>
 800dfb4:	f04f 0a03 	mov.w	sl, #3
 800dfb8:	e7b8      	b.n	800df2c <__gethex+0x1f8>
 800dfba:	da0a      	bge.n	800dfd2 <__gethex+0x29e>
 800dfbc:	1a37      	subs	r7, r6, r0
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	ee18 0a10 	vmov	r0, s16
 800dfc4:	463a      	mov	r2, r7
 800dfc6:	f000 fc49 	bl	800e85c <__lshift>
 800dfca:	1bed      	subs	r5, r5, r7
 800dfcc:	4604      	mov	r4, r0
 800dfce:	f100 0914 	add.w	r9, r0, #20
 800dfd2:	f04f 0a00 	mov.w	sl, #0
 800dfd6:	e7ae      	b.n	800df36 <__gethex+0x202>
 800dfd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dfdc:	42a8      	cmp	r0, r5
 800dfde:	dd72      	ble.n	800e0c6 <__gethex+0x392>
 800dfe0:	1b45      	subs	r5, r0, r5
 800dfe2:	42ae      	cmp	r6, r5
 800dfe4:	dc36      	bgt.n	800e054 <__gethex+0x320>
 800dfe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d02a      	beq.n	800e044 <__gethex+0x310>
 800dfee:	2b03      	cmp	r3, #3
 800dff0:	d02c      	beq.n	800e04c <__gethex+0x318>
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d11c      	bne.n	800e030 <__gethex+0x2fc>
 800dff6:	42ae      	cmp	r6, r5
 800dff8:	d11a      	bne.n	800e030 <__gethex+0x2fc>
 800dffa:	2e01      	cmp	r6, #1
 800dffc:	d112      	bne.n	800e024 <__gethex+0x2f0>
 800dffe:	9a04      	ldr	r2, [sp, #16]
 800e000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	2301      	movs	r3, #1
 800e008:	6123      	str	r3, [r4, #16]
 800e00a:	f8c9 3000 	str.w	r3, [r9]
 800e00e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e010:	2762      	movs	r7, #98	; 0x62
 800e012:	601c      	str	r4, [r3, #0]
 800e014:	e723      	b.n	800de5e <__gethex+0x12a>
 800e016:	bf00      	nop
 800e018:	080107b8 	.word	0x080107b8
 800e01c:	08010740 	.word	0x08010740
 800e020:	08010751 	.word	0x08010751
 800e024:	1e71      	subs	r1, r6, #1
 800e026:	4620      	mov	r0, r4
 800e028:	f000 fe5c 	bl	800ece4 <__any_on>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d1e6      	bne.n	800dffe <__gethex+0x2ca>
 800e030:	ee18 0a10 	vmov	r0, s16
 800e034:	4621      	mov	r1, r4
 800e036:	f000 f9f5 	bl	800e424 <_Bfree>
 800e03a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e03c:	2300      	movs	r3, #0
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	2750      	movs	r7, #80	; 0x50
 800e042:	e70c      	b.n	800de5e <__gethex+0x12a>
 800e044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1f2      	bne.n	800e030 <__gethex+0x2fc>
 800e04a:	e7d8      	b.n	800dffe <__gethex+0x2ca>
 800e04c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1d5      	bne.n	800dffe <__gethex+0x2ca>
 800e052:	e7ed      	b.n	800e030 <__gethex+0x2fc>
 800e054:	1e6f      	subs	r7, r5, #1
 800e056:	f1ba 0f00 	cmp.w	sl, #0
 800e05a:	d131      	bne.n	800e0c0 <__gethex+0x38c>
 800e05c:	b127      	cbz	r7, 800e068 <__gethex+0x334>
 800e05e:	4639      	mov	r1, r7
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fe3f 	bl	800ece4 <__any_on>
 800e066:	4682      	mov	sl, r0
 800e068:	117b      	asrs	r3, r7, #5
 800e06a:	2101      	movs	r1, #1
 800e06c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e070:	f007 071f 	and.w	r7, r7, #31
 800e074:	fa01 f707 	lsl.w	r7, r1, r7
 800e078:	421f      	tst	r7, r3
 800e07a:	4629      	mov	r1, r5
 800e07c:	4620      	mov	r0, r4
 800e07e:	bf18      	it	ne
 800e080:	f04a 0a02 	orrne.w	sl, sl, #2
 800e084:	1b76      	subs	r6, r6, r5
 800e086:	f7ff fded 	bl	800dc64 <rshift>
 800e08a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e08e:	2702      	movs	r7, #2
 800e090:	f1ba 0f00 	cmp.w	sl, #0
 800e094:	d048      	beq.n	800e128 <__gethex+0x3f4>
 800e096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d015      	beq.n	800e0ca <__gethex+0x396>
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d017      	beq.n	800e0d2 <__gethex+0x39e>
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d109      	bne.n	800e0ba <__gethex+0x386>
 800e0a6:	f01a 0f02 	tst.w	sl, #2
 800e0aa:	d006      	beq.n	800e0ba <__gethex+0x386>
 800e0ac:	f8d9 0000 	ldr.w	r0, [r9]
 800e0b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800e0b4:	f01a 0f01 	tst.w	sl, #1
 800e0b8:	d10e      	bne.n	800e0d8 <__gethex+0x3a4>
 800e0ba:	f047 0710 	orr.w	r7, r7, #16
 800e0be:	e033      	b.n	800e128 <__gethex+0x3f4>
 800e0c0:	f04f 0a01 	mov.w	sl, #1
 800e0c4:	e7d0      	b.n	800e068 <__gethex+0x334>
 800e0c6:	2701      	movs	r7, #1
 800e0c8:	e7e2      	b.n	800e090 <__gethex+0x35c>
 800e0ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0cc:	f1c3 0301 	rsb	r3, r3, #1
 800e0d0:	9315      	str	r3, [sp, #84]	; 0x54
 800e0d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0f0      	beq.n	800e0ba <__gethex+0x386>
 800e0d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e0dc:	f104 0314 	add.w	r3, r4, #20
 800e0e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e0e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e0e8:	f04f 0c00 	mov.w	ip, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e0f6:	d01c      	beq.n	800e132 <__gethex+0x3fe>
 800e0f8:	3201      	adds	r2, #1
 800e0fa:	6002      	str	r2, [r0, #0]
 800e0fc:	2f02      	cmp	r7, #2
 800e0fe:	f104 0314 	add.w	r3, r4, #20
 800e102:	d13f      	bne.n	800e184 <__gethex+0x450>
 800e104:	f8d8 2000 	ldr.w	r2, [r8]
 800e108:	3a01      	subs	r2, #1
 800e10a:	42b2      	cmp	r2, r6
 800e10c:	d10a      	bne.n	800e124 <__gethex+0x3f0>
 800e10e:	1171      	asrs	r1, r6, #5
 800e110:	2201      	movs	r2, #1
 800e112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e116:	f006 061f 	and.w	r6, r6, #31
 800e11a:	fa02 f606 	lsl.w	r6, r2, r6
 800e11e:	421e      	tst	r6, r3
 800e120:	bf18      	it	ne
 800e122:	4617      	movne	r7, r2
 800e124:	f047 0720 	orr.w	r7, r7, #32
 800e128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e12a:	601c      	str	r4, [r3, #0]
 800e12c:	9b04      	ldr	r3, [sp, #16]
 800e12e:	601d      	str	r5, [r3, #0]
 800e130:	e695      	b.n	800de5e <__gethex+0x12a>
 800e132:	4299      	cmp	r1, r3
 800e134:	f843 cc04 	str.w	ip, [r3, #-4]
 800e138:	d8d8      	bhi.n	800e0ec <__gethex+0x3b8>
 800e13a:	68a3      	ldr	r3, [r4, #8]
 800e13c:	459b      	cmp	fp, r3
 800e13e:	db19      	blt.n	800e174 <__gethex+0x440>
 800e140:	6861      	ldr	r1, [r4, #4]
 800e142:	ee18 0a10 	vmov	r0, s16
 800e146:	3101      	adds	r1, #1
 800e148:	f000 f92c 	bl	800e3a4 <_Balloc>
 800e14c:	4681      	mov	r9, r0
 800e14e:	b918      	cbnz	r0, 800e158 <__gethex+0x424>
 800e150:	4b1a      	ldr	r3, [pc, #104]	; (800e1bc <__gethex+0x488>)
 800e152:	4602      	mov	r2, r0
 800e154:	2184      	movs	r1, #132	; 0x84
 800e156:	e6a8      	b.n	800deaa <__gethex+0x176>
 800e158:	6922      	ldr	r2, [r4, #16]
 800e15a:	3202      	adds	r2, #2
 800e15c:	f104 010c 	add.w	r1, r4, #12
 800e160:	0092      	lsls	r2, r2, #2
 800e162:	300c      	adds	r0, #12
 800e164:	f7fe fcb8 	bl	800cad8 <memcpy>
 800e168:	4621      	mov	r1, r4
 800e16a:	ee18 0a10 	vmov	r0, s16
 800e16e:	f000 f959 	bl	800e424 <_Bfree>
 800e172:	464c      	mov	r4, r9
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	1c5a      	adds	r2, r3, #1
 800e178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e17c:	6122      	str	r2, [r4, #16]
 800e17e:	2201      	movs	r2, #1
 800e180:	615a      	str	r2, [r3, #20]
 800e182:	e7bb      	b.n	800e0fc <__gethex+0x3c8>
 800e184:	6922      	ldr	r2, [r4, #16]
 800e186:	455a      	cmp	r2, fp
 800e188:	dd0b      	ble.n	800e1a2 <__gethex+0x46e>
 800e18a:	2101      	movs	r1, #1
 800e18c:	4620      	mov	r0, r4
 800e18e:	f7ff fd69 	bl	800dc64 <rshift>
 800e192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e196:	3501      	adds	r5, #1
 800e198:	42ab      	cmp	r3, r5
 800e19a:	f6ff aed0 	blt.w	800df3e <__gethex+0x20a>
 800e19e:	2701      	movs	r7, #1
 800e1a0:	e7c0      	b.n	800e124 <__gethex+0x3f0>
 800e1a2:	f016 061f 	ands.w	r6, r6, #31
 800e1a6:	d0fa      	beq.n	800e19e <__gethex+0x46a>
 800e1a8:	4453      	add	r3, sl
 800e1aa:	f1c6 0620 	rsb	r6, r6, #32
 800e1ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e1b2:	f000 f9e9 	bl	800e588 <__hi0bits>
 800e1b6:	42b0      	cmp	r0, r6
 800e1b8:	dbe7      	blt.n	800e18a <__gethex+0x456>
 800e1ba:	e7f0      	b.n	800e19e <__gethex+0x46a>
 800e1bc:	08010740 	.word	0x08010740

0800e1c0 <L_shift>:
 800e1c0:	f1c2 0208 	rsb	r2, r2, #8
 800e1c4:	0092      	lsls	r2, r2, #2
 800e1c6:	b570      	push	{r4, r5, r6, lr}
 800e1c8:	f1c2 0620 	rsb	r6, r2, #32
 800e1cc:	6843      	ldr	r3, [r0, #4]
 800e1ce:	6804      	ldr	r4, [r0, #0]
 800e1d0:	fa03 f506 	lsl.w	r5, r3, r6
 800e1d4:	432c      	orrs	r4, r5
 800e1d6:	40d3      	lsrs	r3, r2
 800e1d8:	6004      	str	r4, [r0, #0]
 800e1da:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1de:	4288      	cmp	r0, r1
 800e1e0:	d3f4      	bcc.n	800e1cc <L_shift+0xc>
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}

0800e1e4 <__match>:
 800e1e4:	b530      	push	{r4, r5, lr}
 800e1e6:	6803      	ldr	r3, [r0, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ee:	b914      	cbnz	r4, 800e1f6 <__match+0x12>
 800e1f0:	6003      	str	r3, [r0, #0]
 800e1f2:	2001      	movs	r0, #1
 800e1f4:	bd30      	pop	{r4, r5, pc}
 800e1f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e1fe:	2d19      	cmp	r5, #25
 800e200:	bf98      	it	ls
 800e202:	3220      	addls	r2, #32
 800e204:	42a2      	cmp	r2, r4
 800e206:	d0f0      	beq.n	800e1ea <__match+0x6>
 800e208:	2000      	movs	r0, #0
 800e20a:	e7f3      	b.n	800e1f4 <__match+0x10>

0800e20c <__hexnan>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	680b      	ldr	r3, [r1, #0]
 800e212:	115e      	asrs	r6, r3, #5
 800e214:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e218:	f013 031f 	ands.w	r3, r3, #31
 800e21c:	b087      	sub	sp, #28
 800e21e:	bf18      	it	ne
 800e220:	3604      	addne	r6, #4
 800e222:	2500      	movs	r5, #0
 800e224:	1f37      	subs	r7, r6, #4
 800e226:	4690      	mov	r8, r2
 800e228:	6802      	ldr	r2, [r0, #0]
 800e22a:	9301      	str	r3, [sp, #4]
 800e22c:	4682      	mov	sl, r0
 800e22e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e232:	46b9      	mov	r9, r7
 800e234:	463c      	mov	r4, r7
 800e236:	9502      	str	r5, [sp, #8]
 800e238:	46ab      	mov	fp, r5
 800e23a:	7851      	ldrb	r1, [r2, #1]
 800e23c:	1c53      	adds	r3, r2, #1
 800e23e:	9303      	str	r3, [sp, #12]
 800e240:	b341      	cbz	r1, 800e294 <__hexnan+0x88>
 800e242:	4608      	mov	r0, r1
 800e244:	9205      	str	r2, [sp, #20]
 800e246:	9104      	str	r1, [sp, #16]
 800e248:	f7ff fd5e 	bl	800dd08 <__hexdig_fun>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d14f      	bne.n	800e2f0 <__hexnan+0xe4>
 800e250:	9904      	ldr	r1, [sp, #16]
 800e252:	9a05      	ldr	r2, [sp, #20]
 800e254:	2920      	cmp	r1, #32
 800e256:	d818      	bhi.n	800e28a <__hexnan+0x7e>
 800e258:	9b02      	ldr	r3, [sp, #8]
 800e25a:	459b      	cmp	fp, r3
 800e25c:	dd13      	ble.n	800e286 <__hexnan+0x7a>
 800e25e:	454c      	cmp	r4, r9
 800e260:	d206      	bcs.n	800e270 <__hexnan+0x64>
 800e262:	2d07      	cmp	r5, #7
 800e264:	dc04      	bgt.n	800e270 <__hexnan+0x64>
 800e266:	462a      	mov	r2, r5
 800e268:	4649      	mov	r1, r9
 800e26a:	4620      	mov	r0, r4
 800e26c:	f7ff ffa8 	bl	800e1c0 <L_shift>
 800e270:	4544      	cmp	r4, r8
 800e272:	d950      	bls.n	800e316 <__hexnan+0x10a>
 800e274:	2300      	movs	r3, #0
 800e276:	f1a4 0904 	sub.w	r9, r4, #4
 800e27a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e27e:	f8cd b008 	str.w	fp, [sp, #8]
 800e282:	464c      	mov	r4, r9
 800e284:	461d      	mov	r5, r3
 800e286:	9a03      	ldr	r2, [sp, #12]
 800e288:	e7d7      	b.n	800e23a <__hexnan+0x2e>
 800e28a:	2929      	cmp	r1, #41	; 0x29
 800e28c:	d156      	bne.n	800e33c <__hexnan+0x130>
 800e28e:	3202      	adds	r2, #2
 800e290:	f8ca 2000 	str.w	r2, [sl]
 800e294:	f1bb 0f00 	cmp.w	fp, #0
 800e298:	d050      	beq.n	800e33c <__hexnan+0x130>
 800e29a:	454c      	cmp	r4, r9
 800e29c:	d206      	bcs.n	800e2ac <__hexnan+0xa0>
 800e29e:	2d07      	cmp	r5, #7
 800e2a0:	dc04      	bgt.n	800e2ac <__hexnan+0xa0>
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f7ff ff8a 	bl	800e1c0 <L_shift>
 800e2ac:	4544      	cmp	r4, r8
 800e2ae:	d934      	bls.n	800e31a <__hexnan+0x10e>
 800e2b0:	f1a8 0204 	sub.w	r2, r8, #4
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2be:	429f      	cmp	r7, r3
 800e2c0:	d2f9      	bcs.n	800e2b6 <__hexnan+0xaa>
 800e2c2:	1b3b      	subs	r3, r7, r4
 800e2c4:	f023 0303 	bic.w	r3, r3, #3
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	3401      	adds	r4, #1
 800e2cc:	3e03      	subs	r6, #3
 800e2ce:	42b4      	cmp	r4, r6
 800e2d0:	bf88      	it	hi
 800e2d2:	2304      	movhi	r3, #4
 800e2d4:	4443      	add	r3, r8
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f843 2b04 	str.w	r2, [r3], #4
 800e2dc:	429f      	cmp	r7, r3
 800e2de:	d2fb      	bcs.n	800e2d8 <__hexnan+0xcc>
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	b91b      	cbnz	r3, 800e2ec <__hexnan+0xe0>
 800e2e4:	4547      	cmp	r7, r8
 800e2e6:	d127      	bne.n	800e338 <__hexnan+0x12c>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	2005      	movs	r0, #5
 800e2ee:	e026      	b.n	800e33e <__hexnan+0x132>
 800e2f0:	3501      	adds	r5, #1
 800e2f2:	2d08      	cmp	r5, #8
 800e2f4:	f10b 0b01 	add.w	fp, fp, #1
 800e2f8:	dd06      	ble.n	800e308 <__hexnan+0xfc>
 800e2fa:	4544      	cmp	r4, r8
 800e2fc:	d9c3      	bls.n	800e286 <__hexnan+0x7a>
 800e2fe:	2300      	movs	r3, #0
 800e300:	f844 3c04 	str.w	r3, [r4, #-4]
 800e304:	2501      	movs	r5, #1
 800e306:	3c04      	subs	r4, #4
 800e308:	6822      	ldr	r2, [r4, #0]
 800e30a:	f000 000f 	and.w	r0, r0, #15
 800e30e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e312:	6022      	str	r2, [r4, #0]
 800e314:	e7b7      	b.n	800e286 <__hexnan+0x7a>
 800e316:	2508      	movs	r5, #8
 800e318:	e7b5      	b.n	800e286 <__hexnan+0x7a>
 800e31a:	9b01      	ldr	r3, [sp, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d0df      	beq.n	800e2e0 <__hexnan+0xd4>
 800e320:	f04f 32ff 	mov.w	r2, #4294967295
 800e324:	f1c3 0320 	rsb	r3, r3, #32
 800e328:	fa22 f303 	lsr.w	r3, r2, r3
 800e32c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e330:	401a      	ands	r2, r3
 800e332:	f846 2c04 	str.w	r2, [r6, #-4]
 800e336:	e7d3      	b.n	800e2e0 <__hexnan+0xd4>
 800e338:	3f04      	subs	r7, #4
 800e33a:	e7d1      	b.n	800e2e0 <__hexnan+0xd4>
 800e33c:	2004      	movs	r0, #4
 800e33e:	b007      	add	sp, #28
 800e340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e344 <_lseek_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4d07      	ldr	r5, [pc, #28]	; (800e364 <_lseek_r+0x20>)
 800e348:	4604      	mov	r4, r0
 800e34a:	4608      	mov	r0, r1
 800e34c:	4611      	mov	r1, r2
 800e34e:	2200      	movs	r2, #0
 800e350:	602a      	str	r2, [r5, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	f7f6 fa28 	bl	80047a8 <_lseek>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_lseek_r+0x1e>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_lseek_r+0x1e>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20001a60 	.word	0x20001a60

0800e368 <__ascii_mbtowc>:
 800e368:	b082      	sub	sp, #8
 800e36a:	b901      	cbnz	r1, 800e36e <__ascii_mbtowc+0x6>
 800e36c:	a901      	add	r1, sp, #4
 800e36e:	b142      	cbz	r2, 800e382 <__ascii_mbtowc+0x1a>
 800e370:	b14b      	cbz	r3, 800e386 <__ascii_mbtowc+0x1e>
 800e372:	7813      	ldrb	r3, [r2, #0]
 800e374:	600b      	str	r3, [r1, #0]
 800e376:	7812      	ldrb	r2, [r2, #0]
 800e378:	1e10      	subs	r0, r2, #0
 800e37a:	bf18      	it	ne
 800e37c:	2001      	movne	r0, #1
 800e37e:	b002      	add	sp, #8
 800e380:	4770      	bx	lr
 800e382:	4610      	mov	r0, r2
 800e384:	e7fb      	b.n	800e37e <__ascii_mbtowc+0x16>
 800e386:	f06f 0001 	mvn.w	r0, #1
 800e38a:	e7f8      	b.n	800e37e <__ascii_mbtowc+0x16>

0800e38c <__malloc_lock>:
 800e38c:	4801      	ldr	r0, [pc, #4]	; (800e394 <__malloc_lock+0x8>)
 800e38e:	f7fe bb90 	b.w	800cab2 <__retarget_lock_acquire_recursive>
 800e392:	bf00      	nop
 800e394:	20001a54 	.word	0x20001a54

0800e398 <__malloc_unlock>:
 800e398:	4801      	ldr	r0, [pc, #4]	; (800e3a0 <__malloc_unlock+0x8>)
 800e39a:	f7fe bb8b 	b.w	800cab4 <__retarget_lock_release_recursive>
 800e39e:	bf00      	nop
 800e3a0:	20001a54 	.word	0x20001a54

0800e3a4 <_Balloc>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	b976      	cbnz	r6, 800e3cc <_Balloc+0x28>
 800e3ae:	2010      	movs	r0, #16
 800e3b0:	f7fe fb82 	bl	800cab8 <malloc>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	6260      	str	r0, [r4, #36]	; 0x24
 800e3b8:	b920      	cbnz	r0, 800e3c4 <_Balloc+0x20>
 800e3ba:	4b18      	ldr	r3, [pc, #96]	; (800e41c <_Balloc+0x78>)
 800e3bc:	4818      	ldr	r0, [pc, #96]	; (800e420 <_Balloc+0x7c>)
 800e3be:	2166      	movs	r1, #102	; 0x66
 800e3c0:	f001 fc9e 	bl	800fd00 <__assert_func>
 800e3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3c8:	6006      	str	r6, [r0, #0]
 800e3ca:	60c6      	str	r6, [r0, #12]
 800e3cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e3ce:	68f3      	ldr	r3, [r6, #12]
 800e3d0:	b183      	cbz	r3, 800e3f4 <_Balloc+0x50>
 800e3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3da:	b9b8      	cbnz	r0, 800e40c <_Balloc+0x68>
 800e3dc:	2101      	movs	r1, #1
 800e3de:	fa01 f605 	lsl.w	r6, r1, r5
 800e3e2:	1d72      	adds	r2, r6, #5
 800e3e4:	0092      	lsls	r2, r2, #2
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 fc9d 	bl	800ed26 <_calloc_r>
 800e3ec:	b160      	cbz	r0, 800e408 <_Balloc+0x64>
 800e3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3f2:	e00e      	b.n	800e412 <_Balloc+0x6e>
 800e3f4:	2221      	movs	r2, #33	; 0x21
 800e3f6:	2104      	movs	r1, #4
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 fc94 	bl	800ed26 <_calloc_r>
 800e3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e400:	60f0      	str	r0, [r6, #12]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e4      	bne.n	800e3d2 <_Balloc+0x2e>
 800e408:	2000      	movs	r0, #0
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	6802      	ldr	r2, [r0, #0]
 800e40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e412:	2300      	movs	r3, #0
 800e414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e418:	e7f7      	b.n	800e40a <_Balloc+0x66>
 800e41a:	bf00      	nop
 800e41c:	080107cc 	.word	0x080107cc
 800e420:	080107e3 	.word	0x080107e3

0800e424 <_Bfree>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e428:	4605      	mov	r5, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	b976      	cbnz	r6, 800e44c <_Bfree+0x28>
 800e42e:	2010      	movs	r0, #16
 800e430:	f7fe fb42 	bl	800cab8 <malloc>
 800e434:	4602      	mov	r2, r0
 800e436:	6268      	str	r0, [r5, #36]	; 0x24
 800e438:	b920      	cbnz	r0, 800e444 <_Bfree+0x20>
 800e43a:	4b09      	ldr	r3, [pc, #36]	; (800e460 <_Bfree+0x3c>)
 800e43c:	4809      	ldr	r0, [pc, #36]	; (800e464 <_Bfree+0x40>)
 800e43e:	218a      	movs	r1, #138	; 0x8a
 800e440:	f001 fc5e 	bl	800fd00 <__assert_func>
 800e444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e448:	6006      	str	r6, [r0, #0]
 800e44a:	60c6      	str	r6, [r0, #12]
 800e44c:	b13c      	cbz	r4, 800e45e <_Bfree+0x3a>
 800e44e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e450:	6862      	ldr	r2, [r4, #4]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e458:	6021      	str	r1, [r4, #0]
 800e45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e45e:	bd70      	pop	{r4, r5, r6, pc}
 800e460:	080107cc 	.word	0x080107cc
 800e464:	080107e3 	.word	0x080107e3

0800e468 <__multadd>:
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	690d      	ldr	r5, [r1, #16]
 800e46e:	4607      	mov	r7, r0
 800e470:	460c      	mov	r4, r1
 800e472:	461e      	mov	r6, r3
 800e474:	f101 0c14 	add.w	ip, r1, #20
 800e478:	2000      	movs	r0, #0
 800e47a:	f8dc 3000 	ldr.w	r3, [ip]
 800e47e:	b299      	uxth	r1, r3
 800e480:	fb02 6101 	mla	r1, r2, r1, r6
 800e484:	0c1e      	lsrs	r6, r3, #16
 800e486:	0c0b      	lsrs	r3, r1, #16
 800e488:	fb02 3306 	mla	r3, r2, r6, r3
 800e48c:	b289      	uxth	r1, r1
 800e48e:	3001      	adds	r0, #1
 800e490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e494:	4285      	cmp	r5, r0
 800e496:	f84c 1b04 	str.w	r1, [ip], #4
 800e49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e49e:	dcec      	bgt.n	800e47a <__multadd+0x12>
 800e4a0:	b30e      	cbz	r6, 800e4e6 <__multadd+0x7e>
 800e4a2:	68a3      	ldr	r3, [r4, #8]
 800e4a4:	42ab      	cmp	r3, r5
 800e4a6:	dc19      	bgt.n	800e4dc <__multadd+0x74>
 800e4a8:	6861      	ldr	r1, [r4, #4]
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	3101      	adds	r1, #1
 800e4ae:	f7ff ff79 	bl	800e3a4 <_Balloc>
 800e4b2:	4680      	mov	r8, r0
 800e4b4:	b928      	cbnz	r0, 800e4c2 <__multadd+0x5a>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	4b0c      	ldr	r3, [pc, #48]	; (800e4ec <__multadd+0x84>)
 800e4ba:	480d      	ldr	r0, [pc, #52]	; (800e4f0 <__multadd+0x88>)
 800e4bc:	21b5      	movs	r1, #181	; 0xb5
 800e4be:	f001 fc1f 	bl	800fd00 <__assert_func>
 800e4c2:	6922      	ldr	r2, [r4, #16]
 800e4c4:	3202      	adds	r2, #2
 800e4c6:	f104 010c 	add.w	r1, r4, #12
 800e4ca:	0092      	lsls	r2, r2, #2
 800e4cc:	300c      	adds	r0, #12
 800e4ce:	f7fe fb03 	bl	800cad8 <memcpy>
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4638      	mov	r0, r7
 800e4d6:	f7ff ffa5 	bl	800e424 <_Bfree>
 800e4da:	4644      	mov	r4, r8
 800e4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4e0:	3501      	adds	r5, #1
 800e4e2:	615e      	str	r6, [r3, #20]
 800e4e4:	6125      	str	r5, [r4, #16]
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ec:	08010740 	.word	0x08010740
 800e4f0:	080107e3 	.word	0x080107e3

0800e4f4 <__s2b>:
 800e4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	4615      	mov	r5, r2
 800e4fc:	461f      	mov	r7, r3
 800e4fe:	2209      	movs	r2, #9
 800e500:	3308      	adds	r3, #8
 800e502:	4606      	mov	r6, r0
 800e504:	fb93 f3f2 	sdiv	r3, r3, r2
 800e508:	2100      	movs	r1, #0
 800e50a:	2201      	movs	r2, #1
 800e50c:	429a      	cmp	r2, r3
 800e50e:	db09      	blt.n	800e524 <__s2b+0x30>
 800e510:	4630      	mov	r0, r6
 800e512:	f7ff ff47 	bl	800e3a4 <_Balloc>
 800e516:	b940      	cbnz	r0, 800e52a <__s2b+0x36>
 800e518:	4602      	mov	r2, r0
 800e51a:	4b19      	ldr	r3, [pc, #100]	; (800e580 <__s2b+0x8c>)
 800e51c:	4819      	ldr	r0, [pc, #100]	; (800e584 <__s2b+0x90>)
 800e51e:	21ce      	movs	r1, #206	; 0xce
 800e520:	f001 fbee 	bl	800fd00 <__assert_func>
 800e524:	0052      	lsls	r2, r2, #1
 800e526:	3101      	adds	r1, #1
 800e528:	e7f0      	b.n	800e50c <__s2b+0x18>
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	6143      	str	r3, [r0, #20]
 800e52e:	2d09      	cmp	r5, #9
 800e530:	f04f 0301 	mov.w	r3, #1
 800e534:	6103      	str	r3, [r0, #16]
 800e536:	dd16      	ble.n	800e566 <__s2b+0x72>
 800e538:	f104 0909 	add.w	r9, r4, #9
 800e53c:	46c8      	mov	r8, r9
 800e53e:	442c      	add	r4, r5
 800e540:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e544:	4601      	mov	r1, r0
 800e546:	3b30      	subs	r3, #48	; 0x30
 800e548:	220a      	movs	r2, #10
 800e54a:	4630      	mov	r0, r6
 800e54c:	f7ff ff8c 	bl	800e468 <__multadd>
 800e550:	45a0      	cmp	r8, r4
 800e552:	d1f5      	bne.n	800e540 <__s2b+0x4c>
 800e554:	f1a5 0408 	sub.w	r4, r5, #8
 800e558:	444c      	add	r4, r9
 800e55a:	1b2d      	subs	r5, r5, r4
 800e55c:	1963      	adds	r3, r4, r5
 800e55e:	42bb      	cmp	r3, r7
 800e560:	db04      	blt.n	800e56c <__s2b+0x78>
 800e562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e566:	340a      	adds	r4, #10
 800e568:	2509      	movs	r5, #9
 800e56a:	e7f6      	b.n	800e55a <__s2b+0x66>
 800e56c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e570:	4601      	mov	r1, r0
 800e572:	3b30      	subs	r3, #48	; 0x30
 800e574:	220a      	movs	r2, #10
 800e576:	4630      	mov	r0, r6
 800e578:	f7ff ff76 	bl	800e468 <__multadd>
 800e57c:	e7ee      	b.n	800e55c <__s2b+0x68>
 800e57e:	bf00      	nop
 800e580:	08010740 	.word	0x08010740
 800e584:	080107e3 	.word	0x080107e3

0800e588 <__hi0bits>:
 800e588:	0c03      	lsrs	r3, r0, #16
 800e58a:	041b      	lsls	r3, r3, #16
 800e58c:	b9d3      	cbnz	r3, 800e5c4 <__hi0bits+0x3c>
 800e58e:	0400      	lsls	r0, r0, #16
 800e590:	2310      	movs	r3, #16
 800e592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e596:	bf04      	itt	eq
 800e598:	0200      	lsleq	r0, r0, #8
 800e59a:	3308      	addeq	r3, #8
 800e59c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5a0:	bf04      	itt	eq
 800e5a2:	0100      	lsleq	r0, r0, #4
 800e5a4:	3304      	addeq	r3, #4
 800e5a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5aa:	bf04      	itt	eq
 800e5ac:	0080      	lsleq	r0, r0, #2
 800e5ae:	3302      	addeq	r3, #2
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	db05      	blt.n	800e5c0 <__hi0bits+0x38>
 800e5b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5b8:	f103 0301 	add.w	r3, r3, #1
 800e5bc:	bf08      	it	eq
 800e5be:	2320      	moveq	r3, #32
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	4770      	bx	lr
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e7e4      	b.n	800e592 <__hi0bits+0xa>

0800e5c8 <__lo0bits>:
 800e5c8:	6803      	ldr	r3, [r0, #0]
 800e5ca:	f013 0207 	ands.w	r2, r3, #7
 800e5ce:	4601      	mov	r1, r0
 800e5d0:	d00b      	beq.n	800e5ea <__lo0bits+0x22>
 800e5d2:	07da      	lsls	r2, r3, #31
 800e5d4:	d423      	bmi.n	800e61e <__lo0bits+0x56>
 800e5d6:	0798      	lsls	r0, r3, #30
 800e5d8:	bf49      	itett	mi
 800e5da:	085b      	lsrmi	r3, r3, #1
 800e5dc:	089b      	lsrpl	r3, r3, #2
 800e5de:	2001      	movmi	r0, #1
 800e5e0:	600b      	strmi	r3, [r1, #0]
 800e5e2:	bf5c      	itt	pl
 800e5e4:	600b      	strpl	r3, [r1, #0]
 800e5e6:	2002      	movpl	r0, #2
 800e5e8:	4770      	bx	lr
 800e5ea:	b298      	uxth	r0, r3
 800e5ec:	b9a8      	cbnz	r0, 800e61a <__lo0bits+0x52>
 800e5ee:	0c1b      	lsrs	r3, r3, #16
 800e5f0:	2010      	movs	r0, #16
 800e5f2:	b2da      	uxtb	r2, r3
 800e5f4:	b90a      	cbnz	r2, 800e5fa <__lo0bits+0x32>
 800e5f6:	3008      	adds	r0, #8
 800e5f8:	0a1b      	lsrs	r3, r3, #8
 800e5fa:	071a      	lsls	r2, r3, #28
 800e5fc:	bf04      	itt	eq
 800e5fe:	091b      	lsreq	r3, r3, #4
 800e600:	3004      	addeq	r0, #4
 800e602:	079a      	lsls	r2, r3, #30
 800e604:	bf04      	itt	eq
 800e606:	089b      	lsreq	r3, r3, #2
 800e608:	3002      	addeq	r0, #2
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d403      	bmi.n	800e616 <__lo0bits+0x4e>
 800e60e:	085b      	lsrs	r3, r3, #1
 800e610:	f100 0001 	add.w	r0, r0, #1
 800e614:	d005      	beq.n	800e622 <__lo0bits+0x5a>
 800e616:	600b      	str	r3, [r1, #0]
 800e618:	4770      	bx	lr
 800e61a:	4610      	mov	r0, r2
 800e61c:	e7e9      	b.n	800e5f2 <__lo0bits+0x2a>
 800e61e:	2000      	movs	r0, #0
 800e620:	4770      	bx	lr
 800e622:	2020      	movs	r0, #32
 800e624:	4770      	bx	lr
	...

0800e628 <__i2b>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	460c      	mov	r4, r1
 800e62c:	2101      	movs	r1, #1
 800e62e:	f7ff feb9 	bl	800e3a4 <_Balloc>
 800e632:	4602      	mov	r2, r0
 800e634:	b928      	cbnz	r0, 800e642 <__i2b+0x1a>
 800e636:	4b05      	ldr	r3, [pc, #20]	; (800e64c <__i2b+0x24>)
 800e638:	4805      	ldr	r0, [pc, #20]	; (800e650 <__i2b+0x28>)
 800e63a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e63e:	f001 fb5f 	bl	800fd00 <__assert_func>
 800e642:	2301      	movs	r3, #1
 800e644:	6144      	str	r4, [r0, #20]
 800e646:	6103      	str	r3, [r0, #16]
 800e648:	bd10      	pop	{r4, pc}
 800e64a:	bf00      	nop
 800e64c:	08010740 	.word	0x08010740
 800e650:	080107e3 	.word	0x080107e3

0800e654 <__multiply>:
 800e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	4691      	mov	r9, r2
 800e65a:	690a      	ldr	r2, [r1, #16]
 800e65c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e660:	429a      	cmp	r2, r3
 800e662:	bfb8      	it	lt
 800e664:	460b      	movlt	r3, r1
 800e666:	460c      	mov	r4, r1
 800e668:	bfbc      	itt	lt
 800e66a:	464c      	movlt	r4, r9
 800e66c:	4699      	movlt	r9, r3
 800e66e:	6927      	ldr	r7, [r4, #16]
 800e670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e674:	68a3      	ldr	r3, [r4, #8]
 800e676:	6861      	ldr	r1, [r4, #4]
 800e678:	eb07 060a 	add.w	r6, r7, sl
 800e67c:	42b3      	cmp	r3, r6
 800e67e:	b085      	sub	sp, #20
 800e680:	bfb8      	it	lt
 800e682:	3101      	addlt	r1, #1
 800e684:	f7ff fe8e 	bl	800e3a4 <_Balloc>
 800e688:	b930      	cbnz	r0, 800e698 <__multiply+0x44>
 800e68a:	4602      	mov	r2, r0
 800e68c:	4b44      	ldr	r3, [pc, #272]	; (800e7a0 <__multiply+0x14c>)
 800e68e:	4845      	ldr	r0, [pc, #276]	; (800e7a4 <__multiply+0x150>)
 800e690:	f240 115d 	movw	r1, #349	; 0x15d
 800e694:	f001 fb34 	bl	800fd00 <__assert_func>
 800e698:	f100 0514 	add.w	r5, r0, #20
 800e69c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6a0:	462b      	mov	r3, r5
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	4543      	cmp	r3, r8
 800e6a6:	d321      	bcc.n	800e6ec <__multiply+0x98>
 800e6a8:	f104 0314 	add.w	r3, r4, #20
 800e6ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6b0:	f109 0314 	add.w	r3, r9, #20
 800e6b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6b8:	9202      	str	r2, [sp, #8]
 800e6ba:	1b3a      	subs	r2, r7, r4
 800e6bc:	3a15      	subs	r2, #21
 800e6be:	f022 0203 	bic.w	r2, r2, #3
 800e6c2:	3204      	adds	r2, #4
 800e6c4:	f104 0115 	add.w	r1, r4, #21
 800e6c8:	428f      	cmp	r7, r1
 800e6ca:	bf38      	it	cc
 800e6cc:	2204      	movcc	r2, #4
 800e6ce:	9201      	str	r2, [sp, #4]
 800e6d0:	9a02      	ldr	r2, [sp, #8]
 800e6d2:	9303      	str	r3, [sp, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d80c      	bhi.n	800e6f2 <__multiply+0x9e>
 800e6d8:	2e00      	cmp	r6, #0
 800e6da:	dd03      	ble.n	800e6e4 <__multiply+0x90>
 800e6dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d05a      	beq.n	800e79a <__multiply+0x146>
 800e6e4:	6106      	str	r6, [r0, #16]
 800e6e6:	b005      	add	sp, #20
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	f843 2b04 	str.w	r2, [r3], #4
 800e6f0:	e7d8      	b.n	800e6a4 <__multiply+0x50>
 800e6f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6f6:	f1ba 0f00 	cmp.w	sl, #0
 800e6fa:	d024      	beq.n	800e746 <__multiply+0xf2>
 800e6fc:	f104 0e14 	add.w	lr, r4, #20
 800e700:	46a9      	mov	r9, r5
 800e702:	f04f 0c00 	mov.w	ip, #0
 800e706:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e70a:	f8d9 1000 	ldr.w	r1, [r9]
 800e70e:	fa1f fb82 	uxth.w	fp, r2
 800e712:	b289      	uxth	r1, r1
 800e714:	fb0a 110b 	mla	r1, sl, fp, r1
 800e718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e71c:	f8d9 2000 	ldr.w	r2, [r9]
 800e720:	4461      	add	r1, ip
 800e722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e726:	fb0a c20b 	mla	r2, sl, fp, ip
 800e72a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e72e:	b289      	uxth	r1, r1
 800e730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e734:	4577      	cmp	r7, lr
 800e736:	f849 1b04 	str.w	r1, [r9], #4
 800e73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e73e:	d8e2      	bhi.n	800e706 <__multiply+0xb2>
 800e740:	9a01      	ldr	r2, [sp, #4]
 800e742:	f845 c002 	str.w	ip, [r5, r2]
 800e746:	9a03      	ldr	r2, [sp, #12]
 800e748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e74c:	3304      	adds	r3, #4
 800e74e:	f1b9 0f00 	cmp.w	r9, #0
 800e752:	d020      	beq.n	800e796 <__multiply+0x142>
 800e754:	6829      	ldr	r1, [r5, #0]
 800e756:	f104 0c14 	add.w	ip, r4, #20
 800e75a:	46ae      	mov	lr, r5
 800e75c:	f04f 0a00 	mov.w	sl, #0
 800e760:	f8bc b000 	ldrh.w	fp, [ip]
 800e764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e768:	fb09 220b 	mla	r2, r9, fp, r2
 800e76c:	4492      	add	sl, r2
 800e76e:	b289      	uxth	r1, r1
 800e770:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e774:	f84e 1b04 	str.w	r1, [lr], #4
 800e778:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e77c:	f8be 1000 	ldrh.w	r1, [lr]
 800e780:	0c12      	lsrs	r2, r2, #16
 800e782:	fb09 1102 	mla	r1, r9, r2, r1
 800e786:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e78a:	4567      	cmp	r7, ip
 800e78c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e790:	d8e6      	bhi.n	800e760 <__multiply+0x10c>
 800e792:	9a01      	ldr	r2, [sp, #4]
 800e794:	50a9      	str	r1, [r5, r2]
 800e796:	3504      	adds	r5, #4
 800e798:	e79a      	b.n	800e6d0 <__multiply+0x7c>
 800e79a:	3e01      	subs	r6, #1
 800e79c:	e79c      	b.n	800e6d8 <__multiply+0x84>
 800e79e:	bf00      	nop
 800e7a0:	08010740 	.word	0x08010740
 800e7a4:	080107e3 	.word	0x080107e3

0800e7a8 <__pow5mult>:
 800e7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ac:	4615      	mov	r5, r2
 800e7ae:	f012 0203 	ands.w	r2, r2, #3
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	d007      	beq.n	800e7c8 <__pow5mult+0x20>
 800e7b8:	4c25      	ldr	r4, [pc, #148]	; (800e850 <__pow5mult+0xa8>)
 800e7ba:	3a01      	subs	r2, #1
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7c2:	f7ff fe51 	bl	800e468 <__multadd>
 800e7c6:	4607      	mov	r7, r0
 800e7c8:	10ad      	asrs	r5, r5, #2
 800e7ca:	d03d      	beq.n	800e848 <__pow5mult+0xa0>
 800e7cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7ce:	b97c      	cbnz	r4, 800e7f0 <__pow5mult+0x48>
 800e7d0:	2010      	movs	r0, #16
 800e7d2:	f7fe f971 	bl	800cab8 <malloc>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	6270      	str	r0, [r6, #36]	; 0x24
 800e7da:	b928      	cbnz	r0, 800e7e8 <__pow5mult+0x40>
 800e7dc:	4b1d      	ldr	r3, [pc, #116]	; (800e854 <__pow5mult+0xac>)
 800e7de:	481e      	ldr	r0, [pc, #120]	; (800e858 <__pow5mult+0xb0>)
 800e7e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e7e4:	f001 fa8c 	bl	800fd00 <__assert_func>
 800e7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7ec:	6004      	str	r4, [r0, #0]
 800e7ee:	60c4      	str	r4, [r0, #12]
 800e7f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7f8:	b94c      	cbnz	r4, 800e80e <__pow5mult+0x66>
 800e7fa:	f240 2171 	movw	r1, #625	; 0x271
 800e7fe:	4630      	mov	r0, r6
 800e800:	f7ff ff12 	bl	800e628 <__i2b>
 800e804:	2300      	movs	r3, #0
 800e806:	f8c8 0008 	str.w	r0, [r8, #8]
 800e80a:	4604      	mov	r4, r0
 800e80c:	6003      	str	r3, [r0, #0]
 800e80e:	f04f 0900 	mov.w	r9, #0
 800e812:	07eb      	lsls	r3, r5, #31
 800e814:	d50a      	bpl.n	800e82c <__pow5mult+0x84>
 800e816:	4639      	mov	r1, r7
 800e818:	4622      	mov	r2, r4
 800e81a:	4630      	mov	r0, r6
 800e81c:	f7ff ff1a 	bl	800e654 <__multiply>
 800e820:	4639      	mov	r1, r7
 800e822:	4680      	mov	r8, r0
 800e824:	4630      	mov	r0, r6
 800e826:	f7ff fdfd 	bl	800e424 <_Bfree>
 800e82a:	4647      	mov	r7, r8
 800e82c:	106d      	asrs	r5, r5, #1
 800e82e:	d00b      	beq.n	800e848 <__pow5mult+0xa0>
 800e830:	6820      	ldr	r0, [r4, #0]
 800e832:	b938      	cbnz	r0, 800e844 <__pow5mult+0x9c>
 800e834:	4622      	mov	r2, r4
 800e836:	4621      	mov	r1, r4
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff ff0b 	bl	800e654 <__multiply>
 800e83e:	6020      	str	r0, [r4, #0]
 800e840:	f8c0 9000 	str.w	r9, [r0]
 800e844:	4604      	mov	r4, r0
 800e846:	e7e4      	b.n	800e812 <__pow5mult+0x6a>
 800e848:	4638      	mov	r0, r7
 800e84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e84e:	bf00      	nop
 800e850:	08010930 	.word	0x08010930
 800e854:	080107cc 	.word	0x080107cc
 800e858:	080107e3 	.word	0x080107e3

0800e85c <__lshift>:
 800e85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e860:	460c      	mov	r4, r1
 800e862:	6849      	ldr	r1, [r1, #4]
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	4607      	mov	r7, r0
 800e86e:	4691      	mov	r9, r2
 800e870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e874:	f108 0601 	add.w	r6, r8, #1
 800e878:	42b3      	cmp	r3, r6
 800e87a:	db0b      	blt.n	800e894 <__lshift+0x38>
 800e87c:	4638      	mov	r0, r7
 800e87e:	f7ff fd91 	bl	800e3a4 <_Balloc>
 800e882:	4605      	mov	r5, r0
 800e884:	b948      	cbnz	r0, 800e89a <__lshift+0x3e>
 800e886:	4602      	mov	r2, r0
 800e888:	4b2a      	ldr	r3, [pc, #168]	; (800e934 <__lshift+0xd8>)
 800e88a:	482b      	ldr	r0, [pc, #172]	; (800e938 <__lshift+0xdc>)
 800e88c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e890:	f001 fa36 	bl	800fd00 <__assert_func>
 800e894:	3101      	adds	r1, #1
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	e7ee      	b.n	800e878 <__lshift+0x1c>
 800e89a:	2300      	movs	r3, #0
 800e89c:	f100 0114 	add.w	r1, r0, #20
 800e8a0:	f100 0210 	add.w	r2, r0, #16
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	4553      	cmp	r3, sl
 800e8a8:	db37      	blt.n	800e91a <__lshift+0xbe>
 800e8aa:	6920      	ldr	r0, [r4, #16]
 800e8ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8b0:	f104 0314 	add.w	r3, r4, #20
 800e8b4:	f019 091f 	ands.w	r9, r9, #31
 800e8b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e8c0:	d02f      	beq.n	800e922 <__lshift+0xc6>
 800e8c2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8c6:	468a      	mov	sl, r1
 800e8c8:	f04f 0c00 	mov.w	ip, #0
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	fa02 f209 	lsl.w	r2, r2, r9
 800e8d2:	ea42 020c 	orr.w	r2, r2, ip
 800e8d6:	f84a 2b04 	str.w	r2, [sl], #4
 800e8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8de:	4298      	cmp	r0, r3
 800e8e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e8e4:	d8f2      	bhi.n	800e8cc <__lshift+0x70>
 800e8e6:	1b03      	subs	r3, r0, r4
 800e8e8:	3b15      	subs	r3, #21
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	f104 0215 	add.w	r2, r4, #21
 800e8f4:	4290      	cmp	r0, r2
 800e8f6:	bf38      	it	cc
 800e8f8:	2304      	movcc	r3, #4
 800e8fa:	f841 c003 	str.w	ip, [r1, r3]
 800e8fe:	f1bc 0f00 	cmp.w	ip, #0
 800e902:	d001      	beq.n	800e908 <__lshift+0xac>
 800e904:	f108 0602 	add.w	r6, r8, #2
 800e908:	3e01      	subs	r6, #1
 800e90a:	4638      	mov	r0, r7
 800e90c:	612e      	str	r6, [r5, #16]
 800e90e:	4621      	mov	r1, r4
 800e910:	f7ff fd88 	bl	800e424 <_Bfree>
 800e914:	4628      	mov	r0, r5
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e91e:	3301      	adds	r3, #1
 800e920:	e7c1      	b.n	800e8a6 <__lshift+0x4a>
 800e922:	3904      	subs	r1, #4
 800e924:	f853 2b04 	ldr.w	r2, [r3], #4
 800e928:	f841 2f04 	str.w	r2, [r1, #4]!
 800e92c:	4298      	cmp	r0, r3
 800e92e:	d8f9      	bhi.n	800e924 <__lshift+0xc8>
 800e930:	e7ea      	b.n	800e908 <__lshift+0xac>
 800e932:	bf00      	nop
 800e934:	08010740 	.word	0x08010740
 800e938:	080107e3 	.word	0x080107e3

0800e93c <__mcmp>:
 800e93c:	b530      	push	{r4, r5, lr}
 800e93e:	6902      	ldr	r2, [r0, #16]
 800e940:	690c      	ldr	r4, [r1, #16]
 800e942:	1b12      	subs	r2, r2, r4
 800e944:	d10e      	bne.n	800e964 <__mcmp+0x28>
 800e946:	f100 0314 	add.w	r3, r0, #20
 800e94a:	3114      	adds	r1, #20
 800e94c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e95c:	42a5      	cmp	r5, r4
 800e95e:	d003      	beq.n	800e968 <__mcmp+0x2c>
 800e960:	d305      	bcc.n	800e96e <__mcmp+0x32>
 800e962:	2201      	movs	r2, #1
 800e964:	4610      	mov	r0, r2
 800e966:	bd30      	pop	{r4, r5, pc}
 800e968:	4283      	cmp	r3, r0
 800e96a:	d3f3      	bcc.n	800e954 <__mcmp+0x18>
 800e96c:	e7fa      	b.n	800e964 <__mcmp+0x28>
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	e7f7      	b.n	800e964 <__mcmp+0x28>

0800e974 <__mdiff>:
 800e974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	460c      	mov	r4, r1
 800e97a:	4606      	mov	r6, r0
 800e97c:	4611      	mov	r1, r2
 800e97e:	4620      	mov	r0, r4
 800e980:	4690      	mov	r8, r2
 800e982:	f7ff ffdb 	bl	800e93c <__mcmp>
 800e986:	1e05      	subs	r5, r0, #0
 800e988:	d110      	bne.n	800e9ac <__mdiff+0x38>
 800e98a:	4629      	mov	r1, r5
 800e98c:	4630      	mov	r0, r6
 800e98e:	f7ff fd09 	bl	800e3a4 <_Balloc>
 800e992:	b930      	cbnz	r0, 800e9a2 <__mdiff+0x2e>
 800e994:	4b3a      	ldr	r3, [pc, #232]	; (800ea80 <__mdiff+0x10c>)
 800e996:	4602      	mov	r2, r0
 800e998:	f240 2132 	movw	r1, #562	; 0x232
 800e99c:	4839      	ldr	r0, [pc, #228]	; (800ea84 <__mdiff+0x110>)
 800e99e:	f001 f9af 	bl	800fd00 <__assert_func>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ac:	bfa4      	itt	ge
 800e9ae:	4643      	movge	r3, r8
 800e9b0:	46a0      	movge	r8, r4
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9b8:	bfa6      	itte	ge
 800e9ba:	461c      	movge	r4, r3
 800e9bc:	2500      	movge	r5, #0
 800e9be:	2501      	movlt	r5, #1
 800e9c0:	f7ff fcf0 	bl	800e3a4 <_Balloc>
 800e9c4:	b920      	cbnz	r0, 800e9d0 <__mdiff+0x5c>
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ea80 <__mdiff+0x10c>)
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9ce:	e7e5      	b.n	800e99c <__mdiff+0x28>
 800e9d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9d4:	6926      	ldr	r6, [r4, #16]
 800e9d6:	60c5      	str	r5, [r0, #12]
 800e9d8:	f104 0914 	add.w	r9, r4, #20
 800e9dc:	f108 0514 	add.w	r5, r8, #20
 800e9e0:	f100 0e14 	add.w	lr, r0, #20
 800e9e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9ec:	f108 0210 	add.w	r2, r8, #16
 800e9f0:	46f2      	mov	sl, lr
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9fc:	fa1f f883 	uxth.w	r8, r3
 800ea00:	fa11 f18b 	uxtah	r1, r1, fp
 800ea04:	0c1b      	lsrs	r3, r3, #16
 800ea06:	eba1 0808 	sub.w	r8, r1, r8
 800ea0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea12:	fa1f f888 	uxth.w	r8, r8
 800ea16:	1419      	asrs	r1, r3, #16
 800ea18:	454e      	cmp	r6, r9
 800ea1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea1e:	f84a 3b04 	str.w	r3, [sl], #4
 800ea22:	d8e7      	bhi.n	800e9f4 <__mdiff+0x80>
 800ea24:	1b33      	subs	r3, r6, r4
 800ea26:	3b15      	subs	r3, #21
 800ea28:	f023 0303 	bic.w	r3, r3, #3
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	3415      	adds	r4, #21
 800ea30:	42a6      	cmp	r6, r4
 800ea32:	bf38      	it	cc
 800ea34:	2304      	movcc	r3, #4
 800ea36:	441d      	add	r5, r3
 800ea38:	4473      	add	r3, lr
 800ea3a:	469e      	mov	lr, r3
 800ea3c:	462e      	mov	r6, r5
 800ea3e:	4566      	cmp	r6, ip
 800ea40:	d30e      	bcc.n	800ea60 <__mdiff+0xec>
 800ea42:	f10c 0203 	add.w	r2, ip, #3
 800ea46:	1b52      	subs	r2, r2, r5
 800ea48:	f022 0203 	bic.w	r2, r2, #3
 800ea4c:	3d03      	subs	r5, #3
 800ea4e:	45ac      	cmp	ip, r5
 800ea50:	bf38      	it	cc
 800ea52:	2200      	movcc	r2, #0
 800ea54:	441a      	add	r2, r3
 800ea56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea5a:	b17b      	cbz	r3, 800ea7c <__mdiff+0x108>
 800ea5c:	6107      	str	r7, [r0, #16]
 800ea5e:	e7a3      	b.n	800e9a8 <__mdiff+0x34>
 800ea60:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea64:	fa11 f288 	uxtah	r2, r1, r8
 800ea68:	1414      	asrs	r4, r2, #16
 800ea6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea6e:	b292      	uxth	r2, r2
 800ea70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea74:	f84e 2b04 	str.w	r2, [lr], #4
 800ea78:	1421      	asrs	r1, r4, #16
 800ea7a:	e7e0      	b.n	800ea3e <__mdiff+0xca>
 800ea7c:	3f01      	subs	r7, #1
 800ea7e:	e7ea      	b.n	800ea56 <__mdiff+0xe2>
 800ea80:	08010740 	.word	0x08010740
 800ea84:	080107e3 	.word	0x080107e3

0800ea88 <__ulp>:
 800ea88:	b082      	sub	sp, #8
 800ea8a:	ed8d 0b00 	vstr	d0, [sp]
 800ea8e:	9b01      	ldr	r3, [sp, #4]
 800ea90:	4912      	ldr	r1, [pc, #72]	; (800eadc <__ulp+0x54>)
 800ea92:	4019      	ands	r1, r3
 800ea94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ea98:	2900      	cmp	r1, #0
 800ea9a:	dd05      	ble.n	800eaa8 <__ulp+0x20>
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	ec43 2b10 	vmov	d0, r2, r3
 800eaa4:	b002      	add	sp, #8
 800eaa6:	4770      	bx	lr
 800eaa8:	4249      	negs	r1, r1
 800eaaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eaae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eab2:	f04f 0200 	mov.w	r2, #0
 800eab6:	f04f 0300 	mov.w	r3, #0
 800eaba:	da04      	bge.n	800eac6 <__ulp+0x3e>
 800eabc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eac0:	fa41 f300 	asr.w	r3, r1, r0
 800eac4:	e7ec      	b.n	800eaa0 <__ulp+0x18>
 800eac6:	f1a0 0114 	sub.w	r1, r0, #20
 800eaca:	291e      	cmp	r1, #30
 800eacc:	bfda      	itte	le
 800eace:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ead2:	fa20 f101 	lsrle.w	r1, r0, r1
 800ead6:	2101      	movgt	r1, #1
 800ead8:	460a      	mov	r2, r1
 800eada:	e7e1      	b.n	800eaa0 <__ulp+0x18>
 800eadc:	7ff00000 	.word	0x7ff00000

0800eae0 <__b2d>:
 800eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae2:	6905      	ldr	r5, [r0, #16]
 800eae4:	f100 0714 	add.w	r7, r0, #20
 800eae8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eaec:	1f2e      	subs	r6, r5, #4
 800eaee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f7ff fd48 	bl	800e588 <__hi0bits>
 800eaf8:	f1c0 0320 	rsb	r3, r0, #32
 800eafc:	280a      	cmp	r0, #10
 800eafe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eb7c <__b2d+0x9c>
 800eb02:	600b      	str	r3, [r1, #0]
 800eb04:	dc14      	bgt.n	800eb30 <__b2d+0x50>
 800eb06:	f1c0 0e0b 	rsb	lr, r0, #11
 800eb0a:	fa24 f10e 	lsr.w	r1, r4, lr
 800eb0e:	42b7      	cmp	r7, r6
 800eb10:	ea41 030c 	orr.w	r3, r1, ip
 800eb14:	bf34      	ite	cc
 800eb16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb1a:	2100      	movcs	r1, #0
 800eb1c:	3015      	adds	r0, #21
 800eb1e:	fa04 f000 	lsl.w	r0, r4, r0
 800eb22:	fa21 f10e 	lsr.w	r1, r1, lr
 800eb26:	ea40 0201 	orr.w	r2, r0, r1
 800eb2a:	ec43 2b10 	vmov	d0, r2, r3
 800eb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb30:	42b7      	cmp	r7, r6
 800eb32:	bf3a      	itte	cc
 800eb34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb38:	f1a5 0608 	subcc.w	r6, r5, #8
 800eb3c:	2100      	movcs	r1, #0
 800eb3e:	380b      	subs	r0, #11
 800eb40:	d017      	beq.n	800eb72 <__b2d+0x92>
 800eb42:	f1c0 0c20 	rsb	ip, r0, #32
 800eb46:	fa04 f500 	lsl.w	r5, r4, r0
 800eb4a:	42be      	cmp	r6, r7
 800eb4c:	fa21 f40c 	lsr.w	r4, r1, ip
 800eb50:	ea45 0504 	orr.w	r5, r5, r4
 800eb54:	bf8c      	ite	hi
 800eb56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eb5a:	2400      	movls	r4, #0
 800eb5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800eb60:	fa01 f000 	lsl.w	r0, r1, r0
 800eb64:	fa24 f40c 	lsr.w	r4, r4, ip
 800eb68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eb6c:	ea40 0204 	orr.w	r2, r0, r4
 800eb70:	e7db      	b.n	800eb2a <__b2d+0x4a>
 800eb72:	ea44 030c 	orr.w	r3, r4, ip
 800eb76:	460a      	mov	r2, r1
 800eb78:	e7d7      	b.n	800eb2a <__b2d+0x4a>
 800eb7a:	bf00      	nop
 800eb7c:	3ff00000 	.word	0x3ff00000

0800eb80 <__d2b>:
 800eb80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb84:	4689      	mov	r9, r1
 800eb86:	2101      	movs	r1, #1
 800eb88:	ec57 6b10 	vmov	r6, r7, d0
 800eb8c:	4690      	mov	r8, r2
 800eb8e:	f7ff fc09 	bl	800e3a4 <_Balloc>
 800eb92:	4604      	mov	r4, r0
 800eb94:	b930      	cbnz	r0, 800eba4 <__d2b+0x24>
 800eb96:	4602      	mov	r2, r0
 800eb98:	4b25      	ldr	r3, [pc, #148]	; (800ec30 <__d2b+0xb0>)
 800eb9a:	4826      	ldr	r0, [pc, #152]	; (800ec34 <__d2b+0xb4>)
 800eb9c:	f240 310a 	movw	r1, #778	; 0x30a
 800eba0:	f001 f8ae 	bl	800fd00 <__assert_func>
 800eba4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebac:	bb35      	cbnz	r5, 800ebfc <__d2b+0x7c>
 800ebae:	2e00      	cmp	r6, #0
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	d028      	beq.n	800ec06 <__d2b+0x86>
 800ebb4:	4668      	mov	r0, sp
 800ebb6:	9600      	str	r6, [sp, #0]
 800ebb8:	f7ff fd06 	bl	800e5c8 <__lo0bits>
 800ebbc:	9900      	ldr	r1, [sp, #0]
 800ebbe:	b300      	cbz	r0, 800ec02 <__d2b+0x82>
 800ebc0:	9a01      	ldr	r2, [sp, #4]
 800ebc2:	f1c0 0320 	rsb	r3, r0, #32
 800ebc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	40c2      	lsrs	r2, r0
 800ebce:	6163      	str	r3, [r4, #20]
 800ebd0:	9201      	str	r2, [sp, #4]
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	61a3      	str	r3, [r4, #24]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	bf14      	ite	ne
 800ebda:	2202      	movne	r2, #2
 800ebdc:	2201      	moveq	r2, #1
 800ebde:	6122      	str	r2, [r4, #16]
 800ebe0:	b1d5      	cbz	r5, 800ec18 <__d2b+0x98>
 800ebe2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebe6:	4405      	add	r5, r0
 800ebe8:	f8c9 5000 	str.w	r5, [r9]
 800ebec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebf0:	f8c8 0000 	str.w	r0, [r8]
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	b003      	add	sp, #12
 800ebf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec00:	e7d5      	b.n	800ebae <__d2b+0x2e>
 800ec02:	6161      	str	r1, [r4, #20]
 800ec04:	e7e5      	b.n	800ebd2 <__d2b+0x52>
 800ec06:	a801      	add	r0, sp, #4
 800ec08:	f7ff fcde 	bl	800e5c8 <__lo0bits>
 800ec0c:	9b01      	ldr	r3, [sp, #4]
 800ec0e:	6163      	str	r3, [r4, #20]
 800ec10:	2201      	movs	r2, #1
 800ec12:	6122      	str	r2, [r4, #16]
 800ec14:	3020      	adds	r0, #32
 800ec16:	e7e3      	b.n	800ebe0 <__d2b+0x60>
 800ec18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec20:	f8c9 0000 	str.w	r0, [r9]
 800ec24:	6918      	ldr	r0, [r3, #16]
 800ec26:	f7ff fcaf 	bl	800e588 <__hi0bits>
 800ec2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec2e:	e7df      	b.n	800ebf0 <__d2b+0x70>
 800ec30:	08010740 	.word	0x08010740
 800ec34:	080107e3 	.word	0x080107e3

0800ec38 <__ratio>:
 800ec38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	4688      	mov	r8, r1
 800ec3e:	4669      	mov	r1, sp
 800ec40:	4681      	mov	r9, r0
 800ec42:	f7ff ff4d 	bl	800eae0 <__b2d>
 800ec46:	a901      	add	r1, sp, #4
 800ec48:	4640      	mov	r0, r8
 800ec4a:	ec55 4b10 	vmov	r4, r5, d0
 800ec4e:	f7ff ff47 	bl	800eae0 <__b2d>
 800ec52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ec5a:	eba3 0c02 	sub.w	ip, r3, r2
 800ec5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec62:	1a9b      	subs	r3, r3, r2
 800ec64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ec68:	ec51 0b10 	vmov	r0, r1, d0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	bfd6      	itet	le
 800ec70:	460a      	movle	r2, r1
 800ec72:	462a      	movgt	r2, r5
 800ec74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec78:	468b      	mov	fp, r1
 800ec7a:	462f      	mov	r7, r5
 800ec7c:	bfd4      	ite	le
 800ec7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ec82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec86:	4620      	mov	r0, r4
 800ec88:	ee10 2a10 	vmov	r2, s0
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	4639      	mov	r1, r7
 800ec90:	f7f1 fdf4 	bl	800087c <__aeabi_ddiv>
 800ec94:	ec41 0b10 	vmov	d0, r0, r1
 800ec98:	b003      	add	sp, #12
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec9e <__copybits>:
 800ec9e:	3901      	subs	r1, #1
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	1149      	asrs	r1, r1, #5
 800eca4:	6914      	ldr	r4, [r2, #16]
 800eca6:	3101      	adds	r1, #1
 800eca8:	f102 0314 	add.w	r3, r2, #20
 800ecac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ecb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecb4:	1f05      	subs	r5, r0, #4
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	d30c      	bcc.n	800ecd4 <__copybits+0x36>
 800ecba:	1aa3      	subs	r3, r4, r2
 800ecbc:	3b11      	subs	r3, #17
 800ecbe:	f023 0303 	bic.w	r3, r3, #3
 800ecc2:	3211      	adds	r2, #17
 800ecc4:	42a2      	cmp	r2, r4
 800ecc6:	bf88      	it	hi
 800ecc8:	2300      	movhi	r3, #0
 800ecca:	4418      	add	r0, r3
 800eccc:	2300      	movs	r3, #0
 800ecce:	4288      	cmp	r0, r1
 800ecd0:	d305      	bcc.n	800ecde <__copybits+0x40>
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	f853 6b04 	ldr.w	r6, [r3], #4
 800ecd8:	f845 6f04 	str.w	r6, [r5, #4]!
 800ecdc:	e7eb      	b.n	800ecb6 <__copybits+0x18>
 800ecde:	f840 3b04 	str.w	r3, [r0], #4
 800ece2:	e7f4      	b.n	800ecce <__copybits+0x30>

0800ece4 <__any_on>:
 800ece4:	f100 0214 	add.w	r2, r0, #20
 800ece8:	6900      	ldr	r0, [r0, #16]
 800ecea:	114b      	asrs	r3, r1, #5
 800ecec:	4298      	cmp	r0, r3
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	db11      	blt.n	800ed16 <__any_on+0x32>
 800ecf2:	dd0a      	ble.n	800ed0a <__any_on+0x26>
 800ecf4:	f011 011f 	ands.w	r1, r1, #31
 800ecf8:	d007      	beq.n	800ed0a <__any_on+0x26>
 800ecfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ecfe:	fa24 f001 	lsr.w	r0, r4, r1
 800ed02:	fa00 f101 	lsl.w	r1, r0, r1
 800ed06:	428c      	cmp	r4, r1
 800ed08:	d10b      	bne.n	800ed22 <__any_on+0x3e>
 800ed0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d803      	bhi.n	800ed1a <__any_on+0x36>
 800ed12:	2000      	movs	r0, #0
 800ed14:	bd10      	pop	{r4, pc}
 800ed16:	4603      	mov	r3, r0
 800ed18:	e7f7      	b.n	800ed0a <__any_on+0x26>
 800ed1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed1e:	2900      	cmp	r1, #0
 800ed20:	d0f5      	beq.n	800ed0e <__any_on+0x2a>
 800ed22:	2001      	movs	r0, #1
 800ed24:	e7f6      	b.n	800ed14 <__any_on+0x30>

0800ed26 <_calloc_r>:
 800ed26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed28:	fba1 2402 	umull	r2, r4, r1, r2
 800ed2c:	b94c      	cbnz	r4, 800ed42 <_calloc_r+0x1c>
 800ed2e:	4611      	mov	r1, r2
 800ed30:	9201      	str	r2, [sp, #4]
 800ed32:	f7fd ff53 	bl	800cbdc <_malloc_r>
 800ed36:	9a01      	ldr	r2, [sp, #4]
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b930      	cbnz	r0, 800ed4a <_calloc_r+0x24>
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	b003      	add	sp, #12
 800ed40:	bd30      	pop	{r4, r5, pc}
 800ed42:	220c      	movs	r2, #12
 800ed44:	6002      	str	r2, [r0, #0]
 800ed46:	2500      	movs	r5, #0
 800ed48:	e7f8      	b.n	800ed3c <_calloc_r+0x16>
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	f7fd fed2 	bl	800caf4 <memset>
 800ed50:	e7f4      	b.n	800ed3c <_calloc_r+0x16>

0800ed52 <_realloc_r>:
 800ed52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed56:	4680      	mov	r8, r0
 800ed58:	4614      	mov	r4, r2
 800ed5a:	460e      	mov	r6, r1
 800ed5c:	b921      	cbnz	r1, 800ed68 <_realloc_r+0x16>
 800ed5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed62:	4611      	mov	r1, r2
 800ed64:	f7fd bf3a 	b.w	800cbdc <_malloc_r>
 800ed68:	b92a      	cbnz	r2, 800ed76 <_realloc_r+0x24>
 800ed6a:	f7fd fecb 	bl	800cb04 <_free_r>
 800ed6e:	4625      	mov	r5, r4
 800ed70:	4628      	mov	r0, r5
 800ed72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed76:	f001 f80d 	bl	800fd94 <_malloc_usable_size_r>
 800ed7a:	4284      	cmp	r4, r0
 800ed7c:	4607      	mov	r7, r0
 800ed7e:	d802      	bhi.n	800ed86 <_realloc_r+0x34>
 800ed80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed84:	d812      	bhi.n	800edac <_realloc_r+0x5a>
 800ed86:	4621      	mov	r1, r4
 800ed88:	4640      	mov	r0, r8
 800ed8a:	f7fd ff27 	bl	800cbdc <_malloc_r>
 800ed8e:	4605      	mov	r5, r0
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d0ed      	beq.n	800ed70 <_realloc_r+0x1e>
 800ed94:	42bc      	cmp	r4, r7
 800ed96:	4622      	mov	r2, r4
 800ed98:	4631      	mov	r1, r6
 800ed9a:	bf28      	it	cs
 800ed9c:	463a      	movcs	r2, r7
 800ed9e:	f7fd fe9b 	bl	800cad8 <memcpy>
 800eda2:	4631      	mov	r1, r6
 800eda4:	4640      	mov	r0, r8
 800eda6:	f7fd fead 	bl	800cb04 <_free_r>
 800edaa:	e7e1      	b.n	800ed70 <_realloc_r+0x1e>
 800edac:	4635      	mov	r5, r6
 800edae:	e7df      	b.n	800ed70 <_realloc_r+0x1e>

0800edb0 <__ssputs_r>:
 800edb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edb4:	688e      	ldr	r6, [r1, #8]
 800edb6:	429e      	cmp	r6, r3
 800edb8:	4682      	mov	sl, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	4690      	mov	r8, r2
 800edbe:	461f      	mov	r7, r3
 800edc0:	d838      	bhi.n	800ee34 <__ssputs_r+0x84>
 800edc2:	898a      	ldrh	r2, [r1, #12]
 800edc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edc8:	d032      	beq.n	800ee30 <__ssputs_r+0x80>
 800edca:	6825      	ldr	r5, [r4, #0]
 800edcc:	6909      	ldr	r1, [r1, #16]
 800edce:	eba5 0901 	sub.w	r9, r5, r1
 800edd2:	6965      	ldr	r5, [r4, #20]
 800edd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eddc:	3301      	adds	r3, #1
 800edde:	444b      	add	r3, r9
 800ede0:	106d      	asrs	r5, r5, #1
 800ede2:	429d      	cmp	r5, r3
 800ede4:	bf38      	it	cc
 800ede6:	461d      	movcc	r5, r3
 800ede8:	0553      	lsls	r3, r2, #21
 800edea:	d531      	bpl.n	800ee50 <__ssputs_r+0xa0>
 800edec:	4629      	mov	r1, r5
 800edee:	f7fd fef5 	bl	800cbdc <_malloc_r>
 800edf2:	4606      	mov	r6, r0
 800edf4:	b950      	cbnz	r0, 800ee0c <__ssputs_r+0x5c>
 800edf6:	230c      	movs	r3, #12
 800edf8:	f8ca 3000 	str.w	r3, [sl]
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	f04f 30ff 	mov.w	r0, #4294967295
 800ee08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee0c:	6921      	ldr	r1, [r4, #16]
 800ee0e:	464a      	mov	r2, r9
 800ee10:	f7fd fe62 	bl	800cad8 <memcpy>
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	6126      	str	r6, [r4, #16]
 800ee22:	6165      	str	r5, [r4, #20]
 800ee24:	444e      	add	r6, r9
 800ee26:	eba5 0509 	sub.w	r5, r5, r9
 800ee2a:	6026      	str	r6, [r4, #0]
 800ee2c:	60a5      	str	r5, [r4, #8]
 800ee2e:	463e      	mov	r6, r7
 800ee30:	42be      	cmp	r6, r7
 800ee32:	d900      	bls.n	800ee36 <__ssputs_r+0x86>
 800ee34:	463e      	mov	r6, r7
 800ee36:	6820      	ldr	r0, [r4, #0]
 800ee38:	4632      	mov	r2, r6
 800ee3a:	4641      	mov	r1, r8
 800ee3c:	f000 ff90 	bl	800fd60 <memmove>
 800ee40:	68a3      	ldr	r3, [r4, #8]
 800ee42:	1b9b      	subs	r3, r3, r6
 800ee44:	60a3      	str	r3, [r4, #8]
 800ee46:	6823      	ldr	r3, [r4, #0]
 800ee48:	4433      	add	r3, r6
 800ee4a:	6023      	str	r3, [r4, #0]
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	e7db      	b.n	800ee08 <__ssputs_r+0x58>
 800ee50:	462a      	mov	r2, r5
 800ee52:	f7ff ff7e 	bl	800ed52 <_realloc_r>
 800ee56:	4606      	mov	r6, r0
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d1e1      	bne.n	800ee20 <__ssputs_r+0x70>
 800ee5c:	6921      	ldr	r1, [r4, #16]
 800ee5e:	4650      	mov	r0, sl
 800ee60:	f7fd fe50 	bl	800cb04 <_free_r>
 800ee64:	e7c7      	b.n	800edf6 <__ssputs_r+0x46>
	...

0800ee68 <_svfiprintf_r>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	4698      	mov	r8, r3
 800ee6e:	898b      	ldrh	r3, [r1, #12]
 800ee70:	061b      	lsls	r3, r3, #24
 800ee72:	b09d      	sub	sp, #116	; 0x74
 800ee74:	4607      	mov	r7, r0
 800ee76:	460d      	mov	r5, r1
 800ee78:	4614      	mov	r4, r2
 800ee7a:	d50e      	bpl.n	800ee9a <_svfiprintf_r+0x32>
 800ee7c:	690b      	ldr	r3, [r1, #16]
 800ee7e:	b963      	cbnz	r3, 800ee9a <_svfiprintf_r+0x32>
 800ee80:	2140      	movs	r1, #64	; 0x40
 800ee82:	f7fd feab 	bl	800cbdc <_malloc_r>
 800ee86:	6028      	str	r0, [r5, #0]
 800ee88:	6128      	str	r0, [r5, #16]
 800ee8a:	b920      	cbnz	r0, 800ee96 <_svfiprintf_r+0x2e>
 800ee8c:	230c      	movs	r3, #12
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	e0d1      	b.n	800f03a <_svfiprintf_r+0x1d2>
 800ee96:	2340      	movs	r3, #64	; 0x40
 800ee98:	616b      	str	r3, [r5, #20]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	2320      	movs	r3, #32
 800eea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eea4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eea8:	2330      	movs	r3, #48	; 0x30
 800eeaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f054 <_svfiprintf_r+0x1ec>
 800eeae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeb2:	f04f 0901 	mov.w	r9, #1
 800eeb6:	4623      	mov	r3, r4
 800eeb8:	469a      	mov	sl, r3
 800eeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eebe:	b10a      	cbz	r2, 800eec4 <_svfiprintf_r+0x5c>
 800eec0:	2a25      	cmp	r2, #37	; 0x25
 800eec2:	d1f9      	bne.n	800eeb8 <_svfiprintf_r+0x50>
 800eec4:	ebba 0b04 	subs.w	fp, sl, r4
 800eec8:	d00b      	beq.n	800eee2 <_svfiprintf_r+0x7a>
 800eeca:	465b      	mov	r3, fp
 800eecc:	4622      	mov	r2, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	4638      	mov	r0, r7
 800eed2:	f7ff ff6d 	bl	800edb0 <__ssputs_r>
 800eed6:	3001      	adds	r0, #1
 800eed8:	f000 80aa 	beq.w	800f030 <_svfiprintf_r+0x1c8>
 800eedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eede:	445a      	add	r2, fp
 800eee0:	9209      	str	r2, [sp, #36]	; 0x24
 800eee2:	f89a 3000 	ldrb.w	r3, [sl]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 80a2 	beq.w	800f030 <_svfiprintf_r+0x1c8>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f04f 32ff 	mov.w	r2, #4294967295
 800eef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eef6:	f10a 0a01 	add.w	sl, sl, #1
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	9307      	str	r3, [sp, #28]
 800eefe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef02:	931a      	str	r3, [sp, #104]	; 0x68
 800ef04:	4654      	mov	r4, sl
 800ef06:	2205      	movs	r2, #5
 800ef08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef0c:	4851      	ldr	r0, [pc, #324]	; (800f054 <_svfiprintf_r+0x1ec>)
 800ef0e:	f7f1 f97f 	bl	8000210 <memchr>
 800ef12:	9a04      	ldr	r2, [sp, #16]
 800ef14:	b9d8      	cbnz	r0, 800ef4e <_svfiprintf_r+0xe6>
 800ef16:	06d0      	lsls	r0, r2, #27
 800ef18:	bf44      	itt	mi
 800ef1a:	2320      	movmi	r3, #32
 800ef1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef20:	0711      	lsls	r1, r2, #28
 800ef22:	bf44      	itt	mi
 800ef24:	232b      	movmi	r3, #43	; 0x2b
 800ef26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef30:	d015      	beq.n	800ef5e <_svfiprintf_r+0xf6>
 800ef32:	9a07      	ldr	r2, [sp, #28]
 800ef34:	4654      	mov	r4, sl
 800ef36:	2000      	movs	r0, #0
 800ef38:	f04f 0c0a 	mov.w	ip, #10
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef42:	3b30      	subs	r3, #48	; 0x30
 800ef44:	2b09      	cmp	r3, #9
 800ef46:	d94e      	bls.n	800efe6 <_svfiprintf_r+0x17e>
 800ef48:	b1b0      	cbz	r0, 800ef78 <_svfiprintf_r+0x110>
 800ef4a:	9207      	str	r2, [sp, #28]
 800ef4c:	e014      	b.n	800ef78 <_svfiprintf_r+0x110>
 800ef4e:	eba0 0308 	sub.w	r3, r0, r8
 800ef52:	fa09 f303 	lsl.w	r3, r9, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	46a2      	mov	sl, r4
 800ef5c:	e7d2      	b.n	800ef04 <_svfiprintf_r+0x9c>
 800ef5e:	9b03      	ldr	r3, [sp, #12]
 800ef60:	1d19      	adds	r1, r3, #4
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	9103      	str	r1, [sp, #12]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	bfbb      	ittet	lt
 800ef6a:	425b      	neglt	r3, r3
 800ef6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef70:	9307      	strge	r3, [sp, #28]
 800ef72:	9307      	strlt	r3, [sp, #28]
 800ef74:	bfb8      	it	lt
 800ef76:	9204      	strlt	r2, [sp, #16]
 800ef78:	7823      	ldrb	r3, [r4, #0]
 800ef7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef7c:	d10c      	bne.n	800ef98 <_svfiprintf_r+0x130>
 800ef7e:	7863      	ldrb	r3, [r4, #1]
 800ef80:	2b2a      	cmp	r3, #42	; 0x2a
 800ef82:	d135      	bne.n	800eff0 <_svfiprintf_r+0x188>
 800ef84:	9b03      	ldr	r3, [sp, #12]
 800ef86:	1d1a      	adds	r2, r3, #4
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	9203      	str	r2, [sp, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	bfb8      	it	lt
 800ef90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef94:	3402      	adds	r4, #2
 800ef96:	9305      	str	r3, [sp, #20]
 800ef98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f064 <_svfiprintf_r+0x1fc>
 800ef9c:	7821      	ldrb	r1, [r4, #0]
 800ef9e:	2203      	movs	r2, #3
 800efa0:	4650      	mov	r0, sl
 800efa2:	f7f1 f935 	bl	8000210 <memchr>
 800efa6:	b140      	cbz	r0, 800efba <_svfiprintf_r+0x152>
 800efa8:	2340      	movs	r3, #64	; 0x40
 800efaa:	eba0 000a 	sub.w	r0, r0, sl
 800efae:	fa03 f000 	lsl.w	r0, r3, r0
 800efb2:	9b04      	ldr	r3, [sp, #16]
 800efb4:	4303      	orrs	r3, r0
 800efb6:	3401      	adds	r4, #1
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbe:	4826      	ldr	r0, [pc, #152]	; (800f058 <_svfiprintf_r+0x1f0>)
 800efc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efc4:	2206      	movs	r2, #6
 800efc6:	f7f1 f923 	bl	8000210 <memchr>
 800efca:	2800      	cmp	r0, #0
 800efcc:	d038      	beq.n	800f040 <_svfiprintf_r+0x1d8>
 800efce:	4b23      	ldr	r3, [pc, #140]	; (800f05c <_svfiprintf_r+0x1f4>)
 800efd0:	bb1b      	cbnz	r3, 800f01a <_svfiprintf_r+0x1b2>
 800efd2:	9b03      	ldr	r3, [sp, #12]
 800efd4:	3307      	adds	r3, #7
 800efd6:	f023 0307 	bic.w	r3, r3, #7
 800efda:	3308      	adds	r3, #8
 800efdc:	9303      	str	r3, [sp, #12]
 800efde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe0:	4433      	add	r3, r6
 800efe2:	9309      	str	r3, [sp, #36]	; 0x24
 800efe4:	e767      	b.n	800eeb6 <_svfiprintf_r+0x4e>
 800efe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800efea:	460c      	mov	r4, r1
 800efec:	2001      	movs	r0, #1
 800efee:	e7a5      	b.n	800ef3c <_svfiprintf_r+0xd4>
 800eff0:	2300      	movs	r3, #0
 800eff2:	3401      	adds	r4, #1
 800eff4:	9305      	str	r3, [sp, #20]
 800eff6:	4619      	mov	r1, r3
 800eff8:	f04f 0c0a 	mov.w	ip, #10
 800effc:	4620      	mov	r0, r4
 800effe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f002:	3a30      	subs	r2, #48	; 0x30
 800f004:	2a09      	cmp	r2, #9
 800f006:	d903      	bls.n	800f010 <_svfiprintf_r+0x1a8>
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d0c5      	beq.n	800ef98 <_svfiprintf_r+0x130>
 800f00c:	9105      	str	r1, [sp, #20]
 800f00e:	e7c3      	b.n	800ef98 <_svfiprintf_r+0x130>
 800f010:	fb0c 2101 	mla	r1, ip, r1, r2
 800f014:	4604      	mov	r4, r0
 800f016:	2301      	movs	r3, #1
 800f018:	e7f0      	b.n	800effc <_svfiprintf_r+0x194>
 800f01a:	ab03      	add	r3, sp, #12
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	462a      	mov	r2, r5
 800f020:	4b0f      	ldr	r3, [pc, #60]	; (800f060 <_svfiprintf_r+0x1f8>)
 800f022:	a904      	add	r1, sp, #16
 800f024:	4638      	mov	r0, r7
 800f026:	f3af 8000 	nop.w
 800f02a:	1c42      	adds	r2, r0, #1
 800f02c:	4606      	mov	r6, r0
 800f02e:	d1d6      	bne.n	800efde <_svfiprintf_r+0x176>
 800f030:	89ab      	ldrh	r3, [r5, #12]
 800f032:	065b      	lsls	r3, r3, #25
 800f034:	f53f af2c 	bmi.w	800ee90 <_svfiprintf_r+0x28>
 800f038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f03a:	b01d      	add	sp, #116	; 0x74
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	ab03      	add	r3, sp, #12
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	462a      	mov	r2, r5
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <_svfiprintf_r+0x1f8>)
 800f048:	a904      	add	r1, sp, #16
 800f04a:	4638      	mov	r0, r7
 800f04c:	f000 fa4c 	bl	800f4e8 <_printf_i>
 800f050:	e7eb      	b.n	800f02a <_svfiprintf_r+0x1c2>
 800f052:	bf00      	nop
 800f054:	0801093c 	.word	0x0801093c
 800f058:	08010946 	.word	0x08010946
 800f05c:	00000000 	.word	0x00000000
 800f060:	0800edb1 	.word	0x0800edb1
 800f064:	08010942 	.word	0x08010942

0800f068 <_sungetc_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	1c4b      	adds	r3, r1, #1
 800f06c:	4614      	mov	r4, r2
 800f06e:	d103      	bne.n	800f078 <_sungetc_r+0x10>
 800f070:	f04f 35ff 	mov.w	r5, #4294967295
 800f074:	4628      	mov	r0, r5
 800f076:	bd38      	pop	{r3, r4, r5, pc}
 800f078:	8993      	ldrh	r3, [r2, #12]
 800f07a:	f023 0320 	bic.w	r3, r3, #32
 800f07e:	8193      	strh	r3, [r2, #12]
 800f080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f082:	6852      	ldr	r2, [r2, #4]
 800f084:	b2cd      	uxtb	r5, r1
 800f086:	b18b      	cbz	r3, 800f0ac <_sungetc_r+0x44>
 800f088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f08a:	4293      	cmp	r3, r2
 800f08c:	dd08      	ble.n	800f0a0 <_sungetc_r+0x38>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	1e5a      	subs	r2, r3, #1
 800f092:	6022      	str	r2, [r4, #0]
 800f094:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f098:	6863      	ldr	r3, [r4, #4]
 800f09a:	3301      	adds	r3, #1
 800f09c:	6063      	str	r3, [r4, #4]
 800f09e:	e7e9      	b.n	800f074 <_sungetc_r+0xc>
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	f000 fde5 	bl	800fc70 <__submore>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d0f1      	beq.n	800f08e <_sungetc_r+0x26>
 800f0aa:	e7e1      	b.n	800f070 <_sungetc_r+0x8>
 800f0ac:	6921      	ldr	r1, [r4, #16]
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	b151      	cbz	r1, 800f0c8 <_sungetc_r+0x60>
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d208      	bcs.n	800f0c8 <_sungetc_r+0x60>
 800f0b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f0ba:	42a9      	cmp	r1, r5
 800f0bc:	d104      	bne.n	800f0c8 <_sungetc_r+0x60>
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	3201      	adds	r2, #1
 800f0c2:	6023      	str	r3, [r4, #0]
 800f0c4:	6062      	str	r2, [r4, #4]
 800f0c6:	e7d5      	b.n	800f074 <_sungetc_r+0xc>
 800f0c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0d0:	6363      	str	r3, [r4, #52]	; 0x34
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e7dc      	b.n	800f09c <_sungetc_r+0x34>

0800f0e2 <__ssrefill_r>:
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f0e8:	b169      	cbz	r1, 800f106 <__ssrefill_r+0x24>
 800f0ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0ee:	4299      	cmp	r1, r3
 800f0f0:	d001      	beq.n	800f0f6 <__ssrefill_r+0x14>
 800f0f2:	f7fd fd07 	bl	800cb04 <_free_r>
 800f0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800f0fe:	b113      	cbz	r3, 800f106 <__ssrefill_r+0x24>
 800f100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f102:	6023      	str	r3, [r4, #0]
 800f104:	bd10      	pop	{r4, pc}
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	2300      	movs	r3, #0
 800f10c:	6063      	str	r3, [r4, #4]
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	f043 0320 	orr.w	r3, r3, #32
 800f114:	81a3      	strh	r3, [r4, #12]
 800f116:	f04f 30ff 	mov.w	r0, #4294967295
 800f11a:	e7f3      	b.n	800f104 <__ssrefill_r+0x22>

0800f11c <__ssvfiscanf_r>:
 800f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	460c      	mov	r4, r1
 800f122:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f126:	2100      	movs	r1, #0
 800f128:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f12c:	49a6      	ldr	r1, [pc, #664]	; (800f3c8 <__ssvfiscanf_r+0x2ac>)
 800f12e:	91a0      	str	r1, [sp, #640]	; 0x280
 800f130:	f10d 0804 	add.w	r8, sp, #4
 800f134:	49a5      	ldr	r1, [pc, #660]	; (800f3cc <__ssvfiscanf_r+0x2b0>)
 800f136:	4fa6      	ldr	r7, [pc, #664]	; (800f3d0 <__ssvfiscanf_r+0x2b4>)
 800f138:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f3d4 <__ssvfiscanf_r+0x2b8>
 800f13c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f140:	4606      	mov	r6, r0
 800f142:	91a1      	str	r1, [sp, #644]	; 0x284
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	7813      	ldrb	r3, [r2, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 815a 	beq.w	800f402 <__ssvfiscanf_r+0x2e6>
 800f14e:	5dd9      	ldrb	r1, [r3, r7]
 800f150:	f011 0108 	ands.w	r1, r1, #8
 800f154:	f102 0501 	add.w	r5, r2, #1
 800f158:	d019      	beq.n	800f18e <__ssvfiscanf_r+0x72>
 800f15a:	6863      	ldr	r3, [r4, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	dd0f      	ble.n	800f180 <__ssvfiscanf_r+0x64>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	781a      	ldrb	r2, [r3, #0]
 800f164:	5cba      	ldrb	r2, [r7, r2]
 800f166:	0712      	lsls	r2, r2, #28
 800f168:	d401      	bmi.n	800f16e <__ssvfiscanf_r+0x52>
 800f16a:	462a      	mov	r2, r5
 800f16c:	e7eb      	b.n	800f146 <__ssvfiscanf_r+0x2a>
 800f16e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f170:	3201      	adds	r2, #1
 800f172:	9245      	str	r2, [sp, #276]	; 0x114
 800f174:	6862      	ldr	r2, [r4, #4]
 800f176:	3301      	adds	r3, #1
 800f178:	3a01      	subs	r2, #1
 800f17a:	6062      	str	r2, [r4, #4]
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	e7ec      	b.n	800f15a <__ssvfiscanf_r+0x3e>
 800f180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f182:	4621      	mov	r1, r4
 800f184:	4630      	mov	r0, r6
 800f186:	4798      	blx	r3
 800f188:	2800      	cmp	r0, #0
 800f18a:	d0e9      	beq.n	800f160 <__ssvfiscanf_r+0x44>
 800f18c:	e7ed      	b.n	800f16a <__ssvfiscanf_r+0x4e>
 800f18e:	2b25      	cmp	r3, #37	; 0x25
 800f190:	d012      	beq.n	800f1b8 <__ssvfiscanf_r+0x9c>
 800f192:	469a      	mov	sl, r3
 800f194:	6863      	ldr	r3, [r4, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f340 8091 	ble.w	800f2be <__ssvfiscanf_r+0x1a2>
 800f19c:	6822      	ldr	r2, [r4, #0]
 800f19e:	7813      	ldrb	r3, [r2, #0]
 800f1a0:	4553      	cmp	r3, sl
 800f1a2:	f040 812e 	bne.w	800f402 <__ssvfiscanf_r+0x2e6>
 800f1a6:	6863      	ldr	r3, [r4, #4]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	6063      	str	r3, [r4, #4]
 800f1ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f1ae:	3201      	adds	r2, #1
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	6022      	str	r2, [r4, #0]
 800f1b4:	9345      	str	r3, [sp, #276]	; 0x114
 800f1b6:	e7d8      	b.n	800f16a <__ssvfiscanf_r+0x4e>
 800f1b8:	9141      	str	r1, [sp, #260]	; 0x104
 800f1ba:	9143      	str	r1, [sp, #268]	; 0x10c
 800f1bc:	7853      	ldrb	r3, [r2, #1]
 800f1be:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c0:	bf02      	ittt	eq
 800f1c2:	2310      	moveq	r3, #16
 800f1c4:	1c95      	addeq	r5, r2, #2
 800f1c6:	9341      	streq	r3, [sp, #260]	; 0x104
 800f1c8:	220a      	movs	r2, #10
 800f1ca:	46aa      	mov	sl, r5
 800f1cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f1d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f1d4:	2b09      	cmp	r3, #9
 800f1d6:	d91d      	bls.n	800f214 <__ssvfiscanf_r+0xf8>
 800f1d8:	487e      	ldr	r0, [pc, #504]	; (800f3d4 <__ssvfiscanf_r+0x2b8>)
 800f1da:	2203      	movs	r2, #3
 800f1dc:	f7f1 f818 	bl	8000210 <memchr>
 800f1e0:	b140      	cbz	r0, 800f1f4 <__ssvfiscanf_r+0xd8>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	eba0 0009 	sub.w	r0, r0, r9
 800f1e8:	fa03 f000 	lsl.w	r0, r3, r0
 800f1ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f1ee:	4318      	orrs	r0, r3
 800f1f0:	9041      	str	r0, [sp, #260]	; 0x104
 800f1f2:	4655      	mov	r5, sl
 800f1f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1f8:	2b78      	cmp	r3, #120	; 0x78
 800f1fa:	d806      	bhi.n	800f20a <__ssvfiscanf_r+0xee>
 800f1fc:	2b57      	cmp	r3, #87	; 0x57
 800f1fe:	d810      	bhi.n	800f222 <__ssvfiscanf_r+0x106>
 800f200:	2b25      	cmp	r3, #37	; 0x25
 800f202:	d0c6      	beq.n	800f192 <__ssvfiscanf_r+0x76>
 800f204:	d856      	bhi.n	800f2b4 <__ssvfiscanf_r+0x198>
 800f206:	2b00      	cmp	r3, #0
 800f208:	d064      	beq.n	800f2d4 <__ssvfiscanf_r+0x1b8>
 800f20a:	2303      	movs	r3, #3
 800f20c:	9347      	str	r3, [sp, #284]	; 0x11c
 800f20e:	230a      	movs	r3, #10
 800f210:	9342      	str	r3, [sp, #264]	; 0x108
 800f212:	e071      	b.n	800f2f8 <__ssvfiscanf_r+0x1dc>
 800f214:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f216:	fb02 1103 	mla	r1, r2, r3, r1
 800f21a:	3930      	subs	r1, #48	; 0x30
 800f21c:	9143      	str	r1, [sp, #268]	; 0x10c
 800f21e:	4655      	mov	r5, sl
 800f220:	e7d3      	b.n	800f1ca <__ssvfiscanf_r+0xae>
 800f222:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f226:	2a20      	cmp	r2, #32
 800f228:	d8ef      	bhi.n	800f20a <__ssvfiscanf_r+0xee>
 800f22a:	a101      	add	r1, pc, #4	; (adr r1, 800f230 <__ssvfiscanf_r+0x114>)
 800f22c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f230:	0800f2e3 	.word	0x0800f2e3
 800f234:	0800f20b 	.word	0x0800f20b
 800f238:	0800f20b 	.word	0x0800f20b
 800f23c:	0800f341 	.word	0x0800f341
 800f240:	0800f20b 	.word	0x0800f20b
 800f244:	0800f20b 	.word	0x0800f20b
 800f248:	0800f20b 	.word	0x0800f20b
 800f24c:	0800f20b 	.word	0x0800f20b
 800f250:	0800f20b 	.word	0x0800f20b
 800f254:	0800f20b 	.word	0x0800f20b
 800f258:	0800f20b 	.word	0x0800f20b
 800f25c:	0800f357 	.word	0x0800f357
 800f260:	0800f32d 	.word	0x0800f32d
 800f264:	0800f2bb 	.word	0x0800f2bb
 800f268:	0800f2bb 	.word	0x0800f2bb
 800f26c:	0800f2bb 	.word	0x0800f2bb
 800f270:	0800f20b 	.word	0x0800f20b
 800f274:	0800f331 	.word	0x0800f331
 800f278:	0800f20b 	.word	0x0800f20b
 800f27c:	0800f20b 	.word	0x0800f20b
 800f280:	0800f20b 	.word	0x0800f20b
 800f284:	0800f20b 	.word	0x0800f20b
 800f288:	0800f367 	.word	0x0800f367
 800f28c:	0800f339 	.word	0x0800f339
 800f290:	0800f2db 	.word	0x0800f2db
 800f294:	0800f20b 	.word	0x0800f20b
 800f298:	0800f20b 	.word	0x0800f20b
 800f29c:	0800f363 	.word	0x0800f363
 800f2a0:	0800f20b 	.word	0x0800f20b
 800f2a4:	0800f32d 	.word	0x0800f32d
 800f2a8:	0800f20b 	.word	0x0800f20b
 800f2ac:	0800f20b 	.word	0x0800f20b
 800f2b0:	0800f2e3 	.word	0x0800f2e3
 800f2b4:	3b45      	subs	r3, #69	; 0x45
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d8a7      	bhi.n	800f20a <__ssvfiscanf_r+0xee>
 800f2ba:	2305      	movs	r3, #5
 800f2bc:	e01b      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f2be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	4798      	blx	r3
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f43f af68 	beq.w	800f19c <__ssvfiscanf_r+0x80>
 800f2cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f040 808d 	bne.w	800f3ee <__ssvfiscanf_r+0x2d2>
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d8:	e08f      	b.n	800f3fa <__ssvfiscanf_r+0x2de>
 800f2da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2dc:	f042 0220 	orr.w	r2, r2, #32
 800f2e0:	9241      	str	r2, [sp, #260]	; 0x104
 800f2e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2e8:	9241      	str	r2, [sp, #260]	; 0x104
 800f2ea:	2210      	movs	r2, #16
 800f2ec:	2b6f      	cmp	r3, #111	; 0x6f
 800f2ee:	9242      	str	r2, [sp, #264]	; 0x108
 800f2f0:	bf34      	ite	cc
 800f2f2:	2303      	movcc	r3, #3
 800f2f4:	2304      	movcs	r3, #4
 800f2f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2f8:	6863      	ldr	r3, [r4, #4]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	dd42      	ble.n	800f384 <__ssvfiscanf_r+0x268>
 800f2fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f300:	0659      	lsls	r1, r3, #25
 800f302:	d404      	bmi.n	800f30e <__ssvfiscanf_r+0x1f2>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	781a      	ldrb	r2, [r3, #0]
 800f308:	5cba      	ldrb	r2, [r7, r2]
 800f30a:	0712      	lsls	r2, r2, #28
 800f30c:	d441      	bmi.n	800f392 <__ssvfiscanf_r+0x276>
 800f30e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f310:	2b02      	cmp	r3, #2
 800f312:	dc50      	bgt.n	800f3b6 <__ssvfiscanf_r+0x29a>
 800f314:	466b      	mov	r3, sp
 800f316:	4622      	mov	r2, r4
 800f318:	a941      	add	r1, sp, #260	; 0x104
 800f31a:	4630      	mov	r0, r6
 800f31c:	f000 fa0a 	bl	800f734 <_scanf_chars>
 800f320:	2801      	cmp	r0, #1
 800f322:	d06e      	beq.n	800f402 <__ssvfiscanf_r+0x2e6>
 800f324:	2802      	cmp	r0, #2
 800f326:	f47f af20 	bne.w	800f16a <__ssvfiscanf_r+0x4e>
 800f32a:	e7cf      	b.n	800f2cc <__ssvfiscanf_r+0x1b0>
 800f32c:	220a      	movs	r2, #10
 800f32e:	e7dd      	b.n	800f2ec <__ssvfiscanf_r+0x1d0>
 800f330:	2300      	movs	r3, #0
 800f332:	9342      	str	r3, [sp, #264]	; 0x108
 800f334:	2303      	movs	r3, #3
 800f336:	e7de      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f338:	2308      	movs	r3, #8
 800f33a:	9342      	str	r3, [sp, #264]	; 0x108
 800f33c:	2304      	movs	r3, #4
 800f33e:	e7da      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f340:	4629      	mov	r1, r5
 800f342:	4640      	mov	r0, r8
 800f344:	f000 fb64 	bl	800fa10 <__sccl>
 800f348:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f34e:	9341      	str	r3, [sp, #260]	; 0x104
 800f350:	4605      	mov	r5, r0
 800f352:	2301      	movs	r3, #1
 800f354:	e7cf      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f356:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35c:	9341      	str	r3, [sp, #260]	; 0x104
 800f35e:	2300      	movs	r3, #0
 800f360:	e7c9      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f362:	2302      	movs	r3, #2
 800f364:	e7c7      	b.n	800f2f6 <__ssvfiscanf_r+0x1da>
 800f366:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f368:	06c3      	lsls	r3, r0, #27
 800f36a:	f53f aefe 	bmi.w	800f16a <__ssvfiscanf_r+0x4e>
 800f36e:	9b00      	ldr	r3, [sp, #0]
 800f370:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f372:	1d19      	adds	r1, r3, #4
 800f374:	9100      	str	r1, [sp, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f010 0f01 	tst.w	r0, #1
 800f37c:	bf14      	ite	ne
 800f37e:	801a      	strhne	r2, [r3, #0]
 800f380:	601a      	streq	r2, [r3, #0]
 800f382:	e6f2      	b.n	800f16a <__ssvfiscanf_r+0x4e>
 800f384:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f386:	4621      	mov	r1, r4
 800f388:	4630      	mov	r0, r6
 800f38a:	4798      	blx	r3
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0b6      	beq.n	800f2fe <__ssvfiscanf_r+0x1e2>
 800f390:	e79c      	b.n	800f2cc <__ssvfiscanf_r+0x1b0>
 800f392:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f394:	3201      	adds	r2, #1
 800f396:	9245      	str	r2, [sp, #276]	; 0x114
 800f398:	6862      	ldr	r2, [r4, #4]
 800f39a:	3a01      	subs	r2, #1
 800f39c:	2a00      	cmp	r2, #0
 800f39e:	6062      	str	r2, [r4, #4]
 800f3a0:	dd02      	ble.n	800f3a8 <__ssvfiscanf_r+0x28c>
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	e7ad      	b.n	800f304 <__ssvfiscanf_r+0x1e8>
 800f3a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	4798      	blx	r3
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d0a7      	beq.n	800f304 <__ssvfiscanf_r+0x1e8>
 800f3b4:	e78a      	b.n	800f2cc <__ssvfiscanf_r+0x1b0>
 800f3b6:	2b04      	cmp	r3, #4
 800f3b8:	dc0e      	bgt.n	800f3d8 <__ssvfiscanf_r+0x2bc>
 800f3ba:	466b      	mov	r3, sp
 800f3bc:	4622      	mov	r2, r4
 800f3be:	a941      	add	r1, sp, #260	; 0x104
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f000 fa11 	bl	800f7e8 <_scanf_i>
 800f3c6:	e7ab      	b.n	800f320 <__ssvfiscanf_r+0x204>
 800f3c8:	0800f069 	.word	0x0800f069
 800f3cc:	0800f0e3 	.word	0x0800f0e3
 800f3d0:	0801057d 	.word	0x0801057d
 800f3d4:	08010942 	.word	0x08010942
 800f3d8:	4b0b      	ldr	r3, [pc, #44]	; (800f408 <__ssvfiscanf_r+0x2ec>)
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f43f aec5 	beq.w	800f16a <__ssvfiscanf_r+0x4e>
 800f3e0:	466b      	mov	r3, sp
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	a941      	add	r1, sp, #260	; 0x104
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f3af 8000 	nop.w
 800f3ec:	e798      	b.n	800f320 <__ssvfiscanf_r+0x204>
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f3f4:	bf18      	it	ne
 800f3f6:	f04f 30ff 	movne.w	r0, #4294967295
 800f3fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f404:	e7f9      	b.n	800f3fa <__ssvfiscanf_r+0x2de>
 800f406:	bf00      	nop
 800f408:	00000000 	.word	0x00000000

0800f40c <_printf_common>:
 800f40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f410:	4616      	mov	r6, r2
 800f412:	4699      	mov	r9, r3
 800f414:	688a      	ldr	r2, [r1, #8]
 800f416:	690b      	ldr	r3, [r1, #16]
 800f418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f41c:	4293      	cmp	r3, r2
 800f41e:	bfb8      	it	lt
 800f420:	4613      	movlt	r3, r2
 800f422:	6033      	str	r3, [r6, #0]
 800f424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f428:	4607      	mov	r7, r0
 800f42a:	460c      	mov	r4, r1
 800f42c:	b10a      	cbz	r2, 800f432 <_printf_common+0x26>
 800f42e:	3301      	adds	r3, #1
 800f430:	6033      	str	r3, [r6, #0]
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	0699      	lsls	r1, r3, #26
 800f436:	bf42      	ittt	mi
 800f438:	6833      	ldrmi	r3, [r6, #0]
 800f43a:	3302      	addmi	r3, #2
 800f43c:	6033      	strmi	r3, [r6, #0]
 800f43e:	6825      	ldr	r5, [r4, #0]
 800f440:	f015 0506 	ands.w	r5, r5, #6
 800f444:	d106      	bne.n	800f454 <_printf_common+0x48>
 800f446:	f104 0a19 	add.w	sl, r4, #25
 800f44a:	68e3      	ldr	r3, [r4, #12]
 800f44c:	6832      	ldr	r2, [r6, #0]
 800f44e:	1a9b      	subs	r3, r3, r2
 800f450:	42ab      	cmp	r3, r5
 800f452:	dc26      	bgt.n	800f4a2 <_printf_common+0x96>
 800f454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f458:	1e13      	subs	r3, r2, #0
 800f45a:	6822      	ldr	r2, [r4, #0]
 800f45c:	bf18      	it	ne
 800f45e:	2301      	movne	r3, #1
 800f460:	0692      	lsls	r2, r2, #26
 800f462:	d42b      	bmi.n	800f4bc <_printf_common+0xb0>
 800f464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f468:	4649      	mov	r1, r9
 800f46a:	4638      	mov	r0, r7
 800f46c:	47c0      	blx	r8
 800f46e:	3001      	adds	r0, #1
 800f470:	d01e      	beq.n	800f4b0 <_printf_common+0xa4>
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	68e5      	ldr	r5, [r4, #12]
 800f476:	6832      	ldr	r2, [r6, #0]
 800f478:	f003 0306 	and.w	r3, r3, #6
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	bf08      	it	eq
 800f480:	1aad      	subeq	r5, r5, r2
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	6922      	ldr	r2, [r4, #16]
 800f486:	bf0c      	ite	eq
 800f488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f48c:	2500      	movne	r5, #0
 800f48e:	4293      	cmp	r3, r2
 800f490:	bfc4      	itt	gt
 800f492:	1a9b      	subgt	r3, r3, r2
 800f494:	18ed      	addgt	r5, r5, r3
 800f496:	2600      	movs	r6, #0
 800f498:	341a      	adds	r4, #26
 800f49a:	42b5      	cmp	r5, r6
 800f49c:	d11a      	bne.n	800f4d4 <_printf_common+0xc8>
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e008      	b.n	800f4b4 <_printf_common+0xa8>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4652      	mov	r2, sl
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	4638      	mov	r0, r7
 800f4aa:	47c0      	blx	r8
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d103      	bne.n	800f4b8 <_printf_common+0xac>
 800f4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b8:	3501      	adds	r5, #1
 800f4ba:	e7c6      	b.n	800f44a <_printf_common+0x3e>
 800f4bc:	18e1      	adds	r1, r4, r3
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	2030      	movs	r0, #48	; 0x30
 800f4c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4c6:	4422      	add	r2, r4
 800f4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4d0:	3302      	adds	r3, #2
 800f4d2:	e7c7      	b.n	800f464 <_printf_common+0x58>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	4649      	mov	r1, r9
 800f4da:	4638      	mov	r0, r7
 800f4dc:	47c0      	blx	r8
 800f4de:	3001      	adds	r0, #1
 800f4e0:	d0e6      	beq.n	800f4b0 <_printf_common+0xa4>
 800f4e2:	3601      	adds	r6, #1
 800f4e4:	e7d9      	b.n	800f49a <_printf_common+0x8e>
	...

0800f4e8 <_printf_i>:
 800f4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ec:	7e0f      	ldrb	r7, [r1, #24]
 800f4ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4f0:	2f78      	cmp	r7, #120	; 0x78
 800f4f2:	4691      	mov	r9, r2
 800f4f4:	4680      	mov	r8, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	469a      	mov	sl, r3
 800f4fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4fe:	d807      	bhi.n	800f510 <_printf_i+0x28>
 800f500:	2f62      	cmp	r7, #98	; 0x62
 800f502:	d80a      	bhi.n	800f51a <_printf_i+0x32>
 800f504:	2f00      	cmp	r7, #0
 800f506:	f000 80d8 	beq.w	800f6ba <_printf_i+0x1d2>
 800f50a:	2f58      	cmp	r7, #88	; 0x58
 800f50c:	f000 80a3 	beq.w	800f656 <_printf_i+0x16e>
 800f510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f518:	e03a      	b.n	800f590 <_printf_i+0xa8>
 800f51a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f51e:	2b15      	cmp	r3, #21
 800f520:	d8f6      	bhi.n	800f510 <_printf_i+0x28>
 800f522:	a101      	add	r1, pc, #4	; (adr r1, 800f528 <_printf_i+0x40>)
 800f524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f528:	0800f581 	.word	0x0800f581
 800f52c:	0800f595 	.word	0x0800f595
 800f530:	0800f511 	.word	0x0800f511
 800f534:	0800f511 	.word	0x0800f511
 800f538:	0800f511 	.word	0x0800f511
 800f53c:	0800f511 	.word	0x0800f511
 800f540:	0800f595 	.word	0x0800f595
 800f544:	0800f511 	.word	0x0800f511
 800f548:	0800f511 	.word	0x0800f511
 800f54c:	0800f511 	.word	0x0800f511
 800f550:	0800f511 	.word	0x0800f511
 800f554:	0800f6a1 	.word	0x0800f6a1
 800f558:	0800f5c5 	.word	0x0800f5c5
 800f55c:	0800f683 	.word	0x0800f683
 800f560:	0800f511 	.word	0x0800f511
 800f564:	0800f511 	.word	0x0800f511
 800f568:	0800f6c3 	.word	0x0800f6c3
 800f56c:	0800f511 	.word	0x0800f511
 800f570:	0800f5c5 	.word	0x0800f5c5
 800f574:	0800f511 	.word	0x0800f511
 800f578:	0800f511 	.word	0x0800f511
 800f57c:	0800f68b 	.word	0x0800f68b
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	1d1a      	adds	r2, r3, #4
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	602a      	str	r2, [r5, #0]
 800f588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f58c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f590:	2301      	movs	r3, #1
 800f592:	e0a3      	b.n	800f6dc <_printf_i+0x1f4>
 800f594:	6820      	ldr	r0, [r4, #0]
 800f596:	6829      	ldr	r1, [r5, #0]
 800f598:	0606      	lsls	r6, r0, #24
 800f59a:	f101 0304 	add.w	r3, r1, #4
 800f59e:	d50a      	bpl.n	800f5b6 <_printf_i+0xce>
 800f5a0:	680e      	ldr	r6, [r1, #0]
 800f5a2:	602b      	str	r3, [r5, #0]
 800f5a4:	2e00      	cmp	r6, #0
 800f5a6:	da03      	bge.n	800f5b0 <_printf_i+0xc8>
 800f5a8:	232d      	movs	r3, #45	; 0x2d
 800f5aa:	4276      	negs	r6, r6
 800f5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b0:	485e      	ldr	r0, [pc, #376]	; (800f72c <_printf_i+0x244>)
 800f5b2:	230a      	movs	r3, #10
 800f5b4:	e019      	b.n	800f5ea <_printf_i+0x102>
 800f5b6:	680e      	ldr	r6, [r1, #0]
 800f5b8:	602b      	str	r3, [r5, #0]
 800f5ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5be:	bf18      	it	ne
 800f5c0:	b236      	sxthne	r6, r6
 800f5c2:	e7ef      	b.n	800f5a4 <_printf_i+0xbc>
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	6820      	ldr	r0, [r4, #0]
 800f5c8:	1d19      	adds	r1, r3, #4
 800f5ca:	6029      	str	r1, [r5, #0]
 800f5cc:	0601      	lsls	r1, r0, #24
 800f5ce:	d501      	bpl.n	800f5d4 <_printf_i+0xec>
 800f5d0:	681e      	ldr	r6, [r3, #0]
 800f5d2:	e002      	b.n	800f5da <_printf_i+0xf2>
 800f5d4:	0646      	lsls	r6, r0, #25
 800f5d6:	d5fb      	bpl.n	800f5d0 <_printf_i+0xe8>
 800f5d8:	881e      	ldrh	r6, [r3, #0]
 800f5da:	4854      	ldr	r0, [pc, #336]	; (800f72c <_printf_i+0x244>)
 800f5dc:	2f6f      	cmp	r7, #111	; 0x6f
 800f5de:	bf0c      	ite	eq
 800f5e0:	2308      	moveq	r3, #8
 800f5e2:	230a      	movne	r3, #10
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5ea:	6865      	ldr	r5, [r4, #4]
 800f5ec:	60a5      	str	r5, [r4, #8]
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	bfa2      	ittt	ge
 800f5f2:	6821      	ldrge	r1, [r4, #0]
 800f5f4:	f021 0104 	bicge.w	r1, r1, #4
 800f5f8:	6021      	strge	r1, [r4, #0]
 800f5fa:	b90e      	cbnz	r6, 800f600 <_printf_i+0x118>
 800f5fc:	2d00      	cmp	r5, #0
 800f5fe:	d04d      	beq.n	800f69c <_printf_i+0x1b4>
 800f600:	4615      	mov	r5, r2
 800f602:	fbb6 f1f3 	udiv	r1, r6, r3
 800f606:	fb03 6711 	mls	r7, r3, r1, r6
 800f60a:	5dc7      	ldrb	r7, [r0, r7]
 800f60c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f610:	4637      	mov	r7, r6
 800f612:	42bb      	cmp	r3, r7
 800f614:	460e      	mov	r6, r1
 800f616:	d9f4      	bls.n	800f602 <_printf_i+0x11a>
 800f618:	2b08      	cmp	r3, #8
 800f61a:	d10b      	bne.n	800f634 <_printf_i+0x14c>
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	07de      	lsls	r6, r3, #31
 800f620:	d508      	bpl.n	800f634 <_printf_i+0x14c>
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	6861      	ldr	r1, [r4, #4]
 800f626:	4299      	cmp	r1, r3
 800f628:	bfde      	ittt	le
 800f62a:	2330      	movle	r3, #48	; 0x30
 800f62c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f630:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f634:	1b52      	subs	r2, r2, r5
 800f636:	6122      	str	r2, [r4, #16]
 800f638:	f8cd a000 	str.w	sl, [sp]
 800f63c:	464b      	mov	r3, r9
 800f63e:	aa03      	add	r2, sp, #12
 800f640:	4621      	mov	r1, r4
 800f642:	4640      	mov	r0, r8
 800f644:	f7ff fee2 	bl	800f40c <_printf_common>
 800f648:	3001      	adds	r0, #1
 800f64a:	d14c      	bne.n	800f6e6 <_printf_i+0x1fe>
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	b004      	add	sp, #16
 800f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f656:	4835      	ldr	r0, [pc, #212]	; (800f72c <_printf_i+0x244>)
 800f658:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f65c:	6829      	ldr	r1, [r5, #0]
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	f851 6b04 	ldr.w	r6, [r1], #4
 800f664:	6029      	str	r1, [r5, #0]
 800f666:	061d      	lsls	r5, r3, #24
 800f668:	d514      	bpl.n	800f694 <_printf_i+0x1ac>
 800f66a:	07df      	lsls	r7, r3, #31
 800f66c:	bf44      	itt	mi
 800f66e:	f043 0320 	orrmi.w	r3, r3, #32
 800f672:	6023      	strmi	r3, [r4, #0]
 800f674:	b91e      	cbnz	r6, 800f67e <_printf_i+0x196>
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	f023 0320 	bic.w	r3, r3, #32
 800f67c:	6023      	str	r3, [r4, #0]
 800f67e:	2310      	movs	r3, #16
 800f680:	e7b0      	b.n	800f5e4 <_printf_i+0xfc>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	f043 0320 	orr.w	r3, r3, #32
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	2378      	movs	r3, #120	; 0x78
 800f68c:	4828      	ldr	r0, [pc, #160]	; (800f730 <_printf_i+0x248>)
 800f68e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f692:	e7e3      	b.n	800f65c <_printf_i+0x174>
 800f694:	0659      	lsls	r1, r3, #25
 800f696:	bf48      	it	mi
 800f698:	b2b6      	uxthmi	r6, r6
 800f69a:	e7e6      	b.n	800f66a <_printf_i+0x182>
 800f69c:	4615      	mov	r5, r2
 800f69e:	e7bb      	b.n	800f618 <_printf_i+0x130>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	6826      	ldr	r6, [r4, #0]
 800f6a4:	6961      	ldr	r1, [r4, #20]
 800f6a6:	1d18      	adds	r0, r3, #4
 800f6a8:	6028      	str	r0, [r5, #0]
 800f6aa:	0635      	lsls	r5, r6, #24
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	d501      	bpl.n	800f6b4 <_printf_i+0x1cc>
 800f6b0:	6019      	str	r1, [r3, #0]
 800f6b2:	e002      	b.n	800f6ba <_printf_i+0x1d2>
 800f6b4:	0670      	lsls	r0, r6, #25
 800f6b6:	d5fb      	bpl.n	800f6b0 <_printf_i+0x1c8>
 800f6b8:	8019      	strh	r1, [r3, #0]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	6123      	str	r3, [r4, #16]
 800f6be:	4615      	mov	r5, r2
 800f6c0:	e7ba      	b.n	800f638 <_printf_i+0x150>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	1d1a      	adds	r2, r3, #4
 800f6c6:	602a      	str	r2, [r5, #0]
 800f6c8:	681d      	ldr	r5, [r3, #0]
 800f6ca:	6862      	ldr	r2, [r4, #4]
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f7f0 fd9e 	bl	8000210 <memchr>
 800f6d4:	b108      	cbz	r0, 800f6da <_printf_i+0x1f2>
 800f6d6:	1b40      	subs	r0, r0, r5
 800f6d8:	6060      	str	r0, [r4, #4]
 800f6da:	6863      	ldr	r3, [r4, #4]
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6e4:	e7a8      	b.n	800f638 <_printf_i+0x150>
 800f6e6:	6923      	ldr	r3, [r4, #16]
 800f6e8:	462a      	mov	r2, r5
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	47d0      	blx	sl
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	d0ab      	beq.n	800f64c <_printf_i+0x164>
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	079b      	lsls	r3, r3, #30
 800f6f8:	d413      	bmi.n	800f722 <_printf_i+0x23a>
 800f6fa:	68e0      	ldr	r0, [r4, #12]
 800f6fc:	9b03      	ldr	r3, [sp, #12]
 800f6fe:	4298      	cmp	r0, r3
 800f700:	bfb8      	it	lt
 800f702:	4618      	movlt	r0, r3
 800f704:	e7a4      	b.n	800f650 <_printf_i+0x168>
 800f706:	2301      	movs	r3, #1
 800f708:	4632      	mov	r2, r6
 800f70a:	4649      	mov	r1, r9
 800f70c:	4640      	mov	r0, r8
 800f70e:	47d0      	blx	sl
 800f710:	3001      	adds	r0, #1
 800f712:	d09b      	beq.n	800f64c <_printf_i+0x164>
 800f714:	3501      	adds	r5, #1
 800f716:	68e3      	ldr	r3, [r4, #12]
 800f718:	9903      	ldr	r1, [sp, #12]
 800f71a:	1a5b      	subs	r3, r3, r1
 800f71c:	42ab      	cmp	r3, r5
 800f71e:	dcf2      	bgt.n	800f706 <_printf_i+0x21e>
 800f720:	e7eb      	b.n	800f6fa <_printf_i+0x212>
 800f722:	2500      	movs	r5, #0
 800f724:	f104 0619 	add.w	r6, r4, #25
 800f728:	e7f5      	b.n	800f716 <_printf_i+0x22e>
 800f72a:	bf00      	nop
 800f72c:	0801094d 	.word	0x0801094d
 800f730:	0801095e 	.word	0x0801095e

0800f734 <_scanf_chars>:
 800f734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f738:	4615      	mov	r5, r2
 800f73a:	688a      	ldr	r2, [r1, #8]
 800f73c:	4680      	mov	r8, r0
 800f73e:	460c      	mov	r4, r1
 800f740:	b932      	cbnz	r2, 800f750 <_scanf_chars+0x1c>
 800f742:	698a      	ldr	r2, [r1, #24]
 800f744:	2a00      	cmp	r2, #0
 800f746:	bf0c      	ite	eq
 800f748:	2201      	moveq	r2, #1
 800f74a:	f04f 32ff 	movne.w	r2, #4294967295
 800f74e:	608a      	str	r2, [r1, #8]
 800f750:	6822      	ldr	r2, [r4, #0]
 800f752:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f7e4 <_scanf_chars+0xb0>
 800f756:	06d1      	lsls	r1, r2, #27
 800f758:	bf5f      	itttt	pl
 800f75a:	681a      	ldrpl	r2, [r3, #0]
 800f75c:	1d11      	addpl	r1, r2, #4
 800f75e:	6019      	strpl	r1, [r3, #0]
 800f760:	6816      	ldrpl	r6, [r2, #0]
 800f762:	2700      	movs	r7, #0
 800f764:	69a0      	ldr	r0, [r4, #24]
 800f766:	b188      	cbz	r0, 800f78c <_scanf_chars+0x58>
 800f768:	2801      	cmp	r0, #1
 800f76a:	d107      	bne.n	800f77c <_scanf_chars+0x48>
 800f76c:	682a      	ldr	r2, [r5, #0]
 800f76e:	7811      	ldrb	r1, [r2, #0]
 800f770:	6962      	ldr	r2, [r4, #20]
 800f772:	5c52      	ldrb	r2, [r2, r1]
 800f774:	b952      	cbnz	r2, 800f78c <_scanf_chars+0x58>
 800f776:	2f00      	cmp	r7, #0
 800f778:	d031      	beq.n	800f7de <_scanf_chars+0xaa>
 800f77a:	e022      	b.n	800f7c2 <_scanf_chars+0x8e>
 800f77c:	2802      	cmp	r0, #2
 800f77e:	d120      	bne.n	800f7c2 <_scanf_chars+0x8e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f788:	071b      	lsls	r3, r3, #28
 800f78a:	d41a      	bmi.n	800f7c2 <_scanf_chars+0x8e>
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	06da      	lsls	r2, r3, #27
 800f790:	bf5e      	ittt	pl
 800f792:	682b      	ldrpl	r3, [r5, #0]
 800f794:	781b      	ldrbpl	r3, [r3, #0]
 800f796:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f79a:	682a      	ldr	r2, [r5, #0]
 800f79c:	686b      	ldr	r3, [r5, #4]
 800f79e:	3201      	adds	r2, #1
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	68a2      	ldr	r2, [r4, #8]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	3a01      	subs	r2, #1
 800f7a8:	606b      	str	r3, [r5, #4]
 800f7aa:	3701      	adds	r7, #1
 800f7ac:	60a2      	str	r2, [r4, #8]
 800f7ae:	b142      	cbz	r2, 800f7c2 <_scanf_chars+0x8e>
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	dcd7      	bgt.n	800f764 <_scanf_chars+0x30>
 800f7b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	4798      	blx	r3
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d0d0      	beq.n	800f764 <_scanf_chars+0x30>
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	f013 0310 	ands.w	r3, r3, #16
 800f7c8:	d105      	bne.n	800f7d6 <_scanf_chars+0xa2>
 800f7ca:	68e2      	ldr	r2, [r4, #12]
 800f7cc:	3201      	adds	r2, #1
 800f7ce:	60e2      	str	r2, [r4, #12]
 800f7d0:	69a2      	ldr	r2, [r4, #24]
 800f7d2:	b102      	cbz	r2, 800f7d6 <_scanf_chars+0xa2>
 800f7d4:	7033      	strb	r3, [r6, #0]
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	443b      	add	r3, r7
 800f7da:	6123      	str	r3, [r4, #16]
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801057d 	.word	0x0801057d

0800f7e8 <_scanf_i>:
 800f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ec:	4698      	mov	r8, r3
 800f7ee:	4b76      	ldr	r3, [pc, #472]	; (800f9c8 <_scanf_i+0x1e0>)
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	4682      	mov	sl, r0
 800f7f4:	4616      	mov	r6, r2
 800f7f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7fa:	b087      	sub	sp, #28
 800f7fc:	ab03      	add	r3, sp, #12
 800f7fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f802:	4b72      	ldr	r3, [pc, #456]	; (800f9cc <_scanf_i+0x1e4>)
 800f804:	69a1      	ldr	r1, [r4, #24]
 800f806:	4a72      	ldr	r2, [pc, #456]	; (800f9d0 <_scanf_i+0x1e8>)
 800f808:	2903      	cmp	r1, #3
 800f80a:	bf18      	it	ne
 800f80c:	461a      	movne	r2, r3
 800f80e:	68a3      	ldr	r3, [r4, #8]
 800f810:	9201      	str	r2, [sp, #4]
 800f812:	1e5a      	subs	r2, r3, #1
 800f814:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f818:	bf88      	it	hi
 800f81a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f81e:	4627      	mov	r7, r4
 800f820:	bf82      	ittt	hi
 800f822:	eb03 0905 	addhi.w	r9, r3, r5
 800f826:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f82a:	60a3      	strhi	r3, [r4, #8]
 800f82c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f830:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f834:	bf98      	it	ls
 800f836:	f04f 0900 	movls.w	r9, #0
 800f83a:	6023      	str	r3, [r4, #0]
 800f83c:	463d      	mov	r5, r7
 800f83e:	f04f 0b00 	mov.w	fp, #0
 800f842:	6831      	ldr	r1, [r6, #0]
 800f844:	ab03      	add	r3, sp, #12
 800f846:	7809      	ldrb	r1, [r1, #0]
 800f848:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f84c:	2202      	movs	r2, #2
 800f84e:	f7f0 fcdf 	bl	8000210 <memchr>
 800f852:	b328      	cbz	r0, 800f8a0 <_scanf_i+0xb8>
 800f854:	f1bb 0f01 	cmp.w	fp, #1
 800f858:	d159      	bne.n	800f90e <_scanf_i+0x126>
 800f85a:	6862      	ldr	r2, [r4, #4]
 800f85c:	b92a      	cbnz	r2, 800f86a <_scanf_i+0x82>
 800f85e:	6822      	ldr	r2, [r4, #0]
 800f860:	2308      	movs	r3, #8
 800f862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f866:	6063      	str	r3, [r4, #4]
 800f868:	6022      	str	r2, [r4, #0]
 800f86a:	6822      	ldr	r2, [r4, #0]
 800f86c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f870:	6022      	str	r2, [r4, #0]
 800f872:	68a2      	ldr	r2, [r4, #8]
 800f874:	1e51      	subs	r1, r2, #1
 800f876:	60a1      	str	r1, [r4, #8]
 800f878:	b192      	cbz	r2, 800f8a0 <_scanf_i+0xb8>
 800f87a:	6832      	ldr	r2, [r6, #0]
 800f87c:	1c51      	adds	r1, r2, #1
 800f87e:	6031      	str	r1, [r6, #0]
 800f880:	7812      	ldrb	r2, [r2, #0]
 800f882:	f805 2b01 	strb.w	r2, [r5], #1
 800f886:	6872      	ldr	r2, [r6, #4]
 800f888:	3a01      	subs	r2, #1
 800f88a:	2a00      	cmp	r2, #0
 800f88c:	6072      	str	r2, [r6, #4]
 800f88e:	dc07      	bgt.n	800f8a0 <_scanf_i+0xb8>
 800f890:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f894:	4631      	mov	r1, r6
 800f896:	4650      	mov	r0, sl
 800f898:	4790      	blx	r2
 800f89a:	2800      	cmp	r0, #0
 800f89c:	f040 8085 	bne.w	800f9aa <_scanf_i+0x1c2>
 800f8a0:	f10b 0b01 	add.w	fp, fp, #1
 800f8a4:	f1bb 0f03 	cmp.w	fp, #3
 800f8a8:	d1cb      	bne.n	800f842 <_scanf_i+0x5a>
 800f8aa:	6863      	ldr	r3, [r4, #4]
 800f8ac:	b90b      	cbnz	r3, 800f8b2 <_scanf_i+0xca>
 800f8ae:	230a      	movs	r3, #10
 800f8b0:	6063      	str	r3, [r4, #4]
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	4947      	ldr	r1, [pc, #284]	; (800f9d4 <_scanf_i+0x1ec>)
 800f8b6:	6960      	ldr	r0, [r4, #20]
 800f8b8:	1ac9      	subs	r1, r1, r3
 800f8ba:	f000 f8a9 	bl	800fa10 <__sccl>
 800f8be:	f04f 0b00 	mov.w	fp, #0
 800f8c2:	68a3      	ldr	r3, [r4, #8]
 800f8c4:	6822      	ldr	r2, [r4, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d03d      	beq.n	800f946 <_scanf_i+0x15e>
 800f8ca:	6831      	ldr	r1, [r6, #0]
 800f8cc:	6960      	ldr	r0, [r4, #20]
 800f8ce:	f891 c000 	ldrb.w	ip, [r1]
 800f8d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d035      	beq.n	800f946 <_scanf_i+0x15e>
 800f8da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f8de:	d124      	bne.n	800f92a <_scanf_i+0x142>
 800f8e0:	0510      	lsls	r0, r2, #20
 800f8e2:	d522      	bpl.n	800f92a <_scanf_i+0x142>
 800f8e4:	f10b 0b01 	add.w	fp, fp, #1
 800f8e8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ec:	d003      	beq.n	800f8f6 <_scanf_i+0x10e>
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f8f4:	60a3      	str	r3, [r4, #8]
 800f8f6:	6873      	ldr	r3, [r6, #4]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	6073      	str	r3, [r6, #4]
 800f8fe:	dd1b      	ble.n	800f938 <_scanf_i+0x150>
 800f900:	6833      	ldr	r3, [r6, #0]
 800f902:	3301      	adds	r3, #1
 800f904:	6033      	str	r3, [r6, #0]
 800f906:	68a3      	ldr	r3, [r4, #8]
 800f908:	3b01      	subs	r3, #1
 800f90a:	60a3      	str	r3, [r4, #8]
 800f90c:	e7d9      	b.n	800f8c2 <_scanf_i+0xda>
 800f90e:	f1bb 0f02 	cmp.w	fp, #2
 800f912:	d1ae      	bne.n	800f872 <_scanf_i+0x8a>
 800f914:	6822      	ldr	r2, [r4, #0]
 800f916:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f91a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f91e:	d1bf      	bne.n	800f8a0 <_scanf_i+0xb8>
 800f920:	2310      	movs	r3, #16
 800f922:	6063      	str	r3, [r4, #4]
 800f924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f928:	e7a2      	b.n	800f870 <_scanf_i+0x88>
 800f92a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f92e:	6022      	str	r2, [r4, #0]
 800f930:	780b      	ldrb	r3, [r1, #0]
 800f932:	f805 3b01 	strb.w	r3, [r5], #1
 800f936:	e7de      	b.n	800f8f6 <_scanf_i+0x10e>
 800f938:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f93c:	4631      	mov	r1, r6
 800f93e:	4650      	mov	r0, sl
 800f940:	4798      	blx	r3
 800f942:	2800      	cmp	r0, #0
 800f944:	d0df      	beq.n	800f906 <_scanf_i+0x11e>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	05db      	lsls	r3, r3, #23
 800f94a:	d50d      	bpl.n	800f968 <_scanf_i+0x180>
 800f94c:	42bd      	cmp	r5, r7
 800f94e:	d909      	bls.n	800f964 <_scanf_i+0x17c>
 800f950:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f958:	4632      	mov	r2, r6
 800f95a:	4650      	mov	r0, sl
 800f95c:	4798      	blx	r3
 800f95e:	f105 39ff 	add.w	r9, r5, #4294967295
 800f962:	464d      	mov	r5, r9
 800f964:	42bd      	cmp	r5, r7
 800f966:	d02d      	beq.n	800f9c4 <_scanf_i+0x1dc>
 800f968:	6822      	ldr	r2, [r4, #0]
 800f96a:	f012 0210 	ands.w	r2, r2, #16
 800f96e:	d113      	bne.n	800f998 <_scanf_i+0x1b0>
 800f970:	702a      	strb	r2, [r5, #0]
 800f972:	6863      	ldr	r3, [r4, #4]
 800f974:	9e01      	ldr	r6, [sp, #4]
 800f976:	4639      	mov	r1, r7
 800f978:	4650      	mov	r0, sl
 800f97a:	47b0      	blx	r6
 800f97c:	6821      	ldr	r1, [r4, #0]
 800f97e:	f8d8 3000 	ldr.w	r3, [r8]
 800f982:	f011 0f20 	tst.w	r1, #32
 800f986:	d013      	beq.n	800f9b0 <_scanf_i+0x1c8>
 800f988:	1d1a      	adds	r2, r3, #4
 800f98a:	f8c8 2000 	str.w	r2, [r8]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6018      	str	r0, [r3, #0]
 800f992:	68e3      	ldr	r3, [r4, #12]
 800f994:	3301      	adds	r3, #1
 800f996:	60e3      	str	r3, [r4, #12]
 800f998:	1bed      	subs	r5, r5, r7
 800f99a:	44ab      	add	fp, r5
 800f99c:	6925      	ldr	r5, [r4, #16]
 800f99e:	445d      	add	r5, fp
 800f9a0:	6125      	str	r5, [r4, #16]
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	b007      	add	sp, #28
 800f9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9aa:	f04f 0b00 	mov.w	fp, #0
 800f9ae:	e7ca      	b.n	800f946 <_scanf_i+0x15e>
 800f9b0:	1d1a      	adds	r2, r3, #4
 800f9b2:	f8c8 2000 	str.w	r2, [r8]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f011 0f01 	tst.w	r1, #1
 800f9bc:	bf14      	ite	ne
 800f9be:	8018      	strhne	r0, [r3, #0]
 800f9c0:	6018      	streq	r0, [r3, #0]
 800f9c2:	e7e6      	b.n	800f992 <_scanf_i+0x1aa>
 800f9c4:	2001      	movs	r0, #1
 800f9c6:	e7ed      	b.n	800f9a4 <_scanf_i+0x1bc>
 800f9c8:	08010474 	.word	0x08010474
 800f9cc:	0800fc6d 	.word	0x0800fc6d
 800f9d0:	0800fb85 	.word	0x0800fb85
 800f9d4:	08010988 	.word	0x08010988

0800f9d8 <_read_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d07      	ldr	r5, [pc, #28]	; (800f9f8 <_read_r+0x20>)
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	602a      	str	r2, [r5, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f7f4 fe7e 	bl	80046e8 <_read>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_read_r+0x1e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_read_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	20001a60 	.word	0x20001a60
 800f9fc:	00000000 	.word	0x00000000

0800fa00 <nan>:
 800fa00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa08 <nan+0x8>
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	00000000 	.word	0x00000000
 800fa0c:	7ff80000 	.word	0x7ff80000

0800fa10 <__sccl>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	780b      	ldrb	r3, [r1, #0]
 800fa14:	4604      	mov	r4, r0
 800fa16:	2b5e      	cmp	r3, #94	; 0x5e
 800fa18:	bf0b      	itete	eq
 800fa1a:	784b      	ldrbeq	r3, [r1, #1]
 800fa1c:	1c48      	addne	r0, r1, #1
 800fa1e:	1c88      	addeq	r0, r1, #2
 800fa20:	2200      	movne	r2, #0
 800fa22:	bf08      	it	eq
 800fa24:	2201      	moveq	r2, #1
 800fa26:	1e61      	subs	r1, r4, #1
 800fa28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fa2c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fa30:	42a9      	cmp	r1, r5
 800fa32:	d1fb      	bne.n	800fa2c <__sccl+0x1c>
 800fa34:	b90b      	cbnz	r3, 800fa3a <__sccl+0x2a>
 800fa36:	3801      	subs	r0, #1
 800fa38:	bd70      	pop	{r4, r5, r6, pc}
 800fa3a:	f082 0201 	eor.w	r2, r2, #1
 800fa3e:	54e2      	strb	r2, [r4, r3]
 800fa40:	4605      	mov	r5, r0
 800fa42:	4628      	mov	r0, r5
 800fa44:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fa48:	292d      	cmp	r1, #45	; 0x2d
 800fa4a:	d006      	beq.n	800fa5a <__sccl+0x4a>
 800fa4c:	295d      	cmp	r1, #93	; 0x5d
 800fa4e:	d0f3      	beq.n	800fa38 <__sccl+0x28>
 800fa50:	b909      	cbnz	r1, 800fa56 <__sccl+0x46>
 800fa52:	4628      	mov	r0, r5
 800fa54:	e7f0      	b.n	800fa38 <__sccl+0x28>
 800fa56:	460b      	mov	r3, r1
 800fa58:	e7f1      	b.n	800fa3e <__sccl+0x2e>
 800fa5a:	786e      	ldrb	r6, [r5, #1]
 800fa5c:	2e5d      	cmp	r6, #93	; 0x5d
 800fa5e:	d0fa      	beq.n	800fa56 <__sccl+0x46>
 800fa60:	42b3      	cmp	r3, r6
 800fa62:	dcf8      	bgt.n	800fa56 <__sccl+0x46>
 800fa64:	3502      	adds	r5, #2
 800fa66:	4619      	mov	r1, r3
 800fa68:	3101      	adds	r1, #1
 800fa6a:	428e      	cmp	r6, r1
 800fa6c:	5462      	strb	r2, [r4, r1]
 800fa6e:	dcfb      	bgt.n	800fa68 <__sccl+0x58>
 800fa70:	1af1      	subs	r1, r6, r3
 800fa72:	3901      	subs	r1, #1
 800fa74:	1c58      	adds	r0, r3, #1
 800fa76:	42b3      	cmp	r3, r6
 800fa78:	bfa8      	it	ge
 800fa7a:	2100      	movge	r1, #0
 800fa7c:	1843      	adds	r3, r0, r1
 800fa7e:	e7e0      	b.n	800fa42 <__sccl+0x32>

0800fa80 <_strtol_l.constprop.0>:
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa86:	d001      	beq.n	800fa8c <_strtol_l.constprop.0+0xc>
 800fa88:	2b24      	cmp	r3, #36	; 0x24
 800fa8a:	d906      	bls.n	800fa9a <_strtol_l.constprop.0+0x1a>
 800fa8c:	f7fc fef0 	bl	800c870 <__errno>
 800fa90:	2316      	movs	r3, #22
 800fa92:	6003      	str	r3, [r0, #0]
 800fa94:	2000      	movs	r0, #0
 800fa96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fb80 <_strtol_l.constprop.0+0x100>
 800fa9e:	460d      	mov	r5, r1
 800faa0:	462e      	mov	r6, r5
 800faa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800faa6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800faaa:	f017 0708 	ands.w	r7, r7, #8
 800faae:	d1f7      	bne.n	800faa0 <_strtol_l.constprop.0+0x20>
 800fab0:	2c2d      	cmp	r4, #45	; 0x2d
 800fab2:	d132      	bne.n	800fb1a <_strtol_l.constprop.0+0x9a>
 800fab4:	782c      	ldrb	r4, [r5, #0]
 800fab6:	2701      	movs	r7, #1
 800fab8:	1cb5      	adds	r5, r6, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d05b      	beq.n	800fb76 <_strtol_l.constprop.0+0xf6>
 800fabe:	2b10      	cmp	r3, #16
 800fac0:	d109      	bne.n	800fad6 <_strtol_l.constprop.0+0x56>
 800fac2:	2c30      	cmp	r4, #48	; 0x30
 800fac4:	d107      	bne.n	800fad6 <_strtol_l.constprop.0+0x56>
 800fac6:	782c      	ldrb	r4, [r5, #0]
 800fac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800facc:	2c58      	cmp	r4, #88	; 0x58
 800face:	d14d      	bne.n	800fb6c <_strtol_l.constprop.0+0xec>
 800fad0:	786c      	ldrb	r4, [r5, #1]
 800fad2:	2310      	movs	r3, #16
 800fad4:	3502      	adds	r5, #2
 800fad6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fada:	f108 38ff 	add.w	r8, r8, #4294967295
 800fade:	f04f 0c00 	mov.w	ip, #0
 800fae2:	fbb8 f9f3 	udiv	r9, r8, r3
 800fae6:	4666      	mov	r6, ip
 800fae8:	fb03 8a19 	mls	sl, r3, r9, r8
 800faec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800faf0:	f1be 0f09 	cmp.w	lr, #9
 800faf4:	d816      	bhi.n	800fb24 <_strtol_l.constprop.0+0xa4>
 800faf6:	4674      	mov	r4, lr
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	dd24      	ble.n	800fb46 <_strtol_l.constprop.0+0xc6>
 800fafc:	f1bc 0f00 	cmp.w	ip, #0
 800fb00:	db1e      	blt.n	800fb40 <_strtol_l.constprop.0+0xc0>
 800fb02:	45b1      	cmp	r9, r6
 800fb04:	d31c      	bcc.n	800fb40 <_strtol_l.constprop.0+0xc0>
 800fb06:	d101      	bne.n	800fb0c <_strtol_l.constprop.0+0x8c>
 800fb08:	45a2      	cmp	sl, r4
 800fb0a:	db19      	blt.n	800fb40 <_strtol_l.constprop.0+0xc0>
 800fb0c:	fb06 4603 	mla	r6, r6, r3, r4
 800fb10:	f04f 0c01 	mov.w	ip, #1
 800fb14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb18:	e7e8      	b.n	800faec <_strtol_l.constprop.0+0x6c>
 800fb1a:	2c2b      	cmp	r4, #43	; 0x2b
 800fb1c:	bf04      	itt	eq
 800fb1e:	782c      	ldrbeq	r4, [r5, #0]
 800fb20:	1cb5      	addeq	r5, r6, #2
 800fb22:	e7ca      	b.n	800faba <_strtol_l.constprop.0+0x3a>
 800fb24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fb28:	f1be 0f19 	cmp.w	lr, #25
 800fb2c:	d801      	bhi.n	800fb32 <_strtol_l.constprop.0+0xb2>
 800fb2e:	3c37      	subs	r4, #55	; 0x37
 800fb30:	e7e2      	b.n	800faf8 <_strtol_l.constprop.0+0x78>
 800fb32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fb36:	f1be 0f19 	cmp.w	lr, #25
 800fb3a:	d804      	bhi.n	800fb46 <_strtol_l.constprop.0+0xc6>
 800fb3c:	3c57      	subs	r4, #87	; 0x57
 800fb3e:	e7db      	b.n	800faf8 <_strtol_l.constprop.0+0x78>
 800fb40:	f04f 3cff 	mov.w	ip, #4294967295
 800fb44:	e7e6      	b.n	800fb14 <_strtol_l.constprop.0+0x94>
 800fb46:	f1bc 0f00 	cmp.w	ip, #0
 800fb4a:	da05      	bge.n	800fb58 <_strtol_l.constprop.0+0xd8>
 800fb4c:	2322      	movs	r3, #34	; 0x22
 800fb4e:	6003      	str	r3, [r0, #0]
 800fb50:	4646      	mov	r6, r8
 800fb52:	b942      	cbnz	r2, 800fb66 <_strtol_l.constprop.0+0xe6>
 800fb54:	4630      	mov	r0, r6
 800fb56:	e79e      	b.n	800fa96 <_strtol_l.constprop.0+0x16>
 800fb58:	b107      	cbz	r7, 800fb5c <_strtol_l.constprop.0+0xdc>
 800fb5a:	4276      	negs	r6, r6
 800fb5c:	2a00      	cmp	r2, #0
 800fb5e:	d0f9      	beq.n	800fb54 <_strtol_l.constprop.0+0xd4>
 800fb60:	f1bc 0f00 	cmp.w	ip, #0
 800fb64:	d000      	beq.n	800fb68 <_strtol_l.constprop.0+0xe8>
 800fb66:	1e69      	subs	r1, r5, #1
 800fb68:	6011      	str	r1, [r2, #0]
 800fb6a:	e7f3      	b.n	800fb54 <_strtol_l.constprop.0+0xd4>
 800fb6c:	2430      	movs	r4, #48	; 0x30
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1b1      	bne.n	800fad6 <_strtol_l.constprop.0+0x56>
 800fb72:	2308      	movs	r3, #8
 800fb74:	e7af      	b.n	800fad6 <_strtol_l.constprop.0+0x56>
 800fb76:	2c30      	cmp	r4, #48	; 0x30
 800fb78:	d0a5      	beq.n	800fac6 <_strtol_l.constprop.0+0x46>
 800fb7a:	230a      	movs	r3, #10
 800fb7c:	e7ab      	b.n	800fad6 <_strtol_l.constprop.0+0x56>
 800fb7e:	bf00      	nop
 800fb80:	0801057d 	.word	0x0801057d

0800fb84 <_strtol_r>:
 800fb84:	f7ff bf7c 	b.w	800fa80 <_strtol_l.constprop.0>

0800fb88 <_strtoul_l.constprop.0>:
 800fb88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb8c:	4f36      	ldr	r7, [pc, #216]	; (800fc68 <_strtoul_l.constprop.0+0xe0>)
 800fb8e:	4686      	mov	lr, r0
 800fb90:	460d      	mov	r5, r1
 800fb92:	4628      	mov	r0, r5
 800fb94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb98:	5de6      	ldrb	r6, [r4, r7]
 800fb9a:	f016 0608 	ands.w	r6, r6, #8
 800fb9e:	d1f8      	bne.n	800fb92 <_strtoul_l.constprop.0+0xa>
 800fba0:	2c2d      	cmp	r4, #45	; 0x2d
 800fba2:	d12f      	bne.n	800fc04 <_strtoul_l.constprop.0+0x7c>
 800fba4:	782c      	ldrb	r4, [r5, #0]
 800fba6:	2601      	movs	r6, #1
 800fba8:	1c85      	adds	r5, r0, #2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d057      	beq.n	800fc5e <_strtoul_l.constprop.0+0xd6>
 800fbae:	2b10      	cmp	r3, #16
 800fbb0:	d109      	bne.n	800fbc6 <_strtoul_l.constprop.0+0x3e>
 800fbb2:	2c30      	cmp	r4, #48	; 0x30
 800fbb4:	d107      	bne.n	800fbc6 <_strtoul_l.constprop.0+0x3e>
 800fbb6:	7828      	ldrb	r0, [r5, #0]
 800fbb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fbbc:	2858      	cmp	r0, #88	; 0x58
 800fbbe:	d149      	bne.n	800fc54 <_strtoul_l.constprop.0+0xcc>
 800fbc0:	786c      	ldrb	r4, [r5, #1]
 800fbc2:	2310      	movs	r3, #16
 800fbc4:	3502      	adds	r5, #2
 800fbc6:	f04f 38ff 	mov.w	r8, #4294967295
 800fbca:	2700      	movs	r7, #0
 800fbcc:	fbb8 f8f3 	udiv	r8, r8, r3
 800fbd0:	fb03 f908 	mul.w	r9, r3, r8
 800fbd4:	ea6f 0909 	mvn.w	r9, r9
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fbde:	f1bc 0f09 	cmp.w	ip, #9
 800fbe2:	d814      	bhi.n	800fc0e <_strtoul_l.constprop.0+0x86>
 800fbe4:	4664      	mov	r4, ip
 800fbe6:	42a3      	cmp	r3, r4
 800fbe8:	dd22      	ble.n	800fc30 <_strtoul_l.constprop.0+0xa8>
 800fbea:	2f00      	cmp	r7, #0
 800fbec:	db1d      	blt.n	800fc2a <_strtoul_l.constprop.0+0xa2>
 800fbee:	4580      	cmp	r8, r0
 800fbf0:	d31b      	bcc.n	800fc2a <_strtoul_l.constprop.0+0xa2>
 800fbf2:	d101      	bne.n	800fbf8 <_strtoul_l.constprop.0+0x70>
 800fbf4:	45a1      	cmp	r9, r4
 800fbf6:	db18      	blt.n	800fc2a <_strtoul_l.constprop.0+0xa2>
 800fbf8:	fb00 4003 	mla	r0, r0, r3, r4
 800fbfc:	2701      	movs	r7, #1
 800fbfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc02:	e7ea      	b.n	800fbda <_strtoul_l.constprop.0+0x52>
 800fc04:	2c2b      	cmp	r4, #43	; 0x2b
 800fc06:	bf04      	itt	eq
 800fc08:	782c      	ldrbeq	r4, [r5, #0]
 800fc0a:	1c85      	addeq	r5, r0, #2
 800fc0c:	e7cd      	b.n	800fbaa <_strtoul_l.constprop.0+0x22>
 800fc0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fc12:	f1bc 0f19 	cmp.w	ip, #25
 800fc16:	d801      	bhi.n	800fc1c <_strtoul_l.constprop.0+0x94>
 800fc18:	3c37      	subs	r4, #55	; 0x37
 800fc1a:	e7e4      	b.n	800fbe6 <_strtoul_l.constprop.0+0x5e>
 800fc1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fc20:	f1bc 0f19 	cmp.w	ip, #25
 800fc24:	d804      	bhi.n	800fc30 <_strtoul_l.constprop.0+0xa8>
 800fc26:	3c57      	subs	r4, #87	; 0x57
 800fc28:	e7dd      	b.n	800fbe6 <_strtoul_l.constprop.0+0x5e>
 800fc2a:	f04f 37ff 	mov.w	r7, #4294967295
 800fc2e:	e7e6      	b.n	800fbfe <_strtoul_l.constprop.0+0x76>
 800fc30:	2f00      	cmp	r7, #0
 800fc32:	da07      	bge.n	800fc44 <_strtoul_l.constprop.0+0xbc>
 800fc34:	2322      	movs	r3, #34	; 0x22
 800fc36:	f8ce 3000 	str.w	r3, [lr]
 800fc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3e:	b932      	cbnz	r2, 800fc4e <_strtoul_l.constprop.0+0xc6>
 800fc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc44:	b106      	cbz	r6, 800fc48 <_strtoul_l.constprop.0+0xc0>
 800fc46:	4240      	negs	r0, r0
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	d0f9      	beq.n	800fc40 <_strtoul_l.constprop.0+0xb8>
 800fc4c:	b107      	cbz	r7, 800fc50 <_strtoul_l.constprop.0+0xc8>
 800fc4e:	1e69      	subs	r1, r5, #1
 800fc50:	6011      	str	r1, [r2, #0]
 800fc52:	e7f5      	b.n	800fc40 <_strtoul_l.constprop.0+0xb8>
 800fc54:	2430      	movs	r4, #48	; 0x30
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1b5      	bne.n	800fbc6 <_strtoul_l.constprop.0+0x3e>
 800fc5a:	2308      	movs	r3, #8
 800fc5c:	e7b3      	b.n	800fbc6 <_strtoul_l.constprop.0+0x3e>
 800fc5e:	2c30      	cmp	r4, #48	; 0x30
 800fc60:	d0a9      	beq.n	800fbb6 <_strtoul_l.constprop.0+0x2e>
 800fc62:	230a      	movs	r3, #10
 800fc64:	e7af      	b.n	800fbc6 <_strtoul_l.constprop.0+0x3e>
 800fc66:	bf00      	nop
 800fc68:	0801057d 	.word	0x0801057d

0800fc6c <_strtoul_r>:
 800fc6c:	f7ff bf8c 	b.w	800fb88 <_strtoul_l.constprop.0>

0800fc70 <__submore>:
 800fc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc74:	460c      	mov	r4, r1
 800fc76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc7c:	4299      	cmp	r1, r3
 800fc7e:	d11d      	bne.n	800fcbc <__submore+0x4c>
 800fc80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc84:	f7fc ffaa 	bl	800cbdc <_malloc_r>
 800fc88:	b918      	cbnz	r0, 800fc92 <__submore+0x22>
 800fc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc96:	63a3      	str	r3, [r4, #56]	; 0x38
 800fc98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fc9c:	6360      	str	r0, [r4, #52]	; 0x34
 800fc9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fca2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fca6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fcaa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fcae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fcb2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fcb6:	6020      	str	r0, [r4, #0]
 800fcb8:	2000      	movs	r0, #0
 800fcba:	e7e8      	b.n	800fc8e <__submore+0x1e>
 800fcbc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fcbe:	0077      	lsls	r7, r6, #1
 800fcc0:	463a      	mov	r2, r7
 800fcc2:	f7ff f846 	bl	800ed52 <_realloc_r>
 800fcc6:	4605      	mov	r5, r0
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d0de      	beq.n	800fc8a <__submore+0x1a>
 800fccc:	eb00 0806 	add.w	r8, r0, r6
 800fcd0:	4601      	mov	r1, r0
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	f7fc feff 	bl	800cad8 <memcpy>
 800fcda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fcde:	f8c4 8000 	str.w	r8, [r4]
 800fce2:	e7e9      	b.n	800fcb8 <__submore+0x48>

0800fce4 <__ascii_wctomb>:
 800fce4:	b149      	cbz	r1, 800fcfa <__ascii_wctomb+0x16>
 800fce6:	2aff      	cmp	r2, #255	; 0xff
 800fce8:	bf85      	ittet	hi
 800fcea:	238a      	movhi	r3, #138	; 0x8a
 800fcec:	6003      	strhi	r3, [r0, #0]
 800fcee:	700a      	strbls	r2, [r1, #0]
 800fcf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fcf4:	bf98      	it	ls
 800fcf6:	2001      	movls	r0, #1
 800fcf8:	4770      	bx	lr
 800fcfa:	4608      	mov	r0, r1
 800fcfc:	4770      	bx	lr
	...

0800fd00 <__assert_func>:
 800fd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd02:	4614      	mov	r4, r2
 800fd04:	461a      	mov	r2, r3
 800fd06:	4b09      	ldr	r3, [pc, #36]	; (800fd2c <__assert_func+0x2c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	68d8      	ldr	r0, [r3, #12]
 800fd0e:	b14c      	cbz	r4, 800fd24 <__assert_func+0x24>
 800fd10:	4b07      	ldr	r3, [pc, #28]	; (800fd30 <__assert_func+0x30>)
 800fd12:	9100      	str	r1, [sp, #0]
 800fd14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd18:	4906      	ldr	r1, [pc, #24]	; (800fd34 <__assert_func+0x34>)
 800fd1a:	462b      	mov	r3, r5
 800fd1c:	f000 f80e 	bl	800fd3c <fiprintf>
 800fd20:	f000 fa5a 	bl	80101d8 <abort>
 800fd24:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <__assert_func+0x38>)
 800fd26:	461c      	mov	r4, r3
 800fd28:	e7f3      	b.n	800fd12 <__assert_func+0x12>
 800fd2a:	bf00      	nop
 800fd2c:	20000034 	.word	0x20000034
 800fd30:	0801098a 	.word	0x0801098a
 800fd34:	08010997 	.word	0x08010997
 800fd38:	080109c5 	.word	0x080109c5

0800fd3c <fiprintf>:
 800fd3c:	b40e      	push	{r1, r2, r3}
 800fd3e:	b503      	push	{r0, r1, lr}
 800fd40:	4601      	mov	r1, r0
 800fd42:	ab03      	add	r3, sp, #12
 800fd44:	4805      	ldr	r0, [pc, #20]	; (800fd5c <fiprintf+0x20>)
 800fd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd4a:	6800      	ldr	r0, [r0, #0]
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f000 f853 	bl	800fdf8 <_vfiprintf_r>
 800fd52:	b002      	add	sp, #8
 800fd54:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd58:	b003      	add	sp, #12
 800fd5a:	4770      	bx	lr
 800fd5c:	20000034 	.word	0x20000034

0800fd60 <memmove>:
 800fd60:	4288      	cmp	r0, r1
 800fd62:	b510      	push	{r4, lr}
 800fd64:	eb01 0402 	add.w	r4, r1, r2
 800fd68:	d902      	bls.n	800fd70 <memmove+0x10>
 800fd6a:	4284      	cmp	r4, r0
 800fd6c:	4623      	mov	r3, r4
 800fd6e:	d807      	bhi.n	800fd80 <memmove+0x20>
 800fd70:	1e43      	subs	r3, r0, #1
 800fd72:	42a1      	cmp	r1, r4
 800fd74:	d008      	beq.n	800fd88 <memmove+0x28>
 800fd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd7e:	e7f8      	b.n	800fd72 <memmove+0x12>
 800fd80:	4402      	add	r2, r0
 800fd82:	4601      	mov	r1, r0
 800fd84:	428a      	cmp	r2, r1
 800fd86:	d100      	bne.n	800fd8a <memmove+0x2a>
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd92:	e7f7      	b.n	800fd84 <memmove+0x24>

0800fd94 <_malloc_usable_size_r>:
 800fd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd98:	1f18      	subs	r0, r3, #4
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	bfbc      	itt	lt
 800fd9e:	580b      	ldrlt	r3, [r1, r0]
 800fda0:	18c0      	addlt	r0, r0, r3
 800fda2:	4770      	bx	lr

0800fda4 <__sfputc_r>:
 800fda4:	6893      	ldr	r3, [r2, #8]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	b410      	push	{r4}
 800fdac:	6093      	str	r3, [r2, #8]
 800fdae:	da08      	bge.n	800fdc2 <__sfputc_r+0x1e>
 800fdb0:	6994      	ldr	r4, [r2, #24]
 800fdb2:	42a3      	cmp	r3, r4
 800fdb4:	db01      	blt.n	800fdba <__sfputc_r+0x16>
 800fdb6:	290a      	cmp	r1, #10
 800fdb8:	d103      	bne.n	800fdc2 <__sfputc_r+0x1e>
 800fdba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdbe:	f000 b94b 	b.w	8010058 <__swbuf_r>
 800fdc2:	6813      	ldr	r3, [r2, #0]
 800fdc4:	1c58      	adds	r0, r3, #1
 800fdc6:	6010      	str	r0, [r2, #0]
 800fdc8:	7019      	strb	r1, [r3, #0]
 800fdca:	4608      	mov	r0, r1
 800fdcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <__sfputs_r>:
 800fdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd4:	4606      	mov	r6, r0
 800fdd6:	460f      	mov	r7, r1
 800fdd8:	4614      	mov	r4, r2
 800fdda:	18d5      	adds	r5, r2, r3
 800fddc:	42ac      	cmp	r4, r5
 800fdde:	d101      	bne.n	800fde4 <__sfputs_r+0x12>
 800fde0:	2000      	movs	r0, #0
 800fde2:	e007      	b.n	800fdf4 <__sfputs_r+0x22>
 800fde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fde8:	463a      	mov	r2, r7
 800fdea:	4630      	mov	r0, r6
 800fdec:	f7ff ffda 	bl	800fda4 <__sfputc_r>
 800fdf0:	1c43      	adds	r3, r0, #1
 800fdf2:	d1f3      	bne.n	800fddc <__sfputs_r+0xa>
 800fdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fdf8 <_vfiprintf_r>:
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	460d      	mov	r5, r1
 800fdfe:	b09d      	sub	sp, #116	; 0x74
 800fe00:	4614      	mov	r4, r2
 800fe02:	4698      	mov	r8, r3
 800fe04:	4606      	mov	r6, r0
 800fe06:	b118      	cbz	r0, 800fe10 <_vfiprintf_r+0x18>
 800fe08:	6983      	ldr	r3, [r0, #24]
 800fe0a:	b90b      	cbnz	r3, 800fe10 <_vfiprintf_r+0x18>
 800fe0c:	f7fc fd8e 	bl	800c92c <__sinit>
 800fe10:	4b89      	ldr	r3, [pc, #548]	; (8010038 <_vfiprintf_r+0x240>)
 800fe12:	429d      	cmp	r5, r3
 800fe14:	d11b      	bne.n	800fe4e <_vfiprintf_r+0x56>
 800fe16:	6875      	ldr	r5, [r6, #4]
 800fe18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe1a:	07d9      	lsls	r1, r3, #31
 800fe1c:	d405      	bmi.n	800fe2a <_vfiprintf_r+0x32>
 800fe1e:	89ab      	ldrh	r3, [r5, #12]
 800fe20:	059a      	lsls	r2, r3, #22
 800fe22:	d402      	bmi.n	800fe2a <_vfiprintf_r+0x32>
 800fe24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe26:	f7fc fe44 	bl	800cab2 <__retarget_lock_acquire_recursive>
 800fe2a:	89ab      	ldrh	r3, [r5, #12]
 800fe2c:	071b      	lsls	r3, r3, #28
 800fe2e:	d501      	bpl.n	800fe34 <_vfiprintf_r+0x3c>
 800fe30:	692b      	ldr	r3, [r5, #16]
 800fe32:	b9eb      	cbnz	r3, 800fe70 <_vfiprintf_r+0x78>
 800fe34:	4629      	mov	r1, r5
 800fe36:	4630      	mov	r0, r6
 800fe38:	f000 f960 	bl	80100fc <__swsetup_r>
 800fe3c:	b1c0      	cbz	r0, 800fe70 <_vfiprintf_r+0x78>
 800fe3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe40:	07dc      	lsls	r4, r3, #31
 800fe42:	d50e      	bpl.n	800fe62 <_vfiprintf_r+0x6a>
 800fe44:	f04f 30ff 	mov.w	r0, #4294967295
 800fe48:	b01d      	add	sp, #116	; 0x74
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	4b7b      	ldr	r3, [pc, #492]	; (801003c <_vfiprintf_r+0x244>)
 800fe50:	429d      	cmp	r5, r3
 800fe52:	d101      	bne.n	800fe58 <_vfiprintf_r+0x60>
 800fe54:	68b5      	ldr	r5, [r6, #8]
 800fe56:	e7df      	b.n	800fe18 <_vfiprintf_r+0x20>
 800fe58:	4b79      	ldr	r3, [pc, #484]	; (8010040 <_vfiprintf_r+0x248>)
 800fe5a:	429d      	cmp	r5, r3
 800fe5c:	bf08      	it	eq
 800fe5e:	68f5      	ldreq	r5, [r6, #12]
 800fe60:	e7da      	b.n	800fe18 <_vfiprintf_r+0x20>
 800fe62:	89ab      	ldrh	r3, [r5, #12]
 800fe64:	0598      	lsls	r0, r3, #22
 800fe66:	d4ed      	bmi.n	800fe44 <_vfiprintf_r+0x4c>
 800fe68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe6a:	f7fc fe23 	bl	800cab4 <__retarget_lock_release_recursive>
 800fe6e:	e7e9      	b.n	800fe44 <_vfiprintf_r+0x4c>
 800fe70:	2300      	movs	r3, #0
 800fe72:	9309      	str	r3, [sp, #36]	; 0x24
 800fe74:	2320      	movs	r3, #32
 800fe76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe7e:	2330      	movs	r3, #48	; 0x30
 800fe80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010044 <_vfiprintf_r+0x24c>
 800fe84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe88:	f04f 0901 	mov.w	r9, #1
 800fe8c:	4623      	mov	r3, r4
 800fe8e:	469a      	mov	sl, r3
 800fe90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe94:	b10a      	cbz	r2, 800fe9a <_vfiprintf_r+0xa2>
 800fe96:	2a25      	cmp	r2, #37	; 0x25
 800fe98:	d1f9      	bne.n	800fe8e <_vfiprintf_r+0x96>
 800fe9a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe9e:	d00b      	beq.n	800feb8 <_vfiprintf_r+0xc0>
 800fea0:	465b      	mov	r3, fp
 800fea2:	4622      	mov	r2, r4
 800fea4:	4629      	mov	r1, r5
 800fea6:	4630      	mov	r0, r6
 800fea8:	f7ff ff93 	bl	800fdd2 <__sfputs_r>
 800feac:	3001      	adds	r0, #1
 800feae:	f000 80aa 	beq.w	8010006 <_vfiprintf_r+0x20e>
 800feb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feb4:	445a      	add	r2, fp
 800feb6:	9209      	str	r2, [sp, #36]	; 0x24
 800feb8:	f89a 3000 	ldrb.w	r3, [sl]
 800febc:	2b00      	cmp	r3, #0
 800febe:	f000 80a2 	beq.w	8010006 <_vfiprintf_r+0x20e>
 800fec2:	2300      	movs	r3, #0
 800fec4:	f04f 32ff 	mov.w	r2, #4294967295
 800fec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fecc:	f10a 0a01 	add.w	sl, sl, #1
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	9307      	str	r3, [sp, #28]
 800fed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fed8:	931a      	str	r3, [sp, #104]	; 0x68
 800feda:	4654      	mov	r4, sl
 800fedc:	2205      	movs	r2, #5
 800fede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee2:	4858      	ldr	r0, [pc, #352]	; (8010044 <_vfiprintf_r+0x24c>)
 800fee4:	f7f0 f994 	bl	8000210 <memchr>
 800fee8:	9a04      	ldr	r2, [sp, #16]
 800feea:	b9d8      	cbnz	r0, 800ff24 <_vfiprintf_r+0x12c>
 800feec:	06d1      	lsls	r1, r2, #27
 800feee:	bf44      	itt	mi
 800fef0:	2320      	movmi	r3, #32
 800fef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fef6:	0713      	lsls	r3, r2, #28
 800fef8:	bf44      	itt	mi
 800fefa:	232b      	movmi	r3, #43	; 0x2b
 800fefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff00:	f89a 3000 	ldrb.w	r3, [sl]
 800ff04:	2b2a      	cmp	r3, #42	; 0x2a
 800ff06:	d015      	beq.n	800ff34 <_vfiprintf_r+0x13c>
 800ff08:	9a07      	ldr	r2, [sp, #28]
 800ff0a:	4654      	mov	r4, sl
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	f04f 0c0a 	mov.w	ip, #10
 800ff12:	4621      	mov	r1, r4
 800ff14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff18:	3b30      	subs	r3, #48	; 0x30
 800ff1a:	2b09      	cmp	r3, #9
 800ff1c:	d94e      	bls.n	800ffbc <_vfiprintf_r+0x1c4>
 800ff1e:	b1b0      	cbz	r0, 800ff4e <_vfiprintf_r+0x156>
 800ff20:	9207      	str	r2, [sp, #28]
 800ff22:	e014      	b.n	800ff4e <_vfiprintf_r+0x156>
 800ff24:	eba0 0308 	sub.w	r3, r0, r8
 800ff28:	fa09 f303 	lsl.w	r3, r9, r3
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	46a2      	mov	sl, r4
 800ff32:	e7d2      	b.n	800feda <_vfiprintf_r+0xe2>
 800ff34:	9b03      	ldr	r3, [sp, #12]
 800ff36:	1d19      	adds	r1, r3, #4
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	9103      	str	r1, [sp, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bfbb      	ittet	lt
 800ff40:	425b      	neglt	r3, r3
 800ff42:	f042 0202 	orrlt.w	r2, r2, #2
 800ff46:	9307      	strge	r3, [sp, #28]
 800ff48:	9307      	strlt	r3, [sp, #28]
 800ff4a:	bfb8      	it	lt
 800ff4c:	9204      	strlt	r2, [sp, #16]
 800ff4e:	7823      	ldrb	r3, [r4, #0]
 800ff50:	2b2e      	cmp	r3, #46	; 0x2e
 800ff52:	d10c      	bne.n	800ff6e <_vfiprintf_r+0x176>
 800ff54:	7863      	ldrb	r3, [r4, #1]
 800ff56:	2b2a      	cmp	r3, #42	; 0x2a
 800ff58:	d135      	bne.n	800ffc6 <_vfiprintf_r+0x1ce>
 800ff5a:	9b03      	ldr	r3, [sp, #12]
 800ff5c:	1d1a      	adds	r2, r3, #4
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	9203      	str	r2, [sp, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bfb8      	it	lt
 800ff66:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff6a:	3402      	adds	r4, #2
 800ff6c:	9305      	str	r3, [sp, #20]
 800ff6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010054 <_vfiprintf_r+0x25c>
 800ff72:	7821      	ldrb	r1, [r4, #0]
 800ff74:	2203      	movs	r2, #3
 800ff76:	4650      	mov	r0, sl
 800ff78:	f7f0 f94a 	bl	8000210 <memchr>
 800ff7c:	b140      	cbz	r0, 800ff90 <_vfiprintf_r+0x198>
 800ff7e:	2340      	movs	r3, #64	; 0x40
 800ff80:	eba0 000a 	sub.w	r0, r0, sl
 800ff84:	fa03 f000 	lsl.w	r0, r3, r0
 800ff88:	9b04      	ldr	r3, [sp, #16]
 800ff8a:	4303      	orrs	r3, r0
 800ff8c:	3401      	adds	r4, #1
 800ff8e:	9304      	str	r3, [sp, #16]
 800ff90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff94:	482c      	ldr	r0, [pc, #176]	; (8010048 <_vfiprintf_r+0x250>)
 800ff96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff9a:	2206      	movs	r2, #6
 800ff9c:	f7f0 f938 	bl	8000210 <memchr>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d03f      	beq.n	8010024 <_vfiprintf_r+0x22c>
 800ffa4:	4b29      	ldr	r3, [pc, #164]	; (801004c <_vfiprintf_r+0x254>)
 800ffa6:	bb1b      	cbnz	r3, 800fff0 <_vfiprintf_r+0x1f8>
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	3307      	adds	r3, #7
 800ffac:	f023 0307 	bic.w	r3, r3, #7
 800ffb0:	3308      	adds	r3, #8
 800ffb2:	9303      	str	r3, [sp, #12]
 800ffb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb6:	443b      	add	r3, r7
 800ffb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ffba:	e767      	b.n	800fe8c <_vfiprintf_r+0x94>
 800ffbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	2001      	movs	r0, #1
 800ffc4:	e7a5      	b.n	800ff12 <_vfiprintf_r+0x11a>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	3401      	adds	r4, #1
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	f04f 0c0a 	mov.w	ip, #10
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd8:	3a30      	subs	r2, #48	; 0x30
 800ffda:	2a09      	cmp	r2, #9
 800ffdc:	d903      	bls.n	800ffe6 <_vfiprintf_r+0x1ee>
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d0c5      	beq.n	800ff6e <_vfiprintf_r+0x176>
 800ffe2:	9105      	str	r1, [sp, #20]
 800ffe4:	e7c3      	b.n	800ff6e <_vfiprintf_r+0x176>
 800ffe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffea:	4604      	mov	r4, r0
 800ffec:	2301      	movs	r3, #1
 800ffee:	e7f0      	b.n	800ffd2 <_vfiprintf_r+0x1da>
 800fff0:	ab03      	add	r3, sp, #12
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	462a      	mov	r2, r5
 800fff6:	4b16      	ldr	r3, [pc, #88]	; (8010050 <_vfiprintf_r+0x258>)
 800fff8:	a904      	add	r1, sp, #16
 800fffa:	4630      	mov	r0, r6
 800fffc:	f3af 8000 	nop.w
 8010000:	4607      	mov	r7, r0
 8010002:	1c78      	adds	r0, r7, #1
 8010004:	d1d6      	bne.n	800ffb4 <_vfiprintf_r+0x1bc>
 8010006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010008:	07d9      	lsls	r1, r3, #31
 801000a:	d405      	bmi.n	8010018 <_vfiprintf_r+0x220>
 801000c:	89ab      	ldrh	r3, [r5, #12]
 801000e:	059a      	lsls	r2, r3, #22
 8010010:	d402      	bmi.n	8010018 <_vfiprintf_r+0x220>
 8010012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010014:	f7fc fd4e 	bl	800cab4 <__retarget_lock_release_recursive>
 8010018:	89ab      	ldrh	r3, [r5, #12]
 801001a:	065b      	lsls	r3, r3, #25
 801001c:	f53f af12 	bmi.w	800fe44 <_vfiprintf_r+0x4c>
 8010020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010022:	e711      	b.n	800fe48 <_vfiprintf_r+0x50>
 8010024:	ab03      	add	r3, sp, #12
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	462a      	mov	r2, r5
 801002a:	4b09      	ldr	r3, [pc, #36]	; (8010050 <_vfiprintf_r+0x258>)
 801002c:	a904      	add	r1, sp, #16
 801002e:	4630      	mov	r0, r6
 8010030:	f7ff fa5a 	bl	800f4e8 <_printf_i>
 8010034:	e7e4      	b.n	8010000 <_vfiprintf_r+0x208>
 8010036:	bf00      	nop
 8010038:	080106a0 	.word	0x080106a0
 801003c:	080106c0 	.word	0x080106c0
 8010040:	08010680 	.word	0x08010680
 8010044:	0801093c 	.word	0x0801093c
 8010048:	08010946 	.word	0x08010946
 801004c:	00000000 	.word	0x00000000
 8010050:	0800fdd3 	.word	0x0800fdd3
 8010054:	08010942 	.word	0x08010942

08010058 <__swbuf_r>:
 8010058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005a:	460e      	mov	r6, r1
 801005c:	4614      	mov	r4, r2
 801005e:	4605      	mov	r5, r0
 8010060:	b118      	cbz	r0, 801006a <__swbuf_r+0x12>
 8010062:	6983      	ldr	r3, [r0, #24]
 8010064:	b90b      	cbnz	r3, 801006a <__swbuf_r+0x12>
 8010066:	f7fc fc61 	bl	800c92c <__sinit>
 801006a:	4b21      	ldr	r3, [pc, #132]	; (80100f0 <__swbuf_r+0x98>)
 801006c:	429c      	cmp	r4, r3
 801006e:	d12b      	bne.n	80100c8 <__swbuf_r+0x70>
 8010070:	686c      	ldr	r4, [r5, #4]
 8010072:	69a3      	ldr	r3, [r4, #24]
 8010074:	60a3      	str	r3, [r4, #8]
 8010076:	89a3      	ldrh	r3, [r4, #12]
 8010078:	071a      	lsls	r2, r3, #28
 801007a:	d52f      	bpl.n	80100dc <__swbuf_r+0x84>
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	b36b      	cbz	r3, 80100dc <__swbuf_r+0x84>
 8010080:	6923      	ldr	r3, [r4, #16]
 8010082:	6820      	ldr	r0, [r4, #0]
 8010084:	1ac0      	subs	r0, r0, r3
 8010086:	6963      	ldr	r3, [r4, #20]
 8010088:	b2f6      	uxtb	r6, r6
 801008a:	4283      	cmp	r3, r0
 801008c:	4637      	mov	r7, r6
 801008e:	dc04      	bgt.n	801009a <__swbuf_r+0x42>
 8010090:	4621      	mov	r1, r4
 8010092:	4628      	mov	r0, r5
 8010094:	f7fd fdaa 	bl	800dbec <_fflush_r>
 8010098:	bb30      	cbnz	r0, 80100e8 <__swbuf_r+0x90>
 801009a:	68a3      	ldr	r3, [r4, #8]
 801009c:	3b01      	subs	r3, #1
 801009e:	60a3      	str	r3, [r4, #8]
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	6022      	str	r2, [r4, #0]
 80100a6:	701e      	strb	r6, [r3, #0]
 80100a8:	6963      	ldr	r3, [r4, #20]
 80100aa:	3001      	adds	r0, #1
 80100ac:	4283      	cmp	r3, r0
 80100ae:	d004      	beq.n	80100ba <__swbuf_r+0x62>
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	07db      	lsls	r3, r3, #31
 80100b4:	d506      	bpl.n	80100c4 <__swbuf_r+0x6c>
 80100b6:	2e0a      	cmp	r6, #10
 80100b8:	d104      	bne.n	80100c4 <__swbuf_r+0x6c>
 80100ba:	4621      	mov	r1, r4
 80100bc:	4628      	mov	r0, r5
 80100be:	f7fd fd95 	bl	800dbec <_fflush_r>
 80100c2:	b988      	cbnz	r0, 80100e8 <__swbuf_r+0x90>
 80100c4:	4638      	mov	r0, r7
 80100c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c8:	4b0a      	ldr	r3, [pc, #40]	; (80100f4 <__swbuf_r+0x9c>)
 80100ca:	429c      	cmp	r4, r3
 80100cc:	d101      	bne.n	80100d2 <__swbuf_r+0x7a>
 80100ce:	68ac      	ldr	r4, [r5, #8]
 80100d0:	e7cf      	b.n	8010072 <__swbuf_r+0x1a>
 80100d2:	4b09      	ldr	r3, [pc, #36]	; (80100f8 <__swbuf_r+0xa0>)
 80100d4:	429c      	cmp	r4, r3
 80100d6:	bf08      	it	eq
 80100d8:	68ec      	ldreq	r4, [r5, #12]
 80100da:	e7ca      	b.n	8010072 <__swbuf_r+0x1a>
 80100dc:	4621      	mov	r1, r4
 80100de:	4628      	mov	r0, r5
 80100e0:	f000 f80c 	bl	80100fc <__swsetup_r>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d0cb      	beq.n	8010080 <__swbuf_r+0x28>
 80100e8:	f04f 37ff 	mov.w	r7, #4294967295
 80100ec:	e7ea      	b.n	80100c4 <__swbuf_r+0x6c>
 80100ee:	bf00      	nop
 80100f0:	080106a0 	.word	0x080106a0
 80100f4:	080106c0 	.word	0x080106c0
 80100f8:	08010680 	.word	0x08010680

080100fc <__swsetup_r>:
 80100fc:	4b32      	ldr	r3, [pc, #200]	; (80101c8 <__swsetup_r+0xcc>)
 80100fe:	b570      	push	{r4, r5, r6, lr}
 8010100:	681d      	ldr	r5, [r3, #0]
 8010102:	4606      	mov	r6, r0
 8010104:	460c      	mov	r4, r1
 8010106:	b125      	cbz	r5, 8010112 <__swsetup_r+0x16>
 8010108:	69ab      	ldr	r3, [r5, #24]
 801010a:	b913      	cbnz	r3, 8010112 <__swsetup_r+0x16>
 801010c:	4628      	mov	r0, r5
 801010e:	f7fc fc0d 	bl	800c92c <__sinit>
 8010112:	4b2e      	ldr	r3, [pc, #184]	; (80101cc <__swsetup_r+0xd0>)
 8010114:	429c      	cmp	r4, r3
 8010116:	d10f      	bne.n	8010138 <__swsetup_r+0x3c>
 8010118:	686c      	ldr	r4, [r5, #4]
 801011a:	89a3      	ldrh	r3, [r4, #12]
 801011c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010120:	0719      	lsls	r1, r3, #28
 8010122:	d42c      	bmi.n	801017e <__swsetup_r+0x82>
 8010124:	06dd      	lsls	r5, r3, #27
 8010126:	d411      	bmi.n	801014c <__swsetup_r+0x50>
 8010128:	2309      	movs	r3, #9
 801012a:	6033      	str	r3, [r6, #0]
 801012c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010130:	81a3      	strh	r3, [r4, #12]
 8010132:	f04f 30ff 	mov.w	r0, #4294967295
 8010136:	e03e      	b.n	80101b6 <__swsetup_r+0xba>
 8010138:	4b25      	ldr	r3, [pc, #148]	; (80101d0 <__swsetup_r+0xd4>)
 801013a:	429c      	cmp	r4, r3
 801013c:	d101      	bne.n	8010142 <__swsetup_r+0x46>
 801013e:	68ac      	ldr	r4, [r5, #8]
 8010140:	e7eb      	b.n	801011a <__swsetup_r+0x1e>
 8010142:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <__swsetup_r+0xd8>)
 8010144:	429c      	cmp	r4, r3
 8010146:	bf08      	it	eq
 8010148:	68ec      	ldreq	r4, [r5, #12]
 801014a:	e7e6      	b.n	801011a <__swsetup_r+0x1e>
 801014c:	0758      	lsls	r0, r3, #29
 801014e:	d512      	bpl.n	8010176 <__swsetup_r+0x7a>
 8010150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010152:	b141      	cbz	r1, 8010166 <__swsetup_r+0x6a>
 8010154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010158:	4299      	cmp	r1, r3
 801015a:	d002      	beq.n	8010162 <__swsetup_r+0x66>
 801015c:	4630      	mov	r0, r6
 801015e:	f7fc fcd1 	bl	800cb04 <_free_r>
 8010162:	2300      	movs	r3, #0
 8010164:	6363      	str	r3, [r4, #52]	; 0x34
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801016c:	81a3      	strh	r3, [r4, #12]
 801016e:	2300      	movs	r3, #0
 8010170:	6063      	str	r3, [r4, #4]
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	f043 0308 	orr.w	r3, r3, #8
 801017c:	81a3      	strh	r3, [r4, #12]
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	b94b      	cbnz	r3, 8010196 <__swsetup_r+0x9a>
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801018c:	d003      	beq.n	8010196 <__swsetup_r+0x9a>
 801018e:	4621      	mov	r1, r4
 8010190:	4630      	mov	r0, r6
 8010192:	f000 f84d 	bl	8010230 <__smakebuf_r>
 8010196:	89a0      	ldrh	r0, [r4, #12]
 8010198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801019c:	f010 0301 	ands.w	r3, r0, #1
 80101a0:	d00a      	beq.n	80101b8 <__swsetup_r+0xbc>
 80101a2:	2300      	movs	r3, #0
 80101a4:	60a3      	str	r3, [r4, #8]
 80101a6:	6963      	ldr	r3, [r4, #20]
 80101a8:	425b      	negs	r3, r3
 80101aa:	61a3      	str	r3, [r4, #24]
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	b943      	cbnz	r3, 80101c2 <__swsetup_r+0xc6>
 80101b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101b4:	d1ba      	bne.n	801012c <__swsetup_r+0x30>
 80101b6:	bd70      	pop	{r4, r5, r6, pc}
 80101b8:	0781      	lsls	r1, r0, #30
 80101ba:	bf58      	it	pl
 80101bc:	6963      	ldrpl	r3, [r4, #20]
 80101be:	60a3      	str	r3, [r4, #8]
 80101c0:	e7f4      	b.n	80101ac <__swsetup_r+0xb0>
 80101c2:	2000      	movs	r0, #0
 80101c4:	e7f7      	b.n	80101b6 <__swsetup_r+0xba>
 80101c6:	bf00      	nop
 80101c8:	20000034 	.word	0x20000034
 80101cc:	080106a0 	.word	0x080106a0
 80101d0:	080106c0 	.word	0x080106c0
 80101d4:	08010680 	.word	0x08010680

080101d8 <abort>:
 80101d8:	b508      	push	{r3, lr}
 80101da:	2006      	movs	r0, #6
 80101dc:	f000 f890 	bl	8010300 <raise>
 80101e0:	2001      	movs	r0, #1
 80101e2:	f7f4 fa77 	bl	80046d4 <_exit>

080101e6 <__swhatbuf_r>:
 80101e6:	b570      	push	{r4, r5, r6, lr}
 80101e8:	460e      	mov	r6, r1
 80101ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ee:	2900      	cmp	r1, #0
 80101f0:	b096      	sub	sp, #88	; 0x58
 80101f2:	4614      	mov	r4, r2
 80101f4:	461d      	mov	r5, r3
 80101f6:	da08      	bge.n	801020a <__swhatbuf_r+0x24>
 80101f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80101fc:	2200      	movs	r2, #0
 80101fe:	602a      	str	r2, [r5, #0]
 8010200:	061a      	lsls	r2, r3, #24
 8010202:	d410      	bmi.n	8010226 <__swhatbuf_r+0x40>
 8010204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010208:	e00e      	b.n	8010228 <__swhatbuf_r+0x42>
 801020a:	466a      	mov	r2, sp
 801020c:	f000 f894 	bl	8010338 <_fstat_r>
 8010210:	2800      	cmp	r0, #0
 8010212:	dbf1      	blt.n	80101f8 <__swhatbuf_r+0x12>
 8010214:	9a01      	ldr	r2, [sp, #4]
 8010216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801021a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801021e:	425a      	negs	r2, r3
 8010220:	415a      	adcs	r2, r3
 8010222:	602a      	str	r2, [r5, #0]
 8010224:	e7ee      	b.n	8010204 <__swhatbuf_r+0x1e>
 8010226:	2340      	movs	r3, #64	; 0x40
 8010228:	2000      	movs	r0, #0
 801022a:	6023      	str	r3, [r4, #0]
 801022c:	b016      	add	sp, #88	; 0x58
 801022e:	bd70      	pop	{r4, r5, r6, pc}

08010230 <__smakebuf_r>:
 8010230:	898b      	ldrh	r3, [r1, #12]
 8010232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010234:	079d      	lsls	r5, r3, #30
 8010236:	4606      	mov	r6, r0
 8010238:	460c      	mov	r4, r1
 801023a:	d507      	bpl.n	801024c <__smakebuf_r+0x1c>
 801023c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010240:	6023      	str	r3, [r4, #0]
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	2301      	movs	r3, #1
 8010246:	6163      	str	r3, [r4, #20]
 8010248:	b002      	add	sp, #8
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	ab01      	add	r3, sp, #4
 801024e:	466a      	mov	r2, sp
 8010250:	f7ff ffc9 	bl	80101e6 <__swhatbuf_r>
 8010254:	9900      	ldr	r1, [sp, #0]
 8010256:	4605      	mov	r5, r0
 8010258:	4630      	mov	r0, r6
 801025a:	f7fc fcbf 	bl	800cbdc <_malloc_r>
 801025e:	b948      	cbnz	r0, 8010274 <__smakebuf_r+0x44>
 8010260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010264:	059a      	lsls	r2, r3, #22
 8010266:	d4ef      	bmi.n	8010248 <__smakebuf_r+0x18>
 8010268:	f023 0303 	bic.w	r3, r3, #3
 801026c:	f043 0302 	orr.w	r3, r3, #2
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	e7e3      	b.n	801023c <__smakebuf_r+0xc>
 8010274:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <__smakebuf_r+0x7c>)
 8010276:	62b3      	str	r3, [r6, #40]	; 0x28
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	6020      	str	r0, [r4, #0]
 801027c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010280:	81a3      	strh	r3, [r4, #12]
 8010282:	9b00      	ldr	r3, [sp, #0]
 8010284:	6163      	str	r3, [r4, #20]
 8010286:	9b01      	ldr	r3, [sp, #4]
 8010288:	6120      	str	r0, [r4, #16]
 801028a:	b15b      	cbz	r3, 80102a4 <__smakebuf_r+0x74>
 801028c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010290:	4630      	mov	r0, r6
 8010292:	f000 f863 	bl	801035c <_isatty_r>
 8010296:	b128      	cbz	r0, 80102a4 <__smakebuf_r+0x74>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	f023 0303 	bic.w	r3, r3, #3
 801029e:	f043 0301 	orr.w	r3, r3, #1
 80102a2:	81a3      	strh	r3, [r4, #12]
 80102a4:	89a0      	ldrh	r0, [r4, #12]
 80102a6:	4305      	orrs	r5, r0
 80102a8:	81a5      	strh	r5, [r4, #12]
 80102aa:	e7cd      	b.n	8010248 <__smakebuf_r+0x18>
 80102ac:	0800c8c5 	.word	0x0800c8c5

080102b0 <_raise_r>:
 80102b0:	291f      	cmp	r1, #31
 80102b2:	b538      	push	{r3, r4, r5, lr}
 80102b4:	4604      	mov	r4, r0
 80102b6:	460d      	mov	r5, r1
 80102b8:	d904      	bls.n	80102c4 <_raise_r+0x14>
 80102ba:	2316      	movs	r3, #22
 80102bc:	6003      	str	r3, [r0, #0]
 80102be:	f04f 30ff 	mov.w	r0, #4294967295
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80102c6:	b112      	cbz	r2, 80102ce <_raise_r+0x1e>
 80102c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102cc:	b94b      	cbnz	r3, 80102e2 <_raise_r+0x32>
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 f830 	bl	8010334 <_getpid_r>
 80102d4:	462a      	mov	r2, r5
 80102d6:	4601      	mov	r1, r0
 80102d8:	4620      	mov	r0, r4
 80102da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102de:	f000 b817 	b.w	8010310 <_kill_r>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d00a      	beq.n	80102fc <_raise_r+0x4c>
 80102e6:	1c59      	adds	r1, r3, #1
 80102e8:	d103      	bne.n	80102f2 <_raise_r+0x42>
 80102ea:	2316      	movs	r3, #22
 80102ec:	6003      	str	r3, [r0, #0]
 80102ee:	2001      	movs	r0, #1
 80102f0:	e7e7      	b.n	80102c2 <_raise_r+0x12>
 80102f2:	2400      	movs	r4, #0
 80102f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102f8:	4628      	mov	r0, r5
 80102fa:	4798      	blx	r3
 80102fc:	2000      	movs	r0, #0
 80102fe:	e7e0      	b.n	80102c2 <_raise_r+0x12>

08010300 <raise>:
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <raise+0xc>)
 8010302:	4601      	mov	r1, r0
 8010304:	6818      	ldr	r0, [r3, #0]
 8010306:	f7ff bfd3 	b.w	80102b0 <_raise_r>
 801030a:	bf00      	nop
 801030c:	20000034 	.word	0x20000034

08010310 <_kill_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4d07      	ldr	r5, [pc, #28]	; (8010330 <_kill_r+0x20>)
 8010314:	2300      	movs	r3, #0
 8010316:	4604      	mov	r4, r0
 8010318:	4608      	mov	r0, r1
 801031a:	4611      	mov	r1, r2
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f7f4 f9c9 	bl	80046b4 <_kill>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	d102      	bne.n	801032c <_kill_r+0x1c>
 8010326:	682b      	ldr	r3, [r5, #0]
 8010328:	b103      	cbz	r3, 801032c <_kill_r+0x1c>
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	bd38      	pop	{r3, r4, r5, pc}
 801032e:	bf00      	nop
 8010330:	20001a60 	.word	0x20001a60

08010334 <_getpid_r>:
 8010334:	f7f4 b9b6 	b.w	80046a4 <_getpid>

08010338 <_fstat_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d07      	ldr	r5, [pc, #28]	; (8010358 <_fstat_r+0x20>)
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	4608      	mov	r0, r1
 8010342:	4611      	mov	r1, r2
 8010344:	602b      	str	r3, [r5, #0]
 8010346:	f7f4 fa14 	bl	8004772 <_fstat>
 801034a:	1c43      	adds	r3, r0, #1
 801034c:	d102      	bne.n	8010354 <_fstat_r+0x1c>
 801034e:	682b      	ldr	r3, [r5, #0]
 8010350:	b103      	cbz	r3, 8010354 <_fstat_r+0x1c>
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	bd38      	pop	{r3, r4, r5, pc}
 8010356:	bf00      	nop
 8010358:	20001a60 	.word	0x20001a60

0801035c <_isatty_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d06      	ldr	r5, [pc, #24]	; (8010378 <_isatty_r+0x1c>)
 8010360:	2300      	movs	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	4608      	mov	r0, r1
 8010366:	602b      	str	r3, [r5, #0]
 8010368:	f7f4 fa13 	bl	8004792 <_isatty>
 801036c:	1c43      	adds	r3, r0, #1
 801036e:	d102      	bne.n	8010376 <_isatty_r+0x1a>
 8010370:	682b      	ldr	r3, [r5, #0]
 8010372:	b103      	cbz	r3, 8010376 <_isatty_r+0x1a>
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	bd38      	pop	{r3, r4, r5, pc}
 8010378:	20001a60 	.word	0x20001a60

0801037c <_init>:
 801037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037e:	bf00      	nop
 8010380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010382:	bc08      	pop	{r3}
 8010384:	469e      	mov	lr, r3
 8010386:	4770      	bx	lr

08010388 <_fini>:
 8010388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038a:	bf00      	nop
 801038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801038e:	bc08      	pop	{r3}
 8010390:	469e      	mov	lr, r3
 8010392:	4770      	bx	lr
