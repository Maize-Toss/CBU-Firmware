
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f0  080099f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080099f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c48  20000078  08009a70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  08009a70  00021cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed5e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf9  00000000  00000000  0003ee06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00042b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  000442e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262fe  00000000  00000000  00045958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9dc  00000000  00000000  0006bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec9c5  00000000  00000000  00086632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172ff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068cc  00000000  00000000  00173048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009808 	.word	0x08009808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009808 	.word	0x08009808

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b974 	b.w	8000d1c <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	468e      	mov	lr, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14d      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	d969      	bls.n	8000b34 <__udivmoddi4+0xe8>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b152      	cbz	r2, 8000a7c <__udivmoddi4+0x30>
 8000a66:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6a:	f1c2 0120 	rsb	r1, r2, #32
 8000a6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a76:	ea41 0e03 	orr.w	lr, r1, r3
 8000a7a:	4094      	lsls	r4, r2
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	0c21      	lsrs	r1, r4, #16
 8000a82:	fbbe f6f8 	udiv	r6, lr, r8
 8000a86:	fa1f f78c 	uxth.w	r7, ip
 8000a8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a92:	fb06 f107 	mul.w	r1, r6, r7
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aa2:	f080 811f 	bcs.w	8000ce4 <__udivmoddi4+0x298>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 811c 	bls.w	8000ce4 <__udivmoddi4+0x298>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb00 f707 	mul.w	r7, r0, r7
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x92>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad0:	f080 810a 	bcs.w	8000ce8 <__udivmoddi4+0x29c>
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	f240 8107 	bls.w	8000ce8 <__udivmoddi4+0x29c>
 8000ada:	4464      	add	r4, ip
 8000adc:	3802      	subs	r0, #2
 8000ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae2:	1be4      	subs	r4, r4, r7
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	b11d      	cbz	r5, 8000af0 <__udivmoddi4+0xa4>
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	2300      	movs	r3, #0
 8000aec:	e9c5 4300 	strd	r4, r3, [r5]
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0xc2>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	f000 80ef 	beq.w	8000cde <__udivmoddi4+0x292>
 8000b00:	2600      	movs	r6, #0
 8000b02:	e9c5 0100 	strd	r0, r1, [r5]
 8000b06:	4630      	mov	r0, r6
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	fab3 f683 	clz	r6, r3
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d14a      	bne.n	8000bac <__udivmoddi4+0x160>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xd4>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80f9 	bhi.w	8000d12 <__udivmoddi4+0x2c6>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb61 0303 	sbc.w	r3, r1, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	469e      	mov	lr, r3
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d0e0      	beq.n	8000af0 <__udivmoddi4+0xa4>
 8000b2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b32:	e7dd      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000b34:	b902      	cbnz	r2, 8000b38 <__udivmoddi4+0xec>
 8000b36:	deff      	udf	#255	; 0xff
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	f040 8092 	bne.w	8000c66 <__udivmoddi4+0x21a>
 8000b42:	eba1 010c 	sub.w	r1, r1, ip
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2601      	movs	r6, #1
 8000b50:	0c20      	lsrs	r0, r4, #16
 8000b52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b56:	fb07 1113 	mls	r1, r7, r3, r1
 8000b5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5e:	fb0e f003 	mul.w	r0, lr, r3
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x12c>
 8000b66:	eb1c 0101 	adds.w	r1, ip, r1
 8000b6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x12a>
 8000b70:	4288      	cmp	r0, r1
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2c0>
 8000b76:	4643      	mov	r3, r8
 8000b78:	1a09      	subs	r1, r1, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b80:	fb07 1110 	mls	r1, r7, r0, r1
 8000b84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x156>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x154>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2ca>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000baa:	e79c      	b.n	8000ae6 <__udivmoddi4+0x9a>
 8000bac:	f1c6 0720 	rsb	r7, r6, #32
 8000bb0:	40b3      	lsls	r3, r6
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa20 f407 	lsr.w	r4, r0, r7
 8000bbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	40f9      	lsrs	r1, r7
 8000bc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bca:	fa00 f306 	lsl.w	r3, r0, r6
 8000bce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bd2:	0c20      	lsrs	r0, r4, #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be0:	fb08 f00e 	mul.w	r0, r8, lr
 8000be4:	4288      	cmp	r0, r1
 8000be6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b8>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2bc>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2bc>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4461      	add	r1, ip
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	458e      	cmp	lr, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1e2>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2b4>
 8000c26:	458e      	cmp	lr, r1
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2b4>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c32:	fba0 9402 	umull	r9, r4, r0, r2
 8000c36:	eba1 010e 	sub.w	r1, r1, lr
 8000c3a:	42a1      	cmp	r1, r4
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46a6      	mov	lr, r4
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x2a4>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x2a0>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x212>
 8000c46:	ebb3 0208 	subs.w	r2, r3, r8
 8000c4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c52:	fa22 f306 	lsr.w	r3, r2, r6
 8000c56:	40f1      	lsrs	r1, r6
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	f1c2 0320 	rsb	r3, r2, #32
 8000c6a:	40d8      	lsrs	r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	fa21 f303 	lsr.w	r3, r1, r3
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4301      	orrs	r1, r0
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c84:	fb07 3610 	mls	r6, r7, r0, r3
 8000c88:	0c0b      	lsrs	r3, r1, #16
 8000c8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c92:	429e      	cmp	r6, r3
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x260>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	b289      	uxth	r1, r1
 8000cb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x28a>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000cd2:	3e02      	subs	r6, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0x104>
 8000cde:	462e      	mov	r6, r5
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	e705      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	e6e3      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000ce8:	4618      	mov	r0, r3
 8000cea:	e6f8      	b.n	8000ade <__udivmoddi4+0x92>
 8000cec:	454b      	cmp	r3, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f8>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f8>
 8000cfc:	4646      	mov	r6, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x28a>
 8000d00:	4620      	mov	r0, r4
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1e2>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x260>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b8>
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	4461      	add	r1, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x12c>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e709      	b.n	8000b2a <__udivmoddi4+0xde>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x156>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <initBLE>:
 *      Author: evanm
 */
#include "bluetooth.h"

// initializes BLE interface
void initBLE(BLE_interface * ble) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <connect>:
return true;
}

// perform any maintenance to connect and disconnect to target
// return status
uint32_t connect(char* target, BLE_interface* ble) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <readBLE>:
uint32_t disconnect(char* target, BLE_interface* ble) {
return 1;
}

// poll for events
void readBLE(uint8_t* rx_buff, uint32_t* size, BLE_interface* ble) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]

}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <broadcast>:

// broadcast payload to other ble modules
// return status
uint32_t broadcast(uint8_t* tx_buffer, uint32_t size, BLE_interface* ble) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fd9a 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f88e 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f000 fa02 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d90:	f000 f9e2 	bl	8001158 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d94:	f000 f9b0 	bl	80010f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d98:	f000 f97e 	bl	8001098 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d9c:	f000 f8d6 	bl	8000f4c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000da0:	f000 f93c 	bl	800101c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000da4:	f005 f82c 	bl	8005e00 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BluetoothTX */
  BluetoothTXHandle = osMutexNew(&BluetoothTX_attributes);
 8000da8:	482b      	ldr	r0, [pc, #172]	; (8000e58 <main+0xd8>)
 8000daa:	f005 f920 	bl	8005fee <osMutexNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <main+0xdc>)
 8000db2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BluetoothRX */
  BluetoothRXHandle = osSemaphoreNew(1, 1, &BluetoothRX_attributes);
 8000db4:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <main+0xe0>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f005 f99e 	bl	80060fa <osSemaphoreNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <main+0xe4>)
 8000dc2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <main+0xe8>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4828      	ldr	r0, [pc, #160]	; (8000e6c <main+0xec>)
 8000dca:	f005 f863 	bl	8005e94 <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <main+0xf0>)
 8000dd2:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 8000dd4:	4a27      	ldr	r2, [pc, #156]	; (8000e74 <main+0xf4>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4827      	ldr	r0, [pc, #156]	; (8000e78 <main+0xf8>)
 8000dda:	f005 f85b 	bl	8005e94 <osThreadNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <main+0xfc>)
 8000de2:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothRXTask */
  BluetoothRXTaskHandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothRXTask_attributes);
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <main+0x100>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4826      	ldr	r0, [pc, #152]	; (8000e84 <main+0x104>)
 8000dea:	f005 f853 	bl	8005e94 <osThreadNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a25      	ldr	r2, [pc, #148]	; (8000e88 <main+0x108>)
 8000df2:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <main+0x10c>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <main+0x110>)
 8000dfa:	f005 f84b 	bl	8005e94 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <main+0x114>)
 8000e02:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  	  if (HAL_GPIO_ReadPin(ADDR_PORT, ADDR_PIN) == GPIO_PIN_SET) {
 8000e04:	2101      	movs	r1, #1
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f002 fcc5 	bl	8003798 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d103      	bne.n	8000e1c <main+0x9c>
  		  CBU_ID[3] = '1';
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <main+0x118>)
 8000e16:	2231      	movs	r2, #49	; 0x31
 8000e18:	70da      	strb	r2, [r3, #3]
 8000e1a:	e002      	b.n	8000e22 <main+0xa2>
  	  } else {
  		  CBU_ID[3] = '0';
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <main+0x118>)
 8000e1e:	2230      	movs	r2, #48	; 0x30
 8000e20:	70da      	strb	r2, [r3, #3]
  	  }

  	  ble.huart = &huart2;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <main+0x11c>)
 8000e24:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <main+0x120>)
 8000e26:	601a      	str	r2, [r3, #0]
  	  ble.cs_base = BLE_CS_PORT;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <main+0x11c>)
 8000e2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2e:	605a      	str	r2, [r3, #4]
  	  ble.cs_pin = BLE_CS_PIN;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <main+0x11c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	811a      	strh	r2, [r3, #8]
  	  ble.name = CBU_ID;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <main+0x11c>)
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <main+0x118>)
 8000e3a:	60da      	str	r2, [r3, #12]
  	  ble.mutex = &BluetoothTXHandle;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0x11c>)
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <main+0xdc>)
 8000e40:	611a      	str	r2, [r3, #16]

  	  initBLE(&ble);
 8000e42:	4816      	ldr	r0, [pc, #88]	; (8000e9c <main+0x11c>)
 8000e44:	f7ff ff6c 	bl	8000d20 <initBLE>

#ifndef DEBUG
  	  while (!connect(SDU_NAME, &ble)); // try to reconnect in Release mode
#else
  	connect(SDU_NAME, &ble); // only try to connect once in Debug mode
 8000e48:	4914      	ldr	r1, [pc, #80]	; (8000e9c <main+0x11c>)
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <main+0x124>)
 8000e4c:	f7ff ff72 	bl	8000d34 <connect>
#endif

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e50:	f004 fffa 	bl	8005e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <main+0xd4>
 8000e56:	bf00      	nop
 8000e58:	08009920 	.word	0x08009920
 8000e5c:	200002c0 	.word	0x200002c0
 8000e60:	08009930 	.word	0x08009930
 8000e64:	200002c4 	.word	0x200002c4
 8000e68:	08009890 	.word	0x08009890
 8000e6c:	080012a9 	.word	0x080012a9
 8000e70:	200002b0 	.word	0x200002b0
 8000e74:	080098b4 	.word	0x080098b4
 8000e78:	080012b9 	.word	0x080012b9
 8000e7c:	200002b4 	.word	0x200002b4
 8000e80:	080098d8 	.word	0x080098d8
 8000e84:	0800131d 	.word	0x0800131d
 8000e88:	200002b8 	.word	0x200002b8
 8000e8c:	080098fc 	.word	0x080098fc
 8000e90:	08001351 	.word	0x08001351
 8000e94:	200002bc 	.word	0x200002bc
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	2000022c 	.word	0x2000022c
 8000ea4:	08009874 	.word	0x08009874

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2244      	movs	r2, #68	; 0x44
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f008 fbdc 	bl	8009674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ece:	f002 fca1 	bl	8003814 <HAL_PWREx_ControlVoltageScaling>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ed8:	f000 faa0 	bl	800141c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2340      	movs	r3, #64	; 0x40
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000efa:	2307      	movs	r3, #7
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fcd8 	bl	80038c0 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f16:	f000 fa81 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2104      	movs	r1, #4
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 f8d8 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f3e:	f000 fa6d 	bl	800141c <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3758      	adds	r7, #88	; 0x58
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f64:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <MX_ADC1_Init+0xc8>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f6a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000f6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fcc:	f000 fef2 	bl	8001db4 <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f000 fa21 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC1_Init+0xcc>)
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fde:	2306      	movs	r3, #6
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe6:	237f      	movs	r3, #127	; 0x7f
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fea:	2304      	movs	r3, #4
 8000fec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000ff8:	f001 f8ca 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001002:	f000 fa0b 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000094 	.word	0x20000094
 8001014:	50040000 	.word	0x50040000
 8001018:	cb840000 	.word	0xcb840000

0800101c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_SPI1_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_SPI1_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_SPI1_Init+0x74>)
 8001028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI1_Init+0x74>)
 8001036:	f44f 7240 	mov.w	r2, #768	; 0x300
 800103a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x74>)
 800104a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_SPI1_Init+0x74>)
 800107c:	f003 fdb6 	bl	8004bec <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 f9c9 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000144 	.word	0x20000144
 8001094:	40013000 	.word	0x40013000

08001098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <MX_USART1_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART1_UART_Init+0x58>)
 80010dc:	f003 fe29 	bl	8004d32 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f000 f999 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001a8 	.word	0x200001a8
 80010f4:	40013800 	.word	0x40013800

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART2_UART_Init+0x58>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_USART2_UART_Init+0x5c>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001104:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800113c:	f003 fdf9 	bl	8004d32 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f969 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000022c 	.word	0x2000022c
 8001154:	40004400 	.word	0x40004400

08001158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_DMA_Init+0x38>)
 8001160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <MX_DMA_Init+0x38>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6493      	str	r3, [r2, #72]	; 0x48
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_DMA_Init+0x38>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	200b      	movs	r0, #11
 800117c:	f001 fee5 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001180:	200b      	movs	r0, #11
 8001182:	f001 fefe 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_GPIO_Init+0x108>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a3b      	ldr	r2, [pc, #236]	; (800129c <MX_GPIO_Init+0x108>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <MX_GPIO_Init+0x108>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_GPIO_Init+0x108>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a35      	ldr	r2, [pc, #212]	; (800129c <MX_GPIO_Init+0x108>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <MX_GPIO_Init+0x108>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_GPIO_Init+0x108>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a2f      	ldr	r2, [pc, #188]	; (800129c <MX_GPIO_Init+0x108>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_GPIO_Init+0x108>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_GPIO_Init+0x108>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a29      	ldr	r2, [pc, #164]	; (800129c <MX_GPIO_Init+0x108>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_GPIO_Init+0x108>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	21b0      	movs	r1, #176	; 0xb0
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f002 fad9 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <MX_GPIO_Init+0x10c>)
 800121e:	f002 fad3 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001228:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	; (80012a4 <MX_GPIO_Init+0x110>)
 800123a:	f002 f933 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800123e:	23b0      	movs	r3, #176	; 0xb0
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f002 f924 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f002 f917 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0x10c>)
 8001290:	f002 f908 	bl	80034a4 <HAL_GPIO_Init>

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800

080012a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f004 fe81 	bl	8005fb8 <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartDefaultTask+0x8>

080012b8 <StartRFIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFIDTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(RFID_READ_PERIOD_MS);
 80012c0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80012c4:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 80012c6:	f006 fcff 	bl	8007cc8 <xTaskGetTickCount>
 80012ca:	4603      	mov	r3, r0
 80012cc:	613b      	str	r3, [r7, #16]

	uint8_t team0RawScore = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	uint8_t team1RawScore = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73bb      	strb	r3, [r7, #14]

  /* Infinite loop */
	for(;;)
		// osDelay(RFID_READ_PERIOD_MS); // temp for commenting out the rest of the task
	{
		RFID_readArray();
 80012d6:	f000 f8d5 	bl	8001484 <RFID_readArray>

		calculateRawScore(&team0RawScore, false);
 80012da:	f107 030f 	add.w	r3, r7, #15
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f8a1 	bl	8001428 <calculateRawScore>
		calculateRawScore(&team1RawScore, true); // true to move BagStatus pointer to the Team 1 section
 80012e6:	f107 030e 	add.w	r3, r7, #14
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f89b 	bl	8001428 <calculateRawScore>

		tx_buf[0] = team0RawScore;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	733b      	strb	r3, [r7, #12]
		tx_buf[1] = team1RawScore;
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	737b      	strb	r3, [r7, #13]
		broadcast(tx_buf, (uint32_t) 2, &ble);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <StartRFIDTask+0x60>)
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd2e 	bl	8000d64 <broadcast>

		vTaskDelayUntil( &xLastWakeTime, period );
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	6979      	ldr	r1, [r7, #20]
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fb0c 	bl	800792c <vTaskDelayUntil>
		RFID_readArray();
 8001314:	e7df      	b.n	80012d6 <StartRFIDTask+0x1e>
 8001316:	bf00      	nop
 8001318:	200002c8 	.word	0x200002c8

0800131c <StartBluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBluetoothTask */

	uint8_t rx_buf[RX_BUF_SIZE];
	uint32_t size = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <StartBluetoothTask+0x2c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	4618      	mov	r0, r3
 8001332:	f004 ff6b 	bl	800620c <osSemaphoreAcquire>

	  readBLE(rx_buf, &size, &ble);
 8001336:	f107 010c 	add.w	r1, r7, #12
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4a03      	ldr	r2, [pc, #12]	; (800134c <StartBluetoothTask+0x30>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd03 	bl	8000d4c <readBLE>
	  osSemaphoreAcquire(BluetoothRXHandle, osWaitForever);
 8001346:	e7ef      	b.n	8001328 <StartBluetoothTask+0xc>
 8001348:	200002c4 	.word	0x200002c4
 800134c:	200002c8 	.word	0x200002c8

08001350 <StartBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8001358:	f247 5330 	movw	r3, #30000	; 0x7530
 800135c:	61fb      	str	r3, [r7, #28]

	xLastWakeTime = xTaskGetTickCount();
 800135e:	f006 fcb3 	bl	8007cc8 <xTaskGetTickCount>
 8001362:	4603      	mov	r3, r0
 8001364:	617b      	str	r3, [r7, #20]

	uint32_t rawVBat = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
	float VBat = 0.0;
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
	uint32_t VBat_conv = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001374:	217f      	movs	r1, #127	; 0x7f
 8001376:	4826      	ldr	r0, [pc, #152]	; (8001410 <StartBatteryTask+0xc0>)
 8001378:	f001 fcac 	bl	8002cd4 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawVBat, 1);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2201      	movs	r2, #1
 8001382:	4619      	mov	r1, r3
 8001384:	4822      	ldr	r0, [pc, #136]	; (8001410 <StartBatteryTask+0xc0>)
 8001386:	f000 fe61 	bl	800204c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {

	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f882 	bl	80004a8 <__aeabi_f2d>
 80013a4:	a318      	add	r3, pc, #96	; (adr r3, 8001408 <StartBatteryTask+0xb8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f8d5 	bl	8000558 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <StartBatteryTask+0xc4>)
 80013bc:	f7ff f9f6 	bl	80007ac <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fad8 	bl	800097c <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
	  VBat_conv = *((uint32_t*)&VBat);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
	  tx_buf[0] = VBat_conv & 0xFF000000;
 80013d8:	2300      	movs	r3, #0
 80013da:	723b      	strb	r3, [r7, #8]
	  tx_buf[1] = VBat_conv & 0x00FF0000;
 80013dc:	2300      	movs	r3, #0
 80013de:	727b      	strb	r3, [r7, #9]
	  tx_buf[2] = VBat_conv & 0x0000FF00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	72bb      	strb	r3, [r7, #10]
	  tx_buf[3] = VBat_conv & 0x000000FF;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	72fb      	strb	r3, [r7, #11]

	  broadcast(tx_buf, (uint32_t) 4, &ble);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <StartBatteryTask+0xc8>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fcb6 	bl	8000d64 <broadcast>

	  vTaskDelayUntil( &xLastWakeTime, period );
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	69f9      	ldr	r1, [r7, #28]
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fa94 	bl	800792c <vTaskDelayUntil>
	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8001404:	e7c1      	b.n	800138a <StartBatteryTask+0x3a>
 8001406:	bf00      	nop
 8001408:	66666666 	.word	0x66666666
 800140c:	400a6666 	.word	0x400a6666
 8001410:	20000094 	.word	0x20000094
 8001414:	40b00000 	.word	0x40b00000
 8001418:	200002c8 	.word	0x200002c8

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <calculateRawScore>:
BeanBag_interface BagInfo[8];

// global variable for tracking the status of each bag
uint8_t BagStatus[8] = {0,0,0,0,0,0,0,0};

void calculateRawScore(uint8_t* teamRawScore, bool isTeam1) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]

	uint8_t* bag_p = BagStatus;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <calculateRawScore+0x58>)
 8001436:	60fb      	str	r3, [r7, #12]

	if (isTeam1) bag_p +=4;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <calculateRawScore+0x1c>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	60fb      	str	r3, [r7, #12]

	*teamRawScore = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

	// Team 0 routine
	for (int i = 0; i < 4; ++i) {
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	e00c      	b.n	800146a <calculateRawScore+0x42>
		*teamRawScore += bag_p[i];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	440b      	add	r3, r1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b03      	cmp	r3, #3
 800146e:	ddef      	ble.n	8001450 <calculateRawScore+0x28>
	}

}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200002e4 	.word	0x200002e4

08001484 <RFID_readArray>:

// reads all RFID antenna regions and updates the global BagStatus array
void RFID_readArray(void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_MspInit+0x4c>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	; 0x60
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_MspInit+0x4c>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_MspInit+0x4c>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	f06f 0001 	mvn.w	r0, #1
 80014d2:	f001 fd3a 	bl	8002f4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09e      	sub	sp, #120	; 0x78
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	2268      	movs	r2, #104	; 0x68
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f008 f8bd 	bl	8009674 <memset>
  if(hadc->Instance==ADC1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <HAL_ADC_MspInit+0xd4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d155      	bne.n	80015b0 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001508:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800150a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800150e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800151c:	2307      	movs	r3, #7
 800151e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fffc 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800153e:	f7ff ff6d 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_ADC_MspInit+0xd8>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_ADC_MspInit+0xd8>)
 8001548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_ADC_MspInit+0xd8>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_ADC_MspInit+0xe0>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 800157a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 800158a:	2220      	movs	r2, #32
 800158c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 8001596:	f001 fd0f 	bl	8002fb8 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80015a0:	f7ff ff3c 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 80015a8:	651a      	str	r2, [r3, #80]	; 0x50
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_ADC_MspInit+0xdc>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3778      	adds	r7, #120	; 0x78
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	50040000 	.word	0x50040000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	200000fc 	.word	0x200000fc
 80015c4:	40020008 	.word	0x40020008

080015c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_SPI_MspInit+0x80>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d129      	bne.n	800163e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_SPI_MspInit+0x84>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_SPI_MspInit+0x84>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_SPI_MspInit+0x84>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_SPI_MspInit+0x84>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_SPI_MspInit+0x84>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_SPI_MspInit+0x84>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800161a:	f641 0302 	movw	r3, #6146	; 0x1802
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162c:	2305      	movs	r3, #5
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 ff33 	bl	80034a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40013000 	.word	0x40013000
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0a6      	sub	sp, #152	; 0x98
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2268      	movs	r2, #104	; 0x68
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f007 ffff 	bl	8009674 <memset>
  if(huart->Instance==USART1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_UART_MspInit+0x158>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d145      	bne.n	800170c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4618      	mov	r0, r3
 800168e:	f002 ff4f 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001698:	f7ff fec0 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169c:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_UART_MspInit+0x15c>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	4a42      	ldr	r2, [pc, #264]	; (80017ac <HAL_UART_MspInit+0x15c>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6613      	str	r3, [r2, #96]	; 0x60
 80016a8:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_UART_MspInit+0x15c>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_UART_MspInit+0x15c>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_UART_MspInit+0x15c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_UART_MspInit+0x15c>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e6:	2307      	movs	r3, #7
 80016e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f001 fed5 	bl	80034a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2105      	movs	r1, #5
 80016fe:	2025      	movs	r0, #37	; 0x25
 8001700:	f001 fc23 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001704:	2025      	movs	r0, #37	; 0x25
 8001706:	f001 fc3c 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170a:	e048      	b.n	800179e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_UART_MspInit+0x160>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d143      	bne.n	800179e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4618      	mov	r0, r3
 8001724:	f002 ff04 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800172e:	f7ff fe75 	bl	800141c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_UART_MspInit+0x15c>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_UART_MspInit+0x15c>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_UART_MspInit+0x15c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_UART_MspInit+0x15c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_UART_MspInit+0x15c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_UART_MspInit+0x15c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001762:	230c      	movs	r3, #12
 8001764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fe8b 	bl	80034a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	2026      	movs	r0, #38	; 0x26
 8001794:	f001 fbd9 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001798:	2026      	movs	r0, #38	; 0x26
 800179a:	f001 fbf2 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3798      	adds	r7, #152	; 0x98
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40004400 	.word	0x40004400

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f8c6 	bl	8001974 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017e8:	f006 fdae 	bl	8008348 <xTaskGetSchedulerState>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017f2:	f007 fc91 	bl	8009118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel1_IRQHandler+0x10>)
 8001802:	f001 fd70 	bl	80032e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000fc 	.word	0x200000fc

08001810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART1_IRQHandler+0x10>)
 8001816:	f003 fadb 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001a8 	.word	0x200001a8

08001824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <USART2_IRQHandler+0x18>)
 800182a:	f003 fad1 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  osSemaphoreRelease(BluetoothRXHandle);
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <USART2_IRQHandler+0x1c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fd3c 	bl	80062b0 <osSemaphoreRelease>
  /* USER CODE END USART2_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000022c 	.word	0x2000022c
 8001840:	200002c4 	.word	0x200002c4

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f007 feb9 	bl	800960c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7ff fa71 	bl	8000d80 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80018ac:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 80018b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018b4:	20001cc0 	.word	0x20001cc0

080018b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_IRQHandler>
	...

080018bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_Init+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_Init+0x3c>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d2:	2003      	movs	r0, #3
 80018d4:	f001 fb2e 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d8:	200f      	movs	r0, #15
 80018da:	f000 f80f 	bl	80018fc <HAL_InitTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	e001      	b.n	80018ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ea:	f7ff fdd3 	bl	8001494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_InitTick+0x70>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_InitTick+0x6c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fb39 	bl	8002f9e <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d809      	bhi.n	800194c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f001 fb03 	bl	8002f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_InitTick+0x74>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e007      	b.n	800195c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e004      	b.n	800195c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e001      	b.n	800195c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000004 	.word	0x20000004
 8001970:	20000008 	.word	0x20000008

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c
 8001998:	200002ec 	.word	0x200002ec

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200002ec 	.word	0x200002ec

080019b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_ADC_SetOffset+0x44>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	03fff000 	.word	0x03fff000

08001a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3360      	adds	r3, #96	; 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3360      	adds	r3, #96	; 0x60
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b087      	sub	sp, #28
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3330      	adds	r3, #48	; 0x30
 8001b22:	461a      	mov	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	211f      	movs	r1, #31
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 011f 	and.w	r1, r3, #31
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b087      	sub	sp, #28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3314      	adds	r3, #20
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	0e5b      	lsrs	r3, r3, #25
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2107      	movs	r1, #7
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0d1b      	lsrs	r3, r3, #20
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0318 	and.w	r3, r3, #24
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	400b      	ands	r3, r1
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	0007ffff 	.word	0x0007ffff

08001c08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6093      	str	r3, [r2, #8]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce0:	f043 0202 	orr.w	r2, r3, #2
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_IsEnabled+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_IsEnabled+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_IsDisableOngoing+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_IsDisableOngoing+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d54:	f043 0204 	orr.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e12f      	b.n	800202e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fb81 	bl	80014e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff19 	bl	8001c2c <LL_ADC_IsDeepPowerDownEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff feff 	bl	8001c08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff34 	bl	8001c7c <LL_ADC_IsInternalRegulatorEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff18 	bl	8001c54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <HAL_ADC_Init+0x284>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a84      	ldr	r2, [pc, #528]	; (800203c <HAL_ADC_Init+0x288>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff16 	bl	8001c7c <LL_ADC_IsInternalRegulatorEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff76 	bl	8001d68 <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 80c8 	bne.w	800201c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80c4 	bne.w	800201c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff23 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb4:	4862      	ldr	r0, [pc, #392]	; (8002040 <HAL_ADC_Init+0x28c>)
 8001eb6:	f7ff ff1d 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	485f      	ldr	r0, [pc, #380]	; (8002044 <HAL_ADC_Init+0x290>)
 8001ec8:	f7ff fd74 	bl	80019b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e5b      	ldrb	r3, [r3, #25]
 8001ed0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001edc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ee2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d106      	bne.n	8001f08 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	045b      	lsls	r3, r3, #17
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_ADC_Init+0x294>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff13 	bl	8001d68 <LL_ADC_REG_IsConversionOngoing>
 8001f42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff20 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8001f4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d140      	bne.n	8001fd8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13d      	bne.n	8001fd8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7e1b      	ldrb	r3, [r3, #24]
 8001f64:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f66:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f7e:	f023 0306 	bic.w	r3, r3, #6
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d118      	bne.n	8001fc8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fac:	4311      	orrs	r1, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	e007      	b.n	8001fd8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f023 010f 	bic.w	r1, r3, #15
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020f 	bic.w	r2, r2, #15
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
 800201a:	e007      	b.n	800202c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800202c:	7ffb      	ldrb	r3, [r7, #31]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000004 	.word	0x20000004
 800203c:	053e2d63 	.word	0x053e2d63
 8002040:	50040000 	.word	0x50040000
 8002044:	50040300 	.word	0x50040300
 8002048:	fff0c007 	.word	0xfff0c007

0800204c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe83 	bl	8001d68 <LL_ADC_REG_IsConversionOngoing>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d167      	bne.n	8002138 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start_DMA+0x2a>
 8002072:	2302      	movs	r3, #2
 8002074:	e063      	b.n	800213e <HAL_ADC_Start_DMA+0xf2>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fc82 	bl	8002988 <ADC_Enable>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d14f      	bne.n	800212e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	f023 0206 	bic.w	r2, r3, #6
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_ADC_Start_DMA+0xfc>)
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_ADC_Start_DMA+0x100>)
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d6:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_ADC_Start_DMA+0x104>)
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	221c      	movs	r2, #28
 80020e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3340      	adds	r3, #64	; 0x40
 8002114:	4619      	mov	r1, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f001 f805 	bl	8003128 <HAL_DMA_Start_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe0a 	bl	8001d40 <LL_ADC_REG_StartConversion>
 800212c:	e006      	b.n	800213c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002136:	e001      	b.n	800213c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002138:	2302      	movs	r3, #2
 800213a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800213c:	7dfb      	ldrb	r3, [r7, #23]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08002b53 	.word	0x08002b53
 800214c:	08002c2b 	.word	0x08002c2b
 8002150:	08002c47 	.word	0x08002c47

08002154 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b6      	sub	sp, #216	; 0xd8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e3d5      	b.n	800295e <HAL_ADC_ConfigChannel+0x7ce>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fdd2 	bl	8001d68 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 83ba 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d824      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	3b02      	subs	r3, #2
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d81b      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0x86>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_ADC_ConfigChannel+0x54>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002205 	.word	0x08002205
 80021f0:	0800220d 	.word	0x0800220d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	220c      	movs	r2, #12
 80021f8:	605a      	str	r2, [r3, #4]
          break;
 80021fa:	e011      	b.n	8002220 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2212      	movs	r2, #18
 8002200:	605a      	str	r2, [r3, #4]
          break;
 8002202:	e00d      	b.n	8002220 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2218      	movs	r2, #24
 8002208:	605a      	str	r2, [r3, #4]
          break;
 800220a:	e009      	b.n	8002220 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002212:	605a      	str	r2, [r3, #4]
          break;
 8002214:	e004      	b.n	8002220 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2206      	movs	r2, #6
 800221a:	605a      	str	r2, [r3, #4]
          break;
 800221c:	e000      	b.n	8002220 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800221e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	f7ff fc70 	bl	8001b12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fd96 	bl	8001d68 <LL_ADC_REG_IsConversionOngoing>
 800223c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fda2 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 800224a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 81c1 	bne.w	80025da <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 81bc 	bne.w	80025da <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800226a:	d10f      	bne.n	800228c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	f7ff fc77 	bl	8001b6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fc1e 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>
 800228a:	e00e      	b.n	80022aa <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff fc66 	bl	8001b6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc0e 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d00a      	beq.n	80022e2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6919      	ldr	r1, [r3, #16]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022dc:	f7ff fb9e 	bl	8001a1c <LL_ADC_SetOffset>
 80022e0:	e17b      	b.n	80025da <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fbbb 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <HAL_ADC_ConfigChannel+0x17e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fbb0 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	e01e      	b.n	800234c <HAL_ADC_ConfigChannel+0x1bc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fba5 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800232c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e004      	b.n	800234a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1d4>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	e018      	b.n	8002396 <HAL_ADC_ConfigChannel+0x206>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800237c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e004      	b.n	8002396 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800238c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002396:	429a      	cmp	r2, r3
 8002398:	d106      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fb74 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fb58 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x244>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fb4d 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	e01e      	b.n	8002412 <HAL_ADC_ConfigChannel+0x282>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb42 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e004      	b.n	8002410 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_ConfigChannel+0x29a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	e018      	b.n	800245c <HAL_ADC_ConfigChannel+0x2cc>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800243e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e004      	b.n	800245c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002452:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245c:	429a      	cmp	r2, r3
 800245e:	d106      	bne.n	800246e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2200      	movs	r2, #0
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb11 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff faf5 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_ADC_ConfigChannel+0x30a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff faea 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	e01e      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x348>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2102      	movs	r1, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fadf 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80024cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x360>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	e016      	b.n	800251e <HAL_ADC_ConfigChannel+0x38e>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fab0 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2103      	movs	r1, #3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fa94 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_ADC_ConfigChannel+0x3cc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2103      	movs	r1, #3
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fa89 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 021f 	and.w	r2, r3, #31
 800255a:	e017      	b.n	800258c <HAL_ADC_ConfigChannel+0x3fc>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2103      	movs	r1, #3
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa7e 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002576:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e003      	b.n	800258a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x414>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	e011      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x438>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d106      	bne.n	80025da <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2103      	movs	r1, #3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fa5b 	bl	8001a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb88 	bl	8001cf4 <LL_ADC_IsEnabled>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8140 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f7ff fae1 	bl	8001bc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4a8f      	ldr	r2, [pc, #572]	; (8002840 <HAL_ADC_ConfigChannel+0x6b0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	f040 8131 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10b      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x4a2>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	3301      	adds	r3, #1
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2b09      	cmp	r3, #9
 8002628:	bf94      	ite	ls
 800262a:	2301      	movls	r3, #1
 800262c:	2300      	movhi	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e019      	b.n	8002666 <HAL_ADC_ConfigChannel+0x4d6>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002642:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800264e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b09      	cmp	r3, #9
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002666:	2b00      	cmp	r3, #0
 8002668:	d079      	beq.n	800275e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x4f6>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	3301      	adds	r3, #1
 800267e:	069b      	lsls	r3, r3, #26
 8002680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002684:	e015      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x522>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e003      	b.n	80026aa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	069b      	lsls	r3, r3, #26
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x542>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	e017      	b.n	8002702 <HAL_ADC_ConfigChannel+0x572>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80026ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	ea42 0103 	orr.w	r1, r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x598>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	3301      	adds	r3, #1
 800271a:	f003 021f 	and.w	r2, r3, #31
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	051b      	lsls	r3, r3, #20
 8002726:	e018      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ca>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800273a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275a:	430b      	orrs	r3, r1
 800275c:	e081      	b.n	8002862 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_ADC_ConfigChannel+0x5ea>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	3301      	adds	r3, #1
 8002772:	069b      	lsls	r3, r3, #26
 8002774:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002778:	e015      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x616>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e003      	b.n	800279e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	069b      	lsls	r3, r3, #26
 80027a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x636>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	e017      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x666>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	61fb      	str	r3, [r7, #28]
  return result;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	ea42 0103 	orr.w	r1, r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x692>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	3301      	adds	r3, #1
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	3b1e      	subs	r3, #30
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x6d0>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	613b      	str	r3, [r7, #16]
  return result;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d104      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e006      	b.n	800284c <HAL_ADC_ConfigChannel+0x6bc>
 800283e:	bf00      	nop
 8002840:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	051b      	lsls	r3, r3, #20
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	430b      	orrs	r3, r1
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	4619      	mov	r1, r3
 8002868:	f7ff f97f 	bl	8001b6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_ADC_ConfigChannel+0x7d8>)
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d06c      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002878:	483c      	ldr	r0, [pc, #240]	; (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800287a:	f7ff f8c1 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 800287e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <HAL_ADC_ConfigChannel+0x7e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d127      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800288c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a35      	ldr	r2, [pc, #212]	; (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d157      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028aa:	4619      	mov	r1, r3
 80028ac:	482f      	ldr	r0, [pc, #188]	; (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 80028ae:	f7ff f894 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_ADC_ConfigChannel+0x7e8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_ADC_ConfigChannel+0x7ec>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028da:	e03a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_ADC_ConfigChannel+0x7f0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d113      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
 80028e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002904:	4619      	mov	r1, r3
 8002906:	4819      	ldr	r0, [pc, #100]	; (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 8002908:	f7ff f867 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290c:	e021      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <HAL_ADC_ConfigChannel+0x7f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11c      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800293a:	f7ff f84e 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
 800293e:	e008      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800295e:	4618      	mov	r0, r3
 8002960:	37d8      	adds	r7, #216	; 0xd8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	80080000 	.word	0x80080000
 800296c:	50040300 	.word	0x50040300
 8002970:	c7520000 	.word	0xc7520000
 8002974:	50040000 	.word	0x50040000
 8002978:	20000004 	.word	0x20000004
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	cb840000 	.word	0xcb840000
 8002984:	80000001 	.word	0x80000001

08002988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f9ab 	bl	8001cf4 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d169      	bne.n	8002a78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <ADC_Enable+0xfc>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e055      	b.n	8002a7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f966 	bl	8001ca4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029d8:	482b      	ldr	r0, [pc, #172]	; (8002a88 <ADC_Enable+0x100>)
 80029da:	f7ff f811 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 80029de:	4603      	mov	r3, r0
 80029e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <ADC_Enable+0x104>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <ADC_Enable+0x108>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a02:	e002      	b.n	8002a0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a10:	f7fe ffc4 	bl	800199c <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a16:	e028      	b.n	8002a6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f969 	bl	8001cf4 <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f939 	bl	8001ca4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a32:	f7fe ffb3 	bl	800199c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d914      	bls.n	8002a6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d00d      	beq.n	8002a6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d1cf      	bne.n	8002a18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	8000003f 	.word	0x8000003f
 8002a88:	50040300 	.word	0x50040300
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	053e2d63 	.word	0x053e2d63

08002a94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f93a 	bl	8001d1a <LL_ADC_IsDisableOngoing>
 8002aa6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f921 	bl	8001cf4 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d047      	beq.n	8002b48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d144      	bne.n	8002b48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030d 	and.w	r3, r3, #13
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10c      	bne.n	8002ae6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f8fb 	bl	8001ccc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2203      	movs	r2, #3
 8002adc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ade:	f7fe ff5d 	bl	800199c <HAL_GetTick>
 8002ae2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae4:	e029      	b.n	8002b3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e023      	b.n	8002b4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b02:	f7fe ff4b 	bl	800199c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d914      	bls.n	8002b3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e007      	b.n	8002b4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1dc      	bne.n	8002b02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d14b      	bne.n	8002c04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d021      	beq.n	8002bca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ffae 	bl	8001aec <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d032      	beq.n	8002bfc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11f      	bne.n	8002bfc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc8:	e018      	b.n	8002bfc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff faa9 	bl	8002154 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c02:	e00e      	b.n	8002c22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fab3 	bl	800217c <HAL_ADC_ErrorCallback>
}
 8002c16:	e004      	b.n	8002c22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fa95 	bl	8002168 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff fa85 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <LL_ADC_StartCalibration>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_IsCalibrationOnGoing>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e04d      	b.n	8002d8c <HAL_ADCEx_Calibration_Start+0xb8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fecb 	bl	8002a94 <ADC_Disable>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d136      	bne.n	8002d76 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d10:	f023 0302 	bic.w	r3, r3, #2
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ffa9 	bl	8002c7a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d28:	e014      	b.n	8002d54 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002d36:	d30d      	bcc.n	8002d54 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f023 0312 	bic.w	r3, r3, #18
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e01b      	b.n	8002d8c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ffa7 	bl	8002cac <LL_ADC_IsCalibrationOnGoing>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e2      	bne.n	8002d2a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f023 0303 	bic.w	r3, r3, #3
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	659a      	str	r2, [r3, #88]	; 0x58
 8002d74:	e005      	b.n	8002d82 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	; (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	; (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e098      	b.n	80030fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_DMA_Init+0x150>)
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d80f      	bhi.n	8002ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_DMA_Init+0x154>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	; (8003110 <HAL_DMA_Init+0x158>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_DMA_Init+0x15c>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff4:	e00e      	b.n	8003014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_DMA_Init+0x160>)
 8002ffe:	4413      	add	r3, r2
 8003000:	4a43      	ldr	r2, [pc, #268]	; (8003110 <HAL_DMA_Init+0x158>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_DMA_Init+0x164>)
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306e:	d039      	beq.n	80030e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_DMA_Init+0x15c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11a      	bne.n	80030b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_DMA_Init+0x168>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f003 031c 	and.w	r3, r3, #28
 8003086:	210f      	movs	r1, #15
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4924      	ldr	r1, [pc, #144]	; (8003120 <HAL_DMA_Init+0x168>)
 8003090:	4013      	ands	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_DMA_Init+0x168>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f003 031c 	and.w	r3, r3, #28
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	491d      	ldr	r1, [pc, #116]	; (8003120 <HAL_DMA_Init+0x168>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e019      	b.n	80030e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 031c 	and.w	r3, r3, #28
 80030bc:	210f      	movs	r1, #15
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4917      	ldr	r1, [pc, #92]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f003 031c 	and.w	r3, r3, #28
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	4911      	ldr	r1, [pc, #68]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020407 	.word	0x40020407
 800310c:	bffdfff8 	.word	0xbffdfff8
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	40020000 	.word	0x40020000
 8003118:	bffdfbf8 	.word	0xbffdfbf8
 800311c:	40020400 	.word	0x40020400
 8003120:	400200a8 	.word	0x400200a8
 8003124:	400204a8 	.word	0x400204a8

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Start_IT+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e04b      	b.n	80031e0 <HAL_DMA_Start_IT+0xb8>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d13a      	bne.n	80031d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f95f 	bl	8003444 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 020e 	orr.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e00f      	b.n	80031c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 020a 	orr.w	r2, r2, #10
 80031be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e022      	b.n	8003258 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 020e 	bic.w	r2, r2, #14
 8003220:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 021c 	and.w	r2, r3, #28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d005      	beq.n	8003288 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	e029      	b.n	80032dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f003 021c 	and.w	r2, r3, #28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    }
  }
  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 031c 	and.w	r3, r3, #28
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d026      	beq.n	8003360 <HAL_DMA_IRQHandler+0x7a>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d021      	beq.n	8003360 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f003 021c 	and.w	r2, r3, #28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2104      	movs	r1, #4
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	2b00      	cmp	r3, #0
 8003354:	d071      	beq.n	800343a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800335e:	e06c      	b.n	800343a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 031c 	and.w	r3, r3, #28
 8003368:	2202      	movs	r2, #2
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02e      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xec>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d029      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020a 	bic.w	r2, r2, #10
 800339a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f003 021c 	and.w	r2, r3, #28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2102      	movs	r1, #2
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d038      	beq.n	800343a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033d0:	e033      	b.n	800343a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f003 031c 	and.w	r3, r3, #28
 80033da:	2208      	movs	r2, #8
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02a      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d025      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020e 	bic.w	r2, r2, #14
 80033fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f003 021c 	and.w	r2, r3, #28
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f202 	lsl.w	r2, r1, r2
 8003412:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343a:	bf00      	nop
 800343c:	bf00      	nop
}
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f003 021c 	and.w	r2, r3, #28
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b10      	cmp	r3, #16
 8003474:	d108      	bne.n	8003488 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003486:	e007      	b.n	8003498 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b2:	e154      	b.n	800375e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8146 	beq.w	8003758 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d005      	beq.n	80034e4 <HAL_GPIO_Init+0x40>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d130      	bne.n	8003546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800351a:	2201      	movs	r2, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 0201 	and.w	r2, r3, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b03      	cmp	r3, #3
 8003550:	d017      	beq.n	8003582 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d123      	bne.n	80035d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3208      	adds	r2, #8
 8003596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3208      	adds	r2, #8
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a0 	beq.w	8003758 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_GPIO_Init+0x2d8>)
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_GPIO_Init+0x2d8>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6613      	str	r3, [r2, #96]	; 0x60
 8003624:	4b55      	ldr	r3, [pc, #340]	; (800377c <HAL_GPIO_Init+0x2d8>)
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003630:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_GPIO_Init+0x2dc>)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800365a:	d019      	beq.n	8003690 <HAL_GPIO_Init+0x1ec>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_GPIO_Init+0x2e0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_GPIO_Init+0x1e8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a48      	ldr	r2, [pc, #288]	; (8003788 <HAL_GPIO_Init+0x2e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00d      	beq.n	8003688 <HAL_GPIO_Init+0x1e4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a47      	ldr	r2, [pc, #284]	; (800378c <HAL_GPIO_Init+0x2e8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0x1e0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a46      	ldr	r2, [pc, #280]	; (8003790 <HAL_GPIO_Init+0x2ec>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_Init+0x1dc>
 800367c:	2304      	movs	r3, #4
 800367e:	e008      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003680:	2307      	movs	r3, #7
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003684:	2303      	movs	r3, #3
 8003686:	e004      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003688:	2302      	movs	r3, #2
 800368a:	e002      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_GPIO_Init+0x1ee>
 8003690:	2300      	movs	r3, #0
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036a2:	4937      	ldr	r1, [pc, #220]	; (8003780 <HAL_GPIO_Init+0x2dc>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b0:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d4:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fe:	4a25      	ldr	r2, [pc, #148]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_GPIO_Init+0x2f0>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f aea3 	bne.w	80034b4 <HAL_GPIO_Init+0x10>
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40010000 	.word	0x40010000
 8003784:	48000400 	.word	0x48000400
 8003788:	48000800 	.word	0x48000800
 800378c:	48000c00 	.word	0x48000c00
 8003790:	48001000 	.word	0x48001000
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e001      	b.n	80037ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
 80037d4:	4613      	mov	r3, r2
 80037d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d8:	787b      	ldrb	r3, [r7, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_PWREx_GetVoltageRange+0x18>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40007000 	.word	0x40007000

08003814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d130      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d038      	beq.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2232      	movs	r2, #50	; 0x32
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	e002      	b.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b01      	subs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d102      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f2      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d110      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d007      	beq.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800389c:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40007000 	.word	0x40007000
 80038b8:	20000004 	.word	0x20000004
 80038bc:	431bde83 	.word	0x431bde83

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f000 bc02 	b.w	80040d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d4:	4b96      	ldr	r3, [pc, #600]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038de:	4b94      	ldr	r3, [pc, #592]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80e4 	beq.w	8003abe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_RCC_OscConfig+0x4c>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	f040 808b 	bne.w	8003a1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b01      	cmp	r3, #1
 8003908:	f040 8087 	bne.w	8003a1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390c:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x64>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e3d9      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	4b81      	ldr	r3, [pc, #516]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_RCC_OscConfig+0x7e>
 8003934:	4b7e      	ldr	r3, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393c:	e005      	b.n	800394a <HAL_RCC_OscConfig+0x8a>
 800393e:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394a:	4293      	cmp	r3, r2
 800394c:	d223      	bcs.n	8003996 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fd8c 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e3ba      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	496d      	ldr	r1, [pc, #436]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003980:	4b6b      	ldr	r3, [pc, #428]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	4968      	ldr	r1, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e025      	b.n	80039e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003996:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4960      	ldr	r1, [pc, #384]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b4:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	495b      	ldr	r1, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fd4c 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e37a      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e2:	f000 fc81 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4950      	ldr	r1, [pc, #320]	; (8003b34 <HAL_RCC_OscConfig+0x274>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a4e      	ldr	r2, [pc, #312]	; (8003b38 <HAL_RCC_OscConfig+0x278>)
 8003a00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd ff78 	bl	80018fc <HAL_InitTick>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d052      	beq.n	8003abc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	e35e      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d032      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a2e:	f7fd ffb5 	bl	800199c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a36:	f7fd ffb1 	bl	800199c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e347      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a48:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	f043 0308 	orr.w	r3, r3, #8
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4930      	ldr	r1, [pc, #192]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	492b      	ldr	r1, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
 8003a86:	e01a      	b.n	8003abe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a88:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a94:	f7fd ff82 	bl	800199c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9c:	f7fd ff7e 	bl	800199c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e314      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1dc>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d073      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_OscConfig+0x21c>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d10e      	bne.n	8003af4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d063      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d15f      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e2f1      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x24c>
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e025      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d114      	bne.n	8003b40 <HAL_RCC_OscConfig+0x280>
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a02      	ldr	r2, [pc, #8]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e013      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08009940 	.word	0x08009940
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	20000008 	.word	0x20000008
 8003b40:	4ba0      	ldr	r3, [pc, #640]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a9f      	ldr	r2, [pc, #636]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b9d      	ldr	r3, [pc, #628]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a9c      	ldr	r2, [pc, #624]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd ff1c 	bl	800199c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd ff18 	bl	800199c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e2ae      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7a:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x2a8>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd ff08 	bl	800199c <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd ff04 	bl	800199c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e29a      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d0>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d060      	beq.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x310>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d119      	bne.n	8003bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d116      	bne.n	8003bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	4b7c      	ldr	r3, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x328>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e277      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bfc:	e040      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fec3 	bl	800199c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fd febf 	bl	800199c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e255      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	495f      	ldr	r1, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e018      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a5c      	ldr	r2, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fe9f 	bl	800199c <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fd fe9b 	bl	800199c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e231      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	4a4a      	ldr	r2, [pc, #296]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fe7a 	bl	800199c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fd fe76 	bl	800199c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e20c      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCC_OscConfig+0x3ec>
 8003ccc:	e01b      	b.n	8003d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd fe5d 	bl	800199c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fe59 	bl	800199c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1ef      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ef      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80a6 	beq.w	8003e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d118      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d58:	f7fd fe20 	bl	800199c <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d60:	f7fd fe1c 	bl	800199c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e1b2      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4d8>
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d96:	e029      	b.n	8003dec <HAL_RCC_OscConfig+0x52c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCC_OscConfig+0x50c>
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc0:	e014      	b.n	8003dec <HAL_RCC_OscConfig+0x52c>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	4b9a      	ldr	r3, [pc, #616]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	4a99      	ldr	r2, [pc, #612]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ddc:	4b96      	ldr	r3, [pc, #600]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	4a95      	ldr	r2, [pc, #596]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d016      	beq.n	8003e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd fdd2 	bl	800199c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fd fdce 	bl	800199c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e162      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ed      	beq.n	8003dfc <HAL_RCC_OscConfig+0x53c>
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd fdbb 	bl	800199c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd fdb7 	bl	800199c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e14b      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ed      	bne.n	8003e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b78      	ldr	r3, [pc, #480]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	4a77      	ldr	r2, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03c      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01c      	beq.n	8003eae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e74:	4b70      	ldr	r3, [pc, #448]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7a:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fd fd8a 	bl	800199c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8c:	f7fd fd86 	bl	800199c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e11c      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e9e:	4b66      	ldr	r3, [pc, #408]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ef      	beq.n	8003e8c <HAL_RCC_OscConfig+0x5cc>
 8003eac:	e01b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb4:	4a60      	ldr	r2, [pc, #384]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fd6d 	bl	800199c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec6:	f7fd fd69 	bl	800199c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0ff      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ed8:	4b57      	ldr	r3, [pc, #348]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ef      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80f3 	beq.w	80040d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f040 80c9 	bne.w	800408c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003efa:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d12c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d123      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d11b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d113      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d109      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d06b      	beq.n	8004040 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d062      	beq.n	8004034 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f6e:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0ac      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f8a:	f7fd fd07 	bl	800199c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd fd03 	bl	800199c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e099      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_RCC_OscConfig+0x77c>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0552      	lsls	r2, r2, #21
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fea:	06d2      	lsls	r2, r2, #27
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4912      	ldr	r1, [pc, #72]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fd fcc6 	bl	800199c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fcc2 	bl	800199c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e058      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <HAL_RCC_OscConfig+0x778>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	e050      	b.n	80040d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e04f      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
 8004038:	40021000 	.word	0x40021000
 800403c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d144      	bne.n	80040d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004064:	f7fd fc9a 	bl	800199c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fc96 	bl	800199c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e02c      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x7ac>
 800408a:	e024      	b.n	80040d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d01f      	beq.n	80040d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 8004098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd fc7d 	bl	800199c <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fd fc79 	bl	800199c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4905      	ldr	r1, [pc, #20]	; (80040e0 <HAL_RCC_OscConfig+0x820>)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_OscConfig+0x824>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e001      	b.n	80040d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	feeefffc 	.word	0xfeeefffc

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0e7      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b72      	ldr	r3, [pc, #456]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4970      	ldr	r1, [pc, #448]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b6e      	ldr	r3, [pc, #440]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cf      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4960      	ldr	r1, [pc, #384]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04c      	beq.n	8004200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d121      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0a6      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d115      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e09a      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800419e:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e08e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e086      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4943      	ldr	r1, [pc, #268]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fd fbe4 	bl	800199c <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fd fbe0 	bl	800199c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e06e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004218:	429a      	cmp	r2, r3
 800421a:	d208      	bcs.n	800422e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	492b      	ldr	r1, [pc, #172]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d210      	bcs.n	800425e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0207 	bic.w	r2, r3, #7
 8004244:	4923      	ldr	r1, [pc, #140]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e036      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4918      	ldr	r1, [pc, #96]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4910      	ldr	r1, [pc, #64]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429c:	f000 f824 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	490b      	ldr	r1, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80042ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1fc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fb1b 	bl	80018fc <HAL_InitTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	08009940 	.word	0x08009940
 80042e0:	20000004 	.word	0x20000004
 80042e4:	20000008 	.word	0x20000008

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d121      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d11e      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004328:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d102      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d101      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 800436e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d134      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xa6>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d003      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
 800438c:	e005      	b.n	800439a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004390:	617b      	str	r3, [r7, #20]
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004396:	617b      	str	r3, [r7, #20]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	3301      	adds	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	fb03 f202 	mul.w	r2, r3, r2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	0e5b      	lsrs	r3, r3, #25
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	3301      	adds	r3, #1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e0:	69bb      	ldr	r3, [r7, #24]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	; 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08009958 	.word	0x08009958
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4904      	ldr	r1, [pc, #16]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	08009950 	.word	0x08009950

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004448:	f7ff ffda 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4904      	ldr	r1, [pc, #16]	; (800446c <HAL_RCC_GetPCLK2Freq+0x28>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	08009950 	.word	0x08009950

08004470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f9b6 	bl	80037f8 <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	e014      	b.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4a24      	ldr	r2, [pc, #144]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	; 0x58
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f9a6 	bl	80037f8 <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d10b      	bne.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d919      	bls.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2ba0      	cmp	r3, #160	; 0xa0
 80044cc:	d902      	bls.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e013      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e010      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	; 0x80
 80044de:	d902      	bls.n	80044e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e0:	2303      	movs	r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e00a      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d102      	bne.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ec:	2302      	movs	r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e004      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d101      	bne.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0207 	bic.w	r2, r3, #7
 8004504:	4909      	ldr	r1, [pc, #36]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	40022000 	.word	0x40022000

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004548:	2b00      	cmp	r3, #0
 800454a:	d031      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004554:	d01a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004556:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800455a:	d814      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004564:	d10f      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004566:	4b5d      	ldr	r3, [pc, #372]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a5c      	ldr	r2, [pc, #368]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004572:	e00c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa44 	bl	8004a08 <RCCEx_PLLSAI1_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	74fb      	strb	r3, [r7, #19]
      break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004594:	4b51      	ldr	r3, [pc, #324]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	494e      	ldr	r1, [pc, #312]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 809e 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c2:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b40      	ldr	r3, [pc, #256]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	4a3f      	ldr	r2, [pc, #252]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6593      	str	r3, [r2, #88]	; 0x58
 80045e4:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004600:	f7fd f9cc 	bl	800199c <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004608:	f7fd f9c8 	bl	800199c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	74fb      	strb	r3, [r7, #19]
        break;
 800461a:	e005      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ef      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d15a      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d019      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004676:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd f988 	bl	800199c <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	e00b      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd f984 	bl	800199c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d902      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	74fb      	strb	r3, [r7, #19]
            break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ec      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ca:	4904      	ldr	r1, [pc, #16]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046d2:	e009      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e8:	7c7b      	ldrb	r3, [r7, #17]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	4a9d      	ldr	r2, [pc, #628]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004706:	4b98      	ldr	r3, [pc, #608]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	4994      	ldr	r1, [pc, #592]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f023 020c 	bic.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	498c      	ldr	r1, [pc, #560]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474a:	4b87      	ldr	r3, [pc, #540]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	4983      	ldr	r1, [pc, #524]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800476c:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	497b      	ldr	r1, [pc, #492]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800478e:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4972      	ldr	r1, [pc, #456]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b0:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	496a      	ldr	r1, [pc, #424]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	4961      	ldr	r1, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f4:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	4959      	ldr	r1, [pc, #356]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004816:	4b54      	ldr	r3, [pc, #336]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	4950      	ldr	r1, [pc, #320]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	4948      	ldr	r1, [pc, #288]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485a:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800485c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	493f      	ldr	r1, [pc, #252]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d028      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	4937      	ldr	r1, [pc, #220]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800489a:	d106      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489c:	4b32      	ldr	r3, [pc, #200]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a31      	ldr	r2, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a6:	60d3      	str	r3, [r2, #12]
 80048a8:	e011      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b2:	d10c      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f8a4 	bl	8004a08 <RCCEx_PLLSAI1_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80048ca:	7cfb      	ldrb	r3, [r7, #19]
 80048cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d028      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	491f      	ldr	r1, [pc, #124]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f8:	d106      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004904:	60d3      	str	r3, [r2, #12]
 8004906:	e011      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004910:	d10c      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f875 	bl	8004a08 <RCCEx_PLLSAI1_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004922:	7cfb      	ldrb	r3, [r7, #19]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004956:	d109      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a02      	ldr	r2, [pc, #8]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
 8004964:	e014      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f843 	bl	8004a08 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049aa:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f820 	bl	8004a08 <RCCEx_PLLSAI1_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	4904      	ldr	r1, [pc, #16]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000

08004a08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a16:	4b74      	ldr	r3, [pc, #464]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a22:	4b71      	ldr	r3, [pc, #452]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0203 	and.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10d      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
       ||
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a3a:	4b6b      	ldr	r3, [pc, #428]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
       ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d047      	beq.n	8004ade <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e044      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d018      	beq.n	8004a8e <RCCEx_PLLSAI1_Config+0x86>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d825      	bhi.n	8004aac <RCCEx_PLLSAI1_Config+0xa4>
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d002      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x62>
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d009      	beq.n	8004a7c <RCCEx_PLLSAI1_Config+0x74>
 8004a68:	e020      	b.n	8004aac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11d      	bne.n	8004ab2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7a:	e01a      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a7c:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d116      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8c:	e013      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aaa:	e006      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	e004      	b.n	8004abc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ac2:	4b49      	ldr	r3, [pc, #292]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	4943      	ldr	r1, [pc, #268]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d17c      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fc ff54 	bl	800199c <HAL_GetTick>
 8004af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af6:	e009      	b.n	8004b0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af8:	f7fc ff50 	bl	800199c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d902      	bls.n	8004b0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	73fb      	strb	r3, [r7, #15]
        break;
 8004b0a:	e005      	b.n	8004b18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b0c:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ef      	bne.n	8004af8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d15f      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d110      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b24:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6892      	ldr	r2, [r2, #8]
 8004b34:	0211      	lsls	r1, r2, #8
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	06d2      	lsls	r2, r2, #27
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	492a      	ldr	r1, [pc, #168]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	610b      	str	r3, [r1, #16]
 8004b44:	e027      	b.n	8004b96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d112      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b4c:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	0211      	lsls	r1, r2, #8
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6912      	ldr	r2, [r2, #16]
 8004b62:	0852      	lsrs	r2, r2, #1
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0552      	lsls	r2, r2, #21
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	491f      	ldr	r1, [pc, #124]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	610b      	str	r3, [r1, #16]
 8004b70:	e011      	b.n	8004b96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	0211      	lsls	r1, r2, #8
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6952      	ldr	r2, [r2, #20]
 8004b88:	0852      	lsrs	r2, r2, #1
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	0652      	lsls	r2, r2, #25
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	4915      	ldr	r1, [pc, #84]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a13      	ldr	r2, [pc, #76]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ba0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fc fefb 	bl	800199c <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba8:	e009      	b.n	8004bbe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004baa:	f7fc fef7 	bl	800199c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d902      	bls.n	8004bbe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	73fb      	strb	r3, [r7, #15]
          break;
 8004bbc:	e005      	b.n	8004bca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ef      	beq.n	8004baa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000

08004bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e095      	b.n	8004d2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d009      	beq.n	8004c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
 8004c16:	e005      	b.n	8004c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc fcc2 	bl	80015c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c64:	d902      	bls.n	8004c6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c7a:	d007      	beq.n	8004c8c <HAL_SPI_Init+0xa0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	ea42 0103 	orr.w	r1, r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	f003 0204 	and.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d08:	ea42 0103 	orr.w	r1, r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e040      	b.n	8004dc6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc fc7b 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	; 0x24
 8004d5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb2f 	bl	80053d4 <UART_SetConfig>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e022      	b.n	8004dc6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fda9 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fe30 	bl	8005a24 <UART_CheckIdleState>
 8004dc4:	4603      	mov	r3, r0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b0ba      	sub	sp, #232	; 0xe8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dfe:	4013      	ands	r3, r2
 8004e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 82a6 	beq.w	800537a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
      }
      return;
 8004e36:	e2a0      	b.n	800537a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8117 	beq.w	8005070 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e52:	4b85      	ldr	r3, [pc, #532]	; (8005068 <HAL_UART_IRQHandler+0x298>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 810a 	beq.w	8005070 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d011      	beq.n	8004e8c <HAL_UART_IRQHandler+0xbc>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <HAL_UART_IRQHandler+0xec>
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d011      	beq.n	8004eec <HAL_UART_IRQHandler+0x11c>
 8004ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee2:	f043 0202 	orr.w	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_UART_IRQHandler+0x18a>
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 820c 	beq.w	800537e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04f      	beq.n	8005052 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fe43 	bl	8005c3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d141      	bne.n	800504a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800500a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d9      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	2b00      	cmp	r3, #0
 8005018:	d013      	beq.n	8005042 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_UART_IRQHandler+0x29c>)
 8005020:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe f91c 	bl	8003264 <HAL_DMA_Abort_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00f      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9b0 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e00b      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9ac 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e007      	b.n	8005062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9a8 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005060:	e18d      	b.n	800537e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005062:	bf00      	nop
    return;
 8005064:	e18b      	b.n	800537e <HAL_UART_IRQHandler+0x5ae>
 8005066:	bf00      	nop
 8005068:	04000120 	.word	0x04000120
 800506c:	08005d05 	.word	0x08005d05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	2b01      	cmp	r3, #1
 8005076:	f040 8146 	bne.w	8005306 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 813f 	beq.w	8005306 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8138 	beq.w	8005306 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2210      	movs	r2, #16
 800509c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	f040 80b4 	bne.w	8005216 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 815f 	beq.w	8005382 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ce:	429a      	cmp	r2, r3
 80050d0:	f080 8157 	bcs.w	8005382 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 8085 	bne.w	80051fa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800511a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800511e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1da      	bne.n	80050f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800514a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800515e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e1      	bne.n	800513a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800519a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800519c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e3      	bne.n	8005176 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ca:	f023 0310 	bic.w	r3, r3, #16
 80051ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e4      	bne.n	80051ba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd fff7 	bl	80031e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005206:	b29b      	uxth	r3, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	b29b      	uxth	r3, r3
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8d4 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005214:	e0b5      	b.n	8005382 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005222:	b29b      	uxth	r3, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a7 	beq.w	8005386 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80a2 	beq.w	8005386 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
 8005266:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800526a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e4      	bne.n	8005242 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	623b      	str	r3, [r7, #32]
   return(result);
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800529c:	633a      	str	r2, [r7, #48]	; 0x30
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e3      	bne.n	8005278 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	617b      	str	r3, [r7, #20]
   return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e4      	bne.n	80052c2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f85c 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005304:	e03f      	b.n	8005386 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <HAL_UART_IRQHandler+0x560>
 8005312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fd2b 	bl	8005d84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800532e:	e02d      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01c      	beq.n	800538a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
    }
    return;
 8005358:	e017      	b.n	800538a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d012      	beq.n	800538c <HAL_UART_IRQHandler+0x5bc>
 8005366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fcdc 	bl	8005d30 <UART_EndTransmit_IT>
    return;
 8005378:	e008      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
      return;
 800537a:	bf00      	nop
 800537c:	e006      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
    return;
 800537e:	bf00      	nop
 8005380:	e004      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <HAL_UART_IRQHandler+0x5bc>
    return;
 800538a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800538c:	37e8      	adds	r7, #232	; 0xe8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d8:	b08a      	sub	sp, #40	; 0x28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4ba5      	ldr	r3, [pc, #660]	; (8005698 <UART_SetConfig+0x2c4>)
 8005404:	4013      	ands	r3, r2
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800540c:	430b      	orrs	r3, r1
 800540e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a9a      	ldr	r2, [pc, #616]	; (800569c <UART_SetConfig+0x2c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543c:	4313      	orrs	r3, r2
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a91      	ldr	r2, [pc, #580]	; (80056a0 <UART_SetConfig+0x2cc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d126      	bne.n	80054ac <UART_SetConfig+0xd8>
 800545e:	4b91      	ldr	r3, [pc, #580]	; (80056a4 <UART_SetConfig+0x2d0>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b03      	cmp	r3, #3
 800546a:	d81b      	bhi.n	80054a4 <UART_SetConfig+0xd0>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0xa0>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005485 	.word	0x08005485
 8005478:	08005495 	.word	0x08005495
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800549d 	.word	0x0800549d
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e0d6      	b.n	800563a <UART_SetConfig+0x266>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e0d2      	b.n	800563a <UART_SetConfig+0x266>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e0ce      	b.n	800563a <UART_SetConfig+0x266>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e0ca      	b.n	800563a <UART_SetConfig+0x266>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e0c6      	b.n	800563a <UART_SetConfig+0x266>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7d      	ldr	r2, [pc, #500]	; (80056a8 <UART_SetConfig+0x2d4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d138      	bne.n	8005528 <UART_SetConfig+0x154>
 80054b6:	4b7b      	ldr	r3, [pc, #492]	; (80056a4 <UART_SetConfig+0x2d0>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d82d      	bhi.n	8005520 <UART_SetConfig+0x14c>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0xf8>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	08005501 	.word	0x08005501
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005521 	.word	0x08005521
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005511 	.word	0x08005511
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005521 	.word	0x08005521
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005521 	.word	0x08005521
 80054f4:	08005521 	.word	0x08005521
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005519 	.word	0x08005519
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e098      	b.n	800563a <UART_SetConfig+0x266>
 8005508:	2302      	movs	r3, #2
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e094      	b.n	800563a <UART_SetConfig+0x266>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e090      	b.n	800563a <UART_SetConfig+0x266>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e08c      	b.n	800563a <UART_SetConfig+0x266>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e088      	b.n	800563a <UART_SetConfig+0x266>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5f      	ldr	r2, [pc, #380]	; (80056ac <UART_SetConfig+0x2d8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d125      	bne.n	800557e <UART_SetConfig+0x1aa>
 8005532:	4b5c      	ldr	r3, [pc, #368]	; (80056a4 <UART_SetConfig+0x2d0>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d016      	beq.n	800556e <UART_SetConfig+0x19a>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d818      	bhi.n	8005576 <UART_SetConfig+0x1a2>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d00a      	beq.n	800555e <UART_SetConfig+0x18a>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d814      	bhi.n	8005576 <UART_SetConfig+0x1a2>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <UART_SetConfig+0x182>
 8005550:	2b10      	cmp	r3, #16
 8005552:	d008      	beq.n	8005566 <UART_SetConfig+0x192>
 8005554:	e00f      	b.n	8005576 <UART_SetConfig+0x1a2>
 8005556:	2300      	movs	r3, #0
 8005558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555c:	e06d      	b.n	800563a <UART_SetConfig+0x266>
 800555e:	2302      	movs	r3, #2
 8005560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005564:	e069      	b.n	800563a <UART_SetConfig+0x266>
 8005566:	2304      	movs	r3, #4
 8005568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556c:	e065      	b.n	800563a <UART_SetConfig+0x266>
 800556e:	2308      	movs	r3, #8
 8005570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005574:	e061      	b.n	800563a <UART_SetConfig+0x266>
 8005576:	2310      	movs	r3, #16
 8005578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557c:	e05d      	b.n	800563a <UART_SetConfig+0x266>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a4b      	ldr	r2, [pc, #300]	; (80056b0 <UART_SetConfig+0x2dc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d125      	bne.n	80055d4 <UART_SetConfig+0x200>
 8005588:	4b46      	ldr	r3, [pc, #280]	; (80056a4 <UART_SetConfig+0x2d0>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005592:	2bc0      	cmp	r3, #192	; 0xc0
 8005594:	d016      	beq.n	80055c4 <UART_SetConfig+0x1f0>
 8005596:	2bc0      	cmp	r3, #192	; 0xc0
 8005598:	d818      	bhi.n	80055cc <UART_SetConfig+0x1f8>
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d00a      	beq.n	80055b4 <UART_SetConfig+0x1e0>
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d814      	bhi.n	80055cc <UART_SetConfig+0x1f8>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <UART_SetConfig+0x1d8>
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d008      	beq.n	80055bc <UART_SetConfig+0x1e8>
 80055aa:	e00f      	b.n	80055cc <UART_SetConfig+0x1f8>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e042      	b.n	800563a <UART_SetConfig+0x266>
 80055b4:	2302      	movs	r3, #2
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e03e      	b.n	800563a <UART_SetConfig+0x266>
 80055bc:	2304      	movs	r3, #4
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e03a      	b.n	800563a <UART_SetConfig+0x266>
 80055c4:	2308      	movs	r3, #8
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e036      	b.n	800563a <UART_SetConfig+0x266>
 80055cc:	2310      	movs	r3, #16
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e032      	b.n	800563a <UART_SetConfig+0x266>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a30      	ldr	r2, [pc, #192]	; (800569c <UART_SetConfig+0x2c8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d12a      	bne.n	8005634 <UART_SetConfig+0x260>
 80055de:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <UART_SetConfig+0x2d0>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ec:	d01a      	beq.n	8005624 <UART_SetConfig+0x250>
 80055ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f2:	d81b      	bhi.n	800562c <UART_SetConfig+0x258>
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d00c      	beq.n	8005614 <UART_SetConfig+0x240>
 80055fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fe:	d815      	bhi.n	800562c <UART_SetConfig+0x258>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <UART_SetConfig+0x238>
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d008      	beq.n	800561c <UART_SetConfig+0x248>
 800560a:	e00f      	b.n	800562c <UART_SetConfig+0x258>
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e012      	b.n	800563a <UART_SetConfig+0x266>
 8005614:	2302      	movs	r3, #2
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e00e      	b.n	800563a <UART_SetConfig+0x266>
 800561c:	2304      	movs	r3, #4
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e00a      	b.n	800563a <UART_SetConfig+0x266>
 8005624:	2308      	movs	r3, #8
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e006      	b.n	800563a <UART_SetConfig+0x266>
 800562c:	2310      	movs	r3, #16
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e002      	b.n	800563a <UART_SetConfig+0x266>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <UART_SetConfig+0x2c8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	f040 808b 	bne.w	800575c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800564a:	2b08      	cmp	r3, #8
 800564c:	d834      	bhi.n	80056b8 <UART_SetConfig+0x2e4>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0x280>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005679 	.word	0x08005679
 8005658:	080056b9 	.word	0x080056b9
 800565c:	08005681 	.word	0x08005681
 8005660:	080056b9 	.word	0x080056b9
 8005664:	08005687 	.word	0x08005687
 8005668:	080056b9 	.word	0x080056b9
 800566c:	080056b9 	.word	0x080056b9
 8005670:	080056b9 	.word	0x080056b9
 8005674:	0800568f 	.word	0x0800568f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fece 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e021      	b.n	80056c4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <UART_SetConfig+0x2e0>)
 8005682:	61fb      	str	r3, [r7, #28]
        break;
 8005684:	e01e      	b.n	80056c4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005686:	f7fe fe2f 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800568a:	61f8      	str	r0, [r7, #28]
        break;
 800568c:	e01a      	b.n	80056c4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005692:	61fb      	str	r3, [r7, #28]
        break;
 8005694:	e016      	b.n	80056c4 <UART_SetConfig+0x2f0>
 8005696:	bf00      	nop
 8005698:	efff69f3 	.word	0xefff69f3
 800569c:	40008000 	.word	0x40008000
 80056a0:	40013800 	.word	0x40013800
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40004400 	.word	0x40004400
 80056ac:	40004800 	.word	0x40004800
 80056b0:	40004c00 	.word	0x40004c00
 80056b4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80fa 	beq.w	80058c0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d305      	bcc.n	80056e8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056ee:	e0e7      	b.n	80058c0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2200      	movs	r2, #0
 80056f4:	461c      	mov	r4, r3
 80056f6:	4615      	mov	r5, r2
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	022b      	lsls	r3, r5, #8
 8005702:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005706:	0222      	lsls	r2, r4, #8
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	6849      	ldr	r1, [r1, #4]
 800570c:	0849      	lsrs	r1, r1, #1
 800570e:	2000      	movs	r0, #0
 8005710:	4688      	mov	r8, r1
 8005712:	4681      	mov	r9, r0
 8005714:	eb12 0a08 	adds.w	sl, r2, r8
 8005718:	eb43 0b09 	adc.w	fp, r3, r9
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572a:	4650      	mov	r0, sl
 800572c:	4659      	mov	r1, fp
 800572e:	f7fb f975 	bl	8000a1c <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4613      	mov	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005740:	d308      	bcc.n	8005754 <UART_SetConfig+0x380>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005748:	d204      	bcs.n	8005754 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e0b5      	b.n	80058c0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800575a:	e0b1      	b.n	80058c0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005764:	d15d      	bne.n	8005822 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800576a:	2b08      	cmp	r3, #8
 800576c:	d827      	bhi.n	80057be <UART_SetConfig+0x3ea>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x3a0>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fe fe3e 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 800579c:	61f8      	str	r0, [r7, #28]
        break;
 800579e:	e014      	b.n	80057ca <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe fe50 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80057a4:	61f8      	str	r0, [r7, #28]
        break;
 80057a6:	e010      	b.n	80057ca <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <UART_SetConfig+0x508>)
 80057aa:	61fb      	str	r3, [r7, #28]
        break;
 80057ac:	e00d      	b.n	80057ca <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fe fd9b 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80057b2:	61f8      	str	r0, [r7, #28]
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	61fb      	str	r3, [r7, #28]
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d077      	beq.n	80058c0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	005a      	lsls	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d916      	bls.n	800581a <UART_SetConfig+0x446>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d212      	bcs.n	800581a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f023 030f 	bic.w	r3, r3, #15
 80057fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	b29a      	uxth	r2, r3
 800580a:	8afb      	ldrh	r3, [r7, #22]
 800580c:	4313      	orrs	r3, r2
 800580e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	8afa      	ldrh	r2, [r7, #22]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e052      	b.n	80058c0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005820:	e04e      	b.n	80058c0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005826:	2b08      	cmp	r3, #8
 8005828:	d827      	bhi.n	800587a <UART_SetConfig+0x4a6>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x45c>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005855 	.word	0x08005855
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005865 	.word	0x08005865
 800583c:	0800587b 	.word	0x0800587b
 8005840:	0800586b 	.word	0x0800586b
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
 8005850:	08005873 	.word	0x08005873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fde0 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8005858:	61f8      	str	r0, [r7, #28]
        break;
 800585a:	e014      	b.n	8005886 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fe fdf2 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8005860:	61f8      	str	r0, [r7, #28]
        break;
 8005862:	e010      	b.n	8005886 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <UART_SetConfig+0x508>)
 8005866:	61fb      	str	r3, [r7, #28]
        break;
 8005868:	e00d      	b.n	8005886 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586a:	f7fe fd3d 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800586e:	61f8      	str	r0, [r7, #28]
        break;
 8005870:	e009      	b.n	8005886 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005876:	61fb      	str	r3, [r7, #28]
        break;
 8005878:	e005      	b.n	8005886 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005884:	bf00      	nop
    }

    if (pclk != 0U)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d019      	beq.n	80058c0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	085a      	lsrs	r2, r3, #1
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d909      	bls.n	80058ba <UART_SetConfig+0x4e6>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ac:	d205      	bcs.n	80058ba <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e002      	b.n	80058c0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fb ffb2 	bl	800199c <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d10e      	bne.n	8005a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f82d 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e023      	b.n	8005aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f817 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e00d      	b.n	8005aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b09c      	sub	sp, #112	; 0x70
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac6:	e0a5      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	f000 80a1 	beq.w	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fb ff63 	bl	800199c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d13e      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005afc:	667b      	str	r3, [r7, #100]	; 0x64
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	663b      	str	r3, [r7, #96]	; 0x60
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e067      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d04f      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d147      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
 8005bae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005be0:	623a      	str	r2, [r7, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e010      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f43f af4a 	beq.w	8005ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3770      	adds	r7, #112	; 0x70
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b095      	sub	sp, #84	; 0x54
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
 8005c66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e5      	bne.n	8005c78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d118      	bne.n	8005ce6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005cf8:	bf00      	nop
 8005cfa:	3754      	adds	r7, #84	; 0x54
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fb40 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6979      	ldr	r1, [r7, #20]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fb0c 	bl	8005394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7c:	bf00      	nop
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <__NVIC_SetPriority>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db0a      	blt.n	8005dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	490c      	ldr	r1, [pc, #48]	; (8005de4 <__NVIC_SetPriority+0x4c>)
 8005db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005dc0:	e00a      	b.n	8005dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4908      	ldr	r1, [pc, #32]	; (8005de8 <__NVIC_SetPriority+0x50>)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	0112      	lsls	r2, r2, #4
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	761a      	strb	r2, [r3, #24]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000e100 	.word	0xe000e100
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005df0:	2100      	movs	r1, #0
 8005df2:	f06f 0004 	mvn.w	r0, #4
 8005df6:	f7ff ffcf 	bl	8005d98 <__NVIC_SetPriority>
#endif
}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e06:	f3ef 8305 	mrs	r3, IPSR
 8005e0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e12:	f06f 0305 	mvn.w	r3, #5
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e00c      	b.n	8005e34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <osKernelInitialize+0x44>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e22:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <osKernelInitialize+0x44>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e002      	b.n	8005e34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e34:	687b      	ldr	r3, [r7, #4]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200002f0 	.word	0x200002f0

08005e48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	603b      	str	r3, [r7, #0]
  return(result);
 8005e54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e5a:	f06f 0305 	mvn.w	r3, #5
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	e010      	b.n	8005e84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <osKernelStart+0x48>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d109      	bne.n	8005e7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e6a:	f7ff ffbf 	bl	8005dec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <osKernelStart+0x48>)
 8005e70:	2202      	movs	r2, #2
 8005e72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e74:	f001 fe0c 	bl	8007a90 <vTaskStartScheduler>
      stat = osOK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	e002      	b.n	8005e84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e84:	687b      	ldr	r3, [r7, #4]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200002f0 	.word	0x200002f0

08005e94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea4:	f3ef 8305 	mrs	r3, IPSR
 8005ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d17e      	bne.n	8005fae <osThreadNew+0x11a>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d07b      	beq.n	8005fae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005eba:	2318      	movs	r3, #24
 8005ebc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d045      	beq.n	8005f5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <osThreadNew+0x48>
        name = attr->name;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <osThreadNew+0x6e>
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	2b38      	cmp	r3, #56	; 0x38
 8005ef4:	d805      	bhi.n	8005f02 <osThreadNew+0x6e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <osThreadNew+0x72>
        return (NULL);
 8005f02:	2300      	movs	r3, #0
 8005f04:	e054      	b.n	8005fb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <osThreadNew+0xa8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2bbb      	cmp	r3, #187	; 0xbb
 8005f24:	d90a      	bls.n	8005f3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osThreadNew+0xa8>
        mem = 1;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e010      	b.n	8005f5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10c      	bne.n	8005f5e <osThreadNew+0xca>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <osThreadNew+0xca>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <osThreadNew+0xca>
          mem = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e001      	b.n	8005f5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d110      	bne.n	8005f86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 fb1e 	bl	80075bc <xTaskCreateStatic>
 8005f80:	4603      	mov	r3, r0
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e013      	b.n	8005fae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d110      	bne.n	8005fae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 fb69 	bl	8007676 <xTaskCreate>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <osThreadNew+0x11a>
            hTask = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fae:	693b      	ldr	r3, [r7, #16]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3728      	adds	r7, #40	; 0x28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc0:	f3ef 8305 	mrs	r3, IPSR
 8005fc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <osDelay+0x1c>
    stat = osErrorISR;
 8005fcc:	f06f 0305 	mvn.w	r3, #5
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e007      	b.n	8005fe4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fd22 	bl	8007a28 <vTaskDelay>
    }
  }

  return (stat);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b088      	sub	sp, #32
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ffa:	f3ef 8305 	mrs	r3, IPSR
 8005ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006000:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006002:	2b00      	cmp	r3, #0
 8006004:	d174      	bne.n	80060f0 <osMutexNew+0x102>
    if (attr != NULL) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <osMutexNew+0x26>
      type = attr->attr_bits;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e001      	b.n	8006018 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <osMutexNew+0x3a>
      rmtx = 1U;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e001      	b.n	800602c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d15c      	bne.n	80060f0 <osMutexNew+0x102>
      mem = -1;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d015      	beq.n	800606e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <osMutexNew+0x6a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b4f      	cmp	r3, #79	; 0x4f
 8006050:	d902      	bls.n	8006058 <osMutexNew+0x6a>
          mem = 1;
 8006052:	2301      	movs	r3, #1
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e00c      	b.n	8006072 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <osMutexNew+0x84>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <osMutexNew+0x84>
            mem = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e001      	b.n	8006072 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d112      	bne.n	800609e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4619      	mov	r1, r3
 8006084:	2004      	movs	r0, #4
 8006086:	f000 fbae 	bl	80067e6 <xQueueCreateMutexStatic>
 800608a:	61f8      	str	r0, [r7, #28]
 800608c:	e016      	b.n	80060bc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	4619      	mov	r1, r3
 8006094:	2001      	movs	r0, #1
 8006096:	f000 fba6 	bl	80067e6 <xQueueCreateMutexStatic>
 800609a:	61f8      	str	r0, [r7, #28]
 800609c:	e00e      	b.n	80060bc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80060aa:	2004      	movs	r0, #4
 80060ac:	f000 fb83 	bl	80067b6 <xQueueCreateMutex>
 80060b0:	61f8      	str	r0, [r7, #28]
 80060b2:	e003      	b.n	80060bc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80060b4:	2001      	movs	r0, #1
 80060b6:	f000 fb7e 	bl	80067b6 <xQueueCreateMutex>
 80060ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <osMutexNew+0xee>
        if (attr != NULL) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <osMutexNew+0xe2>
          name = attr->name;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e001      	b.n	80060d4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	69f8      	ldr	r0, [r7, #28]
 80060d8:	f001 f9e8 	bl	80074ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d006      	beq.n	80060f0 <osMutexNew+0x102>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80060f0:	69fb      	ldr	r3, [r7, #28]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08a      	sub	sp, #40	; 0x28
 80060fe:	af02      	add	r7, sp, #8
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610a:	f3ef 8305 	mrs	r3, IPSR
 800610e:	613b      	str	r3, [r7, #16]
  return(result);
 8006110:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006112:	2b00      	cmp	r3, #0
 8006114:	d175      	bne.n	8006202 <osSemaphoreNew+0x108>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d072      	beq.n	8006202 <osSemaphoreNew+0x108>
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	429a      	cmp	r2, r3
 8006122:	d86e      	bhi.n	8006202 <osSemaphoreNew+0x108>
    mem = -1;
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <osSemaphoreNew+0x4c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b4f      	cmp	r3, #79	; 0x4f
 800613e:	d902      	bls.n	8006146 <osSemaphoreNew+0x4c>
        mem = 1;
 8006140:	2301      	movs	r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e00c      	b.n	8006160 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <osSemaphoreNew+0x66>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <osSemaphoreNew+0x66>
          mem = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	e001      	b.n	8006160 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d04c      	beq.n	8006202 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d128      	bne.n	80061c0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10a      	bne.n	800618a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2203      	movs	r2, #3
 800617a:	9200      	str	r2, [sp, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	2001      	movs	r0, #1
 8006182:	f000 fa29 	bl	80065d8 <xQueueGenericCreateStatic>
 8006186:	61f8      	str	r0, [r7, #28]
 8006188:	e005      	b.n	8006196 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800618a:	2203      	movs	r2, #3
 800618c:	2100      	movs	r1, #0
 800618e:	2001      	movs	r0, #1
 8006190:	f000 fa9a 	bl	80066c8 <xQueueGenericCreate>
 8006194:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d022      	beq.n	80061e2 <osSemaphoreNew+0xe8>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01f      	beq.n	80061e2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80061a2:	2300      	movs	r3, #0
 80061a4:	2200      	movs	r2, #0
 80061a6:	2100      	movs	r1, #0
 80061a8:	69f8      	ldr	r0, [r7, #28]
 80061aa:	f000 fba1 	bl	80068f0 <xQueueGenericSend>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d016      	beq.n	80061e2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80061b4:	69f8      	ldr	r0, [r7, #28]
 80061b6:	f001 f82d 	bl	8007214 <vQueueDelete>
            hSemaphore = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e010      	b.n	80061e2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d108      	bne.n	80061d8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fb24 	bl	800681c <xQueueCreateCountingSemaphoreStatic>
 80061d4:	61f8      	str	r0, [r7, #28]
 80061d6:	e004      	b.n	80061e2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fb55 	bl	800688a <xQueueCreateCountingSemaphore>
 80061e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e001      	b.n	80061fa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	69f8      	ldr	r0, [r7, #28]
 80061fe:	f001 f955 	bl	80074ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006202:	69fb      	ldr	r3, [r7, #28]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006224:	f06f 0303 	mvn.w	r3, #3
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e039      	b.n	80062a0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800622c:	f3ef 8305 	mrs	r3, IPSR
 8006230:	60fb      	str	r3, [r7, #12]
  return(result);
 8006232:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006234:	2b00      	cmp	r3, #0
 8006236:	d022      	beq.n	800627e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800623e:	f06f 0303 	mvn.w	r3, #3
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e02c      	b.n	80062a0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	461a      	mov	r2, r3
 8006250:	2100      	movs	r1, #0
 8006252:	6938      	ldr	r0, [r7, #16]
 8006254:	f000 ff5e 	bl	8007114 <xQueueReceiveFromISR>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d003      	beq.n	8006266 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800625e:	f06f 0302 	mvn.w	r3, #2
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e01c      	b.n	80062a0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <osSemaphoreAcquire+0x94>
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <osSemaphoreAcquire+0xa0>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	e010      	b.n	80062a0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6938      	ldr	r0, [r7, #16]
 8006282:	f000 fe3b 	bl	8006efc <xQueueSemaphoreTake>
 8006286:	4603      	mov	r3, r0
 8006288:	2b01      	cmp	r3, #1
 800628a:	d009      	beq.n	80062a0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006292:	f06f 0301 	mvn.w	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e002      	b.n	80062a0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800629a:	f06f 0302 	mvn.w	r3, #2
 800629e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80062a0:	697b      	ldr	r3, [r7, #20]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80062c6:	f06f 0303 	mvn.w	r3, #3
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e02c      	b.n	8006328 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ce:	f3ef 8305 	mrs	r3, IPSR
 80062d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01a      	beq.n	8006310 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	4619      	mov	r1, r3
 80062e4:	6938      	ldr	r0, [r7, #16]
 80062e6:	f000 fc9c 	bl	8006c22 <xQueueGiveFromISR>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d003      	beq.n	80062f8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80062f0:	f06f 0302 	mvn.w	r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e017      	b.n	8006328 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d014      	beq.n	8006328 <osSemaphoreRelease+0x78>
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <osSemaphoreRelease+0x84>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	e00b      	b.n	8006328 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006310:	2300      	movs	r3, #0
 8006312:	2200      	movs	r2, #0
 8006314:	2100      	movs	r1, #0
 8006316:	6938      	ldr	r0, [r7, #16]
 8006318:	f000 faea 	bl	80068f0 <xQueueGenericSend>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006322:	f06f 0302 	mvn.w	r3, #2
 8006326:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006328:	697b      	ldr	r3, [r7, #20]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a07      	ldr	r2, [pc, #28]	; (8006364 <vApplicationGetIdleTaskMemory+0x2c>)
 8006348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a06      	ldr	r2, [pc, #24]	; (8006368 <vApplicationGetIdleTaskMemory+0x30>)
 800634e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	601a      	str	r2, [r3, #0]
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	200002f4 	.word	0x200002f4
 8006368:	200003b0 	.word	0x200003b0

0800636c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a07      	ldr	r2, [pc, #28]	; (8006398 <vApplicationGetTimerTaskMemory+0x2c>)
 800637c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4a06      	ldr	r2, [pc, #24]	; (800639c <vApplicationGetTimerTaskMemory+0x30>)
 8006382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800638a:	601a      	str	r2, [r3, #0]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	200005b0 	.word	0x200005b0
 800639c:	2000066c 	.word	0x2000066c

080063a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f103 0208 	add.w	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f103 0208 	add.w	r2, r3, #8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0208 	add.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d103      	bne.n	8006462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e00c      	b.n	800647c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3308      	adds	r3, #8
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e002      	b.n	8006470 <vListInsert+0x2e>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d2f6      	bcs.n	800646a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6892      	ldr	r2, [r2, #8]
 80064ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6852      	ldr	r2, [r2, #4]
 80064d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d103      	bne.n	80064e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	1e5a      	subs	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006532:	f002 fd5f 	bl	8008ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	441a      	add	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	3b01      	subs	r3, #1
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	22ff      	movs	r2, #255	; 0xff
 800657e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d114      	bne.n	80065b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3310      	adds	r3, #16
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fd15 	bl	8007fc4 <xTaskRemoveFromEventList>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d012      	beq.n	80065c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <xQueueGenericReset+0xcc>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	e009      	b.n	80065c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3310      	adds	r3, #16
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fef2 	bl	80063a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff feed 	bl	80063a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065c6:	f002 fd45 	bl	8009054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065ca:	2301      	movs	r3, #1
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <xQueueGenericCreateStatic+0x52>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <xQueueGenericCreateStatic+0x56>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <xQueueGenericCreateStatic+0x58>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	623b      	str	r3, [r7, #32]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <xQueueGenericCreateStatic+0x7e>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <xQueueGenericCreateStatic+0x82>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <xQueueGenericCreateStatic+0x84>
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	61fb      	str	r3, [r7, #28]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006676:	2350      	movs	r3, #80	; 0x50
 8006678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b50      	cmp	r3, #80	; 0x50
 800667e:	d00a      	beq.n	8006696 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61bb      	str	r3, [r7, #24]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006696:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f83f 	bl	800673c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	; 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	613b      	str	r3, [r7, #16]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3350      	adds	r3, #80	; 0x50
 8006700:	4618      	mov	r0, r3
 8006702:	f002 fd99 	bl	8009238 <pvPortMalloc>
 8006706:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d011      	beq.n	8006732 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3350      	adds	r3, #80	; 0x50
 8006716:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006720:	79fa      	ldrb	r2, [r7, #7]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f805 	bl	800673c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006732:	69bb      	ldr	r3, [r7, #24]
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e002      	b.n	800675e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800676a:	2101      	movs	r1, #1
 800676c:	69b8      	ldr	r0, [r7, #24]
 800676e:	f7ff fecb 	bl	8006508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80067a2:	2300      	movs	r3, #0
 80067a4:	2200      	movs	r2, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8a1 	bl	80068f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	4603      	mov	r3, r0
 80067be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	461a      	mov	r2, r3
 80067cc:	6939      	ldr	r1, [r7, #16]
 80067ce:	6978      	ldr	r0, [r7, #20]
 80067d0:	f7ff ff7a 	bl	80066c8 <xQueueGenericCreate>
 80067d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff ffd3 	bl	8006782 <prvInitialiseMutex>

		return xNewQueue;
 80067dc:	68fb      	ldr	r3, [r7, #12]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b088      	sub	sp, #32
 80067ea:	af02      	add	r7, sp, #8
 80067ec:	4603      	mov	r3, r0
 80067ee:	6039      	str	r1, [r7, #0]
 80067f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2200      	movs	r2, #0
 8006802:	6939      	ldr	r1, [r7, #16]
 8006804:	6978      	ldr	r0, [r7, #20]
 8006806:	f7ff fee7 	bl	80065d8 <xQueueGenericCreateStatic>
 800680a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff ffb8 	bl	8006782 <prvInitialiseMutex>

		return xNewQueue;
 8006812:	68fb      	ldr	r3, [r7, #12]
	}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61bb      	str	r3, [r7, #24]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d90a      	bls.n	8006862 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	617b      	str	r3, [r7, #20]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006862:	2302      	movs	r3, #2
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	2100      	movs	r1, #0
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff feb3 	bl	80065d8 <xQueueGenericCreateStatic>
 8006872:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006880:	69fb      	ldr	r3, [r7, #28]
	}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d90a      	bls.n	80068ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068ce:	2202      	movs	r2, #2
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fef8 	bl	80066c8 <xQueueGenericCreate>
 80068d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068e6:	697b      	ldr	r3, [r7, #20]
	}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08e      	sub	sp, #56	; 0x38
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueGenericSend+0x32>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <xQueueGenericSend+0x40>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <xQueueGenericSend+0x44>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <xQueueGenericSend+0x46>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <xQueueGenericSend+0x60>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d103      	bne.n	800695e <xQueueGenericSend+0x6e>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <xQueueGenericSend+0x72>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericSend+0x74>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xQueueGenericSend+0x8e>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	623b      	str	r3, [r7, #32]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800697e:	f001 fce3 	bl	8008348 <xTaskGetSchedulerState>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <xQueueGenericSend+0x9e>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <xQueueGenericSend+0xa2>
 800698e:	2301      	movs	r3, #1
 8006990:	e000      	b.n	8006994 <xQueueGenericSend+0xa4>
 8006992:	2300      	movs	r3, #0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xQueueGenericSend+0xbe>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	61fb      	str	r3, [r7, #28]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ae:	f002 fb21 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <xQueueGenericSend+0xd4>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d129      	bne.n	8006a18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ca:	f000 fc5e 	bl	800728a <prvCopyDataToQueue>
 80069ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	3324      	adds	r3, #36	; 0x24
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 faf1 	bl	8007fc4 <xTaskRemoveFromEventList>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069e8:	4b3f      	ldr	r3, [pc, #252]	; (8006ae8 <xQueueGenericSend+0x1f8>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	e00a      	b.n	8006a10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a00:	4b39      	ldr	r3, [pc, #228]	; (8006ae8 <xQueueGenericSend+0x1f8>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a10:	f002 fb20 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e063      	b.n	8006ae0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a1e:	f002 fb19 	bl	8009054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e05c      	b.n	8006ae0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a2c:	f107 0314 	add.w	r3, r7, #20
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 fb2b 	bl	800808c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a3a:	f002 fb0b 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a3e:	f001 f897 	bl	8007b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a42:	f002 fad7 	bl	8008ff4 <vPortEnterCritical>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d103      	bne.n	8006a5c <xQueueGenericSend+0x16c>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d103      	bne.n	8006a72 <xQueueGenericSend+0x182>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a72:	f002 faef 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fb1a 	bl	80080b8 <xTaskCheckForTimeOut>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d124      	bne.n	8006ad4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a8c:	f000 fcf5 	bl	800747a <prvIsQueueFull>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d018      	beq.n	8006ac8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	3310      	adds	r3, #16
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 fa40 	bl	8007f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa6:	f000 fc80 	bl	80073aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aaa:	f001 f86f 	bl	8007b8c <xTaskResumeAll>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f47f af7c 	bne.w	80069ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <xQueueGenericSend+0x1f8>)
 8006ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	e772      	b.n	80069ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aca:	f000 fc6e 	bl	80073aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ace:	f001 f85d 	bl	8007b8c <xTaskResumeAll>
 8006ad2:	e76c      	b.n	80069ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad6:	f000 fc68 	bl	80073aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ada:	f001 f857 	bl	8007b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3738      	adds	r7, #56	; 0x38
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b090      	sub	sp, #64	; 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <xQueueGenericSendFromISR+0x3c>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <xQueueGenericSendFromISR+0x40>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <xQueueGenericSendFromISR+0x42>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d103      	bne.n	8006b56 <xQueueGenericSendFromISR+0x6a>
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <xQueueGenericSendFromISR+0x6e>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <xQueueGenericSendFromISR+0x70>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	623b      	str	r3, [r7, #32]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b76:	f002 fb1f 	bl	80091b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	61fa      	str	r2, [r7, #28]
 8006b90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <xQueueGenericSendFromISR+0xbc>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d12f      	bne.n	8006c08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bbe:	f000 fb64 	bl	800728a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d112      	bne.n	8006bf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d016      	beq.n	8006c02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 f9f3 	bl	8007fc4 <xTaskRemoveFromEventList>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	e007      	b.n	8006c02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	b25a      	sxtb	r2, r3
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c02:	2301      	movs	r3, #1
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c06:	e001      	b.n	8006c0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3740      	adds	r7, #64	; 0x40
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b08e      	sub	sp, #56	; 0x38
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	623b      	str	r3, [r7, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61fb      	str	r3, [r7, #28]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <xQueueGiveFromISR+0x58>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <xQueueGiveFromISR+0x5c>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <xQueueGiveFromISR+0x5e>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61bb      	str	r3, [r7, #24]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c9a:	f002 fa8d 	bl	80091b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	617a      	str	r2, [r7, #20]
 8006cb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006cb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d22b      	bcs.n	8006d22 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d112      	bne.n	8006d0c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 f966 	bl	8007fc4 <xTaskRemoveFromEventList>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e007      	b.n	8006d1c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d10:	3301      	adds	r3, #1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	b25a      	sxtb	r2, r3
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d20:	e001      	b.n	8006d26 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f383 8811 	msr	BASEPRI, r3
}
 8006d30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3738      	adds	r7, #56	; 0x38
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <xQueueReceive+0x30>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	623b      	str	r3, [r7, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <xQueueReceive+0x3e>
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <xQueueReceive+0x42>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <xQueueReceive+0x44>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <xQueueReceive+0x5e>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	61fb      	str	r3, [r7, #28]
}
 8006d96:	bf00      	nop
 8006d98:	e7fe      	b.n	8006d98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d9a:	f001 fad5 	bl	8008348 <xTaskGetSchedulerState>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <xQueueReceive+0x6e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <xQueueReceive+0x72>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <xQueueReceive+0x74>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xQueueReceive+0x8e>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	61bb      	str	r3, [r7, #24]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dca:	f002 f913 	bl	8008ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01f      	beq.n	8006e1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dde:	f000 fabe 	bl	800735e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00f      	beq.n	8006e12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	3310      	adds	r3, #16
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 f8e4 	bl	8007fc4 <xTaskRemoveFromEventList>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e02:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <xQueueReceive+0x1bc>)
 8006e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e12:	f002 f91f 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e069      	b.n	8006eee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e20:	f002 f918 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e062      	b.n	8006eee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e2e:	f107 0310 	add.w	r3, r7, #16
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 f92a 	bl	800808c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e3c:	f002 f90a 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e40:	f000 fe96 	bl	8007b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e44:	f002 f8d6 	bl	8008ff4 <vPortEnterCritical>
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d103      	bne.n	8006e5e <xQueueReceive+0x122>
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d103      	bne.n	8006e74 <xQueueReceive+0x138>
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e74:	f002 f8ee 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e78:	1d3a      	adds	r2, r7, #4
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	4611      	mov	r1, r2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f919 	bl	80080b8 <xTaskCheckForTimeOut>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d123      	bne.n	8006ed4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8e:	f000 fade 	bl	800744e <prvIsQueueEmpty>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d017      	beq.n	8006ec8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f83f 	bl	8007f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea8:	f000 fa7f 	bl	80073aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eac:	f000 fe6e 	bl	8007b8c <xTaskResumeAll>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d189      	bne.n	8006dca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006eb6:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <xQueueReceive+0x1bc>)
 8006eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	e780      	b.n	8006dca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	f000 fa6e 	bl	80073aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ece:	f000 fe5d 	bl	8007b8c <xTaskResumeAll>
 8006ed2:	e77a      	b.n	8006dca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed6:	f000 fa68 	bl	80073aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eda:	f000 fe57 	bl	8007b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee0:	f000 fab5 	bl	800744e <prvIsQueueEmpty>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f43f af6f 	beq.w	8006dca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3730      	adds	r7, #48	; 0x30
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08e      	sub	sp, #56	; 0x38
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	623b      	str	r3, [r7, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61fb      	str	r3, [r7, #28]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f4c:	f001 f9fc 	bl	8008348 <xTaskGetSchedulerState>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <xQueueSemaphoreTake+0x60>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <xQueueSemaphoreTake+0x64>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <xQueueSemaphoreTake+0x66>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	61bb      	str	r3, [r7, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f7c:	f002 f83a 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d024      	beq.n	8006fd6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f9c:	f001 fb4a 	bl	8008634 <pvTaskIncrementMutexHeldCount>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	3310      	adds	r3, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f806 	bl	8007fc4 <xTaskRemoveFromEventList>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fbe:	4b54      	ldr	r3, [pc, #336]	; (8007110 <xQueueSemaphoreTake+0x214>)
 8006fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fce:	f002 f841 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e097      	b.n	8007106 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d111      	bne.n	8007000 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ff8:	f002 f82c 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e082      	b.n	8007106 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007006:	f107 030c 	add.w	r3, r7, #12
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f83e 	bl	800808c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007014:	f002 f81e 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007018:	f000 fdaa 	bl	8007b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800701c:	f001 ffea 	bl	8008ff4 <vPortEnterCritical>
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007026:	b25b      	sxtb	r3, r3
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d103      	bne.n	8007036 <xQueueSemaphoreTake+0x13a>
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703c:	b25b      	sxtb	r3, r3
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d103      	bne.n	800704c <xQueueSemaphoreTake+0x150>
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800704c:	f002 f802 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007050:	463a      	mov	r2, r7
 8007052:	f107 030c 	add.w	r3, r7, #12
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f82d 	bl	80080b8 <xTaskCheckForTimeOut>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d132      	bne.n	80070ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007066:	f000 f9f2 	bl	800744e <prvIsQueueEmpty>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d026      	beq.n	80070be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007078:	f001 ffbc 	bl	8008ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f97f 	bl	8008384 <xTaskPriorityInherit>
 8007086:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007088:	f001 ffe4 	bl	8009054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ff45 	bl	8007f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800709a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800709c:	f000 f985 	bl	80073aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a0:	f000 fd74 	bl	8007b8c <xTaskResumeAll>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f47f af68 	bne.w	8006f7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070ac:	4b18      	ldr	r3, [pc, #96]	; (8007110 <xQueueSemaphoreTake+0x214>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	e75e      	b.n	8006f7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c0:	f000 f973 	bl	80073aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070c4:	f000 fd62 	bl	8007b8c <xTaskResumeAll>
 80070c8:	e758      	b.n	8006f7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070cc:	f000 f96d 	bl	80073aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070d0:	f000 fd5c 	bl	8007b8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d6:	f000 f9ba 	bl	800744e <prvIsQueueEmpty>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f43f af4d 	beq.w	8006f7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00d      	beq.n	8007104 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070e8:	f001 ff84 	bl	8008ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ee:	f000 f8b4 	bl	800725a <prvGetDisinheritPriorityAfterTimeout>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fa18 	bl	8008530 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007100:	f001 ffa8 	bl	8009054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007104:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007106:	4618      	mov	r0, r3
 8007108:	3738      	adds	r7, #56	; 0x38
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08e      	sub	sp, #56	; 0x38
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	623b      	str	r3, [r7, #32]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <xQueueReceiveFromISR+0x3a>
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <xQueueReceiveFromISR+0x3e>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <xQueueReceiveFromISR+0x40>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	61fb      	str	r3, [r7, #28]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800716e:	f002 f823 	bl	80091b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007172:	f3ef 8211 	mrs	r2, BASEPRI
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61ba      	str	r2, [r7, #24]
 8007188:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800718a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02f      	beq.n	80071fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a8:	f000 f8d9 	bl	800735e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	1e5a      	subs	r2, r3, #1
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d112      	bne.n	80071e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	3310      	adds	r3, #16
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fefa 	bl	8007fc4 <xTaskRemoveFromEventList>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00e      	beq.n	80071f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e007      	b.n	80071f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e8:	3301      	adds	r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	b25a      	sxtb	r2, r3
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071f4:	2301      	movs	r3, #1
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
 80071f8:	e001      	b.n	80071fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f383 8811 	msr	BASEPRI, r3
}
 8007208:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800720c:	4618      	mov	r0, r3
 800720e:	3738      	adds	r7, #56	; 0x38
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <vQueueDelete+0x28>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f95f 	bl	8007500 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f002 f8bf 	bl	80093d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d006      	beq.n	8007278 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e001      	b.n	800727c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800727c:	68fb      	ldr	r3, [r7, #12]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d14d      	bne.n	800734c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 f8cd 	bl	8008454 <xTaskPriorityDisinherit>
 80072ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	609a      	str	r2, [r3, #8]
 80072c2:	e043      	b.n	800734c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d119      	bne.n	80072fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6858      	ldr	r0, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	461a      	mov	r2, r3
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	f002 f9bf 	bl	8009658 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	441a      	add	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d32b      	bcc.n	800734c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	605a      	str	r2, [r3, #4]
 80072fc:	e026      	b.n	800734c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	68d8      	ldr	r0, [r3, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	461a      	mov	r2, r3
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	f002 f9a5 	bl	8009658 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	425b      	negs	r3, r3
 8007318:	441a      	add	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d207      	bcs.n	800733a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	425b      	negs	r3, r3
 8007334:	441a      	add	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d105      	bne.n	800734c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3b01      	subs	r3, #1
 800734a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007354:	697b      	ldr	r3, [r7, #20]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d018      	beq.n	80073a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	441a      	add	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	d303      	bcc.n	8007392 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68d9      	ldr	r1, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	461a      	mov	r2, r3
 800739c:	6838      	ldr	r0, [r7, #0]
 800739e:	f002 f95b 	bl	8009658 <memcpy>
	}
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073b2:	f001 fe1f 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073be:	e011      	b.n	80073e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fdf9 	bl	8007fc4 <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073d8:	f000 fed0 	bl	800817c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	3b01      	subs	r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dce9      	bgt.n	80073c0 <prvUnlockQueue+0x16>
 80073ec:	e000      	b.n	80073f0 <prvUnlockQueue+0x46>
					break;
 80073ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073f8:	f001 fe2c 	bl	8009054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073fc:	f001 fdfa 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007406:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007408:	e011      	b.n	800742e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d012      	beq.n	8007438 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3310      	adds	r3, #16
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fdd4 	bl	8007fc4 <xTaskRemoveFromEventList>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007422:	f000 feab 	bl	800817c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	3b01      	subs	r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800742e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dce9      	bgt.n	800740a <prvUnlockQueue+0x60>
 8007436:	e000      	b.n	800743a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007438:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	22ff      	movs	r2, #255	; 0xff
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007442:	f001 fe07 	bl	8009054 <vPortExitCritical>
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007456:	f001 fdcd 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	e001      	b.n	800746c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800746c:	f001 fdf2 	bl	8009054 <vPortExitCritical>

	return xReturn;
 8007470:	68fb      	ldr	r3, [r7, #12]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007482:	f001 fdb7 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	429a      	cmp	r2, r3
 8007490:	d102      	bne.n	8007498 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e001      	b.n	800749c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800749c:	f001 fdda 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80074a0:	68fb      	ldr	r3, [r7, #12]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e014      	b.n	80074e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074bc:	4a0f      	ldr	r2, [pc, #60]	; (80074fc <vQueueAddToRegistry+0x50>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074c8:	490c      	ldr	r1, [pc, #48]	; (80074fc <vQueueAddToRegistry+0x50>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074d2:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <vQueueAddToRegistry+0x50>)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074de:	e006      	b.n	80074ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b07      	cmp	r3, #7
 80074ea:	d9e7      	bls.n	80074bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000a6c 	.word	0x20000a6c

08007500 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e016      	b.n	800753c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800750e:	4a10      	ldr	r2, [pc, #64]	; (8007550 <vQueueUnregisterQueue+0x50>)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	4413      	add	r3, r2
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d10b      	bne.n	8007536 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800751e:	4a0c      	ldr	r2, [pc, #48]	; (8007550 <vQueueUnregisterQueue+0x50>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2100      	movs	r1, #0
 8007524:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007528:	4a09      	ldr	r2, [pc, #36]	; (8007550 <vQueueUnregisterQueue+0x50>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	2200      	movs	r2, #0
 8007532:	605a      	str	r2, [r3, #4]
				break;
 8007534:	e006      	b.n	8007544 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b07      	cmp	r3, #7
 8007540:	d9e5      	bls.n	800750e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000a6c 	.word	0x20000a6c

08007554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007564:	f001 fd46 	bl	8008ff4 <vPortEnterCritical>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d103      	bne.n	800757e <vQueueWaitForMessageRestricted+0x2a>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d103      	bne.n	8007594 <vQueueWaitForMessageRestricted+0x40>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007594:	f001 fd5e 	bl	8009054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fcdf 	bl	8007f6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f7ff fefb 	bl	80073aa <prvUnlockQueue>
	}
 80075b4:	bf00      	nop
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08e      	sub	sp, #56	; 0x38
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	623b      	str	r3, [r7, #32]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <xTaskCreateStatic+0x46>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	61fb      	str	r3, [r7, #28]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007602:	23bc      	movs	r3, #188	; 0xbc
 8007604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2bbc      	cmp	r3, #188	; 0xbc
 800760a:	d00a      	beq.n	8007622 <xTaskCreateStatic+0x66>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	61bb      	str	r3, [r7, #24]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01e      	beq.n	8007668 <xTaskCreateStatic+0xac>
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01b      	beq.n	8007668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	2202      	movs	r2, #2
 800763e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007642:	2300      	movs	r3, #0
 8007644:	9303      	str	r3, [sp, #12]
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f850 	bl	8007700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007662:	f000 f8f3 	bl	800784c <prvAddNewTaskToReadyList>
 8007666:	e001      	b.n	800766c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800766c:	697b      	ldr	r3, [r7, #20]
	}
 800766e:	4618      	mov	r0, r3
 8007670:	3728      	adds	r7, #40	; 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007676:	b580      	push	{r7, lr}
 8007678:	b08c      	sub	sp, #48	; 0x30
 800767a:	af04      	add	r7, sp, #16
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fdd4 	bl	8009238 <pvPortMalloc>
 8007690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007698:	20bc      	movs	r0, #188	; 0xbc
 800769a:	f001 fdcd 	bl	8009238 <pvPortMalloc>
 800769e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
 80076ac:	e005      	b.n	80076ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076ae:	6978      	ldr	r0, [r7, #20]
 80076b0:	f001 fe8e 	bl	80093d0 <vPortFree>
 80076b4:	e001      	b.n	80076ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d017      	beq.n	80076f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9303      	str	r3, [sp, #12]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	9302      	str	r3, [sp, #8]
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f80e 	bl	8007700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076e4:	69f8      	ldr	r0, [r7, #28]
 80076e6:	f000 f8b1 	bl	800784c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	e002      	b.n	80076f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076f0:	f04f 33ff 	mov.w	r3, #4294967295
 80076f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076f6:	69bb      	ldr	r3, [r7, #24]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	461a      	mov	r2, r3
 8007718:	21a5      	movs	r1, #165	; 0xa5
 800771a:	f001 ffab 	bl	8009674 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007728:	3b01      	subs	r3, #1
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	617b      	str	r3, [r7, #20]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01f      	beq.n	800779e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800775e:	2300      	movs	r3, #0
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e012      	b.n	800778a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	7819      	ldrb	r1, [r3, #0]
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	3334      	adds	r3, #52	; 0x34
 8007774:	460a      	mov	r2, r1
 8007776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3301      	adds	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b0f      	cmp	r3, #15
 800778e:	d9e9      	bls.n	8007764 <prvInitialiseNewTask+0x64>
 8007790:	e000      	b.n	8007794 <prvInitialiseNewTask+0x94>
			{
				break;
 8007792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800779c:	e003      	b.n	80077a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b37      	cmp	r3, #55	; 0x37
 80077aa:	d901      	bls.n	80077b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077ac:	2337      	movs	r3, #55	; 0x37
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fe0a 	bl	80063e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	3318      	adds	r3, #24
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fe05 	bl	80063e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	3354      	adds	r3, #84	; 0x54
 8007800:	2260      	movs	r2, #96	; 0x60
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f001 ff35 	bl	8009674 <memset>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <prvInitialiseNewTask+0x140>)
 800780e:	659a      	str	r2, [r3, #88]	; 0x58
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <prvInitialiseNewTask+0x144>)
 8007814:	65da      	str	r2, [r3, #92]	; 0x5c
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	4a0b      	ldr	r2, [pc, #44]	; (8007848 <prvInitialiseNewTask+0x148>)
 800781a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	69b8      	ldr	r0, [r7, #24]
 8007822:	f001 fabd 	bl	8008da0 <pxPortInitialiseStack>
 8007826:	4602      	mov	r2, r0
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007838:	bf00      	nop
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	080099a8 	.word	0x080099a8
 8007844:	080099c8 	.word	0x080099c8
 8007848:	08009988 	.word	0x08009988

0800784c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007854:	f001 fbce 	bl	8008ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007858:	4b2d      	ldr	r3, [pc, #180]	; (8007910 <prvAddNewTaskToReadyList+0xc4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a2c      	ldr	r2, [pc, #176]	; (8007910 <prvAddNewTaskToReadyList+0xc4>)
 8007860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007862:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <prvAddNewTaskToReadyList+0xc4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d110      	bne.n	800789a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007878:	f000 fca4 	bl	80081c4 <prvInitialiseTaskLists>
 800787c:	e00d      	b.n	800789a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800787e:	4b26      	ldr	r3, [pc, #152]	; (8007918 <prvAddNewTaskToReadyList+0xcc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007886:	4b23      	ldr	r3, [pc, #140]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d802      	bhi.n	800789a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007894:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800789a:	4b20      	ldr	r3, [pc, #128]	; (800791c <prvAddNewTaskToReadyList+0xd0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	4a1e      	ldr	r2, [pc, #120]	; (800791c <prvAddNewTaskToReadyList+0xd0>)
 80078a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078a4:	4b1d      	ldr	r3, [pc, #116]	; (800791c <prvAddNewTaskToReadyList+0xd0>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <prvAddNewTaskToReadyList+0xd4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d903      	bls.n	80078c0 <prvAddNewTaskToReadyList+0x74>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	4a18      	ldr	r2, [pc, #96]	; (8007920 <prvAddNewTaskToReadyList+0xd4>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4a15      	ldr	r2, [pc, #84]	; (8007924 <prvAddNewTaskToReadyList+0xd8>)
 80078ce:	441a      	add	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7fe fd8f 	bl	80063fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078dc:	f001 fbba 	bl	8009054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078e0:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <prvAddNewTaskToReadyList+0xcc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d207      	bcs.n	8007906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvAddNewTaskToReadyList+0xdc>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000f80 	.word	0x20000f80
 8007914:	20000aac 	.word	0x20000aac
 8007918:	20000f8c 	.word	0x20000f8c
 800791c:	20000f9c 	.word	0x20000f9c
 8007920:	20000f88 	.word	0x20000f88
 8007924:	20000ab0 	.word	0x20000ab0
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	617b      	str	r3, [r7, #20]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <vTaskDelayUntil+0x46>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	613b      	str	r3, [r7, #16]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007972:	4b2a      	ldr	r3, [pc, #168]	; (8007a1c <vTaskDelayUntil+0xf0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vTaskDelayUntil+0x64>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60fb      	str	r3, [r7, #12]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007990:	f000 f8ee 	bl	8007b70 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <vTaskDelayUntil+0xf4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a3a      	ldr	r2, [r7, #32]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d20b      	bcs.n	80079c6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d211      	bcs.n	80079dc <vTaskDelayUntil+0xb0>
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d90d      	bls.n	80079dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
 80079c4:	e00a      	b.n	80079dc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d303      	bcc.n	80079d8 <vTaskDelayUntil+0xac>
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d901      	bls.n	80079dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fe33 	bl	800865c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80079f6:	f000 f8c9 	bl	8007b8c <xTaskResumeAll>
 80079fa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <vTaskDelayUntil+0xf8>)
 8007a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a12:	bf00      	nop
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000fa8 	.word	0x20000fa8
 8007a20:	20000f84 	.word	0x20000f84
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d017      	beq.n	8007a6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <vTaskDelay+0x60>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <vTaskDelay+0x30>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60bb      	str	r3, [r7, #8]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a58:	f000 f88a 	bl	8007b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fdfc 	bl	800865c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a64:	f000 f892 	bl	8007b8c <xTaskResumeAll>
 8007a68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <vTaskDelay+0x64>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000fa8 	.word	0x20000fa8
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	; 0x28
 8007a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	1d39      	adds	r1, r7, #4
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fc46 	bl	8006338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	9202      	str	r2, [sp, #8]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	2300      	movs	r3, #0
 8007abc:	460a      	mov	r2, r1
 8007abe:	4924      	ldr	r1, [pc, #144]	; (8007b50 <vTaskStartScheduler+0xc0>)
 8007ac0:	4824      	ldr	r0, [pc, #144]	; (8007b54 <vTaskStartScheduler+0xc4>)
 8007ac2:	f7ff fd7b 	bl	80075bc <xTaskCreateStatic>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4a23      	ldr	r2, [pc, #140]	; (8007b58 <vTaskStartScheduler+0xc8>)
 8007aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007acc:	4b22      	ldr	r3, [pc, #136]	; (8007b58 <vTaskStartScheduler+0xc8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e001      	b.n	8007ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d102      	bne.n	8007aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ae4:	f000 fe0e 	bl	8008704 <xTimerCreateTimerTask>
 8007ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d11b      	bne.n	8007b28 <vTaskStartScheduler+0x98>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	613b      	str	r3, [r7, #16]
}
 8007b02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b04:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <vTaskStartScheduler+0xcc>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3354      	adds	r3, #84	; 0x54
 8007b0a:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <vTaskStartScheduler+0xd0>)
 8007b0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <vTaskStartScheduler+0xd4>)
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <vTaskStartScheduler+0xd8>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b1c:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <vTaskStartScheduler+0xdc>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b22:	f001 f9c5 	bl	8008eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b26:	e00e      	b.n	8007b46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d10a      	bne.n	8007b46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <vTaskStartScheduler+0xb4>
}
 8007b46:	bf00      	nop
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	08009878 	.word	0x08009878
 8007b54:	08008195 	.word	0x08008195
 8007b58:	20000fa4 	.word	0x20000fa4
 8007b5c:	20000aac 	.word	0x20000aac
 8007b60:	20000014 	.word	0x20000014
 8007b64:	20000fa0 	.word	0x20000fa0
 8007b68:	20000f8c 	.word	0x20000f8c
 8007b6c:	20000f84 	.word	0x20000f84

08007b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <vTaskSuspendAll+0x18>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	4a03      	ldr	r2, [pc, #12]	; (8007b88 <vTaskSuspendAll+0x18>)
 8007b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b7e:	bf00      	nop
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000fa8 	.word	0x20000fa8

08007b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b9a:	4b42      	ldr	r3, [pc, #264]	; (8007ca4 <xTaskResumeAll+0x118>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	603b      	str	r3, [r7, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bb8:	f001 fa1c 	bl	8008ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bbc:	4b39      	ldr	r3, [pc, #228]	; (8007ca4 <xTaskResumeAll+0x118>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <xTaskResumeAll+0x118>)
 8007bc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc6:	4b37      	ldr	r3, [pc, #220]	; (8007ca4 <xTaskResumeAll+0x118>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d162      	bne.n	8007c94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bce:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <xTaskResumeAll+0x11c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05e      	beq.n	8007c94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd6:	e02f      	b.n	8007c38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd8:	4b34      	ldr	r3, [pc, #208]	; (8007cac <xTaskResumeAll+0x120>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3318      	adds	r3, #24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fc65 	bl	80064b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fc60 	bl	80064b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf8:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <xTaskResumeAll+0x124>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d903      	bls.n	8007c08 <xTaskResumeAll+0x7c>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <xTaskResumeAll+0x124>)
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a27      	ldr	r2, [pc, #156]	; (8007cb4 <xTaskResumeAll+0x128>)
 8007c16:	441a      	add	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fe fbeb 	bl	80063fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4b23      	ldr	r3, [pc, #140]	; (8007cb8 <xTaskResumeAll+0x12c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c32:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <xTaskResumeAll+0x130>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c38:	4b1c      	ldr	r3, [pc, #112]	; (8007cac <xTaskResumeAll+0x120>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1cb      	bne.n	8007bd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c46:	f000 fb5f 	bl	8008308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <xTaskResumeAll+0x134>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d010      	beq.n	8007c78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c56:	f000 f847 	bl	8007ce8 <xTaskIncrementTick>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c60:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <xTaskResumeAll+0x130>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f1      	bne.n	8007c56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <xTaskResumeAll+0x134>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <xTaskResumeAll+0x130>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <xTaskResumeAll+0x138>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c94:	f001 f9de 	bl	8009054 <vPortExitCritical>

	return xAlreadyYielded;
 8007c98:	68bb      	ldr	r3, [r7, #8]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000fa8 	.word	0x20000fa8
 8007ca8:	20000f80 	.word	0x20000f80
 8007cac:	20000f40 	.word	0x20000f40
 8007cb0:	20000f88 	.word	0x20000f88
 8007cb4:	20000ab0 	.word	0x20000ab0
 8007cb8:	20000aac 	.word	0x20000aac
 8007cbc:	20000f94 	.word	0x20000f94
 8007cc0:	20000f90 	.word	0x20000f90
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <xTaskGetTickCount+0x1c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cd4:	687b      	ldr	r3, [r7, #4]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000f84 	.word	0x20000f84

08007ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf2:	4b4f      	ldr	r3, [pc, #316]	; (8007e30 <xTaskIncrementTick+0x148>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 808f 	bne.w	8007e1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cfc:	4b4d      	ldr	r3, [pc, #308]	; (8007e34 <xTaskIncrementTick+0x14c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d04:	4a4b      	ldr	r2, [pc, #300]	; (8007e34 <xTaskIncrementTick+0x14c>)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d120      	bne.n	8007d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d10:	4b49      	ldr	r3, [pc, #292]	; (8007e38 <xTaskIncrementTick+0x150>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	603b      	str	r3, [r7, #0]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <xTaskIncrementTick+0x46>
 8007d30:	4b41      	ldr	r3, [pc, #260]	; (8007e38 <xTaskIncrementTick+0x150>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	4b41      	ldr	r3, [pc, #260]	; (8007e3c <xTaskIncrementTick+0x154>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a3f      	ldr	r2, [pc, #252]	; (8007e38 <xTaskIncrementTick+0x150>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4a3f      	ldr	r2, [pc, #252]	; (8007e3c <xTaskIncrementTick+0x154>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	4b3e      	ldr	r3, [pc, #248]	; (8007e40 <xTaskIncrementTick+0x158>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	4a3d      	ldr	r2, [pc, #244]	; (8007e40 <xTaskIncrementTick+0x158>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	f000 fadb 	bl	8008308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d52:	4b3c      	ldr	r3, [pc, #240]	; (8007e44 <xTaskIncrementTick+0x15c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d349      	bcc.n	8007df0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <xTaskIncrementTick+0x150>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d66:	4b37      	ldr	r3, [pc, #220]	; (8007e44 <xTaskIncrementTick+0x15c>)
 8007d68:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6c:	601a      	str	r2, [r3, #0]
					break;
 8007d6e:	e03f      	b.n	8007df0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d70:	4b31      	ldr	r3, [pc, #196]	; (8007e38 <xTaskIncrementTick+0x150>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d203      	bcs.n	8007d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d88:	4a2e      	ldr	r2, [pc, #184]	; (8007e44 <xTaskIncrementTick+0x15c>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d8e:	e02f      	b.n	8007df0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fb8d 	bl	80064b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fb84 	bl	80064b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <xTaskIncrementTick+0x160>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <xTaskIncrementTick+0xd8>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a22      	ldr	r2, [pc, #136]	; (8007e48 <xTaskIncrementTick+0x160>)
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <xTaskIncrementTick+0x164>)
 8007dce:	441a      	add	r2, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7fe fb0f 	bl	80063fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <xTaskIncrementTick+0x168>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d3b8      	bcc.n	8007d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dee:	e7b5      	b.n	8007d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007df0:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <xTaskIncrementTick+0x168>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df6:	4915      	ldr	r1, [pc, #84]	; (8007e4c <xTaskIncrementTick+0x164>)
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d901      	bls.n	8007e0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e0c:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <xTaskIncrementTick+0x16c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	e004      	b.n	8007e24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <xTaskIncrementTick+0x170>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	4a0d      	ldr	r2, [pc, #52]	; (8007e58 <xTaskIncrementTick+0x170>)
 8007e22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e24:	697b      	ldr	r3, [r7, #20]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000fa8 	.word	0x20000fa8
 8007e34:	20000f84 	.word	0x20000f84
 8007e38:	20000f38 	.word	0x20000f38
 8007e3c:	20000f3c 	.word	0x20000f3c
 8007e40:	20000f98 	.word	0x20000f98
 8007e44:	20000fa0 	.word	0x20000fa0
 8007e48:	20000f88 	.word	0x20000f88
 8007e4c:	20000ab0 	.word	0x20000ab0
 8007e50:	20000aac 	.word	0x20000aac
 8007e54:	20000f94 	.word	0x20000f94
 8007e58:	20000f90 	.word	0x20000f90

08007e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e62:	4b2a      	ldr	r3, [pc, #168]	; (8007f0c <vTaskSwitchContext+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e6a:	4b29      	ldr	r3, [pc, #164]	; (8007f10 <vTaskSwitchContext+0xb4>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e70:	e046      	b.n	8007f00 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e72:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <vTaskSwitchContext+0xb4>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e78:	4b26      	ldr	r3, [pc, #152]	; (8007f14 <vTaskSwitchContext+0xb8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e010      	b.n	8007ea2 <vTaskSwitchContext+0x46>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10a      	bne.n	8007e9c <vTaskSwitchContext+0x40>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	607b      	str	r3, [r7, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <vTaskSwitchContext+0x3e>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	491d      	ldr	r1, [pc, #116]	; (8007f18 <vTaskSwitchContext+0xbc>)
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0e4      	beq.n	8007e80 <vTaskSwitchContext+0x24>
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <vTaskSwitchContext+0xbc>)
 8007ec2:	4413      	add	r3, r2
 8007ec4:	60bb      	str	r3, [r7, #8]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d104      	bne.n	8007ee6 <vTaskSwitchContext+0x8a>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a0b      	ldr	r2, [pc, #44]	; (8007f1c <vTaskSwitchContext+0xc0>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <vTaskSwitchContext+0xb8>)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <vTaskSwitchContext+0xc0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3354      	adds	r3, #84	; 0x54
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <vTaskSwitchContext+0xc4>)
 8007efe:	6013      	str	r3, [r2, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20000fa8 	.word	0x20000fa8
 8007f10:	20000f94 	.word	0x20000f94
 8007f14:	20000f88 	.word	0x20000f88
 8007f18:	20000ab0 	.word	0x20000ab0
 8007f1c:	20000aac 	.word	0x20000aac
 8007f20:	20000014 	.word	0x20000014

08007f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	60fb      	str	r3, [r7, #12]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <vTaskPlaceOnEventList+0x44>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3318      	adds	r3, #24
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fe fa75 	bl	8006442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f58:	2101      	movs	r1, #1
 8007f5a:	6838      	ldr	r0, [r7, #0]
 8007f5c:	f000 fb7e 	bl	800865c <prvAddCurrentTaskToDelayedList>
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000aac 	.word	0x20000aac

08007f6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	617b      	str	r3, [r7, #20]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f94:	4b0a      	ldr	r3, [pc, #40]	; (8007fc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3318      	adds	r3, #24
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7fe fa2c 	bl	80063fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	68b8      	ldr	r0, [r7, #8]
 8007fb2:	f000 fb53 	bl	800865c <prvAddCurrentTaskToDelayedList>
	}
 8007fb6:	bf00      	nop
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000aac 	.word	0x20000aac

08007fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60fb      	str	r3, [r7, #12]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fa5d 	bl	80064b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffa:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <xTaskRemoveFromEventList+0xb0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d11d      	bne.n	800803e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3304      	adds	r3, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fa54 	bl	80064b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4b19      	ldr	r3, [pc, #100]	; (8008078 <xTaskRemoveFromEventList+0xb4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d903      	bls.n	8008020 <xTaskRemoveFromEventList+0x5c>
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	4a16      	ldr	r2, [pc, #88]	; (8008078 <xTaskRemoveFromEventList+0xb4>)
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4a13      	ldr	r2, [pc, #76]	; (800807c <xTaskRemoveFromEventList+0xb8>)
 800802e:	441a      	add	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f7fe f9df 	bl	80063fa <vListInsertEnd>
 800803c:	e005      	b.n	800804a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3318      	adds	r3, #24
 8008042:	4619      	mov	r1, r3
 8008044:	480e      	ldr	r0, [pc, #56]	; (8008080 <xTaskRemoveFromEventList+0xbc>)
 8008046:	f7fe f9d8 	bl	80063fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <xTaskRemoveFromEventList+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	429a      	cmp	r2, r3
 8008056:	d905      	bls.n	8008064 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008058:	2301      	movs	r3, #1
 800805a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <xTaskRemoveFromEventList+0xc4>)
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e001      	b.n	8008068 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008068:	697b      	ldr	r3, [r7, #20]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000fa8 	.word	0x20000fa8
 8008078:	20000f88 	.word	0x20000f88
 800807c:	20000ab0 	.word	0x20000ab0
 8008080:	20000f40 	.word	0x20000f40
 8008084:	20000aac 	.word	0x20000aac
 8008088:	20000f94 	.word	0x20000f94

0800808c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <vTaskInternalSetTimeOutState+0x24>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <vTaskInternalSetTimeOutState+0x28>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	605a      	str	r2, [r3, #4]
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	20000f98 	.word	0x20000f98
 80080b4:	20000f84 	.word	0x20000f84

080080b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	613b      	str	r3, [r7, #16]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	60fb      	str	r3, [r7, #12]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080fa:	f000 ff7b 	bl	8008ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080fe:	4b1d      	ldr	r3, [pc, #116]	; (8008174 <xTaskCheckForTimeOut+0xbc>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d102      	bne.n	800811e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	e023      	b.n	8008166 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <xTaskCheckForTimeOut+0xc0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d007      	beq.n	800813a <xTaskCheckForTimeOut+0x82>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	429a      	cmp	r2, r3
 8008132:	d302      	bcc.n	800813a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008134:	2301      	movs	r3, #1
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	e015      	b.n	8008166 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	429a      	cmp	r2, r3
 8008142:	d20b      	bcs.n	800815c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff ff9b 	bl	800808c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	e004      	b.n	8008166 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008162:	2301      	movs	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008166:	f000 ff75 	bl	8009054 <vPortExitCritical>

	return xReturn;
 800816a:	69fb      	ldr	r3, [r7, #28]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000f84 	.word	0x20000f84
 8008178:	20000f98 	.word	0x20000f98

0800817c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008180:	4b03      	ldr	r3, [pc, #12]	; (8008190 <vTaskMissedYield+0x14>)
 8008182:	2201      	movs	r2, #1
 8008184:	601a      	str	r2, [r3, #0]
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	20000f94 	.word	0x20000f94

08008194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800819c:	f000 f852 	bl	8008244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <prvIdleTask+0x28>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d9f9      	bls.n	800819c <prvIdleTask+0x8>
			{
				taskYIELD();
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <prvIdleTask+0x2c>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081b8:	e7f0      	b.n	800819c <prvIdleTask+0x8>
 80081ba:	bf00      	nop
 80081bc:	20000ab0 	.word	0x20000ab0
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ca:	2300      	movs	r3, #0
 80081cc:	607b      	str	r3, [r7, #4]
 80081ce:	e00c      	b.n	80081ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <prvInitialiseTaskLists+0x60>)
 80081dc:	4413      	add	r3, r2
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe f8de 	bl	80063a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3301      	adds	r3, #1
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b37      	cmp	r3, #55	; 0x37
 80081ee:	d9ef      	bls.n	80081d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081f0:	480d      	ldr	r0, [pc, #52]	; (8008228 <prvInitialiseTaskLists+0x64>)
 80081f2:	f7fe f8d5 	bl	80063a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081f6:	480d      	ldr	r0, [pc, #52]	; (800822c <prvInitialiseTaskLists+0x68>)
 80081f8:	f7fe f8d2 	bl	80063a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081fc:	480c      	ldr	r0, [pc, #48]	; (8008230 <prvInitialiseTaskLists+0x6c>)
 80081fe:	f7fe f8cf 	bl	80063a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008202:	480c      	ldr	r0, [pc, #48]	; (8008234 <prvInitialiseTaskLists+0x70>)
 8008204:	f7fe f8cc 	bl	80063a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008208:	480b      	ldr	r0, [pc, #44]	; (8008238 <prvInitialiseTaskLists+0x74>)
 800820a:	f7fe f8c9 	bl	80063a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <prvInitialiseTaskLists+0x78>)
 8008210:	4a05      	ldr	r2, [pc, #20]	; (8008228 <prvInitialiseTaskLists+0x64>)
 8008212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <prvInitialiseTaskLists+0x7c>)
 8008216:	4a05      	ldr	r2, [pc, #20]	; (800822c <prvInitialiseTaskLists+0x68>)
 8008218:	601a      	str	r2, [r3, #0]
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000ab0 	.word	0x20000ab0
 8008228:	20000f10 	.word	0x20000f10
 800822c:	20000f24 	.word	0x20000f24
 8008230:	20000f40 	.word	0x20000f40
 8008234:	20000f54 	.word	0x20000f54
 8008238:	20000f6c 	.word	0x20000f6c
 800823c:	20000f38 	.word	0x20000f38
 8008240:	20000f3c 	.word	0x20000f3c

08008244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800824a:	e019      	b.n	8008280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800824c:	f000 fed2 	bl	8008ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <prvCheckTasksWaitingTermination+0x50>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe f929 	bl	80064b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008262:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <prvCheckTasksWaitingTermination+0x54>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3b01      	subs	r3, #1
 8008268:	4a0b      	ldr	r2, [pc, #44]	; (8008298 <prvCheckTasksWaitingTermination+0x54>)
 800826a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800826c:	4b0b      	ldr	r3, [pc, #44]	; (800829c <prvCheckTasksWaitingTermination+0x58>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	4a0a      	ldr	r2, [pc, #40]	; (800829c <prvCheckTasksWaitingTermination+0x58>)
 8008274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008276:	f000 feed 	bl	8009054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f810 	bl	80082a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008280:	4b06      	ldr	r3, [pc, #24]	; (800829c <prvCheckTasksWaitingTermination+0x58>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e1      	bne.n	800824c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000f54 	.word	0x20000f54
 8008298:	20000f80 	.word	0x20000f80
 800829c:	20000f68 	.word	0x20000f68

080082a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3354      	adds	r3, #84	; 0x54
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 f9f7 	bl	80096a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d108      	bne.n	80082ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 f885 	bl	80093d0 <vPortFree>
				vPortFree( pxTCB );
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f882 	bl	80093d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082cc:	e018      	b.n	8008300 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d103      	bne.n	80082e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f879 	bl	80093d0 <vPortFree>
	}
 80082de:	e00f      	b.n	8008300 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d00a      	beq.n	8008300 <prvDeleteTCB+0x60>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60fb      	str	r3, [r7, #12]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <prvDeleteTCB+0x5e>
	}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800830e:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <prvResetNextTaskUnblockTime+0x38>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <prvResetNextTaskUnblockTime+0x3c>)
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
 800831e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008320:	e008      	b.n	8008334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <prvResetNextTaskUnblockTime+0x38>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4a04      	ldr	r2, [pc, #16]	; (8008344 <prvResetNextTaskUnblockTime+0x3c>)
 8008332:	6013      	str	r3, [r2, #0]
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20000f38 	.word	0x20000f38
 8008344:	20000fa0 	.word	0x20000fa0

08008348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <xTaskGetSchedulerState+0x34>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008356:	2301      	movs	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e008      	b.n	800836e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835c:	4b08      	ldr	r3, [pc, #32]	; (8008380 <xTaskGetSchedulerState+0x38>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008364:	2302      	movs	r3, #2
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	e001      	b.n	800836e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800836e:	687b      	ldr	r3, [r7, #4]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	20000f8c 	.word	0x20000f8c
 8008380:	20000fa8 	.word	0x20000fa8

08008384 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d051      	beq.n	800843e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d241      	bcs.n	800842c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db06      	blt.n	80083be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b0:	4b25      	ldr	r3, [pc, #148]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6959      	ldr	r1, [r3, #20]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a1f      	ldr	r2, [pc, #124]	; (800844c <xTaskPriorityInherit+0xc8>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d122      	bne.n	800841c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe f86a 	bl	80064b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <xTaskPriorityInherit+0xcc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d903      	bls.n	80083fe <xTaskPriorityInherit+0x7a>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <xTaskPriorityInherit+0xcc>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <xTaskPriorityInherit+0xc8>)
 800840c:	441a      	add	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fd fff0 	bl	80063fa <vListInsertEnd>
 800841a:	e004      	b.n	8008426 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <xTaskPriorityInherit+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e008      	b.n	800843e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <xTaskPriorityInherit+0xc4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008436:	429a      	cmp	r2, r3
 8008438:	d201      	bcs.n	800843e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800843a:	2301      	movs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800843e:	68fb      	ldr	r3, [r7, #12]
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000aac 	.word	0x20000aac
 800844c:	20000ab0 	.word	0x20000ab0
 8008450:	20000f88 	.word	0x20000f88

08008454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d056      	beq.n	8008518 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <xTaskPriorityDisinherit+0xd0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d00a      	beq.n	800848a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60bb      	str	r3, [r7, #8]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d02c      	beq.n	8008518 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d128      	bne.n	8008518 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd fff2 	bl	80064b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskPriorityDisinherit+0xd4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d903      	bls.n	80084f8 <xTaskPriorityDisinherit+0xa4>
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	4a0c      	ldr	r2, [pc, #48]	; (8008528 <xTaskPriorityDisinherit+0xd4>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <xTaskPriorityDisinherit+0xd8>)
 8008506:	441a      	add	r2, r3
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	3304      	adds	r3, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7fd ff73 	bl	80063fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000aac 	.word	0x20000aac
 8008528:	20000f88 	.word	0x20000f88
 800852c:	20000ab0 	.word	0x20000ab0

08008530 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800853e:	2301      	movs	r3, #1
 8008540:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d06a      	beq.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d902      	bls.n	8008576 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	e002      	b.n	800857c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	429a      	cmp	r2, r3
 8008584:	d04b      	beq.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	429a      	cmp	r2, r3
 800858e:	d146      	bne.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	429a      	cmp	r2, r3
 8008598:	d10a      	bne.n	80085b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60bb      	str	r3, [r7, #8]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db04      	blt.n	80085ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	6959      	ldr	r1, [r3, #20]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085de:	4413      	add	r3, r2
 80085e0:	4299      	cmp	r1, r3
 80085e2:	d11c      	bne.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd ff63 	bl	80064b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a07      	ldr	r2, [pc, #28]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008610:	441a      	add	r2, r3
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd feee 	bl	80063fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800861e:	bf00      	nop
 8008620:	3720      	adds	r7, #32
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000aac 	.word	0x20000aac
 800862c:	20000ab0 	.word	0x20000ab0
 8008630:	20000f88 	.word	0x20000f88

08008634 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008646:	3201      	adds	r2, #1
 8008648:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800864a:	4b03      	ldr	r3, [pc, #12]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 800864c:	681b      	ldr	r3, [r3, #0]
	}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	20000aac 	.word	0x20000aac

0800865c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008666:	4b21      	ldr	r3, [pc, #132]	; (80086ec <prvAddCurrentTaskToDelayedList+0x90>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800866c:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3304      	adds	r3, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd ff1e 	bl	80064b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	d10a      	bne.n	8008696 <prvAddCurrentTaskToDelayedList+0x3a>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3304      	adds	r3, #4
 800868c:	4619      	mov	r1, r3
 800868e:	4819      	ldr	r0, [pc, #100]	; (80086f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008690:	f7fd feb3 	bl	80063fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008694:	e026      	b.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800869e:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d209      	bcs.n	80086c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fd fec1 	bl	8006442 <vListInsert>
}
 80086c0:	e010      	b.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fd feb7 	bl	8006442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d202      	bcs.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086de:	4a08      	ldr	r2, [pc, #32]	; (8008700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6013      	str	r3, [r2, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20000f84 	.word	0x20000f84
 80086f0:	20000aac 	.word	0x20000aac
 80086f4:	20000f6c 	.word	0x20000f6c
 80086f8:	20000f3c 	.word	0x20000f3c
 80086fc:	20000f38 	.word	0x20000f38
 8008700:	20000fa0 	.word	0x20000fa0

08008704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800870e:	f000 fb07 	bl	8008d20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008712:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <xTimerCreateTimerTask+0x80>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d021      	beq.n	800875e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008722:	1d3a      	adds	r2, r7, #4
 8008724:	f107 0108 	add.w	r1, r7, #8
 8008728:	f107 030c 	add.w	r3, r7, #12
 800872c:	4618      	mov	r0, r3
 800872e:	f7fd fe1d 	bl	800636c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	9202      	str	r2, [sp, #8]
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	2302      	movs	r3, #2
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	460a      	mov	r2, r1
 8008744:	4910      	ldr	r1, [pc, #64]	; (8008788 <xTimerCreateTimerTask+0x84>)
 8008746:	4811      	ldr	r0, [pc, #68]	; (800878c <xTimerCreateTimerTask+0x88>)
 8008748:	f7fe ff38 	bl	80075bc <xTaskCreateStatic>
 800874c:	4603      	mov	r3, r0
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <xTimerCreateTimerTask+0x8c>)
 8008750:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <xTimerCreateTimerTask+0x8c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	613b      	str	r3, [r7, #16]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800877a:	697b      	ldr	r3, [r7, #20]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000fdc 	.word	0x20000fdc
 8008788:	08009880 	.word	0x08009880
 800878c:	080088c9 	.word	0x080088c9
 8008790:	20000fe0 	.word	0x20000fe0

08008794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	623b      	str	r3, [r7, #32]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087c2:	4b1a      	ldr	r3, [pc, #104]	; (800882c <xTimerGenericCommand+0x98>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d02a      	beq.n	8008820 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b05      	cmp	r3, #5
 80087da:	dc18      	bgt.n	800880e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087dc:	f7ff fdb4 	bl	8008348 <xTaskGetSchedulerState>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d109      	bne.n	80087fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <xTimerGenericCommand+0x98>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f107 0110 	add.w	r1, r7, #16
 80087ee:	2300      	movs	r3, #0
 80087f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f2:	f7fe f87d 	bl	80068f0 <xQueueGenericSend>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24
 80087f8:	e012      	b.n	8008820 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <xTimerGenericCommand+0x98>)
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f107 0110 	add.w	r1, r7, #16
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	f7fe f873 	bl	80068f0 <xQueueGenericSend>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
 800880c:	e008      	b.n	8008820 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <xTimerGenericCommand+0x98>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f107 0110 	add.w	r1, r7, #16
 8008816:	2300      	movs	r3, #0
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	f7fe f967 	bl	8006aec <xQueueGenericSendFromISR>
 800881e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008822:	4618      	mov	r0, r3
 8008824:	3728      	adds	r7, #40	; 0x28
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000fdc 	.word	0x20000fdc

08008830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af02      	add	r7, sp, #8
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <prvProcessExpiredTimer+0x94>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fd fe33 	bl	80064b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d022      	beq.n	80088a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	18d1      	adds	r1, r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	6978      	ldr	r0, [r7, #20]
 800886a:	f000 f8d1 	bl	8008a10 <prvInsertTimerInActiveList>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01f      	beq.n	80088b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008874:	2300      	movs	r3, #0
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	6978      	ldr	r0, [r7, #20]
 8008880:	f7ff ff88 	bl	8008794 <xTimerGenericCommand>
 8008884:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d113      	bne.n	80088b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	4798      	blx	r3
}
 80088bc:	bf00      	nop
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000fd4 	.word	0x20000fd4

080088c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f857 	bl	8008988 <prvGetNextExpireTime>
 80088da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f803 	bl	80088ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088e6:	f000 f8d5 	bl	8008a94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088ea:	e7f1      	b.n	80088d0 <prvTimerTask+0x8>

080088ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088f6:	f7ff f93b 	bl	8007b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f866 	bl	80089d0 <prvSampleTimeNow>
 8008904:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d130      	bne.n	800896e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	429a      	cmp	r2, r3
 8008918:	d806      	bhi.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800891a:	f7ff f937 	bl	8007b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ff85 	bl	8008830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008926:	e024      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d008      	beq.n	8008940 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <prvProcessTimerOrBlockTask+0x90>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <prvProcessTimerOrBlockTask+0x50>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <prvProcessTimerOrBlockTask+0x52>
 800893c:	2300      	movs	r3, #0
 800893e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <prvProcessTimerOrBlockTask+0x94>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fe01 	bl	8007554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008952:	f7ff f91b 	bl	8007b8c <xTaskResumeAll>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvProcessTimerOrBlockTask+0x98>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
}
 800896c:	e001      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800896e:	f7ff f90d 	bl	8007b8c <xTaskResumeAll>
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000fd8 	.word	0x20000fd8
 8008980:	20000fdc 	.word	0x20000fdc
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <prvGetNextExpireTime+0x44>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <prvGetNextExpireTime+0x16>
 800899a:	2201      	movs	r2, #1
 800899c:	e000      	b.n	80089a0 <prvGetNextExpireTime+0x18>
 800899e:	2200      	movs	r2, #0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ac:	4b07      	ldr	r3, [pc, #28]	; (80089cc <prvGetNextExpireTime+0x44>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e001      	b.n	80089bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000fd4 	.word	0x20000fd4

080089d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089d8:	f7ff f976 	bl	8007cc8 <xTaskGetTickCount>
 80089dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d205      	bcs.n	80089f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089e8:	f000 f936 	bl	8008c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e002      	b.n	80089fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000fe4 	.word	0x20000fe4

08008a10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d812      	bhi.n	8008a5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e01b      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <prvInsertTimerInActiveList+0x7c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7fd fcf4 	bl	8006442 <vListInsert>
 8008a5a:	e012      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d206      	bcs.n	8008a72 <prvInsertTimerInActiveList+0x62>
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e007      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <prvInsertTimerInActiveList+0x80>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fd fce0 	bl	8006442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a82:	697b      	ldr	r3, [r7, #20]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000fd8 	.word	0x20000fd8
 8008a90:	20000fd4 	.word	0x20000fd4

08008a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08e      	sub	sp, #56	; 0x38
 8008a98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a9a:	e0ca      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da18      	bge.n	8008ad4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aca:	6850      	ldr	r0, [r2, #4]
 8008acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ace:	6892      	ldr	r2, [r2, #8]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f2c0 80aa 	blt.w	8008c30 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fd fce1 	bl	80064b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af2:	463b      	mov	r3, r7
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff6b 	bl	80089d0 <prvSampleTimeNow>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	f200 8097 	bhi.w	8008c32 <prvProcessReceivedCommands+0x19e>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <prvProcessReceivedCommands+0x78>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b35 	.word	0x08008b35
 8008b18:	08008ba9 	.word	0x08008ba9
 8008b1c:	08008bbd 	.word	0x08008bbd
 8008b20:	08008c07 	.word	0x08008c07
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b35 	.word	0x08008b35
 8008b2c:	08008ba9 	.word	0x08008ba9
 8008b30:	08008bbd 	.word	0x08008bbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	18d1      	adds	r1, r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b54:	f7ff ff5c 	bl	8008a10 <prvInsertTimerInActiveList>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d069      	beq.n	8008c32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05e      	beq.n	8008c32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	441a      	add	r2, r3
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2300      	movs	r3, #0
 8008b82:	2100      	movs	r1, #0
 8008b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b86:	f7ff fe05 	bl	8008794 <xTimerGenericCommand>
 8008b8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d14f      	bne.n	8008c32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	61bb      	str	r3, [r7, #24]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bba:	e03a      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	617b      	str	r3, [r7, #20]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	18d1      	adds	r1, r2, r3
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c00:	f7ff ff06 	bl	8008a10 <prvInsertTimerInActiveList>
					break;
 8008c04:	e015      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c16:	f000 fbdb 	bl	80093d0 <vPortFree>
 8008c1a:	e00a      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c2e:	e000      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <prvProcessReceivedCommands+0x1c0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	1d39      	adds	r1, r7, #4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe f87e 	bl	8006d3c <xQueueReceive>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f47f af2a 	bne.w	8008a9c <prvProcessReceivedCommands+0x8>
	}
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3730      	adds	r7, #48	; 0x30
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000fdc 	.word	0x20000fdc

08008c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c5e:	e048      	b.n	8008cf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c60:	4b2d      	ldr	r3, [pc, #180]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6a:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fd fc1b 	bl	80064b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02e      	beq.n	8008cf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d90e      	bls.n	8008cc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb2:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7fd fbc0 	bl	8006442 <vListInsert>
 8008cc2:	e016      	b.n	8008cf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	2100      	movs	r1, #0
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fd60 	bl	8008794 <xTimerGenericCommand>
 8008cd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	603b      	str	r3, [r7, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1b1      	bne.n	8008c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <prvSwitchTimerLists+0xc4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008d08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d0a:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <prvSwitchTimerLists+0xc4>)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	6013      	str	r3, [r2, #0]
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20000fd4 	.word	0x20000fd4
 8008d1c:	20000fd8 	.word	0x20000fd8

08008d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d26:	f000 f965 	bl	8008ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d120      	bne.n	8008d74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d32:	4814      	ldr	r0, [pc, #80]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d34:	f7fd fb34 	bl	80063a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d38:	4813      	ldr	r0, [pc, #76]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d3a:	f7fd fb31 	bl	80063a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <prvCheckForValidListAndQueue+0x6c>)
 8008d40:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <prvCheckForValidListAndQueue+0x70>)
 8008d46:	4a10      	ldr	r2, [pc, #64]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <prvCheckForValidListAndQueue+0x74>)
 8008d50:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <prvCheckForValidListAndQueue+0x78>)
 8008d52:	2110      	movs	r1, #16
 8008d54:	200a      	movs	r0, #10
 8008d56:	f7fd fc3f 	bl	80065d8 <xQueueGenericCreateStatic>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	490b      	ldr	r1, [pc, #44]	; (8008d9c <prvCheckForValidListAndQueue+0x7c>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fb9c 	bl	80074ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d74:	f000 f96e 	bl	8009054 <vPortExitCritical>
}
 8008d78:	bf00      	nop
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000fdc 	.word	0x20000fdc
 8008d84:	20000fac 	.word	0x20000fac
 8008d88:	20000fc0 	.word	0x20000fc0
 8008d8c:	20000fd4 	.word	0x20000fd4
 8008d90:	20000fd8 	.word	0x20000fd8
 8008d94:	20001088 	.word	0x20001088
 8008d98:	20000fe8 	.word	0x20000fe8
 8008d9c:	08009888 	.word	0x08009888

08008da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3b04      	subs	r3, #4
 8008db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dd0:	4a0c      	ldr	r2, [pc, #48]	; (8008e04 <pxPortInitialiseStack+0x64>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3b14      	subs	r3, #20
 8008dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f06f 0202 	mvn.w	r2, #2
 8008dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3b20      	subs	r3, #32
 8008df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008df6:	68fb      	ldr	r3, [r7, #12]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	08008e09 	.word	0x08008e09

08008e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <prvTaskExitError+0x54>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d00a      	beq.n	8008e32 <prvTaskExitError+0x2a>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60fb      	str	r3, [r7, #12]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <prvTaskExitError+0x28>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60bb      	str	r3, [r7, #8]
}
 8008e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e46:	bf00      	nop
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0fc      	beq.n	8008e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20000010 	.word	0x20000010

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	4770      	bx	lr
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst2>:
 8008e80:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e88:	4808      	ldr	r0, [pc, #32]	; (8008eac <prvPortStartFirstTask+0x24>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8814 	msr	CONTROL, r0
 8008e9a:	b662      	cpsie	i
 8008e9c:	b661      	cpsie	f
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	df00      	svc	0
 8008ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eaa:	bf00      	nop
 8008eac:	e000ed08 	.word	0xe000ed08

08008eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eb6:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a46      	ldr	r2, [pc, #280]	; (8008fd4 <xPortStartScheduler+0x124>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10a      	bne.n	8008ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <xPortStartScheduler+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <xPortStartScheduler+0x12c>)
 8008ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <xPortStartScheduler+0x130>)
 8008f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f1e:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f24:	e009      	b.n	8008f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f26:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d0ef      	beq.n	8008f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1c3 0307 	rsb	r3, r3, #7
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d00a      	beq.n	8008f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f9e:	f000 f8dd 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	; (8008fec <xPortStartScheduler+0x13c>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fa8:	f000 f8fc 	bl	80091a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fac:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fb8:	f7ff ff66 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fbc:	f7fe ff4e 	bl	8007e5c <vTaskSwitchContext>
	prvTaskExitError();
 8008fc0:	f7ff ff22 	bl	8008e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	e000ed00 	.word	0xe000ed00
 8008fd4:	410fc271 	.word	0x410fc271
 8008fd8:	410fc270 	.word	0x410fc270
 8008fdc:	e000e400 	.word	0xe000e400
 8008fe0:	200010d8 	.word	0x200010d8
 8008fe4:	200010dc 	.word	0x200010dc
 8008fe8:	e000ed20 	.word	0xe000ed20
 8008fec:	20000010 	.word	0x20000010
 8008ff0:	e000ef34 	.word	0xe000ef34

08008ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	607b      	str	r3, [r7, #4]
}
 800900c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <vPortEnterCritical+0x58>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a0d      	ldr	r2, [pc, #52]	; (800904c <vPortEnterCritical+0x58>)
 8009016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009018:	4b0c      	ldr	r3, [pc, #48]	; (800904c <vPortEnterCritical+0x58>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10f      	bne.n	8009040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortEnterCritical+0x5c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <vPortEnterCritical+0x4c>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vPortEnterCritical+0x4a>
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000010 	.word	0x20000010
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <vPortExitCritical+0x50>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <vPortExitCritical+0x24>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	607b      	str	r3, [r7, #4]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <vPortExitCritical+0x50>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <vPortExitCritical+0x50>)
 8009080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <vPortExitCritical+0x42>
 800908a:	2300      	movs	r3, #0
 800908c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f383 8811 	msr	BASEPRI, r3
}
 8009094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000010 	.word	0x20000010
	...

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f7fe febc 	bl	8007e5c <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7fe fdd9 	bl	8007ce8 <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <xPortSysTickHandler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	; (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000004 	.word	0x20000004
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091b2:	bf00      	nop
 80091b4:	e000ed88 	.word	0xe000ed88

080091b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d914      	bls.n	80091f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ca:	4a17      	ldr	r2, [pc, #92]	; (8009228 <vPortValidateInterruptPriority+0x70>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <vPortValidateInterruptPriority+0x74>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20a      	bcs.n	80091f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <vPortValidateInterruptPriority+0x78>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091fc:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <vPortValidateInterruptPriority+0x7c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d90a      	bls.n	800921a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	603b      	str	r3, [r7, #0]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <vPortValidateInterruptPriority+0x60>
	}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	e000e3f0 	.word	0xe000e3f0
 800922c:	200010d8 	.word	0x200010d8
 8009230:	e000ed0c 	.word	0xe000ed0c
 8009234:	200010dc 	.word	0x200010dc

08009238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009244:	f7fe fc94 	bl	8007b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009248:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <pvPortMalloc+0x180>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009250:	f000 f920 	bl	8009494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009254:	4b59      	ldr	r3, [pc, #356]	; (80093bc <pvPortMalloc+0x184>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4013      	ands	r3, r2
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8093 	bne.w	8009388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01d      	beq.n	80092a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009268:	2208      	movs	r2, #8
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d014      	beq.n	80092a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f023 0307 	bic.w	r3, r3, #7
 8009280:	3308      	adds	r3, #8
 8009282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <pvPortMalloc+0x6c>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	617b      	str	r3, [r7, #20]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d06e      	beq.n	8009388 <pvPortMalloc+0x150>
 80092aa:	4b45      	ldr	r3, [pc, #276]	; (80093c0 <pvPortMalloc+0x188>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d869      	bhi.n	8009388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092b4:	4b43      	ldr	r3, [pc, #268]	; (80093c4 <pvPortMalloc+0x18c>)
 80092b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092b8:	4b42      	ldr	r3, [pc, #264]	; (80093c4 <pvPortMalloc+0x18c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092be:	e004      	b.n	80092ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d903      	bls.n	80092dc <pvPortMalloc+0xa4>
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f1      	bne.n	80092c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <pvPortMalloc+0x180>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d050      	beq.n	8009388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2208      	movs	r2, #8
 80092ec:	4413      	add	r3, r2
 80092ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	2308      	movs	r3, #8
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	429a      	cmp	r2, r3
 8009306:	d91f      	bls.n	8009348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <pvPortMalloc+0xf8>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	613b      	str	r3, [r7, #16]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009342:	69b8      	ldr	r0, [r7, #24]
 8009344:	f000 f908 	bl	8009558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <pvPortMalloc+0x188>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <pvPortMalloc+0x188>)
 8009354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <pvPortMalloc+0x188>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <pvPortMalloc+0x190>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d203      	bcs.n	800936a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009362:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <pvPortMalloc+0x188>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <pvPortMalloc+0x190>)
 8009368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <pvPortMalloc+0x184>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	431a      	orrs	r2, r3
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <pvPortMalloc+0x194>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a11      	ldr	r2, [pc, #68]	; (80093cc <pvPortMalloc+0x194>)
 8009386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009388:	f7fe fc00 	bl	8007b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <pvPortMalloc+0x174>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60fb      	str	r3, [r7, #12]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <pvPortMalloc+0x172>
	return pvReturn;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3728      	adds	r7, #40	; 0x28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20001ca0 	.word	0x20001ca0
 80093bc:	20001cb4 	.word	0x20001cb4
 80093c0:	20001ca4 	.word	0x20001ca4
 80093c4:	20001c98 	.word	0x20001c98
 80093c8:	20001ca8 	.word	0x20001ca8
 80093cc:	20001cac 	.word	0x20001cac

080093d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d04d      	beq.n	800947e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093e2:	2308      	movs	r3, #8
 80093e4:	425b      	negs	r3, r3
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4413      	add	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	4b24      	ldr	r3, [pc, #144]	; (8009488 <vPortFree+0xb8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <vPortFree+0x44>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	60fb      	str	r3, [r7, #12]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <vPortFree+0x62>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	60bb      	str	r3, [r7, #8]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <vPortFree+0xb8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01e      	beq.n	800947e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11a      	bne.n	800947e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <vPortFree+0xb8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	43db      	mvns	r3, r3
 8009452:	401a      	ands	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009458:	f7fe fb8a 	bl	8007b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b0a      	ldr	r3, [pc, #40]	; (800948c <vPortFree+0xbc>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4413      	add	r3, r2
 8009466:	4a09      	ldr	r2, [pc, #36]	; (800948c <vPortFree+0xbc>)
 8009468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f000 f874 	bl	8009558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <vPortFree+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vPortFree+0xc0>)
 8009478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800947a:	f7fe fb87 	bl	8007b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800947e:	bf00      	nop
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001cb4 	.word	0x20001cb4
 800948c:	20001ca4 	.word	0x20001ca4
 8009490:	20001cb0 	.word	0x20001cb0

08009494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800949a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800949e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <prvHeapInit+0xac>)
 80094a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <prvHeapInit+0xac>)
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <prvHeapInit+0xb0>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <prvHeapInit+0xb0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094e0:	2208      	movs	r2, #8
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <prvHeapInit+0xb4>)
 80094f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <prvHeapInit+0xb4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <prvHeapInit+0xb4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <prvHeapInit+0xb4>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <prvHeapInit+0xb8>)
 8009522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <prvHeapInit+0xbc>)
 800952a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <prvHeapInit+0xc0>)
 800952e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	200010e0 	.word	0x200010e0
 8009544:	20001c98 	.word	0x20001c98
 8009548:	20001ca0 	.word	0x20001ca0
 800954c:	20001ca8 	.word	0x20001ca8
 8009550:	20001ca4 	.word	0x20001ca4
 8009554:	20001cb4 	.word	0x20001cb4

08009558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009560:	4b28      	ldr	r3, [pc, #160]	; (8009604 <prvInsertBlockIntoFreeList+0xac>)
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e002      	b.n	800956c <prvInsertBlockIntoFreeList+0x14>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d8f7      	bhi.n	8009566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d108      	bne.n	800959a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d118      	bne.n	80095e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00d      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e008      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e003      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d002      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20001c98 	.word	0x20001c98
 8009608:	20001ca0 	.word	0x20001ca0

0800960c <__libc_init_array>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4d0d      	ldr	r5, [pc, #52]	; (8009644 <__libc_init_array+0x38>)
 8009610:	4c0d      	ldr	r4, [pc, #52]	; (8009648 <__libc_init_array+0x3c>)
 8009612:	1b64      	subs	r4, r4, r5
 8009614:	10a4      	asrs	r4, r4, #2
 8009616:	2600      	movs	r6, #0
 8009618:	42a6      	cmp	r6, r4
 800961a:	d109      	bne.n	8009630 <__libc_init_array+0x24>
 800961c:	4d0b      	ldr	r5, [pc, #44]	; (800964c <__libc_init_array+0x40>)
 800961e:	4c0c      	ldr	r4, [pc, #48]	; (8009650 <__libc_init_array+0x44>)
 8009620:	f000 f8f2 	bl	8009808 <_init>
 8009624:	1b64      	subs	r4, r4, r5
 8009626:	10a4      	asrs	r4, r4, #2
 8009628:	2600      	movs	r6, #0
 800962a:	42a6      	cmp	r6, r4
 800962c:	d105      	bne.n	800963a <__libc_init_array+0x2e>
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	f855 3b04 	ldr.w	r3, [r5], #4
 8009634:	4798      	blx	r3
 8009636:	3601      	adds	r6, #1
 8009638:	e7ee      	b.n	8009618 <__libc_init_array+0xc>
 800963a:	f855 3b04 	ldr.w	r3, [r5], #4
 800963e:	4798      	blx	r3
 8009640:	3601      	adds	r6, #1
 8009642:	e7f2      	b.n	800962a <__libc_init_array+0x1e>
 8009644:	080099f0 	.word	0x080099f0
 8009648:	080099f0 	.word	0x080099f0
 800964c:	080099f0 	.word	0x080099f0
 8009650:	080099f4 	.word	0x080099f4

08009654 <__retarget_lock_acquire_recursive>:
 8009654:	4770      	bx	lr

08009656 <__retarget_lock_release_recursive>:
 8009656:	4770      	bx	lr

08009658 <memcpy>:
 8009658:	440a      	add	r2, r1
 800965a:	4291      	cmp	r1, r2
 800965c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009660:	d100      	bne.n	8009664 <memcpy+0xc>
 8009662:	4770      	bx	lr
 8009664:	b510      	push	{r4, lr}
 8009666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800966a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800966e:	4291      	cmp	r1, r2
 8009670:	d1f9      	bne.n	8009666 <memcpy+0xe>
 8009672:	bd10      	pop	{r4, pc}

08009674 <memset>:
 8009674:	4402      	add	r2, r0
 8009676:	4603      	mov	r3, r0
 8009678:	4293      	cmp	r3, r2
 800967a:	d100      	bne.n	800967e <memset+0xa>
 800967c:	4770      	bx	lr
 800967e:	f803 1b01 	strb.w	r1, [r3], #1
 8009682:	e7f9      	b.n	8009678 <memset+0x4>

08009684 <cleanup_glue>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	6809      	ldr	r1, [r1, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	b109      	cbz	r1, 8009692 <cleanup_glue+0xe>
 800968e:	f7ff fff9 	bl	8009684 <cleanup_glue>
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969a:	f000 b869 	b.w	8009770 <_free_r>
	...

080096a0 <_reclaim_reent>:
 80096a0:	4b2c      	ldr	r3, [pc, #176]	; (8009754 <_reclaim_reent+0xb4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4283      	cmp	r3, r0
 80096a6:	b570      	push	{r4, r5, r6, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	d051      	beq.n	8009750 <_reclaim_reent+0xb0>
 80096ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80096ae:	b143      	cbz	r3, 80096c2 <_reclaim_reent+0x22>
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d14a      	bne.n	800974c <_reclaim_reent+0xac>
 80096b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b8:	6819      	ldr	r1, [r3, #0]
 80096ba:	b111      	cbz	r1, 80096c2 <_reclaim_reent+0x22>
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 f857 	bl	8009770 <_free_r>
 80096c2:	6961      	ldr	r1, [r4, #20]
 80096c4:	b111      	cbz	r1, 80096cc <_reclaim_reent+0x2c>
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f852 	bl	8009770 <_free_r>
 80096cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096ce:	b111      	cbz	r1, 80096d6 <_reclaim_reent+0x36>
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f84d 	bl	8009770 <_free_r>
 80096d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096d8:	b111      	cbz	r1, 80096e0 <_reclaim_reent+0x40>
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f848 	bl	8009770 <_free_r>
 80096e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096e2:	b111      	cbz	r1, 80096ea <_reclaim_reent+0x4a>
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 f843 	bl	8009770 <_free_r>
 80096ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096ec:	b111      	cbz	r1, 80096f4 <_reclaim_reent+0x54>
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 f83e 	bl	8009770 <_free_r>
 80096f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096f6:	b111      	cbz	r1, 80096fe <_reclaim_reent+0x5e>
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 f839 	bl	8009770 <_free_r>
 80096fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009700:	b111      	cbz	r1, 8009708 <_reclaim_reent+0x68>
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f834 	bl	8009770 <_free_r>
 8009708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970a:	b111      	cbz	r1, 8009712 <_reclaim_reent+0x72>
 800970c:	4620      	mov	r0, r4
 800970e:	f000 f82f 	bl	8009770 <_free_r>
 8009712:	69a3      	ldr	r3, [r4, #24]
 8009714:	b1e3      	cbz	r3, 8009750 <_reclaim_reent+0xb0>
 8009716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009718:	4620      	mov	r0, r4
 800971a:	4798      	blx	r3
 800971c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800971e:	b1b9      	cbz	r1, 8009750 <_reclaim_reent+0xb0>
 8009720:	4620      	mov	r0, r4
 8009722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009726:	f7ff bfad 	b.w	8009684 <cleanup_glue>
 800972a:	5949      	ldr	r1, [r1, r5]
 800972c:	b941      	cbnz	r1, 8009740 <_reclaim_reent+0xa0>
 800972e:	3504      	adds	r5, #4
 8009730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009732:	2d80      	cmp	r5, #128	; 0x80
 8009734:	68d9      	ldr	r1, [r3, #12]
 8009736:	d1f8      	bne.n	800972a <_reclaim_reent+0x8a>
 8009738:	4620      	mov	r0, r4
 800973a:	f000 f819 	bl	8009770 <_free_r>
 800973e:	e7ba      	b.n	80096b6 <_reclaim_reent+0x16>
 8009740:	680e      	ldr	r6, [r1, #0]
 8009742:	4620      	mov	r0, r4
 8009744:	f000 f814 	bl	8009770 <_free_r>
 8009748:	4631      	mov	r1, r6
 800974a:	e7ef      	b.n	800972c <_reclaim_reent+0x8c>
 800974c:	2500      	movs	r5, #0
 800974e:	e7ef      	b.n	8009730 <_reclaim_reent+0x90>
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	bf00      	nop
 8009754:	20000014 	.word	0x20000014

08009758 <__malloc_lock>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__malloc_lock+0x8>)
 800975a:	f7ff bf7b 	b.w	8009654 <__retarget_lock_acquire_recursive>
 800975e:	bf00      	nop
 8009760:	20001cb8 	.word	0x20001cb8

08009764 <__malloc_unlock>:
 8009764:	4801      	ldr	r0, [pc, #4]	; (800976c <__malloc_unlock+0x8>)
 8009766:	f7ff bf76 	b.w	8009656 <__retarget_lock_release_recursive>
 800976a:	bf00      	nop
 800976c:	20001cb8 	.word	0x20001cb8

08009770 <_free_r>:
 8009770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009772:	2900      	cmp	r1, #0
 8009774:	d044      	beq.n	8009800 <_free_r+0x90>
 8009776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800977a:	9001      	str	r0, [sp, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f1a1 0404 	sub.w	r4, r1, #4
 8009782:	bfb8      	it	lt
 8009784:	18e4      	addlt	r4, r4, r3
 8009786:	f7ff ffe7 	bl	8009758 <__malloc_lock>
 800978a:	4a1e      	ldr	r2, [pc, #120]	; (8009804 <_free_r+0x94>)
 800978c:	9801      	ldr	r0, [sp, #4]
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	b933      	cbnz	r3, 80097a0 <_free_r+0x30>
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	6014      	str	r4, [r2, #0]
 8009796:	b003      	add	sp, #12
 8009798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800979c:	f7ff bfe2 	b.w	8009764 <__malloc_unlock>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d908      	bls.n	80097b6 <_free_r+0x46>
 80097a4:	6825      	ldr	r5, [r4, #0]
 80097a6:	1961      	adds	r1, r4, r5
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf01      	itttt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	1949      	addeq	r1, r1, r5
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	e7ed      	b.n	8009792 <_free_r+0x22>
 80097b6:	461a      	mov	r2, r3
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b10b      	cbz	r3, 80097c0 <_free_r+0x50>
 80097bc:	42a3      	cmp	r3, r4
 80097be:	d9fa      	bls.n	80097b6 <_free_r+0x46>
 80097c0:	6811      	ldr	r1, [r2, #0]
 80097c2:	1855      	adds	r5, r2, r1
 80097c4:	42a5      	cmp	r5, r4
 80097c6:	d10b      	bne.n	80097e0 <_free_r+0x70>
 80097c8:	6824      	ldr	r4, [r4, #0]
 80097ca:	4421      	add	r1, r4
 80097cc:	1854      	adds	r4, r2, r1
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	6011      	str	r1, [r2, #0]
 80097d2:	d1e0      	bne.n	8009796 <_free_r+0x26>
 80097d4:	681c      	ldr	r4, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	6053      	str	r3, [r2, #4]
 80097da:	4421      	add	r1, r4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	e7da      	b.n	8009796 <_free_r+0x26>
 80097e0:	d902      	bls.n	80097e8 <_free_r+0x78>
 80097e2:	230c      	movs	r3, #12
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	e7d6      	b.n	8009796 <_free_r+0x26>
 80097e8:	6825      	ldr	r5, [r4, #0]
 80097ea:	1961      	adds	r1, r4, r5
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf04      	itt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	bf04      	itt	eq
 80097f8:	1949      	addeq	r1, r1, r5
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	6054      	str	r4, [r2, #4]
 80097fe:	e7ca      	b.n	8009796 <_free_r+0x26>
 8009800:	b003      	add	sp, #12
 8009802:	bd30      	pop	{r4, r5, pc}
 8009804:	20001cbc 	.word	0x20001cbc

08009808 <_init>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr

08009814 <_fini>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr
