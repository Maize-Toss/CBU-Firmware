
CBU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cbc  08009cbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc4  08009cc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc8  20000074  08009d40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c3c  08009d40  00021c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca1a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a53  00000000  00000000  0003cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00041b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ccb  00000000  00000000  00043040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001811b  00000000  00000000  00047d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec828  00000000  00000000  0005fe26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c64e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  0014c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ac0 	.word	0x08009ac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009ac0 	.word	0x08009ac0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc4:	f000 fce8 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc8:	f000 f854 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dcc:	f000 f98a 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd0:	f000 f96a 	bl	80010a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dd4:	f000 f938 	bl	8001048 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000dd8:	f000 f906 	bl	8000fe8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ddc:	f000 f89c 	bl	8000f18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000de0:	f004 fec0 	bl	8005b64 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BluetoothRX */
  BluetoothRXHandle = osSemaphoreNew(1, 1, &BluetoothRX_attributes);
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <main+0x7c>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2001      	movs	r0, #1
 8000dea:	f004 ffb2 	bl	8005d52 <osSemaphoreNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <main+0x80>)
 8000df2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <main+0x84>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <main+0x88>)
 8000dfa:	f004 fefd 	bl	8005bf8 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <main+0x8c>)
 8000e02:	6013      	str	r3, [r2, #0]

  /* creation of readRFIDTask */
  readRFIDTaskHandle = osThreadNew(StartRFIDTask, NULL, &readRFIDTask_attributes);
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <main+0x90>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <main+0x94>)
 8000e0a:	f004 fef5 	bl	8005bf8 <osThreadNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <main+0x98>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* creation of BluetoothRXTask */
  BluetoothRXTaskHandle = osThreadNew(StartBluetoothTask, NULL, &BluetoothRXTask_attributes);
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <main+0x9c>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4811      	ldr	r0, [pc, #68]	; (8000e60 <main+0xa0>)
 8000e1a:	f004 feed 	bl	8005bf8 <osThreadNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <main+0xa4>)
 8000e22:	6013      	str	r3, [r2, #0]

  /* creation of readBatteryVolt */
  readBatteryVoltHandle = osThreadNew(StartBatteryTask, NULL, &readBatteryVolt_attributes);
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <main+0xa8>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <main+0xac>)
 8000e2a:	f004 fee5 	bl	8005bf8 <osThreadNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <main+0xb0>)
 8000e32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e34:	f004 feba 	bl	8005bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <main+0x78>
 8000e3a:	bf00      	nop
 8000e3c:	08009bcc 	.word	0x08009bcc
 8000e40:	20000258 	.word	0x20000258
 8000e44:	08009b3c 	.word	0x08009b3c
 8000e48:	080011f9 	.word	0x080011f9
 8000e4c:	20000248 	.word	0x20000248
 8000e50:	08009b60 	.word	0x08009b60
 8000e54:	08001209 	.word	0x08001209
 8000e58:	2000024c 	.word	0x2000024c
 8000e5c:	08009b84 	.word	0x08009b84
 8000e60:	08001219 	.word	0x08001219
 8000e64:	20000250 	.word	0x20000250
 8000e68:	08009ba8 	.word	0x08009ba8
 8000e6c:	08001229 	.word	0x08001229
 8000e70:	20000254 	.word	0x20000254

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b096      	sub	sp, #88	; 0x58
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2244      	movs	r2, #68	; 0x44
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 ff13 	bl	8008cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e9a:	f002 fc11 	bl	80036c0 <HAL_PWREx_ControlVoltageScaling>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ea4:	f000 fa16 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fc48 	bl	800376c <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ee2:	f000 f9f7 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 f848 	bl	8003f94 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f0a:	f000 f9e3 	bl	80012d4 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3758      	adds	r7, #88	; 0x58
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <MX_ADC1_Init+0xc8>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f36:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000f98:	f000 fe7a 	bl	8001c90 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fa2:	f000 f997 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0xcc>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xc4>)
 8000fc4:	f001 f852 	bl	800206c <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000fce:	f000 f981 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000090 	.word	0x20000090
 8000fe0:	50040000 	.word	0x50040000
 8000fe4:	cb840000 	.word	0xcb840000

08000fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <MX_USART1_UART_Init+0x5c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8000ff4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART1_UART_Init+0x58>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART1_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART1_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART1_UART_Init+0x58>)
 800102c:	f003 fd34 	bl	8004a98 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001036:	f000 f94d 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000140 	.word	0x20000140
 8001044:	40013800 	.word	0x40013800

08001048 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_USART2_UART_Init+0x5c>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART2_UART_Init+0x58>)
 800108c:	f003 fd04 	bl	8004a98 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001096:	f000 f91d 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001c4 	.word	0x200001c4
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_DMA_Init+0x38>)
 80010b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <MX_DMA_Init+0x38>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6493      	str	r3, [r2, #72]	; 0x48
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_DMA_Init+0x38>)
 80010bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2105      	movs	r1, #5
 80010ca:	200b      	movs	r0, #11
 80010cc:	f001 feab 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010d0:	200b      	movs	r0, #11
 80010d2:	f001 fec4 	bl	8002e5e <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MX_GPIO_Init+0x108>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a3b      	ldr	r2, [pc, #236]	; (80011ec <MX_GPIO_Init+0x108>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <MX_GPIO_Init+0x108>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_GPIO_Init+0x108>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a35      	ldr	r2, [pc, #212]	; (80011ec <MX_GPIO_Init+0x108>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <MX_GPIO_Init+0x108>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <MX_GPIO_Init+0x108>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <MX_GPIO_Init+0x108>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_GPIO_Init+0x108>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_GPIO_Init+0x108>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <MX_GPIO_Init+0x108>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_GPIO_Init+0x108>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	21b0      	movs	r1, #176	; 0xb0
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f002 fa87 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	4820      	ldr	r0, [pc, #128]	; (80011f0 <MX_GPIO_Init+0x10c>)
 800116e:	f002 fa81 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001178:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <MX_GPIO_Init+0x110>)
 800118a:	f002 f8f9 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800118e:	23b0      	movs	r3, #176	; 0xb0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f002 f8ea 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f002 f8dd 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x10c>)
 80011e0:	f002 f8ce 	bl	8003380 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800

080011f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f004 fd8b 	bl	8005d1c <osDelay>
 8001206:	e7fb      	b.n	8001200 <StartDefaultTask+0x8>

08001208 <StartRFIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFIDTask */
void StartRFIDTask(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
//	uint8_t prevTeam0Score = 0;
//	uint8_t prevTeam1Score = 0;
//
//  /* Infinite loop */
	for(;;)
		osDelay(20);
 8001210:	2014      	movs	r0, #20
 8001212:	f004 fd83 	bl	8005d1c <osDelay>
 8001216:	e7fb      	b.n	8001210 <StartRFIDTask+0x8>

08001218 <StartBluetoothTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBluetoothTask */
void StartBluetoothTask(void *argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // TODO
    osDelay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f004 fd7b 	bl	8005d1c <osDelay>
 8001226:	e7fb      	b.n	8001220 <StartBluetoothTask+0x8>

08001228 <StartBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryTask */

	TickType_t xLastWakeTime;
	const TickType_t period = pdMS_TO_TICKS(BAT_READ_PERIOD_MS);
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	617b      	str	r3, [r7, #20]

	xLastWakeTime = xTaskGetTickCount();
 8001236:	f006 f861 	bl	80072fc <xTaskGetTickCount>
 800123a:	4603      	mov	r3, r0
 800123c:	60fb      	str	r3, [r7, #12]

	uint32_t rawVBat = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
	float VBat = 0.0;
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	613b      	str	r3, [r7, #16]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001248:	217f      	movs	r1, #127	; 0x7f
 800124a:	481f      	ldr	r0, [pc, #124]	; (80012c8 <StartBatteryTask+0xa0>)
 800124c:	f001 fcb0 	bl	8002bb0 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawVBat, 1);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2201      	movs	r2, #1
 8001256:	4619      	mov	r1, r3
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <StartBatteryTask+0xa0>)
 800125a:	f000 fe65 	bl	8001f28 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {

	  printf("%d", rawVBat);
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4619      	mov	r1, r3
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <StartBatteryTask+0xa4>)
 8001264:	f007 fdc0 	bl	8008de8 <iprintf>

	  VBat = rawVBat * VBAT_CONVERSION_FACTOR;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001272:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	ee17 0a90 	vmov	r0, s15
 800127e:	f7ff f963 	bl	8000548 <__aeabi_f2d>
 8001282:	a30f      	add	r3, pc, #60	; (adr r3, 80012c0 <StartBatteryTask+0x98>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9b6 	bl	80005f8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <StartBatteryTask+0xa8>)
 800129a:	f7ff fad7 	bl	800084c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fbb9 	bl	8000a1c <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	613b      	str	r3, [r7, #16]

	  vTaskDelayUntil( &xLastWakeTime, period );
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	6979      	ldr	r1, [r7, #20]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 fe53 	bl	8006f60 <vTaskDelayUntil>
  {
 80012ba:	e7d0      	b.n	800125e <StartBatteryTask+0x36>
 80012bc:	f3af 8000 	nop.w
 80012c0:	66666666 	.word	0x66666666
 80012c4:	400a6666 	.word	0x400a6666
 80012c8:	20000090 	.word	0x20000090
 80012cc:	08009b20 	.word	0x08009b20
 80012d0:	40b00000 	.word	0x40b00000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_MspInit+0x4c>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	; 0x60
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_MspInit+0x4c>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_MspInit+0x4c>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6593      	str	r3, [r2, #88]	; 0x58
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	f06f 0001 	mvn.w	r0, #1
 800131e:	f001 fd82 	bl	8002e26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09e      	sub	sp, #120	; 0x78
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	2268      	movs	r2, #104	; 0x68
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f007 fcb4 	bl	8008cae <memset>
  if(hadc->Instance==ADC1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <HAL_ADC_MspInit+0xd4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d155      	bne.n	80013fc <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001354:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800135a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001364:	2308      	movs	r3, #8
 8001366:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001368:	2307      	movs	r3, #7
 800136a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f82c 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800138a:	f7ff ffa3 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_ADC_MspInit+0xd8>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_ADC_MspInit+0xd8>)
 8001394:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_ADC_MspInit+0xd8>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_ADC_MspInit+0xe0>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013d6:	2220      	movs	r2, #32
 80013d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013e2:	f001 fd57 	bl	8002e94 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80013ec:	f7ff ff72 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013f4:	651a      	str	r2, [r3, #80]	; 0x50
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_ADC_MspInit+0xdc>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3778      	adds	r7, #120	; 0x78
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50040000 	.word	0x50040000
 8001408:	40021000 	.word	0x40021000
 800140c:	200000f8 	.word	0x200000f8
 8001410:	40020008 	.word	0x40020008

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0a6      	sub	sp, #152	; 0x98
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2268      	movs	r2, #104	; 0x68
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fc3a 	bl	8008cae <memset>
  if(huart->Instance==USART1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a47      	ldr	r2, [pc, #284]	; (800155c <HAL_UART_MspInit+0x148>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d145      	bne.n	80014d0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001448:	2300      	movs	r3, #0
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4618      	mov	r0, r3
 8001452:	f002 ffc3 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800145c:	f7ff ff3a 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001464:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6613      	str	r3, [r2, #96]	; 0x60
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_UART_MspInit+0x14c>)
 800146e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_UART_MspInit+0x14c>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_UART_MspInit+0x14c>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001490:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014aa:	2307      	movs	r3, #7
 80014ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 ff61 	bl	8003380 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	2025      	movs	r0, #37	; 0x25
 80014c4:	f001 fcaf 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014c8:	2025      	movs	r0, #37	; 0x25
 80014ca:	f001 fcc8 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ce:	e040      	b.n	8001552 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_UART_MspInit+0x150>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d13b      	bne.n	8001552 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ff78 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80014f2:	f7ff feef 	bl	80012d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_UART_MspInit+0x14c>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_UART_MspInit+0x14c>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_UART_MspInit+0x14c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_UART_MspInit+0x14c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001526:	230c      	movs	r3, #12
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f001 ff17 	bl	8003380 <HAL_GPIO_Init>
}
 8001552:	bf00      	nop
 8001554:	3798      	adds	r7, #152	; 0x98
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013800 	.word	0x40013800
 8001560:	40021000 	.word	0x40021000
 8001564:	40004400 	.word	0x40004400

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f95a 	bl	8001850 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800159c:	f006 f9ee 	bl	800797c <xTaskGetSchedulerState>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015a6:	f006 ffd7 	bl	8008558 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA1_Channel1_IRQHandler+0x10>)
 80015b6:	f001 fe04 	bl	80031c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000f8 	.word	0x200000f8

080015c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <USART1_IRQHandler+0x10>)
 80015ca:	f003 fab3 	bl	8004b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000140 	.word	0x20000140

080015d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e00a      	b.n	8001600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ea:	f3af 8000 	nop.w
 80015ee:	4601      	mov	r1, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf0      	blt.n	80015ea <_read+0x12>
  }

  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e009      	b.n	8001638 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf1      	blt.n	8001624 <_write+0x12>
  }
  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_close>:

int _close(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	605a      	str	r2, [r3, #4]
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_isatty>:

int _isatty(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f007 f9b2 	bl	8008a4c <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20028000 	.word	0x20028000
 8001714:	00000400 	.word	0x00000400
 8001718:	2000025c 	.word	0x2000025c
 800171c:	20001c40 	.word	0x20001c40

08001720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffea 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f007 fa67 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fb23 	bl	8000dc0 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001788:	08009ccc 	.word	0x08009ccc
  ldr r2, =_sbss
 800178c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001790:	20001c3c 	.word	0x20001c3c

08001794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_IRQHandler>
	...

08001798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_Init+0x3c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x3c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 fb2e 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b4:	200f      	movs	r0, #15
 80017b6:	f000 f80f 	bl	80017d8 <HAL_InitTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	e001      	b.n	80017ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c6:	f7ff fd8b 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_InitTick+0x6c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_InitTick+0x70>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_InitTick+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fb39 	bl	8002e7a <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d809      	bhi.n	8001828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f001 fb03 	bl	8002e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_InitTick+0x74>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e007      	b.n	8001838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e004      	b.n	8001838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	e001      	b.n	8001838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	20000260 	.word	0x20000260

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000260 	.word	0x20000260

08001890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3360      	adds	r3, #96	; 0x60
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LL_ADC_SetOffset+0x44>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	4313      	orrs	r3, r2
 8001928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	03fff000 	.word	0x03fff000

08001940 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3360      	adds	r3, #96	; 0x60
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3360      	adds	r3, #96	; 0x60
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	615a      	str	r2, [r3, #20]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b087      	sub	sp, #28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3330      	adds	r3, #48	; 0x30
 80019fe:	461a      	mov	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	211f      	movs	r1, #31
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	f003 011f 	and.w	r1, r3, #31
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b087      	sub	sp, #28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3314      	adds	r3, #20
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0e5b      	lsrs	r3, r3, #25
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0d1b      	lsrs	r3, r3, #20
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2107      	movs	r1, #7
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	0d1b      	lsrs	r3, r3, #20
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0318 	and.w	r3, r3, #24
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ac0:	40d9      	lsrs	r1, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aca:	431a      	orrs	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	0007ffff 	.word	0x0007ffff

08001ae4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6093      	str	r3, [r2, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1c:	d101      	bne.n	8001b22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <LL_ADC_IsEnabled+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_ADC_IsEnabled+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsDisableOngoing+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsDisableOngoing+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e12f      	b.n	8001f0a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fb39 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff19 	bl	8001b08 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff feff 	bl	8001ae4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff34 	bl	8001b58 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff18 	bl	8001b30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_ADC_Init+0x284>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4a84      	ldr	r2, [pc, #528]	; (8001f18 <HAL_ADC_Init+0x288>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff16 	bl	8001b58 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff76 	bl	8001c44 <LL_ADC_REG_IsConversionOngoing>
 8001d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80c8 	bne.w	8001ef8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 80c4 	bne.w	8001ef8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff23 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d90:	4862      	ldr	r0, [pc, #392]	; (8001f1c <HAL_ADC_Init+0x28c>)
 8001d92:	f7ff ff1d 	bl	8001bd0 <LL_ADC_IsEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4619      	mov	r1, r3
 8001da2:	485f      	ldr	r0, [pc, #380]	; (8001f20 <HAL_ADC_Init+0x290>)
 8001da4:	f7ff fd74 	bl	8001890 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e5b      	ldrb	r3, [r3, #25]
 8001dac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001db8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	045b      	lsls	r3, r3, #17
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_ADC_Init+0x294>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff13 	bl	8001c44 <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff20 	bl	8001c6a <LL_ADC_INJ_IsConversionOngoing>
 8001e2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d140      	bne.n	8001eb4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d13d      	bne.n	8001eb4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e42:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5a:	f023 0306 	bic.w	r3, r3, #6
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e94:	430a      	orrs	r2, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f023 010f 	bic.w	r1, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 020f 	bic.w	r2, r2, #15
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	053e2d63 	.word	0x053e2d63
 8001f1c:	50040000 	.word	0x50040000
 8001f20:	50040300 	.word	0x50040300
 8001f24:	fff0c007 	.word	0xfff0c007

08001f28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe83 	bl	8001c44 <LL_ADC_REG_IsConversionOngoing>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d167      	bne.n	8002014 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start_DMA+0x2a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e063      	b.n	800201a <HAL_ADC_Start_DMA+0xf2>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fc82 	bl	8002864 <ADC_Enable>
 8001f60:	4603      	mov	r3, r0
 8001f62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d14f      	bne.n	800200a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f023 0206 	bic.w	r2, r3, #6
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f96:	e002      	b.n	8001f9e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_ADC_Start_DMA+0xfc>)
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_ADC_Start_DMA+0x100>)
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_ADC_Start_DMA+0x104>)
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	221c      	movs	r2, #28
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0210 	orr.w	r2, r2, #16
 8001fd4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3340      	adds	r3, #64	; 0x40
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f001 f805 	bl	8003004 <HAL_DMA_Start_IT>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe0a 	bl	8001c1c <LL_ADC_REG_StartConversion>
 8002008:	e006      	b.n	8002018 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002012:	e001      	b.n	8002018 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002014:	2302      	movs	r3, #2
 8002016:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	08002a2f 	.word	0x08002a2f
 8002028:	08002b07 	.word	0x08002b07
 800202c:	08002b23 	.word	0x08002b23

08002030 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0b6      	sub	sp, #216	; 0xd8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x22>
 800208a:	2302      	movs	r3, #2
 800208c:	e3d5      	b.n	800283a <HAL_ADC_ConfigChannel+0x7ce>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdd2 	bl	8001c44 <LL_ADC_REG_IsConversionOngoing>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 83ba 	bne.w	800281c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d824      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	3b02      	subs	r3, #2
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d81b      	bhi.n	80020f2 <HAL_ADC_ConfigChannel+0x86>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_ADC_ConfigChannel+0x54>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d9 	.word	0x080020d9
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080020e9 	.word	0x080020e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	220c      	movs	r2, #12
 80020d4:	605a      	str	r2, [r3, #4]
          break;
 80020d6:	e011      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2212      	movs	r2, #18
 80020dc:	605a      	str	r2, [r3, #4]
          break;
 80020de:	e00d      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2218      	movs	r2, #24
 80020e4:	605a      	str	r2, [r3, #4]
          break;
 80020e6:	e009      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ee:	605a      	str	r2, [r3, #4]
          break;
 80020f0:	e004      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2206      	movs	r2, #6
 80020f6:	605a      	str	r2, [r3, #4]
          break;
 80020f8:	e000      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	f7ff fc70 	bl	80019ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd96 	bl	8001c44 <LL_ADC_REG_IsConversionOngoing>
 8002118:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fda2 	bl	8001c6a <LL_ADC_INJ_IsConversionOngoing>
 8002126:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800212a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 81c1 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 81bc 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002146:	d10f      	bne.n	8002168 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	f7ff fc77 	bl	8001a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc1e 	bl	80019a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002166:	e00e      	b.n	8002186 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	461a      	mov	r2, r3
 8002176:	f7ff fc66 	bl	8001a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fc0e 	bl	80019a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00a      	beq.n	80021be <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b8:	f7ff fb9e 	bl	80018f8 <LL_ADC_SetOffset>
 80021bc:	e17b      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fbbb 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x17e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fbb0 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e01e      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1bc>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fba5 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800220c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800221c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x1d4>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x206>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800225c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e004      	b.n	8002272 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb74 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb58 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x244>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fb4d 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x282>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fb42 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80022e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x29a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e018      	b.n	8002338 <HAL_ADC_ConfigChannel+0x2cc>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800231a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e004      	b.n	8002338 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800232e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb11 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff faf5 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x30a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2102      	movs	r1, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff faea 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	e01e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x348>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2102      	movs	r1, #2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fadf 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800239c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80023a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x360>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	e016      	b.n	80023fa <HAL_ADC_ConfigChannel+0x38e>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e004      	b.n	80023fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80023f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d106      	bne.n	800240c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fab0 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fa94 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x3cc>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2103      	movs	r1, #3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fa89 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	e017      	b.n	8002468 <HAL_ADC_ConfigChannel+0x3fc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2103      	movs	r1, #3
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fa7e 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002452:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x414>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	e011      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x438>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800248e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002490:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2103      	movs	r1, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa5b 	bl	800196c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fb88 	bl	8001bd0 <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8140 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f7ff fae1 	bl	8001a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4a8f      	ldr	r2, [pc, #572]	; (800271c <HAL_ADC_ConfigChannel+0x6b0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f040 8131 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_ConfigChannel+0x4a2>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	2b09      	cmp	r3, #9
 8002504:	bf94      	ite	ls
 8002506:	2301      	movls	r3, #1
 8002508:	2300      	movhi	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e019      	b.n	8002542 <HAL_ADC_ConfigChannel+0x4d6>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800251c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e003      	b.n	8002532 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800252a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2b09      	cmp	r3, #9
 800253a:	bf94      	ite	ls
 800253c:	2301      	movls	r3, #1
 800253e:	2300      	movhi	r3, #0
 8002540:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002542:	2b00      	cmp	r3, #0
 8002544:	d079      	beq.n	800263a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x4f6>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	3301      	adds	r3, #1
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002560:	e015      	b.n	800258e <HAL_ADC_ConfigChannel+0x522>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002572:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e003      	b.n	8002586 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x542>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	e017      	b.n	80025de <HAL_ADC_ConfigChannel+0x572>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80025ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	ea42 0103 	orr.w	r1, r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x598>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	051b      	lsls	r3, r3, #20
 8002602:	e018      	b.n	8002636 <HAL_ADC_ConfigChannel+0x5ca>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f003 021f 	and.w	r2, r3, #31
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002636:	430b      	orrs	r3, r1
 8002638:	e081      	b.n	800273e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x5ea>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	3301      	adds	r3, #1
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002654:	e015      	b.n	8002682 <HAL_ADC_ConfigChannel+0x616>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3301      	adds	r3, #1
 800267c:	069b      	lsls	r3, r3, #26
 800267e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x636>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	3301      	adds	r3, #1
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	e017      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x666>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	61fb      	str	r3, [r7, #28]
  return result;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	ea42 0103 	orr.w	r1, r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x692>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	3b1e      	subs	r3, #30
 80026f6:	051b      	lsls	r3, r3, #20
 80026f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fc:	e01e      	b.n	800273c <HAL_ADC_ConfigChannel+0x6d0>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	613b      	str	r3, [r7, #16]
  return result;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e006      	b.n	8002728 <HAL_ADC_ConfigChannel+0x6bc>
 800271a:	bf00      	nop
 800271c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	051b      	lsls	r3, r3, #20
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273c:	430b      	orrs	r3, r1
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	4619      	mov	r1, r3
 8002744:	f7ff f97f 	bl	8001a46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_ADC_ConfigChannel+0x7d8>)
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d06c      	beq.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002754:	483c      	ldr	r0, [pc, #240]	; (8002848 <HAL_ADC_ConfigChannel+0x7dc>)
 8002756:	f7ff f8c1 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 800275a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3a      	ldr	r2, [pc, #232]	; (800284c <HAL_ADC_ConfigChannel+0x7e0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d127      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d121      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a35      	ldr	r2, [pc, #212]	; (8002850 <HAL_ADC_ConfigChannel+0x7e4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d157      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002786:	4619      	mov	r1, r3
 8002788:	482f      	ldr	r0, [pc, #188]	; (8002848 <HAL_ADC_ConfigChannel+0x7dc>)
 800278a:	f7ff f894 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_ADC_ConfigChannel+0x7e8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	4a30      	ldr	r2, [pc, #192]	; (8002858 <HAL_ADC_ConfigChannel+0x7ec>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b6:	e03a      	b.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_ADC_ConfigChannel+0x7f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d113      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x77e>
 80027c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_ADC_ConfigChannel+0x7e4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d12a      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e0:	4619      	mov	r1, r3
 80027e2:	4819      	ldr	r0, [pc, #100]	; (8002848 <HAL_ADC_ConfigChannel+0x7dc>)
 80027e4:	f7ff f867 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e8:	e021      	b.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_ADC_ConfigChannel+0x7f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d11c      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <HAL_ADC_ConfigChannel+0x7e4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d111      	bne.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800280e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <HAL_ADC_ConfigChannel+0x7dc>)
 8002816:	f7ff f84e 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
 800281a:	e008      	b.n	800282e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002836:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800283a:	4618      	mov	r0, r3
 800283c:	37d8      	adds	r7, #216	; 0xd8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	80080000 	.word	0x80080000
 8002848:	50040300 	.word	0x50040300
 800284c:	c7520000 	.word	0xc7520000
 8002850:	50040000 	.word	0x50040000
 8002854:	20000000 	.word	0x20000000
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	cb840000 	.word	0xcb840000
 8002860:	80000001 	.word	0x80000001

08002864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f9ab 	bl	8001bd0 <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d169      	bne.n	8002954 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <ADC_Enable+0xfc>)
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e055      	b.n	8002956 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f966 	bl	8001b80 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028b4:	482b      	ldr	r0, [pc, #172]	; (8002964 <ADC_Enable+0x100>)
 80028b6:	f7ff f811 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <ADC_Enable+0x104>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <ADC_Enable+0x108>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028de:	e002      	b.n	80028e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028ec:	f7fe ffc4 	bl	8001878 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f2:	e028      	b.n	8002946 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f969 	bl	8001bd0 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f939 	bl	8001b80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290e:	f7fe ffb3 	bl	8001878 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d914      	bls.n	8002946 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00d      	beq.n	8002946 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d1cf      	bne.n	80028f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	8000003f 	.word	0x8000003f
 8002964:	50040300 	.word	0x50040300
 8002968:	20000000 	.word	0x20000000
 800296c:	053e2d63 	.word	0x053e2d63

08002970 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f93a 	bl	8001bf6 <LL_ADC_IsDisableOngoing>
 8002982:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f921 	bl	8001bd0 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d047      	beq.n	8002a24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d144      	bne.n	8002a24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030d 	and.w	r3, r3, #13
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10c      	bne.n	80029c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f8fb 	bl	8001ba8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2203      	movs	r2, #3
 80029b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ba:	f7fe ff5d 	bl	8001878 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029c0:	e029      	b.n	8002a16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e023      	b.n	8002a26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029de:	f7fe ff4b 	bl	8001878 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d914      	bls.n	8002a16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e007      	b.n	8002a26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1dc      	bne.n	80029de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d14b      	bne.n	8002ae0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ffae 	bl	80019c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d032      	beq.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12b      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11f      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa4:	e018      	b.n	8002ad8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff faa9 	bl	8002030 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ade:	e00e      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fab3 	bl	8002058 <HAL_ADC_ErrorCallback>
}
 8002af2:	e004      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fa95 	bl	8002044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f043 0204 	orr.w	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fa85 	bl	8002058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <LL_ADC_StartCalibration>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADCEx_Calibration_Start+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e04d      	b.n	8002c68 <HAL_ADCEx_Calibration_Start+0xb8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fecb 	bl	8002970 <ADC_Disable>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d136      	bne.n	8002c52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bec:	f023 0302 	bic.w	r3, r3, #2
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ffa9 	bl	8002b56 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c04:	e014      	b.n	8002c30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c12:	d30d      	bcc.n	8002c30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f023 0312 	bic.w	r3, r3, #18
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e01b      	b.n	8002c68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ffa7 	bl	8002b88 <LL_ADC_IsCalibrationOnGoing>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e2      	bne.n	8002c06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f023 0303 	bic.w	r3, r3, #3
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c50:	e005      	b.n	8002c5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
         );
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff8e 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff29 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff3e 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff8e 	bl	8002d64 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5d 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff31 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e098      	b.n	8002fd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <HAL_DMA_Init+0x150>)
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d80f      	bhi.n	8002ed2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_DMA_Init+0x154>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <HAL_DMA_Init+0x158>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	; (8002ff0 <HAL_DMA_Init+0x15c>)
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed0:	e00e      	b.n	8002ef0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_DMA_Init+0x160>)
 8002eda:	4413      	add	r3, r2
 8002edc:	4a43      	ldr	r2, [pc, #268]	; (8002fec <HAL_DMA_Init+0x158>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_DMA_Init+0x164>)
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d039      	beq.n	8002fc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <HAL_DMA_Init+0x15c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d11a      	bne.n	8002f8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_DMA_Init+0x168>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f003 031c 	and.w	r3, r3, #28
 8002f62:	210f      	movs	r1, #15
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	4924      	ldr	r1, [pc, #144]	; (8002ffc <HAL_DMA_Init+0x168>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <HAL_DMA_Init+0x168>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f003 031c 	and.w	r3, r3, #28
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	491d      	ldr	r1, [pc, #116]	; (8002ffc <HAL_DMA_Init+0x168>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	e019      	b.n	8002fc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_DMA_Init+0x16c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 031c 	and.w	r3, r3, #28
 8002f98:	210f      	movs	r1, #15
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4917      	ldr	r1, [pc, #92]	; (8003000 <HAL_DMA_Init+0x16c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_DMA_Init+0x16c>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f003 031c 	and.w	r3, r3, #28
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	4911      	ldr	r1, [pc, #68]	; (8003000 <HAL_DMA_Init+0x16c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40020407 	.word	0x40020407
 8002fe8:	bffdfff8 	.word	0xbffdfff8
 8002fec:	cccccccd 	.word	0xcccccccd
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	bffdfbf8 	.word	0xbffdfbf8
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	400200a8 	.word	0x400200a8
 8003000:	400204a8 	.word	0x400204a8

08003004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_DMA_Start_IT+0x20>
 8003020:	2302      	movs	r3, #2
 8003022:	e04b      	b.n	80030bc <HAL_DMA_Start_IT+0xb8>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d13a      	bne.n	80030ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f95f 	bl	8003320 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 020e 	orr.w	r2, r2, #14
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e00f      	b.n	800309c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 020a 	orr.w	r2, r2, #10
 800309a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e005      	b.n	80030ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d008      	beq.n	80030ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 020e 	bic.w	r2, r2, #14
 80030fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f003 021c 	and.w	r2, r3, #28
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d005      	beq.n	8003164 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2204      	movs	r2, #4
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	e029      	b.n	80031b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 020e 	bic.w	r2, r2, #14
 8003172:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f003 021c 	and.w	r2, r3, #28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
    }
  }
  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f003 031c 	and.w	r3, r3, #28
 80031e2:	2204      	movs	r2, #4
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d026      	beq.n	800323c <HAL_DMA_IRQHandler+0x7a>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0204 	bic.w	r2, r2, #4
 8003214:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 021c 	and.w	r2, r3, #28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2104      	movs	r1, #4
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	2b00      	cmp	r3, #0
 8003230:	d071      	beq.n	8003316 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800323a:	e06c      	b.n	8003316 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f003 031c 	and.w	r3, r3, #28
 8003244:	2202      	movs	r2, #2
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02e      	beq.n	80032ae <HAL_DMA_IRQHandler+0xec>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d029      	beq.n	80032ae <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 020a 	bic.w	r2, r2, #10
 8003276:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f003 021c 	and.w	r2, r3, #28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2102      	movs	r1, #2
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d038      	beq.n	8003316 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032ac:	e033      	b.n	8003316 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f003 031c 	and.w	r3, r3, #28
 80032b6:	2208      	movs	r2, #8
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02a      	beq.n	8003318 <HAL_DMA_IRQHandler+0x156>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d025      	beq.n	8003318 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 020e 	bic.w	r2, r2, #14
 80032da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 021c 	and.w	r2, r3, #28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003316:	bf00      	nop
 8003318:	bf00      	nop
}
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f003 021c 	and.w	r2, r3, #28
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b10      	cmp	r3, #16
 8003350:	d108      	bne.n	8003364 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003362:	e007      	b.n	8003374 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338e:	e154      	b.n	800363a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2101      	movs	r1, #1
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8146 	beq.w	8003634 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d005      	beq.n	80033c0 <HAL_GPIO_Init+0x40>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d130      	bne.n	8003422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f6:	2201      	movs	r2, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0201 	and.w	r2, r3, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d017      	beq.n	800345e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d123      	bne.n	80034b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0203 	and.w	r2, r3, #3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a0 	beq.w	8003634 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <HAL_GPIO_Init+0x2d8>)
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	4a57      	ldr	r2, [pc, #348]	; (8003658 <HAL_GPIO_Init+0x2d8>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003500:	4b55      	ldr	r3, [pc, #340]	; (8003658 <HAL_GPIO_Init+0x2d8>)
 8003502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800350c:	4a53      	ldr	r2, [pc, #332]	; (800365c <HAL_GPIO_Init+0x2dc>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003536:	d019      	beq.n	800356c <HAL_GPIO_Init+0x1ec>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a49      	ldr	r2, [pc, #292]	; (8003660 <HAL_GPIO_Init+0x2e0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_GPIO_Init+0x1e8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a48      	ldr	r2, [pc, #288]	; (8003664 <HAL_GPIO_Init+0x2e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00d      	beq.n	8003564 <HAL_GPIO_Init+0x1e4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a47      	ldr	r2, [pc, #284]	; (8003668 <HAL_GPIO_Init+0x2e8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <HAL_GPIO_Init+0x1e0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a46      	ldr	r2, [pc, #280]	; (800366c <HAL_GPIO_Init+0x2ec>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_GPIO_Init+0x1dc>
 8003558:	2304      	movs	r3, #4
 800355a:	e008      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 800355c:	2307      	movs	r3, #7
 800355e:	e006      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003560:	2303      	movs	r3, #3
 8003562:	e004      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003564:	2302      	movs	r3, #2
 8003566:	e002      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_GPIO_Init+0x1ee>
 800356c:	2300      	movs	r3, #0
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	f002 0203 	and.w	r2, r2, #3
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	4093      	lsls	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800357e:	4937      	ldr	r1, [pc, #220]	; (800365c <HAL_GPIO_Init+0x2dc>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035da:	4a25      	ldr	r2, [pc, #148]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e0:	4b23      	ldr	r3, [pc, #140]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_GPIO_Init+0x2f0>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f aea3 	bne.w	8003390 <HAL_GPIO_Init+0x10>
  }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	40010000 	.word	0x40010000
 8003660:	48000400 	.word	0x48000400
 8003664:	48000800 	.word	0x48000800
 8003668:	48000c00 	.word	0x48000c00
 800366c:	48001000 	.word	0x48001000
 8003670:	40010400 	.word	0x40010400

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003690:	e002      	b.n	8003698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_PWREx_GetVoltageRange+0x18>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40007000 	.word	0x40007000

080036c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ce:	d130      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d038      	beq.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e6:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2232      	movs	r2, #50	; 0x32
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	3301      	adds	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003704:	e002      	b.n	800370c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b01      	subs	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d102      	bne.n	8003720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f2      	bne.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d110      	bne.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d007      	beq.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40007000 	.word	0x40007000
 8003764:	20000000 	.word	0x20000000
 8003768:	431bde83 	.word	0x431bde83

0800376c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f000 bc02 	b.w	8003f84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003780:	4b96      	ldr	r3, [pc, #600]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378a:	4b94      	ldr	r3, [pc, #592]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80e4 	beq.w	800396a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	f040 808b 	bne.w	80038c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 8087 	bne.w	80038c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037b8:	4b88      	ldr	r3, [pc, #544]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x64>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e3d9      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	4b81      	ldr	r3, [pc, #516]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_RCC_OscConfig+0x7e>
 80037e0:	4b7e      	ldr	r3, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	e005      	b.n	80037f6 <HAL_RCC_OscConfig+0x8a>
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d223      	bcs.n	8003842 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fd8c 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e3ba      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380e:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a72      	ldr	r2, [pc, #456]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	496d      	ldr	r1, [pc, #436]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382c:	4b6b      	ldr	r3, [pc, #428]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	4968      	ldr	r1, [pc, #416]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
 8003840:	e025      	b.n	800388e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003842:	4b66      	ldr	r3, [pc, #408]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a65      	ldr	r2, [pc, #404]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4960      	ldr	r1, [pc, #384]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003860:	4b5e      	ldr	r3, [pc, #376]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	495b      	ldr	r1, [pc, #364]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fd4c 	bl	800431c <RCC_SetFlashLatencyFromMSIRange>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e37a      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388e:	f000 fc81 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b51      	ldr	r3, [pc, #324]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4950      	ldr	r1, [pc, #320]	; (80039e0 <HAL_RCC_OscConfig+0x274>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_RCC_OscConfig+0x278>)
 80038ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ae:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd ff90 	bl	80017d8 <HAL_InitTick>
 80038b8:	4603      	mov	r3, r0
 80038ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d052      	beq.n	8003968 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	e35e      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d032      	beq.n	8003934 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ce:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a42      	ldr	r2, [pc, #264]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038da:	f7fd ffcd 	bl	8001878 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038e2:	f7fd ffc9 	bl	8001878 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e347      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f4:	4b39      	ldr	r3, [pc, #228]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a35      	ldr	r2, [pc, #212]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003906:	f043 0308 	orr.w	r3, r3, #8
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4930      	ldr	r1, [pc, #192]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391e:	4b2f      	ldr	r3, [pc, #188]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	492b      	ldr	r1, [pc, #172]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
 8003932:	e01a      	b.n	800396a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003940:	f7fd ff9a 	bl	8001878 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003948:	f7fd ff96 	bl	8001878 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e314      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1dc>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d073      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d005      	beq.n	8003988 <HAL_RCC_OscConfig+0x21c>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d10e      	bne.n	80039a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d063      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d15f      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e2f1      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x24c>
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e025      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d114      	bne.n	80039ec <HAL_RCC_OscConfig+0x280>
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a02      	ldr	r2, [pc, #8]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e013      	b.n	8003a04 <HAL_RCC_OscConfig+0x298>
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08009bdc 	.word	0x08009bdc
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004
 80039ec:	4ba0      	ldr	r3, [pc, #640]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a9f      	ldr	r2, [pc, #636]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b9d      	ldr	r3, [pc, #628]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a9c      	ldr	r2, [pc, #624]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd ff34 	bl	8001878 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd ff30 	bl	8001878 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e2ae      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a26:	4b92      	ldr	r3, [pc, #584]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x2a8>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff20 	bl	8001878 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd ff1c 	bl	8001878 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e29a      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2d0>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d060      	beq.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_OscConfig+0x310>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d116      	bne.n	8003aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7c:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x328>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e277      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b76      	ldr	r3, [pc, #472]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	4973      	ldr	r1, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	e040      	b.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d023      	beq.n	8003afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab2:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fd fedb 	bl	8001878 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fed7 	bl	8001878 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e255      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad8:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b62      	ldr	r3, [pc, #392]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	495f      	ldr	r1, [pc, #380]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
 8003af8:	e018      	b.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd feb7 	bl	8001878 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fd feb3 	bl	8001878 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e231      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d03c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b40:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	4a4a      	ldr	r2, [pc, #296]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fd fe92 	bl	8001878 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fd fe8e 	bl	8001878 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e20c      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ef      	beq.n	8003b58 <HAL_RCC_OscConfig+0x3ec>
 8003b78:	e01b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b80:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fe75 	bl	8001878 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b92:	f7fd fe71 	bl	8001878 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e1ef      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ef      	bne.n	8003b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80a6 	beq.w	8003d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10d      	bne.n	8003bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	; 0x58
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bec:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <HAL_RCC_OscConfig+0x508>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d118      	bne.n	8003c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_RCC_OscConfig+0x508>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_RCC_OscConfig+0x508>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c04:	f7fd fe38 	bl	8001878 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fd fe34 	bl	8001878 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1b2      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x508>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4d8>
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c42:	e029      	b.n	8003c98 <HAL_RCC_OscConfig+0x52c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d115      	bne.n	8003c78 <HAL_RCC_OscConfig+0x50c>
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a03      	ldr	r2, [pc, #12]	; (8003c70 <HAL_RCC_OscConfig+0x504>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6c:	e014      	b.n	8003c98 <HAL_RCC_OscConfig+0x52c>
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	4b9a      	ldr	r3, [pc, #616]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a99      	ldr	r2, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c88:	4b96      	ldr	r3, [pc, #600]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a95      	ldr	r2, [pc, #596]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fdea 	bl	8001878 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fde6 	bl	8001878 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e162      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ed      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x53c>
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fdd3 	bl	8001878 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd fdcf 	bl	8001878 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e14b      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cec:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ed      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfa:	7ffb      	ldrb	r3, [r7, #31]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b78      	ldr	r3, [pc, #480]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a77      	ldr	r2, [pc, #476]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03c      	beq.n	8003d92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01c      	beq.n	8003d5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d20:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d26:	4a6f      	ldr	r2, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd fda2 	bl	8001878 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d38:	f7fd fd9e 	bl	8001878 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e11c      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4a:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ef      	beq.n	8003d38 <HAL_RCC_OscConfig+0x5cc>
 8003d58:	e01b      	b.n	8003d92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d60:	4a60      	ldr	r2, [pc, #384]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fd85 	bl	8001878 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d72:	f7fd fd81 	bl	8001878 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0ff      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d84:	4b57      	ldr	r3, [pc, #348]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ef      	bne.n	8003d72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80f3 	beq.w	8003f82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	f040 80c9 	bne.w	8003f38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da6:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0203 	and.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d12c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d123      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d11b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d113      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d109      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d06b      	beq.n	8003eec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d062      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0ac      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e36:	f7fd fd1f 	bl	8001878 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd fd1b 	bl	8001878 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e099      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x77c>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e76:	0212      	lsls	r2, r2, #8
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e7e:	0852      	lsrs	r2, r2, #1
 8003e80:	3a01      	subs	r2, #1
 8003e82:	0552      	lsls	r2, r2, #21
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e8a:	0852      	lsrs	r2, r2, #1
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	0652      	lsls	r2, r2, #25
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e96:	06d2      	lsls	r2, r2, #27
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4912      	ldr	r1, [pc, #72]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb8:	f7fd fcde 	bl	8001878 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fcda 	bl	8001878 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e058      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <HAL_RCC_OscConfig+0x778>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ede:	e050      	b.n	8003f82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e04f      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d144      	bne.n	8003f82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f10:	f7fd fcb2 	bl	8001878 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd fcae 	bl	8001878 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e02c      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x7ac>
 8003f36:	e024      	b.n	8003f82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d01f      	beq.n	8003f7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fc95 	bl	8001878 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fd fc91 	bl	8001878 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	4905      	ldr	r1, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0x820>)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x824>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60cb      	str	r3, [r1, #12]
 8003f7c:	e001      	b.n	8003f82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	feeefffc 	.word	0xfeeefffc

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0e7      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b75      	ldr	r3, [pc, #468]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d910      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 0207 	bic.w	r2, r3, #7
 8003fbe:	4970      	ldr	r1, [pc, #448]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0cf      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d908      	bls.n	8004006 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4960      	ldr	r1, [pc, #384]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04c      	beq.n	80040ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d121      	bne.n	800406a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0a6      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004032:	4b54      	ldr	r3, [pc, #336]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e09a      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800404a:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e08e      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e086      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4943      	ldr	r1, [pc, #268]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fd fbfc 	bl	8001878 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd fbf8 	bl	8001878 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e06e      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b3a      	ldr	r3, [pc, #232]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d208      	bcs.n	80040da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	492b      	ldr	r1, [pc, #172]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d210      	bcs.n	800410a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 0207 	bic.w	r2, r3, #7
 80040f0:	4923      	ldr	r1, [pc, #140]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_RCC_ClockConfig+0x1ec>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e036      	b.n	8004178 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004116:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4918      	ldr	r1, [pc, #96]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4910      	ldr	r1, [pc, #64]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004148:	f000 f824 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	490b      	ldr	r1, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x1f4>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	4a09      	ldr	r2, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1f8>)
 8004166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1fc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fb33 	bl	80017d8 <HAL_InitTick>
 8004172:	4603      	mov	r3, r0
 8004174:	72fb      	strb	r3, [r7, #11]

  return status;
 8004176:	7afb      	ldrb	r3, [r7, #11]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40022000 	.word	0x40022000
 8004184:	40021000 	.word	0x40021000
 8004188:	08009bdc 	.word	0x08009bdc
 800418c:	20000000 	.word	0x20000000
 8004190:	20000004 	.word	0x20000004

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ac:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x34>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d121      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d11e      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c8:	4b34      	ldr	r3, [pc, #208]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e4:	4b2d      	ldr	r3, [pc, #180]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004204:	e00a      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d102      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e004      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d101      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004218:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800421a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d134      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d003      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0xa6>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d003      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0xac>
 8004238:	e005      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800423c:	617b      	str	r3, [r7, #20]
      break;
 800423e:	e005      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004242:	617b      	str	r3, [r7, #20]
      break;
 8004244:	e002      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	617b      	str	r3, [r7, #20]
      break;
 800424a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	3301      	adds	r3, #1
 8004258:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	fb03 f202 	mul.w	r2, r3, r2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_GetSysClockFreq+0x108>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	0e5b      	lsrs	r3, r3, #25
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	3301      	adds	r3, #1
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800428c:	69bb      	ldr	r3, [r7, #24]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	08009bf4 	.word	0x08009bf4
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	007a1200 	.word	0x007a1200

080042ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4904      	ldr	r1, [pc, #16]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	08009bec 	.word	0x08009bec

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f4:	f7ff ffda 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0adb      	lsrs	r3, r3, #11
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	08009bec 	.word	0x08009bec

0800431c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004328:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004334:	f7ff f9b6 	bl	80036a4 <HAL_PWREx_GetVoltageRange>
 8004338:	6178      	str	r0, [r7, #20]
 800433a:	e014      	b.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
 8004348:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004354:	f7ff f9a6 	bl	80036a4 <HAL_PWREx_GetVoltageRange>
 8004358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d10b      	bne.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d919      	bls.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2ba0      	cmp	r3, #160	; 0xa0
 8004378:	d902      	bls.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800437a:	2302      	movs	r3, #2
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e013      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e010      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d902      	bls.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800438c:	2303      	movs	r3, #3
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e00a      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d102      	bne.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004398:	2302      	movs	r3, #2
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e004      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d101      	bne.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a4:	2301      	movs	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0207 	bic.w	r2, r3, #7
 80043b0:	4909      	ldr	r1, [pc, #36]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d031      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004400:	d01a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004402:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004406:	d814      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800440c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004410:	d10f      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a5c      	ldr	r2, [pc, #368]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa44 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	74fb      	strb	r3, [r7, #19]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004440:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	494e      	ldr	r1, [pc, #312]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 809e 	beq.w	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446e:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fd f9e4 	bl	8001878 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd f9e0 	bl	8001878 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	74fb      	strb	r3, [r7, #19]
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15a      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d019      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004502:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004522:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd f9a0 	bl	8001878 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	e00b      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd f99c 	bl	8001878 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d902      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	74fb      	strb	r3, [r7, #19]
            break;
 8004552:	e006      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ec      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004576:	4904      	ldr	r1, [pc, #16]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004594:	7c7b      	ldrb	r3, [r7, #17]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b9e      	ldr	r3, [pc, #632]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a9d      	ldr	r2, [pc, #628]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b2:	4b98      	ldr	r3, [pc, #608]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f023 0203 	bic.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4994      	ldr	r1, [pc, #592]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 020c 	bic.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	498c      	ldr	r1, [pc, #560]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f6:	4b87      	ldr	r3, [pc, #540]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	4983      	ldr	r1, [pc, #524]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004618:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	497b      	ldr	r1, [pc, #492]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	4972      	ldr	r1, [pc, #456]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465c:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	496a      	ldr	r1, [pc, #424]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800467e:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	4961      	ldr	r1, [pc, #388]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a0:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	4959      	ldr	r1, [pc, #356]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c2:	4b54      	ldr	r3, [pc, #336]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	4950      	ldr	r1, [pc, #320]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046e4:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	4948      	ldr	r1, [pc, #288]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004706:	4b43      	ldr	r3, [pc, #268]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	493f      	ldr	r1, [pc, #252]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d028      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004728:	4b3a      	ldr	r3, [pc, #232]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004746:	d106      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a31      	ldr	r2, [pc, #196]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800474e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004752:	60d3      	str	r3, [r2, #12]
 8004754:	e011      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800475e:	d10c      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f8a4 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d028      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004786:	4b23      	ldr	r3, [pc, #140]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	491f      	ldr	r1, [pc, #124]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b0:	60d3      	str	r3, [r2, #12]
 80047b2:	e011      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	2101      	movs	r1, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f875 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4908      	ldr	r1, [pc, #32]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004802:	d109      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a02      	ldr	r2, [pc, #8]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800480a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480e:	60d3      	str	r3, [r2, #12]
 8004810:	e014      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004820:	d10c      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2101      	movs	r1, #1
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f843 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01c      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	4916      	ldr	r1, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004866:	d10c      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f820 	bl	80048b4 <RCCEx_PLLSAI1_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489c:	4904      	ldr	r1, [pc, #16]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000

080048b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048c2:	4b74      	ldr	r3, [pc, #464]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ce:	4b71      	ldr	r3, [pc, #452]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0203 	and.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d10d      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
       ||
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048e6:	4b6b      	ldr	r3, [pc, #428]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
       ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d047      	beq.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	e044      	b.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d018      	beq.n	800493a <RCCEx_PLLSAI1_Config+0x86>
 8004908:	2b03      	cmp	r3, #3
 800490a:	d825      	bhi.n	8004958 <RCCEx_PLLSAI1_Config+0xa4>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d002      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x62>
 8004910:	2b02      	cmp	r3, #2
 8004912:	d009      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x74>
 8004914:	e020      	b.n	8004958 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004916:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11d      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004926:	e01a      	b.n	800495e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004938:	e013      	b.n	8004962 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004946:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004956:	e006      	b.n	8004966 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	e004      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004966:	bf00      	nop
    }

    if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800496e:	4b49      	ldr	r3, [pc, #292]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	3b01      	subs	r3, #1
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	430b      	orrs	r3, r1
 8004984:	4943      	ldr	r1, [pc, #268]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d17c      	bne.n	8004a8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004990:	4b40      	ldr	r3, [pc, #256]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3f      	ldr	r2, [pc, #252]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800499a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499c:	f7fc ff6c 	bl	8001878 <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a4:	f7fc ff68 	bl	8001878 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
        break;
 80049b6:	e005      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b8:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ef      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d15f      	bne.n	8004a8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d110      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d0:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6892      	ldr	r2, [r2, #8]
 80049e0:	0211      	lsls	r1, r2, #8
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	06d2      	lsls	r2, r2, #27
 80049e8:	430a      	orrs	r2, r1
 80049ea:	492a      	ldr	r1, [pc, #168]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]
 80049f0:	e027      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d112      	bne.n	8004a1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f8:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6892      	ldr	r2, [r2, #8]
 8004a08:	0211      	lsls	r1, r2, #8
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6912      	ldr	r2, [r2, #16]
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0552      	lsls	r2, r2, #21
 8004a14:	430a      	orrs	r2, r1
 8004a16:	491f      	ldr	r1, [pc, #124]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
 8004a1c:	e011      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	0211      	lsls	r1, r2, #8
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6952      	ldr	r2, [r2, #20]
 8004a34:	0852      	lsrs	r2, r2, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0652      	lsls	r2, r2, #25
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	4915      	ldr	r1, [pc, #84]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fc ff13 	bl	8001878 <HAL_GetTick>
 8004a52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a54:	e009      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a56:	f7fc ff0f 	bl	8001878 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d902      	bls.n	8004a6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	73fb      	strb	r3, [r7, #15]
          break;
 8004a68:	e005      	b.n	8004a76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ef      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	4903      	ldr	r1, [pc, #12]	; (8004a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e040      	b.n	8004b2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fcaa 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fb2e 	bl	8005138 <UART_SetConfig>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e022      	b.n	8004b2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fda8 	bl	8005644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fe2f 	bl	8005788 <UART_CheckIdleState>
 8004b2a:	4603      	mov	r3, r0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0ba      	sub	sp, #232	; 0xe8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b62:	4013      	ands	r3, r2
 8004b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d115      	bne.n	8004b9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00f      	beq.n	8004b9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 82a6 	beq.w	80050de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
      }
      return;
 8004b9a:	e2a0      	b.n	80050de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8117 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bb6:	4b85      	ldr	r3, [pc, #532]	; (8004dcc <HAL_UART_IRQHandler+0x298>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 810a 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <HAL_UART_IRQHandler+0xbc>
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d011      	beq.n	8004c20 <HAL_UART_IRQHandler+0xec>
 8004bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c16:	f043 0204 	orr.w	r2, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d011      	beq.n	8004c50 <HAL_UART_IRQHandler+0x11c>
 8004c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c46:	f043 0202 	orr.w	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d017      	beq.n	8004c8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c82:	f043 0208 	orr.w	r2, r3, #8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <HAL_UART_IRQHandler+0x18a>
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 820c 	beq.w	80050e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04f      	beq.n	8004db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fe43 	bl	80059a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d141      	bne.n	8004dae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1d9      	bne.n	8004d2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_UART_IRQHandler+0x29c>)
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe f9d8 	bl	8003140 <HAL_DMA_Abort_IT>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004da0:	4610      	mov	r0, r2
 8004da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	e00f      	b.n	8004dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9b0 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	e00b      	b.n	8004dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9ac 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e007      	b.n	8004dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9a8 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004dc4:	e18d      	b.n	80050e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc6:	bf00      	nop
    return;
 8004dc8:	e18b      	b.n	80050e2 <HAL_UART_IRQHandler+0x5ae>
 8004dca:	bf00      	nop
 8004dcc:	04000120 	.word	0x04000120
 8004dd0:	08005a69 	.word	0x08005a69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f040 8146 	bne.w	800506a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 813f 	beq.w	800506a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8138 	beq.w	800506a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2210      	movs	r2, #16
 8004e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	f040 80b4 	bne.w	8004f7a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 815f 	beq.w	80050e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e32:	429a      	cmp	r2, r3
 8004e34:	f080 8157 	bcs.w	80050e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8085 	bne.w	8004f5e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1da      	bne.n	8004e54 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e1      	bne.n	8004e9e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e3      	bne.n	8004eda <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2e:	f023 0310 	bic.w	r3, r3, #16
 8004f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e4      	bne.n	8004f1e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe f8b3 	bl	80030c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8d4 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f78:	e0b5      	b.n	80050e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a7 	beq.w	80050ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a2 	beq.w	80050ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e4      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	623b      	str	r3, [r7, #32]
   return(result);
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005000:	633a      	str	r2, [r7, #48]	; 0x30
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e3      	bne.n	8004fdc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	60fb      	str	r3, [r7, #12]
   return(result);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0310 	bic.w	r3, r3, #16
 800503a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	69b9      	ldr	r1, [r7, #24]
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	617b      	str	r3, [r7, #20]
   return(result);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e4      	bne.n	8005026 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800505c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f85c 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005068:	e03f      	b.n	80050ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00e      	beq.n	8005094 <HAL_UART_IRQHandler+0x560>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800508a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fd2b 	bl	8005ae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005092:	e02d      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00e      	beq.n	80050be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    }
    return;
 80050bc:	e017      	b.n	80050ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d012      	beq.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fcdc 	bl	8005a94 <UART_EndTransmit_IT>
    return;
 80050dc:	e008      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050de:	bf00      	nop
 80050e0:	e006      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050e2:	bf00      	nop
 80050e4:	e004      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050f0:	37e8      	adds	r7, #232	; 0xe8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800513c:	b08a      	sub	sp, #40	; 0x28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	431a      	orrs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	4313      	orrs	r3, r2
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <UART_SetConfig+0x2c4>)
 8005168:	4013      	ands	r3, r2
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005170:	430b      	orrs	r3, r1
 8005172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a9a      	ldr	r2, [pc, #616]	; (8005400 <UART_SetConfig+0x2c8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	4313      	orrs	r3, r2
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	430a      	orrs	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a91      	ldr	r2, [pc, #580]	; (8005404 <UART_SetConfig+0x2cc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d126      	bne.n	8005210 <UART_SetConfig+0xd8>
 80051c2:	4b91      	ldr	r3, [pc, #580]	; (8005408 <UART_SetConfig+0x2d0>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d81b      	bhi.n	8005208 <UART_SetConfig+0xd0>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0xa0>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	08005201 	.word	0x08005201
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ee:	e0d6      	b.n	800539e <UART_SetConfig+0x266>
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f6:	e0d2      	b.n	800539e <UART_SetConfig+0x266>
 80051f8:	2304      	movs	r3, #4
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fe:	e0ce      	b.n	800539e <UART_SetConfig+0x266>
 8005200:	2308      	movs	r3, #8
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005206:	e0ca      	b.n	800539e <UART_SetConfig+0x266>
 8005208:	2310      	movs	r3, #16
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e0c6      	b.n	800539e <UART_SetConfig+0x266>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a7d      	ldr	r2, [pc, #500]	; (800540c <UART_SetConfig+0x2d4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d138      	bne.n	800528c <UART_SetConfig+0x154>
 800521a:	4b7b      	ldr	r3, [pc, #492]	; (8005408 <UART_SetConfig+0x2d0>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d82d      	bhi.n	8005284 <UART_SetConfig+0x14c>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0xf8>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005265 	.word	0x08005265
 8005234:	08005285 	.word	0x08005285
 8005238:	08005285 	.word	0x08005285
 800523c:	08005285 	.word	0x08005285
 8005240:	08005275 	.word	0x08005275
 8005244:	08005285 	.word	0x08005285
 8005248:	08005285 	.word	0x08005285
 800524c:	08005285 	.word	0x08005285
 8005250:	0800526d 	.word	0x0800526d
 8005254:	08005285 	.word	0x08005285
 8005258:	08005285 	.word	0x08005285
 800525c:	08005285 	.word	0x08005285
 8005260:	0800527d 	.word	0x0800527d
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e098      	b.n	800539e <UART_SetConfig+0x266>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e094      	b.n	800539e <UART_SetConfig+0x266>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e090      	b.n	800539e <UART_SetConfig+0x266>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e08c      	b.n	800539e <UART_SetConfig+0x266>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e088      	b.n	800539e <UART_SetConfig+0x266>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5f      	ldr	r2, [pc, #380]	; (8005410 <UART_SetConfig+0x2d8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d125      	bne.n	80052e2 <UART_SetConfig+0x1aa>
 8005296:	4b5c      	ldr	r3, [pc, #368]	; (8005408 <UART_SetConfig+0x2d0>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052a0:	2b30      	cmp	r3, #48	; 0x30
 80052a2:	d016      	beq.n	80052d2 <UART_SetConfig+0x19a>
 80052a4:	2b30      	cmp	r3, #48	; 0x30
 80052a6:	d818      	bhi.n	80052da <UART_SetConfig+0x1a2>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d00a      	beq.n	80052c2 <UART_SetConfig+0x18a>
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d814      	bhi.n	80052da <UART_SetConfig+0x1a2>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <UART_SetConfig+0x182>
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d008      	beq.n	80052ca <UART_SetConfig+0x192>
 80052b8:	e00f      	b.n	80052da <UART_SetConfig+0x1a2>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c0:	e06d      	b.n	800539e <UART_SetConfig+0x266>
 80052c2:	2302      	movs	r3, #2
 80052c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c8:	e069      	b.n	800539e <UART_SetConfig+0x266>
 80052ca:	2304      	movs	r3, #4
 80052cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d0:	e065      	b.n	800539e <UART_SetConfig+0x266>
 80052d2:	2308      	movs	r3, #8
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d8:	e061      	b.n	800539e <UART_SetConfig+0x266>
 80052da:	2310      	movs	r3, #16
 80052dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e0:	e05d      	b.n	800539e <UART_SetConfig+0x266>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <UART_SetConfig+0x2dc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d125      	bne.n	8005338 <UART_SetConfig+0x200>
 80052ec:	4b46      	ldr	r3, [pc, #280]	; (8005408 <UART_SetConfig+0x2d0>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052f6:	2bc0      	cmp	r3, #192	; 0xc0
 80052f8:	d016      	beq.n	8005328 <UART_SetConfig+0x1f0>
 80052fa:	2bc0      	cmp	r3, #192	; 0xc0
 80052fc:	d818      	bhi.n	8005330 <UART_SetConfig+0x1f8>
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d00a      	beq.n	8005318 <UART_SetConfig+0x1e0>
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d814      	bhi.n	8005330 <UART_SetConfig+0x1f8>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <UART_SetConfig+0x1d8>
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d008      	beq.n	8005320 <UART_SetConfig+0x1e8>
 800530e:	e00f      	b.n	8005330 <UART_SetConfig+0x1f8>
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e042      	b.n	800539e <UART_SetConfig+0x266>
 8005318:	2302      	movs	r3, #2
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e03e      	b.n	800539e <UART_SetConfig+0x266>
 8005320:	2304      	movs	r3, #4
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e03a      	b.n	800539e <UART_SetConfig+0x266>
 8005328:	2308      	movs	r3, #8
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e036      	b.n	800539e <UART_SetConfig+0x266>
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e032      	b.n	800539e <UART_SetConfig+0x266>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a30      	ldr	r2, [pc, #192]	; (8005400 <UART_SetConfig+0x2c8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d12a      	bne.n	8005398 <UART_SetConfig+0x260>
 8005342:	4b31      	ldr	r3, [pc, #196]	; (8005408 <UART_SetConfig+0x2d0>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800534c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005350:	d01a      	beq.n	8005388 <UART_SetConfig+0x250>
 8005352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005356:	d81b      	bhi.n	8005390 <UART_SetConfig+0x258>
 8005358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535c:	d00c      	beq.n	8005378 <UART_SetConfig+0x240>
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d815      	bhi.n	8005390 <UART_SetConfig+0x258>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <UART_SetConfig+0x238>
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d008      	beq.n	8005380 <UART_SetConfig+0x248>
 800536e:	e00f      	b.n	8005390 <UART_SetConfig+0x258>
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e012      	b.n	800539e <UART_SetConfig+0x266>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e00e      	b.n	800539e <UART_SetConfig+0x266>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e00a      	b.n	800539e <UART_SetConfig+0x266>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e006      	b.n	800539e <UART_SetConfig+0x266>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005396:	e002      	b.n	800539e <UART_SetConfig+0x266>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a17      	ldr	r2, [pc, #92]	; (8005400 <UART_SetConfig+0x2c8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f040 808b 	bne.w	80054c0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d834      	bhi.n	800541c <UART_SetConfig+0x2e4>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x280>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	0800541d 	.word	0x0800541d
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	080053eb 	.word	0x080053eb
 80053cc:	0800541d 	.word	0x0800541d
 80053d0:	0800541d 	.word	0x0800541d
 80053d4:	0800541d 	.word	0x0800541d
 80053d8:	080053f3 	.word	0x080053f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7fe ff72 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 80053e0:	61f8      	str	r0, [r7, #28]
        break;
 80053e2:	e021      	b.n	8005428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <UART_SetConfig+0x2e0>)
 80053e6:	61fb      	str	r3, [r7, #28]
        break;
 80053e8:	e01e      	b.n	8005428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ea:	f7fe fed3 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80053ee:	61f8      	str	r0, [r7, #28]
        break;
 80053f0:	e01a      	b.n	8005428 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f6:	61fb      	str	r3, [r7, #28]
        break;
 80053f8:	e016      	b.n	8005428 <UART_SetConfig+0x2f0>
 80053fa:	bf00      	nop
 80053fc:	efff69f3 	.word	0xefff69f3
 8005400:	40008000 	.word	0x40008000
 8005404:	40013800 	.word	0x40013800
 8005408:	40021000 	.word	0x40021000
 800540c:	40004400 	.word	0x40004400
 8005410:	40004800 	.word	0x40004800
 8005414:	40004c00 	.word	0x40004c00
 8005418:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005426:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80fa 	beq.w	8005624 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	d305      	bcc.n	800544c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005452:	e0e7      	b.n	8005624 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2200      	movs	r2, #0
 8005458:	461c      	mov	r4, r3
 800545a:	4615      	mov	r5, r2
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	022b      	lsls	r3, r5, #8
 8005466:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800546a:	0222      	lsls	r2, r4, #8
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	6849      	ldr	r1, [r1, #4]
 8005470:	0849      	lsrs	r1, r1, #1
 8005472:	2000      	movs	r0, #0
 8005474:	4688      	mov	r8, r1
 8005476:	4681      	mov	r9, r0
 8005478:	eb12 0a08 	adds.w	sl, r2, r8
 800547c:	eb43 0b09 	adc.w	fp, r3, r9
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548e:	4650      	mov	r0, sl
 8005490:	4659      	mov	r1, fp
 8005492:	f7fb fb13 	bl	8000abc <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4613      	mov	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a4:	d308      	bcc.n	80054b8 <UART_SetConfig+0x380>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d204      	bcs.n	80054b8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	60da      	str	r2, [r3, #12]
 80054b6:	e0b5      	b.n	8005624 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054be:	e0b1      	b.n	8005624 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	d15d      	bne.n	8005586 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80054ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d827      	bhi.n	8005522 <UART_SetConfig+0x3ea>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x3a0>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe fee2 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8005500:	61f8      	str	r0, [r7, #28]
        break;
 8005502:	e014      	b.n	800552e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fe fef4 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005508:	61f8      	str	r0, [r7, #28]
        break;
 800550a:	e010      	b.n	800552e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b4c      	ldr	r3, [pc, #304]	; (8005640 <UART_SetConfig+0x508>)
 800550e:	61fb      	str	r3, [r7, #28]
        break;
 8005510:	e00d      	b.n	800552e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fe fe3f 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8005516:	61f8      	str	r0, [r7, #28]
        break;
 8005518:	e009      	b.n	800552e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	61fb      	str	r3, [r7, #28]
        break;
 8005520:	e005      	b.n	800552e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800552c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d077      	beq.n	8005624 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	005a      	lsls	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	441a      	add	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d916      	bls.n	800557e <UART_SetConfig+0x446>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d212      	bcs.n	800557e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f023 030f 	bic.w	r3, r3, #15
 8005560:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	b29a      	uxth	r2, r3
 800556e:	8afb      	ldrh	r3, [r7, #22]
 8005570:	4313      	orrs	r3, r2
 8005572:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	8afa      	ldrh	r2, [r7, #22]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e052      	b.n	8005624 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005584:	e04e      	b.n	8005624 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800558a:	2b08      	cmp	r3, #8
 800558c:	d827      	bhi.n	80055de <UART_SetConfig+0x4a6>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x45c>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055c1 	.word	0x080055c1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	080055df 	.word	0x080055df
 80055a4:	080055cf 	.word	0x080055cf
 80055a8:	080055df 	.word	0x080055df
 80055ac:	080055df 	.word	0x080055df
 80055b0:	080055df 	.word	0x080055df
 80055b4:	080055d7 	.word	0x080055d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7fe fe84 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 80055bc:	61f8      	str	r0, [r7, #28]
        break;
 80055be:	e014      	b.n	80055ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fe96 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 80055c4:	61f8      	str	r0, [r7, #28]
        break;
 80055c6:	e010      	b.n	80055ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <UART_SetConfig+0x508>)
 80055ca:	61fb      	str	r3, [r7, #28]
        break;
 80055cc:	e00d      	b.n	80055ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ce:	f7fe fde1 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80055d2:	61f8      	str	r0, [r7, #28]
        break;
 80055d4:	e009      	b.n	80055ea <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e005      	b.n	80055ea <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055e8:	bf00      	nop
    }

    if (pclk != 0U)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	085a      	lsrs	r2, r3, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	441a      	add	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d909      	bls.n	800561e <UART_SetConfig+0x4e6>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d205      	bcs.n	800561e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	e002      	b.n	8005624 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005630:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005634:	4618      	mov	r0, r3
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563e:	bf00      	nop
 8005640:	00f42400 	.word	0x00f42400

08005644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01a      	beq.n	800575a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005742:	d10a      	bne.n	800575a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af02      	add	r7, sp, #8
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005798:	f7fc f86e 	bl	8001878 <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10e      	bne.n	80057ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f82d 	bl	800581a <UART_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e023      	b.n	8005812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d10e      	bne.n	80057f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f817 	bl	800581a <UART_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e00d      	b.n	8005812 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b09c      	sub	sp, #112	; 0x70
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582a:	e0a5      	b.n	8005978 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	f000 80a1 	beq.w	8005978 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc f81f 	bl	8001878 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x32>
 8005846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005848:	2b00      	cmp	r3, #0
 800584a:	d13e      	bne.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800585a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005860:	667b      	str	r3, [r7, #100]	; 0x64
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800589e:	64ba      	str	r2, [r7, #72]	; 0x48
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e067      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d04f      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e6:	d147      	bne.n	8005978 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e6      	bne.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	613b      	str	r3, [r7, #16]
   return(result);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	66bb      	str	r3, [r7, #104]	; 0x68
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3308      	adds	r3, #8
 8005942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005944:	623a      	str	r2, [r7, #32]
 8005946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	61bb      	str	r3, [r7, #24]
   return(result);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e010      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	429a      	cmp	r2, r3
 8005994:	f43f af4a 	beq.w	800582c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3770      	adds	r7, #112	; 0x70
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b095      	sub	sp, #84	; 0x54
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d118      	bne.n	8005a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	613b      	str	r3, [r7, #16]
   return(result);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e6      	bne.n	8005a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a5c:	bf00      	nop
 8005a5e:	3754      	adds	r7, #84	; 0x54
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fb40 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fb0c 	bl	80050f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae0:	bf00      	nop
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <__NVIC_SetPriority>:
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	db0a      	blt.n	8005b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	490c      	ldr	r1, [pc, #48]	; (8005b48 <__NVIC_SetPriority+0x4c>)
 8005b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1a:	0112      	lsls	r2, r2, #4
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	440b      	add	r3, r1
 8005b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b24:	e00a      	b.n	8005b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	4908      	ldr	r1, [pc, #32]	; (8005b4c <__NVIC_SetPriority+0x50>)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	3b04      	subs	r3, #4
 8005b34:	0112      	lsls	r2, r2, #4
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	440b      	add	r3, r1
 8005b3a:	761a      	strb	r2, [r3, #24]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	e000e100 	.word	0xe000e100
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b54:	2100      	movs	r1, #0
 8005b56:	f06f 0004 	mvn.w	r0, #4
 8005b5a:	f7ff ffcf 	bl	8005afc <__NVIC_SetPriority>
#endif
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b6a:	f3ef 8305 	mrs	r3, IPSR
 8005b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b76:	f06f 0305 	mvn.w	r3, #5
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	e00c      	b.n	8005b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <osKernelInitialize+0x44>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <osKernelInitialize+0x44>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	607b      	str	r3, [r7, #4]
 8005b90:	e002      	b.n	8005b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b98:	687b      	ldr	r3, [r7, #4]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000264 	.word	0x20000264

08005bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb2:	f3ef 8305 	mrs	r3, IPSR
 8005bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bbe:	f06f 0305 	mvn.w	r3, #5
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	e010      	b.n	8005be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <osKernelStart+0x48>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d109      	bne.n	8005be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bce:	f7ff ffbf 	bl	8005b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bd2:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <osKernelStart+0x48>)
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bd8:	f001 fa74 	bl	80070c4 <vTaskStartScheduler>
      stat = osOK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	e002      	b.n	8005be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295
 8005be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005be8:	687b      	ldr	r3, [r7, #4]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000264 	.word	0x20000264

08005bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	; 0x38
 8005bfc:	af04      	add	r7, sp, #16
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c08:	f3ef 8305 	mrs	r3, IPSR
 8005c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d17e      	bne.n	8005d12 <osThreadNew+0x11a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d07b      	beq.n	8005d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c1e:	2318      	movs	r3, #24
 8005c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d045      	beq.n	8005cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <osThreadNew+0x48>
        name = attr->name;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <osThreadNew+0x6e>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b38      	cmp	r3, #56	; 0x38
 8005c58:	d805      	bhi.n	8005c66 <osThreadNew+0x6e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <osThreadNew+0x72>
        return (NULL);
 8005c66:	2300      	movs	r3, #0
 8005c68:	e054      	b.n	8005d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	089b      	lsrs	r3, r3, #2
 8005c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <osThreadNew+0xa8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2bbb      	cmp	r3, #187	; 0xbb
 8005c88:	d90a      	bls.n	8005ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <osThreadNew+0xa8>
        mem = 1;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e010      	b.n	8005cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10c      	bne.n	8005cc2 <osThreadNew+0xca>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d108      	bne.n	8005cc2 <osThreadNew+0xca>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <osThreadNew+0xca>
          mem = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e001      	b.n	8005cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d110      	bne.n	8005cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cd0:	9202      	str	r2, [sp, #8]
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 ff86 	bl	8006bf0 <xTaskCreateStatic>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e013      	b.n	8005d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 ffd1 	bl	8006caa <xTaskCreate>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d001      	beq.n	8005d12 <osThreadNew+0x11a>
            hTask = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d12:	693b      	ldr	r3, [r7, #16]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	; 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d24:	f3ef 8305 	mrs	r3, IPSR
 8005d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <osDelay+0x1c>
    stat = osErrorISR;
 8005d30:	f06f 0305 	mvn.w	r3, #5
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e007      	b.n	8005d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 f98a 	bl	800705c <vTaskDelay>
    }
  }

  return (stat);
 8005d48:	68fb      	ldr	r3, [r7, #12]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	; 0x28
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d62:	f3ef 8305 	mrs	r3, IPSR
 8005d66:	613b      	str	r3, [r7, #16]
  return(result);
 8005d68:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d175      	bne.n	8005e5a <osSemaphoreNew+0x108>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d072      	beq.n	8005e5a <osSemaphoreNew+0x108>
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d86e      	bhi.n	8005e5a <osSemaphoreNew+0x108>
    mem = -1;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <osSemaphoreNew+0x4c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b4f      	cmp	r3, #79	; 0x4f
 8005d96:	d902      	bls.n	8005d9e <osSemaphoreNew+0x4c>
        mem = 1;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e00c      	b.n	8005db8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d108      	bne.n	8005db8 <osSemaphoreNew+0x66>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <osSemaphoreNew+0x66>
          mem = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e001      	b.n	8005db8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d04c      	beq.n	8005e5a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d128      	bne.n	8005e18 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10a      	bne.n	8005de2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	9200      	str	r2, [sp, #0]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	2001      	movs	r0, #1
 8005dda:	f000 f993 	bl	8006104 <xQueueGenericCreateStatic>
 8005dde:	61f8      	str	r0, [r7, #28]
 8005de0:	e005      	b.n	8005dee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005de2:	2203      	movs	r2, #3
 8005de4:	2100      	movs	r1, #0
 8005de6:	2001      	movs	r0, #1
 8005de8:	f000 fa04 	bl	80061f4 <xQueueGenericCreate>
 8005dec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d022      	beq.n	8005e3a <osSemaphoreNew+0xe8>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01f      	beq.n	8005e3a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	69f8      	ldr	r0, [r7, #28]
 8005e02:	f000 fabf 	bl	8006384 <xQueueGenericSend>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d016      	beq.n	8005e3a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e0c:	69f8      	ldr	r0, [r7, #28]
 8005e0e:	f000 fd33 	bl	8006878 <vQueueDelete>
            hSemaphore = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e010      	b.n	8005e3a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	461a      	mov	r2, r3
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fa41 	bl	80062ae <xQueueCreateCountingSemaphoreStatic>
 8005e2c:	61f8      	str	r0, [r7, #28]
 8005e2e:	e004      	b.n	8005e3a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa72 	bl	800631c <xQueueCreateCountingSemaphore>
 8005e38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e001      	b.n	8005e52 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	69f8      	ldr	r0, [r7, #28]
 8005e56:	f000 fe43 	bl	8006ae0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e5a:	69fb      	ldr	r3, [r7, #28]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3720      	adds	r7, #32
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a06      	ldr	r2, [pc, #24]	; (8005e94 <vApplicationGetIdleTaskMemory+0x30>)
 8005e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000268 	.word	0x20000268
 8005e94:	20000324 	.word	0x20000324

08005e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a07      	ldr	r2, [pc, #28]	; (8005ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8005eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eb6:	601a      	str	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20000524 	.word	0x20000524
 8005ec8:	200005e0 	.word	0x200005e0

08005ecc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f103 0208 	add.w	r2, r3, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f103 0208 	add.w	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f103 0208 	add.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d103      	bne.n	8005f8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e00c      	b.n	8005fa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3308      	adds	r3, #8
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <vListInsert+0x2e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d2f6      	bcs.n	8005f96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d103      	bne.n	8006014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800605e:	f002 f9e9 	bl	8008434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	3b01      	subs	r3, #1
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	441a      	add	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d114      	bne.n	80060de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01a      	beq.n	80060f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3310      	adds	r3, #16
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fa99 	bl	80075f8 <xTaskRemoveFromEventList>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d012      	beq.n	80060f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <xQueueGenericReset+0xcc>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	e009      	b.n	80060f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3310      	adds	r3, #16
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fef2 	bl	8005ecc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff feed 	bl	8005ecc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060f2:	f002 f9cf 	bl	8008494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060f6:	2301      	movs	r3, #1
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	; 0x38
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <xQueueGenericCreateStatic+0x52>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <xQueueGenericCreateStatic+0x56>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueGenericCreateStatic+0x58>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	623b      	str	r3, [r7, #32]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <xQueueGenericCreateStatic+0x7e>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <xQueueGenericCreateStatic+0x82>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <xQueueGenericCreateStatic+0x84>
 8006186:	2300      	movs	r3, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	61fb      	str	r3, [r7, #28]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061a2:	2350      	movs	r3, #80	; 0x50
 80061a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b50      	cmp	r3, #80	; 0x50
 80061aa:	d00a      	beq.n	80061c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	61bb      	str	r3, [r7, #24]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f83f 	bl	8006268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3730      	adds	r7, #48	; 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	613b      	str	r3, [r7, #16]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3350      	adds	r3, #80	; 0x50
 800622c:	4618      	mov	r0, r3
 800622e:	f002 fa23 	bl	8008678 <pvPortMalloc>
 8006232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	3350      	adds	r3, #80	; 0x50
 8006242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800624c:	79fa      	ldrb	r2, [r7, #7]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4613      	mov	r3, r2
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f805 	bl	8006268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800625e:	69bb      	ldr	r3, [r7, #24]
	}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e002      	b.n	800628a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006296:	2101      	movs	r1, #1
 8006298:	69b8      	ldr	r0, [r7, #24]
 800629a:	f7ff fecb 	bl	8006034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	78fa      	ldrb	r2, [r7, #3]
 80062a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61bb      	str	r3, [r7, #24]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d90a      	bls.n	80062f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	617b      	str	r3, [r7, #20]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80062f4:	2302      	movs	r3, #2
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	2100      	movs	r1, #0
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff ff00 	bl	8006104 <xQueueGenericCreateStatic>
 8006304:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006312:	69fb      	ldr	r3, [r7, #28]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	613b      	str	r3, [r7, #16]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d90a      	bls.n	8006360 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60fb      	str	r3, [r7, #12]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006360:	2202      	movs	r2, #2
 8006362:	2100      	movs	r1, #0
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff45 	bl	80061f4 <xQueueGenericCreate>
 800636a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006378:	697b      	ldr	r3, [r7, #20]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006392:	2300      	movs	r3, #0
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueGenericSend+0x32>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <xQueueGenericSend+0x40>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <xQueueGenericSend+0x44>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <xQueueGenericSend+0x46>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xQueueGenericSend+0x60>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d103      	bne.n	80063f2 <xQueueGenericSend+0x6e>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <xQueueGenericSend+0x72>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueGenericSend+0x74>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueGenericSend+0x8e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006412:	f001 fab3 	bl	800797c <xTaskGetSchedulerState>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <xQueueGenericSend+0x9e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueGenericSend+0xa2>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueGenericSend+0xa4>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xQueueGenericSend+0xbe>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61fb      	str	r3, [r7, #28]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006442:	f001 fff7 	bl	8008434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xQueueGenericSend+0xd4>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d129      	bne.n	80064ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800645e:	f000 fa2e 	bl	80068be <prvCopyDataToQueue>
 8006462:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f8c1 	bl	80075f8 <xTaskRemoveFromEventList>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800647c:	4b3f      	ldr	r3, [pc, #252]	; (800657c <xQueueGenericSend+0x1f8>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	e00a      	b.n	80064a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006494:	4b39      	ldr	r3, [pc, #228]	; (800657c <xQueueGenericSend+0x1f8>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a4:	f001 fff6 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e063      	b.n	8006574 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b2:	f001 ffef 	bl	8008494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e05c      	b.n	8006574 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f8fb 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ce:	f001 ffe1 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d2:	f000 fe67 	bl	80071a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064d6:	f001 ffad 	bl	8008434 <vPortEnterCritical>
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d103      	bne.n	80064f0 <xQueueGenericSend+0x16c>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d103      	bne.n	8006506 <xQueueGenericSend+0x182>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006506:	f001 ffc5 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650a:	1d3a      	adds	r2, r7, #4
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f8ea 	bl	80076ec <xTaskCheckForTimeOut>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d124      	bne.n	8006568 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800651e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006520:	f000 fac5 	bl	8006aae <prvIsQueueFull>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	3310      	adds	r3, #16
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f810 	bl	8007558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653a:	f000 fa50 	bl	80069de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f000 fe3f 	bl	80071c0 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f af7c 	bne.w	8006442 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <xQueueGenericSend+0x1f8>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	e772      	b.n	8006442 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800655c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800655e:	f000 fa3e 	bl	80069de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006562:	f000 fe2d 	bl	80071c0 <xTaskResumeAll>
 8006566:	e76c      	b.n	8006442 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800656a:	f000 fa38 	bl	80069de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800656e:	f000 fe27 	bl	80071c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006574:	4618      	mov	r0, r3
 8006576:	3738      	adds	r7, #56	; 0x38
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b090      	sub	sp, #64	; 0x40
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <xQueueGenericSendFromISR+0x3c>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <xQueueGenericSendFromISR+0x40>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <xQueueGenericSendFromISR+0x42>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSendFromISR+0x6a>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSendFromISR+0x6e>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSendFromISR+0x70>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	623b      	str	r3, [r7, #32]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800660a:	f001 fff5 	bl	80085f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800660e:	f3ef 8211 	mrs	r2, BASEPRI
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	61fa      	str	r2, [r7, #28]
 8006624:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006626:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <xQueueGenericSendFromISR+0xbc>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d12f      	bne.n	800669c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006652:	f000 f934 	bl	80068be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006656:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d112      	bne.n	8006686 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d016      	beq.n	8006696 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	4618      	mov	r0, r3
 800666e:	f000 ffc3 	bl	80075f8 <xTaskRemoveFromEventList>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e007      	b.n	8006696 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006686:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800668a:	3301      	adds	r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	b25a      	sxtb	r2, r3
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006696:	2301      	movs	r3, #1
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800669a:	e001      	b.n	80066a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800669c:	2300      	movs	r3, #0
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3740      	adds	r7, #64	; 0x40
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <xQueueReceive+0x30>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	623b      	str	r3, [r7, #32]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <xQueueReceive+0x3e>
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <xQueueReceive+0x42>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <xQueueReceive+0x44>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xQueueReceive+0x5e>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61fb      	str	r3, [r7, #28]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006716:	f001 f931 	bl	800797c <xTaskGetSchedulerState>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <xQueueReceive+0x6e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <xQueueReceive+0x72>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <xQueueReceive+0x74>
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <xQueueReceive+0x8e>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	61bb      	str	r3, [r7, #24]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006746:	f001 fe75 	bl	8008434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01f      	beq.n	8006796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675a:	f000 f91a 	bl	8006992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00f      	beq.n	800678e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	3310      	adds	r3, #16
 8006772:	4618      	mov	r0, r3
 8006774:	f000 ff40 	bl	80075f8 <xTaskRemoveFromEventList>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800677e:	4b3d      	ldr	r3, [pc, #244]	; (8006874 <xQueueReceive+0x1bc>)
 8006780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800678e:	f001 fe81 	bl	8008494 <vPortExitCritical>
				return pdPASS;
 8006792:	2301      	movs	r3, #1
 8006794:	e069      	b.n	800686a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800679c:	f001 fe7a 	bl	8008494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e062      	b.n	800686a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067aa:	f107 0310 	add.w	r3, r7, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 ff86 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067b8:	f001 fe6c 	bl	8008494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067bc:	f000 fcf2 	bl	80071a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067c0:	f001 fe38 	bl	8008434 <vPortEnterCritical>
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d103      	bne.n	80067da <xQueueReceive+0x122>
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e0:	b25b      	sxtb	r3, r3
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d103      	bne.n	80067f0 <xQueueReceive+0x138>
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f0:	f001 fe50 	bl	8008494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067f4:	1d3a      	adds	r2, r7, #4
 80067f6:	f107 0310 	add.w	r3, r7, #16
 80067fa:	4611      	mov	r1, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 ff75 	bl	80076ec <xTaskCheckForTimeOut>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d123      	bne.n	8006850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680a:	f000 f93a 	bl	8006a82 <prvIsQueueEmpty>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	3324      	adds	r3, #36	; 0x24
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fe9b 	bl	8007558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006824:	f000 f8db 	bl	80069de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006828:	f000 fcca 	bl	80071c0 <xTaskResumeAll>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d189      	bne.n	8006746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <xQueueReceive+0x1bc>)
 8006834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	e780      	b.n	8006746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006846:	f000 f8ca 	bl	80069de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800684a:	f000 fcb9 	bl	80071c0 <xTaskResumeAll>
 800684e:	e77a      	b.n	8006746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006852:	f000 f8c4 	bl	80069de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006856:	f000 fcb3 	bl	80071c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800685a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685c:	f000 f911 	bl	8006a82 <prvIsQueueEmpty>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	f43f af6f 	beq.w	8006746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800686a:	4618      	mov	r0, r3
 800686c:	3730      	adds	r7, #48	; 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <vQueueDelete+0x28>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60bb      	str	r3, [r7, #8]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f947 	bl	8006b34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 ffad 	bl	8008810 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d14d      	bne.n	8006980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f865 	bl	80079b8 <xTaskPriorityDisinherit>
 80068ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	e043      	b.n	8006980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d119      	bne.n	8006932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6858      	ldr	r0, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	461a      	mov	r2, r3
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	f002 f9c2 	bl	8008c92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d32b      	bcc.n	8006980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e026      	b.n	8006980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68d8      	ldr	r0, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	461a      	mov	r2, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	f002 f9a8 	bl	8008c92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	425b      	negs	r3, r3
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d207      	bcs.n	800696e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	425b      	negs	r3, r3
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d105      	bne.n	8006980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3b01      	subs	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006988:	697b      	ldr	r3, [r7, #20]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	441a      	add	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d303      	bcc.n	80069c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	461a      	mov	r2, r3
 80069d0:	6838      	ldr	r0, [r7, #0]
 80069d2:	f002 f95e 	bl	8008c92 <memcpy>
	}
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069e6:	f001 fd25 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f2:	e011      	b.n	8006a18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3324      	adds	r3, #36	; 0x24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fdf9 	bl	80075f8 <xTaskRemoveFromEventList>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a0c:	f000 fed0 	bl	80077b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dce9      	bgt.n	80069f4 <prvUnlockQueue+0x16>
 8006a20:	e000      	b.n	8006a24 <prvUnlockQueue+0x46>
					break;
 8006a22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a2c:	f001 fd32 	bl	8008494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a30:	f001 fd00 	bl	8008434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	e011      	b.n	8006a62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d012      	beq.n	8006a6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3310      	adds	r3, #16
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fdd4 	bl	80075f8 <xTaskRemoveFromEventList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a56:	f000 feab 	bl	80077b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dce9      	bgt.n	8006a3e <prvUnlockQueue+0x60>
 8006a6a:	e000      	b.n	8006a6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fd0d 	bl	8008494 <vPortExitCritical>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a8a:	f001 fcd3 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e001      	b.n	8006aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aa0:	f001 fcf8 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab6:	f001 fcbd 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d102      	bne.n	8006acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad0:	f001 fce0 	bl	8008494 <vPortExitCritical>

	return xReturn;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e014      	b.n	8006b1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006af0:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <vQueueAddToRegistry+0x50>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006afc:	490c      	ldr	r1, [pc, #48]	; (8006b30 <vQueueAddToRegistry+0x50>)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <vQueueAddToRegistry+0x50>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b12:	e006      	b.n	8006b22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	d9e7      	bls.n	8006af0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200009e0 	.word	0x200009e0

08006b34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e016      	b.n	8006b70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b42:	4a10      	ldr	r2, [pc, #64]	; (8006b84 <vQueueUnregisterQueue+0x50>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	4413      	add	r3, r2
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d10b      	bne.n	8006b6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b52:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <vQueueUnregisterQueue+0x50>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2100      	movs	r1, #0
 8006b58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b5c:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <vQueueUnregisterQueue+0x50>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]
				break;
 8006b68:	e006      	b.n	8006b78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b07      	cmp	r3, #7
 8006b74:	d9e5      	bls.n	8006b42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	200009e0 	.word	0x200009e0

08006b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b98:	f001 fc4c 	bl	8008434 <vPortEnterCritical>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d103      	bne.n	8006bb2 <vQueueWaitForMessageRestricted+0x2a>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb8:	b25b      	sxtb	r3, r3
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d103      	bne.n	8006bc8 <vQueueWaitForMessageRestricted+0x40>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc8:	f001 fc64 	bl	8008494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fcdf 	bl	80075a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006be2:	6978      	ldr	r0, [r7, #20]
 8006be4:	f7ff fefb 	bl	80069de <prvUnlockQueue>
	}
 8006be8:	bf00      	nop
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	623b      	str	r3, [r7, #32]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	61fb      	str	r3, [r7, #28]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c36:	23bc      	movs	r3, #188	; 0xbc
 8006c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2bbc      	cmp	r3, #188	; 0xbc
 8006c3e:	d00a      	beq.n	8006c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	61bb      	str	r3, [r7, #24]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01e      	beq.n	8006c9c <xTaskCreateStatic+0xac>
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c76:	2300      	movs	r3, #0
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	f107 0314 	add.w	r3, r7, #20
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f850 	bl	8006d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c96:	f000 f8f3 	bl	8006e80 <prvAddNewTaskToReadyList>
 8006c9a:	e001      	b.n	8006ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ca0:	697b      	ldr	r3, [r7, #20]
	}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b08c      	sub	sp, #48	; 0x30
 8006cae:	af04      	add	r7, sp, #16
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fcda 	bl	8008678 <pvPortMalloc>
 8006cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ccc:	20bc      	movs	r0, #188	; 0xbc
 8006cce:	f001 fcd3 	bl	8008678 <pvPortMalloc>
 8006cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce0:	e005      	b.n	8006cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f001 fd94 	bl	8008810 <vPortFree>
 8006ce8:	e001      	b.n	8006cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d017      	beq.n	8006d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9303      	str	r3, [sp, #12]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	9302      	str	r3, [sp, #8]
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f80e 	bl	8006d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d18:	69f8      	ldr	r0, [r7, #28]
 8006d1a:	f000 f8b1 	bl	8006e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e002      	b.n	8006d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	21a5      	movs	r1, #165	; 0xa5
 8006d4e:	f001 ffae 	bl	8008cae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	617b      	str	r3, [r7, #20]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01f      	beq.n	8006dd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	e012      	b.n	8006dbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	7819      	ldrb	r1, [r3, #0]
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	3334      	adds	r3, #52	; 0x34
 8006da8:	460a      	mov	r2, r1
 8006daa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d006      	beq.n	8006dc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	d9e9      	bls.n	8006d98 <prvInitialiseNewTask+0x64>
 8006dc4:	e000      	b.n	8006dc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006dc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd0:	e003      	b.n	8006dda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	2b37      	cmp	r3, #55	; 0x37
 8006dde:	d901      	bls.n	8006de4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006de0:	2337      	movs	r3, #55	; 0x37
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff f886 	bl	8005f0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	3318      	adds	r3, #24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f881 	bl	8005f0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	3354      	adds	r3, #84	; 0x54
 8006e34:	2260      	movs	r2, #96	; 0x60
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 ff38 	bl	8008cae <memset>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	4a0c      	ldr	r2, [pc, #48]	; (8006e74 <prvInitialiseNewTask+0x140>)
 8006e42:	659a      	str	r2, [r3, #88]	; 0x58
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <prvInitialiseNewTask+0x144>)
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	; (8006e7c <prvInitialiseNewTask+0x148>)
 8006e4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	69b8      	ldr	r0, [r7, #24]
 8006e56:	f001 f9bf 	bl	80081d8 <pxPortInitialiseStack>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e6c:	bf00      	nop
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	08009c44 	.word	0x08009c44
 8006e78:	08009c64 	.word	0x08009c64
 8006e7c:	08009c24 	.word	0x08009c24

08006e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e88:	f001 fad4 	bl	8008434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e8c:	4b2d      	ldr	r3, [pc, #180]	; (8006f44 <prvAddNewTaskToReadyList+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a2c      	ldr	r2, [pc, #176]	; (8006f44 <prvAddNewTaskToReadyList+0xc4>)
 8006e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e96:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <prvAddNewTaskToReadyList+0xc8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e9e:	4a2a      	ldr	r2, [pc, #168]	; (8006f48 <prvAddNewTaskToReadyList+0xc8>)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ea4:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <prvAddNewTaskToReadyList+0xc4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d110      	bne.n	8006ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006eac:	f000 fca4 	bl	80077f8 <prvInitialiseTaskLists>
 8006eb0:	e00d      	b.n	8006ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006eb2:	4b26      	ldr	r3, [pc, #152]	; (8006f4c <prvAddNewTaskToReadyList+0xcc>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eba:	4b23      	ldr	r3, [pc, #140]	; (8006f48 <prvAddNewTaskToReadyList+0xc8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d802      	bhi.n	8006ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <prvAddNewTaskToReadyList+0xc8>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ece:	4b20      	ldr	r3, [pc, #128]	; (8006f50 <prvAddNewTaskToReadyList+0xd0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	; (8006f50 <prvAddNewTaskToReadyList+0xd0>)
 8006ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <prvAddNewTaskToReadyList+0xd0>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <prvAddNewTaskToReadyList+0xd4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d903      	bls.n	8006ef4 <prvAddNewTaskToReadyList+0x74>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <prvAddNewTaskToReadyList+0xd4>)
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <prvAddNewTaskToReadyList+0xd8>)
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7ff f80b 	bl	8005f26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f10:	f001 fac0 	bl	8008494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <prvAddNewTaskToReadyList+0xcc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00e      	beq.n	8006f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <prvAddNewTaskToReadyList+0xc8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d207      	bcs.n	8006f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <prvAddNewTaskToReadyList+0xdc>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000ef4 	.word	0x20000ef4
 8006f48:	20000a20 	.word	0x20000a20
 8006f4c:	20000f00 	.word	0x20000f00
 8006f50:	20000f10 	.word	0x20000f10
 8006f54:	20000efc 	.word	0x20000efc
 8006f58:	20000a24 	.word	0x20000a24
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <vTaskDelayUntil+0x2a>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	617b      	str	r3, [r7, #20]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <vTaskDelayUntil+0x46>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <vTaskDelayUntil+0xf0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <vTaskDelayUntil+0x64>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	60fb      	str	r3, [r7, #12]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006fc4:	f000 f8ee 	bl	80071a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006fc8:	4b22      	ldr	r3, [pc, #136]	; (8007054 <vTaskDelayUntil+0xf4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a3a      	ldr	r2, [r7, #32]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d20b      	bcs.n	8006ffa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d211      	bcs.n	8007010 <vTaskDelayUntil+0xb0>
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d90d      	bls.n	8007010 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff8:	e00a      	b.n	8007010 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	429a      	cmp	r2, r3
 8007002:	d303      	bcc.n	800700c <vTaskDelayUntil+0xac>
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	429a      	cmp	r2, r3
 800700a:	d901      	bls.n	8007010 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	2b00      	cmp	r3, #0
 800701a:	d006      	beq.n	800702a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fd35 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800702a:	f000 f8c9 	bl	80071c0 <xTaskResumeAll>
 800702e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <vTaskDelayUntil+0xf8>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007046:	bf00      	nop
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000f1c 	.word	0x20000f1c
 8007054:	20000ef8 	.word	0x20000ef8
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d017      	beq.n	800709e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <vTaskDelay+0x60>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <vTaskDelay+0x30>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800708c:	f000 f88a 	bl	80071a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007090:	2100      	movs	r1, #0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fcfe 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007098:	f000 f892 	bl	80071c0 <xTaskResumeAll>
 800709c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <vTaskDelay+0x64>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000f1c 	.word	0x20000f1c
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070d2:	463a      	mov	r2, r7
 80070d4:	1d39      	adds	r1, r7, #4
 80070d6:	f107 0308 	add.w	r3, r7, #8
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fec2 	bl	8005e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	9202      	str	r2, [sp, #8]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2300      	movs	r3, #0
 80070f0:	460a      	mov	r2, r1
 80070f2:	4924      	ldr	r1, [pc, #144]	; (8007184 <vTaskStartScheduler+0xc0>)
 80070f4:	4824      	ldr	r0, [pc, #144]	; (8007188 <vTaskStartScheduler+0xc4>)
 80070f6:	f7ff fd7b 	bl	8006bf0 <xTaskCreateStatic>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4a23      	ldr	r2, [pc, #140]	; (800718c <vTaskStartScheduler+0xc8>)
 80070fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007100:	4b22      	ldr	r3, [pc, #136]	; (800718c <vTaskStartScheduler+0xc8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e001      	b.n	8007112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d102      	bne.n	800711e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007118:	f000 fd10 	bl	8007b3c <xTimerCreateTimerTask>
 800711c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d11b      	bne.n	800715c <vTaskStartScheduler+0x98>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007138:	4b15      	ldr	r3, [pc, #84]	; (8007190 <vTaskStartScheduler+0xcc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3354      	adds	r3, #84	; 0x54
 800713e:	4a15      	ldr	r2, [pc, #84]	; (8007194 <vTaskStartScheduler+0xd0>)
 8007140:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <vTaskStartScheduler+0xd4>)
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <vTaskStartScheduler+0xd8>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007150:	4b13      	ldr	r3, [pc, #76]	; (80071a0 <vTaskStartScheduler+0xdc>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007156:	f001 f8cb 	bl	80082f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800715a:	e00e      	b.n	800717a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d10a      	bne.n	800717a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	60fb      	str	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <vTaskStartScheduler+0xb4>
}
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08009b24 	.word	0x08009b24
 8007188:	080077c9 	.word	0x080077c9
 800718c:	20000f18 	.word	0x20000f18
 8007190:	20000a20 	.word	0x20000a20
 8007194:	20000010 	.word	0x20000010
 8007198:	20000f14 	.word	0x20000f14
 800719c:	20000f00 	.word	0x20000f00
 80071a0:	20000ef8 	.word	0x20000ef8

080071a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <vTaskSuspendAll+0x18>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3301      	adds	r3, #1
 80071ae:	4a03      	ldr	r2, [pc, #12]	; (80071bc <vTaskSuspendAll+0x18>)
 80071b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071b2:	bf00      	nop
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000f1c 	.word	0x20000f1c

080071c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ce:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <xTaskResumeAll+0x118>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <xTaskResumeAll+0x2c>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	603b      	str	r3, [r7, #0]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071ec:	f001 f922 	bl	8008434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <xTaskResumeAll+0x118>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	4a38      	ldr	r2, [pc, #224]	; (80072d8 <xTaskResumeAll+0x118>)
 80071f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071fa:	4b37      	ldr	r3, [pc, #220]	; (80072d8 <xTaskResumeAll+0x118>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d162      	bne.n	80072c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <xTaskResumeAll+0x11c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d05e      	beq.n	80072c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800720a:	e02f      	b.n	800726c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720c:	4b34      	ldr	r3, [pc, #208]	; (80072e0 <xTaskResumeAll+0x120>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3318      	adds	r3, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fee1 	bl	8005fe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3304      	adds	r3, #4
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fedc 	bl	8005fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <xTaskResumeAll+0x124>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d903      	bls.n	800723c <xTaskResumeAll+0x7c>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <xTaskResumeAll+0x124>)
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4a27      	ldr	r2, [pc, #156]	; (80072e8 <xTaskResumeAll+0x128>)
 800724a:	441a      	add	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7fe fe67 	bl	8005f26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4b23      	ldr	r3, [pc, #140]	; (80072ec <xTaskResumeAll+0x12c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	429a      	cmp	r2, r3
 8007264:	d302      	bcc.n	800726c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007266:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <xTaskResumeAll+0x130>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800726c:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <xTaskResumeAll+0x120>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1cb      	bne.n	800720c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800727a:	f000 fb5f 	bl	800793c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800727e:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <xTaskResumeAll+0x134>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d010      	beq.n	80072ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800728a:	f000 f847 	bl	800731c <xTaskIncrementTick>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007294:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <xTaskResumeAll+0x130>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3b01      	subs	r3, #1
 800729e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f1      	bne.n	800728a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80072a6:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <xTaskResumeAll+0x134>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072ac:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <xTaskResumeAll+0x130>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072b8:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <xTaskResumeAll+0x138>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c8:	f001 f8e4 	bl	8008494 <vPortExitCritical>

	return xAlreadyYielded;
 80072cc:	68bb      	ldr	r3, [r7, #8]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000f1c 	.word	0x20000f1c
 80072dc:	20000ef4 	.word	0x20000ef4
 80072e0:	20000eb4 	.word	0x20000eb4
 80072e4:	20000efc 	.word	0x20000efc
 80072e8:	20000a24 	.word	0x20000a24
 80072ec:	20000a20 	.word	0x20000a20
 80072f0:	20000f08 	.word	0x20000f08
 80072f4:	20000f04 	.word	0x20000f04
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <xTaskGetTickCount+0x1c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007308:	687b      	ldr	r3, [r7, #4]
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000ef8 	.word	0x20000ef8

0800731c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007326:	4b4f      	ldr	r3, [pc, #316]	; (8007464 <xTaskIncrementTick+0x148>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f040 808f 	bne.w	800744e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007330:	4b4d      	ldr	r3, [pc, #308]	; (8007468 <xTaskIncrementTick+0x14c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007338:	4a4b      	ldr	r2, [pc, #300]	; (8007468 <xTaskIncrementTick+0x14c>)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d120      	bne.n	8007386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007344:	4b49      	ldr	r3, [pc, #292]	; (800746c <xTaskIncrementTick+0x150>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <xTaskIncrementTick+0x48>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	603b      	str	r3, [r7, #0]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <xTaskIncrementTick+0x46>
 8007364:	4b41      	ldr	r3, [pc, #260]	; (800746c <xTaskIncrementTick+0x150>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4b41      	ldr	r3, [pc, #260]	; (8007470 <xTaskIncrementTick+0x154>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a3f      	ldr	r2, [pc, #252]	; (800746c <xTaskIncrementTick+0x150>)
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	4a3f      	ldr	r2, [pc, #252]	; (8007470 <xTaskIncrementTick+0x154>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4b3e      	ldr	r3, [pc, #248]	; (8007474 <xTaskIncrementTick+0x158>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3301      	adds	r3, #1
 800737e:	4a3d      	ldr	r2, [pc, #244]	; (8007474 <xTaskIncrementTick+0x158>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	f000 fadb 	bl	800793c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007386:	4b3c      	ldr	r3, [pc, #240]	; (8007478 <xTaskIncrementTick+0x15c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	d349      	bcc.n	8007424 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007390:	4b36      	ldr	r3, [pc, #216]	; (800746c <xTaskIncrementTick+0x150>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739a:	4b37      	ldr	r3, [pc, #220]	; (8007478 <xTaskIncrementTick+0x15c>)
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	601a      	str	r2, [r3, #0]
					break;
 80073a2:	e03f      	b.n	8007424 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a4:	4b31      	ldr	r3, [pc, #196]	; (800746c <xTaskIncrementTick+0x150>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d203      	bcs.n	80073c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073bc:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <xTaskIncrementTick+0x15c>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073c2:	e02f      	b.n	8007424 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fe09 	bl	8005fe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3318      	adds	r3, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fe00 	bl	8005fe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4b25      	ldr	r3, [pc, #148]	; (800747c <xTaskIncrementTick+0x160>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <xTaskIncrementTick+0xd8>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a22      	ldr	r2, [pc, #136]	; (800747c <xTaskIncrementTick+0x160>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <xTaskIncrementTick+0x164>)
 8007402:	441a      	add	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe fd8b 	bl	8005f26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <xTaskIncrementTick+0x168>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	429a      	cmp	r2, r3
 800741c:	d3b8      	bcc.n	8007390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007422:	e7b5      	b.n	8007390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007424:	4b17      	ldr	r3, [pc, #92]	; (8007484 <xTaskIncrementTick+0x168>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	4915      	ldr	r1, [pc, #84]	; (8007480 <xTaskIncrementTick+0x164>)
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d901      	bls.n	8007440 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007440:	4b11      	ldr	r3, [pc, #68]	; (8007488 <xTaskIncrementTick+0x16c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	e004      	b.n	8007458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <xTaskIncrementTick+0x170>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <xTaskIncrementTick+0x170>)
 8007456:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007458:	697b      	ldr	r3, [r7, #20]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000f1c 	.word	0x20000f1c
 8007468:	20000ef8 	.word	0x20000ef8
 800746c:	20000eac 	.word	0x20000eac
 8007470:	20000eb0 	.word	0x20000eb0
 8007474:	20000f0c 	.word	0x20000f0c
 8007478:	20000f14 	.word	0x20000f14
 800747c:	20000efc 	.word	0x20000efc
 8007480:	20000a24 	.word	0x20000a24
 8007484:	20000a20 	.word	0x20000a20
 8007488:	20000f08 	.word	0x20000f08
 800748c:	20000f04 	.word	0x20000f04

08007490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007496:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <vTaskSwitchContext+0xb0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800749e:	4b29      	ldr	r3, [pc, #164]	; (8007544 <vTaskSwitchContext+0xb4>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074a4:	e046      	b.n	8007534 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80074a6:	4b27      	ldr	r3, [pc, #156]	; (8007544 <vTaskSwitchContext+0xb4>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b26      	ldr	r3, [pc, #152]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e010      	b.n	80074d6 <vTaskSwitchContext+0x46>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vTaskSwitchContext+0x3e>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	491d      	ldr	r1, [pc, #116]	; (800754c <vTaskSwitchContext+0xbc>)
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0e4      	beq.n	80074b4 <vTaskSwitchContext+0x24>
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4a15      	ldr	r2, [pc, #84]	; (800754c <vTaskSwitchContext+0xbc>)
 80074f6:	4413      	add	r3, r2
 80074f8:	60bb      	str	r3, [r7, #8]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	605a      	str	r2, [r3, #4]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	3308      	adds	r3, #8
 800750c:	429a      	cmp	r2, r3
 800750e:	d104      	bne.n	800751a <vTaskSwitchContext+0x8a>
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	4a0b      	ldr	r2, [pc, #44]	; (8007550 <vTaskSwitchContext+0xc0>)
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4a08      	ldr	r2, [pc, #32]	; (8007548 <vTaskSwitchContext+0xb8>)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <vTaskSwitchContext+0xc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3354      	adds	r3, #84	; 0x54
 8007530:	4a08      	ldr	r2, [pc, #32]	; (8007554 <vTaskSwitchContext+0xc4>)
 8007532:	6013      	str	r3, [r2, #0]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	20000f1c 	.word	0x20000f1c
 8007544:	20000f08 	.word	0x20000f08
 8007548:	20000efc 	.word	0x20000efc
 800754c:	20000a24 	.word	0x20000a24
 8007550:	20000a20 	.word	0x20000a20
 8007554:	20000010 	.word	0x20000010

08007558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	60fb      	str	r3, [r7, #12]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <vTaskPlaceOnEventList+0x44>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3318      	adds	r3, #24
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fe fcf1 	bl	8005f6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800758c:	2101      	movs	r1, #1
 800758e:	6838      	ldr	r0, [r7, #0]
 8007590:	f000 fa80 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000a20 	.word	0x20000a20

080075a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	617b      	str	r3, [r7, #20]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3318      	adds	r3, #24
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7fe fca8 	bl	8005f26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68b8      	ldr	r0, [r7, #8]
 80075e6:	f000 fa55 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
	}
 80075ea:	bf00      	nop
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000a20 	.word	0x20000a20

080075f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60fb      	str	r3, [r7, #12]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3318      	adds	r3, #24
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fcd9 	bl	8005fe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762e:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <xTaskRemoveFromEventList+0xb0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d11d      	bne.n	8007672 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fcd0 	bl	8005fe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d903      	bls.n	8007654 <xTaskRemoveFromEventList+0x5c>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a16      	ldr	r2, [pc, #88]	; (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <xTaskRemoveFromEventList+0xb8>)
 8007662:	441a      	add	r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f7fe fc5b 	bl	8005f26 <vListInsertEnd>
 8007670:	e005      	b.n	800767e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	3318      	adds	r3, #24
 8007676:	4619      	mov	r1, r3
 8007678:	480e      	ldr	r0, [pc, #56]	; (80076b4 <xTaskRemoveFromEventList+0xbc>)
 800767a:	f7fe fc54 	bl	8005f26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <xTaskRemoveFromEventList+0xc0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	429a      	cmp	r2, r3
 800768a:	d905      	bls.n	8007698 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <xTaskRemoveFromEventList+0xc4>)
 8007692:	2201      	movs	r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e001      	b.n	800769c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800769c:	697b      	ldr	r3, [r7, #20]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000f1c 	.word	0x20000f1c
 80076ac:	20000efc 	.word	0x20000efc
 80076b0:	20000a24 	.word	0x20000a24
 80076b4:	20000eb4 	.word	0x20000eb4
 80076b8:	20000a20 	.word	0x20000a20
 80076bc:	20000f08 	.word	0x20000f08

080076c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <vTaskInternalSetTimeOutState+0x24>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <vTaskInternalSetTimeOutState+0x28>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	605a      	str	r2, [r3, #4]
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000f0c 	.word	0x20000f0c
 80076e8:	20000ef8 	.word	0x20000ef8

080076ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60fb      	str	r3, [r7, #12]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800772e:	f000 fe81 	bl	8008434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <xTaskCheckForTimeOut+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d102      	bne.n	8007752 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	e023      	b.n	800779a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b15      	ldr	r3, [pc, #84]	; (80077ac <xTaskCheckForTimeOut+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d007      	beq.n	800776e <xTaskCheckForTimeOut+0x82>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d302      	bcc.n	800776e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e015      	b.n	800779a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	429a      	cmp	r2, r3
 8007776:	d20b      	bcs.n	8007790 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ff9b 	bl	80076c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e004      	b.n	800779a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007796:	2301      	movs	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800779a:	f000 fe7b 	bl	8008494 <vPortExitCritical>

	return xReturn;
 800779e:	69fb      	ldr	r3, [r7, #28]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000ef8 	.word	0x20000ef8
 80077ac:	20000f0c 	.word	0x20000f0c

080077b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b4:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <vTaskMissedYield+0x14>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20000f08 	.word	0x20000f08

080077c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077d0:	f000 f852 	bl	8007878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <prvIdleTask+0x28>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d9f9      	bls.n	80077d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <prvIdleTask+0x2c>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077ec:	e7f0      	b.n	80077d0 <prvIdleTask+0x8>
 80077ee:	bf00      	nop
 80077f0:	20000a24 	.word	0x20000a24
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	e00c      	b.n	800781e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4a12      	ldr	r2, [pc, #72]	; (8007858 <prvInitialiseTaskLists+0x60>)
 8007810:	4413      	add	r3, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fb5a 	bl	8005ecc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3301      	adds	r3, #1
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b37      	cmp	r3, #55	; 0x37
 8007822:	d9ef      	bls.n	8007804 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007824:	480d      	ldr	r0, [pc, #52]	; (800785c <prvInitialiseTaskLists+0x64>)
 8007826:	f7fe fb51 	bl	8005ecc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800782a:	480d      	ldr	r0, [pc, #52]	; (8007860 <prvInitialiseTaskLists+0x68>)
 800782c:	f7fe fb4e 	bl	8005ecc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007830:	480c      	ldr	r0, [pc, #48]	; (8007864 <prvInitialiseTaskLists+0x6c>)
 8007832:	f7fe fb4b 	bl	8005ecc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007836:	480c      	ldr	r0, [pc, #48]	; (8007868 <prvInitialiseTaskLists+0x70>)
 8007838:	f7fe fb48 	bl	8005ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800783c:	480b      	ldr	r0, [pc, #44]	; (800786c <prvInitialiseTaskLists+0x74>)
 800783e:	f7fe fb45 	bl	8005ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007842:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <prvInitialiseTaskLists+0x78>)
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <prvInitialiseTaskLists+0x64>)
 8007846:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvInitialiseTaskLists+0x7c>)
 800784a:	4a05      	ldr	r2, [pc, #20]	; (8007860 <prvInitialiseTaskLists+0x68>)
 800784c:	601a      	str	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000a24 	.word	0x20000a24
 800785c:	20000e84 	.word	0x20000e84
 8007860:	20000e98 	.word	0x20000e98
 8007864:	20000eb4 	.word	0x20000eb4
 8007868:	20000ec8 	.word	0x20000ec8
 800786c:	20000ee0 	.word	0x20000ee0
 8007870:	20000eac 	.word	0x20000eac
 8007874:	20000eb0 	.word	0x20000eb0

08007878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800787e:	e019      	b.n	80078b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007880:	f000 fdd8 	bl	8008434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <prvCheckTasksWaitingTermination+0x50>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fba5 	bl	8005fe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007896:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <prvCheckTasksWaitingTermination+0x54>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	4a0b      	ldr	r2, [pc, #44]	; (80078cc <prvCheckTasksWaitingTermination+0x54>)
 800789e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078aa:	f000 fdf3 	bl	8008494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f810 	bl	80078d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <prvCheckTasksWaitingTermination+0x58>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e1      	bne.n	8007880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000ec8 	.word	0x20000ec8
 80078cc:	20000ef4 	.word	0x20000ef4
 80078d0:	20000edc 	.word	0x20000edc

080078d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3354      	adds	r3, #84	; 0x54
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 faa7 	bl	8008e34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 ff8b 	bl	8008810 <vPortFree>
				vPortFree( pxTCB );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 ff88 	bl	8008810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007900:	e018      	b.n	8007934 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007908:	2b01      	cmp	r3, #1
 800790a:	d103      	bne.n	8007914 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 ff7f 	bl	8008810 <vPortFree>
	}
 8007912:	e00f      	b.n	8007934 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800791a:	2b02      	cmp	r3, #2
 800791c:	d00a      	beq.n	8007934 <prvDeleteTCB+0x60>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <prvDeleteTCB+0x5e>
	}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <prvResetNextTaskUnblockTime+0x38>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <prvResetNextTaskUnblockTime+0x3c>)
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007954:	e008      	b.n	8007968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <prvResetNextTaskUnblockTime+0x38>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4a04      	ldr	r2, [pc, #16]	; (8007978 <prvResetNextTaskUnblockTime+0x3c>)
 8007966:	6013      	str	r3, [r2, #0]
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20000eac 	.word	0x20000eac
 8007978:	20000f14 	.word	0x20000f14

0800797c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <xTaskGetSchedulerState+0x34>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800798a:	2301      	movs	r3, #1
 800798c:	607b      	str	r3, [r7, #4]
 800798e:	e008      	b.n	80079a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <xTaskGetSchedulerState+0x38>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007998:	2302      	movs	r3, #2
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	e001      	b.n	80079a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079a2:	687b      	ldr	r3, [r7, #4]
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20000f00 	.word	0x20000f00
 80079b4:	20000f1c 	.word	0x20000f1c

080079b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d056      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <xTaskPriorityDisinherit+0xd0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60fb      	str	r3, [r7, #12]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60bb      	str	r3, [r7, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d02c      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d128      	bne.n	8007a7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fad6 	bl	8005fe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <xTaskPriorityDisinherit+0xa4>
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <xTaskPriorityDisinherit+0xd8>)
 8007a6a:	441a      	add	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe fa57 	bl	8005f26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a7c:	697b      	ldr	r3, [r7, #20]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000a20 	.word	0x20000a20
 8007a8c:	20000efc 	.word	0x20000efc
 8007a90:	20000a24 	.word	0x20000a24

08007a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a9e:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <prvAddCurrentTaskToDelayedList+0x90>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa4:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fa98 	bl	8005fe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d10a      	bne.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4819      	ldr	r0, [pc, #100]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ac8:	f7fe fa2d 	bl	8005f26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007acc:	e026      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d209      	bcs.n	8007afa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fe fa3b 	bl	8005f6e <vListInsert>
}
 8007af8:	e010      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afa:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fa31 	bl	8005f6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d202      	bcs.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6013      	str	r3, [r2, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000ef8 	.word	0x20000ef8
 8007b28:	20000a20 	.word	0x20000a20
 8007b2c:	20000ee0 	.word	0x20000ee0
 8007b30:	20000eb0 	.word	0x20000eb0
 8007b34:	20000eac 	.word	0x20000eac
 8007b38:	20000f14 	.word	0x20000f14

08007b3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b46:	f000 fb07 	bl	8008158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <xTimerCreateTimerTask+0x80>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d021      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b5a:	1d3a      	adds	r2, r7, #4
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe f997 	bl	8005e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	2302      	movs	r3, #2
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	4910      	ldr	r1, [pc, #64]	; (8007bc0 <xTimerCreateTimerTask+0x84>)
 8007b7e:	4811      	ldr	r0, [pc, #68]	; (8007bc4 <xTimerCreateTimerTask+0x88>)
 8007b80:	f7ff f836 	bl	8006bf0 <xTaskCreateStatic>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4a10      	ldr	r2, [pc, #64]	; (8007bc8 <xTimerCreateTimerTask+0x8c>)
 8007b88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <xTimerCreateTimerTask+0x8c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b92:	2301      	movs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	613b      	str	r3, [r7, #16]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bb2:	697b      	ldr	r3, [r7, #20]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000f50 	.word	0x20000f50
 8007bc0:	08009b2c 	.word	0x08009b2c
 8007bc4:	08007d01 	.word	0x08007d01
 8007bc8:	20000f54 	.word	0x20000f54

08007bcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	623b      	str	r3, [r7, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02a      	beq.n	8007c58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b05      	cmp	r3, #5
 8007c12:	dc18      	bgt.n	8007c46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c14:	f7ff feb2 	bl	800797c <xTaskGetSchedulerState>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d109      	bne.n	8007c32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f107 0110 	add.w	r1, r7, #16
 8007c26:	2300      	movs	r3, #0
 8007c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2a:	f7fe fbab 	bl	8006384 <xQueueGenericSend>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c30:	e012      	b.n	8007c58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f107 0110 	add.w	r1, r7, #16
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f7fe fba1 	bl	8006384 <xQueueGenericSend>
 8007c42:	6278      	str	r0, [r7, #36]	; 0x24
 8007c44:	e008      	b.n	8007c58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <xTimerGenericCommand+0x98>)
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f107 0110 	add.w	r1, r7, #16
 8007c4e:	2300      	movs	r3, #0
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	f7fe fc95 	bl	8006580 <xQueueGenericSendFromISR>
 8007c56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3728      	adds	r7, #40	; 0x28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000f50 	.word	0x20000f50

08007c68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <prvProcessExpiredTimer+0x94>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe f9ad 	bl	8005fe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d022      	beq.n	8007cda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	18d1      	adds	r1, r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	6978      	ldr	r0, [r7, #20]
 8007ca2:	f000 f8d1 	bl	8007e48 <prvInsertTimerInActiveList>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01f      	beq.n	8007cec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6978      	ldr	r0, [r7, #20]
 8007cb8:	f7ff ff88 	bl	8007bcc <xTimerGenericCommand>
 8007cbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d113      	bne.n	8007cec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	6978      	ldr	r0, [r7, #20]
 8007cf2:	4798      	blx	r3
}
 8007cf4:	bf00      	nop
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000f48 	.word	0x20000f48

08007d00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f857 	bl	8007dc0 <prvGetNextExpireTime>
 8007d12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f803 	bl	8007d24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d1e:	f000 f8d5 	bl	8007ecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d22:	e7f1      	b.n	8007d08 <prvTimerTask+0x8>

08007d24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d2e:	f7ff fa39 	bl	80071a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f866 	bl	8007e08 <prvSampleTimeNow>
 8007d3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d130      	bne.n	8007da6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <prvProcessTimerOrBlockTask+0x3c>
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d806      	bhi.n	8007d60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d52:	f7ff fa35 	bl	80071c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff85 	bl	8007c68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d5e:	e024      	b.n	8007daa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d66:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <prvProcessTimerOrBlockTask+0x90>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <prvProcessTimerOrBlockTask+0x50>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <prvProcessTimerOrBlockTask+0x52>
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <prvProcessTimerOrBlockTask+0x94>)
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	f7fe feff 	bl	8006b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d8a:	f7ff fa19 	bl	80071c0 <xTaskResumeAll>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d94:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <prvProcessTimerOrBlockTask+0x98>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
}
 8007da4:	e001      	b.n	8007daa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007da6:	f7ff fa0b 	bl	80071c0 <xTaskResumeAll>
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000f4c 	.word	0x20000f4c
 8007db8:	20000f50 	.word	0x20000f50
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <prvGetNextExpireTime+0x44>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <prvGetNextExpireTime+0x16>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	e000      	b.n	8007dd8 <prvGetNextExpireTime+0x18>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <prvGetNextExpireTime+0x44>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e001      	b.n	8007df4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000f48 	.word	0x20000f48

08007e08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e10:	f7ff fa74 	bl	80072fc <xTaskGetTickCount>
 8007e14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <prvSampleTimeNow+0x3c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d205      	bcs.n	8007e2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e20:	f000 f936 	bl	8008090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e32:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <prvSampleTimeNow+0x3c>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000f58 	.word	0x20000f58

08007e48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d812      	bhi.n	8007e94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d302      	bcc.n	8007e82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e01b      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <prvInsertTimerInActiveList+0x7c>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe f86e 	bl	8005f6e <vListInsert>
 8007e92:	e012      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d206      	bcs.n	8007eaa <prvInsertTimerInActiveList+0x62>
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d302      	bcc.n	8007eaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	e007      	b.n	8007eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eaa:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <prvInsertTimerInActiveList+0x80>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7fe f85a 	bl	8005f6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eba:	697b      	ldr	r3, [r7, #20]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000f4c 	.word	0x20000f4c
 8007ec8:	20000f48 	.word	0x20000f48

08007ecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	; 0x38
 8007ed0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ed2:	e0ca      	b.n	800806a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da18      	bge.n	8007f0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	3304      	adds	r3, #4
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61fb      	str	r3, [r7, #28]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f02:	6850      	ldr	r0, [r2, #4]
 8007f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f06:	6892      	ldr	r2, [r2, #8]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f2c0 80aa 	blt.w	8008068 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	3304      	adds	r3, #4
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe f85b 	bl	8005fe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff ff6b 	bl	8007e08 <prvSampleTimeNow>
 8007f32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	f200 8097 	bhi.w	800806a <prvProcessReceivedCommands+0x19e>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <prvProcessReceivedCommands+0x78>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007fe1 	.word	0x08007fe1
 8007f54:	08007ff5 	.word	0x08007ff5
 8007f58:	0800803f 	.word	0x0800803f
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f6d 	.word	0x08007f6d
 8007f64:	08007fe1 	.word	0x08007fe1
 8007f68:	08007ff5 	.word	0x08007ff5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	18d1      	adds	r1, r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8c:	f7ff ff5c 	bl	8007e48 <prvInsertTimerInActiveList>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d069      	beq.n	800806a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d05e      	beq.n	800806a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	441a      	add	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fbe:	f7ff fe05 	bl	8007bcc <xTimerGenericCommand>
 8007fc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14f      	bne.n	800806a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61bb      	str	r3, [r7, #24]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe6:	f023 0301 	bic.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ff2:	e03a      	b.n	800806a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	617b      	str	r3, [r7, #20]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	18d1      	adds	r1, r2, r3
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008038:	f7ff ff06 	bl	8007e48 <prvInsertTimerInActiveList>
					break;
 800803c:	e015      	b.n	800806a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800804c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804e:	f000 fbdf 	bl	8008810 <vPortFree>
 8008052:	e00a      	b.n	800806a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008066:	e000      	b.n	800806a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	4b08      	ldr	r3, [pc, #32]	; (800808c <prvProcessReceivedCommands+0x1c0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	1d39      	adds	r1, r7, #4
 8008070:	2200      	movs	r2, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fb20 	bl	80066b8 <xQueueReceive>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	f47f af2a 	bne.w	8007ed4 <prvProcessReceivedCommands+0x8>
	}
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3730      	adds	r7, #48	; 0x30
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000f50 	.word	0x20000f50

08008090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008096:	e048      	b.n	800812a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008098:	4b2d      	ldr	r3, [pc, #180]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a2:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fd ff95 	bl	8005fe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d02e      	beq.n	800812a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90e      	bls.n	80080fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ea:	4b19      	ldr	r3, [pc, #100]	; (8008150 <prvSwitchTimerLists+0xc0>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fd ff3a 	bl	8005f6e <vListInsert>
 80080fa:	e016      	b.n	800812a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fd60 	bl	8007bcc <xTimerGenericCommand>
 800810c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	603b      	str	r3, [r7, #0]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <prvSwitchTimerLists+0xc0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1b1      	bne.n	8008098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <prvSwitchTimerLists+0xc0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvSwitchTimerLists+0xc4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a04      	ldr	r2, [pc, #16]	; (8008150 <prvSwitchTimerLists+0xc0>)
 8008140:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <prvSwitchTimerLists+0xc4>)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	6013      	str	r3, [r2, #0]
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000f48 	.word	0x20000f48
 8008154:	20000f4c 	.word	0x20000f4c

08008158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800815e:	f000 f969 	bl	8008434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d120      	bne.n	80081ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800816a:	4814      	ldr	r0, [pc, #80]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800816c:	f7fd feae 	bl	8005ecc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008170:	4813      	ldr	r0, [pc, #76]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008172:	f7fd feab 	bl	8005ecc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008176:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <prvCheckForValidListAndQueue+0x6c>)
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <prvCheckForValidListAndQueue+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800817c:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvCheckForValidListAndQueue+0x70>)
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <prvCheckForValidListAndQueue+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <prvCheckForValidListAndQueue+0x74>)
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <prvCheckForValidListAndQueue+0x78>)
 800818a:	2110      	movs	r1, #16
 800818c:	200a      	movs	r0, #10
 800818e:	f7fd ffb9 	bl	8006104 <xQueueGenericCreateStatic>
 8008192:	4603      	mov	r3, r0
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 8008196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <prvCheckForValidListAndQueue+0x60>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	490b      	ldr	r1, [pc, #44]	; (80081d4 <prvCheckForValidListAndQueue+0x7c>)
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fc9a 	bl	8006ae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ac:	f000 f972 	bl	8008494 <vPortExitCritical>
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000f50 	.word	0x20000f50
 80081bc:	20000f20 	.word	0x20000f20
 80081c0:	20000f34 	.word	0x20000f34
 80081c4:	20000f48 	.word	0x20000f48
 80081c8:	20000f4c 	.word	0x20000f4c
 80081cc:	20000ffc 	.word	0x20000ffc
 80081d0:	20000f5c 	.word	0x20000f5c
 80081d4:	08009b34 	.word	0x08009b34

080081d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b04      	subs	r3, #4
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <pxPortInitialiseStack+0x64>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b14      	subs	r3, #20
 8008212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f06f 0202 	mvn.w	r2, #2
 8008226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b20      	subs	r3, #32
 800822c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	08008241 	.word	0x08008241

08008240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <prvTaskExitError+0x54>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d00a      	beq.n	800826a <prvTaskExitError+0x2a>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <prvTaskExitError+0x28>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	60bb      	str	r3, [r7, #8]
}
 800827c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800827e:	bf00      	nop
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0fc      	beq.n	8008280 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	2000000c 	.word	0x2000000c
	...

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	4770      	bx	lr
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst2>:
 80082c0:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <prvPortStartFirstTask+0x24>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8814 	msr	CONTROL, r0
 80082da:	b662      	cpsie	i
 80082dc:	b661      	cpsie	f
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	df00      	svc	0
 80082e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ea:	bf00      	nop
 80082ec:	e000ed08 	.word	0xe000ed08

080082f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082f6:	4b46      	ldr	r3, [pc, #280]	; (8008410 <xPortStartScheduler+0x120>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a46      	ldr	r2, [pc, #280]	; (8008414 <xPortStartScheduler+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10a      	bne.n	8008316 <xPortStartScheduler+0x26>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008316:	4b3e      	ldr	r3, [pc, #248]	; (8008410 <xPortStartScheduler+0x120>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3f      	ldr	r2, [pc, #252]	; (8008418 <xPortStartScheduler+0x128>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10a      	bne.n	8008336 <xPortStartScheduler+0x46>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008336:	4b39      	ldr	r3, [pc, #228]	; (800841c <xPortStartScheduler+0x12c>)
 8008338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	22ff      	movs	r2, #255	; 0xff
 8008346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b31      	ldr	r3, [pc, #196]	; (8008420 <xPortStartScheduler+0x130>)
 800835c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800835e:	4b31      	ldr	r3, [pc, #196]	; (8008424 <xPortStartScheduler+0x134>)
 8008360:	2207      	movs	r2, #7
 8008362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008364:	e009      	b.n	800837a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008366:	4b2f      	ldr	r3, [pc, #188]	; (8008424 <xPortStartScheduler+0x134>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3b01      	subs	r3, #1
 800836c:	4a2d      	ldr	r2, [pc, #180]	; (8008424 <xPortStartScheduler+0x134>)
 800836e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d0ef      	beq.n	8008366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008386:	4b27      	ldr	r3, [pc, #156]	; (8008424 <xPortStartScheduler+0x134>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1c3 0307 	rsb	r3, r3, #7
 800838e:	2b04      	cmp	r3, #4
 8008390:	d00a      	beq.n	80083a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60bb      	str	r3, [r7, #8]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a8:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <xPortStartScheduler+0x134>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <xPortStartScheduler+0x134>)
 80083b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <xPortStartScheduler+0x134>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083ba:	4a1a      	ldr	r2, [pc, #104]	; (8008424 <xPortStartScheduler+0x134>)
 80083bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083c6:	4b18      	ldr	r3, [pc, #96]	; (8008428 <xPortStartScheduler+0x138>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <xPortStartScheduler+0x138>)
 80083cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <xPortStartScheduler+0x138>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <xPortStartScheduler+0x138>)
 80083d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083de:	f000 f8dd 	bl	800859c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <xPortStartScheduler+0x13c>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083e8:	f000 f8fc 	bl	80085e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <xPortStartScheduler+0x140>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <xPortStartScheduler+0x140>)
 80083f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083f8:	f7ff ff66 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083fc:	f7ff f848 	bl	8007490 <vTaskSwitchContext>
	prvTaskExitError();
 8008400:	f7ff ff1e 	bl	8008240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	e000ed00 	.word	0xe000ed00
 8008414:	410fc271 	.word	0x410fc271
 8008418:	410fc270 	.word	0x410fc270
 800841c:	e000e400 	.word	0xe000e400
 8008420:	2000104c 	.word	0x2000104c
 8008424:	20001050 	.word	0x20001050
 8008428:	e000ed20 	.word	0xe000ed20
 800842c:	2000000c 	.word	0x2000000c
 8008430:	e000ef34 	.word	0xe000ef34

08008434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	607b      	str	r3, [r7, #4]
}
 800844c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <vPortEnterCritical+0x58>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a0d      	ldr	r2, [pc, #52]	; (800848c <vPortEnterCritical+0x58>)
 8008456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <vPortEnterCritical+0x58>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10f      	bne.n	8008480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortEnterCritical+0x5c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <vPortEnterCritical+0x4c>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	603b      	str	r3, [r7, #0]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vPortEnterCritical+0x4a>
	}
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	2000000c 	.word	0x2000000c
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <vPortExitCritical+0x50>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <vPortExitCritical+0x24>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	607b      	str	r3, [r7, #4]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <vPortExitCritical+0x50>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <vPortExitCritical+0x50>)
 80084c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <vPortExitCritical+0x50>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <vPortExitCritical+0x42>
 80084ca:	2300      	movs	r3, #0
 80084cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f383 8811 	msr	BASEPRI, r3
}
 80084d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000000c 	.word	0x2000000c
	...

080084f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084f0:	f3ef 8009 	mrs	r0, PSP
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <pxCurrentTCBConst>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f01e 0f10 	tst.w	lr, #16
 8008500:	bf08      	it	eq
 8008502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008514:	f380 8811 	msr	BASEPRI, r0
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f7fe ffb6 	bl	8007490 <vTaskSwitchContext>
 8008524:	f04f 0000 	mov.w	r0, #0
 8008528:	f380 8811 	msr	BASEPRI, r0
 800852c:	bc09      	pop	{r0, r3}
 800852e:	6819      	ldr	r1, [r3, #0]
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008536:	f01e 0f10 	tst.w	lr, #16
 800853a:	bf08      	it	eq
 800853c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008540:	f380 8809 	msr	PSP, r0
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst>:
 8008550:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop

08008558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	607b      	str	r3, [r7, #4]
}
 8008570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008572:	f7fe fed3 	bl	800731c <xTaskIncrementTick>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <xPortSysTickHandler+0x40>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f383 8811 	msr	BASEPRI, r3
}
 800858e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <vPortSetupTimerInterrupt+0x38>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <vPortSetupTimerInterrupt+0x3c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <vPortSetupTimerInterrupt+0x40>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	099b      	lsrs	r3, r3, #6
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <vPortSetupTimerInterrupt+0x44>)
 80085ba:	3b01      	subs	r3, #1
 80085bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085be:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <vPortSetupTimerInterrupt+0x34>)
 80085c0:	2207      	movs	r2, #7
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	e000e010 	.word	0xe000e010
 80085d4:	e000e018 	.word	0xe000e018
 80085d8:	20000000 	.word	0x20000000
 80085dc:	10624dd3 	.word	0x10624dd3
 80085e0:	e000e014 	.word	0xe000e014

080085e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085f4 <vPortEnableVFP+0x10>
 80085e8:	6801      	ldr	r1, [r0, #0]
 80085ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085ee:	6001      	str	r1, [r0, #0]
 80085f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085f2:	bf00      	nop
 80085f4:	e000ed88 	.word	0xe000ed88

080085f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085fe:	f3ef 8305 	mrs	r3, IPSR
 8008602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b0f      	cmp	r3, #15
 8008608:	d914      	bls.n	8008634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <vPortValidateInterruptPriority+0x70>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <vPortValidateInterruptPriority+0x74>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	7afa      	ldrb	r2, [r7, #11]
 800861a:	429a      	cmp	r2, r3
 800861c:	d20a      	bcs.n	8008634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <vPortValidateInterruptPriority+0x78>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <vPortValidateInterruptPriority+0x7c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d90a      	bls.n	800865a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	603b      	str	r3, [r7, #0]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <vPortValidateInterruptPriority+0x60>
	}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	e000e3f0 	.word	0xe000e3f0
 800866c:	2000104c 	.word	0x2000104c
 8008670:	e000ed0c 	.word	0xe000ed0c
 8008674:	20001050 	.word	0x20001050

08008678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008684:	f7fe fd8e 	bl	80071a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <pvPortMalloc+0x180>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008690:	f000 f920 	bl	80088d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008694:	4b59      	ldr	r3, [pc, #356]	; (80087fc <pvPortMalloc+0x184>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8093 	bne.w	80087c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01d      	beq.n	80086e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086a8:	2208      	movs	r2, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	3308      	adds	r3, #8
 80086c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <pvPortMalloc+0x6c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06e      	beq.n	80087c8 <pvPortMalloc+0x150>
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <pvPortMalloc+0x188>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d869      	bhi.n	80087c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086f4:	4b43      	ldr	r3, [pc, #268]	; (8008804 <pvPortMalloc+0x18c>)
 80086f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <pvPortMalloc+0x18c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086fe:	e004      	b.n	800870a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <pvPortMalloc+0xa4>
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f1      	bne.n	8008700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <pvPortMalloc+0x180>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008722:	429a      	cmp	r2, r3
 8008724:	d050      	beq.n	80087c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2208      	movs	r2, #8
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	2308      	movs	r3, #8
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	429a      	cmp	r2, r3
 8008746:	d91f      	bls.n	8008788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <pvPortMalloc+0xf8>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	613b      	str	r3, [r7, #16]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008782:	69b8      	ldr	r0, [r7, #24]
 8008784:	f000 f908 	bl	8008998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <pvPortMalloc+0x188>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <pvPortMalloc+0x188>)
 8008794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008796:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <pvPortMalloc+0x188>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <pvPortMalloc+0x190>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <pvPortMalloc+0x188>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a18      	ldr	r2, [pc, #96]	; (8008808 <pvPortMalloc+0x190>)
 80087a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <pvPortMalloc+0x184>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <pvPortMalloc+0x194>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <pvPortMalloc+0x194>)
 80087c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c8:	f7fe fcfa 	bl	80071c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <pvPortMalloc+0x174>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <pvPortMalloc+0x172>
	return pvReturn;
 80087ec:	69fb      	ldr	r3, [r7, #28]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20001c14 	.word	0x20001c14
 80087fc:	20001c28 	.word	0x20001c28
 8008800:	20001c18 	.word	0x20001c18
 8008804:	20001c0c 	.word	0x20001c0c
 8008808:	20001c1c 	.word	0x20001c1c
 800880c:	20001c20 	.word	0x20001c20

08008810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04d      	beq.n	80088be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008822:	2308      	movs	r3, #8
 8008824:	425b      	negs	r3, r3
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <vPortFree+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <vPortFree+0x44>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <vPortFree+0x62>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60bb      	str	r3, [r7, #8]
}
 800886e:	bf00      	nop
 8008870:	e7fe      	b.n	8008870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <vPortFree+0xb8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11a      	bne.n	80088be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <vPortFree+0xb8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	43db      	mvns	r3, r3
 8008892:	401a      	ands	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008898:	f7fe fc84 	bl	80071a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortFree+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4413      	add	r3, r2
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vPortFree+0xbc>)
 80088a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f874 	bl	8008998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <vPortFree+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <vPortFree+0xc0>)
 80088b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088ba:	f7fe fc81 	bl	80071c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20001c28 	.word	0x20001c28
 80088cc:	20001c18 	.word	0x20001c18
 80088d0:	20001c24 	.word	0x20001c24

080088d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80088de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <prvHeapInit+0xac>)
 80088e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <prvHeapInit+0xac>)
 8008904:	4413      	add	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800890c:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <prvHeapInit+0xb0>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008912:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <prvHeapInit+0xb0>)
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008920:	2208      	movs	r2, #8
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <prvHeapInit+0xb4>)
 8008934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvHeapInit+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <prvHeapInit+0xb4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvHeapInit+0xb4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvHeapInit+0xb8>)
 8008962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <prvHeapInit+0xbc>)
 800896a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <prvHeapInit+0xc0>)
 800896e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20001054 	.word	0x20001054
 8008984:	20001c0c 	.word	0x20001c0c
 8008988:	20001c14 	.word	0x20001c14
 800898c:	20001c1c 	.word	0x20001c1c
 8008990:	20001c18 	.word	0x20001c18
 8008994:	20001c28 	.word	0x20001c28

08008998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <prvInsertBlockIntoFreeList+0xac>)
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <prvInsertBlockIntoFreeList+0x14>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d8f7      	bhi.n	80089a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d108      	bne.n	80089da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	441a      	add	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d118      	bne.n	8008a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d00d      	beq.n	8008a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e008      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <prvInsertBlockIntoFreeList+0xb0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	e003      	b.n	8008a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d002      	beq.n	8008a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20001c0c 	.word	0x20001c0c
 8008a48:	20001c14 	.word	0x20001c14

08008a4c <__errno>:
 8008a4c:	4b01      	ldr	r3, [pc, #4]	; (8008a54 <__errno+0x8>)
 8008a4e:	6818      	ldr	r0, [r3, #0]
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000010 	.word	0x20000010

08008a58 <std>:
 8008a58:	2300      	movs	r3, #0
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a66:	6083      	str	r3, [r0, #8]
 8008a68:	8181      	strh	r1, [r0, #12]
 8008a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a6c:	81c2      	strh	r2, [r0, #14]
 8008a6e:	6183      	str	r3, [r0, #24]
 8008a70:	4619      	mov	r1, r3
 8008a72:	2208      	movs	r2, #8
 8008a74:	305c      	adds	r0, #92	; 0x5c
 8008a76:	f000 f91a 	bl	8008cae <memset>
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x38>)
 8008a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x3c>)
 8008a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x40>)
 8008a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <std+0x44>)
 8008a88:	6224      	str	r4, [r4, #32]
 8008a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	bf00      	nop
 8008a90:	08008f0d 	.word	0x08008f0d
 8008a94:	08008f2f 	.word	0x08008f2f
 8008a98:	08008f67 	.word	0x08008f67
 8008a9c:	08008f8b 	.word	0x08008f8b

08008aa0 <_cleanup_r>:
 8008aa0:	4901      	ldr	r1, [pc, #4]	; (8008aa8 <_cleanup_r+0x8>)
 8008aa2:	f000 b8af 	b.w	8008c04 <_fwalk_reent>
 8008aa6:	bf00      	nop
 8008aa8:	080090e5 	.word	0x080090e5

08008aac <__sfmoreglue>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	2268      	movs	r2, #104	; 0x68
 8008ab0:	1e4d      	subs	r5, r1, #1
 8008ab2:	4355      	muls	r5, r2
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aba:	f000 f921 	bl	8008d00 <_malloc_r>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b140      	cbz	r0, 8008ad4 <__sfmoreglue+0x28>
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac8:	300c      	adds	r0, #12
 8008aca:	60a0      	str	r0, [r4, #8]
 8008acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ad0:	f000 f8ed 	bl	8008cae <memset>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}

08008ad8 <__sfp_lock_acquire>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sfp_lock_acquire+0x8>)
 8008ada:	f000 b8d8 	b.w	8008c8e <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	20001c2d 	.word	0x20001c2d

08008ae4 <__sfp_lock_release>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sfp_lock_release+0x8>)
 8008ae6:	f000 b8d3 	b.w	8008c90 <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	20001c2d 	.word	0x20001c2d

08008af0 <__sinit_lock_acquire>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__sinit_lock_acquire+0x8>)
 8008af2:	f000 b8cc 	b.w	8008c8e <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	20001c2e 	.word	0x20001c2e

08008afc <__sinit_lock_release>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sinit_lock_release+0x8>)
 8008afe:	f000 b8c7 	b.w	8008c90 <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	20001c2e 	.word	0x20001c2e

08008b08 <__sinit>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f7ff fff0 	bl	8008af0 <__sinit_lock_acquire>
 8008b10:	69a3      	ldr	r3, [r4, #24]
 8008b12:	b11b      	cbz	r3, 8008b1c <__sinit+0x14>
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f7ff bff0 	b.w	8008afc <__sinit_lock_release>
 8008b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b20:	6523      	str	r3, [r4, #80]	; 0x50
 8008b22:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <__sinit+0x68>)
 8008b24:	4a13      	ldr	r2, [pc, #76]	; (8008b74 <__sinit+0x6c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	bf04      	itt	eq
 8008b2e:	2301      	moveq	r3, #1
 8008b30:	61a3      	streq	r3, [r4, #24]
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 f820 	bl	8008b78 <__sfp>
 8008b38:	6060      	str	r0, [r4, #4]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f81c 	bl	8008b78 <__sfp>
 8008b40:	60a0      	str	r0, [r4, #8]
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f818 	bl	8008b78 <__sfp>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	60e0      	str	r0, [r4, #12]
 8008b4c:	2104      	movs	r1, #4
 8008b4e:	6860      	ldr	r0, [r4, #4]
 8008b50:	f7ff ff82 	bl	8008a58 <std>
 8008b54:	68a0      	ldr	r0, [r4, #8]
 8008b56:	2201      	movs	r2, #1
 8008b58:	2109      	movs	r1, #9
 8008b5a:	f7ff ff7d 	bl	8008a58 <std>
 8008b5e:	68e0      	ldr	r0, [r4, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	2112      	movs	r1, #18
 8008b64:	f7ff ff78 	bl	8008a58 <std>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	61a3      	str	r3, [r4, #24]
 8008b6c:	e7d2      	b.n	8008b14 <__sinit+0xc>
 8008b6e:	bf00      	nop
 8008b70:	08009c84 	.word	0x08009c84
 8008b74:	08008aa1 	.word	0x08008aa1

08008b78 <__sfp>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4607      	mov	r7, r0
 8008b7c:	f7ff ffac 	bl	8008ad8 <__sfp_lock_acquire>
 8008b80:	4b1e      	ldr	r3, [pc, #120]	; (8008bfc <__sfp+0x84>)
 8008b82:	681e      	ldr	r6, [r3, #0]
 8008b84:	69b3      	ldr	r3, [r6, #24]
 8008b86:	b913      	cbnz	r3, 8008b8e <__sfp+0x16>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7ff ffbd 	bl	8008b08 <__sinit>
 8008b8e:	3648      	adds	r6, #72	; 0x48
 8008b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	d503      	bpl.n	8008ba0 <__sfp+0x28>
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	b30b      	cbz	r3, 8008be0 <__sfp+0x68>
 8008b9c:	6836      	ldr	r6, [r6, #0]
 8008b9e:	e7f7      	b.n	8008b90 <__sfp+0x18>
 8008ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba4:	b9d5      	cbnz	r5, 8008bdc <__sfp+0x64>
 8008ba6:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <__sfp+0x88>)
 8008ba8:	60e3      	str	r3, [r4, #12]
 8008baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bae:	6665      	str	r5, [r4, #100]	; 0x64
 8008bb0:	f000 f86c 	bl	8008c8c <__retarget_lock_init_recursive>
 8008bb4:	f7ff ff96 	bl	8008ae4 <__sfp_lock_release>
 8008bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	61a5      	str	r5, [r4, #24]
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bcc:	f000 f86f 	bl	8008cae <memset>
 8008bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd8:	4620      	mov	r0, r4
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	3468      	adds	r4, #104	; 0x68
 8008bde:	e7d9      	b.n	8008b94 <__sfp+0x1c>
 8008be0:	2104      	movs	r1, #4
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff ff62 	bl	8008aac <__sfmoreglue>
 8008be8:	4604      	mov	r4, r0
 8008bea:	6030      	str	r0, [r6, #0]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1d5      	bne.n	8008b9c <__sfp+0x24>
 8008bf0:	f7ff ff78 	bl	8008ae4 <__sfp_lock_release>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	e7ee      	b.n	8008bd8 <__sfp+0x60>
 8008bfa:	bf00      	nop
 8008bfc:	08009c84 	.word	0x08009c84
 8008c00:	ffff0001 	.word	0xffff0001

08008c04 <_fwalk_reent>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4606      	mov	r6, r0
 8008c0a:	4688      	mov	r8, r1
 8008c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c10:	2700      	movs	r7, #0
 8008c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c16:	f1b9 0901 	subs.w	r9, r9, #1
 8008c1a:	d505      	bpl.n	8008c28 <_fwalk_reent+0x24>
 8008c1c:	6824      	ldr	r4, [r4, #0]
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d1f7      	bne.n	8008c12 <_fwalk_reent+0xe>
 8008c22:	4638      	mov	r0, r7
 8008c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c28:	89ab      	ldrh	r3, [r5, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d907      	bls.n	8008c3e <_fwalk_reent+0x3a>
 8008c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c32:	3301      	adds	r3, #1
 8008c34:	d003      	beq.n	8008c3e <_fwalk_reent+0x3a>
 8008c36:	4629      	mov	r1, r5
 8008c38:	4630      	mov	r0, r6
 8008c3a:	47c0      	blx	r8
 8008c3c:	4307      	orrs	r7, r0
 8008c3e:	3568      	adds	r5, #104	; 0x68
 8008c40:	e7e9      	b.n	8008c16 <_fwalk_reent+0x12>
	...

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	; (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	; (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	; (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	; (8008c88 <__libc_init_array+0x44>)
 8008c58:	f000 ff32 	bl	8009ac0 <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	08009cc4 	.word	0x08009cc4
 8008c80:	08009cc4 	.word	0x08009cc4
 8008c84:	08009cc4 	.word	0x08009cc4
 8008c88:	08009cc8 	.word	0x08009cc8

08008c8c <__retarget_lock_init_recursive>:
 8008c8c:	4770      	bx	lr

08008c8e <__retarget_lock_acquire_recursive>:
 8008c8e:	4770      	bx	lr

08008c90 <__retarget_lock_release_recursive>:
 8008c90:	4770      	bx	lr

08008c92 <memcpy>:
 8008c92:	440a      	add	r2, r1
 8008c94:	4291      	cmp	r1, r2
 8008c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c9a:	d100      	bne.n	8008c9e <memcpy+0xc>
 8008c9c:	4770      	bx	lr
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca8:	4291      	cmp	r1, r2
 8008caa:	d1f9      	bne.n	8008ca0 <memcpy+0xe>
 8008cac:	bd10      	pop	{r4, pc}

08008cae <memset>:
 8008cae:	4402      	add	r2, r0
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d100      	bne.n	8008cb8 <memset+0xa>
 8008cb6:	4770      	bx	lr
 8008cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cbc:	e7f9      	b.n	8008cb2 <memset+0x4>
	...

08008cc0 <sbrk_aligned>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4e0e      	ldr	r6, [pc, #56]	; (8008cfc <sbrk_aligned+0x3c>)
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	6831      	ldr	r1, [r6, #0]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	b911      	cbnz	r1, 8008cd2 <sbrk_aligned+0x12>
 8008ccc:	f000 f90e 	bl	8008eec <_sbrk_r>
 8008cd0:	6030      	str	r0, [r6, #0]
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 f909 	bl	8008eec <_sbrk_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d00a      	beq.n	8008cf4 <sbrk_aligned+0x34>
 8008cde:	1cc4      	adds	r4, r0, #3
 8008ce0:	f024 0403 	bic.w	r4, r4, #3
 8008ce4:	42a0      	cmp	r0, r4
 8008ce6:	d007      	beq.n	8008cf8 <sbrk_aligned+0x38>
 8008ce8:	1a21      	subs	r1, r4, r0
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 f8fe 	bl	8008eec <_sbrk_r>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d101      	bne.n	8008cf8 <sbrk_aligned+0x38>
 8008cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	20001c34 	.word	0x20001c34

08008d00 <_malloc_r>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	1ccd      	adds	r5, r1, #3
 8008d06:	f025 0503 	bic.w	r5, r5, #3
 8008d0a:	3508      	adds	r5, #8
 8008d0c:	2d0c      	cmp	r5, #12
 8008d0e:	bf38      	it	cc
 8008d10:	250c      	movcc	r5, #12
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	4607      	mov	r7, r0
 8008d16:	db01      	blt.n	8008d1c <_malloc_r+0x1c>
 8008d18:	42a9      	cmp	r1, r5
 8008d1a:	d905      	bls.n	8008d28 <_malloc_r+0x28>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	2600      	movs	r6, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	4e2e      	ldr	r6, [pc, #184]	; (8008de4 <_malloc_r+0xe4>)
 8008d2a:	f000 fa29 	bl	8009180 <__malloc_lock>
 8008d2e:	6833      	ldr	r3, [r6, #0]
 8008d30:	461c      	mov	r4, r3
 8008d32:	bb34      	cbnz	r4, 8008d82 <_malloc_r+0x82>
 8008d34:	4629      	mov	r1, r5
 8008d36:	4638      	mov	r0, r7
 8008d38:	f7ff ffc2 	bl	8008cc0 <sbrk_aligned>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	4604      	mov	r4, r0
 8008d40:	d14d      	bne.n	8008dde <_malloc_r+0xde>
 8008d42:	6834      	ldr	r4, [r6, #0]
 8008d44:	4626      	mov	r6, r4
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	d140      	bne.n	8008dcc <_malloc_r+0xcc>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4638      	mov	r0, r7
 8008d50:	eb04 0803 	add.w	r8, r4, r3
 8008d54:	f000 f8ca 	bl	8008eec <_sbrk_r>
 8008d58:	4580      	cmp	r8, r0
 8008d5a:	d13a      	bne.n	8008dd2 <_malloc_r+0xd2>
 8008d5c:	6821      	ldr	r1, [r4, #0]
 8008d5e:	3503      	adds	r5, #3
 8008d60:	1a6d      	subs	r5, r5, r1
 8008d62:	f025 0503 	bic.w	r5, r5, #3
 8008d66:	3508      	adds	r5, #8
 8008d68:	2d0c      	cmp	r5, #12
 8008d6a:	bf38      	it	cc
 8008d6c:	250c      	movcc	r5, #12
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4638      	mov	r0, r7
 8008d72:	f7ff ffa5 	bl	8008cc0 <sbrk_aligned>
 8008d76:	3001      	adds	r0, #1
 8008d78:	d02b      	beq.n	8008dd2 <_malloc_r+0xd2>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	442b      	add	r3, r5
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	e00e      	b.n	8008da0 <_malloc_r+0xa0>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	1b52      	subs	r2, r2, r5
 8008d86:	d41e      	bmi.n	8008dc6 <_malloc_r+0xc6>
 8008d88:	2a0b      	cmp	r2, #11
 8008d8a:	d916      	bls.n	8008dba <_malloc_r+0xba>
 8008d8c:	1961      	adds	r1, r4, r5
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	6025      	str	r5, [r4, #0]
 8008d92:	bf18      	it	ne
 8008d94:	6059      	strne	r1, [r3, #4]
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	bf08      	it	eq
 8008d9a:	6031      	streq	r1, [r6, #0]
 8008d9c:	5162      	str	r2, [r4, r5]
 8008d9e:	604b      	str	r3, [r1, #4]
 8008da0:	4638      	mov	r0, r7
 8008da2:	f104 060b 	add.w	r6, r4, #11
 8008da6:	f000 f9f1 	bl	800918c <__malloc_unlock>
 8008daa:	f026 0607 	bic.w	r6, r6, #7
 8008dae:	1d23      	adds	r3, r4, #4
 8008db0:	1af2      	subs	r2, r6, r3
 8008db2:	d0b6      	beq.n	8008d22 <_malloc_r+0x22>
 8008db4:	1b9b      	subs	r3, r3, r6
 8008db6:	50a3      	str	r3, [r4, r2]
 8008db8:	e7b3      	b.n	8008d22 <_malloc_r+0x22>
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	bf0c      	ite	eq
 8008dc0:	6032      	streq	r2, [r6, #0]
 8008dc2:	605a      	strne	r2, [r3, #4]
 8008dc4:	e7ec      	b.n	8008da0 <_malloc_r+0xa0>
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	6864      	ldr	r4, [r4, #4]
 8008dca:	e7b2      	b.n	8008d32 <_malloc_r+0x32>
 8008dcc:	4634      	mov	r4, r6
 8008dce:	6876      	ldr	r6, [r6, #4]
 8008dd0:	e7b9      	b.n	8008d46 <_malloc_r+0x46>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f000 f9d8 	bl	800918c <__malloc_unlock>
 8008ddc:	e7a1      	b.n	8008d22 <_malloc_r+0x22>
 8008dde:	6025      	str	r5, [r4, #0]
 8008de0:	e7de      	b.n	8008da0 <_malloc_r+0xa0>
 8008de2:	bf00      	nop
 8008de4:	20001c30 	.word	0x20001c30

08008de8 <iprintf>:
 8008de8:	b40f      	push	{r0, r1, r2, r3}
 8008dea:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <iprintf+0x2c>)
 8008dec:	b513      	push	{r0, r1, r4, lr}
 8008dee:	681c      	ldr	r4, [r3, #0]
 8008df0:	b124      	cbz	r4, 8008dfc <iprintf+0x14>
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	b913      	cbnz	r3, 8008dfc <iprintf+0x14>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff fe86 	bl	8008b08 <__sinit>
 8008dfc:	ab05      	add	r3, sp, #20
 8008dfe:	9a04      	ldr	r2, [sp, #16]
 8008e00:	68a1      	ldr	r1, [r4, #8]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fa3d 	bl	8009284 <_vfiprintf_r>
 8008e0a:	b002      	add	sp, #8
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	b004      	add	sp, #16
 8008e12:	4770      	bx	lr
 8008e14:	20000010 	.word	0x20000010

08008e18 <cleanup_glue>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	6809      	ldr	r1, [r1, #0]
 8008e1e:	4605      	mov	r5, r0
 8008e20:	b109      	cbz	r1, 8008e26 <cleanup_glue+0xe>
 8008e22:	f7ff fff9 	bl	8008e18 <cleanup_glue>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e2e:	f000 b9b3 	b.w	8009198 <_free_r>
	...

08008e34 <_reclaim_reent>:
 8008e34:	4b2c      	ldr	r3, [pc, #176]	; (8008ee8 <_reclaim_reent+0xb4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4283      	cmp	r3, r0
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	d051      	beq.n	8008ee4 <_reclaim_reent+0xb0>
 8008e40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e42:	b143      	cbz	r3, 8008e56 <_reclaim_reent+0x22>
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d14a      	bne.n	8008ee0 <_reclaim_reent+0xac>
 8008e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4c:	6819      	ldr	r1, [r3, #0]
 8008e4e:	b111      	cbz	r1, 8008e56 <_reclaim_reent+0x22>
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 f9a1 	bl	8009198 <_free_r>
 8008e56:	6961      	ldr	r1, [r4, #20]
 8008e58:	b111      	cbz	r1, 8008e60 <_reclaim_reent+0x2c>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 f99c 	bl	8009198 <_free_r>
 8008e60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e62:	b111      	cbz	r1, 8008e6a <_reclaim_reent+0x36>
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 f997 	bl	8009198 <_free_r>
 8008e6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e6c:	b111      	cbz	r1, 8008e74 <_reclaim_reent+0x40>
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 f992 	bl	8009198 <_free_r>
 8008e74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e76:	b111      	cbz	r1, 8008e7e <_reclaim_reent+0x4a>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 f98d 	bl	8009198 <_free_r>
 8008e7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e80:	b111      	cbz	r1, 8008e88 <_reclaim_reent+0x54>
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f988 	bl	8009198 <_free_r>
 8008e88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e8a:	b111      	cbz	r1, 8008e92 <_reclaim_reent+0x5e>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 f983 	bl	8009198 <_free_r>
 8008e92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e94:	b111      	cbz	r1, 8008e9c <_reclaim_reent+0x68>
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f97e 	bl	8009198 <_free_r>
 8008e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9e:	b111      	cbz	r1, 8008ea6 <_reclaim_reent+0x72>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 f979 	bl	8009198 <_free_r>
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	b1e3      	cbz	r3, 8008ee4 <_reclaim_reent+0xb0>
 8008eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008eac:	4620      	mov	r0, r4
 8008eae:	4798      	blx	r3
 8008eb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008eb2:	b1b9      	cbz	r1, 8008ee4 <_reclaim_reent+0xb0>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008eba:	f7ff bfad 	b.w	8008e18 <cleanup_glue>
 8008ebe:	5949      	ldr	r1, [r1, r5]
 8008ec0:	b941      	cbnz	r1, 8008ed4 <_reclaim_reent+0xa0>
 8008ec2:	3504      	adds	r5, #4
 8008ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ec6:	2d80      	cmp	r5, #128	; 0x80
 8008ec8:	68d9      	ldr	r1, [r3, #12]
 8008eca:	d1f8      	bne.n	8008ebe <_reclaim_reent+0x8a>
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 f963 	bl	8009198 <_free_r>
 8008ed2:	e7ba      	b.n	8008e4a <_reclaim_reent+0x16>
 8008ed4:	680e      	ldr	r6, [r1, #0]
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 f95e 	bl	8009198 <_free_r>
 8008edc:	4631      	mov	r1, r6
 8008ede:	e7ef      	b.n	8008ec0 <_reclaim_reent+0x8c>
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	e7ef      	b.n	8008ec4 <_reclaim_reent+0x90>
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000010 	.word	0x20000010

08008eec <_sbrk_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_sbrk_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7f8 fbdc 	bl	80016b4 <_sbrk>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_sbrk_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_sbrk_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	20001c38 	.word	0x20001c38

08008f0c <__sread>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	460c      	mov	r4, r1
 8008f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f14:	f000 fc7a 	bl	800980c <_read_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	bfab      	itete	ge
 8008f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f20:	181b      	addge	r3, r3, r0
 8008f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f26:	bfac      	ite	ge
 8008f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f2a:	81a3      	strhlt	r3, [r4, #12]
 8008f2c:	bd10      	pop	{r4, pc}

08008f2e <__swrite>:
 8008f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	461f      	mov	r7, r3
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	05db      	lsls	r3, r3, #23
 8008f38:	4605      	mov	r5, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	d505      	bpl.n	8008f4c <__swrite+0x1e>
 8008f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f44:	2302      	movs	r3, #2
 8008f46:	2200      	movs	r2, #0
 8008f48:	f000 f908 	bl	800915c <_lseek_r>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	4632      	mov	r2, r6
 8008f5a:	463b      	mov	r3, r7
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	f000 b817 	b.w	8008f94 <_write_r>

08008f66 <__sseek>:
 8008f66:	b510      	push	{r4, lr}
 8008f68:	460c      	mov	r4, r1
 8008f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6e:	f000 f8f5 	bl	800915c <_lseek_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	bf15      	itete	ne
 8008f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f82:	81a3      	strheq	r3, [r4, #12]
 8008f84:	bf18      	it	ne
 8008f86:	81a3      	strhne	r3, [r4, #12]
 8008f88:	bd10      	pop	{r4, pc}

08008f8a <__sclose>:
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	f000 b813 	b.w	8008fb8 <_close_r>
	...

08008f94 <_write_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	; (8008fb4 <_write_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f8 fb35 	bl	8001612 <_write>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_write_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_write_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20001c38 	.word	0x20001c38

08008fb8 <_close_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d06      	ldr	r5, [pc, #24]	; (8008fd4 <_close_r+0x1c>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	f7f8 fb41 	bl	800164a <_close>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_close_r+0x1a>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_close_r+0x1a>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	20001c38 	.word	0x20001c38

08008fd8 <__sflush_r>:
 8008fd8:	898a      	ldrh	r2, [r1, #12]
 8008fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fde:	4605      	mov	r5, r0
 8008fe0:	0710      	lsls	r0, r2, #28
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	d458      	bmi.n	8009098 <__sflush_r+0xc0>
 8008fe6:	684b      	ldr	r3, [r1, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dc05      	bgt.n	8008ff8 <__sflush_r+0x20>
 8008fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dc02      	bgt.n	8008ff8 <__sflush_r+0x20>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	d0f9      	beq.n	8008ff2 <__sflush_r+0x1a>
 8008ffe:	2300      	movs	r3, #0
 8009000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009004:	682f      	ldr	r7, [r5, #0]
 8009006:	602b      	str	r3, [r5, #0]
 8009008:	d032      	beq.n	8009070 <__sflush_r+0x98>
 800900a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	075a      	lsls	r2, r3, #29
 8009010:	d505      	bpl.n	800901e <__sflush_r+0x46>
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	1ac0      	subs	r0, r0, r3
 8009016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009018:	b10b      	cbz	r3, 800901e <__sflush_r+0x46>
 800901a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800901c:	1ac0      	subs	r0, r0, r3
 800901e:	2300      	movs	r3, #0
 8009020:	4602      	mov	r2, r0
 8009022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009024:	6a21      	ldr	r1, [r4, #32]
 8009026:	4628      	mov	r0, r5
 8009028:	47b0      	blx	r6
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	d106      	bne.n	800903e <__sflush_r+0x66>
 8009030:	6829      	ldr	r1, [r5, #0]
 8009032:	291d      	cmp	r1, #29
 8009034:	d82c      	bhi.n	8009090 <__sflush_r+0xb8>
 8009036:	4a2a      	ldr	r2, [pc, #168]	; (80090e0 <__sflush_r+0x108>)
 8009038:	40ca      	lsrs	r2, r1
 800903a:	07d6      	lsls	r6, r2, #31
 800903c:	d528      	bpl.n	8009090 <__sflush_r+0xb8>
 800903e:	2200      	movs	r2, #0
 8009040:	6062      	str	r2, [r4, #4]
 8009042:	04d9      	lsls	r1, r3, #19
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	6022      	str	r2, [r4, #0]
 8009048:	d504      	bpl.n	8009054 <__sflush_r+0x7c>
 800904a:	1c42      	adds	r2, r0, #1
 800904c:	d101      	bne.n	8009052 <__sflush_r+0x7a>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	b903      	cbnz	r3, 8009054 <__sflush_r+0x7c>
 8009052:	6560      	str	r0, [r4, #84]	; 0x54
 8009054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009056:	602f      	str	r7, [r5, #0]
 8009058:	2900      	cmp	r1, #0
 800905a:	d0ca      	beq.n	8008ff2 <__sflush_r+0x1a>
 800905c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009060:	4299      	cmp	r1, r3
 8009062:	d002      	beq.n	800906a <__sflush_r+0x92>
 8009064:	4628      	mov	r0, r5
 8009066:	f000 f897 	bl	8009198 <_free_r>
 800906a:	2000      	movs	r0, #0
 800906c:	6360      	str	r0, [r4, #52]	; 0x34
 800906e:	e7c1      	b.n	8008ff4 <__sflush_r+0x1c>
 8009070:	6a21      	ldr	r1, [r4, #32]
 8009072:	2301      	movs	r3, #1
 8009074:	4628      	mov	r0, r5
 8009076:	47b0      	blx	r6
 8009078:	1c41      	adds	r1, r0, #1
 800907a:	d1c7      	bne.n	800900c <__sflush_r+0x34>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0c4      	beq.n	800900c <__sflush_r+0x34>
 8009082:	2b1d      	cmp	r3, #29
 8009084:	d001      	beq.n	800908a <__sflush_r+0xb2>
 8009086:	2b16      	cmp	r3, #22
 8009088:	d101      	bne.n	800908e <__sflush_r+0xb6>
 800908a:	602f      	str	r7, [r5, #0]
 800908c:	e7b1      	b.n	8008ff2 <__sflush_r+0x1a>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	e7ad      	b.n	8008ff4 <__sflush_r+0x1c>
 8009098:	690f      	ldr	r7, [r1, #16]
 800909a:	2f00      	cmp	r7, #0
 800909c:	d0a9      	beq.n	8008ff2 <__sflush_r+0x1a>
 800909e:	0793      	lsls	r3, r2, #30
 80090a0:	680e      	ldr	r6, [r1, #0]
 80090a2:	bf08      	it	eq
 80090a4:	694b      	ldreq	r3, [r1, #20]
 80090a6:	600f      	str	r7, [r1, #0]
 80090a8:	bf18      	it	ne
 80090aa:	2300      	movne	r3, #0
 80090ac:	eba6 0807 	sub.w	r8, r6, r7
 80090b0:	608b      	str	r3, [r1, #8]
 80090b2:	f1b8 0f00 	cmp.w	r8, #0
 80090b6:	dd9c      	ble.n	8008ff2 <__sflush_r+0x1a>
 80090b8:	6a21      	ldr	r1, [r4, #32]
 80090ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090bc:	4643      	mov	r3, r8
 80090be:	463a      	mov	r2, r7
 80090c0:	4628      	mov	r0, r5
 80090c2:	47b0      	blx	r6
 80090c4:	2800      	cmp	r0, #0
 80090c6:	dc06      	bgt.n	80090d6 <__sflush_r+0xfe>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	e78e      	b.n	8008ff4 <__sflush_r+0x1c>
 80090d6:	4407      	add	r7, r0
 80090d8:	eba8 0800 	sub.w	r8, r8, r0
 80090dc:	e7e9      	b.n	80090b2 <__sflush_r+0xda>
 80090de:	bf00      	nop
 80090e0:	20400001 	.word	0x20400001

080090e4 <_fflush_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	690b      	ldr	r3, [r1, #16]
 80090e8:	4605      	mov	r5, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	b913      	cbnz	r3, 80090f4 <_fflush_r+0x10>
 80090ee:	2500      	movs	r5, #0
 80090f0:	4628      	mov	r0, r5
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	b118      	cbz	r0, 80090fe <_fflush_r+0x1a>
 80090f6:	6983      	ldr	r3, [r0, #24]
 80090f8:	b90b      	cbnz	r3, 80090fe <_fflush_r+0x1a>
 80090fa:	f7ff fd05 	bl	8008b08 <__sinit>
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <_fflush_r+0x6c>)
 8009100:	429c      	cmp	r4, r3
 8009102:	d11b      	bne.n	800913c <_fflush_r+0x58>
 8009104:	686c      	ldr	r4, [r5, #4]
 8009106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0ef      	beq.n	80090ee <_fflush_r+0xa>
 800910e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009110:	07d0      	lsls	r0, r2, #31
 8009112:	d404      	bmi.n	800911e <_fflush_r+0x3a>
 8009114:	0599      	lsls	r1, r3, #22
 8009116:	d402      	bmi.n	800911e <_fflush_r+0x3a>
 8009118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911a:	f7ff fdb8 	bl	8008c8e <__retarget_lock_acquire_recursive>
 800911e:	4628      	mov	r0, r5
 8009120:	4621      	mov	r1, r4
 8009122:	f7ff ff59 	bl	8008fd8 <__sflush_r>
 8009126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009128:	07da      	lsls	r2, r3, #31
 800912a:	4605      	mov	r5, r0
 800912c:	d4e0      	bmi.n	80090f0 <_fflush_r+0xc>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	059b      	lsls	r3, r3, #22
 8009132:	d4dd      	bmi.n	80090f0 <_fflush_r+0xc>
 8009134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009136:	f7ff fdab 	bl	8008c90 <__retarget_lock_release_recursive>
 800913a:	e7d9      	b.n	80090f0 <_fflush_r+0xc>
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <_fflush_r+0x70>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d101      	bne.n	8009146 <_fflush_r+0x62>
 8009142:	68ac      	ldr	r4, [r5, #8]
 8009144:	e7df      	b.n	8009106 <_fflush_r+0x22>
 8009146:	4b04      	ldr	r3, [pc, #16]	; (8009158 <_fflush_r+0x74>)
 8009148:	429c      	cmp	r4, r3
 800914a:	bf08      	it	eq
 800914c:	68ec      	ldreq	r4, [r5, #12]
 800914e:	e7da      	b.n	8009106 <_fflush_r+0x22>
 8009150:	08009c44 	.word	0x08009c44
 8009154:	08009c64 	.word	0x08009c64
 8009158:	08009c24 	.word	0x08009c24

0800915c <_lseek_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d07      	ldr	r5, [pc, #28]	; (800917c <_lseek_r+0x20>)
 8009160:	4604      	mov	r4, r0
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	2200      	movs	r2, #0
 8009168:	602a      	str	r2, [r5, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7f8 fa94 	bl	8001698 <_lseek>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_lseek_r+0x1e>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_lseek_r+0x1e>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20001c38 	.word	0x20001c38

08009180 <__malloc_lock>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__malloc_lock+0x8>)
 8009182:	f7ff bd84 	b.w	8008c8e <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	20001c2c 	.word	0x20001c2c

0800918c <__malloc_unlock>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__malloc_unlock+0x8>)
 800918e:	f7ff bd7f 	b.w	8008c90 <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	20001c2c 	.word	0x20001c2c

08009198 <_free_r>:
 8009198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919a:	2900      	cmp	r1, #0
 800919c:	d044      	beq.n	8009228 <_free_r+0x90>
 800919e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f1a1 0404 	sub.w	r4, r1, #4
 80091aa:	bfb8      	it	lt
 80091ac:	18e4      	addlt	r4, r4, r3
 80091ae:	f7ff ffe7 	bl	8009180 <__malloc_lock>
 80091b2:	4a1e      	ldr	r2, [pc, #120]	; (800922c <_free_r+0x94>)
 80091b4:	9801      	ldr	r0, [sp, #4]
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	b933      	cbnz	r3, 80091c8 <_free_r+0x30>
 80091ba:	6063      	str	r3, [r4, #4]
 80091bc:	6014      	str	r4, [r2, #0]
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c4:	f7ff bfe2 	b.w	800918c <__malloc_unlock>
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d908      	bls.n	80091de <_free_r+0x46>
 80091cc:	6825      	ldr	r5, [r4, #0]
 80091ce:	1961      	adds	r1, r4, r5
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf01      	itttt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	1949      	addeq	r1, r1, r5
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	e7ed      	b.n	80091ba <_free_r+0x22>
 80091de:	461a      	mov	r2, r3
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	b10b      	cbz	r3, 80091e8 <_free_r+0x50>
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d9fa      	bls.n	80091de <_free_r+0x46>
 80091e8:	6811      	ldr	r1, [r2, #0]
 80091ea:	1855      	adds	r5, r2, r1
 80091ec:	42a5      	cmp	r5, r4
 80091ee:	d10b      	bne.n	8009208 <_free_r+0x70>
 80091f0:	6824      	ldr	r4, [r4, #0]
 80091f2:	4421      	add	r1, r4
 80091f4:	1854      	adds	r4, r2, r1
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	6011      	str	r1, [r2, #0]
 80091fa:	d1e0      	bne.n	80091be <_free_r+0x26>
 80091fc:	681c      	ldr	r4, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	4421      	add	r1, r4
 8009204:	6011      	str	r1, [r2, #0]
 8009206:	e7da      	b.n	80091be <_free_r+0x26>
 8009208:	d902      	bls.n	8009210 <_free_r+0x78>
 800920a:	230c      	movs	r3, #12
 800920c:	6003      	str	r3, [r0, #0]
 800920e:	e7d6      	b.n	80091be <_free_r+0x26>
 8009210:	6825      	ldr	r5, [r4, #0]
 8009212:	1961      	adds	r1, r4, r5
 8009214:	428b      	cmp	r3, r1
 8009216:	bf04      	itt	eq
 8009218:	6819      	ldreq	r1, [r3, #0]
 800921a:	685b      	ldreq	r3, [r3, #4]
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	bf04      	itt	eq
 8009220:	1949      	addeq	r1, r1, r5
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	6054      	str	r4, [r2, #4]
 8009226:	e7ca      	b.n	80091be <_free_r+0x26>
 8009228:	b003      	add	sp, #12
 800922a:	bd30      	pop	{r4, r5, pc}
 800922c:	20001c30 	.word	0x20001c30

08009230 <__sfputc_r>:
 8009230:	6893      	ldr	r3, [r2, #8]
 8009232:	3b01      	subs	r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	b410      	push	{r4}
 8009238:	6093      	str	r3, [r2, #8]
 800923a:	da08      	bge.n	800924e <__sfputc_r+0x1e>
 800923c:	6994      	ldr	r4, [r2, #24]
 800923e:	42a3      	cmp	r3, r4
 8009240:	db01      	blt.n	8009246 <__sfputc_r+0x16>
 8009242:	290a      	cmp	r1, #10
 8009244:	d103      	bne.n	800924e <__sfputc_r+0x1e>
 8009246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924a:	f000 baf1 	b.w	8009830 <__swbuf_r>
 800924e:	6813      	ldr	r3, [r2, #0]
 8009250:	1c58      	adds	r0, r3, #1
 8009252:	6010      	str	r0, [r2, #0]
 8009254:	7019      	strb	r1, [r3, #0]
 8009256:	4608      	mov	r0, r1
 8009258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800925c:	4770      	bx	lr

0800925e <__sfputs_r>:
 800925e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009260:	4606      	mov	r6, r0
 8009262:	460f      	mov	r7, r1
 8009264:	4614      	mov	r4, r2
 8009266:	18d5      	adds	r5, r2, r3
 8009268:	42ac      	cmp	r4, r5
 800926a:	d101      	bne.n	8009270 <__sfputs_r+0x12>
 800926c:	2000      	movs	r0, #0
 800926e:	e007      	b.n	8009280 <__sfputs_r+0x22>
 8009270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009274:	463a      	mov	r2, r7
 8009276:	4630      	mov	r0, r6
 8009278:	f7ff ffda 	bl	8009230 <__sfputc_r>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d1f3      	bne.n	8009268 <__sfputs_r+0xa>
 8009280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009284 <_vfiprintf_r>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	460d      	mov	r5, r1
 800928a:	b09d      	sub	sp, #116	; 0x74
 800928c:	4614      	mov	r4, r2
 800928e:	4698      	mov	r8, r3
 8009290:	4606      	mov	r6, r0
 8009292:	b118      	cbz	r0, 800929c <_vfiprintf_r+0x18>
 8009294:	6983      	ldr	r3, [r0, #24]
 8009296:	b90b      	cbnz	r3, 800929c <_vfiprintf_r+0x18>
 8009298:	f7ff fc36 	bl	8008b08 <__sinit>
 800929c:	4b89      	ldr	r3, [pc, #548]	; (80094c4 <_vfiprintf_r+0x240>)
 800929e:	429d      	cmp	r5, r3
 80092a0:	d11b      	bne.n	80092da <_vfiprintf_r+0x56>
 80092a2:	6875      	ldr	r5, [r6, #4]
 80092a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_vfiprintf_r+0x32>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_vfiprintf_r+0x32>
 80092b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092b2:	f7ff fcec 	bl	8008c8e <__retarget_lock_acquire_recursive>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	071b      	lsls	r3, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <_vfiprintf_r+0x3c>
 80092bc:	692b      	ldr	r3, [r5, #16]
 80092be:	b9eb      	cbnz	r3, 80092fc <_vfiprintf_r+0x78>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 fb06 	bl	80098d4 <__swsetup_r>
 80092c8:	b1c0      	cbz	r0, 80092fc <_vfiprintf_r+0x78>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092cc:	07dc      	lsls	r4, r3, #31
 80092ce:	d50e      	bpl.n	80092ee <_vfiprintf_r+0x6a>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b01d      	add	sp, #116	; 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	4b7b      	ldr	r3, [pc, #492]	; (80094c8 <_vfiprintf_r+0x244>)
 80092dc:	429d      	cmp	r5, r3
 80092de:	d101      	bne.n	80092e4 <_vfiprintf_r+0x60>
 80092e0:	68b5      	ldr	r5, [r6, #8]
 80092e2:	e7df      	b.n	80092a4 <_vfiprintf_r+0x20>
 80092e4:	4b79      	ldr	r3, [pc, #484]	; (80094cc <_vfiprintf_r+0x248>)
 80092e6:	429d      	cmp	r5, r3
 80092e8:	bf08      	it	eq
 80092ea:	68f5      	ldreq	r5, [r6, #12]
 80092ec:	e7da      	b.n	80092a4 <_vfiprintf_r+0x20>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	0598      	lsls	r0, r3, #22
 80092f2:	d4ed      	bmi.n	80092d0 <_vfiprintf_r+0x4c>
 80092f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092f6:	f7ff fccb 	bl	8008c90 <__retarget_lock_release_recursive>
 80092fa:	e7e9      	b.n	80092d0 <_vfiprintf_r+0x4c>
 80092fc:	2300      	movs	r3, #0
 80092fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009300:	2320      	movs	r3, #32
 8009302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009306:	f8cd 800c 	str.w	r8, [sp, #12]
 800930a:	2330      	movs	r3, #48	; 0x30
 800930c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094d0 <_vfiprintf_r+0x24c>
 8009310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009314:	f04f 0901 	mov.w	r9, #1
 8009318:	4623      	mov	r3, r4
 800931a:	469a      	mov	sl, r3
 800931c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009320:	b10a      	cbz	r2, 8009326 <_vfiprintf_r+0xa2>
 8009322:	2a25      	cmp	r2, #37	; 0x25
 8009324:	d1f9      	bne.n	800931a <_vfiprintf_r+0x96>
 8009326:	ebba 0b04 	subs.w	fp, sl, r4
 800932a:	d00b      	beq.n	8009344 <_vfiprintf_r+0xc0>
 800932c:	465b      	mov	r3, fp
 800932e:	4622      	mov	r2, r4
 8009330:	4629      	mov	r1, r5
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ff93 	bl	800925e <__sfputs_r>
 8009338:	3001      	adds	r0, #1
 800933a:	f000 80aa 	beq.w	8009492 <_vfiprintf_r+0x20e>
 800933e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009340:	445a      	add	r2, fp
 8009342:	9209      	str	r2, [sp, #36]	; 0x24
 8009344:	f89a 3000 	ldrb.w	r3, [sl]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80a2 	beq.w	8009492 <_vfiprintf_r+0x20e>
 800934e:	2300      	movs	r3, #0
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009358:	f10a 0a01 	add.w	sl, sl, #1
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009364:	931a      	str	r3, [sp, #104]	; 0x68
 8009366:	4654      	mov	r4, sl
 8009368:	2205      	movs	r2, #5
 800936a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936e:	4858      	ldr	r0, [pc, #352]	; (80094d0 <_vfiprintf_r+0x24c>)
 8009370:	f7f6 ff36 	bl	80001e0 <memchr>
 8009374:	9a04      	ldr	r2, [sp, #16]
 8009376:	b9d8      	cbnz	r0, 80093b0 <_vfiprintf_r+0x12c>
 8009378:	06d1      	lsls	r1, r2, #27
 800937a:	bf44      	itt	mi
 800937c:	2320      	movmi	r3, #32
 800937e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009382:	0713      	lsls	r3, r2, #28
 8009384:	bf44      	itt	mi
 8009386:	232b      	movmi	r3, #43	; 0x2b
 8009388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800938c:	f89a 3000 	ldrb.w	r3, [sl]
 8009390:	2b2a      	cmp	r3, #42	; 0x2a
 8009392:	d015      	beq.n	80093c0 <_vfiprintf_r+0x13c>
 8009394:	9a07      	ldr	r2, [sp, #28]
 8009396:	4654      	mov	r4, sl
 8009398:	2000      	movs	r0, #0
 800939a:	f04f 0c0a 	mov.w	ip, #10
 800939e:	4621      	mov	r1, r4
 80093a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a4:	3b30      	subs	r3, #48	; 0x30
 80093a6:	2b09      	cmp	r3, #9
 80093a8:	d94e      	bls.n	8009448 <_vfiprintf_r+0x1c4>
 80093aa:	b1b0      	cbz	r0, 80093da <_vfiprintf_r+0x156>
 80093ac:	9207      	str	r2, [sp, #28]
 80093ae:	e014      	b.n	80093da <_vfiprintf_r+0x156>
 80093b0:	eba0 0308 	sub.w	r3, r0, r8
 80093b4:	fa09 f303 	lsl.w	r3, r9, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	46a2      	mov	sl, r4
 80093be:	e7d2      	b.n	8009366 <_vfiprintf_r+0xe2>
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	1d19      	adds	r1, r3, #4
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	9103      	str	r1, [sp, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bfbb      	ittet	lt
 80093cc:	425b      	neglt	r3, r3
 80093ce:	f042 0202 	orrlt.w	r2, r2, #2
 80093d2:	9307      	strge	r3, [sp, #28]
 80093d4:	9307      	strlt	r3, [sp, #28]
 80093d6:	bfb8      	it	lt
 80093d8:	9204      	strlt	r2, [sp, #16]
 80093da:	7823      	ldrb	r3, [r4, #0]
 80093dc:	2b2e      	cmp	r3, #46	; 0x2e
 80093de:	d10c      	bne.n	80093fa <_vfiprintf_r+0x176>
 80093e0:	7863      	ldrb	r3, [r4, #1]
 80093e2:	2b2a      	cmp	r3, #42	; 0x2a
 80093e4:	d135      	bne.n	8009452 <_vfiprintf_r+0x1ce>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	1d1a      	adds	r2, r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	9203      	str	r2, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfb8      	it	lt
 80093f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093f6:	3402      	adds	r4, #2
 80093f8:	9305      	str	r3, [sp, #20]
 80093fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094e0 <_vfiprintf_r+0x25c>
 80093fe:	7821      	ldrb	r1, [r4, #0]
 8009400:	2203      	movs	r2, #3
 8009402:	4650      	mov	r0, sl
 8009404:	f7f6 feec 	bl	80001e0 <memchr>
 8009408:	b140      	cbz	r0, 800941c <_vfiprintf_r+0x198>
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	eba0 000a 	sub.w	r0, r0, sl
 8009410:	fa03 f000 	lsl.w	r0, r3, r0
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	4303      	orrs	r3, r0
 8009418:	3401      	adds	r4, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009420:	482c      	ldr	r0, [pc, #176]	; (80094d4 <_vfiprintf_r+0x250>)
 8009422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009426:	2206      	movs	r2, #6
 8009428:	f7f6 feda 	bl	80001e0 <memchr>
 800942c:	2800      	cmp	r0, #0
 800942e:	d03f      	beq.n	80094b0 <_vfiprintf_r+0x22c>
 8009430:	4b29      	ldr	r3, [pc, #164]	; (80094d8 <_vfiprintf_r+0x254>)
 8009432:	bb1b      	cbnz	r3, 800947c <_vfiprintf_r+0x1f8>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	3307      	adds	r3, #7
 8009438:	f023 0307 	bic.w	r3, r3, #7
 800943c:	3308      	adds	r3, #8
 800943e:	9303      	str	r3, [sp, #12]
 8009440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009442:	443b      	add	r3, r7
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	e767      	b.n	8009318 <_vfiprintf_r+0x94>
 8009448:	fb0c 3202 	mla	r2, ip, r2, r3
 800944c:	460c      	mov	r4, r1
 800944e:	2001      	movs	r0, #1
 8009450:	e7a5      	b.n	800939e <_vfiprintf_r+0x11a>
 8009452:	2300      	movs	r3, #0
 8009454:	3401      	adds	r4, #1
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	4619      	mov	r1, r3
 800945a:	f04f 0c0a 	mov.w	ip, #10
 800945e:	4620      	mov	r0, r4
 8009460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009464:	3a30      	subs	r2, #48	; 0x30
 8009466:	2a09      	cmp	r2, #9
 8009468:	d903      	bls.n	8009472 <_vfiprintf_r+0x1ee>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0c5      	beq.n	80093fa <_vfiprintf_r+0x176>
 800946e:	9105      	str	r1, [sp, #20]
 8009470:	e7c3      	b.n	80093fa <_vfiprintf_r+0x176>
 8009472:	fb0c 2101 	mla	r1, ip, r1, r2
 8009476:	4604      	mov	r4, r0
 8009478:	2301      	movs	r3, #1
 800947a:	e7f0      	b.n	800945e <_vfiprintf_r+0x1da>
 800947c:	ab03      	add	r3, sp, #12
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	462a      	mov	r2, r5
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <_vfiprintf_r+0x258>)
 8009484:	a904      	add	r1, sp, #16
 8009486:	4630      	mov	r0, r6
 8009488:	f3af 8000 	nop.w
 800948c:	4607      	mov	r7, r0
 800948e:	1c78      	adds	r0, r7, #1
 8009490:	d1d6      	bne.n	8009440 <_vfiprintf_r+0x1bc>
 8009492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009494:	07d9      	lsls	r1, r3, #31
 8009496:	d405      	bmi.n	80094a4 <_vfiprintf_r+0x220>
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	059a      	lsls	r2, r3, #22
 800949c:	d402      	bmi.n	80094a4 <_vfiprintf_r+0x220>
 800949e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a0:	f7ff fbf6 	bl	8008c90 <__retarget_lock_release_recursive>
 80094a4:	89ab      	ldrh	r3, [r5, #12]
 80094a6:	065b      	lsls	r3, r3, #25
 80094a8:	f53f af12 	bmi.w	80092d0 <_vfiprintf_r+0x4c>
 80094ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ae:	e711      	b.n	80092d4 <_vfiprintf_r+0x50>
 80094b0:	ab03      	add	r3, sp, #12
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	462a      	mov	r2, r5
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <_vfiprintf_r+0x258>)
 80094b8:	a904      	add	r1, sp, #16
 80094ba:	4630      	mov	r0, r6
 80094bc:	f000 f880 	bl	80095c0 <_printf_i>
 80094c0:	e7e4      	b.n	800948c <_vfiprintf_r+0x208>
 80094c2:	bf00      	nop
 80094c4:	08009c44 	.word	0x08009c44
 80094c8:	08009c64 	.word	0x08009c64
 80094cc:	08009c24 	.word	0x08009c24
 80094d0:	08009c88 	.word	0x08009c88
 80094d4:	08009c92 	.word	0x08009c92
 80094d8:	00000000 	.word	0x00000000
 80094dc:	0800925f 	.word	0x0800925f
 80094e0:	08009c8e 	.word	0x08009c8e

080094e4 <_printf_common>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	4616      	mov	r6, r2
 80094ea:	4699      	mov	r9, r3
 80094ec:	688a      	ldr	r2, [r1, #8]
 80094ee:	690b      	ldr	r3, [r1, #16]
 80094f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	bfb8      	it	lt
 80094f8:	4613      	movlt	r3, r2
 80094fa:	6033      	str	r3, [r6, #0]
 80094fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009500:	4607      	mov	r7, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b10a      	cbz	r2, 800950a <_printf_common+0x26>
 8009506:	3301      	adds	r3, #1
 8009508:	6033      	str	r3, [r6, #0]
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	0699      	lsls	r1, r3, #26
 800950e:	bf42      	ittt	mi
 8009510:	6833      	ldrmi	r3, [r6, #0]
 8009512:	3302      	addmi	r3, #2
 8009514:	6033      	strmi	r3, [r6, #0]
 8009516:	6825      	ldr	r5, [r4, #0]
 8009518:	f015 0506 	ands.w	r5, r5, #6
 800951c:	d106      	bne.n	800952c <_printf_common+0x48>
 800951e:	f104 0a19 	add.w	sl, r4, #25
 8009522:	68e3      	ldr	r3, [r4, #12]
 8009524:	6832      	ldr	r2, [r6, #0]
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	42ab      	cmp	r3, r5
 800952a:	dc26      	bgt.n	800957a <_printf_common+0x96>
 800952c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009530:	1e13      	subs	r3, r2, #0
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	bf18      	it	ne
 8009536:	2301      	movne	r3, #1
 8009538:	0692      	lsls	r2, r2, #26
 800953a:	d42b      	bmi.n	8009594 <_printf_common+0xb0>
 800953c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009540:	4649      	mov	r1, r9
 8009542:	4638      	mov	r0, r7
 8009544:	47c0      	blx	r8
 8009546:	3001      	adds	r0, #1
 8009548:	d01e      	beq.n	8009588 <_printf_common+0xa4>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	68e5      	ldr	r5, [r4, #12]
 800954e:	6832      	ldr	r2, [r6, #0]
 8009550:	f003 0306 	and.w	r3, r3, #6
 8009554:	2b04      	cmp	r3, #4
 8009556:	bf08      	it	eq
 8009558:	1aad      	subeq	r5, r5, r2
 800955a:	68a3      	ldr	r3, [r4, #8]
 800955c:	6922      	ldr	r2, [r4, #16]
 800955e:	bf0c      	ite	eq
 8009560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009564:	2500      	movne	r5, #0
 8009566:	4293      	cmp	r3, r2
 8009568:	bfc4      	itt	gt
 800956a:	1a9b      	subgt	r3, r3, r2
 800956c:	18ed      	addgt	r5, r5, r3
 800956e:	2600      	movs	r6, #0
 8009570:	341a      	adds	r4, #26
 8009572:	42b5      	cmp	r5, r6
 8009574:	d11a      	bne.n	80095ac <_printf_common+0xc8>
 8009576:	2000      	movs	r0, #0
 8009578:	e008      	b.n	800958c <_printf_common+0xa8>
 800957a:	2301      	movs	r3, #1
 800957c:	4652      	mov	r2, sl
 800957e:	4649      	mov	r1, r9
 8009580:	4638      	mov	r0, r7
 8009582:	47c0      	blx	r8
 8009584:	3001      	adds	r0, #1
 8009586:	d103      	bne.n	8009590 <_printf_common+0xac>
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009590:	3501      	adds	r5, #1
 8009592:	e7c6      	b.n	8009522 <_printf_common+0x3e>
 8009594:	18e1      	adds	r1, r4, r3
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	2030      	movs	r0, #48	; 0x30
 800959a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800959e:	4422      	add	r2, r4
 80095a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095a8:	3302      	adds	r3, #2
 80095aa:	e7c7      	b.n	800953c <_printf_common+0x58>
 80095ac:	2301      	movs	r3, #1
 80095ae:	4622      	mov	r2, r4
 80095b0:	4649      	mov	r1, r9
 80095b2:	4638      	mov	r0, r7
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d0e6      	beq.n	8009588 <_printf_common+0xa4>
 80095ba:	3601      	adds	r6, #1
 80095bc:	e7d9      	b.n	8009572 <_printf_common+0x8e>
	...

080095c0 <_printf_i>:
 80095c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	7e0f      	ldrb	r7, [r1, #24]
 80095c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095c8:	2f78      	cmp	r7, #120	; 0x78
 80095ca:	4691      	mov	r9, r2
 80095cc:	4680      	mov	r8, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	469a      	mov	sl, r3
 80095d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095d6:	d807      	bhi.n	80095e8 <_printf_i+0x28>
 80095d8:	2f62      	cmp	r7, #98	; 0x62
 80095da:	d80a      	bhi.n	80095f2 <_printf_i+0x32>
 80095dc:	2f00      	cmp	r7, #0
 80095de:	f000 80d8 	beq.w	8009792 <_printf_i+0x1d2>
 80095e2:	2f58      	cmp	r7, #88	; 0x58
 80095e4:	f000 80a3 	beq.w	800972e <_printf_i+0x16e>
 80095e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095f0:	e03a      	b.n	8009668 <_printf_i+0xa8>
 80095f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095f6:	2b15      	cmp	r3, #21
 80095f8:	d8f6      	bhi.n	80095e8 <_printf_i+0x28>
 80095fa:	a101      	add	r1, pc, #4	; (adr r1, 8009600 <_printf_i+0x40>)
 80095fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009600:	08009659 	.word	0x08009659
 8009604:	0800966d 	.word	0x0800966d
 8009608:	080095e9 	.word	0x080095e9
 800960c:	080095e9 	.word	0x080095e9
 8009610:	080095e9 	.word	0x080095e9
 8009614:	080095e9 	.word	0x080095e9
 8009618:	0800966d 	.word	0x0800966d
 800961c:	080095e9 	.word	0x080095e9
 8009620:	080095e9 	.word	0x080095e9
 8009624:	080095e9 	.word	0x080095e9
 8009628:	080095e9 	.word	0x080095e9
 800962c:	08009779 	.word	0x08009779
 8009630:	0800969d 	.word	0x0800969d
 8009634:	0800975b 	.word	0x0800975b
 8009638:	080095e9 	.word	0x080095e9
 800963c:	080095e9 	.word	0x080095e9
 8009640:	0800979b 	.word	0x0800979b
 8009644:	080095e9 	.word	0x080095e9
 8009648:	0800969d 	.word	0x0800969d
 800964c:	080095e9 	.word	0x080095e9
 8009650:	080095e9 	.word	0x080095e9
 8009654:	08009763 	.word	0x08009763
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	602a      	str	r2, [r5, #0]
 8009660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009668:	2301      	movs	r3, #1
 800966a:	e0a3      	b.n	80097b4 <_printf_i+0x1f4>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	6829      	ldr	r1, [r5, #0]
 8009670:	0606      	lsls	r6, r0, #24
 8009672:	f101 0304 	add.w	r3, r1, #4
 8009676:	d50a      	bpl.n	800968e <_printf_i+0xce>
 8009678:	680e      	ldr	r6, [r1, #0]
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	2e00      	cmp	r6, #0
 800967e:	da03      	bge.n	8009688 <_printf_i+0xc8>
 8009680:	232d      	movs	r3, #45	; 0x2d
 8009682:	4276      	negs	r6, r6
 8009684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009688:	485e      	ldr	r0, [pc, #376]	; (8009804 <_printf_i+0x244>)
 800968a:	230a      	movs	r3, #10
 800968c:	e019      	b.n	80096c2 <_printf_i+0x102>
 800968e:	680e      	ldr	r6, [r1, #0]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009696:	bf18      	it	ne
 8009698:	b236      	sxthne	r6, r6
 800969a:	e7ef      	b.n	800967c <_printf_i+0xbc>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	1d19      	adds	r1, r3, #4
 80096a2:	6029      	str	r1, [r5, #0]
 80096a4:	0601      	lsls	r1, r0, #24
 80096a6:	d501      	bpl.n	80096ac <_printf_i+0xec>
 80096a8:	681e      	ldr	r6, [r3, #0]
 80096aa:	e002      	b.n	80096b2 <_printf_i+0xf2>
 80096ac:	0646      	lsls	r6, r0, #25
 80096ae:	d5fb      	bpl.n	80096a8 <_printf_i+0xe8>
 80096b0:	881e      	ldrh	r6, [r3, #0]
 80096b2:	4854      	ldr	r0, [pc, #336]	; (8009804 <_printf_i+0x244>)
 80096b4:	2f6f      	cmp	r7, #111	; 0x6f
 80096b6:	bf0c      	ite	eq
 80096b8:	2308      	moveq	r3, #8
 80096ba:	230a      	movne	r3, #10
 80096bc:	2100      	movs	r1, #0
 80096be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096c2:	6865      	ldr	r5, [r4, #4]
 80096c4:	60a5      	str	r5, [r4, #8]
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	bfa2      	ittt	ge
 80096ca:	6821      	ldrge	r1, [r4, #0]
 80096cc:	f021 0104 	bicge.w	r1, r1, #4
 80096d0:	6021      	strge	r1, [r4, #0]
 80096d2:	b90e      	cbnz	r6, 80096d8 <_printf_i+0x118>
 80096d4:	2d00      	cmp	r5, #0
 80096d6:	d04d      	beq.n	8009774 <_printf_i+0x1b4>
 80096d8:	4615      	mov	r5, r2
 80096da:	fbb6 f1f3 	udiv	r1, r6, r3
 80096de:	fb03 6711 	mls	r7, r3, r1, r6
 80096e2:	5dc7      	ldrb	r7, [r0, r7]
 80096e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096e8:	4637      	mov	r7, r6
 80096ea:	42bb      	cmp	r3, r7
 80096ec:	460e      	mov	r6, r1
 80096ee:	d9f4      	bls.n	80096da <_printf_i+0x11a>
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d10b      	bne.n	800970c <_printf_i+0x14c>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	07de      	lsls	r6, r3, #31
 80096f8:	d508      	bpl.n	800970c <_printf_i+0x14c>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	6861      	ldr	r1, [r4, #4]
 80096fe:	4299      	cmp	r1, r3
 8009700:	bfde      	ittt	le
 8009702:	2330      	movle	r3, #48	; 0x30
 8009704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800970c:	1b52      	subs	r2, r2, r5
 800970e:	6122      	str	r2, [r4, #16]
 8009710:	f8cd a000 	str.w	sl, [sp]
 8009714:	464b      	mov	r3, r9
 8009716:	aa03      	add	r2, sp, #12
 8009718:	4621      	mov	r1, r4
 800971a:	4640      	mov	r0, r8
 800971c:	f7ff fee2 	bl	80094e4 <_printf_common>
 8009720:	3001      	adds	r0, #1
 8009722:	d14c      	bne.n	80097be <_printf_i+0x1fe>
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	b004      	add	sp, #16
 800972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972e:	4835      	ldr	r0, [pc, #212]	; (8009804 <_printf_i+0x244>)
 8009730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009734:	6829      	ldr	r1, [r5, #0]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	f851 6b04 	ldr.w	r6, [r1], #4
 800973c:	6029      	str	r1, [r5, #0]
 800973e:	061d      	lsls	r5, r3, #24
 8009740:	d514      	bpl.n	800976c <_printf_i+0x1ac>
 8009742:	07df      	lsls	r7, r3, #31
 8009744:	bf44      	itt	mi
 8009746:	f043 0320 	orrmi.w	r3, r3, #32
 800974a:	6023      	strmi	r3, [r4, #0]
 800974c:	b91e      	cbnz	r6, 8009756 <_printf_i+0x196>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f023 0320 	bic.w	r3, r3, #32
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	2310      	movs	r3, #16
 8009758:	e7b0      	b.n	80096bc <_printf_i+0xfc>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	f043 0320 	orr.w	r3, r3, #32
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	2378      	movs	r3, #120	; 0x78
 8009764:	4828      	ldr	r0, [pc, #160]	; (8009808 <_printf_i+0x248>)
 8009766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800976a:	e7e3      	b.n	8009734 <_printf_i+0x174>
 800976c:	0659      	lsls	r1, r3, #25
 800976e:	bf48      	it	mi
 8009770:	b2b6      	uxthmi	r6, r6
 8009772:	e7e6      	b.n	8009742 <_printf_i+0x182>
 8009774:	4615      	mov	r5, r2
 8009776:	e7bb      	b.n	80096f0 <_printf_i+0x130>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	6826      	ldr	r6, [r4, #0]
 800977c:	6961      	ldr	r1, [r4, #20]
 800977e:	1d18      	adds	r0, r3, #4
 8009780:	6028      	str	r0, [r5, #0]
 8009782:	0635      	lsls	r5, r6, #24
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	d501      	bpl.n	800978c <_printf_i+0x1cc>
 8009788:	6019      	str	r1, [r3, #0]
 800978a:	e002      	b.n	8009792 <_printf_i+0x1d2>
 800978c:	0670      	lsls	r0, r6, #25
 800978e:	d5fb      	bpl.n	8009788 <_printf_i+0x1c8>
 8009790:	8019      	strh	r1, [r3, #0]
 8009792:	2300      	movs	r3, #0
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	4615      	mov	r5, r2
 8009798:	e7ba      	b.n	8009710 <_printf_i+0x150>
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	1d1a      	adds	r2, r3, #4
 800979e:	602a      	str	r2, [r5, #0]
 80097a0:	681d      	ldr	r5, [r3, #0]
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	2100      	movs	r1, #0
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7f6 fd1a 	bl	80001e0 <memchr>
 80097ac:	b108      	cbz	r0, 80097b2 <_printf_i+0x1f2>
 80097ae:	1b40      	subs	r0, r0, r5
 80097b0:	6060      	str	r0, [r4, #4]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	2300      	movs	r3, #0
 80097b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097bc:	e7a8      	b.n	8009710 <_printf_i+0x150>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	47d0      	blx	sl
 80097c8:	3001      	adds	r0, #1
 80097ca:	d0ab      	beq.n	8009724 <_printf_i+0x164>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	079b      	lsls	r3, r3, #30
 80097d0:	d413      	bmi.n	80097fa <_printf_i+0x23a>
 80097d2:	68e0      	ldr	r0, [r4, #12]
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	4298      	cmp	r0, r3
 80097d8:	bfb8      	it	lt
 80097da:	4618      	movlt	r0, r3
 80097dc:	e7a4      	b.n	8009728 <_printf_i+0x168>
 80097de:	2301      	movs	r3, #1
 80097e0:	4632      	mov	r2, r6
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d09b      	beq.n	8009724 <_printf_i+0x164>
 80097ec:	3501      	adds	r5, #1
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	9903      	ldr	r1, [sp, #12]
 80097f2:	1a5b      	subs	r3, r3, r1
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dcf2      	bgt.n	80097de <_printf_i+0x21e>
 80097f8:	e7eb      	b.n	80097d2 <_printf_i+0x212>
 80097fa:	2500      	movs	r5, #0
 80097fc:	f104 0619 	add.w	r6, r4, #25
 8009800:	e7f5      	b.n	80097ee <_printf_i+0x22e>
 8009802:	bf00      	nop
 8009804:	08009c99 	.word	0x08009c99
 8009808:	08009caa 	.word	0x08009caa

0800980c <_read_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	; (800982c <_read_r+0x20>)
 8009810:	4604      	mov	r4, r0
 8009812:	4608      	mov	r0, r1
 8009814:	4611      	mov	r1, r2
 8009816:	2200      	movs	r2, #0
 8009818:	602a      	str	r2, [r5, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	f7f7 fedc 	bl	80015d8 <_read>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_read_r+0x1e>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_read_r+0x1e>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20001c38 	.word	0x20001c38

08009830 <__swbuf_r>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	460e      	mov	r6, r1
 8009834:	4614      	mov	r4, r2
 8009836:	4605      	mov	r5, r0
 8009838:	b118      	cbz	r0, 8009842 <__swbuf_r+0x12>
 800983a:	6983      	ldr	r3, [r0, #24]
 800983c:	b90b      	cbnz	r3, 8009842 <__swbuf_r+0x12>
 800983e:	f7ff f963 	bl	8008b08 <__sinit>
 8009842:	4b21      	ldr	r3, [pc, #132]	; (80098c8 <__swbuf_r+0x98>)
 8009844:	429c      	cmp	r4, r3
 8009846:	d12b      	bne.n	80098a0 <__swbuf_r+0x70>
 8009848:	686c      	ldr	r4, [r5, #4]
 800984a:	69a3      	ldr	r3, [r4, #24]
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	071a      	lsls	r2, r3, #28
 8009852:	d52f      	bpl.n	80098b4 <__swbuf_r+0x84>
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	b36b      	cbz	r3, 80098b4 <__swbuf_r+0x84>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	1ac0      	subs	r0, r0, r3
 800985e:	6963      	ldr	r3, [r4, #20]
 8009860:	b2f6      	uxtb	r6, r6
 8009862:	4283      	cmp	r3, r0
 8009864:	4637      	mov	r7, r6
 8009866:	dc04      	bgt.n	8009872 <__swbuf_r+0x42>
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f7ff fc3a 	bl	80090e4 <_fflush_r>
 8009870:	bb30      	cbnz	r0, 80098c0 <__swbuf_r+0x90>
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	701e      	strb	r6, [r3, #0]
 8009880:	6963      	ldr	r3, [r4, #20]
 8009882:	3001      	adds	r0, #1
 8009884:	4283      	cmp	r3, r0
 8009886:	d004      	beq.n	8009892 <__swbuf_r+0x62>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	07db      	lsls	r3, r3, #31
 800988c:	d506      	bpl.n	800989c <__swbuf_r+0x6c>
 800988e:	2e0a      	cmp	r6, #10
 8009890:	d104      	bne.n	800989c <__swbuf_r+0x6c>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f7ff fc25 	bl	80090e4 <_fflush_r>
 800989a:	b988      	cbnz	r0, 80098c0 <__swbuf_r+0x90>
 800989c:	4638      	mov	r0, r7
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <__swbuf_r+0x9c>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <__swbuf_r+0x7a>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7cf      	b.n	800984a <__swbuf_r+0x1a>
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <__swbuf_r+0xa0>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7ca      	b.n	800984a <__swbuf_r+0x1a>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f80c 	bl	80098d4 <__swsetup_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d0cb      	beq.n	8009858 <__swbuf_r+0x28>
 80098c0:	f04f 37ff 	mov.w	r7, #4294967295
 80098c4:	e7ea      	b.n	800989c <__swbuf_r+0x6c>
 80098c6:	bf00      	nop
 80098c8:	08009c44 	.word	0x08009c44
 80098cc:	08009c64 	.word	0x08009c64
 80098d0:	08009c24 	.word	0x08009c24

080098d4 <__swsetup_r>:
 80098d4:	4b32      	ldr	r3, [pc, #200]	; (80099a0 <__swsetup_r+0xcc>)
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	681d      	ldr	r5, [r3, #0]
 80098da:	4606      	mov	r6, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	b125      	cbz	r5, 80098ea <__swsetup_r+0x16>
 80098e0:	69ab      	ldr	r3, [r5, #24]
 80098e2:	b913      	cbnz	r3, 80098ea <__swsetup_r+0x16>
 80098e4:	4628      	mov	r0, r5
 80098e6:	f7ff f90f 	bl	8008b08 <__sinit>
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <__swsetup_r+0xd0>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d10f      	bne.n	8009910 <__swsetup_r+0x3c>
 80098f0:	686c      	ldr	r4, [r5, #4]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f8:	0719      	lsls	r1, r3, #28
 80098fa:	d42c      	bmi.n	8009956 <__swsetup_r+0x82>
 80098fc:	06dd      	lsls	r5, r3, #27
 80098fe:	d411      	bmi.n	8009924 <__swsetup_r+0x50>
 8009900:	2309      	movs	r3, #9
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	f04f 30ff 	mov.w	r0, #4294967295
 800990e:	e03e      	b.n	800998e <__swsetup_r+0xba>
 8009910:	4b25      	ldr	r3, [pc, #148]	; (80099a8 <__swsetup_r+0xd4>)
 8009912:	429c      	cmp	r4, r3
 8009914:	d101      	bne.n	800991a <__swsetup_r+0x46>
 8009916:	68ac      	ldr	r4, [r5, #8]
 8009918:	e7eb      	b.n	80098f2 <__swsetup_r+0x1e>
 800991a:	4b24      	ldr	r3, [pc, #144]	; (80099ac <__swsetup_r+0xd8>)
 800991c:	429c      	cmp	r4, r3
 800991e:	bf08      	it	eq
 8009920:	68ec      	ldreq	r4, [r5, #12]
 8009922:	e7e6      	b.n	80098f2 <__swsetup_r+0x1e>
 8009924:	0758      	lsls	r0, r3, #29
 8009926:	d512      	bpl.n	800994e <__swsetup_r+0x7a>
 8009928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800992a:	b141      	cbz	r1, 800993e <__swsetup_r+0x6a>
 800992c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009930:	4299      	cmp	r1, r3
 8009932:	d002      	beq.n	800993a <__swsetup_r+0x66>
 8009934:	4630      	mov	r0, r6
 8009936:	f7ff fc2f 	bl	8009198 <_free_r>
 800993a:	2300      	movs	r3, #0
 800993c:	6363      	str	r3, [r4, #52]	; 0x34
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	2300      	movs	r3, #0
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	f043 0308 	orr.w	r3, r3, #8
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	b94b      	cbnz	r3, 800996e <__swsetup_r+0x9a>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009964:	d003      	beq.n	800996e <__swsetup_r+0x9a>
 8009966:	4621      	mov	r1, r4
 8009968:	4630      	mov	r0, r6
 800996a:	f000 f847 	bl	80099fc <__smakebuf_r>
 800996e:	89a0      	ldrh	r0, [r4, #12]
 8009970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009974:	f010 0301 	ands.w	r3, r0, #1
 8009978:	d00a      	beq.n	8009990 <__swsetup_r+0xbc>
 800997a:	2300      	movs	r3, #0
 800997c:	60a3      	str	r3, [r4, #8]
 800997e:	6963      	ldr	r3, [r4, #20]
 8009980:	425b      	negs	r3, r3
 8009982:	61a3      	str	r3, [r4, #24]
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	b943      	cbnz	r3, 800999a <__swsetup_r+0xc6>
 8009988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800998c:	d1ba      	bne.n	8009904 <__swsetup_r+0x30>
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	0781      	lsls	r1, r0, #30
 8009992:	bf58      	it	pl
 8009994:	6963      	ldrpl	r3, [r4, #20]
 8009996:	60a3      	str	r3, [r4, #8]
 8009998:	e7f4      	b.n	8009984 <__swsetup_r+0xb0>
 800999a:	2000      	movs	r0, #0
 800999c:	e7f7      	b.n	800998e <__swsetup_r+0xba>
 800999e:	bf00      	nop
 80099a0:	20000010 	.word	0x20000010
 80099a4:	08009c44 	.word	0x08009c44
 80099a8:	08009c64 	.word	0x08009c64
 80099ac:	08009c24 	.word	0x08009c24

080099b0 <__swhatbuf_r>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	460e      	mov	r6, r1
 80099b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b8:	2900      	cmp	r1, #0
 80099ba:	b096      	sub	sp, #88	; 0x58
 80099bc:	4614      	mov	r4, r2
 80099be:	461d      	mov	r5, r3
 80099c0:	da08      	bge.n	80099d4 <__swhatbuf_r+0x24>
 80099c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	061a      	lsls	r2, r3, #24
 80099cc:	d410      	bmi.n	80099f0 <__swhatbuf_r+0x40>
 80099ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d2:	e00e      	b.n	80099f2 <__swhatbuf_r+0x42>
 80099d4:	466a      	mov	r2, sp
 80099d6:	f000 f851 	bl	8009a7c <_fstat_r>
 80099da:	2800      	cmp	r0, #0
 80099dc:	dbf1      	blt.n	80099c2 <__swhatbuf_r+0x12>
 80099de:	9a01      	ldr	r2, [sp, #4]
 80099e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e8:	425a      	negs	r2, r3
 80099ea:	415a      	adcs	r2, r3
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	e7ee      	b.n	80099ce <__swhatbuf_r+0x1e>
 80099f0:	2340      	movs	r3, #64	; 0x40
 80099f2:	2000      	movs	r0, #0
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	b016      	add	sp, #88	; 0x58
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080099fc <__smakebuf_r>:
 80099fc:	898b      	ldrh	r3, [r1, #12]
 80099fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a00:	079d      	lsls	r5, r3, #30
 8009a02:	4606      	mov	r6, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	d507      	bpl.n	8009a18 <__smakebuf_r+0x1c>
 8009a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	2301      	movs	r3, #1
 8009a12:	6163      	str	r3, [r4, #20]
 8009a14:	b002      	add	sp, #8
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	ab01      	add	r3, sp, #4
 8009a1a:	466a      	mov	r2, sp
 8009a1c:	f7ff ffc8 	bl	80099b0 <__swhatbuf_r>
 8009a20:	9900      	ldr	r1, [sp, #0]
 8009a22:	4605      	mov	r5, r0
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff f96b 	bl	8008d00 <_malloc_r>
 8009a2a:	b948      	cbnz	r0, 8009a40 <__smakebuf_r+0x44>
 8009a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a30:	059a      	lsls	r2, r3, #22
 8009a32:	d4ef      	bmi.n	8009a14 <__smakebuf_r+0x18>
 8009a34:	f023 0303 	bic.w	r3, r3, #3
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	e7e3      	b.n	8009a08 <__smakebuf_r+0xc>
 8009a40:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <__smakebuf_r+0x7c>)
 8009a42:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	6020      	str	r0, [r4, #0]
 8009a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	6163      	str	r3, [r4, #20]
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	6120      	str	r0, [r4, #16]
 8009a56:	b15b      	cbz	r3, 8009a70 <__smakebuf_r+0x74>
 8009a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f81f 	bl	8009aa0 <_isatty_r>
 8009a62:	b128      	cbz	r0, 8009a70 <__smakebuf_r+0x74>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	89a0      	ldrh	r0, [r4, #12]
 8009a72:	4305      	orrs	r5, r0
 8009a74:	81a5      	strh	r5, [r4, #12]
 8009a76:	e7cd      	b.n	8009a14 <__smakebuf_r+0x18>
 8009a78:	08008aa1 	.word	0x08008aa1

08009a7c <_fstat_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_fstat_r+0x20>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	f7f7 fdea 	bl	8001662 <_fstat>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d102      	bne.n	8009a98 <_fstat_r+0x1c>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	b103      	cbz	r3, 8009a98 <_fstat_r+0x1c>
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	bd38      	pop	{r3, r4, r5, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20001c38 	.word	0x20001c38

08009aa0 <_isatty_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	; (8009abc <_isatty_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f7 fde9 	bl	8001682 <_isatty>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_isatty_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_isatty_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20001c38 	.word	0x20001c38

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr
